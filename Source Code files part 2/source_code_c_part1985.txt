       UserMessage msg = MsgTestUtils.CreateAndSendMessage(user1, user2, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Delete and block
            DeleteMessage(user2, msg, true);
            EnsureBlocked(user1, user2);

            // Unblock by sending a message back to user 1
            MsgTestUtils.CreateAndSendMessage(user2, user1, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Ensure we're unblocked
            UserMessage msgUnblockVerify = MsgTestUtils.CreateAndSendMessage(user1, user2, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Block again
            DeleteMessage(user2, msgUnblockVerify, true);
            EnsureBlocked(user1, user2);
        }

        [TestCase(36434), Description("Block Sender who's PUID is 0" ), Ignore("Blocking PUID 0 causes an assert in xpserver")]
        public void P_Block_BlockSender_PuidZero()
        {
            PNUser user = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = SendLiveMessage(user, "P_Block_BlockSender_PuidZero");

            // Have User 2 wait for message
            UserMsgFolder inbox = new UserMsgFolder( user.UserId );
            UserMessage inMsg =  inbox.WaitForMsg( XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 0, 0xcccccccc, 10 );

            // Have 2 delete message and block sender
            inMsg.Delete( user, true );

            // Make sure message is gone
            inbox.Load();
            ValueCheck.Test( "Messsage Count", (ushort)0, inbox.Count );

            // Make sure 1 can't send to 2 anymore
            try
            {
                msg = SendLiveMessage(user, "P_Block_BlockSender_PuidZero 2");
            }
            catch( HResultException ex)
            {
                ValueCheck.TestHR("Blocked send HR", HResult.XONLINE_E_MESSAGE_SENDER_BLOCKED, ex.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Block Sender that already blocked user")]
        public void P_Delete_BlockSender_Twice()
        {
            // Create the users
            PNUser user1 = MsgTestUtils.Fc.CreateUser(true);
            PNUser user2 = MsgTestUtils.CreateCleanUser();

            // Send two messages from user1 -> user2
            UserMessage msg1 = MsgTestUtils.CreateAndSendMessage(user1, user2, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            UserMessage msg2 = MsgTestUtils.CreateAndSendMessage(user1, user2, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Delete both messages, blocking user1 in both calls
            DeleteMessage(user2, msg1, true);
            DeleteMessage(user2, msg2, true);

            // Make sure messages are gone
            UserMsgFolder msgFolder = new UserMsgFolder(user2);
            msgFolder.Load2();
            ValueCheck.Test("Messsage Count", (ushort)0, msgFolder.Count);

            // Make sure 1 can't send to 2 anymore
            EnsureBlocked(user1, user2);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Datacenter Port")]
        public void P_Delete_DCPort()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(
                sender,
                new PNUser[] { recipient },
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM
                );
            DeleteMessage(recipient, msg, false, true);
        }

        [TestCase, Description("Flagged Non Exportable, Datacenter Port")]
        public void P_Delete_Flagged_NonExportable_DCPort()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(
                sender,
                new PNUser[] { recipient },
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                0,
                MsgDetails.CreateBlank()
                );
            DeleteMessage(recipient, msg, false, true);
        }

        [TestCase, Description("User Not Logged On")]
        public void P_Delete_User_NotAlive()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, recipient, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            MsgTestUtils.Fc.LogoffUser(recipient);

            msg.Delete(recipient);
        }
    }

    [TestGroup]
    public class FuncDeleteMsg_NegativeCases : MessagingTestGroup
    {
        [TestCase, Description("User Doesn't Exist")]
        public void N_Delete_User_DoesNotExist()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, recipient, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            recipient.UserId += 0x1000000;

            QMsgDeleteMsg qMsgDeleteMsg = new QMsgDeleteMsg(recipient, msg.ID, 0);
            PNMsg reply;
            qMsgDeleteMsg.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QDeleteMsgReplyMsgData).Name, reply.Data.GetType().Name);
            QDeleteMsgReplyMsgData replyData = (QDeleteMsgReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.E_NO_SUCH_USER, replyData.HR);
        }

        [TestCase, Description("User PUID zero")]
        public void N_Delete_Zero_Puid()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, recipient, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            recipient.UserId = 0;

            // Delete for PUID zero
            QMsgDeleteMsg qMsgDeleteMsg = new QMsgDeleteMsg(recipient, msg.ID, 0);
            PNMsg reply;
            qMsgDeleteMsg.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QDeleteMsgReplyMsgData).Name, reply.Data.GetType().Name);
            QDeleteMsgReplyMsgData replyData = (QDeleteMsgReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.E_INVALIDARG, replyData.HR);
        }

        [TestCase, Description("Message ID zero")]
        public void N_Delete_Zero_MessageId()
        {
            PNUser user = MsgTestUtils.Fc.CreateUser(true);

            // Try to delete message ID zero
            QMsgDeleteMsg qMsgDeleteMsg = new QMsgDeleteMsg(user, 0, 0);
            PNMsg reply;
            qMsgDeleteMsg.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QDeleteMsgReplyMsgData).Name, reply.Data.GetType().Name);
            QDeleteMsgReplyMsgData replyData = (QDeleteMsgReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }

        [TestCase, Description("Message ID invalid")]
        public void N_Delete_Invalid_MessageId()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, recipient, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Increment the valid message ID to something invalid
            QMsgDeleteMsg qMsgDeleteMsg = new QMsgDeleteMsg(recipient, msg.ID + 1000, 0);
            PNMsg reply;
            qMsgDeleteMsg.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QDeleteMsgReplyMsgData).Name, reply.Data.GetType().Name);
            QDeleteMsgReplyMsgData replyData = (QDeleteMsgReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }

        [TestCase, Description("Same message twice")]
        public void N_Delete_Twice()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, recipient, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            DeleteMessage(recipient, msg);

            // Delete a second time
            QMsgDeleteMsg qMsgDeleteMsg = new QMsgDeleteMsg(recipient, msg.ID, 0);
            PNMsg reply;
            qMsgDeleteMsg.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QDeleteMsgReplyMsgData).Name, reply.Data.GetType().Name);
            QDeleteMsgReplyMsgData replyData = (QDeleteMsgReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }

        [TestCase, Description("Set invalid flags")]
        public void N_Delete_Set_Invalid_Flags()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, recipient, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Set each bit of a DWORD (32 bits)
            for (int i = 1; i < 32; ++i)
            {
                uint setFlag = (uint)(1 << i);

                // Don't test valid flags
                if (setFlag == XonPresNoti.DELETE_MESSAGE_FLAG_BLOCK_SENDER)
                    continue;

                Global.RO.Info("Setting flag {0:X08}", setFlag);

                QMsgDeleteMsg qMsgDeleteMsg = new QMsgDeleteMsg(recipient, msg.ID, setFlag);
                PNMsg reply;
                qMsgDeleteMsg.TransactFD( out reply);

                ValueCheck.Test("Reply Data Type", typeof(QDeleteMsgReplyMsgData).Name, reply.Data.GetType().Name);
                QDeleteMsgReplyMsgData replyData = (QDeleteMsgReplyMsgData)(reply.Data);
                ValueCheck.TestHR("Reply HR", HResult.E_INVALIDARG, replyData.HR);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncEnumMsgs.cs ===
using System;
using System.IO;
using System.Text;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for EnumMessages
    /// </summary>
    ///
    /// Positive cases check for success hr.  Because this message is used to validate the
    ///   exhaustive set of Send cases this list is short.  Summary contents will be checked
    ///   against expected.
    /// Negative Casescheck for failure hr that makes sense and is consistent.
    [TestGroup]
    public class FuncEnumMsgs_PositiveCases : MessagingTestGroup
    {
        static Report ro = new Report("FuncEnumMsgs_PositiveCases");

        [TestCase]
        public void P_Mainline()
        {
            PNUser sender = Globals.Fc.CreateXboxUser(true);
            PNUser user   = Globals.Fc.CreateXboxUser(true);

            UserMessage msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 10 );
            msg.Send( sender, user );

            WaitAndValidateMessage(user, msg);
        }


        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "No messages, they Expired" )]
        public void NoMessages_Expired()
        {
            PNUser sender = Globals.Fc.CreateXboxUser(true);
            PNUser user   = Globals.Fc.CreateXboxUser(true);

            UserMessage msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 1 );

            msg.Send( sender, user );
            WaitAndValidateMessage(user, msg);

            ro.Debug( "Waiting for message to expire" );
            Thread.Sleep( new TimeSpan( 0, 2, 0 ) ); // 2 Minutes
            UserMsgFolder inbox = new UserMsgFolder(user);
            inbox.LoadEx();
            ValueCheck.Test( "Message Count", (ushort)0, inbox.Count );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Required messaged won't get implicitly deleted when list gets full" )]
        public void RequiredMessages_NotPushedOut()
        {
            // Create Users
            PNUser[] senders = new PNUser[10];
            for(int iUser = 0; iUser < senders.Length; iUser++)
            {
                senders[iUser] = Globals.Fc.CreateXboxUser(true);
            }
            PNUser reqsender = Globals.Fc.CreateXboxUser(true);
            PNUser user      = Globals.Fc.CreateXboxUser(true);

            // Deliver required message to user
            UserMessage reqMsg = UserMessage.Create( reqsender, XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 0, XonPresNoti.MSG_FLAG_REQUIRED, 0 );
            reqMsg.Send( reqsender, user );
            UserMsgFolder inbox = new UserMsgFolder( user );
            UserMessage inMsg = inbox.WaitForMsg( XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 0, 30 );
            ulong reqMsgId = inMsg.ID;

            // now send a couple hundred non required messages
            int j = 0;
            foreach (PNUser sender in senders)
            {
                for (int i = 1; i <= 20; ++i)
                {
                    UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)(i+j), 0, 0);
                    msg.Send(sender, user);
                    inbox.WaitForMsgByContext(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)(i + j), 30);
                }
                j += 20;
            }

            // Make sure required message is still there
            inbox.LoadEx();
            UserMessage[] msgs = inbox.Find( XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 0 );
            ValueCheck.Test( "Req Message Count", 1, msgs.Length );
            ValueCheck.Test( "Req Message ID", reqMsgId, msgs[0].ID );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Checck deletion of oldest messsages" )]
        public void P_OldestPushedOut_MultiSender()
        {
            // Create Users
            PNUser sender = Globals.Fc.CreateXboxUser(true);
            PNUser user   = Globals.Fc.CreateXboxUser(true);

            // Deliver required message to user
            UserMsgFolder inbox = new UserMsgFolder( user );

            UserMessage msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)1, 0, 0 );
            uint firstMsgID = msg.Send( sender, user );
            inbox.WaitForMsgByContext( XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)1, 30 );

            // now send a couple hundred non required messages
            for( int i = 2; i <= 100; ++i )
            {
                sender = Globals.Fc.CreateXboxUser(true);
                msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)i, 0, 0 );
                msg.Send( sender, user );
                inbox.WaitForMsgByContext( XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)i, 30 );
            }

            msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)101, 0, 0 );
            uint oneHundredFirstMsgID = msg.Send( sender, user );
            inbox.WaitForMsgByContext( XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)101, 30 );

            // Make sure 101st is still there
            inbox.LoadEx();
            ValueCheck.Test( "Message Count", (ushort)100, inbox.Count );

            UserMessage[] msgs = inbox.FindByContext( XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)1 );
            ValueCheck.Test( "Messages with context = 1", 0, msgs.Length );

            msgs = inbox.FindByContext( XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)101 );
            ValueCheck.Test( "Messages with context = 101", 1, msgs.Length );
            ValueCheck.Test( "ID of contest 101 Message", oneHundredFirstMsgID, msgs[0].ID );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Flagged Non Exportable" ), Ignore]
        public void P_Flagged_NonExportable()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "DataCenter Port (no SPI Data)" ), Ignore]
        public void P_NoSpiData_DCPort()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "User Not Logged On" ), Ignore]
        public void P_User_NotAlive()
        {
        }
    }

    [TestGroup]
    public class FuncEnumMsgs_NegativeCases : MessagingTestGroup
    {
        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "User Doesn't Exist" ), Ignore]
        public void N_User_DoesNotExist()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "User PUID zero" ), Ignore]
        public void N_User_Zero()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Flagged Non Exportable, Datacenter Port" ), Ignore]
        public void N_Flagged_NonExportable_DCPort()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "No messages" ), Ignore]
        public void N_NoMessages()
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncGetMsgSummary.cs ===
using System;
using ServerTestFramework;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tets for GetMessageSummary
    /// </summary>
    /// Positive cases check for success hr. Because this message is used to validate the
    ///   exhaustive set of Send cases this list is short.  Summary contents will be checked
    ///   against expected.
    /// Negative Casescheck for failure hr that makes sense and is consistent.
    [TestGroup]
        public void FuncGetMsgSummary()
    {
        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Non Exportable" )]
        public void Flagged_NonExportable()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "DataCenter Port (no SPI Data)" )]
        public void NoSpiData_DCPort()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "User Not Logged On" )]
        public void User_NotAlive()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Check X-Delay" )]
        public void XDelayCheck()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong URL, Notification" )]
        public void Url_Notification()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong URL, Presence" )]
        public void Url_Presence()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong URL, Messaging" )]
        public void Url_Messaging()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong UA version" )]
        public void UserAgent_WrongVersion()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "User Doesn't Exist" )]
        public void User_DoesNotExist()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "User PUID zero" )]
        public void User_Zero()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Message ID zero" )]
        public void MessageId_Zero()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Message ID invalid" )]
        public void MessageId_Invalid()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Non Exportable, Datacenter Port" )]
        public void Flagged_NonExportable_DCPort()
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncEnumSystemMsgs.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using Microsoft.Webstore.WstClient;
using xonline.common.config;
using xonline.common.sql.webstore;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for EnumSystemMessages
    /// </summary>
    /// Positive cases check for success hr. Changes are verified with QMSG_ENUM_SYSTEM_MESSAGES.
    /// Negative Cases check for failure hr that makes sense and is consistent.
    [TestGroup]
    public class FuncEnumSystemMsgs : TestNode
    {
        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Simple enumeration of system messages" )]
        public void P_Mainline()
        {

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Enumerate required system messages" )]
        public void P_Required()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Required,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Enumerate normal system messages")]
        public void P_Normal()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Enumerate recommended system messages")]
        public void P_Recommended()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message that hasn't been sent yet")]
        public void MessageNotSent()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                60,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Title ID zero")]
        public void TitleId_Zero()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                0,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(0);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);

            // Best effort to clean up the message
            try
            {
                sysMsg.Delete(SystemMessage.RevokeAlso.Yes);
            }
            catch (Exception ex)
            {
                Global.RO.Warn("Error deleting message: {0}", ex.Message);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Title ID for Xenon dashboard")]
        public void TitleId_Dash()
        {
            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                XOn.XENON_DASH_TITLE_ID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(XOn.XENON_DASH_TITLE_ID);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);

            // Best effort to clean up the message
            try
            {
                sysMsg.Delete(SystemMessage.RevokeAlso.Yes);
            }
            catch (Exception ex)
            {
                Global.RO.Warn("Error deleting message: {0}", ex.Message);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Delete and revoke a message, verify it doesn't appear in the list")]
        public void DeleteAndRevoke()
        {
            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            sysFolder[msgId].Delete(SystemMessage.RevokeAlso.Yes);
            sysFolder.Load();

            ValueCheck.TestNull("Deleted and Revoked Message", sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Delete and revoke a message that hasn't been sent, verify it doesn't appear in the list")]
        public void DeleteAndRevokeNotSent()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                60,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            sysFolder[msgId].Delete(SystemMessage.RevokeAlso.Yes);
            sysFolder.Load();

            ValueCheck.TestNull("Deleted and Revoked Message", sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Datacenter port (no SPI data)")]
        public void NoSpiData_DCPort()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load(true);

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Let a message expire, verify it doesn't appear in the list")]
        public void ExpiredMessage()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                1
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();

            // Verify the message
            sysMsg.Check(sysFolder[msgId]);

            // Sleep for 90 seconds to ensure the expiration time is past
            Thread.Sleep(new TimeSpan(0, 1, 30));

            // Force the expiration sproc to execute.  Unlike user message enumeration,
            // system message enumeration does not filter expired messages from the
            // results.  Instead, it relies on a SQL expiration task which fires every
            // 5 minutes.  We are too impatient for that.
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                // System messages are stored on all UODB partitions, so we need to ensure that
                // every partition has the delete sproc invoked
                foreach (int physicalParititon in WSClient.GetPhysicalPartitions(ConfigUtil.UodbWebstoreApp))
                {
                    ws.PhysicalPartition = physicalParititon;
                    ws.StoredProc = "dbo.p_xmsg_messages_delete_expired";
                    ws.ExecuteNonQuery();
                }
            }

            // Enumerate again
            sysFolder.Load();
            ValueCheck.TestNull("Expired Message", sysFolder[msgId]);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "No messages, never sent" )]
        public void NoMessages_NoneSent()
        {

            uint titleId = MsgTestUtils.DefaultSystemTitleID + 1;
            SystemMsgFolder.DeleteAll(titleId, SystemMessage.RevokeAlso.No);

            SystemMsgFolder sysFolder = new SystemMsgFolder(titleId);
            sysFolder.Load();
            ValueCheck.Test("Folder Message Count", (ushort)0, sysFolder.Count);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Enumerate twice, expecting the same results each time")]
        public void EnumerateTwice()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder1 = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder1.Load();

            SystemMsgFolder sysFolder2 = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder2.Load();

            ValueCheck.Test("Folder Counts", sysFolder1.Count, sysFolder2.Count);
            ValueCheck.Test("Folder Title IDs", sysFolder1.TitleId, sysFolder2.TitleId);

            foreach (SystemMessage msg in sysFolder1.Messages)
            {
                ValueCheck.TestNotNull("Message in Second Folder", sysFolder2[msg.ID]);
                msg.Check(sysFolder2[msg.ID]);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Enumerates the maximum number of system messages")]
        public void MaxMessages()
        {

            try
            {
                SystemMessage[] msgList = new SystemMessage[XonPresNoti.MAX_RETURNED_SYSTEM_MSGS];
                uint[] idList = new uint[msgList.Length];

                Message.Priority[] priorities = new Message.Priority[] {
                    Message.Priority.Normal,
                    Message.Priority.Recomended,
                    Message.Priority.Required
                };

                SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
                sysFolder.Load();
                sysFolder.DeleteAll(SystemMessage.RevokeAlso.No);

                for (int i = 0; i < msgList.Length; ++i)
                {
                    msgList[i] = SystemMessage.CreateLiveMsg(
                        priorities[RandomEx.GlobalRandGen.Next(priorities.Length)],
                        "MessagingTest",
                        MsgTestUtils.DefaultSystemTitleID,
                        (uint)RandomEx.GlobalRandGen.Next(1, 13),
                        RandomEx.GlobalRandGen.GenerateRandomString(32),
                        1,
                        (ushort)RandomEx.GlobalRandGen.NextLog(),
                        (ushort)RandomEx.GlobalRandGen.Next(5, (int)XonPresNoti.GetDefaultExpirationForMsgType(XonPresNoti.MSG_TYPE_LIVE_MESSAGE) + 1)
                        );
                    idList[i] = msgList[i].Send();
                }

                sysFolder.Load();
                ValueCheck.Test("System Message Count", msgList.Length, sysFolder.Count);

                // Verify the messages
                for (int i = 0; i < msgList.Length; ++i)
                {
                    ValueCheck.TestNotNull(
                        String.Format("Message {0}, ID {1}", i, idList[i]),
                        sysFolder[idList[i]]
                        );
                    msgList[i].Check(sysFolder[idList[i]]);
                }

            }
            finally
            {
                // Best effort to clean up
                try
                {
                    SystemMsgFolder.DeleteAll(MsgTestUtils.DefaultSystemTitleID, SystemMessage.RevokeAlso.No);
                }
                catch(Exception)
                {
                    // Do nothing
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncEnumTitles.cs ===
using System;
using System.IO;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Storage;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;
using Microsoft.Webstore.WstClient;
using xonline.common.config;
using xonline.common.sql.webstore;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for EnumTitles
    /// </summary>
    /// Positive cases check for success hr, and verify count and contents of title info blocks.
    /// Negative Casescheck for failure hr that makes sense and is consistent
    [TestGroup]
    public class FuncEnumTitles : MessagingTestGroup
    {
        [TestCase, Description( "Alive with no Alt titles" )]
        public void P_Alive_NoAlt()
        {
            PNUser u = MsgTestUtils.CreateCleanUser();
            UserTitle[] titles = u.EnumerateTitles();
            ValidateContains(titles, u.Xbox.TitleId);
        }

        [TestCase, Description( "Alive in multiple titles" )]
        public void P_Alive_MultipleTitles()
        {
            PNUser u = MsgTestUtils.CreateCleanUser();
            uint firstTitle = u.Xbox.TitleId;
            uint nextTitle = firstTitle + 1;
            MsgTestUtils.Fc.LogoffUser(u);
            u.Xbox.ChangeTitle(nextTitle, 0, 0);
            MsgTestUtils.Fc.LogonUser(u);
            UserTitle []titles = u.EnumerateTitles();

            ValidateContains(titles, firstTitle);
            ValidateContains(titles, nextTitle);
        }


        [TestCase, Description( "Alt title ID does not appear in played games list" )]
        public void P_Alive_OneAltNotPlayed()
        {
            PNUser u = MsgTestUtils.CreateCleanUser();

            // Set one alternate title ID in each slot
            for (uint i = 0; i < 4; ++i)
            {
                GlobalFakeSG.FakeSG.SetAltTitles(
                    u.Xbox.XboxId,
                    new uint[] {
                        i == 0 ? u.Xbox.TitleId + i + 1 : 0,
                        i == 1 ? u.Xbox.TitleId + i + 1 : 0,
                        i == 2 ? u.Xbox.TitleId + i + 1 : 0,
                        i == 3 ? u.Xbox.TitleId + i + 1 : 0
                    });

                UserTitle[] titles = u.EnumerateTitles();

                // We should only ever have our base title ID because we haven't
                // actually played the alternate title IDs
                ValueCheck.Test("Titles Count", (int)1, titles.Length);
                ValidateContains(titles, u.Xbox.TitleId);
            }
        }

        [TestCase, Description("Play an alt title ID, verify it appears in the list")]
        public void P_Alive_OneAltPlayed()
        {
            // Set one alternate title ID in each slot
            for (uint i = 0; i < 4; ++i)
            {
                PNUser u = MsgTestUtils.CreateCleanUser();
                uint origTitleId = u.Xbox.TitleId;

                GlobalFakeSG.FakeSG.SetAltTitles(
                    u.Xbox.XboxId,
                    new uint[] {
                        i == 0 ? u.Xbox.TitleId + i + 1 : 0,
                        i == 1 ? u.Xbox.TitleId + i + 1 : 0,
                        i == 2 ? u.Xbox.TitleId + i + 1 : 0,
                        i == 3 ? u.Xbox.TitleId + i + 1 : 0
                    });

                MsgTestUtils.Fc.LogoffUser(u);
                u.Xbox.ChangeTitle(origTitleId + i + 1);
                MsgTestUtils.Fc.LogonUser(u);

                // Both the primary and the single alternate should be in the list
                UserTitle[] titles = u.EnumerateTitles();
                ValueCheck.Test("Titles Count", (int)2, titles.Length);
                ValidateContains(titles, origTitleId);
                ValidateContains(titles, origTitleId + i + 1);
            }
        }

        [TestCase, Description("Play primary title ID with 4 alt title IDs, only the primary should appear")]
        public void P_Alive_FourAltNotPlayed()
        {
            PNUser u = MsgTestUtils.CreateCleanUser();

            // Set four alternate title IDs
            GlobalFakeSG.FakeSG.SetAltTitles(
                u.Xbox.XboxId,
                new uint[] {
                    u.Xbox.TitleId + 1,
                    u.Xbox.TitleId + 2,
                    u.Xbox.TitleId + 3,
                    u.Xbox.TitleId + 4
                });

            // We should only have the primary title ID
            UserTitle[] titles = u.EnumerateTitles();
            ValueCheck.Test("Titles Count", (int)1, titles.Length);
            ValidateContains(titles, u.Xbox.TitleId);
        }

        [TestCase, Description("Play all four alternate title IDs, verify they all appear in the list")]
        public void P_Alive_FourAltPlayed()
        {
            PNUser u = MsgTestUtils.CreateCleanUser();
            uint origTitleId = u.Xbox.TitleId;

            // Set four alternate title IDs
            GlobalFakeSG.FakeSG.SetAltTitles(
                u.Xbox.XboxId,
                new uint[] {
                    u.Xbox.TitleId + 1,
                    u.Xbox.TitleId + 2,
                    u.Xbox.TitleId + 3,
                    u.Xbox.TitleId + 4
                });

            // Play each title ID
            for (uint i = 1; i < 5; ++i)
            {
                MsgTestUtils.Fc.LogoffUser(u);
                u.Xbox.ChangeTitle(origTitleId + i);
                MsgTestUtils.Fc.LogonUser(u);
            }

            // All five (primary + 4 alts) title IDs should appear in the list
            UserTitle[] titles = u.EnumerateTitles();
            ValueCheck.Test("Titles Count", (int)5, titles.Length);

            for (uint i = 0; i < 5; ++i)
                ValidateContains(titles, origTitleId + i);
        }

        [TestCase, Description("Alive cache doesn't change last logon time.")]
        public void P_Alive_LastLogonUnchanged()
        {
            PNUser u = MsgTestUtils.CreateCleanUser();
            UserTitle[] titles = u.EnumerateTitles();
            ValidateContains(titles, u.Xbox.TitleId);
            MsgTestUtils.Fc.LogoffUser(u);
            MsgTestUtils.Fc.LogonUser(u);
            ValueCheck.Test("EnumTitles.Length", 1, titles.Length);
            ValidateContains(titles, u.Xbox.TitleId);
        }

        [TestCase, Description("Enumerate a user with lots of titles played")]
        public void P_MaxNumTitles()
        {
            const uint c_NumTitlesToTest = XonPresNoti.MAX_RETURNED_USER_TITLES + 5;
            PNUser u = MsgTestUtils.CreateCleanUser();

            Global.RO.Info("Creating {0} total titles", c_NumTitlesToTest);

            // Insert all the titles by using the sproc directly
            for (uint i = 1; i < c_NumTitlesToTest; ++i)
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.PartitionType = WstPartitionType.Logical;
                    ws.SetHashVal(u.UserId);

                    ws.StoredProc = "dbo.p_xmsg_user_title_update";
                    ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                    ws.AddParameter("@bi_user_puid", u.UserId);
                    ws.AddParameter("@i_title_id", u.Xbox.TitleId + i);
                    ws.AddParameter("@i_user_region", 1); // TODO
                    ws.AddParameter("@dt_system_msg_read", DateTime.UtcNow);
                    ws.AddParameter("@dt_now", DateTime.UtcNow);
                    ws.AddParameter("@si_hash_bucket", ws.Partition);
                    ws.AddParameter("@f_partner_opt_in", (short)0);
                    ws.AddParameter("@f_ms_opt_in", (short)0);
                    ws.AddParameter(ParamType.OUTPUT, "@f_system_msgs_found", 0);

                    ws.ExecuteNonQuery();

                    uint hr = (uint)ws.GetIntParameter("@RETVAL");
                    if (HResult.Failed(hr))
                        Global.RO.Warn("{0} failed with HR = {1}, i = {2}", ws.GetCallSignature(), hr, i);
                }
            }

            UserTitle[] titles = u.EnumerateTitles();
            ValueCheck.Test("Title Count", XonPresNoti.MAX_RETURNED_USER_TITLES, titles.Length);

            for (uint i = 0; i < XonPresNoti.MAX_RETURNED_USER_TITLES; ++i)
                ValidateContains(titles, u.Xbox.TitleId + i);
        }

        [TestCase, Description("User Doesn't Exist")]
        public void N_User_DoesNotExist()
        {
            PNUser u = MsgTestUtils.Fc.CreateUser(true);

            u.UserId += 0x1000000;
            QMsgEnumTitles qMsgEnumTitles = new QMsgEnumTitles(u);
            PNMsg reply;
            qMsgEnumTitles.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QEnumTitlesReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumTitlesReplyMsgData msgData = (QEnumTitlesReplyMsgData)reply.Data;
            ValueCheck.TestHR("Reply HR", HResult.E_NO_SUCH_USER, msgData.HR);
        }

        [TestCase, Description( "User Not Logged On" )]
        public void N_User_NotAlive()
        {
            PNUser u = MsgTestUtils.Fc.CreateUser(false);

            QMsgEnumTitles qMsgEnumTitles = new QMsgEnumTitles(u);
            PNMsg reply;
            qMsgEnumTitles.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QEnumTitlesReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumTitlesReplyMsgData msgData = (QEnumTitlesReplyMsgData)reply.Data;
            ValueCheck.TestHR("Reply HR", HResult.E_NO_SUCH_USER, msgData.HR);
        }

        [TestCase, Description( "User PUID zero" )]
        public void N_User_Zero()
        {
            PNUser u = MsgTestUtils.Fc.CreateUser(false);
            u.UserId = 0;

            QMsgEnumTitles qMsgEnumTitles = new QMsgEnumTitles(u);
            PNMsg reply;
            qMsgEnumTitles.TransactFD( out reply);

            ValueCheck.Test("Reply Data Type", typeof(QEnumTitlesReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumTitlesReplyMsgData msgData = (QEnumTitlesReplyMsgData)reply.Data;
            ValueCheck.TestHR("Reply HR", HResult.E_INVALIDARG, msgData.HR);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncPerfCounters.cs ===
using System.Diagnostics;
using System.Threading;

using xonline.common.diagnostics;

using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for Messaging FD Performance Counters.
    /// </summary>
    [TestGroup, EnvRequirement("Manual")]
    public class FuncPerfCounters_PositiveCases : TestNode
    {
        // Each complete message takes more than 1 perf counter increment, so this tracks how many it actually takes
        const int REQUESTS_PER_MESSAGE = 7;
        const int REQUESTS_PER_SYSTEM_MESSAGE = 2;
        /*
         * The perf counters, to date
         *
         * XBL Messaging FD - API (these have a variety of counters, check perfmon)
         *   Average Response Time
         *   Failure Rate
         *   Requests Per Second
         *   Success Rate
         *
         * XBL Messaging FD - XRL (these all just have _total_)
         *   Failures, Per Sec
         *   Failures, Total
         *   Requests, Avg. Execution Time (in ms)
         *   Requests, In Progress
         *   Requests, Per Sec
         *   Requests, Total
         *
         * */

        // Non system message from 1 user to another
        //
        private static void General_Send_MessageType(byte msgType)
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(u[0], u[1], msgType);
        }

        // A set system message, no randomness
        //
        static uint SendSystemMessage()
        {
            uint titleId = 0;

            // Build and send message
            SystemMessage msg =
                SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MsgPerfTest",
                titleId,
                0, //region,
                "Messaging Perf Test", //description,
                1, // string Id
                2,
                3);
            msg.Flags |= XonPresNoti.MSG_FLAG_HAS_TEXT;
            uint msgId = msg.Send();

            // Fetch copy and validate message
            SystemMessage msgFetched = new SystemMessage(titleId, msgId);
            msg.CheckSystemMessage(msgFetched);

            return msgId;
        }

        // Wrappers around getting perf counters
        //
        static long GetRequestsTotalXRL()
        {
            int MessagingFDCount = Global.XEnv.GetServerListByComponent("xpnfd_messaging").Length;

            long messagesSent = 0;
            for (int i = 0; i < MessagingFDCount; i++)
            {
                PerformanceCounter clientMessageCounter = new PerformanceCounter();
                clientMessageCounter.MachineName = Global.XEnv.GetServerListByComponent("xpnfd_messaging")[i];
                clientMessageCounter.CategoryName = "XBL Messaging FD - XRL";
                clientMessageCounter.CounterName = "Requests, Total";
                clientMessageCounter.InstanceName = "_total_";
                messagesSent += clientMessageCounter.RawValue;
            }

            return messagesSent;
        }

        static long GetFailuresTotalXRL()
        {
            int MessagingFDCount = Global.XEnv.GetServerListByComponent("xpnfd_messaging").Length;

            long failuresTotal = 0;
            for (int i = 0; i < MessagingFDCount; i++)
            {
                PerformanceCounter clientMessageCounter = new PerformanceCounter();
                clientMessageCounter.MachineName = Global.XEnv.GetServerListByComponent("xpnfd_messaging")[i];
                clientMessageCounter.CategoryName = "XBL Messaging FD - XRL";
                clientMessageCounter.CounterName = "Failures, Total";
                clientMessageCounter.InstanceName = "_total_";
                failuresTotal += clientMessageCounter.RawValue;
            }

            return failuresTotal;
        }

        static long GetSuccessRateAPI()
        {
            int MessagingFDCount = Global.XEnv.GetServerListByComponent("xpnfd_messaging").Length;

            long successRate = 0;
            for (int i = 0; i < MessagingFDCount; i++)
            {
                PerformanceCounter clientMessageCounter = new PerformanceCounter();
                clientMessageCounter.MachineName = Global.XEnv.GetServerListByComponent("xpnfd_messaging")[i];
                clientMessageCounter.CategoryName = "XBL Messaging FD - API";
                clientMessageCounter.CounterName = "Success Rate";
                clientMessageCounter.InstanceName = "_total_";
                successRate += clientMessageCounter.RawValue;
            }

            return successRate;
        }

        /// <summary>
        /// Sends 1 of each type of message and confirms that the totals are correct
        /// </summary>
        [TestCase, TestFrequency("Regression"), TestCasePriority(3)]
        public void SendEachMessageTypeXRL()
        {

            // Get the before perf counter numbers
            //
            long sumMessagesSentBefore = GetRequestsTotalXRL();
            long sumMessageFailuresBefore = GetFailuresTotalXRL();

            // Send a set number of messages
            //
            int totalMessagesSent = 0;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_FRIEND_REQUEST);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_LIVE_MESSAGE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE);
            totalMessagesSent++;

            // Get the actual number of requests per message
            //
            totalMessagesSent *= REQUESTS_PER_MESSAGE;

            // Safety conscious!
            //
            Thread.Sleep(5000);

            // Get the after perf counter numbers
            //
            long sumMessagesSentAfter = GetRequestsTotalXRL();
            long sumMessageFailuresAfter = GetFailuresTotalXRL();

            Assert.IsTrue(sumMessagesSentAfter - sumMessagesSentBefore == totalMessagesSent, "Sent message totals wrong. Before: " + sumMessagesSentBefore + " After: " + sumMessagesSentAfter);
            Assert.IsTrue(sumMessageFailuresAfter - sumMessageFailuresBefore == 0, "There were message send failure! Before: " + sumMessageFailuresBefore + " After: " + sumMessageFailuresAfter);
        }

        /// <summary>
        /// Sends 1 system and confirms that the totals are correct
        /// </summary>
        [TestCase, TestFrequency("Regression"), TestCasePriority(3)]
        public void SendSystemMessageXRL()
        {

            // Get the before perf counter numbers
            //
            long sumMessagesSentBefore = GetRequestsTotalXRL();
            long sumMessageFailuresBefore = GetFailuresTotalXRL();

            // Send a set number of messages
            //
            int totalMessagesSent = 0;
            SendSystemMessage();
            totalMessagesSent++;

            totalMessagesSent *= REQUESTS_PER_SYSTEM_MESSAGE;

            Thread.Sleep(5000);

            // Get the after perf counter numbers
            //
            long sumMessagesSentAfter = GetRequestsTotalXRL();
            long sumMessageFailuresAfter = GetFailuresTotalXRL();

            Assert.IsTrue(sumMessagesSentAfter - sumMessagesSentBefore == totalMessagesSent, "Sent message totals wrong. Before: " + sumMessagesSentBefore + " After: " + sumMessagesSentAfter);
            Assert.IsTrue(sumMessageFailuresAfter - sumMessageFailuresBefore == 0, "There were message send failure! Before: " + sumMessageFailuresBefore + " After: " + sumMessageFailuresAfter);
        }

        /// <summary>
        /// Sends 1 of each type of message and confirms that the totals are correct
        /// </summary>
        [TestCase, TestFrequency("Regression"), TestCasePriority(3)]
        public void SendEachMessageTypeAPI()
        {

            // Get the before per counter numbers
            //
            long sumMessagesSentBefore = GetSuccessRateAPI();

            // Send a set number of messages
            //
            int totalMessagesSent = 0;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_FRIEND_REQUEST);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_LIVE_MESSAGE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            totalMessagesSent++;
            General_Send_MessageType(XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE);
            totalMessagesSent++;

            totalMessagesSent *= REQUESTS_PER_MESSAGE;

            Thread.Sleep(5000);

            // Get the after perf counter numbers
            //
            long sumMessagesSentAfter = GetSuccessRateAPI();

            Assert.IsTrue(sumMessagesSentAfter - sumMessagesSentBefore == totalMessagesSent, "Sent message totals wrong. Before: " + sumMessagesSentBefore + " After: " + sumMessagesSentAfter);
        }

        /// <summary>
        /// Sends 1 system message and confirms that the totals are correct
        /// </summary>
        [TestCase, TestFrequency("Regression"), TestCasePriority(3)]
        public void SendSystemMessageAPI()
        {

            // Get the before per counter numbers
            //
            long sumMessagesSentBefore = GetSuccessRateAPI();

            // Send a set number of messages
            //
            int totalMessagesSent = 0;
            SendSystemMessage();
            totalMessagesSent++;

            totalMessagesSent *= REQUESTS_PER_SYSTEM_MESSAGE;

            Thread.Sleep(5000);

            // Get the after perf counter numbers
            //
            long sumMessagesSentAfter = GetSuccessRateAPI();

            Assert.IsTrue(sumMessagesSentAfter - sumMessagesSentBefore == totalMessagesSent, "Sent message totals wrong. Before: " + sumMessagesSentBefore + " After: " + sumMessagesSentAfter);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncGetMsgSummary2.cs ===
using System;
using System.Collections;
using System.IO;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for MessageSummary2
    /// </summary>
    /// <remarks>
    /// <Description>
    ///
    ///     <p>
    ///     MessageSummary2 is a new server API instroduced with Xenon to allow retrieving a single
    ///     message summary from the server for a given user and message ID.  It is different from
    ///     MessageSummary (v1) because it also has the message subject in the reply data.
    ///     </p>
    ///
    ///        <div class="test_data_label">
    ///        MessageSummary2 Request Format:
    ///        </div>
    ///        <table class="test_data">
    ///            <tr><td>ULONGLONG qwUserID</td><td>UserID to query</td></tr>
    ///            <tr><td>DWORD dwMessageID</td><td>MessageID to query</td></tr>
    ///        </table>
    ///
    ///        <div class="test_data_label">
    ///        MessageSummary2 Reply Format:
    ///        </div>
    ///        <table class="test_data">
    ///            <tr><td>HRESULT hr                      </td><td>Result of the summary call</td></tr>
    ///            <tr><td>Q_MESSAGE_SUMMARY_2 summary     </td><td>Message summary payload</td></tr>
    ///        </table>
    ///
    ///        <div class="test_data_label">
    ///        MessageSummary2 Reply Item Format:
    ///        </div>
    ///        <table class="test_data">
    ///         <tr><td>ULONGLONG qwSenderID                      </td><td>Unique user ID of the sender</td></tr>
    ///            <tr><td>ULONGLONG qwSenderContext                 </td><td>Configurable 64bit context of the sender</td></tr>
    ///            <tr><td>MSGTIME mtSentTime                        </td><td>Server message time message was sent</td></tr>
    ///            <tr><td>DWORD dwMessageID                         </td><td>Message ID in the user message folder</td></tr>
    ///            <tr><td>DWORD dwMessageFlags                      </td><td>See SendMessage for flag definitions</td></tr>
    ///            <tr><td>DWORD dwSenderTitleID                     </td><td>TitleID message was sent from</td></tr>
    ///            <tr><td>WORD wExpireMinutes                       </td><td>An offset in minutes from the sent time</td></tr>
    ///            <tr><td>WORD cbDetails                            </td><td>Number of bytes available</td></tr>
    ///            <tr><td>BYTE bMessageType                         </td><td>Message types, see SendMessage for definitions</td></tr>
    ///            <tr><td>CHAR szSenderName[XONLINE_GAMERTAG_SIZE-1]</td><td>Sender gamertag - ASCII</td></tr>
    ///            <tr><td>WCHAR szSubject[XONLINE_MAX_SUBJECT_SIZE] </td><td>Subject line - UTF-16</td></tr>
    ///        </table>
    ///
    ///        <div class="test_data_label">
    ///        MessageSummary2 Constants:
    ///        </div>
    ///        <table class="test_data">
    ///            <tr><td>XONLINE_GAMERTAG_SIZE</td><td>16</td></tr>
    ///            <tr><td>XONLINE_MAX_SUBJECT_SIZE</td><td>20</td></tr>
    ///        </table>
    ///
    ///        <div class="test_data_label">
    ///        MessageSummary2 HRESULTs:
    ///        </div>
    ///        <table class="test_data">
    ///            <tr><td>S_OK                                   </td><td>Operation successful</td></tr>
    ///            <tr><td>ERROR_NO_SUCH_USER                     </td><td>User ID was not found online</td></tr>
    ///            <tr><td>E_OUTOFMEMORY                          </td><td>Server ran out of memory buffering response</td></tr>
    ///            <tr><td>ERROR_INSUFFICIENT_BUFFER              </td><td>Server ran out of memory buffering response in Queue::ListItems()</td></tr>
    ///            <tr><td>E_INVALIDARG                           </td><td>Internal server error (queue type specified to Presence::ListItems() incorrect)</td></tr>
    ///        </table>
    ///
    ///     <p>
    ///     Positive cases check for success HRESULT. Because this message is used to validate the
    ///     exhaustive set of Send cases this list is short.  Summary contents will be checked
    ///     against data stored locally from a send.
    ///     </p>
    ///
    ///     <p>
    ///     Negative Casescheck for failure hr that makes sense and is consistent.
    ///     </p>
    /// </Description>
    /// </remarks>
    ///
    [TestGroup]
    public class FuncGetMsgSummary2 : MessagingTestGroup
    {
        PNUser _Sender;
        PNUser _Receiver;

        protected override void OnSetup()
        {
            _Sender = MsgTestUtils.CreateCleanUser();
            _Receiver = MsgTestUtils.CreateCleanUser();
        }

        protected override void OnTearDown()
        {
            MsgTestUtils.Fc.LogoffUser(_Sender);
            MsgTestUtils.Fc.LogoffUser(_Receiver);
        }

        protected void VerifySummary(
            PNMsg reply,
            uint hr
            )
        {
            VerifySummary(reply, hr, 0, 0, 0, 0, 0, 0, 0, 0, String.Empty, String.Empty);
        }

        protected void VerifySummary(
            PNMsg reply,
            uint hr,
            ulong senderId,
            ulong context,
            uint msgId,
            uint msgFlags,
            uint titleId,
            ushort expireMins,
            uint cbDetails,
            byte msgType,
            string senderName,
            string subject
            )
        {
            // Validate HR
            if (reply.Data.GetType() == typeof(QSummaryReplyMsgData))
            {
                QSummaryReplyMsgData msgSummary = (QSummaryReplyMsgData)(reply.Data);
                ValueCheck.Test("Summary HR", hr, msgSummary.HR);
            }
            else if (reply.Data.GetType() == typeof(QSummary2ReplyMsgData))
            {
                QSummary2ReplyMsgData msgSummary = (QSummary2ReplyMsgData)(reply.Data);
                ValueCheck.Test("Summary HR", hr, msgSummary.HR);
            }
            else
                throw new UnexpectedTestResultException(String.Format("Unknown reply message type: {0}", reply.Data.GetType().Name));

            // From here on, we assume that we always get QSummary2ReplyMsgData
            ValueCheck.Test("Summary Data Type", typeof(QSummary2ReplyMsgData).Name, reply.Data.GetType().Name);
            ValueCheck.TestNotNull("Summary Data", reply.Data);
            UserMsgSummary2 summary = ((QSummary2ReplyMsgData)(reply.Data)).Summary;

            // If the call failed, we do not check the summary contents
            if (HResult.Failed(hr))
                return;

            // Validate the rest of the parameters
            ValueCheck.Test("Summary SenderID", senderId, summary.SenderID);
            ValueCheck.Test("Summary Context", context, summary.SenderContext);
            ValueCheck.Test("Summary Sent Time", DateTime.UtcNow, summary.SentTime.dt, new TimeSpan(0, 1, 0));
            ValueCheck.Test("Summary Message ID", msgId, summary.MessageID);
            ValueCheck.Test("Summary Message Flags", msgFlags, summary.MessageFlags);
            ValueCheck.Test("Summary Title ID", titleId, summary.SenderTitleID);
            ValueCheck.Test("Summary Expire Minutes", expireMins, summary.ExpireMinutes);
            ValueCheck.Test("Summary Details Size", cbDetails, summary.cbDetails);
            ValueCheck.Test("Summary Message Type", msgType, summary.MessageType);
            ValueCheck.Test("Summary Sender Name", senderName, summary.SenderName);
            ValueCheck.Test("Summary Subject", subject, summary.Subject);
        }

        /// <summary>
        ///        Summary2 single user xenon dash message types
        /// </summary>
        /// <remarks>
        /// <Description>
        ///     <p>
        ///     Send a single user message iterating new xenon message types.
        ///     Populate all of the fields and check them in the message summary.
        ///     </p>
        ///
        ///        <div class="test_data_label">
        ///     Message types test iterations:
        ///     </div>
        ///     <table class="test_data">
        ///            <tr><th>Message Type Define                 </th><th>Numeric</th><th>Context           </th><th>Requred properties</th></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_TITLE_CUSTOM       </td><td>1      </td><td>Title defined     </td><td>Title defined</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_FRIEND_REQUEST     </td><td>2      </td><td>0                 </td><td>None</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_GAME_INVITE        </td><td>3      </td><td>See msg flags     </td><td>XONLINE_MSG_PROP_SESSION_ID for Xbox, XONLINE_MSG_PROP_SESSION_DESCRIPTION, XONLINE_MSG_PROP_SESSION_HOST_XNADDR, XONLINE_MSG_PROP_SESSION_HOST_KEY in addition for Xenon.</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_TEAM_RECRUIT       </td><td>4      </td><td>Inviting team ID  </td><td>None</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_COMP_REMINDER      </td><td>5      </td><td>Comp event ID     </td><td>XONLINE_MSG_PROP_COMP_NAME, XONLINE_MSG_PROP_COMP_EVENT_START</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_COMP_REQUEST       </td><td>6      </td><td>Comp entity ID    </td><td>XONLINE_MSG_PROP_COMP_NAME, XONLINE_MSG_PROP_COMP_START, XONLINE_MSG_PROP_COMP_REG_CLOSE</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_LIVE_MESSAGE       </td><td>7      </td><td>0                 </td><td>XONLINE_MSG_PROP_SYSTEM_TEXT</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_PERSONAL_MESSAGE   </td><td>8      </td><td>0                 </td><td>XONLINE_MSG_PROP_TEXT, XONLINE_MSG_PROP_VOICE_DATA.</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_VIDEO_MESSAGE      </td><td>9      </td><td>0                 </td><td>XONLINE_MSG_PROP_TEXT, XONLINE_MSG_PROP_VIDEO_DATA</td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_QUICK_CHAT_INVITE  </td><td>10     </td><td>0                 </td><td></td></tr>
        ///            <tr><td>XONLINE_MSG_TYPE_PUBLISHER_MESSAGE  </td><td>11     </td><td>0                 </td><td>XONLINE_MSG_PROP_TEXT</td></tr>
        ///     </table>
        /// </Description>
        /// <Verify>
        ///    <ul>
        ///        <li>Validate field qwSenderID equal to sender</li>
        ///        <li>Validate field qwSenderContext equal to 0xabcdabcdabcdabcd (original value)</li>
        ///        <li>Validate field mtSentTime within 1 minute tolerance</li>
        ///        <li>Validate field dwMessageID equal to sent message ID</li>
        ///        <li>Validate field dwMessageFlags equal to required flags according to message type</li>
        ///        <li>Validate field dwSenderTitleID equal to sender xbox title ID</li>
        ///        <li>Validate field wExpireMinutes equal to default sent expire minutes</li>
        ///        <li>Validate field cbDetails 0</li>
        ///        <li>Validate field bMessageType equal to sent type</li>
        ///        <li>Validate field szSenderName equal to sender gamertag</li>
        ///        <li>Validate field szSubject equal to sent message subject data</li>
        ///    </ul>
        /// </Verify>
        /// </remarks>
        private void GeneralMessageTypeTest(byte msgType, uint msgFlags, ushort detailTypes)
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            const ushort cExpireMins = 5;

            // Create a message of the requested type
            MsgDetails msgDetails = MsgTestUtils.CreateDetails(detailTypes);
            UserMessage userMsg = UserMessage.Create(_Sender, msgType, context, msgFlags, cExpireMins, msgDetails);

            // Send the message.  Game invites must go through the Invite API; sending
            // directly will not complete successfully.
            if (msgType == XonPresNoti.MSG_TYPE_GAME_INVITE)
            {
                // Hack - The "properties" data members of msgDetails are not filled in until
                // the stream is written.  Because we want access to the random values that were
                // created with MsgTestUtils.CreateDetails() without actually sending the message, we write
                // the details to a dummy stream so that GetQwordProperty() will work.
                MemoryStream memStream = new MemoryStream();
                msgDetails.WriteStream(memStream);

                _Sender.Invite2(
                    new PNUser[] { _Receiver },
                    msgDetails.GetQwordProperty(XonPresNoti.MSG_PROP_SESSION_ID),
                    context,
                    msgFlags,
                    msgDetails);
            }
            else
            {
                userMsg.Send(_Sender, _Receiver);
            }

            // Get the most recent message ID
            QValPacket lastQVal = _Receiver.WaitForNewMessageType(msgType);
            uint msgId = lastQVal.NewMessageId(0);
            ValueCheck.TestNonZero("Last QVal Message ID", msgId);

            // Retrieve the message summary with QMSG_MESSAGE_SUMMARY_2
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            // Subject is derived from the text property, if it exists and isn't a game invite
            string msgSubject = (((msgFlags & XonPresNoti.MSG_FLAG_HAS_TEXT) == 0) || msgType == XonPresNoti.MSG_TYPE_GAME_INVITE) ?
                String.Empty :
                msgDetails.GetStringProperty(XonPresNoti.MSG_PROP_TEXT).Substring(0, (int)XonPresNoti.MAX_SUBJECT_SIZE - 1);

            VerifySummary(
                reply,
                HResult.S_OK,
                _Sender.UserId,
                context,
                msgId,
                msgFlags,
                _Sender.Xbox.TitleId,
                (msgType == XonPresNoti.MSG_TYPE_GAME_INVITE) ? (ushort)1440 : cExpireMins,
                msgDetails.size,
                msgType,
                _Sender.Name,
                msgSubject
                );
        }

        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Get summary of a personal message")]
        public void P_MessageType_Personal()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE | XonPresNoti.MSG_FLAG_HAS_PHOTO,
                MessageDetailTypes.Text | MessageDetailTypes.XenonVoice | MessageDetailTypes.Photo
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Get summary of a friend request")]
        public void P_MessageType_FriendRequest()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE,
                MessageDetailTypes.Text | MessageDetailTypes.XenonVoice
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Get summary of a game invitation")]
        public void P_MessageType_GameInvite()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_GAME_INVITE,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE,
                MessageDetailTypes.Text | MessageDetailTypes.XenonVoice | MessageDetailTypes.Session
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Get summary of a party invitation")]
        public void P_MessageType_PartyChat()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE,
                0,
                MessageDetailTypes.Session | MessageDetailTypes.PartySession
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Get summary of a quick chat invitation")]
        public void P_MessageType_QuickChatInvite()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE,
                0,
                MessageDetailTypes.Session | MessageDetailTypes.SessionDescription | MessageDetailTypes.VoiceChatPort
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Get summary of a custom title message")]
        public void P_MessageType_TitleCustom()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE | XonPresNoti.MSG_FLAG_HAS_PHOTO,
                MessageDetailTypes.Text | MessageDetailTypes.XenonVoice | MessageDetailTypes.Photo | MessageDetailTypes.TitleCustomData
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Get summary of a video chat invite")]
        public void P_MessageType_VideoChatInvite()
        {
            GeneralMessageTypeTest(
                XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE,
                0,
                MessageDetailTypes.Session
                );
        }

        /// <summary>
        ///        Summary2 system message after login
        /// </summary>
        /// <remarks>
        /// <Description>
        ///     Send a system wide message. Login with user on title (message should be copied
        ///     to the user message folder). Request the message with Summary2.
        /// </Description>
        /// <Verify>
        ///    <ul>
        ///        <li>Validate field qwSenderID equal to 0</li>
        ///        <li>Validate field qwSenderContext equal to 0</li>
        ///        <li>Validate field mtSentTime within 1 minute tolerance</li>
        ///        <li>Validate field dwMessageID</li>
        ///        <li>Validate field dwMessageFlags</li>
        ///        <li>Validate field dwSenderTitleID equal to system message title ID</li>
        ///        <li>Validate field wExpireMinutes equal to original message</li>
        ///        <li>Validate field cbDetails equal to 0</li>
        ///        <li>Validate field bMessageType equal to XONLINE_MSG_TYPE_LIVE_MESSAGE</li>
        ///        <li>Validate field szSenderName equal to ""</li>
        ///        <li>Validate field szSubject equal to ""</li>
        ///    </ul>
        /// </Verify>
        /// </remarks>
        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Get summary of a recommended system message")]
        public void P_System_Message()
        {
            PNUser user = MsgTestUtils.CreateCleanUser();
            Thread.Sleep(2000);
            MsgTestUtils.InitValidLiveMsg("P_System_Message", Message.Priority.Recomended, 0, user.Xbox.TitleId, 0, 2);

            try
            {
                // Clear the presence cache to force a database alive
                MsgTestUtils.Fc.LogoffUser(user);
                MsgTestUtils.Fc.LogonUser(user);

                // Wait for the system message
                UserMsgFolder msgFolder = new UserMsgFolder(user);
                msgFolder.Load2();
                ValueCheck.Test("Message Count", (ushort)1, msgFolder.InboxCount);

                UserMessage userMessage = msgFolder.FirstMessage;
                Global.RO.Info("System message ID is {0}", userMessage.ID);

                // Send the Summary2 request
                QMsgSummary2 qMsgSummary2 = new QMsgSummary2(user, userMessage.ID);
                PNMsg reply;
                qMsgSummary2.TransactFD( out reply);

                VerifySummary(
                    reply,
                    HResult.S_OK,
                    0,
                    0,
                    userMessage.ID,
                    XonPresNoti.MSG_FLAG_RECOMMENDED,
                    user.Xbox.TitleId,
                    2,
                    12,
                    XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                    "MessagingTest",
                    "P_System_Message"
                    );
            }
            finally
            {
                SystemMsgFolder.DeleteAll(user.Xbox.TitleId, SystemMessage.RevokeAlso.Yes);
            }
        }

        [TestCase, Description("Get summary of a message flagged as non-exportable")]
        public void P_Flagged_NonExportable()
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            const ushort cExpireMins = 5;

            // Create a message of the requested type
            MsgDetails msgDetails = MsgTestUtils.CreateDetails(MessageDetailTypes.Text);
            UserMessage userMsg = UserMessage.Create(
                _Sender,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
               context,
               XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
               cExpireMins,
               msgDetails
               );

            // Send the message
            userMsg.Send(_Sender, _Receiver);

            // Get the most recent message ID
            QValPacket lastQVal = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint msgId = lastQVal.NewMessageId(0);
            ValueCheck.TestNonZero("Last QVal Message ID", msgId);

            // Retrieve the message summary with QMSG_MESSAGE_SUMMARY_2
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            string msgSubject = msgDetails.GetStringProperty(XonPresNoti.MSG_PROP_TEXT).Substring(0, (int)XonPresNoti.MAX_SUBJECT_SIZE - 1);

            VerifySummary(
                reply,
                HResult.S_OK,
                _Sender.UserId,
                context,
                msgId,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                _Sender.Xbox.TitleId,
                cExpireMins,
                msgDetails.size,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                _Sender.Name,
                msgSubject
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Get summary of a message via the datacenter port")]
        public void P_NoSpiData_DCPort()
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            const ushort cExpireMins = 5;

            // Create a message of the requested type
            MsgDetails msgDetails = MsgTestUtils.CreateDetails(MessageDetailTypes.Text);
            UserMessage userMsg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, context, XonPresNoti.MSG_FLAG_HAS_TEXT, cExpireMins, msgDetails);

            // Send the message
            userMsg.Send(_Sender, _Receiver);

            // Get the most recent message ID
            QValPacket lastQVal = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint msgId = lastQVal.NewMessageId(0);
            ValueCheck.TestNonZero("Last QVal Message ID", msgId);

            // Retrieve the message summary with QMSG_MESSAGE_SUMMARY_2
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            qMsgSummary2.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            string msgSubject = msgDetails.GetStringProperty(XonPresNoti.MSG_PROP_TEXT).Substring(0, (int)XonPresNoti.MAX_SUBJECT_SIZE - 1);

            VerifySummary(
                reply,
                HResult.S_OK,
                _Sender.UserId,
                context,
                msgId,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                _Sender.Xbox.TitleId,
                cExpireMins,
                msgDetails.size,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                _Sender.Name,
                msgSubject
                );
        }

        [TestCase, Description("Get summary of a message with empty text content")]
        public void P_Message_Empty_Text()
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            const ushort cExpireMins = 5;

            // Create a message of the requested type
            MsgDetails msgDetails = MsgDetails.CreateBlank();
            msgDetails.AddProperty(XonPresNoti.MSG_PROP_TEXT, String.Empty);
            msgDetails.AddProperty(XonPresNoti.MSG_PROP_TEXT_LANGUAGE, (uint)1);
            UserMessage userMsg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, context, XonPresNoti.MSG_FLAG_HAS_TEXT, cExpireMins, msgDetails);

            // Send the message
            userMsg.Send(_Sender, _Receiver);

            // Get the most recent message ID
            QValPacket lastQVal = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint msgId = lastQVal.NewMessageId(0);
            ValueCheck.TestNonZero("Last QVal Message ID", msgId);

            // Retrieve the message summary with QMSG_MESSAGE_SUMMARY_2
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            VerifySummary(
                reply,
                HResult.S_OK,
                _Sender.UserId,
                context,
                msgId,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                _Sender.Xbox.TitleId,
                cExpireMins,
                msgDetails.size,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                _Sender.Name,
                String.Empty
                );
        }

        [TestCase, Description("Get summary of a message for a user that is not signed in")]
        public void P_User_NotAlive()
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            const ushort cExpireMins = 5;

            // Create a message of the requested type
            MsgDetails msgDetails = MsgTestUtils.CreateDetails(MessageDetailTypes.Text);
            UserMessage userMsg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, context, XonPresNoti.MSG_FLAG_HAS_TEXT, cExpireMins, msgDetails);

            // Send the message
            userMsg.Send(_Sender, _Receiver);

            // Get the most recent message ID
            QValPacket lastQVal = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint msgId = lastQVal.NewMessageId(0);
            ValueCheck.TestNonZero("Last QVal Message ID", msgId);

            MsgTestUtils.Fc.LogoffUser(_Receiver);

            // Retrieve the message summary with QMSG_MESSAGE_SUMMARY_2
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            MsgTestUtils.Fc.LogonUser(_Receiver);

            string msgSubject = msgDetails.GetStringProperty(XonPresNoti.MSG_PROP_TEXT).Substring(0, (int)XonPresNoti.MAX_SUBJECT_SIZE - 1);

            VerifySummary(
                reply,
                HResult.S_OK,
                _Sender.UserId,
                context,
                msgId,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                _Sender.Xbox.TitleId,
                cExpireMins,
                msgDetails.size,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                _Sender.Name,
                msgSubject
                );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Get summary for a message twice, ensuring equal results")]
        public void P_GetSummaryTwice()
        {
            _Receiver.ProcessQVals();

            // Send the message
            MsgDetails msgDetails = MsgTestUtils.CreateDetails(MessageDetailTypes.Text);
            UserMessage msg = UserMessage.Create(
                _Sender,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                0,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                10,
                msgDetails
                );
            msg.Send(_Sender, _Receiver);

            QValPacket qval = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint messageId = qval.NewMessageId(0);
            ValueCheck.TestNonZero("QVal new messageID", messageId);

            string msgSubject = msgDetails.GetStringProperty(XonPresNoti.MSG_PROP_TEXT).Substring(0, (int)XonPresNoti.MAX_SUBJECT_SIZE - 1);

            // Get the summary for this message twice
            for (int i = 0; i < 2; ++i)
            {
                QMsgSummary2 summary = new QMsgSummary2(_Receiver, messageId);
                PNMsg reply;
                summary.TransactFD(out reply);

                VerifySummary(
                    reply,
                    HResult.S_OK,
                    _Sender.UserId,
                    0,
                    messageId,
                    XonPresNoti.MSG_FLAG_HAS_TEXT,
                    _Sender.Xbox.TitleId,
                    10,
                    msgDetails.size,
                    XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                    _Sender.Name,
                    msgSubject
                    );
            }
        }

        [TestCase,
         Ignore("Need to research if anybody actually cares about the UA string and how.  Currently, this passes, even with nonsense as the UA."),
         Description("Get a message summary while sending an incorrect UA string")]
        public void N_UserAgent_WrongVersion()
        {
            UserMessage msg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 5);
            msg.Send(_Sender, _Receiver);

            QValPacket lastQval = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            ValueCheck.TestNonZero("Last QVal Message ID", lastQval.NewMessageId(0));

            QMsgSummary2 summary = new QMsgSummary2(_Receiver, lastQval.NewMessageId(0));

            // UA string is format "XX/Y.ZZ", where XX = service ID in hex, Y = major
            // version and ZZ = minor verion.  For this test, we simply increase the
            // minor version
            string verPrefix = summary.ServiceUA.Substring(0, summary.ServiceUA.LastIndexOf('.'));
            int minorVersion = int.Parse(summary.ServiceUA.Substring(summary.ServiceUA.LastIndexOf('.') + 1));
            //string newVersion = String.Format("{0}.{1}", verPrefix, minorVersion + 9000);
            string newVersion = "ohnoes";

            Global.RO.Info("Original UA is \"{0}\", changing to \"{1}\"", summary.ServiceUA, newVersion);
            summary.ServiceUA = newVersion;

            PNMsg reply;
            summary.TransactFD(out reply);

            VerifySummary(reply, HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID);
        }

        [TestCase, Description("Get a summary for a PUID that does not exist")]
        public void N_User_DoesNotExist()
        {
            UserMessage msg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 5);
            msg.Send(_Sender, _Receiver);

            QValPacket lastQval = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            ValueCheck.TestNonZero("Last QVal Message ID", lastQval.NewMessageId(0));

            QMsgSummary2 summary = new QMsgSummary2(_Receiver, lastQval.NewMessageId(0));
            ((QSummary2MsgData)(summary.Msg.Data)).UserID += 0x1000000;
            PNMsg reply;
            summary.TransactFD(out reply);

            VerifySummary(reply, HResult.E_NO_SUCH_USER);
        }

        [TestCase, Description("Get a summary for PUID 0")]
        public void N_User_Zero()
        {
            UserMessage msg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 5);
            msg.Send(_Sender, _Receiver);

            QValPacket lastQval = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            ValueCheck.TestNonZero("Last QVal Message ID", lastQval.NewMessageId(0));

            QMsgSummary2 summary = new QMsgSummary2(_Receiver, lastQval.NewMessageId(0));
            ((QSummary2MsgData)(summary.Msg.Data)).UserID = 0;
            PNMsg reply;
            summary.TransactFD(out reply);

            VerifySummary(reply, HResult.E_INVALIDARG);
        }

        [TestCase, Description("Get a summary for message ID 0")]
        public void N_MessageID_Zero()
        {
            QMsgSummary2 summary = new QMsgSummary2(_Receiver, 0);
            PNMsg reply;
            summary.TransactFD(out reply);

            VerifySummary(reply, HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID);
        }

        [TestCase, Description("Get a summary for a message ID that doesn't exist")]
        public void  N_MessageId_Invalid()
        {
            UserMessage msg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 5);
            msg.Send(_Sender, _Receiver);

            QValPacket lastQval = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            ValueCheck.TestNonZero("Last QVal Message ID", lastQval.NewMessageId(0));

            QMsgSummary2 summary = new QMsgSummary2(_Receiver, lastQval.NewMessageId(0) + 25);
            PNMsg reply;
            summary.TransactFD(out reply);

            VerifySummary(reply, HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID);
        }

        [TestCase, Ignore("Currently passes, need to research proper behavior"), Description("Get a summary of a message flagged as non-exportable via the datacenter port")]
        public void N_Flagged_NonExportable_DCPort()
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            const ushort cExpireMins = 5;

            // Create a message of the requested type
            MsgDetails msgDetails = MsgTestUtils.CreateDetails(MessageDetailTypes.Text);
            UserMessage userMsg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, context, XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_NON_EXPORTABLE, cExpireMins, msgDetails);

            // Send the message
            userMsg.Send(_Sender, _Receiver);

            // Get the most recent message ID
            QValPacket lastQVal = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint msgId = lastQVal.NewMessageId(0);
            ValueCheck.TestNonZero("Last QVal Message ID", msgId);

            // Retrieve the message summary with QMSG_MESSAGE_SUMMARY_2
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            qMsgSummary2.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            string msgSubject = msgDetails.GetStringProperty(XonPresNoti.MSG_PROP_TEXT).Substring(0, (int)XonPresNoti.MAX_SUBJECT_SIZE - 1);

            VerifySummary(
                reply,
                HResult.S_OK,
                _Sender.UserId,
                context,
                msgId,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                _Sender.Xbox.TitleId,
                cExpireMins,
                msgDetails.size,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                _Sender.Name,
                msgSubject
                );
        }

        [TestCase, Description("Get a summary for a message ID with the high bit set (i.e. a failed HRESULT)")]
        public void N_MessageIdSendFailed()
        {
            UserMessage userMsg = UserMessage.Create(_Sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 0);
            userMsg.Send(_Receiver);

            // Get the most recent message ID
            QValPacket lastQval = _Receiver.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            uint msgId = lastQval.NewMessageId(0);
            ValueCheck.TestNonZero("Last Qval Mesasge ID", msgId);

            // Set the "send failed" flag on the msg ID
            msgId |= XonPresNoti.MSG_ID_SEND_FAILED;

            // Attempt to get the summary
            QMsgSummary2 qMsgSummary2 = new QMsgSummary2(_Receiver, msgId);
            PNMsg reply;
            qMsgSummary2.TransactFD(out reply);

            VerifySummary(reply, HResult.E_INVALIDARG);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncEnumMsgs2.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for EnumMessages2
    /// </summary>
    /// <remarks>
    /// <Description>
    ///     <p>
    ///     EnumMessages2 is a new XRL added for Xenon which supplies a new message summary
    ///     object which contains the subject property of the message which was previously
    ///     only available with a MessageDetails call.
    ///     </p>
    ///
    ///     <div class="test_data_label">
    ///     EnumMessages2 Request Format:
    ///     </div>
    ///     <table class="test_data">
    ///         <tr><td>ULONGLONG qwUserID</td><td>UserID for enumeration</td></tr>
    ///     </table>
    ///
    ///     <div class="test_data_label">
    ///     EnumMessages2 Reply Format:
    ///     </div>
    ///     <table class="test_data">
    ///         <tr><td>HRESULT hr                      </td><td>Result of the enumeration call</td></tr>
    ///         <tr><td>WORD cMessages                  </td><td>Count of message summaries in payload</td></tr>
    ///         <tr><td>Q_MESSAGE_SUMMARY_2 rgMessages[]</td><td>Message summary payload</td></tr>
    ///     </table>
    ///
    ///     <div class="test_data_label">
    ///     EnumMessages2 Reply Item Format:
    ///     </div>
    ///     <table class="test_data">
    ///         <tr><td>ULONGLONG qwSenderID                      </td><td>Unique user ID of the sender</td></tr>
    ///         <tr><td>ULONGLONG qwSenderContext                 </td><td>Configurable 64bit context of the sender</td></tr>
    ///         <tr><td>MSGTIME mtSentTime                        </td><td>Server message time message was sent</td></tr>
    ///         <tr><td>DWORD dwMessageID                         </td><td>Message ID in the user message folder</td></tr>
    ///         <tr><td>DWORD dwMessageFlags                      </td><td>See SendMessage for flag definitions</td></tr>
    ///         <tr><td>DWORD dwSenderTitleID                     </td><td>TitleID message was sent from</td></tr>
    ///         <tr><td>WORD wExpireMinutes                       </td><td>An offset in minutes from the sent time</td></tr>
    ///         <tr><td>WORD cbDetails                            </td><td>Number of bytes available</td></tr>
    ///         <tr><td>BYTE bMessageType                         </td><td>Message types, see SendMessage for definitions</td></tr>
    ///         <tr><td>CHAR szSenderName[XONLINE_GAMERTAG_SIZE-1]</td><td>Sender gamertag - ASCII</td></tr>
    ///         <tr><td>WCHAR szSubject[XONLINE_MAX_SUBJECT_SIZE] </td><td>Subject line - UTF-16</td></tr>
    ///     </table>
    ///
    ///     <div class="test_data_label">
    ///     EnumMessages2 Constants:
    ///     </div>
    ///     <table class="test_data">
    ///         <tr><td>XONLINE_GAMERTAG_SIZE</td><td>16</td></tr>
    ///         <tr><td>XONLINE_MAX_SUBJECT_SIZE</td><td>20</td></tr>
    ///     </table>
    ///
    ///     <div class="test_data_label">
    ///     EnumMessages2 HRESULTs:
    ///     </div>
    ///     <table class="test_data">
    ///         <tr><td>S_OK                                   </td><td>Operation successful</td></tr>
    ///         <tr><td>ERROR_NO_SUCH_USER                     </td><td>User ID was not found online</td></tr>
    ///         <tr><td>E_OUTOFMEMORY                          </td><td>Server ran out of memory buffering response</td></tr>
    ///         <tr><td>XONLINE_E_MESSAGE_INVALID_MESSAGE_ID   </td><td>The requested message ID was invalid</td></tr>
    ///     </table>
    ///
    ///
    ///     <p>
    ///     Positive cases check for success HRESULT. This message is used to validate the
    ///     send so the positive enumeration cases are actually pretty short..
    ///     Summary contents are checked against sent data stored locally per-field.
    ///     </p>
    /// </Description>
    /// </remarks>
    [TestGroup]
    public class FuncEnumMsgs2 : MessagingTestGroup
    {
        static Report ro = new Report("FuncEnumMsgs2");

        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Enumerates a single message")]
        public void P_Mainline()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser user   = MsgTestUtils.CreateCleanUser();

            UserMessage msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 10 );
            msg.Send( sender, user );

            WaitAndValidateMessage(user, msg);
        }

        [TestCase, Description("Enumerates a folder after the only message has expired")]
        public void P_NoMessages_Expired()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser user = MsgTestUtils.CreateCleanUser();

            UserMessage msg = UserMessage.Create( sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 1 );

            msg.Send( sender, user );

            ro.Debug( "Waiting for message to be delivered" );
            user.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            UserMsgFolder inbox = new UserMsgFolder( user );
            inbox.Load2();
            ValueCheck.Test( "Message Count", (ushort)1, inbox.Count );

            ro.Debug( "Waiting for message to expire" );
            Thread.Sleep( new TimeSpan( 0, 2, 0 ) ); // 2 Minutes
            inbox.Load2();
            ValueCheck.Test( "Message Count", (ushort)0, inbox.Count );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Enumerates a folder with no messages")]
        public void P_NoMessages()
        {
            PNUser user = MsgTestUtils.CreateCleanUser();

            // Enumerate the messages
            QMsgEnumMsgs2 qEnumMsgs2 = new QMsgEnumMsgs2(user);
            PNMsg reply;
            qEnumMsgs2.TransactFD( out reply);

            // Validate the reply
            ValueCheck.TestNotNull("Reply Data", reply.Data);
            ValueCheck.Test("Reply Data Type", typeof(QEnumMsgs2ReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumMsgs2ReplyMsgData replyData = (QEnumMsgs2ReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.S_OK, replyData.HR);
            ValueCheck.Test("Reply Item Count", (ushort)0, replyData.MessagesLen);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Enumerates a folder with the maximum number of persistent messages")]
        public void P_MaxPersistentMessages()
        {
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            msgFolder.Load2();
            ValueCheck.Test("Initial Message Count", (ushort)0, msgFolder.InboxCount);

            List<UserMessage> msgList = MsgTestUtils.SendManyMessages(recipient, false, XonPresNoti.MAX_PERSISTENT_MESSAGES + 5);
            msgList.RemoveRange(0, 5);

            // Enumerate
            ushort numMsgs = msgFolder.Load2();
            ValueCheck.Test("Number of Messages", XonPresNoti.MAX_PERSISTENT_MESSAGES, numMsgs);

            for (int i = 0; i < msgFolder.InboxCount; ++i)
            {
                UserMessage msg = msgFolder.Inbox[i];

                ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msg.SentTime, new TimeSpan(0, 1, 0));
                ValueCheck.Test("Message Flags", 0, msg.Flags);
                ValueCheck.Test("Message Title ID", recipient.Xbox.TitleId, msg.TitleID);
                ValueCheck.Test("Message Message Type", XonPresNoti.MSG_TYPE_TITLE_CUSTOM, msg.Type);

                UserMessage foundMsg = MsgTestUtils.FindMessageByIdAndContext(msgList, msg.ID, msg.Context);
                ValueCheck.TestNotNull(
                    String.Format("Message ID {0} Context {1}", msg.ID, msg.Context),
                    foundMsg
                    );
                msgList.Remove(foundMsg);
            }

            ValueCheck.Test("Remaining Messages", 0, msgList.Count);
        }

        [TestCase, Description("Enumerates a folder with the maximum number of transient messages (game invites)")]
        public void P_MaxTransientMessages()
        {
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            msgFolder.Load2();
            ValueCheck.Test("Initial Message Count", (ushort)0, msgFolder.InboxCount);

            List<UserMessage> msgList = MsgTestUtils.SendManyMessages(recipient, true, XonPresNoti.MAX_TRANSIENT_MESSAGES + 5);
            msgList.RemoveRange(0, 5);

            // Enumerate
            ushort numMsgs = msgFolder.Load2();
            ValueCheck.Test("Number of Messages", XonPresNoti.MAX_TRANSIENT_MESSAGES, numMsgs);

            for (int i = 0; i < msgFolder.InboxCount; ++i)
            {
                UserMessage msg = msgFolder.Inbox[i];

                ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msg.SentTime, new TimeSpan(0, 5, 0)); // 5min tolerance (XBlobs can be s.l.o.w)
                ValueCheck.Test("Message Flags", 0, msg.Flags);
                ValueCheck.Test("Message Title ID", recipient.Xbox.TitleId, msg.TitleID);
                ValueCheck.Test("Message Message Type", XonPresNoti.MSG_TYPE_GAME_INVITE, msg.Type);

                UserMessage foundMsg = MsgTestUtils.FindMessageByIdAndContext(msgList, msg.ID, msg.Context);
                ValueCheck.TestNotNull(
                    String.Format("Message ID {0} Context {1}", msg.ID, msg.Context),
                    foundMsg
                    );
                msgList.Remove(foundMsg);
            }

            ValueCheck.Test("Remaining Messages", 0, msgList.Count);
        }

        [TestCase, Description("Enumerates a folder with both the maximum number of persistent and transient messages")]
        public void P_MaxPersistentAndTransientMessages()
        {
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            msgFolder.Load2();
            ValueCheck.Test("Initial Message Count", (ushort)0, msgFolder.InboxCount);

            List<UserMessage> msgListPersist = MsgTestUtils.SendManyMessages(recipient, false, XonPresNoti.MAX_PERSISTENT_MESSAGES + 5);
            List<UserMessage> msgListTransient = MsgTestUtils.SendManyMessages(recipient, true, XonPresNoti.MAX_TRANSIENT_MESSAGES + 5);
            msgListPersist.RemoveRange(0, 5);
            msgListTransient.RemoveRange(0, 5);

            // Enumerate
            ushort numMsgs = msgFolder.Load2();
            ValueCheck.Test("Number of Messages", XonPresNoti.MAX_PERSISTENT_MESSAGES + XonPresNoti.MAX_TRANSIENT_MESSAGES, numMsgs);

            for (int i = 0; i < msgFolder.InboxCount; ++i)
            {
                UserMessage msg = msgFolder.Inbox[i];
                UserMessage foundMsg = null;

                ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msg.SentTime, new TimeSpan(0, 2, 0));
                ValueCheck.Test("Message Flags", 0, msg.Flags);
                ValueCheck.Test("Message Title ID", recipient.Xbox.TitleId, msg.TitleID);

                switch (msg.Type)
                {
                    case XonPresNoti.MSG_TYPE_GAME_INVITE:
                        foundMsg = MsgTestUtils.FindMessageByIdAndContext(msgListTransient, msg.ID, msg.Context);
                        ValueCheck.TestNotNull(
                            String.Format("Message ID {0} Context {1}", msg.ID, msg.Context),
                            foundMsg
                            );
                        msgListTransient.Remove(foundMsg);
                        break;
                    case XonPresNoti.MSG_TYPE_TITLE_CUSTOM:
                        foundMsg = MsgTestUtils.FindMessageByIdAndContext(msgListPersist, msg.ID, msg.Context);
                        ValueCheck.TestNotNull(
                            String.Format("Message ID {0} Context {1}", msg.ID, msg.Context),
                            foundMsg
                            );
                        msgListPersist.Remove(foundMsg);
                        break;
                    default:
                        throw new UnexpectedTestResultException(String.Format("Unknown message type {0}", msg.Type));
                }
            }

            ValueCheck.Test("Remaining Messages (Persistent)", 0, msgListPersist.Count);
            ValueCheck.Test("Remaining Messages (Transient)", 0, msgListTransient.Count);
        }

        [TestCase, Description("Ensures that a required system message persists in a full inbox when new messages arrive")]
        public void P_RequiredMessage_NotPushedOut()
        {
            PNUser reqsender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            // Deliver required message to user
            UserMessage reqMsg = UserMessage.Create(reqsender, XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 0, XonPresNoti.MSG_FLAG_REQUIRED, 0);
            reqMsg.Send(reqsender, recipient);

            UserMessage inMsg = msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 0, 30);
            ulong reqMsgId = inMsg.ID;

            // Send a lot of normal and transient messages
            MsgTestUtils.SendManyMessages(recipient, false, XonPresNoti.MAX_PERSISTENT_MESSAGES + 5);
            MsgTestUtils.SendManyMessages(recipient, true, XonPresNoti.MAX_TRANSIENT_MESSAGES + 5);

            // Make sure required message is still there
            msgFolder.Load2();
            UserMessage[] msgs = msgFolder.Find(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 0);
            ValueCheck.Test("Required Message Count", 1, msgs.Length);
            ValueCheck.Test("Required Message ID", reqMsgId, msgs[0].ID);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Ensures that a recommended system message persists in a full inbox when new messages arrive")]
        public void P_RecommendedMessage_NotPushedOut()
        {
            PNUser reqsender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            // Deliver recommended message to the recipient
            UserMessage recMsg = UserMessage.Create(reqsender, XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 0, XonPresNoti.MSG_FLAG_RECOMMENDED, 0);
            recMsg.Send(reqsender, recipient);

            UserMessage inMsg = msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 0, 30);
            ulong recMsgId = inMsg.ID;

            // Send a lot of normal and transient messages
            MsgTestUtils.SendManyMessages(recipient, false, XonPresNoti.MAX_PERSISTENT_MESSAGES + 5);
            MsgTestUtils.SendManyMessages(recipient, true, XonPresNoti.MAX_TRANSIENT_MESSAGES + 5);

            // Make sure required message is still there
            msgFolder.Load2();
            UserMessage[] msgs = msgFolder.Find(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 0);
            ValueCheck.Test("Recommanded Message Count", 1, msgs.Length);
            ValueCheck.Test("Recommanded Message ID", recMsgId, msgs[0].ID);
        }

        [TestCase, Description("Ensures that both recommended and required system messages persist in a full inbox when new messages arrive")]
        public void P_RecommendedAndRequiredMessages_NotPushedOut()
        {
            PNUser reqsender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            // Deliver required and recommended messages to the recipient
            UserMessage reqMsg = UserMessage.Create(reqsender, XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 100, XonPresNoti.MSG_FLAG_REQUIRED, 0);
            reqMsg.Send(recipient);

            UserMessage inMsg = msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 100, 30);
            ulong reqMsgId = inMsg.ID;

            UserMessage recMsg = UserMessage.Create(reqsender, XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 200, XonPresNoti.MSG_FLAG_RECOMMENDED, 0);
            recMsg.Send(recipient);

            inMsg = msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 200, 30);
            ulong recMsgId = inMsg.ID;

            // Send a lot of normal and transient messages
            MsgTestUtils.SendManyMessages(recipient, false, XonPresNoti.MAX_PERSISTENT_MESSAGES + 5);
            MsgTestUtils.SendManyMessages(recipient, true, XonPresNoti.MAX_TRANSIENT_MESSAGES + 5);

            // Make sure required and recommended messages are still there
            msgFolder.Load2();
            UserMessage[] msgs = msgFolder.Find(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 100);
            ValueCheck.Test("Required Message Count", 1, msgs.Length);
            ValueCheck.Test("Required Message ID", reqMsgId, msgs[0].ID);

            msgs = msgFolder.Find(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, reqsender.UserId, 200);
            ValueCheck.Test("Recommended Message Count", 1, msgs.Length);
            ValueCheck.Test("Recommended Message ID", recMsgId, msgs[0].ID);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Ensures the oldest message is pushed out when a new message arrives in a full inbox")]
        public void P_OldestPushedOut()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            // Save the message ID of the first message
            UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 1000, 0, 0);
            uint firstMsgID = msg.Send(recipient);
            msgFolder.WaitForMsgByContext( XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 1000, 30 );

            // Send enough messages to just hit the limit of persistent messages
            MsgTestUtils.SendManyMessages(recipient, false, XonPresNoti.MAX_PERSISTENT_MESSAGES - 1);

            // Now send one more message, which should push out the first one
            msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 1001, 0, 0);
            uint lastMsgId = msg.Send(recipient);
            msgFolder.WaitForMsgByContext(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 1001, 30);

            // Make sure the last message is still there
            msgFolder.Load2();
            ValueCheck.Test( "Message Count (Total)", (ushort)XonPresNoti.MAX_PERSISTENT_MESSAGES, msgFolder.Count );

            UserMessage[] msgs = msgFolder.FindByContext(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 1000);
            ValueCheck.Test( "Message Count (First)", 0, msgs.Length );

            msgs = msgFolder.FindByContext(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 1001);
            ValueCheck.Test( "Message Count (Last)", 1, msgs.Length );
            ValueCheck.Test( "Last Message ID", lastMsgId, msgs[0].ID );
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Enumerate a collection of random messages")]
        public void P_RandomMessageTypes()
        {
            byte[] typeList = new byte[] {
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_TYPE_GAME_INVITE,
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE,
                XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE,
                XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE
            };

            int randSeed = (int)DateTime.Now.Ticks;
            Random rand = new Random(randSeed);

            ro.Info("Using random seed 0x{0:X08}", randSeed);

            List<UserMessage> msgList = new List<UserMessage>();
            PNUser[] senders = MsgTestUtils.Fc.CreateXenonUsers(10, true);
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);
            int numTransMsgs = 0, numPersistMsgs = 0;

            // Send the random message types
            do
            {
                byte msgType = typeList[rand.Next() % typeList.Length];

                if (msgType == XonPresNoti.MSG_TYPE_GAME_INVITE)
                {
                    PNUser inviteSender = MsgTestUtils.CreateCleanUser();
                    ulong sessionId = RandomEx.GlobalRandGen.NextUlong();
                    ulong context = RandomEx.GlobalRandGen.NextUlong();
                    MsgDetails msgDetails = MsgDetails.CreateBlank();

                    msgDetails.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, sessionId);
                    inviteSender.Invite2(new PNUser[] { recipient }, sessionId, context, 0, msgDetails);
                    UserMessage msg = msgFolder.WaitForMsgByContext(XonPresNoti.MSG_TYPE_GAME_INVITE, context, 30);
                    msgList.Add(msg);
                    numTransMsgs++;
                }
                else
                {
                    PNUser sender = senders[rand.Next() % senders.Length];
                    UserMessage msg = MsgTestUtils.CreateMessage(sender, msgType);
                    msg.Send(recipient);
                    msg = msgFolder.WaitForMsg(msgType, sender.UserId, msg.Context, 30);
                    msgList.Add(msg);
                    numPersistMsgs++;
                }

            } while (numTransMsgs < XonPresNoti.MAX_TRANSIENT_MESSAGES && numPersistMsgs < XonPresNoti.MAX_PERSISTENT_MESSAGES);

            ro.Info("Created {0} persistent messages, {1} transient messages", numPersistMsgs, numTransMsgs);

            // Enumerate and do a basic comparison to the list we sent
            msgFolder.Load2();
            ValueCheck.Test("Message Count", numTransMsgs + numPersistMsgs, msgFolder.InboxCount);

            for (int i = 0; i < msgFolder.InboxCount; ++i)
            {
                UserMessage msg = msgFolder.Inbox[i];

                for (int j = 0; j < msgList.Count; ++j)
                {
                    if (msgList[j].Type == msg.Type && msgList[j].Context == msg.Context)
                    {
                        msgList.RemoveAt(j);
                        break;
                    }
                }
            }

            ValueCheck.Test("Unaccounted Messages", 0, msgList.Count);
        }

        [TestCase, Description("Enumerate a folder with a message flagged as non-exportable")]
        public void P_Flagged_NonExportable()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, XonPresNoti.MSG_FLAG_NON_EXPORTABLE, 0);
            msg.Send(recipient);

            msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, sender.UserId, 0, 30);
            msgFolder.Load2();

            ValueCheck.Test("Message Count", (ushort)1, msgFolder.InboxCount);

            msg = msgFolder.FirstMessage;
            ValueCheck.Test("Message Context", 0, msg.Context);
            ValueCheck.Test("Message Flags", XonPresNoti.MSG_FLAG_NON_EXPORTABLE, msg.Flags);
            ValueCheck.Test("Message Sender", sender.UserId, msg.SenderID);
            ValueCheck.Test("Message Sender Name", sender.Name, msg.SenderName);
            ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msg.SentTime, new TimeSpan(0, 1, 0));
            ValueCheck.Test("Message Subject", String.Empty, msg.Subject);
            ValueCheck.Test("Message Title ID", sender.Xbox.TitleId, msg.TitleID);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Enumerates a folder with a read message")]
        public void P_Flagged_Read()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 0);
            msg.Send(recipient);

            msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, sender.UserId, 0, 30);
            msgFolder.Load2();

            ValueCheck.Test("Message Count", (ushort)1, msgFolder.InboxCount);

            // Mark the message as read
            QMsgDetails qMsgDetails = new QMsgDetails(recipient, msgFolder.FirstMessage.ID, XonPresNoti.MSG_FLAG_READ, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            // Verify the last call
            ValueCheck.TestNotNull("Msg Details Data", reply.Data);
            ValueCheck.Test("Msg Details Type", typeof(QDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QDetailsReplyMsgData qDetailsReply = (QDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Msg Details HResult", HResult.S_OK, qDetailsReply.HR);

            // Enumerate the messages again
            msgFolder.Load2();

            // Verify
            msg = msgFolder.FirstMessage;
            ValueCheck.Test("Message Context", 0, msg.Context);
            ValueCheck.Test("Message Flags", XonPresNoti.MSG_FLAG_READ, msg.Flags);
            ValueCheck.Test("Message Sender", sender.UserId, msg.SenderID);
            ValueCheck.Test("Message Sender Name", sender.Name, msg.SenderName);
            ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msg.SentTime, new TimeSpan(0, 1, 0));
            ValueCheck.Test("Message Subject", String.Empty, msg.Subject);
            ValueCheck.Test("Message Title ID", sender.Xbox.TitleId, msg.TitleID);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Enumerate a folder with a title custom flagged message")]
        public void P_Flagged_TitleReserved()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser recipient = MsgTestUtils.CreateCleanUser();
            UserMsgFolder msgFolder = new UserMsgFolder(recipient);

            UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 0);
            msg.Send(recipient);

            msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, sender.UserId, 0, 30);
            msgFolder.Load2();

            ValueCheck.Test("Message Count", (ushort)1, msgFolder.InboxCount);

            // Set all of the title reserved flags
            QMsgDetails qMsgDetails = new QMsgDetails(recipient, msgFolder.FirstMessage.ID, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            // Verify the last call
            ValueCheck.TestNotNull("Msg Details Data", reply.Data);
            ValueCheck.Test("Msg Details Type", typeof(QDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QDetailsReplyMsgData qDetailsReply = (QDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Msg Details HResult", HResult.S_OK, qDetailsReply.HR);

            // Enumerate the messages again
            msgFolder.Load2();

            // Verify
            msg = msgFolder.FirstMessage;
            ValueCheck.Test("Message Context", 0, msg.Context);
            ValueCheck.Test("Message Flags", XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);
            ValueCheck.Test("Message Sender", sender.UserId, msg.SenderID);
            ValueCheck.Test("Message Sender Name", sender.Name, msg.SenderName);
            ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msg.SentTime, new TimeSpan(0, 1, 0));
            ValueCheck.Test("Message Subject", String.Empty, msg.Subject);
            ValueCheck.Test("Message Title ID", sender.Xbox.TitleId, msg.TitleID);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Enumerate via the datacenter port")]
        public void P_NoSpiData_DCPort()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser user = MsgTestUtils.CreateCleanUser();

            UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, 0);
            msg.Send(user);

            user.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Enumerate the message on the datacenter port
            QMsgEnumMsgs2 qEnumMsgs2 = new QMsgEnumMsgs2(user);
            qEnumMsgs2.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qEnumMsgs2.TransactFD(out reply);

            // Validate the reply
            ValueCheck.TestNotNull("Reply Data", reply.Data);
            ValueCheck.Test("Reply Data Type", typeof(QEnumMsgs2ReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumMsgs2ReplyMsgData replyData = (QEnumMsgs2ReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.S_OK, replyData.HR);
            ValueCheck.Test("Reply Item Count", (ushort)1, replyData.MessagesLen);

            UserMsgSummary2 msgSummary = replyData.Messages[0];
            ValueCheck.Test("Message Flags", 0, msgSummary.MessageFlags);
            ValueCheck.Test("Message Type", XonPresNoti.MSG_TYPE_TITLE_CUSTOM, msgSummary.MessageType);
            ValueCheck.Test("Message Context", (ulong)0, msgSummary.SenderContext);
            ValueCheck.Test("Message Sender ID", sender.UserId, msgSummary.SenderID);
            ValueCheck.Test("Message Sender Name", sender.Name, msgSummary.SenderName);
            ValueCheck.Test("Message Title ID", sender.Xbox.TitleId, msgSummary.SenderTitleID);
            ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msgSummary.SentTime.dt, new TimeSpan(0, 1, 0));
        }

        [TestCase, Description("Enumerate a message flagged as non-exportable via the datacenter port")]
        public void P_Flagged_NonExportable_DCPort()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser user = MsgTestUtils.CreateCleanUser();

            UserMessage msg = UserMessage.Create(sender, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, XonPresNoti.MSG_FLAG_NON_EXPORTABLE, 0);
            msg.Send(user);

            user.WaitForNewMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Enumerate the message on the datacenter port
            QMsgEnumMsgs2 qEnumMsgs2 = new QMsgEnumMsgs2(user);
            qEnumMsgs2.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qEnumMsgs2.TransactFD(out reply);

            // Validate the reply
            ValueCheck.TestNotNull("Reply Data", reply.Data);
            ValueCheck.Test("Reply Data Type", typeof(QEnumMsgs2ReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumMsgs2ReplyMsgData replyData = (QEnumMsgs2ReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HR", HResult.S_OK, replyData.HR);
            ValueCheck.Test("Reply Item Count", (ushort)1, replyData.MessagesLen);

            UserMsgSummary2 msgSummary = replyData.Messages[0];
            ValueCheck.Test("Message Flags", XonPresNoti.MSG_FLAG_NON_EXPORTABLE, msgSummary.MessageFlags);
            ValueCheck.Test("Message Type", XonPresNoti.MSG_TYPE_TITLE_CUSTOM, msgSummary.MessageType);
            ValueCheck.Test("Message Context", (ulong)0, msgSummary.SenderContext);
            ValueCheck.Test("Message Sender ID", sender.UserId, msgSummary.SenderID);
            ValueCheck.Test("Message Sender Name", sender.Name, msgSummary.SenderName);
            ValueCheck.Test("Message Title ID", sender.Xbox.TitleId, msgSummary.SenderTitleID);
            ValueCheck.Test("Message Sent Time", DateTime.UtcNow, msgSummary.SentTime.dt, new TimeSpan(0, 1, 0));
        }

        [TestCase, Description("Enumerate messages for a PUID that is offline")]
        public void N_UserIdOffline()
        {
            PNUser user = MsgTestUtils.Fc.CreateUser(false);

            QMsgEnumMsgs2 qEnumMsgs2 = new QMsgEnumMsgs2(user);
            PNMsg reply;
            qEnumMsgs2.TransactFD(out reply);

            ValueCheck.TestNotNull("Enum Reply Data", reply.Data);
            ValueCheck.Test("Enum Reply Type", typeof(QEnumMsgs2ReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumMsgs2ReplyMsgData qEnumMsgs2Reply = (QEnumMsgs2ReplyMsgData)(reply.Data);
            ValueCheck.TestHR("HResult", HResult.S_OK, qEnumMsgs2Reply.HR);
        }

        [TestCase, Description("Enumerate messages for PUID 0")]
        public void N_UserIdZero()
        {
            PNUser user = MsgTestUtils.Fc.CreateUser(false);
            user.UserId = 0;

            QMsgEnumMsgs2 qEnumMsgs2 = new QMsgEnumMsgs2(user);
            PNMsg reply;
            qEnumMsgs2.TransactFD(out reply);

            ValueCheck.TestNotNull("Enum Reply Data", reply.Data);
            ValueCheck.Test("Enum Reply Type", typeof(QEnumMsgs2ReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumMsgs2ReplyMsgData qEnumMsgs2Reply = (QEnumMsgs2ReplyMsgData)(reply.Data);
            ValueCheck.TestHR("HResult", HResult.E_INVALIDARG, qEnumMsgs2Reply.HR);
        }

        [TestCase, Description("Enumerate messages for a PUID that doesn't exist")]
        public void N_UserIdInvalid()
        {
            PNUser user = MsgTestUtils.Fc.CreateUser(false);
            user.UserId += 0x5000000;

            QMsgEnumMsgs2 qEnumMsgs2 = new QMsgEnumMsgs2(user);
            PNMsg reply;
            qEnumMsgs2.TransactFD(out reply);

            ValueCheck.TestNotNull("Enum Reply Data", reply.Data);
            ValueCheck.Test("Enum Reply Type", typeof(QEnumMsgs2ReplyMsgData).Name, reply.Data.GetType().Name);

            QEnumMsgs2ReplyMsgData qEnumMsgs2Reply = (QEnumMsgs2ReplyMsgData)(reply.Data);
            ValueCheck.TestHR("HResult", HResult.E_NO_SUCH_USER, qEnumMsgs2Reply.HR);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncGetMsgDetails.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Notification;
using xonline.common.diagnostics;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for GetMessageDetails
    /// </summary>
    /// Positive cases check for success hr.  Because this message is used to validate the
    ///   exhaustive set of Send cases this list is short.  Summary and details contents will
    ///   be checked against expected, and then validated separately.
    /// Negative Cases check for failure hr that makes sense and is consistent.
    [TestGroup]
    public class FuncGetMsgDetails : MessagingTestGroup
    {
        protected const uint c_TitleCustomFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE | XonPresNoti.MSG_FLAG_HAS_PHOTO;

        protected static PNUser _Sender;
        protected static PNUser _Receiver;

        protected override void OnSetup()
        {
            _Sender = MsgTestUtils.CreateCleanUser();
            _Receiver = MsgTestUtils.CreateCleanUser();
        }

        protected override void OnTearDown()
        {
            MsgTestUtils.Fc.LogoffUser(_Sender);
            MsgTestUtils.Fc.LogoffUser(_Receiver);
        }

        protected static UserMessage CreateTitleCustomMessage()
        {
            return CreateTitleCustomMessage(0, null);
        }

        /// <summary>
        /// Creates a Title Custom message with text, photo, voice, and typical
        /// custom title properties.  All of the data is random.
        /// </summary>
        /// <returns>Custom title message with details</returns>
        protected static UserMessage CreateTitleCustomMessage(uint customFlags, Dictionary<ushort, uint> attachmentFlags)
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();

            MsgDetails msgDetails = MsgTestUtils.CreateDetails(
                MessageDetailTypes.Text | MessageDetailTypes.Photo | MessageDetailTypes.XenonVoice | MessageDetailTypes.TitleCustomData,
                attachmentFlags
                );

            UserMessage msg = UserMessage.Create(
                _Sender,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                context,
                c_TitleCustomFlags | customFlags,
                0,
                msgDetails
                );

            return msg;
        }

        protected static void VerifyMessageDetails(MsgDetails sentDetails, PNMsg detailsReply, uint hr)
        {
            VerifyMessageDetails(sentDetails, detailsReply, hr, c_TitleCustomFlags);
        }

        protected static void VerifyMessageDetails(MsgDetails sentDetails, PNMsg detailsReply, uint hr, uint detailsFlags)
        {
            ValueCheck.TestNotNull("Details Data", detailsReply.Data);
            ValueCheck.Test("Details Data Type", typeof(QDetailsReplyMsgData).Name, detailsReply.Data.GetType().Name);

            QDetailsReplyMsgData qDetailsData = (QDetailsReplyMsgData)detailsReply.Data;
            ValueCheck.Test("Details HR", hr, qDetailsData.HR);

            // Do not validate properties if the HResult failed
            if (HResult.Failed(hr))
                return;

            ValueCheck.Test("Details Message Flags", detailsFlags, qDetailsData.Summary.MessageFlags);

            MsgTestUtils.VerifyMessageDetails(sentDetails, qDetailsData.Details);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Get details for a custom message")]
        public void Mainline()
        {
            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Flagged Non Exportable" )]
        public void Flagged_NonExportable()
        {

            UserMessage msg = CreateTitleCustomMessage(XonPresNoti.MSG_FLAG_NON_EXPORTABLE, null);
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAG_NON_EXPORTABLE);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("One Attachment Flagged Non Exportable")]
        public void One_Attachment_Flagged_NonExportable()
        {

            Dictionary<ushort, uint> attachmentFlags = new Dictionary<ushort,uint>();
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VIDEO_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);

            UserMessage msg = CreateTitleCustomMessage(0, attachmentFlags);
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("All Attachments Flagged Non Exportable")]
        public void All_Attachments_Flagged_NonExportable()
        {

            Dictionary<ushort, uint> attachmentFlags = new Dictionary<ushort, uint>();
            attachmentFlags.Add(XonPresNoti.MSG_PROP_PHOTO_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VIDEO_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VIDEO_FRAME_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VOICE_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);

            UserMessage msg = CreateTitleCustomMessage(0, attachmentFlags);
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description( "DataCenter Port (no SPI Data)" )]
        public void NoSpiData_DCPort()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            qMsgDetails.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Set Flag, Read")]
        public void Flags_Set_Read()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAG_READ, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Set Flags, All Title Reserved ")]
        public void Flags_Set_AllTitleReserved()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Set and Unset Flags, Some Title Reserved " )]
        public void Flags_SetAndUnset_SomeTitleReserved()
        {

            byte[] titleFlags = new byte[] {
                0x01,   // 00000001
                0x55,   // 01010101
                0x7E,   // 01111110
                0x7F,   // 01111111
                0x80,   // 10000000
                0x81,   // 10000001
                0xAA,   // 10101010
                0xFE    // 11111110
            };

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails;
            PNMsg reply;
            uint titleFlag;

            for (int i = 0; i < titleFlags.Length; ++i)
            {
                titleFlag = (uint)(titleFlags[i] << 24);
                Global.RO.Info("Testing Title Flag {0:X08}", titleFlag);
                qMsgDetails = new QMsgDetails(_Receiver, msgId, titleFlag, XonPresNoti.MSG_FLAGS_TITLE_RESERVED & ~titleFlag);
                qMsgDetails.TransactFD(out reply);

                VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | titleFlag);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flags, Read and Invalid")]
        public void Flags_Set_Read_And_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAG_RECOMMENDED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];
            ValueCheck.Test("Original Message Flags", c_TitleCustomFlags, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flags, Title and Invalid")]
        public void Flags_Set_Title_And_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED | XonPresNoti.MSG_FLAG_RECOMMENDED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];
            ValueCheck.Test("Original Message Flags", c_TitleCustomFlags, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Clear Flags, Title and Invalid")]
        public void Flags_Clear_Title_And_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED);

            qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];
            ValueCheck.Test("Original Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flag Valid, Clear Flag Invalid")]
        public void Flags_Set_Valid_Clear_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, XonPresNoti.MSG_FLAG_RECOMMENDED);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];
            ValueCheck.Test("Original Message Flags", c_TitleCustomFlags, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flag Invalid, Clear Flag Valid")]
        public void Flags_Set_Invalid_Clear_Valid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            // Set the title reserved flags as a baseline
            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED);

            // Perform the test
            qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAG_RECOMMENDED, XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];
            ValueCheck.Test("Original Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set and clear the same flag")]
        public void Flags_Set_And_Clear_Same()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Clear Flags, All Title Reserved" )]
        public void Flags_Clear_AllTitleReserved()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED);

            qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "User Not Logged On" )]
        public void User_NotAlive()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            MsgTestUtils.Fc.LogoffUser(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            MsgTestUtils.Fc.LogonUser(_Receiver);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong UA version" )]
        public void UserAgent_WrongVersion()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "User Doesn't Exist" )]
        public void User_DoesNotExist()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            PNUser userPuid0 = MsgTestUtils.Fc.CreateUser();
            userPuid0.UserId += 0x50000000;

            QMsgDetails qMsgDetails = new QMsgDetails(userPuid0, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_NO_SUCH_USER);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "User PUID zero" )]
        public void User_Zero()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            PNUser userPuid0 = MsgTestUtils.Fc.CreateUser();
            userPuid0.UserId = 0;

            QMsgDetails qMsgDetails = new QMsgDetails(userPuid0, msgId, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Message ID zero" )]
        public void MessageId_Zero()
        {

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, 0, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(null, reply, HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Message ID invalid" )]
        public void MessageId_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId + 5000, 0, 0);
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Clear Flags, Invalid" )]
        public void Flags_Clear_Invalid()
        {

            uint[] unclearableFlags = new uint[] {
                XonPresNoti.MSG_FLAG_REQUIRED,
                XonPresNoti.MSG_FLAG_RECOMMENDED,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                XonPresNoti.MSG_FLAG_READ,
                XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                XonPresNoti.MSG_FLAG_TEAM_CONTEXT,
                XonPresNoti.MSG_FLAG_COMP_CONTEXT,
                XonPresNoti.MSG_FLAG_ALTERNATE_TITLE,
                XonPresNoti.MSG_FLAG_MARKETING,
                XonPresNoti.MSG_FLAG_MS_MARKETING,
                XonPresNoti.MSG_FLAG_HAS_PHOTO,
                XonPresNoti.MSG_FLAG_SENDER_IS_FRIEND,
                XonPresNoti.MSG_FLAG_RECV_DETAILS_NEEDED,
                XonPresNoti.MSG_FLAG_SEND_MSG_OWNED
            };

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails;
            PNMsg reply;

            for (int i = 0; i < unclearableFlags.Length; ++i)
            {
                Global.RO.Info("Testing unclearable flag {0}", unclearableFlags[i]);
                qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, unclearableFlags[i]);
                qMsgDetails.TransactFD(out reply);

                VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Set Flags, Invalid" )]
        public void Flags_Set_Invalid()
        {

            uint[] unsettableFlags = new uint[] {
                XonPresNoti.MSG_FLAG_REQUIRED,
                XonPresNoti.MSG_FLAG_RECOMMENDED,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                XonPresNoti.MSG_FLAG_TEAM_CONTEXT,
                XonPresNoti.MSG_FLAG_COMP_CONTEXT,
                XonPresNoti.MSG_FLAG_ALTERNATE_TITLE,
                XonPresNoti.MSG_FLAG_MARKETING,
                XonPresNoti.MSG_FLAG_MS_MARKETING,
                XonPresNoti.MSG_FLAG_HAS_PHOTO,
                XonPresNoti.MSG_FLAG_SENDER_IS_FRIEND,
                XonPresNoti.MSG_FLAG_RECV_DETAILS_NEEDED,
                XonPresNoti.MSG_FLAG_SEND_MSG_OWNED
            };

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails;
            PNMsg reply;

            for (int i = 0; i < unsettableFlags.Length; ++i)
            {
                Global.RO.Info("Testing unsettable flag {0}", unsettableFlags[i]);
                qMsgDetails = new QMsgDetails(_Receiver, msgId, unsettableFlags[i], 0);
                qMsgDetails.TransactFD(out reply);

                VerifyMessageDetails(msg.Details, reply, HResult.E_INVALIDARG);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Flagged Non Exportable, Datacenter Port" )]
        public void Flagged_NonExportable_DCPort()
        {

            UserMessage msg = CreateTitleCustomMessage(XonPresNoti.MSG_FLAG_NON_EXPORTABLE, null);
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            qMsgDetails.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags | XonPresNoti.MSG_FLAG_NON_EXPORTABLE);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("One Attachment Flagged Non Exportable, Datacenter Port")]
        public void One_Attatchment_Flagged_NonExportable_DCPort()
        {

            Dictionary<ushort, uint> attachmentFlags = new Dictionary<ushort, uint>();
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VIDEO_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);

            UserMessage msg = CreateTitleCustomMessage(0, attachmentFlags);
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            qMsgDetails.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("All Attachments Flagged Non Exportable, Datacenter Port")]
        public void All_Attachments_Flagged_NonExportable_DCPort()
        {

            Dictionary<ushort, uint> attachmentFlags = new Dictionary<ushort, uint>();
            attachmentFlags.Add(XonPresNoti.MSG_PROP_PHOTO_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VIDEO_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VIDEO_FRAME_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);
            attachmentFlags.Add(XonPresNoti.MSG_PROP_VOICE_DATA, XonPresNoti.MSG_ATTACHMENT_FLAG_NON_EXPORTABLE);

            UserMessage msg = CreateTitleCustomMessage(0, attachmentFlags);
            uint msgId = msg.Send(_Receiver);

            QMsgDetails qMsgDetails = new QMsgDetails(_Receiver, msgId, 0, 0);
            qMsgDetails.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;
            PNMsg reply;
            qMsgDetails.TransactFD(out reply);

            VerifyMessageDetails(msg.Details, reply, HResult.S_OK, c_TitleCustomFlags);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncGetSystemMsgDetails.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for GetSystemMessageDetails
    /// </summary>
    /// Positive cases check for success hr.  Because this Because this message is used to
    ///   validate the exhaustive set of Send cases this list is short.  Contents will be checked
    ///   against expected.
    /// Negative Cases check for failure hr that makes sense and is consistent.
    [TestGroup]
    public class FuncGetSystemMsgDetails : TestNode
    {
        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Basic GetDetails Test")]
        public void Basic()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];
            msgReceived.GetDetails();
            uint sysTextId = msgReceived.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
            ValueCheck.Test("System Text ID", 1, sysTextId);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message with normal priority")]
        public void PriorityNormal()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Normal,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];
            msgReceived.GetDetails();
            uint sysTextId = msgReceived.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
            ValueCheck.Test("System Text ID", 1, sysTextId);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message with Required priority")]
        public void PriorityRequired()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Required,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];
            msgReceived.GetDetails();
            uint sysTextId = msgReceived.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
            ValueCheck.Test("System Text ID", 1, sysTextId);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Many Details")]
        public void ManyDetails()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );

            // Add more detail data
            MsgDetails details = MsgTestUtils.CreateDetails(
                MessageDetailTypes.Photo |
                MessageDetailTypes.Text |
                MessageDetailTypes.XenonVoice
                );
            details.AddProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT, (uint)1);
            sysMsg.Details = details;

            // Send the message
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];
            msgReceived.GetDetails();

            // Perform the verification
            MsgTestUtils.VerifyMessageDetails(details, msgReceived.Details);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Title ID zero" )]
        public void TitleId_Zero()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                0,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(0);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];
            msgReceived.GetDetails();
            uint sysTextId = msgReceived.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
            ValueCheck.Test("System Text ID", 1, sysTextId);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Title ID Dash" )]
        public void TitleId_Dash()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                XOn.XENON_DASH_TITLE_ID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(XOn.XENON_DASH_TITLE_ID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];
            msgReceived.GetDetails();
            uint sysTextId = msgReceived.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
            ValueCheck.Test("System Text ID", 1, sysTextId);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Via the normal frontdoor path" )]
        public void NonDatacenterPort()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            QMsgSystemDetails msgDetails = new QMsgSystemDetails(MsgTestUtils.DefaultSystemTitleID, msgId);

            // Fill in the normal frontdoor request information
            msgDetails.AuthMethod = PNRequestMsg.FDAuth.SGMsg;
            msgDetails.PortOnFD = PNRequestMsg.FDPort.Messaging;

            PNUser user = MsgTestUtils.Fc.CreateUser(true);
            SGADDR sgAddr = new SGADDR();
            sgAddr.inaSg = user.Xbox.IpSg;
            sgAddr.SpiSg = user.Xbox.SpiSg;
            sgAddr.XboxID = user.Xbox.XboxId;
            msgDetails.Msg.Hdr.Sgaddr = sgAddr;

            // Send and get the reply
            PNMsg reply;
            msgDetails.TransactFD(out reply);
            ValueCheck.Test("Reply Data Type", typeof(QSystemDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QSystemDetailsReplyMsgData replyData = (QSystemDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HRESULT", HResult.XONLINE_E_NOTIFICATION_INVALID_MESSAGE_TYPE, replyData.HR);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Message ID zero" )]
        public void MessageId_Zero()
        {

            QMsgSystemDetails msgDetails = new QMsgSystemDetails(MsgTestUtils.DefaultSystemTitleID, 0);
            PNMsg reply;
            msgDetails.TransactFD(out reply);

            ValueCheck.Test("Reply Data Type", typeof(QSystemDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QSystemDetailsReplyMsgData replyData = (QSystemDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Get Details Twice for the same message")]
        public void GetTwice()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            SystemMessage msgReceived = sysFolder[msgId];

            for (int i = 0; i < 2; ++i)
            {
                msgReceived.GetDetails();
                uint sysTextId = msgReceived.Details.GetStringIdProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT);
                ValueCheck.Test("System Text ID", 1, sysTextId);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message ID doesn't exist")]
        public void MessageId_NotExist()
        {

            QMsgSystemDetails msgDetails = new QMsgSystemDetails(MsgTestUtils.DefaultSystemTitleID, 500);
            PNMsg reply;
            msgDetails.TransactFD(out reply);

            ValueCheck.Test("Reply Data Type", typeof(QSystemDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QSystemDetailsReplyMsgData replyData = (QSystemDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message ID with the high bit set")]
        public void MessageId_SendFailed()
        {

            QMsgSystemDetails msgDetails = new QMsgSystemDetails(MsgTestUtils.DefaultSystemTitleID, 1 | XonPresNoti.MSG_ID_SEND_FAILED);
            PNMsg reply;
            msgDetails.TransactFD(out reply);

            ValueCheck.Test("Reply Data Type", typeof(QSystemDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QSystemDetailsReplyMsgData replyData = (QSystemDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Get Details of a deleted message")]
        public void MessageId_DeletedMessage()
        {

            SystemMessage sysMsg = SystemMessage.CreateLiveMsg(
                Message.Priority.Recomended,
                "MessagingTest",
                MsgTestUtils.DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                Name,
                1,
                0,
                5
                );
            uint msgId = sysMsg.Send();

            SystemMsgFolder sysFolder = new SystemMsgFolder(MsgTestUtils.DefaultSystemTitleID);
            sysFolder.Load();
            ValueCheck.TestNotNull("Message Exists", sysFolder[msgId]);

            sysFolder[msgId].Delete(SystemMessage.RevokeAlso.No);
            sysFolder.Load();
            ValueCheck.TestNull("Message Exists After Delete", sysFolder[msgId]);

            QMsgSystemDetails msgDetails = new QMsgSystemDetails(MsgTestUtils.DefaultSystemTitleID, msgId);
            PNMsg reply;
            msgDetails.TransactFD(out reply);

            ValueCheck.Test("Reply Data Type", typeof(QSystemDetailsReplyMsgData).Name, reply.Data.GetType().Name);
            QSystemDetailsReplyMsgData replyData = (QSystemDetailsReplyMsgData)(reply.Data);
            ValueCheck.TestHR("Reply HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, replyData.HR);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncSendSystemMsg.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;

using xonline.common.protocol;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for SendSystemMessage
    /// </summary>
    /// Positive cases check for success hr, and that the message ID has system message bit set.
    ///   Also message contents are verified with QMSG_SYSTEM_MESSAGE_DETAILS and
    ///   QMSG_ENUM_SYSTEM_MESSAGES. Delivery, or not, to expected recipients once they Alive is
    ///   validated by QMSG_ENUM_MESSAGES with contents checked using QMSG_MESSAGE_DETAILS if needed.
    /// Negative Cases check for failure hr that makes sense and is consistent.
    [TestGroup]
    [TestTag("Unreviewed")]
    public class FuncSendSystemMsg : TestNode
    {
        public static uint DefaultSystemTitleID = 10;

        void ClearSystemMessages(uint titleId)
        {
            // Clean out system messages for this title everywhere
            SystemMsgFolder.DeleteAll(titleId, SystemMessage.RevokeAlso.Yes );
        }

        uint SendSystemMessage(string description, Message.Priority pri, uint titleId, uint region, ushort delayMinutes, ushort expireMinutes, uint flags)
        {
            // Build and send message
            SystemMessage msg =
                SystemMessage.CreateLiveMsg(
                pri,
                "MessagingTest",
                titleId,
                region,
                description,
                1, // string Id
                delayMinutes,
                expireMinutes );
            msg.Flags |= flags;
            uint msgId = msg.Send();

            // Fetch copy and validate message
            SystemMessage msgFetched = new SystemMessage( titleId, msgId );
            msg.CheckSystemMessage( msgFetched );

            return msgId;
        }

        static void CheckAliveHR(uint hr, uint msgFlags)
        {
            if (0 != (XonPresNoti.MSG_FLAG_REQUIRED & msgFlags))
            {
                ValueCheck.TestHR("AliveHR after required system message", HResult.XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT, hr);
            }
            else if (0 != (XonPresNoti.MSG_FLAG_RECOMMENDED & msgFlags))
            {
                ValueCheck.TestHR("AliveHR after recommended system message", HResult.XONLINE_S_LOGON_USER_HAS_MESSAGE, hr);
            }
            else
            {
                ValueCheck.TestHR("AliveHR after normal system message", HResult.XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED, hr);
            }
        }

        void CheckForMessage(uint titleId, uint region, uint msgFlags)
        {
            CheckForMessage(
                titleId,
                region,
                msgFlags,
                true,
                (uint)(MsgTestUtils.IsWelcomeMessageEnabled ? 2 : 1)
                );
        }

        void CheckForMessage(uint titleId, uint region, uint msgFlags, bool deleteMsg, uint expectCount)
        {
            CheckForMessage(titleId, region, msgFlags, deleteMsg, expectCount, false);
        }

        void CheckForMessage(uint titleId, uint region, uint msgFlags, bool deleteMsg, uint expectCount, bool subscribetoMarketing)
        {
            uint hr = 0;

            // Xenon
            PNUser xeu = MsgTestUtils.Fc.CreateUser(false, titleId, XboxVersion.FEB_2005_ALPHA_XEDK, true);
            if (subscribetoMarketing)
            {
                xeu.SubscribeToMSMarketing();
                xeu.SubscribeToPartnerMarketing();
            }
            xeu.Xbox.ChangeTitle(titleId, PNXbox.DefTitleVersion, region);

            try
            {
                hr = MsgTestUtils.Fc.LogonUser(xeu);
            }
            catch(HResultException ex)
            {
                hr = ex.HR;
            }
            CheckAliveHR(hr, msgFlags);

            UserMsgFolder xeumf = new UserMsgFolder(xeu);
            uint msgCount = xeumf.Load();
            ValueCheck.Test("Xenon UserMsgFolder.Count", expectCount, msgCount);
            if(deleteMsg)
            {
                xeumf.DeleteAllMessages();
            }
        }

        [TestCase, Description("Send a system message with the marketing flag")]
        public void P_Send_Marketing()
        {
            ClearSystemMessages(DefaultSystemTitleID);
            SendSystemMessage("Marketing", Message.Priority.Normal, DefaultSystemTitleID, 0, 0, 10, XonPresNoti.MSG_FLAG_MARKETING);
            CheckForMessage(
                DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                XonPresNoti.MSG_FLAG_MARKETING,
                true,
                (uint)(MsgTestUtils.IsWelcomeMessageEnabled ? 2 : 1),
                true
                );
        }

        [TestCase, Ignore("System messages do not support MS Marketing (0x400), only Marketing (0x200)"), Description("Send a system message with the MS Marketing flag")]
        public void P_Send_MsMarketing()
        {
            ClearSystemMessages(DefaultSystemTitleID);
            SendSystemMessage("Marketing", Message.Priority.Normal, DefaultSystemTitleID, 0, 0, 10, XonPresNoti.MSG_FLAG_MS_MARKETING);
            CheckForMessage(DefaultSystemTitleID, PNXbox.DefTitleRegion, XonPresNoti.MSG_FLAG_MS_MARKETING);
        }

        [TestCase, Description("Send a system message with more than 32 characters in the subject")]
        public void P_Send_Over32CharSubject()
        {
            ClearSystemMessages(DefaultSystemTitleID);
            SendSystemMessage("0123456789abcdef0123456789abcdefZ", Message.Priority.Normal, DefaultSystemTitleID, 0, 0, 10, 0);
            CheckForMessage(DefaultSystemTitleID, PNXbox.DefTitleRegion, 0);
        }

        [TestCase, Description("Send multiple required system messages")]
        public void P_Send_MultipleRequiredMessages()
        {
            ClearSystemMessages(DefaultSystemTitleID);
            SendSystemMessage("Test1", Message.Priority.Required, DefaultSystemTitleID, 0, 0, 10, 0);
            CheckForMessage(
                DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                XonPresNoti.MSG_FLAG_REQUIRED,
                false,
                (uint)(MsgTestUtils.IsWelcomeMessageEnabled ? 2 : 1)
                );
            SendSystemMessage("Test2", Message.Priority.Required, DefaultSystemTitleID, 0, 0, 10, 0);
            CheckForMessage(
                DefaultSystemTitleID,
                PNXbox.DefTitleRegion,
                XonPresNoti.MSG_FLAG_REQUIRED,
                true,
                (uint)(MsgTestUtils.IsWelcomeMessageEnabled ? 3 : 2)
                );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Send a normal priority system message" )]
        public void Normal()
        {
            MsgTestUtils.InitValidLiveMsg( this.Name, Message.Priority.Normal, MsgTestUtils.DefaultSystemTitleID, 0, 0, 10 );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Send a recomended priority system message" )]
        public void Recomended()
        {
            MsgTestUtils.InitValidLiveMsg( this.Name, Message.Priority.Recomended, MsgTestUtils.DefaultSystemTitleID, 0, 0, 10 );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Send a required priority system message" )]
        public void Required()
        {
            MsgTestUtils.InitValidLiveMsg( this.Name, Message.Priority.Required, MsgTestUtils.DefaultSystemTitleID, 0, 0, 10 );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Send a simple required priority system message to an alt title" )]
        public void Required_AltTitle()
        {
            SystemMessage msg =
                MsgTestUtils.InitValidLiveMsg( this.Name, Message.Priority.Required, PNXbox.DefTitleRegion, MsgTestUtils.DefaultSystemTitleID, 0, 10 );

            PNXbox xbox = new PNXbox(true);
            uint[] altTitle = { MsgTestUtils.DefaultSystemTitleID };
            ServerTestFramework.LiveService.FakeSG.GlobalFakeSG.FakeSG.SetAltTitles( xbox.XboxId, altTitle );

            PNUser user = MsgTestUtils.Fc.CreateXenonUser(false);
            MsgTestUtils.Fc.LogonUser(user, xbox);

            // but login should have moved it to the user's queue
            UserMsgFolder folder = new UserMsgFolder( user );
            folder.Load();

            // Make sure its the message expected.
            UserMessage msgRecvd = folder[ msg.ID ];
            msg.Check( msgRecvd );
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Send a simple required priority system message to a specific region" )]
        public void Required_Regional()
        {

            PNXbox xbox = new PNXbox(MsgTestUtils.DefaultSystemTitleID, ClientVersions.LatestXenonClientVersion, true);
            PNUser user = MsgTestUtils.Fc.CreateXenonUser(false);

            try
            {
                SystemMessage msg =
                    MsgTestUtils.InitValidLiveMsg( this.Name, Message.Priority.Required,
                            xbox.TitleRegion, xbox.TitleId, 0, 10 );
                try
                {
                    MsgTestUtils.Fc.LogonUser(user, xbox);
                }
                catch(HResultException ex)
                {
                    ValueCheck.Test("Expected HR", HResult.XONLINE_E_LOGON_USER_ACCOUNT_REQUIRES_MANAGEMENT, ex.HR);
                }

                // Get the message out
                UserMsgFolder folder = new UserMsgFolder(user);
                folder.Load();

                // Make sure its the message expected.
                UserMessage msgRecvd = folder[ msg.ID ];
                msg.Check( msgRecvd );
                msgRecvd.Delete(user);

                // Make sure we can connect now.
                user.Alive();
            }
            catch(Exception ex)
            {
                throw ex;
            }
            finally
            {
                SystemMsgFolder.DeleteAll( MsgTestUtils.DefaultSystemTitleID, SystemMessage.RevokeAlso.Yes );
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description( "Send a simple required priority system message to activate in the future" )]
        public void Future_Activation()
        {
            MsgTestUtils.InitValidLiveMsg( this.Name, Message.Priority.Required, 0, MsgTestUtils.DefaultSystemTitleID, 2, 10 );

            // Log in user for this title
            PNUser user = MsgTestUtils.CreateCleanUser();
            MsgTestUtils.Fc.LogoffUser(user);
            MsgTestUtils.Fc.LogonUser(user, MsgTestUtils.DefaultSystemTitleID);

            // Set up a user message folder for the new user that should be empty
            UserMsgFolder userFolder = new UserMsgFolder( user.UserId );
            userFolder.Load();
            ValueCheck.Test( "UserMsgFolder.Count", (ushort)0, userFolder.Count );
            MsgTestUtils.Fc.LogoffUser(user);

            // Wait 2 minutes
            Thread.Sleep( 120000 );

            uint hr = 0;
            try
            {
                hr = MsgTestUtils.Fc.LogonUser(user);
            }
            catch(HResultException ex)
            {
                hr = ex.HR;
            }

            CheckAliveHR(hr, XonPresNoti.MSG_FLAG_REQUIRED);

            //// Log in user again and check validate delivery of new message
            //MsgTestUtils.Fc.LogonUser(user, MsgTestUtils.DefaultSystemTitleID);
            userFolder.Load();
            ValueCheck.Test("UserMsgFolder.Count", (ushort)1, userFolder.Count);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "DataCenter Port (no SPI Data)" )]
        public void NoSpiData_DCPort()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "No X-Delay" )]
        public void NoXDelay()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Title ID zero Verify changed to Dash for users." )]
        public void TitleId_Zero()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Title ID Dash " )]
        public void TitleId_Dash()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Specific Title ID" )]
        public void Specific_TitleId()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Specific Alt Title ID" )]
        public void Specific_AltTitleId()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Context Random" )]
        public void Context_Random()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Region zero" )]
        public void Region_Zero()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Specific region" )]
        public void Specific_Region()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Voice, with all associated properties present.  Check for notification flag" )]
        public void Flagged_Voice()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Text, with all associated properties present.  Check for notification flag" )]
        public void Flagged_Text()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Non Exportable" )]
        public void Flagged_NonExportable()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged All title reserved.  Check for notification flag" )]
        public void Flagged_AllTitleReserved()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Marketing " )]
        public void Flagged_Marketing()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Opt out users" )]
        public void Opt_Out()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Expiration zero, All Types" )]
        public void Expiration_Zero()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Expiration In range, All Types" )]
        public void Expiration_InRange()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Expiration Max, All Types" )]
        public void Expiration_Max()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Null Property    " )]
        public void Property_Null()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Byte Property" )]
        public void Property_Btye()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Word Property" )]
        public void Property_Word()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Dword Property" )]
        public void Property_Dword()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Qword Property" )]
        public void Property_Qword()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "String Property" )]
        public void Property_String()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Filetime Property" )]
        public void Property_Filetime()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Binary Property" )]
        public void Property_Binary()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Attachment Property" )]
        public void Property_Attachment()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Bool Property" )]
        public void Property_Bool()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "String ID Property" )]
        public void Property_StringID()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "All Properties" )]
        public void Properties_All()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Max Details Size" )]
        public void Details_MaxSize()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Live Type" )]
        public void Type_Live()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Lower bound Sender name" )]
        public void SenderName_Min()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Upper bound Sender name" )]
        public void SenderName_Max()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Upper bound description" )]
        public void Desc_Max()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "PresNotii FD port" )]
        public void FDPort_PresNoti()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Messaging FD port" )]
        public void FDPort_Messaging()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong URL, Notification" )]
        public void Url_Notification()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong URL, Presence" )]
        public void Url_Presence()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong URL, Messaging" )]
        public void Url_Messaging()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Wrong UA version" )]
        public void UserAgent_WrongVersion()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Already Expired" )]
        public void Expired_Already()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged both Required and Recommended" )]
        public void Flagged_BothRequiredAndRecomended()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Voice, with Data property missing" )]
        public void Flagged_Voice_DataMissing()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Voice, with Codec property missing" )]
        public void Flagged_Voice_CodecMissing()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Voice, with Duration property missing" )]
        public void Flagged_Voice_DurationMissing()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Text, with Text property missing" )]
        public void Flagged_Text_TextMissing()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Has Text, with Language property missing" )]
        public void Flagged_Voice_LanguageMissing()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged Read" )]
        public void Flagged_Read()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Flagged with other random invalid." )]
        public void Flagged_RandomInvalid()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Expiration to high, All Types" )]
        public void Expiration_TooHigh()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Details Too large" )]
        public void Details_TooLarge()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Too Many Properties" )]
        public void Properties_TooMany()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Duplicate Property Tags" )]
        public void Properties_DuplicateTags()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Duplicate Property Index (but different type)" )]
        public void Properties_DuplicateIndex()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Type Friend Request" )]
        public void Type_FriendRequest()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Type Game Invite" )]
        public void Type_GameInvite()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Type Live Message, no properties" )]
        public void LiveMessage_NoProperties()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Sender Name blank" )]
        public void SenderName_Null()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Sender Name too long" )]
        public void SenderName_TooLong()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Description too long" )]
        public void Desc_TooLong()
        {
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Ignore, Description( "Description not null terminated" )]
        public void Desc_NoNullTerm()
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\Globals.cs ===
using ServerTestFramework;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;

namespace MessagingTest
{
    public class Globals
    {
        public const uint Expected_XDelay_Send       = 0;
        public const uint Expected_XDelay_GetSummary = 0;
        public const uint Expected_XDelay_GetDetails = 0;
        public const uint Expected_XDelay_SetFlags   = 0;
        public const uint Expected_XDelay_Enum       = 0;
        public const uint Expected_XDelay_Delete     = 0;
        public const uint Expected_XDelay_Revoke     = 0;

        // Initalize global PNUser creattion and manipulation stuff
        static public FriendsCommon Fc = new FriendsCommon();


        // Array of titleIds that will be used.
        private static uint[] sharedTitleIds = { 0x110, 0x220, 0x330, };

        //////////////////////////////////////
        /// <summary>
        /// Gets ID of indexed title
        /// </summary>
        /// <param name="iTitleId">Title number</param>
        /// <returns>Title Id</returns>
        public static uint DefTitle( uint iTitleId )
        {
            return sharedTitleIds[iTitleId-1];
        }

        //////////////////////////////////////
        /// <summary>
        /// Creates a new user that has no messages
        /// </summary>
        /// <param name="iTitleId">Title number (1 or 2)</param>
        /// <returns>Pristine new user, logged in and ready for action</returns>
        public static PNUser CreateCleanUser( uint iTitleId )
        {
            PNUser user = null;
            int i = 0;
            do
            {
                user = new PNUser();
                for( i = 0; i < 3; ++i )
                {
                    Fc.LogonUser( user, sharedTitleIds[ i ] );
                    UserMsgFolder folder = new UserMsgFolder( user );
                    folder.Load();
                    Fc.LogoffUser( user );
                    if( folder.Count != 0 )
                        break;
                }
            }
            while( i != 3 );
            Fc.LogonUser( user, sharedTitleIds[ iTitleId-1 ] );

            return user;
        }


        //////////////////////////////////////
        /// <summary>
        /// A user with puid 0,
        ///  and a valid FakeSG xbox that's not logged on
        /// </summary>
        public static PNUser ZeroUser
        {
            get
            {
                if( zeroUser == null )
                {
                    zeroUser = new PNUser( "StfZero", 0 );
                    zeroUser.Xbox = new PNXbox( 0, 0, 0 );
                }
                return zeroUser;
            }
            set{ zeroUser = value; }
        }
        private static PNUser zeroUser = null;


        //////////////////////////////////////
        /// <summary>
        /// A user with a (hopefully) unused puid,
        ///  and a valid FakeSG xbox that's not logged on
        /// </summary>
        public static PNUser InvalidUser
        {
            get
            {
                if( invalidUser == null )
                {
                    invalidUser = new PNUser( "StfInvalid", 0xfefe000000000000 );
                    invalidUser.Xbox = new PNXbox();
                }
                return invalidUser;
            }
            set{ invalidUser = value; }
        }
        private static PNUser invalidUser = null;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncRevokeMsg.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for Revoke Message
    /// </summary>
    /// Positive cases check for success hr, and that recipients get the QVAL and message is removed
    /// Negative Cases check for failure hr that makes sense and is consistent.
    [TestGroup]
    public class FuncRevokeMsg : TestNode
    {
        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Revoke a transient message")]
        public void Recipients_One()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revoke a transient message with the maximum number of recipients")]
        public void Recipients_Max()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] recipients = MsgTestUtils.Fc.CreateXenonUsers(XonPresNoti.MAX_MESSAGE_RECIPIENTS, true);

            List<UserMessage> msgList = MsgTestUtils.SendGameInvite(a, recipients);

            RecipientResult[] results = new RecipientResult[XonPresNoti.MAX_MESSAGE_RECIPIENTS];
            for (int i = 0; i < results.Length; ++i)
            {
                results[i] = new RecipientResult();
                results[i].userId = recipients[i].UserId;
                results[i].msgId = msgList[i].ID;
            }

            MsgTestUtils.RevokeMessage(a, msgList[0].Context, msgList[0].Type, results);

            for (int i = 0; i < recipients.Length; ++i)
            {
                MsgTestUtils.WaitForDeletedMessage(recipients[i], msgList[i].ID);
                MsgTestUtils.VerifyMessageIsGone(recipients[i], msgList[i].ID);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revoke from one of many recipients")]
        public void Recipients_Subset()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] recipients = MsgTestUtils.Fc.CreateXenonUsers(3, true);

            List<UserMessage> msgList = MsgTestUtils.SendGameInvite(a, recipients);

            RecipientResult result = new RecipientResult();
            result.userId = recipients[1].UserId;
            result.msgId = msgList[1].ID;

            MsgTestUtils.RevokeMessage(a, msgList[0].Context, msgList[0].Type, new RecipientResult[] { result });

            MsgTestUtils.WaitForDeletedMessage(recipients[1], msgList[1].ID);
            MsgTestUtils.VerifyMessageIsGone(recipients[1], msgList[1].ID);

            try
            {
                // We expect to not receive a delete notification for this one user, but
                // we can assume that this wait is long enough for the second user as well
                // for the message existence check below
                MsgTestUtils.WaitForDeletedMessage(recipients[0], msgList[0].ID);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            MsgTestUtils.VerifyMessageExists(recipients[0], msgList[0].ID, a.UserId, msgList[0].Type);
            MsgTestUtils.VerifyMessageExists(recipients[2], msgList[2].ID, a.UserId, msgList[2].Type);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Context should be ignored")]
        public void ContextIsIgnored()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context + 0x100, msg.Type, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message type should be ignored")]
        public void TypeIsIgnored()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message type should be ignored")]
        public void SenderIsIgnored()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            a.UserId += 0x1000;

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        [TestCase, Description("Revoke persistent messages")]
        [CompoundCase("FriendRequest", XonPresNoti.MSG_TYPE_FRIEND_REQUEST)]
        [CompoundCase("LiveMessage", XonPresNoti.MSG_TYPE_LIVE_MESSAGE)]
        [CompoundCase("PartyChatInvite", XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE)]
        [CompoundCase("PersonalMessage", XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE)]
        [CompoundCase("QuickChatInvite", XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE)]
        [CompoundCase("TitleCustom", XonPresNoti.MSG_TYPE_TITLE_CUSTOM)]
        [CompoundCase("VideoChatInvite", XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE)]
        public void PersistentMessage(TestNode self)
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            byte msgType = (byte)self.MyValues[0];

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, msgType);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message ID Zero")]
        public void MessageIdZero()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = 0;

            try
            {
                MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            MsgTestUtils.VerifyMessageExists(b, msg.ID, a.UserId, msg.Type);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("User ID Zero"), Ignore("Causes assert in the Presence INH")]
        public void UserIdZero()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = 0;
            result.msgId = msg.ID;

            try
            {
                MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("User ID Does Not Exist")]
        public void UserIdDoesNotExist()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId + 0x1000;
            result.msgId = msg.ID;

            try
            {
                MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("User ID Invalid")]
        public void UserIdInvalid()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = ulong.MaxValue;
            result.msgId = msg.ID;

            try
            {
                MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revokes a message as PUID 0 via the public port")]
        public void SenderPuidZero()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            a.UserId = 0;

            try
            {
                MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
                throw new UnexpectedTestResultException("Revoke should not have succeeded");
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revokes a message as PUID 0 via the internal port")]
        public void SenderPuidZero_DC()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            a.UserId = 0;

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result }, true);
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Sender Not Logged On")]
        public void SenderNotLoggedOn()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.Fc.LogoffUser(a);
            //TODO: Find the replacement of the following line.
            //PNServers.SetCacheState(a, CacheState.NotInMemory);

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revoke via the datacenter port")]
        public void DatacenterPort()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result }, true);
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revoke a message flagged as non-exportable")]
        public void FlaggedNonExportable()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateMessage(a, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            msg.Flags |= XonPresNoti.MSG_FLAG_NON_EXPORTABLE;
            msg.Send(b);
            MsgTestUtils.WaitForMessageDelivery(msg);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result });
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Revoke a message flagged as non-exportable via the datacenter port")]
        public void FlaggedNonExportableDCPort()
        {

            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateMessage(a, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            msg.Flags |= XonPresNoti.MSG_FLAG_NON_EXPORTABLE;
            msg.Send(b);
            MsgTestUtils.WaitForMessageDelivery(msg);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;
            result.msgId = msg.ID;

            MsgTestUtils.RevokeMessage(a, msg.Context, msg.Type, new RecipientResult[] { result }, true);
            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncSendMsgDataCenter.cs ===
using System;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Notification;


//
// A class of tests for testing messaging against the datacenter port
// this invokes different parts of the code path as it shouldn't
// require login.
//
namespace MessagingTest
{
    /// <summary>
    /// Integration Tests for DataCenter based SendMessage
    /// </summary>
    [TestGroup]
    [TestTag("Unreviewed")]
        public void FuncSendMsgDataCenter()
    {
        public void SendMsgDataCenterBase()
        {
            protected PNUser user1, user2;
            protected PNXbox xbox1, xbox2;
            protected ulong context;
            protected ushort expireMinutes;


            //
            // Templatized test
            //
            protected virtual void DoPreInit()
            {
                context = 0;
                expireMinutes = 10;
            }

            protected virtual void DoInit()
            {
                user1 = MsgTestUtils.CreateCleanUser();
                user2 = MsgTestUtils.CreateCleanUser();
                MsgTestUtils.Fc.LogoffUser(user1);
                MsgTestUtils.Fc.LogoffUser(user2);

                xbox1 = new PNXbox();
                xbox2 = new PNXbox();

                user1.Connect(xbox1);
                user2.Connect(xbox2);
            }

            protected virtual void DoTest()
            {
            }

            protected virtual void DoCleanup()
            {
            }


            DoPreInit();
            DoInit();
            DoTest();
            DoCleanup();


            //
            // Helpers
            //
            protected UserMessage SendTitleMessage(PNUser from, PNUser to)
            {
                UserMessage userMsg = UserMessage.Create(from, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, context, 0, expireMinutes);
                userMsg.Send(to, PNRequestMsg.FDPort.Messaging_DC);
                return userMsg;
            }

            protected void CheckMessageCount(PNUser user, uint expectCount)
            {
                UserMsgFolder folder = new UserMsgFolder(user);
                uint actualCount = folder.Load();
                ValueCheck.Test("Number of sent messages", expectCount, actualCount);
            }
        }

        //
        // Begin test cases
        //
        [TestCase]
            class P_Title_Custom_Send : SendMsgDataCenterBase
            {
                protected override void DoTest()
                {
                    UserMessage msg = SendTitleMessage(user1, user2);
                    CheckMessageCount(user2, 1);
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

        [TestCase]
            class P_Title_Custom_GetDetails : SendMsgDataCenterBase
            {
                protected override void DoTest()
                {
                    UserMessage msg = SendTitleMessage(user1, user2);
                    CheckMessageCount(user2, 1);
                    msg.GetDetails(user2);
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

        [TestCase]
            class P_Title_Custom_Delete_Block : SendMsgDataCenterBase
            {
                protected override void DoTest()
                {
                    UserMessage msg = SendTitleMessage(user1, user2);
                    CheckMessageCount(user2, 1);
                    msg.Delete(user2, true);
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

        [TestCase]
            class P_Title_Custom_Delete_No_Block : SendMsgDataCenterBase
            {
                protected override void DoTest()
                {
                    UserMessage msg = SendTitleMessage(user1, user2);
                    CheckMessageCount(user2, 1);
                    msg.Delete(user2, false);
                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

        [TestCase(36434), Ignore("Blocking PUID 0 causes an assert in xpserver")]
            class N_Title_Custom_Delete_Block_UserZero : SendMsgDataCenterBase
            {
                protected override void DoTest()
                {
                    PNUser system = new PNUser("System", 0);
                    PNXbox systemBox = new PNXbox();
                    system.Connect(systemBox);
                    UserMessage msg = SendTitleMessage(system, user2);
                    CheckMessageCount(user2, 1);
                    msg.Delete(user2, true);
                }
            }

        [TestCase(36434)]
            class N_Title_Custom_Delete_No_Block_UserZero : SendMsgDataCenterBase
            {
                protected override void DoTest()
                {
                    PNUser system = new PNUser("System", 0);
                    PNXbox systemBox = new PNXbox();
                    system.Connect(systemBox);
                    UserMessage msg = SendTitleMessage(system, user2);
                    CheckMessageCount(user2, 1);
                    msg.Delete(user2, false);
                }
            }


        // TODO-jacobr: TitleCustom: Summary, Delete, Revoke
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncSetMsgFlags.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for SetMessageFlags
    /// </summary>
    /// Positive casescheck for success hr.
    /// Negative Cases check for failure hr that makes sense and is consistent.
    [TestGroup]
    public class FuncSetMsgFlags : MessagingTestGroup
    {
        protected const uint c_TitleCustomFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE | XonPresNoti.MSG_FLAG_HAS_PHOTO;

        protected static PNUser _Sender;
        protected static PNUser _Receiver;

        protected override void OnSetup()
        {
            _Sender = MsgTestUtils.CreateCleanUser();
            _Receiver = MsgTestUtils.CreateCleanUser();
        }

        protected override void OnTearDown()
        {
            MsgTestUtils.Fc.LogoffUser(_Sender);
            MsgTestUtils.Fc.LogoffUser(_Receiver);
        }

        protected static UserMessage CreateTitleCustomMessage()
        {
            return CreateTitleCustomMessage(0, null);
        }

        /// <summary>
        /// Creates a Title Custom message with text, photo, voice, and typical
        /// custom title properties.  All of the data is random.
        /// </summary>
        /// <returns>Custom title message with details</returns>
        protected static UserMessage CreateTitleCustomMessage(uint customFlags, Dictionary<ushort, uint> attachmentFlags)
        {
            ulong context = RandomEx.GlobalRandGen.NextUlong();

            MsgDetails msgDetails = MsgTestUtils.CreateDetails(
                MessageDetailTypes.Text | MessageDetailTypes.Photo | MessageDetailTypes.XenonVoice | MessageDetailTypes.TitleCustomData,
                attachmentFlags
                );

            UserMessage msg = UserMessage.Create(
                _Sender,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                context,
                c_TitleCustomFlags | customFlags,
                0,
                msgDetails
                );

            return msg;
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Flagged Non Exportable")]
        public void Flagged_NonExportable()
        {

            UserMessage msg = CreateTitleCustomMessage(XonPresNoti.MSG_FLAG_NON_EXPORTABLE, null);
            uint msgId = msg.Send(_Receiver);
            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_NON_EXPORTABLE | XonPresNoti.MSG_FLAG_READ, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Flagged Non Exportable via the Datacenter Port")]
        public void Flagged_NonExportable_DCPort()
        {

            UserMessage msg = CreateTitleCustomMessage(XonPresNoti.MSG_FLAG_NON_EXPORTABLE, null);
            uint msgId = msg.Send(_Receiver);
            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0, true);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_NON_EXPORTABLE | XonPresNoti.MSG_FLAG_READ, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("DataCenter Port (no SPI Data)")]
        public void NoSpiData_DCPort()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);
            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0, true);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Set Flag, Read")]
        public void Flags_Set_Read()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);
            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Set Flags, All Title Reserved ")]
        public void Flags_Set_AllTitleReserved()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);
            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set and Unset Flags, Some Title Reserved ")]
        public void Flags_SetAndUnset_SomeTitleReserved()
        {

            byte[] titleFlags = new byte[] {
                0x01,   // 00000001
                0x55,   // 01010101
                0x7E,   // 01111110
                0x7F,   // 01111111
                0x80,   // 10000000
                0x81,   // 10000001
                0xAA,   // 10101010
                0xFE    // 11111110
            };

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);
            uint titleFlag;

            for (int i = 0; i < titleFlags.Length; ++i)
            {
                titleFlag = (uint)(titleFlags[i] << 24);
                Global.RO.Info("Testing Title Flag {0:X08}", titleFlag);

                _Receiver.SetMsgFlags(msgId, titleFlag, XonPresNoti.MSG_FLAGS_TITLE_RESERVED & ~titleFlag);

                UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags | titleFlag, msg.Flags);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flags, Read and Invalid")]
        public void Flags_Set_Read_And_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            try
            {
                _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAG_RECOMMENDED, 0);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);

                UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags, msg.Flags);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flags, Title and Invalid")]
        public void Flags_Set_Title_And_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            try
            {
                _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED | XonPresNoti.MSG_FLAG_RECOMMENDED, 0);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);

                UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags, msg.Flags);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Clear Flags, Title and Invalid")]
        public void Flags_Clear_Title_And_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);

            try
            {
                _Receiver.SetMsgFlags(msgId, 0, XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);

                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flag Valid, Clear Flag Invalid")]
        public void Flags_Set_Valid_Clear_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags, msg.Flags);

            try
            {
                _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, XonPresNoti.MSG_FLAG_RECOMMENDED);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);

                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags, msg.Flags);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flag Invalid, Clear Flag Valid")]
        public void Flags_Set_Invalid_Clear_Valid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);

            try
            {
                _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_RECOMMENDED, XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);

                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Clear Flags, All Title Reserved")]
        public void Flags_Clear_AllTitleReserved()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAGS_TITLE_RESERVED, msg.Flags);

            _Receiver.SetMsgFlags(msgId, 0, XonPresNoti.MSG_FLAGS_TITLE_RESERVED);

            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set read flag on transient message")]
        public void Flags_Set_Read_Transient_Message()
        {

            UserMessage invite = MsgTestUtils.SendGameInviteWithText(_Sender, _Receiver);
            ValueCheck.Test("Message Flags", XonPresNoti.MSG_FLAG_HAS_TEXT, invite.Flags);

            _Receiver.SetMsgFlags(invite.ID, XonPresNoti.MSG_FLAG_READ, 0);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            invite = msgFolder[invite.ID];

            ValueCheck.Test("Message Flags", XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_READ, invite.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("User Not Logged On")]
        public void User_NotAlive()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            MsgTestUtils.Fc.LogoffUser(_Receiver);
            _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0);
            MsgTestUtils.Fc.LogonUser(_Receiver);

            UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
            msgFolder.Load2();
            msg = msgFolder[msgId];

            ValueCheck.Test("Message Flags", c_TitleCustomFlags | XonPresNoti.MSG_FLAG_READ, msg.Flags);
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("User Doesn't Exist")]
        public void User_DoesNotExist()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            PNUser userPuidInvalid = MsgTestUtils.Fc.CreateUser();
            userPuidInvalid.UserId += 0x50000000;

            try
            {
                userPuidInvalid.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0);
            }
            catch (HResultException hrEx)
            {
                // The sproc for setting message flags simply returns a boolean as to
                // whether the message was found or not.  For a message to be found, both
                // the user PUID and message ID must match; if either is invalid, we'll
                // get the basic not found code, which is XONLINE_E_MESSAGE_INVALID_MESSAGE_ID
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("User PUID zero")]
        public void User_Zero()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            PNUser userPuidInvalid = MsgTestUtils.Fc.CreateUser();
            userPuidInvalid.UserId = 0;

            try
            {
                userPuidInvalid.SetMsgFlags(msgId, XonPresNoti.MSG_FLAG_READ, 0);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message ID zero")]
        public void MessageId_Zero()
        {

            try
            {
                _Receiver.SetMsgFlags(0, XonPresNoti.MSG_FLAG_READ, 0);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Message ID invalid")]
        public void MessageId_Invalid()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            try
            {
                _Receiver.SetMsgFlags(msgId + 5000, XonPresNoti.MSG_FLAG_READ, 0);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID, hrEx.HR);
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Clear Flags, Invalid")]
        public void Flags_Clear_Invalid()
        {

            uint[] unclearableFlags = new uint[] {
                XonPresNoti.MSG_FLAG_REQUIRED,
                XonPresNoti.MSG_FLAG_RECOMMENDED,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                XonPresNoti.MSG_FLAG_READ,
                XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                XonPresNoti.MSG_FLAG_TEAM_CONTEXT,
                XonPresNoti.MSG_FLAG_COMP_CONTEXT,
                XonPresNoti.MSG_FLAG_ALTERNATE_TITLE,
                XonPresNoti.MSG_FLAG_MARKETING,
                XonPresNoti.MSG_FLAG_MS_MARKETING,
                XonPresNoti.MSG_FLAG_HAS_PHOTO,
                XonPresNoti.MSG_FLAG_SENDER_IS_FRIEND,
                XonPresNoti.MSG_FLAG_RECV_DETAILS_NEEDED,
                XonPresNoti.MSG_FLAG_SEND_MSG_OWNED
            };

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            for (int i = 0; i < unclearableFlags.Length; ++i)
            {
                Global.RO.Info("Testing unclearable flag {0:X08}", unclearableFlags[i]);

                try
                {
                    _Receiver.SetMsgFlags(msgId, 0, unclearableFlags[i]);
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set Flags, Invalid")]
        public void Flags_Set_Invalid()
        {

            uint[] unsettableFlags = new uint[] {
                XonPresNoti.MSG_FLAG_REQUIRED,
                XonPresNoti.MSG_FLAG_RECOMMENDED,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                XonPresNoti.MSG_FLAG_NON_EXPORTABLE,
                XonPresNoti.MSG_FLAG_TEAM_CONTEXT,
                XonPresNoti.MSG_FLAG_COMP_CONTEXT,
                XonPresNoti.MSG_FLAG_ALTERNATE_TITLE,
                XonPresNoti.MSG_FLAG_MARKETING,
                XonPresNoti.MSG_FLAG_MS_MARKETING,
                XonPresNoti.MSG_FLAG_HAS_PHOTO,
                XonPresNoti.MSG_FLAG_SENDER_IS_FRIEND,
                XonPresNoti.MSG_FLAG_RECV_DETAILS_NEEDED,
                XonPresNoti.MSG_FLAG_SEND_MSG_OWNED
            };

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            for (int i = 0; i < unsettableFlags.Length; ++i)
            {
                Global.RO.Info("Testing unclearable flag {0:X08}", unsettableFlags[i]);

                try
                {
                    _Receiver.SetMsgFlags(msgId, unsettableFlags[i], 0);
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }
        }

        ////////////////////////////////////////////////////////////////////////////////////
        [TestCase, Description("Set and clear the same flag")]
        public void Flags_Set_And_Clear_Same()
        {

            UserMessage msg = CreateTitleCustomMessage();
            uint msgId = msg.Send(_Receiver);

            try
            {
                _Receiver.SetMsgFlags(msgId, XonPresNoti.MSG_FLAGS_TITLE_RESERVED, XonPresNoti.MSG_FLAGS_TITLE_RESERVED);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("SetMsgFlags HRESULT", HResult.E_INVALIDARG, hrEx.HR);

                UserMsgFolder msgFolder = new UserMsgFolder(_Receiver);
                msgFolder.Load2();
                msg = msgFolder[msgId];

                ValueCheck.Test("Message Flags", c_TitleCustomFlags, msg.Flags);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\MessagingStress.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.Notification;

namespace MessagingTest
{
    /// <summary>
    /// Deletes a message from the user's inbox.
    ///
    /// Load2 is called at the end.
    /// </summary>
    [StressTest, StressInstantiate]
    public class DeleteMsg : TestNode
    {
        public override void Run()
        {
            StressUser user = null;
            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.NoInvite);

                if (user == null)
                    user = StressUserList.GetUser(StressUserInboxStatus.HasInvite);

                if (user != null)
                {
                    if (user.MsgFolder.Count > 0)
                    {
                        int attempts = 0;
                        UserMessage msg = null;

                        // Try to avoid getting a game invite if we can
                        do
                        {
                            int msgIndex = RandomEx.GlobalRandGen.Next(user.MsgFolder.Count);
                            msg = user.MsgFolder.Inbox[msgIndex];
                        } while (msg.Type == XonPresNoti.MSG_TYPE_GAME_INVITE && attempts++ < 5);

                        int randNum = RandomEx.GlobalRandGen.Next(100);

                        bool block = randNum < MessagingTestConfig.DeleteBlockChance;

                        msg.Delete(user, block);

                        user.MsgFolder.LoadEx();
                    }
                    else
                    {
                        throw new DidNotExecuteException("User did not have any messages");
                    }
                }
                else
                {
                    throw new DidNotExecuteException("No users available");
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Rejects or Accepts a game invite.
    ///
    /// Load2 is called at the end.
    /// </summary>
    [StressTest, StressInstantiate]
    public class DeleteMsgTransient : TestNode
    {
        public override void Run()
        {
            StressUser user = null;
            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.HasInvite);

                if (user != null)
                {
                    if (user.MsgFolder.Count > 0)
                    {
                        // Find the first game invite
                        UserMessage gameInvite = null;
                        foreach (UserMessage msg in user.MsgFolder.Inbox)
                        {
                            if (msg.Type == XonPresNoti.MSG_TYPE_GAME_INVITE)
                            {
                                gameInvite = msg;
                                break;
                            }
                        }

                        if (gameInvite == null)
                            throw new NullReferenceException("Could not find game invite in MsgFolder for user " + user.UserId.ToString());

                        PNUser sender = PNUser.Find(gameInvite.SenderID);
                        if (sender == null)
                            throw new NullReferenceException("PNUser.Find() failed for user ID " + gameInvite.SenderID.ToString());

                        int randNum = RandomEx.GlobalRandGen.Next(100);

                        // TEMP HAX - set manually since this would only be updated if we waited for qvals, which we aren't because we are speedy like that
                        sender.MatchSessionId = sender.UserId;

                        if (randNum < MessagingTestConfig.InviteBlockChance)
                        {
                            // Delete and block
                            //user.RejectInvite(sender, true);
                            ushort reply = XonPresNoti.PINVITE_REPLY_NEVER;
                            PMsgInviteAnswer answerlMsg = new PMsgInviteAnswer(user, sender, reply);
                            answerlMsg.TransactFD();
                        }
                        else if (randNum < MessagingTestConfig.InviteBlockChance + MessagingTestConfig.InviteDeclineChance)
                        {
                            // Delete normally
                            //user.RejectInvite(sender);
                            ushort reply = XonPresNoti.PINVITE_REPLY_NO;
                            PMsgInviteAnswer answerlMsg = new PMsgInviteAnswer(user, sender, reply);
                            answerlMsg.TransactFD();
                        }
                        else
                        {
                            // Accept
                            //user.AcceptInvite(sender);
                            PMsgInviteAnswer answerMsg = new PMsgInviteAnswer(user, sender, true);
                            answerMsg.TransactFD();
                        }

                        user.MsgFolder.LoadEx();
                    }
                    else
                    {
                        throw new DidNotExecuteException("User did not have any messages");
                    }
                }
                else
                {
                    throw new DidNotExecuteException("No users available");
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Calls the EnumMessages API
    /// </summary>
    [StressTest, StressInstantiate]
    public class EnumMessages : TestNode
    {
        public override void Run()
        {
            StressUser user = null;
            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.DontCare);

                if (user != null)
                {
                    user.MsgFolder.LoadEx();
                }
                else
                {
                    throw new DidNotExecuteException("No users available");
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Calls the GetDetails api
    /// </summary>
    [StressTest, StressInstantiate]
    public class GetMsgDetails : TestNode
    {
        public override void Run()
        {
            StressUser user = null;
            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.DontCare);

                if (user != null)
                {
                    if (user.MsgFolder.Count > 0)
                    {
                        int msgIndex = RandomEx.GlobalRandGen.Next(user.MsgFolder.Count);
                        UserMessage msg = user.MsgFolder.Inbox[msgIndex];

                        uint hr = msg.GetDetails(user, msg.ID, XonPresNoti.MSG_FLAG_READ, 0);
                        ValueCheck.TestHR("GetDetails", HResult.S_OK, hr);
                    }
                    else
                    {
                        throw new DidNotExecuteException("User did not have any messages");
                    }
                }
                else
                {
                    throw new DidNotExecuteException("No users available");
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Calls the GetSummary2 api
    /// </summary>
    [StressTest, StressInstantiate]
    public class GetMsgSummary2 : TestNode
    {
        public override void Run()
        {
            StressUser user = null;
            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.DontCare);

                if (user != null)
                {
                    if (user.MsgFolder.Count > 0)
                    {
                        int msgIndex = RandomEx.GlobalRandGen.Next(user.MsgFolder.Count);
                        UserMessage msg = user.MsgFolder.Inbox[msgIndex];

                        // TODO - This method is oddly designed.  It should either be a static
                        //        method somewhere or take zero parameters.
                        //
                        uint hr = msg.GetSummary2(user, msg.ID);
                        ValueCheck.TestHR("GetSummary2", HResult.S_OK, hr);
                    }
                    else
                    {
                        throw new DidNotExecuteException("User did not have any messages");
                    }
                }
                else
                {
                    throw new DidNotExecuteException("No users available");
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Sends a random message type to another user.
    ///
    /// Calls Load2 on all recipients.
    /// </summary>
    [StressTest, StressInstantiate]
    public class SendMsg : TestNode
    {
        public override void Run()
        {
            StressUser sender = null;
            UserMessage msg = null;

            sender = StressUserList.GetUser(StressUserInboxStatus.DontCare);

            // Pick a weighted number of recipients
            int numRecipients = 1;//Math.Min(
            //    MessagingTestConfig.GetRandomRecipientCount(),
            //    StressUserList.UserList.Count - 1
            //    );

            StressUser[] recipients = StressUserList.GetUser((ushort)numRecipients, StressUserInboxStatus.DontCare);

            if (sender != null && recipients != null)
            {
                try
                {
                    msg = MsgTestUtils.SendRandomMessage(sender, recipients, false, false);
                }
                catch (HResultException hrEx)
                {
                    // The Delete stress tests can block a sender, which is acceptable
                    ValueCheck.TestHR(
                        "SendRandomMessage",
                        new uint[] {
                            HResult.XONLINE_E_MESSAGE_SENDER_BLOCKED,
                            HResult.XONLINE_E_MESSAGE_INSUFFICIENT_PRIVILEGES
                        },
                        hrEx.HR
                        );
                }
                finally
                {
                    if (sender != null)
                    {
                        sender.Release();
                        StressUserList.AddUserToQueue(sender);
                    }
                    foreach (StressUser user in recipients)
                    {
                        if (user != null)
                        {
                            try
                            {
                                user.MsgFolder.LoadEx();
                            }
                            catch
                            { }

                            user.Release();
                            StressUserList.AddUserToQueue(user);

                        }
                    }
                }
            }
            else
            {
                throw new DidNotExecuteException("No users available");
            }
        }
    }

    /// <summary>
    /// Calls the SetFlags api
    /// </summary>
    [StressTest, StressInstantiate]
    public class SetMsgFlags : TestNode
    {
        public override void Run()
        {
            StressUser user = null;
            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.DontCare);

                if (user != null)
                {
                    if (user.MsgFolder.Count > 0)
                    {
                        int msgIndex = RandomEx.GlobalRandGen.Next(user.MsgFolder.Count);
                        UserMessage msg = user.MsgFolder.Inbox[msgIndex];

                        user.SetMsgFlags(msg.ID, XonPresNoti.MSG_FLAG_READ, 0);
                    }
                    else
                    {
                        throw new DidNotExecuteException("User did not have any messages");
                    }
                }
                else
                {
                    throw new DidNotExecuteException("No users available");
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Calls Dequeue on the presence fd
    /// </summary>
    [StressTest, StressInstantiate]
    public class Dequeue : TestNode
    {
        public override void Run()
        {
            StressUser user = null;

            try
            {
                user = StressUserList.GetUser(StressUserInboxStatus.DontCare);

                if (user != null && user.LoggedOn)
                {
                    QValPacket qval = null;
                    user.Xbox.ReadUserQValPacket(user.UserId, out qval);

                    if (qval != null)
                    {
                        uint QFlags = qval.QFlags;
                        ushort qt = 0;

                        if ((QFlags & XonPresNoti.QFLAG_MASK_INVITE) != 0)
                        {
                            qt = XonPresNoti.PQUEUE_INVITE;
                        }
                        if ((QFlags & XonPresNoti.QFLAG_MASK_INVITE_ANSWER) != 0)
                        {
                            qt = XonPresNoti.PQUEUE_INVITE_ANSWER;
                        }

                        uint left = 100;
                        while (0 != left)
                        {
                            QMsgDequeue dequeueMsg = new QMsgDequeue(user, qt, 0, 100, UInt16.MaxValue);
                            PNMsg replyMsg;
                            dequeueMsg.TransactFD(out replyMsg);

                            QDequeueReplyMsgData reply = (QDequeueReplyMsgData)replyMsg.Data;

                            ValueCheck.IsFalse(HResult.Failed(reply.Hdr.HR), "QMsgDequeue failed");

                            left = reply.Hdr.QLeft;
                        }
                    }
                    else
                    {
                        throw new DidNotExecuteException("No QVALs available");
                    }
                }
                else
                {
                    if (user == null)
                    {
                        throw new DidNotExecuteException("No users available");
                    }
                    else
                    {
                        throw new DidNotExecuteException("User was not logged on");
                    }
                }
            }
            finally
            {
                if (user != null)
                {
                    user.Release();
                    StressUserList.AddUserToQueue(user);
                }
            }
        }
    }

    /// <summary>
    /// Random helpful stress queue information
    /// </summary>
    [StressTest, StressInstantiate]
    public class StressInfoDump : TestNode
    {
        public override void Run()
        {
            const string format = "{0,25}: {1}";
            Global.RO.Success(format, "Users with invites", StressUserList.UserQueueCountWithInvites);
            Global.RO.Success(format, "Users without invites", StressUserList.UserQueueCountWithoutInvites);
            Global.RO.Success(format, "InboxCount for User0", StressUserList.UserList.Count > 0 ? StressUserList.UserList[0].MsgFolder.InboxCount : 0);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncSendMsg.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.UserAccount;
using xonline.common.protocol;
using xonline.common.user;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for SendMessage
    /// </summary>
    /// <remarks>
    /// <Description>
    ///     <p>
    ///     SendMessage provides a flexible server API for sending message to one or many recipients. The message
    ///     is delivered by fanning out delivery from the sender's server to all recipient's servers. When the message
    ///     arrives on the recipient server it is stored immediately to SQL. If the user is online a QVal is is sent
    ///     to the user via the periodic heartbeat.
    ///     </p>
    ///
    ///
    ///        <div class="test_data_label">
    ///            Supported External Message Flags:
    ///        </div>
    ///        <table class="test_data">
    ///         <tr><td>XONLINE_MSG_FLAG_REQUIRED               </td><td>0x00000001  </td><td>The user is required to read this message</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_RECOMMENDED            </td><td>0x00000002  </td><td>The user has a system recommended message</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_HAS_VOICE              </td><td>0x00000004  </td><td>This message contains a voice attachment</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_HAS_TEXT               </td><td>0x00000008  </td><td>This message contains a text body</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_READ                   </td><td>0x00000010  </td><td>This message has been read</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_NON_EXPORTABLE         </td><td>0x00000020  </td><td>This message should only be displayed on Xbox consoles, not the web</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_TEAM_CONTEXT           </td><td>0x00000040  </td><td>This message's sender context refers to a team ID</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_COMP_CONTEXT           </td><td>0x00000080  </td><td>This message's sender context refers to a competition event or entity ID</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_ALTERNATE_TITLE        </td><td>0x00000100  </td><td>This message is from an alternate Title of the currently logged on title (only available on Xbox consoles)</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_MARKETING              </td><td>0x00000200  </td><td>Used on title-sent messages to indicate the message is marketing-related and opt-in settings should be checked</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAGS_TITLE_RESERVED        </td><td>0xFF000000  </td><td>Flags reserved for title custom messages</td></tr>
    ///        </table>
    ///
    ///        <div class="test_data_label">
    ///            Supported Internal Message Flags:
    ///        </div>
    ///        <table class="test_data">
    ///            <tr><td>XONLINE_MSG_FLAG_SENDER_IS_FRIEND       </td><td>0x00800000  </td><td>Used by Notification to detect invites that should go to V1 clients, also used by clients to allow cross-title invites</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_RECV_DETAILS_NEEDED    </td><td>0x00200000  </td><td>Used by the client on received summaries to indicate that the title has requested downloading details</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAG_SEND_MSG_OWNED         </td><td>0x00200000  </td><td>Used by the client on message sends to indicate that the message handle is owned by the Send operation</td></tr>
    ///            <tr><td>XONLINE_MSG_FLAGS_RESERVED              </td><td>0x005FFC00  </td><td>Flags reserved for future use</td></tr>
    ///        </table>
    ///
    ///        <div class="test_data_label">
    ///        XONLINE_MSG_FLAGS_VALID_SEND_MASK (Valid flags for Send) combines:
    ///        </div>
    ///        <ul>
    ///            <li>XONLINE_MSG_FLAGS_TITLE_RESERVED</li>
    ///            <li>XONLINE_MSG_FLAG_NON_EXPORTABL</li>
    ///            <li>XONLINE_MSG_FLAG_REQUIRED</li>
    ///            <li>XONLINE_MSG_FLAG_RECOMMENDED</li>
    ///            <li>XONLINE_MSG_FLAG_HAS_VOICE</li>
    ///            <li>XONLINE_MSG_FLAG_HAS_TEXT</li>
    ///            <li>XONLINE_MSG_FLAG_TEAM_CONTEXT</li>
    ///            <li>XONLINE_MSG_FLAG_COMP_CONTEXT</li>
    ///            <li>XONLINE_MSG_FLAG_MARKETING</li>
    ///        </ul>
    ///
    ///        <div class="test_data_label">
    ///            XONLINE_MSG_FLAGS_TITLE_SETABLE These flags are valid for a message that
    ///            has already been sent (valid flags for SetFlags)
    ///        </div>
    ///        <ul>
    ///            <li>XONLINE_MSG_FLAG_READ</li>
    ///            <li>XONLINE_MSG_FLAGS_TITLE_RESERVED</li>
    ///        </ul>
    ///
    ///        <div class="test_data_label">
    ///            XONLINE_MSG_FLAGS_TITLE_CLEARABLE: These flags are clearable for a message
    ///            that has already been sent (valid for Setflags)
    ///        </div>
    ///        <ul>
    ///            <li>XONLINE_MSG_FLAGS_TITLE_RESERVED</li>
    ///        </ul>
    ///
    ///        <div class="test_data_label">
    ///            Test Methods
    ///        </div>
    ///
    ///        <p>
    ///     Positive cases check for success HRESULT and valid message IDs in the recipient results
    ///       as well as proper QVals received by logged on users.
    ///       </p>
    ///       <p>
    ///       Message contents are verified with QMSG_MESSAGE_DETAILS, QMSG_MESSAGE_SUMMARY, and QMSG_ENUM_MESSAGES by all recipients.
    ///       </p>
    ///       <p>
    ///       Negative Cases check for failure HRESULT that makes sense and is consistent with previous releases of the service.
    ///       </p>
    /// </Description>
    /// </remarks>
    //------------------------------------------------------------------------------
    // Generic types of messaging operation tests
    //------------------------------------------------------------------------------
    [TestGroup]
    public class FuncSendMsg_GenericCases : MessagingTestGroup
    {
        private void General_Send_MessageType(byte msgType)
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(u[0], u[1], msgType);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Send a custom title message")]
        public void P_Send_MessageType_TitleCustom()
        {
            General_Send_MessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Send a friend request message")]
        public void P_Send_MessageType_FriendRequest()
        {
            General_Send_MessageType(XonPresNoti.MSG_TYPE_FRIEND_REQUEST);
        }

        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Send a game invitation")]
        public void P_Send_MessageType_GameInvite()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.SendGameInvite(u[0], u[1]);
        }

        [TestCase, Description("Send a recommended system message")]
        public void P_Send_MessageType_LiveMessageRecommended()
        {
            General_Send_MessageType(XonPresNoti.MSG_TYPE_LIVE_MESSAGE);
        }

        [TestCase, Description("Send a required system message")]
        public void P_Send_MessageType_LiveMessageRequired()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                XonPresNoti.MSG_FLAG_REQUIRED | XonPresNoti.MSG_FLAG_HAS_TEXT,
                0,
                null
                );
        }

        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Send a personal message")]
        public void P_Send_MessageType_Personal()
        {
            General_Send_MessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Send a quick chat invitation message")]
        public void P_Send_MessageType_QuickChat()
        {
            General_Send_MessageType(XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Send a video chat invitation message")]
        public void P_Send_MessageType_VideoChat()
        {
            General_Send_MessageType(XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(1), Description("Send a personal message to many users")]
        public void P_Send_Recipients_Many()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(3, true);
            MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1], u[2] }, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, null, 0, null);
        }

        [TestCase, Description("Send a personal message to the maximum number of recipients, all of whom are online")]
        public void P_Send_Recipients_Max_Online()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(XonPresNoti.MAX_MESSAGE_RECIPIENTS, true);

            MsgTestUtils.CreateAndSendMessage(sender, u, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, null, 0, null);
        }

        [TestCase, Description("Send a personal message to the maximum number of recipients, all of whom are offline")]
        public void P_Send_Recipients_Max_Offline()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(XonPresNoti.MAX_MESSAGE_RECIPIENTS, false);

            UserMessage msg = MsgTestUtils.CreateMessage(sender, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            msg.Send(sender, u);

            Thread.Sleep(10000);

            foreach(PNUser recipient in u)
                ValidateOfflineMessageReceived(recipient, sender, msg);
        }

        [TestCase, Description("Send a personal message to the maximum number of recipients, a mix of offline and online")]
        public void P_Send_Recipients_MixOnAndOffline()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(16, false);

            for(uint i = 0; i < u.Length; i += 2)
                MsgTestUtils.Fc.LogonUser(u[i]);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, u, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, null, 0, null);

            for (uint i = 1; i < u.Length; i += 2)
                ValidateOfflineMessageReceived(u[i], sender, msg);
        }

        [TestCase, Description("Send a personal message to many users, one of which doesn't exist")]
        public void P_Send_Recipients_OneDoesNotExist()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(3, true);

            u[1].UserId += 0x100000;

            UserMessage msg = MsgTestUtils.CreateMessage(sender, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            msg.Send(sender, u);

            PNConditionalWaitState wait = new PNConditionalWaitState();
            wait.AddRequiredMessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, sender, u[0]);
            wait.AddRequiredMessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, sender, u[2]);
            wait.WaitOnQValConditions();
        }

        [TestCase, Description("Send a personal message to many users, one of which is PUID 0"), Ignore("User ID zero causes assert in the INH")]
        public void P_Send_Recipients_OneInvalid()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(3, true);

            u[1].UserId = 0;

            UserMessage msg = MsgTestUtils.CreateMessage(sender, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            msg.Send(sender, u);

            PNConditionalWaitState wait = new PNConditionalWaitState();
            wait.AddRequiredMessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, sender, u[0]);
            wait.AddRequiredMessageType(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, sender, u[2]);
            wait.WaitOnQValConditions();
        }

        [TestCase, Description("Send a message and ensure the recipient gets an enumeration logon HRESULT")]
        public void P_Send_Recipient_AliveHR_OffThenOnline()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, false);
            MsgTestUtils.Fc.LogonUser(u[0]);
            MsgTestUtils.CreateAndSendMessage(u[0], u[1], XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Corner case, the recipient is not online, we wait a max of
            // 60 seconds
            DateTime timeout = DateTime.Now.AddSeconds(60);
            uint hr = HResult.E_FAIL;
            while(DateTime.Now < timeout)
            {
                MsgTestUtils.Fc.LogoffUser(u[1]);
                hr = MsgTestUtils.Fc.LogonUser(u[1]);
                if(HResult.XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED == hr)
                {
                    break;
                }
                Thread.Sleep(250);
            }
            ValueCheck.TestHR("Logon HR existing message", HResult.XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED, hr);
        }

        [TestCase(58228), Description("Test Bug: This test expects a wrong value in the new presence code, there is no longer an alive cache hence " +
            "the error message is expected, tests need to be fixed for either reading the welcome message or expecting HAS_MESSAGE as an expected value")]
        public void P_Send_Recipient_AliveHR_OnThenOffline()
        {
            //PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            PNUser[] u = MsgTestUtils.CreateCleanUsers(2);
            MsgTestUtils.CreateAndSendMessage(u[0], u[1], XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            MsgTestUtils.Fc.LogoffUser(u[1]);
            uint hr = MsgTestUtils.Fc.LogonUser(u[1]);
            ValueCheck.TestHR("Logon HR existing message", HResult.XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED, hr);
        }

        [TestCase, Description("Send persistent messages to a full inbox")]
        public void P_Send_MaxPersistent()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser();
            PNUser user = MsgTestUtils.CreateCleanUser();
            UserMsgFolder inbox = new UserMsgFolder(user);

            // Fill the user's inbox with the maximum number of persistent messages
            MsgTestUtils.SendManyMessages(user, false, XonPresNoti.MAX_PERSISTENT_MESSAGES);
            inbox.LoadEx();
            ValueCheck.Test("Max persistent message Count", (ushort)XonPresNoti.MAX_PERSISTENT_MESSAGES, inbox.Count);

            // Send one more persistent message
            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, user, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            inbox.LoadEx();
            ValueCheck.Test("Max persistent message Count", (ushort)XonPresNoti.MAX_PERSISTENT_MESSAGES, inbox.Count);
            ValueCheck.IsTrue(inbox.ContainsMessage(msg.Recipients[0].msgId), "Extra message sent after hitting max persistent");

            // One transient message should not affect the messages
            msg = MsgTestUtils.SendGameInvite(sender, user);
            inbox.LoadEx();
            ValueCheck.Test("Inbox count max persist one transient", (ushort)(XonPresNoti.MAX_PERSISTENT_MESSAGES + 1), inbox.Count);
            ValueCheck.IsTrue(inbox.ContainsMessage(msg.ID), "Inbox contains new transient message");

            uint numPersistMsgs = 0;
            foreach (UserMessage inboxMsg in inbox.Inbox)
            {
                if (inboxMsg.Type != XonPresNoti.MSG_TYPE_GAME_INVITE)
                    numPersistMsgs++;
            }
            ValueCheck.Test("Number of persistent messages after one transient", numPersistMsgs, XonPresNoti.MAX_PERSISTENT_MESSAGES);

            // Max number of transient messages also should not affect the persistent messages
            MsgTestUtils.SendManyMessages(user, true, XonPresNoti.MAX_TRANSIENT_MESSAGES);
            inbox.LoadEx();
            ValueCheck.Test("Inbox count max persist max transient", XonPresNoti.MAX_NUM_MESSAGES, inbox.Count);

            numPersistMsgs = 0;
            foreach (UserMessage inboxMsg in inbox.Inbox)
            {
                if (inboxMsg.Type != XonPresNoti.MSG_TYPE_GAME_INVITE)
                    numPersistMsgs++;
            }
            ValueCheck.Test("Number of persistent messages after max transient", numPersistMsgs, XonPresNoti.MAX_PERSISTENT_MESSAGES);
        }

        private UserMessage FindMessageDeleteCandidate(UserMsgFolder msgFolder, uint titleId, PNUser sender)
        {
            UserMessage[] candidates = new UserMessage[4];
            uint numTitleMessages = 0, numSenderMessages = 0;

            // 0 - Title and Sender match
            // 1 - Title only
            // 2 - Sender only
            // 3 - Neither (oldest overall)

            foreach (UserMessage msg in msgFolder.Inbox)
            {
                // The counts determine which message we return at the end
                if (msg.SenderID == sender.UserId)
                    numSenderMessages++;

                if (msg.TitleID == titleId)
                    numTitleMessages++;

                if (msg.SenderID == sender.UserId)
                {
                    if (candidates[0] == null || candidates[0].SentTime > msg.SentTime)
                        candidates[0] = msg;

                    if (candidates[2] == null || candidates[2].SentTime > msg.SentTime)
                        candidates[2] = msg;
                }
                else if (msg.TitleID == titleId)
                {
                    if (candidates[0] == null || candidates[0].SentTime > msg.SentTime)
                        candidates[0] = msg;

                    if (candidates[1] == null || candidates[1].SentTime > msg.SentTime)
                        candidates[1] = msg;
                }

                // Always update the oldest message
                if (candidates[3] == null || candidates[3].SentTime > msg.SentTime)
                {
                    candidates[3] = msg;
                }
            }

            if (numTitleMessages > 10)
            {
                if (numSenderMessages > 10)
                    return candidates[0];
                else
                    return candidates[1];
            }
            else if (numSenderMessages > 10)
                return candidates[2];
            else
                return candidates[3];
        }

        private void PersistentPushRule(UserMsgFolder msgFolder, uint titleId, PNUser sender)
        {
            UserMessage msgToDelete = FindMessageDeleteCandidate(msgFolder, titleId, sender);
            ValueCheck.TestNotNull("Oldest Message", msgToDelete);

            UserMessage msgToSend = MsgTestUtils.CreateMessage(sender, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            msgToSend.TitleID = titleId;
            msgToSend.Send(msgFolder.Owner);
            MsgTestUtils.EnsureDelivery(msgToSend);

            msgFolder.LoadEx();

            ValueCheck.Test("Inbox Count", (ushort)XonPresNoti.MAX_PERSISTENT_MESSAGES, msgFolder.Count);
            ValueCheck.IsTrue(msgFolder.ContainsMessage(msgToSend.Recipients[0].msgId), "Inbox Contains New Message");
            MsgTestUtils.VerifyMessageIsGone(msgFolder.Owner, msgToDelete.ID);
        }

        // Test the logic that determines which message to evoke when the user has
        // the maximum number of persistent messages.
        [TestCase, Description("Validate eviction rules when a new message is received for a full inbox")]
        public void P_Send_MaxPersistent_PushRules()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(3, true);
            UserMsgFolder msgFolder = new UserMsgFolder(u[0]);

            u[1].Xbox.ChangeTitle(u[1].Xbox.TitleId + 1);
            u[2].Xbox.ChangeTitle(u[1].Xbox.TitleId + 2);

            // Fill the user's inbox with 5 messages from senderA/titleA and
            // the rest from senderB/titleB
            for (int i = 0; i < 5; ++i)
            {
                UserMessage msg = MsgTestUtils.CreateMessage(u[1], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                msg.Send(u[0]);
                MsgTestUtils.EnsureDelivery(msg);
                Thread.Sleep(2000);
            }

            for (int i = 0; i < XonPresNoti.MAX_PERSISTENT_MESSAGES - 5; ++i)
            {
                UserMessage msg = MsgTestUtils.CreateMessage(u[2], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                msg.Send(u[0]);
                MsgTestUtils.EnsureDelivery(msg);

                // Ensure the first few messages have distinct sent times
                if (i < 5)
                    Thread.Sleep(2000);
            }

            msgFolder.LoadEx();
            ValueCheck.Test("Initial count", (ushort)XonPresNoti.MAX_PERSISTENT_MESSAGES, msgFolder.Count);

            // RULE 1 - Title > 10, Sender > 10
            PersistentPushRule(msgFolder, u[2].Xbox.TitleId, u[2]);

            // RULE 2 - Title > 10, Sender <= 10
            PersistentPushRule(msgFolder, u[2].Xbox.TitleId, u[1]);

            // RULE 3 - Title <= 10, Sender > 10
            PersistentPushRule(msgFolder, u[1].Xbox.TitleId, u[2]);

            // RULE 4 - Title <= 10, Sender <= 10
            PersistentPushRule(msgFolder, u[1].Xbox.TitleId, u[1]);
        }

        [TestCase(58228), Description("Test Bug: This test expects a wrong value in the new presence code, the extra message received is the " +
            "welcome message, tests need to be fixed for either reading the welcome message or expecting one more as an expected value")]
        public void P_Send_MaxTransient()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser(); // MsgTestUtils.Fc.CreateUser(true);
            PNUser user = MsgTestUtils.CreateCleanUser(); // MsgTestUtils.Fc.CreateUser(true);
            UserMsgFolder inbox = new UserMsgFolder(user);

            // Send the maximum number of transient messages
            MsgTestUtils.SendManyMessages(user, true, XonPresNoti.MAX_TRANSIENT_MESSAGES);
            inbox.Load2();
            ValueCheck.Test("Inbox count with max invites", (ushort)XonPresNoti.MAX_TRANSIENT_MESSAGES, inbox.Count);

            // One more transient
            UserMessage msg = MsgTestUtils.SendGameInvite(sender, user);
            inbox.Load2();
            ValueCheck.Test("Transient count after one more", (ushort)XonPresNoti.MAX_TRANSIENT_MESSAGES, inbox.Count);
            ValueCheck.IsTrue(inbox.ContainsMessage(msg.ID), "New message still there");

            // Send a single persistent message
            msg = MsgTestUtils.CreateAndSendMessage(sender, user, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            inbox.Load2();
            ValueCheck.Test("Max transient plus one persistent", (ushort)(XonPresNoti.MAX_TRANSIENT_MESSAGES + 1), inbox.Count);

            // Send the maximum number of persistent messages
            MsgTestUtils.SendManyMessages(user, false, XonPresNoti.MAX_PERSISTENT_MESSAGES);
            inbox.Load2();
            ValueCheck.Test("Max invites and persistent messages", (ushort)XonPresNoti.MAX_NUM_MESSAGES, inbox.Count);

            uint numTransientMsgs = 0;
            foreach (UserMessage inboxMsg in inbox.Inbox)
            {
                if (inboxMsg.Type == XonPresNoti.MSG_TYPE_GAME_INVITE)
                    numTransientMsgs++;
            }
            ValueCheck.Test("Number of transient messages after max persistent", numTransientMsgs, XonPresNoti.MAX_TRANSIENT_MESSAGES);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Send a message while specifying a bogus gamertag in the parameters")]
        public void P_Send_Gamertag_Spoof()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateMessage(sender, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            msg.SenderName = "LOLLERSKATESONE";

            msg.Send(recipient);

            UserMsgFolder msgFolder = new UserMsgFolder(recipient);
            UserMessage msgReceive = msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, msg.SenderID, msg.Context, 60);

            ValueCheck.Test("Sender Gamertag", sender.Name, msgReceive.SenderName);
        }

        [TestCase, Description("Send a message via the datacenter port while specifying a bogus gamertag in the parameters")]
        public void P_Send_Gamertag_Spoof_DCPort()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser recipient = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateMessage(sender, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            msg.SenderName = "LOLLERSKATESONE";

            msg.Send(recipient, PNRequestMsg.FDPort.Messaging_DC);

            UserMsgFolder msgFolder = new UserMsgFolder(recipient);
            UserMessage msgReceive = msgFolder.WaitForMsg(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, msg.SenderID, msg.Context, 60);

            ValueCheck.Test("Sender Gamertag", sender.Name, msgReceive.SenderName);
        }

        [TestCase, Description("Send messages with an expiration greater than allowed, ensure it is reset to the allowed max")]
        public void P_Send_Expiration_Cap()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

            byte[] msgTypes = new byte[] {
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE,
                XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE,
                XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE,
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE
            };

            foreach (byte msgType in msgTypes)
            {
                UserMessage msg = MsgTestUtils.CreateMessage(u[0], msgType, null, ushort.MaxValue - 6, null);
                msg.Send(u[1]);
                MsgTestUtils.WaitForMessageDelivery(msg);

                UserMsgFolder msgFolder = new UserMsgFolder(u[1]);
                msgFolder.LoadEx();

                ValueCheck.TestNotNull("Message Exists", msgFolder[msg.Recipients[0].msgId]);

                // Expiration value should reset to the default
                ValueCheck.Test(
                    "Received Expiration",
                    XonPresNoti.GetDefaultExpirationForMsgType(msgType),
                    msgFolder[msg.Recipients[0].msgId].ExpireMinutes
                    );
            }
        }

        [TestCase, Description("Send a message to yourself")]
        public void P_Send_Recipient_One_Self()
        {
            PNUser user = MsgTestUtils.Fc.CreateUser(true);

            MsgTestUtils.CreateAndSendMessage(user, user, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
        }

        [TestCase, Description("Send a message to yourself and someone else")]
        public void P_Send_Recipient_Two_SelfAndOther()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

            MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[0], u[1] }, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
        }

        [TestCase, Description("Send a message to yourself and a few other people")]
        public void P_Send_Recipients_Many_OneSelf()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(5, true);
            u[2] = sender;

            MsgTestUtils.CreateAndSendMessage(sender, u, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
        }

        [TestCase, Description("Send a message to many people, some of which are duplicate in the recipient list")]
        public void P_Send_Recipients_Many_SomeDuplicates()
        {
            PNUser sender = MsgTestUtils.CreateCleanUser(); //MsgTestUtils.Fc.CreateUser(true);
            PNUser[] u = MsgTestUtils.CreateCleanUsers(5);

            u[1] = u[2];

            MsgTestUtils.CreateAndSendMessage(sender, u, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
        }
    }

    //------------------------------------------------------------------------------
    // Message property tests
    //------------------------------------------------------------------------------
    [TestGroup]
    public class FuncSendMsg_Properties : MessagingTestGroup
    {
        PNUser []_u;

        protected override void OnSetup()
        {
            _u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
        }

        protected override void OnTearDown()
        {
            foreach(PNUser u in _u)
            {
                MsgTestUtils.Fc.LogoffUser(u);
            }
            _u = null;
        }

        [TestCase, Description("Send a message with a null property")]
        public void P_Send_Property_Null()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_NULL << 8 | 1);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a byte property" )]
        public void P_Send_Property_Byte()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I1 << 8 | 1, (byte)0xab);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a word property")]
        public void P_Send_Property_Word()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I2 << 8 | 1, (ushort)0xabcd);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a DWORD property")]
        public void P_Send_Property_Dword()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I4 << 8 | 1, (uint)0xabcdef6);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a QWORD property")]
        public void P_Send_Property_Qword()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I8 << 8 | 1, (ulong)0xaaaabbbbccccdddd);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a string property")]
        public void P_Send_Property_String()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_STRING << 8 | 1, (string)"This is a test of the string property");
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a filetime property")]
        public void P_Send_Property_Filetime()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_FILETIME << 8 | 1, DateTime.Now);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a binary property")]
        public void P_Send_Property_Binary()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BINARY << 8 | 1, new byte[] { 0x00, 0x01, 0x02, 0x04, 0xa0, 0xb0, 0xc0, 0xd0 });
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with an attachment")]
        public void P_Send_Property_Attachment()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_ATTACHMENT << 8 | 1, 1024, 0, "http://attach/url/property_test");
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a boolean property")]
        public void P_Send_Property_Bool()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BOOL << 8 | 1, true);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with a string ID property")]
        public void P_Send_Property_StringID()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_STRING_ID << 8 | 1, (uint)123);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with one of each type of property")]
        public void P_Send_Properties_All()
        {
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_NULL << 8 | 1);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I1 << 8 | 2, (byte)0xab);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I2 << 8 | 3, (ushort)0xabcd);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I4 << 8 | 4, (uint)0xabcdef6);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_I8 << 8 | 5, (ulong)0xaaaabbbbccccdddd);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_STRING << 8 | 6, (string)"This is a test of the string property");
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_FILETIME << 8 | 7, DateTime.Now);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BINARY << 8 | 8, new byte[] { 0x00, 0x01, 0x02, 0x04, 0xa0, 0xb0, 0xc0, 0xd0 });
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_ATTACHMENT << 8 | 9, 1024, 0, "http://attach/url/property_test");
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BOOL << 8 | 10, true);
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_STRING_ID << 8 | 11, (uint)123);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }

        [TestCase, Description("Send a message with the maximum size of details")]
        public void P_Send_Details_MaxSize()
        {
            byte []data = RandomEx.GlobalRandGen.GenerateRandomBlob(
                (int)(XonPresNoti.MAX_MESSAGE_DETAILS - MsgProperty.size - 4 - 2) // 4 bytes for schema version, 2 bytes for data blob length
                );

            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BINARY << 8 | 1, data);
            MsgTestUtils.CreateAndSendMessage(_u[0], new PNUser[] { _u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
        }
    }

    //------------------------------------------------------------------------------
    // Title custom message tests
    //------------------------------------------------------------------------------
    [TestGroup]
    public class FuncSendMsg_TitleCustom : MessagingTestGroup
    {
        [TestCase, Description("Send a custom message with voice")]
        public void P_Send_CustomMessage_Voice()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgDetails details = MsgTestUtils.CreateDetails(MessageDetailTypes.XenonVoice);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                0,
                details
                );
        }

        [TestCase, Description("Send a title custom message to a user of an alternate title ID")]
        public void P_Send_CustomMessage_AltTitle()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, false);
            u[1].Xbox.ChangeTitle(u[1].Xbox.TitleId + 1);
            GlobalFakeSG.FakeSG.SetAltTitles(
                u[1].Xbox.XboxId,
                new uint[] { u[1].Xbox.TitleId - 1, u[1].Xbox.TitleId + 10, 0, 0 }
                );
            MsgTestUtils.Fc.LogonUser(u[0]);
            MsgTestUtils.Fc.LogonUser(u[1]);
            MsgTestUtils.CreateAndSendMessage(u[0], u[1], XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Send a custom message to a user playing a title of the same publisher")]
        public void P_Send_CustomMessage_SamePublisher()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, false);
            u[0].Xbox.ChangeTitle(0xaaaa0000 | (0x0000ffff & (u[1].Xbox.TitleId + 1)));
            MsgTestUtils.Fc.LogonUser(u[0]);
            u[1].Xbox.ChangeTitle(0xaaaa0000 | (0x0000ffff & (u[1].Xbox.TitleId + 4)));
            MsgTestUtils.Fc.LogonUser(u[1]);
            MsgTestUtils.CreateAndSendMessage(u[0], u[1], XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Send a custom message with text")]
        public void P_Send_CustomMessage_Text()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                0,
                MsgTestUtils.CreateDetails(MessageDetailTypes.Text)
                );
        }

        [TestCase, Description("Send a custom message marked as non-exportable")]
        public void P_Send_CustomMessage_NonExportable()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_FLAG_NON_EXPORTABLE | XonPresNoti.MSG_FLAG_HAS_TEXT,
                0,
                MsgTestUtils.CreateDetails(MessageDetailTypes.Text)
                );
        }

        [TestCase, Description("Send a custom message with all title reserved flags set")]
        public void P_Send_CustomMessage_AllTitleReservedBits()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                XonPresNoti.MSG_FLAGS_TITLE_RESERVED | XonPresNoti.MSG_FLAG_HAS_TEXT,
                0,
                MsgTestUtils.CreateDetails(MessageDetailTypes.Text)
                );
        }

        [TestCase, Description("Send a custom message with a custom expiration time")]
        public void P_Send_CustomMessage_CustomExpiration()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, null, 13, null);
        }
    }

    [TestGroup]
    public class FuncSendMsg_FriendRequest : MessagingTestGroup
    {
        [TestCase, Description("Send a friend request with just text")]
        public void P_Send_FriendRequest_Text()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                0,
                MsgTestUtils.CreateDetails(MessageDetailTypes.Text)
                );
        }

        [TestCase, Description("Send a friend request with Xbox 1 voice data")]
        public void P_Send_FriendRequest_XboxVoice()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                0,
                MsgTestUtils.CreateDetails(MessageDetailTypes.XboxVoice)
                );
        }

        [TestCase, Description("Send a friend request with Xbox 360 voice data")]
        public void P_Send_FriendRequest_XenonVoice()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_FLAG_HAS_VOICE,
                0,
                MsgTestUtils.CreateDetails(MessageDetailTypes.XenonVoice)
                );
        }
    }

    [TestGroup]
    public class FuncSendMsg_GameInvite : MessagingTestGroup
    {
        [TestCase, Description("Send a game invite with only context data")]
        public void P_Send_GameInvite_ContextOnly()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            SendGameInvite(u[0], u[1], 0xaaaabbbbccccdddd, 0x1111222233334444, 0, MsgDetails.CreateBlank());
        }

        [TestCase, Description("Send a game invite with text data")]
        public void P_Send_GameInvite_Text()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            SendGameInvite(u[0], u[1], 0xaaaabbbbccccdddd, 0x1111222233334444, XonPresNoti.MSG_FLAG_HAS_TEXT, MsgTestUtils.CreateDetails(MessageDetailTypes.Text));
        }

        [TestCase, Description("Send a game invite with Xbox 1 voice data")]
        public void P_Send_GameInvite_XenonVoice()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            SendGameInvite(u[0], u[1], 0xaaaabbbbccccdddd, 0x1111222233334444, XonPresNoti.MSG_FLAG_HAS_VOICE, MsgTestUtils.CreateDetails(MessageDetailTypes.XenonVoice));
        }
    }

    //------------------------------------------------------------------------------
    // Tool generated live messaging (marketing or otherwise)
    //------------------------------------------------------------------------------
    [TestGroup]
    public class FuncSendMsg_LiveMessage : MessagingTestGroup
    {
        [TestCase, Description("Send a required system message with text data")]
        public void P_Send_Live_Required()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_REQUIRED,
                0,
                null
                );
        }

        [TestCase, Description("Send a system message marked as both required and recommended")]
        public void P_Send_Live_RecomendedAndRequired()
        {
            PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
            MsgTestUtils.CreateAndSendMessage(
                u[0],
                new PNUser[] { u[1] },
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                XonPresNoti.MSG_FLAG_REQUIRED | XonPresNoti.MSG_FLAG_RECOMMENDED | XonPresNoti.MSG_FLAG_HAS_TEXT,
                0,
                null
                );
        }
    }

    [TestGroup]
    public class FuncSendMsg_PartyInvite : MessagingTestGroup
    {
        [TestCase, Description("Send a party invite to a user of a PC build that can accept party invites")]
        public void P_Send_PartyInvite_Mainline_PC()
        {
            PNUser sender = MsgTestUtils.Fc.CreateUser(true, FriendsCommon.DefaultXenonTitleId, ClientVersions.LatestXenonClientVersion, true);
            PNUser receiver = MsgTestUtils.Fc.CreateUser(true, FriendsCommon.DefaultXenonTitleId, ClientVersions.LatestPCClientVersion, CSGInfo.ClientType.PC);
            MsgTestUtils.CreateAndSendMessage(sender, receiver, XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE);
        }

        [TestCase(58228), Description("Test Bug: This test expects a wrong value in the new presence code, there is no longer an alive cache hence " +
            "the error message is expected, tests need to be fixed for either reading the welcome message or expecting HAS_MESSAGE as an expected value")]
        public void P_Send_PartyInvite_TargetOnlineTransitions()
        {
            //PNUser sender = MsgTestUtils.Fc.CreateUser(true, FriendsCommon.DefaultXenonTitleId, ClientVersions.LatestXenonClientVersion, true);
            PNUser sender = MsgTestUtils.CreateCleanUser();
            //SystemMsgFolder.DeleteAll(sender.Xbox.TitleId, SystemMessage.RevokeAlso.Yes);
            PNUser receiver = MsgTestUtils.CreateCleanUser(); //MsgTestUtils.Fc.CreateUser(true, FriendsCommon.DefaultXenonTitleId, ClientVersions.LatestXenonClientVersion, true);
            //SystemMsgFolder.DeleteAll(receiver.Xbox.TitleId, SystemMessage.RevokeAlso.Yes);
            MsgTestUtils.Fc.LogoffUser(receiver);
            UserMessage msg = MsgTestUtils.CreateAndSendMessage(sender, receiver, XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE);
            ValidateOfflineMessageReceived(receiver, sender, msg);
        }
    }

        [TestGroup]
        public class FuncSendMsg_NegativeCases : MessagingTestGroup
        {
            [TestCase, Description("Send a non-custom message flagged as non-exportable")]
            public void N_Send_Flagged_NonExportable_NotTitleCustom()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                byte[] msgTypes = new byte[] {
                XonPresNoti.MSG_TYPE_FRIEND_REQUEST,
                XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE,
                XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE,
                XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE,
                XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE
            };

                foreach (byte msgType in msgTypes)
                {
                    try
                    {
                        MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, msgType, XonPresNoti.MSG_FLAG_NON_EXPORTABLE, 0, MsgDetails.CreateBlank());
                        throw new UnexpectedTestResultException("Send should not have succeeded");
                    }
                    catch (HResultException hrEx)
                    {
                        ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                    }
                }
            }

            [TestCase, Description("Send to a user that does not exist")]
            public void N_Send_User_DoesNotExist()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].UserId += 0x10000;

                UserMessage msg = MsgTestUtils.CreateMessage(u[0], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_NO_SUCH_USER, hrEx.HR);
                }
            }

            [TestCase, Ignore("Causes assert in Presence INH"), Description("Send to PUID 0")]
            public void N_Send_User_Zero()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].UserId = 0;

                UserMessage msg = MsgTestUtils.CreateMessage(u[0], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send to a user with an invalid PUID")]
            public void N_Send_User_Invalid()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].UserId = ulong.MaxValue;

                UserMessage msg = MsgTestUtils.CreateMessage(u[0], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_NO_SUCH_USER, hrEx.HR);
                }
            }

            [TestCase, Description("Send to a user with an nonexistant user")]
            public void N_Send_User_NonexistantUser()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].UserId = ulong.MaxValue-1; // I don't want an invalid user, I want a nonexistant user

                UserMessage msg = MsgTestUtils.CreateMessage(u[0], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_NO_SUCH_USER, hrEx.HR);
                }
            }

            [TestCase, Description("Send a non-system message with both recommended and required flags")]
            public void N_Send_Flagged_RecomendedAndRequired_NonLive()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].Xbox = null;

                UserMessage msg = MsgTestUtils.CreateMessage(
                    u[0],
                    XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                    XonPresNoti.MSG_FLAG_REQUIRED | XonPresNoti.MSG_FLAG_RECOMMENDED,
                    0,
                    MsgDetails.CreateBlank()
                    );

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send a non-system messaged flagged as required")]
            public void N_Send_Flagged_Required_NonLive()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].Xbox = null;

                UserMessage msg = MsgTestUtils.CreateMessage(
                    u[0],
                    XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                    XonPresNoti.MSG_FLAG_REQUIRED,
                    0,
                    MsgDetails.CreateBlank()
                    );

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send a non-system message flagged as recommended")]
            public void N_Send_Flagged_Recomended_NonLive()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                u[1].Xbox = null;

                UserMessage msg = MsgTestUtils.CreateMessage(
                    u[0],
                    XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                    XonPresNoti.MSG_FLAG_RECOMMENDED,
                    0,
                    MsgDetails.CreateBlank()
                    );

                try
                {
                    msg.Send(u[1]);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase(47471), Ignore, Description("Send a message with the voice flag but without voice data")]
            public void N_Send_Flagged_Voice_DataMissing()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_CODEC, XonPresNoti.PROP_VOICE_DATA_CODEC_WMAVOICE_V90);
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_DURATION, (uint)10);

                try
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, XonPresNoti.MSG_FLAG_HAS_VOICE, 0, details);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (InvalidMsgPropertyException)
                {
                    // Expected
                }
            }

            [TestCase(47471), Ignore, Description("Send a message with the voice flag but missing the voice codec data")]
            public void N_Send_Flagged_Voice_CodecMissing()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA, 1024, 0, "http://fakeattach/xenon_voice_data");
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_DURATION, (uint)10);

                MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, XonPresNoti.MSG_FLAG_HAS_VOICE, 0, details);
            }

            [TestCase(47471), Ignore, Description("Send a message with the voice flag but missing the voice duration data")]
            public void N_Send_Flagged_Voice_DurationMissing()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA, 1024, 0, "http://fakeattach/xenon_voice_data");
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_CODEC, XonPresNoti.PROP_VOICE_DATA_CODEC_WMAVOICE_V90);

                MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, XonPresNoti.MSG_FLAG_HAS_VOICE, 0, details);
            }

            [TestCase(47471), Ignore, Description("Send a message with the text flag but missing the text data")]
            public void N_Send_Flagged_Text_TextMissing()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_TEXT_LANGUAGE, (uint)1);

                try
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, XonPresNoti.MSG_FLAG_HAS_TEXT, 0, details);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (InvalidMsgPropertyException)
                {
                    // Expected
                }
            }

            [TestCase(47471), Ignore, Description("Send a message with the text flag but missing the language data")]
            public void N_Send_Flagged_Text_LanguageMissing()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_TEXT, RandomEx.GlobalRandGen.GenerateRandomString((int)XonPresNoti.MAX_SUBJECT_SIZE));
                MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, XonPresNoti.MSG_FLAG_HAS_TEXT, 0, details);
            }

            [TestCase, Description("Send a message with the read flag")]
            public void N_Send_Flagged_Read()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                try
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, XonPresNoti.MSG_FLAG_READ, 0, MsgDetails.CreateBlank());
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send a message with a flag that isn't in MSG_FLAGS_VALID_SEND_MASK")]
            public void N_Send_Flagged_RandomInvalid()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                for (int i = 1; i < 32; ++i)
                {
                    uint? flag = (uint)(1 << i);

                    if ((flag & XonPresNoti.MSG_FLAGS_VALID_SEND_MASK) != 0)
                        continue;

                    Global.RO.Info("Sending with invalid flag {0:X08}", flag);

                    try
                    {
                        MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, flag, 0, MsgDetails.CreateBlank());
                        throw new UnexpectedTestResultException("Send should not have succeeded");
                    }
                    catch (HResultException hrEx)
                    {
                        ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                    }
                }
            }

            [TestCase, Description("Send a message with a title ID of 0")]
            public void N_Send_TitleId_Zero()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                UserMessage msg = MsgTestUtils.CreateMessage(u[0], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                msg.TitleID = 0;

                QMsgSendMsg msgSend = new QMsgSendMsg(msg, new ulong[] { u[1].UserId });
                PNMsg reply;
                msgSend.TransactFD(out reply);

                ValueCheck.Test("Reply Data Type", typeof(QSendMsgReplyMsgData).Name, reply.Data.GetType().Name);
                QSendMsgReplyMsgData replyData = (QSendMsgReplyMsgData)(reply.Data);
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, replyData.hr);
            }

            [TestCase, Description("Send a message with too many bytes of detail data")]
            public void N_Send_Details_TooLarge()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                byte[] data = RandomEx.GlobalRandGen.GenerateRandomBlob((int)(XonPresNoti.MAX_MESSAGE_DETAILS));

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BINARY << 8 | 1, data);

                try
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send a message with too many properties set")]
            public void N_Send_Properties_TooMany()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                MsgDetails details = MsgDetails.CreateBlank();

                for (int i = 0; i < 256; ++i)
                    details.AddProperty((ushort)(XonPresNoti.MSG_PROP_TYPE_NULL << 8 | i));

                try
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send a message with multiple properties sharing the same property index")]
            public void N_Send_Properties_DuplicateIndex()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);

                MsgDetails details = MsgDetails.CreateBlank();
                details.AddProperty(XonPresNoti.MSG_PROP_TYPE_NULL << 8 | 1);
                details.AddProperty(XonPresNoti.MSG_PROP_TYPE_BOOL << 8 | 1, false);

                try
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase, Description("Send a message with no recipients")]
            public void N_Send_Reipients_None()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                UserMessage msg = MsgTestUtils.CreateMessage(u[0], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                QMsgSendMsg msgSend = new QMsgSendMsg(msg, new ulong[] { });
                PNMsg reply;
                msgSend.TransactFD(out reply);

                ValueCheck.Test("Reply Data Type", typeof(QSendMsgReplyMsgData).Name, reply.Data.GetType().Name);
                QSendMsgReplyMsgData replyData = (QSendMsgReplyMsgData)(reply.Data);
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, replyData.hr);
            }

            [TestCase, Description("Send a message to more recipients than allowed")]
            public void N_Send_Recipients_TooMany()
            {
                PNUser sender = MsgTestUtils.Fc.CreateUser(true);
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(XonPresNoti.MAX_MESSAGE_RECIPIENTS + 1, false);

                try
                {
                    MsgTestUtils.CreateAndSendMessage(sender, u, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                    throw new UnexpectedTestResultException("Send should not have succeeded");
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }
            }

            [TestCase(47471), Ignore, Description("Send a game invitation with no properties")]
            public void N_Send_GameInvite_NoProperties()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                MsgDetails msgDetails = MsgDetails.CreateBlank();
                u[0].Invite2(new PNUser[] { u[1] }, RandomEx.GlobalRandGen.NextUlong(), RandomEx.GlobalRandGen.NextUlong(), 0, msgDetails);
            }

            [TestCase(47471), Ignore, Description("Send a system message with no properties")]
            public void N_Send_LiveMessage_NoProperties()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                MsgTestUtils.CreateAndSendMessage(u[0], new PNUser[] { u[1] }, XonPresNoti.MSG_TYPE_LIVE_MESSAGE, null, 0, MsgDetails.CreateBlank());
            }

            [TestCase, Description("Send a message with an unknown message type")]
            public void N_Send_UnknownMessageType()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                byte type = 0xFF; // This should not exist as a message type

                try
                {
                    // Create some stuff to put in the message
                    MsgDetails msgDetails = MsgDetails.CreateBlank();
                    ulong context = RandomEx.GlobalRandGen.NextUlong();
                    uint msgFlags = 0;

                    // Create the message
                    UserMessage msg = UserMessage.Create(u[0], type, context, msgFlags, 0, msgDetails);

                    // Send it out into the ether
                    msg.Send(u[0], u[1]);

                    // Did this work?  Oh no!
                    throw new UnexpectedTestResultException("An unknown message type successfully sent!  Doh!");
                }
                catch (HResultException ex)
                {
                    if (ex.HR != HResult.E_INVALIDARG)
                    {
                        ValueCheck.IsTrue(false, "UnknownMessageType didn't return the correct HR!  Actual: " + ex.HR);
                    }
                }
            }
        }

        //------------------------------------------------------------------------------
        // Generic types of messaging operation tests
        //------------------------------------------------------------------------------
        [TestGroup]
        public class FuncSendMsg_ThrottleCases : MessagingTestGroup
        {
            [TestCase, Description("Send to more than 2500 recipients in a 24 hour period")]
            public void P_Send_Throttled_Recipients()
            {
                PNUser sender = MsgTestUtils.Fc.CreateUser(true);
                PNUser[] dst = MsgTestUtils.Fc.CreateXenonUsers(100, false);

                MsgTestUtils.LogonRandomUsers(dst, 40);

                // 2500 recipients
                for (int i = 0; i < 25; ++i)
                    MsgTestUtils.CreateAndSendMessage(sender, dst, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    // this will put us over the limit
                    MsgTestUtils.CreateAndSendMessage(sender, dst, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                    throw new UnexpectedTestResultException("This send should have been throttled");
                }
                catch (HResultException e)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.XONLINE_E_MESSAGE_THROTTLED, e.HR);
                }
            }

            [TestCase, Description("Send to just under 2500 recipients and then try to send a batch that will bring the total over 2500")]
            public void P_Send_Throttled_Recipients_MiddleSend()
            {
                PNUser sender = MsgTestUtils.Fc.CreateUser(true);
                PNUser[] dst = MsgTestUtils.Fc.CreateXenonUsers(100, false);
                PNUser[] dst2 = MsgTestUtils.Fc.CreateXenonUsers(50, false);

                MsgTestUtils.LogonRandomUsers(dst, 40);
                MsgTestUtils.LogonRandomUsers(dst2, 20);

                // 2450 recipients (limit is 2500)
                for (int i = 0; i < 24; ++i)
                    MsgTestUtils.CreateAndSendMessage(sender, dst, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                MsgTestUtils.CreateAndSendMessage(sender, dst2, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    // this will put us over the limit
                    MsgTestUtils.CreateAndSendMessage(sender, dst, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                    throw new UnexpectedTestResultException("This send should have been throttled");
                }
                catch (HResultException e)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.XONLINE_E_MESSAGE_THROTTLED, e.HR);
                }

                // this should succeed because its below the limit of recips remaining
                MsgTestUtils.CreateAndSendMessage(sender, dst2, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);

                try
                {
                    // this will put us over the limit
                    MsgTestUtils.CreateAndSendMessage(sender, dst2, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                    throw new UnexpectedTestResultException("This send should have been throttled");
                }
                catch (HResultException e)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.XONLINE_E_MESSAGE_THROTTLED, e.HR);
                }

            }

            [TestCase, Description("Send more than the maximum allowed messages for a 24 hour period")]
            public void P_Send_Throttled_MessageSent()
            {
                PNUser[] u = MsgTestUtils.Fc.CreateXenonUsers(2, true);
                for (uint iMessage = 0; iMessage < MsgTestUtils.MessagingDailySends; iMessage++)
                {
                    MsgTestUtils.CreateAndSendMessage(u[0], u[1], XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                }
                try
                {
                    // try and send one more
                    MsgTestUtils.CreateAndSendMessage(u[0], u[1], XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
                    throw new UnexpectedTestResultException("This send should have been throttled");
                }
                catch (HResultException e)
                {
                    ValueCheck.TestHR("Send HRESULT", HResult.XONLINE_E_MESSAGE_THROTTLED, e.HR);
                }
            }
        }

        [TestGroup]
        public class FuncSendMsg_Privacy : MessagingTestGroup
        {
            [TestCase, Description("Send a message to a friend that only accepts messages from friends")]
            public void P_Send_FriendOnlyAcceptsFriends()
            {
                PNUser sender = MsgTestUtils.Fc.CreateUser(true);
                PNUser friend = MsgTestUtils.Fc.CreateUser(true);

                sender.AddBuddy(friend);
                friend.AcceptBuddy(sender);

                // Make friend only accept messages from friends
                SetPrivileges(
                    friend,
                    new uint[] { XOn.XPRIVILEGE_COMMUNICATIONS_FRIENDS_ONLY },
                    new uint[] { XOn.XPRIVILEGE_COMMUNICATIONS }
                    );

                MsgTestUtils.CreateAndSendMessage(sender, friend, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            }

            /// <summary>
            /// Actually sets the privileges for the user
            /// </summary>
            private static void SetPrivileges(PNUser user, uint[] grantPrivileges, uint[] restrictPrivileges)
            {
                // Create a grant request
                XRLXeUpdateParentalControls request = new XRLXeUpdateParentalControls();
                request.UserPuid = user.UserId;
                request.Source = "STF-PRES-FPC";

                ServerTestFramework.LiveService.UserAccount.UserPrivileges grants = new ServerTestFramework.LiveService.UserAccount.UserPrivileges();
                ServerTestFramework.LiveService.UserAccount.UserPrivileges restrictions = new ServerTestFramework.LiveService.UserAccount.UserPrivileges();

                // Populate the new requested privileges
                foreach (uint priv in grantPrivileges)
                {
                    grants[(int)priv] = true;
                }

                foreach (uint priv in restrictPrivileges)
                {
                    restrictions[(int)priv] = true;
                }

                request.UserGrantPrivileges = grants.ToArray();
                request.UserRestrictPrivileges = restrictions.ToArray();
                request.ExecuteSafe();
            }

            [TestCase, Description("Send a message to a nonfriend that only accepts messages from friends")]
            public void P_Send_NonFriendOnlyAcceptsFriends()
            {
                PNUser sender = MsgTestUtils.Fc.CreateUser(true);
                PNUser nonFriend = MsgTestUtils.Fc.CreateUser(true);

                // Make nonFriend only accept messages from friends
                SetPrivileges(
                    nonFriend,
                    new uint[] { XOn.XPRIVILEGE_COMMUNICATIONS_FRIENDS_ONLY },
                    new uint[] { XOn.XPRIVILEGE_COMMUNICATIONS }
                    );

                try
                {
                    MsgTestUtils.CreateAndSendMessage(sender, nonFriend, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
                    throw new UnexpectedTestResultException("Sending to a nonfriend succeeded and wasn't supposed to!");
                }
                catch (HResultException ex)
                {
                    ValueCheck.TestHR("SendResult", HResult.XONLINE_E_MESSAGE_INSUFFICIENT_PRIVILEGES, ex.HR);
                }
            }
        }

    }
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\MessagingTestConfig.cs ===
using System;
using System.Collections.Generic;
using System.Xml;
using ServerTestFramework;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;

namespace MessagingTest
{
    public struct ProbabilityEntry
    {
        public int Probability;     // Actual probability, e.g. 5 (5%)
        public int RangeLowerBound; // Beginning of the "hit zone" for a random number 0-99
        public int RangeUpperBound; // End of the "hit zone" for a random number 0-99
    }

    public class MessagingTestConfig
    {
        // Probabilities for each message type
        static Dictionary<byte, ProbabilityEntry> m_MessageTypes = new Dictionary<byte, ProbabilityEntry>();

        // Probabilities for message sub types
        static Dictionary<byte, Dictionary<string, ProbabilityEntry>> m_MessageSubTypes =
            new Dictionary<byte, Dictionary<string, ProbabilityEntry>>();

        // Probabilities for initial message counts
        static Dictionary<int, ProbabilityEntry> m_InitialCounts = new Dictionary<int, ProbabilityEntry>();

        // Probabilities for number of message recipients
        static Dictionary<int, ProbabilityEntry> m_RecipientCounts = new Dictionary<int, ProbabilityEntry>();

        // Map of message type strings to their bytecode equivalents
        static Dictionary<string, byte> m_TypeMap = new Dictionary<string, byte>();

        // General probability settings
        static Dictionary<string, int> m_GeneralProbabilities = new Dictionary<string, int>();

        public static int DeleteBlockChance
        {
            get
            {
                return m_GeneralProbabilities["DeleteBlockChance"];
            }
        }

        public static int InviteBlockChance
        {
            get
            {
                return m_GeneralProbabilities["InviteBlockChance"];
            }
        }

        public static int InviteDeclineChance
        {
            get
            {
                return m_GeneralProbabilities["InviteDeclineChance"];
            }
        }

        static MessagingTestConfig()
        {
            m_TypeMap.Add("Personal", XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
            m_TypeMap.Add("GameInvite", XonPresNoti.MSG_TYPE_GAME_INVITE);
            m_TypeMap.Add("PartyInvite", XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE);
            m_TypeMap.Add("FriendRequest", XonPresNoti.MSG_TYPE_FRIEND_REQUEST);
            m_TypeMap.Add("TitleCustom", XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            m_TypeMap.Add("QuickChat", XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE);
            m_TypeMap.Add("VideoChat", XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE);
            m_TypeMap.Add("LiveMessage", XonPresNoti.MSG_TYPE_LIVE_MESSAGE);
        }

        public static int GetMessageTypeProbability(byte msgType)
        {
            if (m_MessageTypes.ContainsKey(msgType))
                return m_MessageTypes[msgType].Probability;
            else
                return 0;
        }

        public static int GetInitialCountProbability(int msgCount)
        {
            if (m_InitialCounts.ContainsKey(msgCount))
                return m_InitialCounts[msgCount].Probability;
            else
                return 0;
        }

        public static byte GetRandomMessageType()
        {
            int randNum = RandomEx.GlobalRandGen.Next(100);

            foreach (KeyValuePair<byte, ProbabilityEntry> kvp in m_MessageTypes)
            {
                if (randNum >= kvp.Value.RangeLowerBound && randNum <= kvp.Value.RangeUpperBound)
                    return kvp.Key;
            }

            // Should never happen
            DisplayProbabilities<byte>(m_MessageTypes, "Message Types");
            throw new ApplicationException("Could not find suitable MessageType for randNum " + randNum.ToString());
        }

        public static int GetRandomInitialCount()
        {
            int randNum = RandomEx.GlobalRandGen.Next(100);

            foreach (KeyValuePair<int, ProbabilityEntry> kvp in m_InitialCounts)
            {
                if (randNum >= kvp.Value.RangeLowerBound && randNum <= kvp.Value.RangeUpperBound)
                    return kvp.Key;
            }

            // Should never happen
            DisplayProbabilities<int>(m_InitialCounts, "Initial Counts");
            throw new ApplicationException("Could not find suitable InitialCount for randNum " + randNum.ToString());
        }

        public static int GetRandomRecipientCount()
        {
            int randNum = RandomEx.GlobalRandGen.Next(100);

            foreach (KeyValuePair<int, ProbabilityEntry> kvp in m_RecipientCounts)
            {
                if (randNum >= kvp.Value.RangeLowerBound && randNum <= kvp.Value.RangeUpperBound)
                    return kvp.Key;
            }

            // Should never happen
            DisplayProbabilities<int>(m_RecipientCounts, "Recipient Counts");
            throw new ApplicationException("Could not find suitable RecipientCount for randNum " + randNum.ToString());
        }

        public static string GetRandomMessageSubType(byte msgType)
        {
            int randNum = RandomEx.GlobalRandGen.Next(100);

            foreach (KeyValuePair<string, ProbabilityEntry> kvp in m_MessageSubTypes[msgType])
            {
                if (randNum >= kvp.Value.RangeLowerBound && randNum <= kvp.Value.RangeUpperBound)
                    return kvp.Key;
            }

            // Should never happen
            throw new ApplicationException("Could not find suitable MessageSubType for randNum " + randNum.ToString() + ", msgType " + msgType.ToString());
        }

        public static void DisplayProbabilities<TKey>(Dictionary<TKey, ProbabilityEntry> dict, string name)
        {
            Global.RO.Info("--== {0} ==--", name);
            foreach (KeyValuePair<TKey, ProbabilityEntry> kvp in dict)
            {
                Global.RO.Info(
                    "{0,3}, {1,3}%, {2,3} - {3,3}",
                    kvp.Key,
                    kvp.Value.Probability,
                    kvp.Value.RangeLowerBound,
                    kvp.Value.RangeUpperBound
                    );
            }
        }

        public static void Initialize(XmlDocument xmlConfig)
        {
            m_MessageTypes.Clear();
            m_MessageSubTypes.Clear();
            m_InitialCounts.Clear();
            m_RecipientCounts.Clear();
            m_GeneralProbabilities.Clear();

            XmlNode nodeStress = xmlConfig.SelectSingleNode("descendant::MessagingStress");

            // Config data must exist, we don't hardcode defaults
            if (nodeStress == null)
                throw new XmlException("Missing node MessagingStress");

            // TODO - A lot of the following validation can be handled with an XSD

            ParseMessageTypes(nodeStress);
            ParseMessageSubTypes(nodeStress);
            ParseInitialCounts(nodeStress);
            ParseMessageRecipients(nodeStress);
            ParseGeneralProbabilityOptions(nodeStress);
        }

        private static void ParseMessageTypes(XmlNode stressNode)
        {
            int totalTypesPercentage = 0;

            XmlNode nodeCurrent = stressNode.SelectSingleNode("MessageTypes");
            if (nodeCurrent == null)
                throw new XmlException("Missing node MessagingStress -> MessageTypes");

            // Parse the message type probabilities
            foreach (XmlNode node in nodeCurrent.SelectNodes("Probability"))
            {
                XmlAttribute nameAttribute = node.Attributes["name"];
                if (nameAttribute == null)
                    throw new XmlException("Missing name attribute on MessageTypes element");

                string name = nameAttribute.Value;

                // Ensure the name is valid
                if (!m_TypeMap.ContainsKey(name))
                    throw new XmlException("Invalid attribute value \"" + name + "\" on MessageTypes element");

                byte msgType = m_TypeMap[name];

                // See if it is a dupe
                if (m_MessageTypes.ContainsKey(msgType))
                    throw new XmlException("MessageType probability has already been specified for type \"" + name + "\"");

                // Save the data
                ProbabilityEntry probability = new ProbabilityEntry();
                probability.Probability = int.Parse(node.InnerText);
                probability.RangeLowerBound = totalTypesPercentage;
                probability.RangeUpperBound = totalTypesPercentage + probability.Probability - 1;

                m_MessageTypes.Add(msgType, probability);

                totalTypesPercentage += probability.Probability;
            }

            // The probabilities should total 100%
            if (totalTypesPercentage != 100)
                throw new XmlException("Total probability for MessageTypes expected 100%, got " + totalTypesPercentage.ToString() + "%");
        }

        private static void ParseMessageSubTypes(XmlNode stressNode)
        {
            XmlNode nodeCurrent = stressNode.SelectSingleNode("MessageSubTypes");

            // Missing this node is non-fatal; all MessageTypes will yield one subtype,
            // "Normal", with a probability of 100%
            if (nodeCurrent == null)
                return;

            foreach (XmlNode nodeType in nodeCurrent.ChildNodes)
            {
                string typeName = nodeType.Name;

                if (!m_TypeMap.ContainsKey(typeName))
                    throw new XmlException("Unrecognized element " + typeName + " in MessageSubTypes");

                byte msgType = m_TypeMap[typeName];

                if (m_MessageSubTypes.ContainsKey(msgType))
                    throw new XmlException("Duplicate " + typeName + " elements in MessageSubTypes");

                m_MessageSubTypes.Add(msgType, new Dictionary<string, ProbabilityEntry>());

                int totalSubTypePercentage = 0;

                foreach (XmlNode node in nodeType.SelectNodes("Probability"))
                {
                    if (node.Name != "Probability")
                        throw new XmlException("Unrecognized element " + node.Name + " in MessageSubTypes -> " + typeName);

                    XmlAttribute nameAttribute = node.Attributes["name"];
                    if (nameAttribute == null)
                        throw new XmlException("Missing name attribute on InitialCounts element");

                    string subTypeName = nameAttribute.Value;
                    int subTypeValue = int.Parse(node.InnerText);

                    ProbabilityEntry probability = new ProbabilityEntry();
                    probability.Probability = subTypeValue;
                    probability.RangeLowerBound = totalSubTypePercentage;
                    probability.RangeUpperBound = totalSubTypePercentage + probability.Probability - 1;

                    m_MessageSubTypes[msgType].Add(subTypeName, probability);
                    totalSubTypePercentage += probability.Probability;
                }

                if (totalSubTypePercentage != 100)
                    throw new XmlException("Total probability for MessageTypes expected 100%, got " + totalSubTypePercentage.ToString() + "%");
            }

            // For any message types that were not listed, create a single probability
            // of 100% for "Normal"
            foreach (KeyValuePair<string, byte> kvp in m_TypeMap)
            {
                if (!m_MessageSubTypes.ContainsKey(kvp.Value))
                {
                    m_MessageSubTypes.Add(kvp.Value, new Dictionary<string, ProbabilityEntry>());
                    ProbabilityEntry probability = new ProbabilityEntry();
                    probability.Probability = 100;
                    probability.RangeLowerBound = 0;
                    probability.RangeUpperBound = 99;
                    m_MessageSubTypes[kvp.Value].Add("Normal", probability);
                }
            }
        }

        private static void ParseInitialCounts(XmlNode stressNode)
        {
            int totalCountsPercentage = 0;

            XmlNode nodeCurrent = stressNode.SelectSingleNode("InitialCounts");
            if (nodeCurrent == null)
                throw new XmlException("Missing node MessagingStress -> InitialCounts");

            foreach (XmlNode node in nodeCurrent.SelectNodes("Probability"))
            {
                XmlAttribute nameAttribute = node.Attributes["name"];
                if (nameAttribute == null)
                    throw new XmlException("Missing name attribute on InitialCounts element");

                string name = nameAttribute.Value;

                // Both the name and the value should be integers
                int nameValue = int.Parse(name);
                int nameProbability = int.Parse(node.InnerText);

                // See if it is a dupe
                if (m_InitialCounts.ContainsKey(nameValue))
                    throw new XmlException("InitialCount probability has already been specified for count " + nameValue.ToString());

                // Save the data
                ProbabilityEntry probability = new ProbabilityEntry();
                probability.Probability = nameProbability;
                probability.RangeLowerBound = totalCountsPercentage;
                probability.RangeUpperBound = totalCountsPercentage + probability.Probability - 1;

                m_InitialCounts.Add(nameValue, probability);

                totalCountsPercentage += nameProbability;
            }

            if (totalCountsPercentage != 100)
                throw new XmlException("Total probability for InitialCounts expected 100%, got " + totalCountsPercentage.ToString() + "%");
        }

        private static void ParseMessageRecipients(XmlNode stressNode)
        {
            int totalRecipientsPercentage = 0;

            XmlNode nodeCurrent = stressNode.SelectSingleNode("MessageRecipients");
            if (nodeCurrent == null)
                throw new XmlException("Missing node MessagingStress -> MessageRecipients");

            foreach (XmlNode node in nodeCurrent.SelectNodes("Probability"))
            {
                XmlAttribute nameAttribute = node.Attributes["name"];
                if (nameAttribute == null)
                    throw new XmlException("Missing name attribute on MessageRecipients element");

                string name = nameAttribute.Value;

                // Both the name and the value should be integers
                int nameValue = int.Parse(name);
                int nameProbability = int.Parse(node.InnerText);

                // See if it is a dupe
                if (m_RecipientCounts.ContainsKey(nameValue))
                    throw new XmlException("MessageRecipients probability has already been specified for count " + nameValue.ToString());

                // Save the data
                ProbabilityEntry probability = new ProbabilityEntry();
                probability.Probability = nameProbability;
                probability.RangeLowerBound = totalRecipientsPercentage;
                probability.RangeUpperBound = totalRecipientsPercentage + probability.Probability - 1;

                m_RecipientCounts.Add(nameValue, probability);

                totalRecipientsPercentage += nameProbability;
            }

            if (totalRecipientsPercentage != 100)
                throw new XmlException("Total probability for MessageRecipients expected 100%, got " + totalRecipientsPercentage.ToString() + "%");
        }

        private static void ParseGeneralProbabilityOptions(XmlNode stressNode)
        {
            string[] generalProbabilityOptions = new string[] {
                "DeleteBlockChance",
                "InviteBlockChance",
                "InviteDeclineChance"
            };

            foreach (string generalProbabilityOption in generalProbabilityOptions)
            {
                XmlNode nodeCurrent = stressNode.SelectSingleNode(generalProbabilityOption);
                if (nodeCurrent == null)
                    throw new XmlException("Missing configuration option " + generalProbabilityOption);
                m_GeneralProbabilities.Add(generalProbabilityOption, int.Parse(nodeCurrent.InnerText));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\FuncRevokeExMsg.cs ===
using System;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.Utilities;

namespace MessagingTest
{
    /// <summary>
    /// Functional Tests for RevokeMessageEx
    /// </summary>
    [TestGroup]
    public class FuncRevokeExMsg_PositiveCases : MessagingTestGroup
    {
        static Report ro = new Report(typeof(FuncRevokeExMsg_PositiveCases).Name);

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Revoke a persistent message by ID")]
        public void P_RevokeEx_ByMsgId()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchId(a, b, msg.Recipients[0].msgId, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
        }

        [TestCase, TestFrequency("BVT"), TestCasePriority(1), Description("Revoke a transient message by ID")]
        public void P_RevokeEx_ByMsgId_Transient()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            RevokeExMatchId(a, b, msg.ID, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        [TestCase, Description("Revoke a message from multiple users")]
        public void P_RevokeEx_ByMsgId_MultipleAll()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            RevokeExMatchId(
                a,
                new PNUser[] { b, c },
                new uint[] { msg.Recipients[0].msgId, msg.Recipients[1].msgId },
                false
                );

            // Verify that the message is deleted for both users
            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);
        }

        [TestCase, Description("Revoke a message from a single user of a group")]
        public void P_RevokeEx_ByMsgId_MultipleSome()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            RevokeExMatchId(a, c, msg.Recipients[1].msgId, false);

            // Verify that message is gone for C
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);

            // Verify that the message still exists for B
            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a persistent message by sender PUID")]
        public void P_RevokeEx_BySender()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchSender(a, b, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Revoke a transient message by sender PUID")]
        public void P_RevokeEx_BySender_Transient()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            RevokeExMatchSender(a, b, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        [TestCase, Description("Revoke a message by sender PUID from multiple users")]
        public void P_RevokeEx_BySender_MultipleAll()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchSender(a, new PNUser[] { b, c }, msg.Type, false);

            // Verify that the message is deleted for both users
            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);
        }

        [TestCase, Description("Revoke a message by sender PUID from a subset of a user group")]
        public void P_RevokeEx_BySender_MultipleSome()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchSender(a, c, msg.Type, false);

            // Verify that message is gone for C
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);

            // Verify that the message still exists for B
            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase(58256), Description("Triage needed: blocks seem to only work for transient messages")]
        public void P_RevokeEx_BySender_Block()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchSender(a, b, msg.Type, true);

            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);

            EnsureBlocked(a, b);

            // Unblock user A by sending a message to him
            MsgTestUtils.CreateAndSendMessage(b, a, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Verify that user A is unblocked
            MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Revoke a transient message by sender PUID and block them")]
        public void P_RevokeEx_BySender_Block_Transient()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            RevokeExMatchSender(a, b, msg.Type, true);

            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);

            EnsureBlocked(a, b);

            // Unblock user A by sending a message to him
            MsgTestUtils.CreateAndSendMessage(b, a, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            // Verify that user A is unblocked
            MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Revoke a persistent message by context")]
        public void P_RevokeEx_ByContext()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchContext(a, b, msg.Context, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Revoke a transient message by context")]
        public void P_RevokeEx_ByContext_Transient()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            RevokeExMatchContext(a, b, msg.Context, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        [TestCase, Description("Revoke a message by context from multiple users")]
        public void P_RevokeEx_ByContext_MultipleAll()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchContext(a, new PNUser[] { b, c }, msg.Context, msg.Type, false);

            // Verify that the message is deleted for both users
            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);
        }

        [TestCase, Description("Revoke a message by context from a subset of users")]
        public void P_RevokeEx_ByContext_MultipleSome()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchContext(a, c, msg.Context, msg.Type, false);

            // Verify that message is gone for C
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);

            // Verify that the message still exists for B
            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a persistent message by type")]
        public void P_RevokeEx_ByType()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchType(a, b, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
        }

        [TestCase, TestFrequency("Daily"), TestCasePriority(2), Description("Revoke a transient message by type")]
        public void P_RevokeEx_ByType_Transient()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            RevokeExMatchType(a, b, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            MsgTestUtils.VerifyMessageIsGone(b, msg.ID);
        }

        [TestCase, Description("Revoke a message by type from multiple users")]
        public void P_RevokeEx_ByType_MultipleAll()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchType(a, new PNUser[] { b, c }, msg.Type, false);

            // Verify that the message is deleted for both users
            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);
        }

        [TestCase, Description("Revoke a message by type from a subset of users")]
        public void P_RevokeEx_ByType_MultipleSome()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            RevokeExMatchType(a, c, msg.Type, false);

            // Verify that message is gone for C
            MsgTestUtils.WaitForDeletedMessage(c, msg.Recipients[1].msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msg.Recipients[1].msgId);

            // Verify that the message still exists for B
            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        protected void DoPropRevoke(MsgPropertyWrapped prop)
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(prop);

            ro.Debug("Doing standard one property revoke for user {0:x} -> user: {1:x}, property tag: {2:x}",
                    a.UserId,
                    b.UserId,
                    prop.tag);

            SendGameInvite(a, b, DEFAULT_SESSION, 0, 0, details);
            uint msgId = GetFirstMessageFrom(b, a).ID;
            RevokeExMatchProperty(a, b, prop, XonPresNoti.MSG_TYPE_GAME_INVITE, false);

            MsgTestUtils.WaitForDeletedMessage(b, msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msgId);
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_NULL()
        {
            DoPropRevoke(MsgProperty.NULLProperty());
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_I1()
        {
            DoPropRevoke(MsgProperty.I1Property(0x12));
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_I1_Zero()
        {
            DoPropRevoke(MsgProperty.I1Property(0));
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_I1_Max()
        {
            DoPropRevoke(MsgProperty.I1Property(byte.MaxValue));
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_I2()
        {
            DoPropRevoke(MsgProperty.I2Property(0x1234));
        }

        [TestCase(58228), Description("All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_I2_Zero()
        {
            DoPropRevoke(MsgProperty.I2Property(0));
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_I2_Max()
        {
            DoPropRevoke(MsgProperty.I2Property(ushort.MaxValue));
        }

        [TestCase, Description("Revoke a message by an integer property")]
        public void P_RevokeEx_ByProp_I4()
        {
            DoPropRevoke(MsgProperty.I4Property(0x12345678));
        }

        [TestCase, Description("Revoke a message by an integer property, value 0")]
        public void P_RevokeEx_ByProp_I4_Zero()
        {
            DoPropRevoke(MsgProperty.I4Property(0));
        }

        [TestCase, Description("Revoke a message by an integer property, value max")]
        public void P_RevokeEx_ByProp_I4_Max()
        {
            DoPropRevoke(MsgProperty.I4Property(uint.MaxValue));
        }

        [TestCase, Description("Revoke a message by an int64 property")]
        public void P_RevokeEx_ByProp_I8()
        {
            DoPropRevoke(MsgProperty.I8Property(DEFAULT_CONTEXT));
        }

        [TestCase, Description("Revoke a message by an int64 property, value 0")]
        public void P_RevokeEx_ByProp_I8_Zero()
        {
            DoPropRevoke(MsgProperty.I8Property(0));
        }

        [TestCase, Description("Revoke a message by an int64 property, value max")]
        public void P_RevokeEx_ByProp_I8_Max()
        {
            DoPropRevoke(MsgProperty.I8Property(ulong.MaxValue));
        }

        [TestCase, Description("Revoke a message by string property")]
        public void P_RevokeEx_ByProp_String()
        {
            DoPropRevoke(MsgProperty.StringProperty(RandomEx.GlobalRandGen.GenerateRandomString(64)));
        }

        [TestCase, Description("Revoke a message by string property, empty")]
        public void P_RevokeEx_ByProp_String_Zero()
        {
            DoPropRevoke(MsgProperty.StringProperty(""));
        }

        [TestCase, Description("Revoke a message by filetime property, value now")]
        public void P_RevokeEx_ByProp_FileTime_Now()
        {
            DoPropRevoke(MsgProperty.FileTimeProperty(DateTime.Now));
        }

        [TestCase, Description("Revoke a message by filetime property, value future")]
        public void P_RevokeEx_ByProp_FileTime_Future()
        {
            DoPropRevoke(MsgProperty.FileTimeProperty(DateTime.Now.AddMinutes(10000)));
        }

        [TestCase, Description("Revoke a message by a binary property")]
        public void P_RevokeEx_ByProp_Binary()
        {
            DoPropRevoke(MsgProperty.BinaryProperty(RandomEx.GlobalRandGen.GenerateRandomBlob(256)));
        }

        [TestCase, Description("Revoke a message by a binary property, size 0")]
        public void P_RevokeEx_ByProp_Binary_ZeroSize()
        {
            DoPropRevoke(MsgProperty.BinaryProperty(new byte[0]));
        }

        [TestCase, Description("Revoke a message by an attachment property")]
        public void P_RevokeEx_ByProp_Attachment()
        {
            DoPropRevoke(MsgProperty.AttachmentProperty(1024, 0, "http://MessagingTest/P_RevokeEx_ByProp_Attachment/"));
        }

        [TestCase, Description("Revoke a message by an attachment property, size 0")]
        public void P_RevokeEx_ByProp_Attachment_ZeroSize()
        {
            DoPropRevoke(MsgProperty.AttachmentProperty(0, 0, ""));
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_Bool_True()
        {
            DoPropRevoke(MsgProperty.BoolProperty(true));
        }

        [TestCase(58228), Description("Test Bug: All tests that deal with property < sizeof(I4) are broken as the property value is never sent on the wire.")]
        public void P_RevokeEx_ByProp_Bool_False()
        {
            DoPropRevoke(MsgProperty.BoolProperty(false));
        }

        [TestCase, Description("Revoke a message by a string ID property")]
        public void P_RevokeEx_ByProp_StringId()
        {
            DoPropRevoke(MsgProperty.StringIdProperty(1024));
        }

        [TestCase, Description("Revoke a message by a string ID property, value 0")]
        public void P_RevokeEx_ByProp_StringId_Zero()
        {
            DoPropRevoke(MsgProperty.StringIdProperty(0));
        }

        [TestCase, Description("Revoke a message by a string ID property, value max")]
        public void P_RevokeEx_ByProp_StringId_Max()
        {
            DoPropRevoke(MsgProperty.StringIdProperty(UInt32.MaxValue));
        }

        [TestCase, Description("Revoke a message by property from multiple users")]
        public void P_RevokeEx_ByProp_MultipleAll()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            MsgPropertyWrapped prop = MsgProperty.I8Property(RandomEx.GlobalRandGen.NextUlong());

            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(prop);

            SendGameInvite(a, new PNUser[] { b, c }, DEFAULT_SESSION, 0, 0, details);
            uint msgIdB = GetFirstMessageFrom(b, a).ID;
            uint msgIdC = GetFirstMessageFrom(c, a).ID;
            RevokeExMatchProperty(a, new PNUser[] { b, c }, prop, XonPresNoti.MSG_TYPE_GAME_INVITE, false);

            MsgTestUtils.WaitForDeletedMessage(b, msgIdB);
            MsgTestUtils.WaitForDeletedMessage(c, msgIdC);
            MsgTestUtils.VerifyMessageIsGone(b, msgIdB);
            MsgTestUtils.VerifyMessageIsGone(c, msgIdC);
        }

        [TestCase, Description("Revoke a message by property from a subset of users")]
        public void P_RevokeEx_ByProp_MultipleSome()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            MsgPropertyWrapped prop = MsgProperty.I8Property(RandomEx.GlobalRandGen.NextUlong());

            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(prop);

            SendGameInvite(a, new PNUser[] { b, c }, DEFAULT_SESSION, 0, 0, details);
            uint msgId = GetFirstMessageFrom(c, a).ID;
            RevokeExMatchProperty(a, c, prop, XonPresNoti.MSG_TYPE_GAME_INVITE, false);

            MsgTestUtils.WaitForDeletedMessage(c, msgId);
            MsgTestUtils.VerifyMessageIsGone(c, msgId);

            // Verify that the message still exists for B
            GetFirstMessageFrom(b, a);
        }

        private void General_RevokeEx_TypeBySender(byte msgType)
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, msgType);

            RevokeExMatchSender(a, b, msg.Type, false);

            MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            MsgTestUtils.VerifyMessageIsGone(b, msg.Recipients[0].msgId);
        }

        [TestCase, Description("Revoke a friend request by sender")]
        public void P_RevokeEx_TypeFriendRequest()
        {
            General_RevokeEx_TypeBySender(XonPresNoti.MSG_TYPE_FRIEND_REQUEST);
        }

        [TestCase, Description("Revoke a system message by sender")]
        public void P_RevokeEx_TypeLiveMessage()
        {
            General_RevokeEx_TypeBySender(XonPresNoti.MSG_TYPE_LIVE_MESSAGE);
        }

        [TestCase, Description("Revoke a party invitation by sender")]
        public void P_RevokeEx_TypePartyChatInvite()
        {
            General_RevokeEx_TypeBySender(XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE);
        }

        [TestCase, Description("Revoke a personal message by sender")]
        public void P_RevokeEx_TypePersonal()
        {
            General_RevokeEx_TypeBySender(XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE);
        }

        [TestCase, Description("Revoke a quick chat invitation by sender")]
        public void P_RevokeEx_TypeQuickChatInvite()
        {
            General_RevokeEx_TypeBySender(XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE);
        }

        [TestCase, Description("Revoke a video chat invitation by sender")]
        public void P_RevokeEx_TypeVideoChatInvite()
        {
            General_RevokeEx_TypeBySender(XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE);
        }
    }

    [TestGroup]
    public class FuncRevokeExMsg_NegativeCases : MessagingTestGroup
    {
        [TestCase, Description("Revoke a message and block the sender for multiple recipients")]
        public void N_BlockSender_MultipleRecipients()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeExMatchSender(a, new PNUser[] { b, c }, msg.Type, true);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                RecipientResult resultB = new RecipientResult();
                resultB.userId = b.UserId;

                RecipientResult resultC = new RecipientResult();
                resultC.userId = c.UserId;

                WaitForDeletedMessage(a, new RecipientResult[] { resultB, resultC });
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b, c }, new uint[] { msg.Recipients[0].msgId, msg.Recipients[1].msgId });

            // Ensure neither user is blocked
            MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Revoke a message and block the sender for null recipients")]
        public void N_BlockSender_NullRecipients()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeExMatchSender(a, new PNUser[] {}, msg.Type, true);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        [TestCase, Description("Revoke a message and block the sender without setting the sender flag in the request")]
        public void N_BlockSender_NoSenderFlag()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.CreateCleanUser();

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeExMatchContext(a, b, msg.Context, msg.Type, true);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });

            // Ensure user is not blocked
            MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Revoke a message and block the sender for a sender PUID that doesn't exist")]
        public void N_BlockSender_DoesNotExist()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            ulong userid = a.UserId;
            a.UserId += 0x1000;
            RevokeExMatchSender(a, b, msg.Type, true);

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });

            // A should still be able to send
            a.UserId -= 0x1000;
            MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Revoke a message by sender without specifying the type and message ID")]
        public void N_BlockSender_MissingTypeAndId()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.CreateCleanUser();

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeEx(
                    a,
                    msg.Context,
                    XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER | XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_SENDER,
                    msg.Type,
                    null,
                    new RecipientResult[] { result }
                    );
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });

            // Ensure User A is unblocked
            MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
        }

        [TestCase, Description("Revoke a message and block the sender for a sender PUID that doesn't exist")]
        public void N_BySender_DoesNotExist()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);
            a.UserId += 0x1000;
            RevokeExMatchSender(a, b, msg.Type, false);

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message with message ID 0")]
        public void N_ByID_SingleZero()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            try
            {
                RevokeExMatchId(a, b, 0, false);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }
        }

        [TestCase, Description("Revoke multiple messages with one having message ID 0")]
        public void N_ByID_OneZeroInMiddle()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            PNUser c = MsgTestUtils.Fc.CreateUser(true);
            PNUser d = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b, c, d }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeExMatchId(
                    a,
                   new PNUser[] { b, c, d },
                   new uint[] { msg.Recipients[0].msgId, 0, msg.Recipients[2].msgId },
                   false
                   );
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                RecipientResult resultB = new RecipientResult();
                resultB.userId = b.UserId;

                RecipientResult resultD = new RecipientResult();
                resultD.userId = d.UserId;

                WaitForDeletedMessage(a, new RecipientResult[] { resultB, resultD });
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b, d }, new uint[] { msg.Recipients[0].msgId, msg.Recipients[2].msgId });
        }

        [TestCase, Description("Revoke a message with a message ID that doesn't exist")]
        public void N_ByID_DoesNotExist()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            RevokeExMatchId(a, b, msg.Recipients[0].msgId + 0x20, false);

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message with the revoker user ID being 0")]
        public void N_BySender_UserZero()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                a.UserId = 0;
                RevokeExMatchSender(a, b, msg.Type, false);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message with a context value of 0")]
        public void N_ByContext_Zero()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeExMatchContext(a, b, 0, msg.Type, false);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message by context without specifying the type and message ID")]
        public void N_ByContext_MissingTypeAndId()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeEx(a, msg.Context, XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_CONTEXT, msg.Type, null, new RecipientResult[] { result });
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message by a context value that doesn't exist")]
        public void N_ByContext_DoesNotExist()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            RevokeExMatchContext(a, b, msg.Context + 1, msg.Type, false);

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message by a property without specifying the type")]
        public void N_ByProp_WithoutType()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            MsgPropertyWrapped prop = MsgProperty.I4Property(0x1234);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;

            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(prop);

            SendGameInvite(a, b, DEFAULT_SESSION, 0, 0, details);
            uint msgId = GetFirstMessageFrom(b, a).ID;

            try
            {
                RevokeEx(
                    a,
                    0,
                    XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_PROP,
                    XonPresNoti.MSG_TYPE_GAME_INVITE,
                    prop,
                    new RecipientResult[] { result }
                    );
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msgId });
        }

        [TestCase, Description("Revoke a persistent message by property")]
        public void N_ByProp_Persistent()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            MsgPropertyWrapped prop = MsgProperty.I4Property(0x1234);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;

            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(prop);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, new PNUser[] { b }, XonPresNoti.MSG_TYPE_TITLE_CUSTOM, 0, 0, details);

            try
            {
                RevokeExMatchProperty(a, b, prop, msg.Type, false);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase(58228)]
        public void N_ByProp_ZeroTag()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            MsgPropertyWrapped prop = new MsgPropertyWrapped(16);
            prop.tag = 0;

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            try
            {
                RevokeExMatchProperty(a, b, prop, msg.Type, false);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.ID });
        }

        [TestCase, Description("Revoke a message by a property value that doesn't exist")]
        public void N_ByProp_DoesNotExist()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);
            MsgPropertyWrapped prop = MsgProperty.I4Property(0x8723);

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);
            RevokeExMatchProperty(a, b, prop, msg.Type, false);

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.ID });
        }

        [TestCase, Description("Revoke a message with type 0")]
        public void N_ByType_ZeroType()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeExMatchType(a, b, 0, false);
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message with a type that doesn't exist")]
        public void N_ByType_DoesNotExist()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            RevokeExMatchType(a, b, XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE, false);

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase, Description("Revoke a message by sender without specifying the type and message ID")]
        public void N_BySender_MissingTypeAndId()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;

            UserMessage msg = MsgTestUtils.CreateAndSendMessage(a, b, XonPresNoti.MSG_TYPE_TITLE_CUSTOM);

            try
            {
                RevokeEx(a, msg.Context, XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_SENDER, msg.Type, null, new RecipientResult[] { result });
            }
            catch (HResultException hrEx)
            {
                ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.Recipients[0].msgId);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }

            ValidateMessages(new PNUser[] { b }, new uint[] { msg.Recipients[0].msgId });
        }

        [TestCase(58228)]
        public void N_ReservedFlags()
        {
            PNUser a = MsgTestUtils.Fc.CreateUser(true);
            PNUser b = MsgTestUtils.Fc.CreateUser(true);

            RecipientResult result = new RecipientResult();
            result.userId = b.UserId;

            UserMessage msg = MsgTestUtils.SendGameInvite(a, b);

            // Try to revoke the message with every flag that isn't a known value
            for (int i = 1; i < 32; ++i)
            {
                uint flags = (uint)(1 << i);

                // Skip valid flags
                switch (flags)
                {
                    case XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER:
                    case XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_CONTEXT:
                    case XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_ID:
                    case XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_PROP:
                    case XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_SENDER:
                    case XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE:
                        continue;
                    default:
                        break;
                }

                Global.RO.Info("Revoking with invalid flag {0:X08}", flags);

                try
                {
                    RevokeEx(a, msg.Context, flags, msg.Type, null, new RecipientResult[] { result });
                }
                catch (HResultException hrEx)
                {
                    ValueCheck.TestHR("Reply HRESULT", HResult.E_INVALIDARG, hrEx.HR);
                }

                // Ensure message hasn't been revoked
                ValidateMessages(new PNUser[] { b }, new uint[] { msg.ID });
            }

            try
            {
                MsgTestUtils.WaitForDeletedMessage(b, msg.ID);
            }
            catch (ServerTestFramework.TimeOutException)
            {
                // Expected
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\MessagingTest.cs ===
using System;
using System.IO;
using System.Threading;
using System.Xml;
using ServerTestFramework;
using xonline.common.config;
using xonline.common.diagnostics;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;

[assembly: RootNode(typeof(MessagingTest.MessageTest))]

namespace MessagingTest
{
    /// <summary>
    /// <TestSuite>Messaging Test Plan</TestSuite>
    ///    <Tester>Jacob Repp</Tester>
    ///    <Developer>Matt Childerston</Developer>
    ///    <Developer>Peter Hansen</Developer>
    ///    <PM>James Jen</PM>
    ///    <Status>Draft</Status>
    /// </summary>
    ///    <remarks>
    ///    <Goal>Functional positive and negative test cases covering V1, V2 and V3 messaging features.</Goal>
    ///    <Goal>Test code validation of Profile-UODB partitioning.</Goal>
    ///    <Goal>Test code validation of Profile-UODB table data.</Goal>
    ///    <NonGoal>Test of container environment (.NET, ASP.NET, IIS, Windows).</NonGoal>
    ///    <NonGoal>Test of NT service startup/shutdown</NonGoal>
    ///    <NonGoal>Test of internal INH only messages that are not exposed on the front-door</NonGoal>
    ///    <Description>
    ///        <p>
    ///            Presence server previously was the one of two servers used for maintaining
    ///        user state in Xbox Live. The current service has been combined into
    ///        a single server which handles presence records, messaging, notification and
    ///        teams. The test suites for each portion of presence however will continue
    ///        be maintained as three seperate suites.
    ///        </p>
    ///
    ///        <p>
    ///            Messaging functional tests cover all of the 'Q' messages that are exposed
    ///        on the presence front door. These are as follows:
    ///        </p>
    ///
    ///        <p>
    ///        <table class="test_data">
    ///            <tr><td>EnumMessages           </td><td>V1,V2 enumerate user message folder</td></tr>
    ///            <tr><td>MessageSummary         </td><td>V1,V2 retrieve message summary</td></tr>
    ///            <tr><td>MessageDetails         </td><td>Retrieve the message details for a message</td></tr>
    ///            <tr><td>DeleteMessage          </td><td>Delete a message in a user message folder</td></tr>
    ///            <tr><td>SendMessage            </td><td>Send a user message</td></tr>
    ///            <tr><td>RevokeMessage          </td><td>Revoke a message from another user</td></tr>
    ///            <tr><td>DeleteTitle            </td><td>Delete a title from an internal title tracking</td></tr>
    ///            <tr><td>EnumTitles             </td><td>Enumerate all titles that a user has used</td></tr>
    ///            <tr><td>MessageFlags           </td><td>Modify flags on a message</td></tr>
    ///            <tr><td>EnumSystemMessages     </td><td>Enumerate all system message</td></tr>
    ///            <tr><td>SystemMessageDetails   </td><td>Retrieve message details for a system message</td></tr>
    ///            <tr><td>DeleteSystemMessage    </td><td>Delete a system message</td></tr>
    ///            <tr><td>SendSystemMessage      </td><td>Send a system message for all users</td></tr>
    ///            <tr><td>RevokeMessageEx        </td><td>Revoke messages matched by a set of properties</td></tr>
    ///            <tr><td>EnumMessages2          </td><td>V3 enumerate user message folder</td></tr>
    ///            <tr><td>MessageSummary2        </td><td>V3 retrieve message summary</td></tr>
    ///        </table>
    ///        </p>
    /// </Description>
    /// </remarks>
    [Owner("rsnyder"), TestFrequency("Regression"), TestCasePriority(3)]
    public class MessageTest : TestNode
    {
        private ulong maxDailySends = 2500000;
        private SettingState dailyRecipientsOld = null;
        private SettingState dailySendsOld = null;

        private XmlDocument LoadTestConfig()
        {
            const string c_ConfigFilename = "MessagingTestConfig.xml";
            string basePath = Path.GetDirectoryName(GetActualType().Assembly.Location);
            string configPath = Path.Combine(basePath, c_ConfigFilename);

            Global.RO.Info("Loading test config: {0}", configPath);

            XmlDocument testConfig = new XmlDocument();
            testConfig.Load(configPath);

            return testConfig;
        }

        public override void PreRun(RUN_TYPE runType)
        {
            if (runType == RUN_TYPE.FUNCTIONAL)
            {
                Initialize();
            }
            else if (runType == RUN_TYPE.STRESS)
            {
                InitializeStress();
            }
        }

        ////////////////////////////////////////////////
        /// <summary>
        /// Setup for Functional Suite
        ///    </summary>
        public void Initialize()
        {
            XmlDocument xml = LoadTestConfig();
            MessagingTestConfig.Initialize(xml);
            ServerTestFramework.LiveService.FakeSG.GlobalFakeSG.FakeSG.SetStateEndpoint(Global.XEnv.GetVirtualInterface(VirtualInterface.xpnfd_presence_int).ToString());
            SystemMsgFolder.DeleteAll(MsgTestUtils.DefaultSystemTitleID, SystemMessage.RevokeAlso.No);
        }

        ////////////////////////////////////////////////
        /// <summary>
        /// Setup for Stress Suite
        ///    </summary>
        public void InitializeStress()
        {
            XmlDocument xml = LoadTestConfig();
            MessagingTestConfig.Initialize(xml);

            ServerTestFramework.LiveService.FakeSG.GlobalFakeSG.FakeSG.SetStateEndpoint(Global.XEnv.GetVirtualInterface(VirtualInterface.xpnfd_presence_int).ToString());
            ServerTestFramework.LiveService.FakeSG.GlobalFakeSG.FakeSG.ClearXboxes();

            IncreaseDailyLimits();

            StressUserList.Initialize();

            //if (StressUserList.UserList.Count < 2)
            //{
            //    Global.RO.Warn("UserList only contained {0} users, skipping message initialization", StressUserList.UserList.Count);
            //    return;
            //}

            // Give every user an initial set of messages

            //foreach (StressUser user in StressUserList.UserList)
            //{
            //    // TODO - Initial message population should be optional

            //    // Get a random user as the sender
            //    StressUser sender = null;
            //    do
            //    {
            //        int senderIndex = RandomEx.GlobalRandGen.Next(StressUserList.UserList.Count);
            //        sender = StressUserList.UserList[senderIndex];
            //    } while (sender.UserId == user.UserId);


            //    int numMsgs = 1;// MessagingTestConfig.GetRandomInitialCount();
            //    Global.RO.Info("Creating {0} messages for user {1:X}", numMsgs, user.UserId);

            //    for (int i = 0; i < numMsgs; ++i)
            //    {
            //        try
            //        {
            //            // Send a random message to the user.  We only wait for notification
            //            // of the last message
            //            MsgTestUtils.SendRandomMessage(sender, user, i == numMsgs - 1, false);
            //        }
            //        catch (Exception ex)
            //        {
            //            Global.RO.Error("SendRandomMessage threw an exception: {0}", ex.Message);
            //        }
            //    }

            //    // Perform initial enumeration
            //    user.MsgFolder.LoadEx();
            //}
        }

        public override void PostRun(RUN_TYPE runType)
        {
            if (runType == RUN_TYPE.STRESS)
            {
                RestoreDailyLimits();
            }
        }

        private void IncreaseDailyLimits()
        {
            Global.RO.Info("Checking NPDB values to see if they need to be increased for stress.");

            XConfig xConfig = new XConfig();

            ulong dailyRecipients = ulong.Parse(xConfig.GetSetting("presence_MessagingDailyRecipients"));
            ulong dailySends = ulong.Parse(xConfig.GetSetting("presence_MessagingDailySends"));

            Global.RO.Info("Current values:\r\npresence_MessagingDailyRecipients: " + dailyRecipients + "\r\npresence_MessagingDailySends: " + dailySends);

            if (dailyRecipients < maxDailySends)
            {
                Global.RO.Info("Updaing presence_MessagingDailyRecipients to " + maxDailySends);
                dailyRecipientsOld = xConfig.OverrideSetting("messagingfd", "ALL", "presence_MessagingDailyRecipients", maxDailySends.ToString());
            }

            if (dailySends < maxDailySends)
            {
                Global.RO.Info("Updaing presence_MessagingDailySends to " + maxDailySends);
                dailySendsOld = xConfig.OverrideSetting("messagingfd", "ALL", "presence_MessagingDailySends", maxDailySends.ToString());
            }

            Thread.Sleep(2000);

            xConfig.ForceConfigReload("messagingfd");
        }

        private void RestoreDailyLimits()
        {
            Global.RO.Info("Restoring original NPDB values.");

            XConfig xConfig = new XConfig();

            if (dailyRecipientsOld != null)
            {
                Global.RO.Info("Restoring presence_MessagingDailyRecipients");
                xConfig.RestoreOverrideSettingState(dailyRecipientsOld);
            }

            if (dailySendsOld != null)
            {
                Global.RO.Info("Restoring presence_MessagingDailySends");
                xConfig.RestoreOverrideSettingState(dailySendsOld);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\example\StdAfx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	tmi.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\MessagingTestGroup.cs ===
using System;
using System.IO;
using System.Collections;
using System.Text;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.Notification;

namespace MessagingTest
{
    public class MessagingTestGroup : TestNode
    {
        // Byte ordering allows for debugging swap issues
        public const ulong DEFAULT_CONTEXT = 0xaaaabbbbccccdddd;
        public const ulong DEFAULT_SESSION = 0x1111222233334444;
        public const ulong DEFAULT_COMPID  = 0x5555666677778888;

        // Flags used for specifying revoked user types
        public const uint NeverRejectBuddy      = 1<<0;
        public const uint NeverRevokeMsg        = 1<<1;
        public const uint NeverRevokeMsgEx      = 1<<2;
        public const uint NeverDeleteMsg        = 1<<3;
        public const uint NeverRejectRecruit    = 1<<4;
        public const uint NeverBlock            = 1<<5;
        public const uint NeverBlockAll         = 0x1f;

        protected virtual void OnSetup() {}
        protected virtual void OnTearDown() {}


        [TestGroupSetup]
        public void Setup()
        {
            OnSetup();
        }

        [TestGroupTearDown]
        public void TearDown()
        {
            OnTearDown();
        }

        //
        // Check blocks in as many ways as possible
        //
        protected void EnsureBlocked(PNUser badguy, PNUser blocked)
        {
            EnsureBlocked(badguy, new PNUser[] { blocked });
        }

        protected void EnsureBlocked(PNUser badguy, PNUser []blocked)
        {

            // Check persistent messages
            UserMessage msg = UserMessage.Create(
                    badguy,
                    XonPresNoti.MSG_TYPE_TITLE_CUSTOM,
                    0,
                    XonPresNoti.MSG_FLAG_HAS_TEXT,
                    0,
                    MsgTestUtils.CreateDetails(MessageDetailTypes.Text));

            try
            {
                msg.Send(badguy, blocked);
                foreach (RecipientResult result in msg.Recipients)
                {
                    PNUser recipient = GetUserByPuid(blocked, result.userId);

                    // We won't get this result if the user was not online when the message was sent
                    if (recipient.LoggedOn)
                    {
                        ValueCheck.TestHR("Blocked message", HResult.XONLINE_E_MESSAGE_SENDER_BLOCKED, result.hr);
                    }
                }
            }
            catch (HResultException ex)
            {
                ValueCheck.TestHR("Blocked message", HResult.XONLINE_E_MESSAGE_SENDER_BLOCKED, ex.HR);
            }

            // Check transient messages
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            MsgTestUtils.SendGameInvite(badguy, blocked, RandomEx.GlobalRandGen.NextUlong(), context, false);
            Thread.Sleep(10 * 1000);
            foreach (PNUser b in blocked)
            {
                // None of these users should have the game invite
                UserMsgFolder msgFolder = new UserMsgFolder(b);
                msgFolder.Load2();
                UserMessage[] messages = msgFolder.Find(XonPresNoti.MSG_TYPE_GAME_INVITE, badguy.UserId, context);
                ValueCheck.Test(
                    String.Format("Found messages for blocker {0}", b.UserId),
                    (int)0,
                    messages.Length
                    );
            }

            // Check buddy requests
            foreach(PNUser b in blocked)
            {
                badguy.AddBuddy(b);
                QValPacket qval = badguy.WaitForQFlags(XonPresNoti.QFLAG_MASK_LIST_CHANGE);

                try
                {
                    badguy.HandleQValPacket(qval);
                    throw new Exception("Should not reach here.");
                }
                catch (HResultException ex)
                {
                    // Handle the dequeue pump with the bad HR on the list change item
                    if (HResult.XONLINE_E_NOTIFICATION_BLOCKED != ex.HR)
                    {
                        throw ex;
                    }
                    else
                    {
                        Global.RO.Debug("Got expected negative HR from list change: {0:x}", ex.HR);
                    }
                }
            }
        }

        protected PNUser GetUserByPuid(PNUser []list, ulong puid)
        {
            foreach(PNUser user in list)
            {
                if(user.UserId == puid)
                {
                    return user;
                }
            }

            throw new UnexpectedTestResultException(String.Format("User {0:x} not found in PNUser list", puid));
        }

        //------------------------------------------------------------------------------
        // Game invite
        //------------------------------------------------------------------------------
        protected UserMessage SendGameInvite(PNUser u, PNUser dst)
        {
            return SendGameInvite(u, new PNUser[]{dst}, DEFAULT_SESSION, 0, 0, null);
        }

        protected UserMessage SendGameInvite(PNUser u, PNUser dst, ulong sessionId, ulong contextId, uint msgFlags, MsgDetails details)
        {
            return SendGameInvite(u, new PNUser[]{dst}, sessionId, contextId, msgFlags, details);
        }

        protected UserMessage SendGameInvite(PNUser u, PNUser []dst, ulong sessionId, ulong contextId, uint msgFlags, MsgDetails details)
        {
            if(null == details)
            {
                if(u.Xbox.IsXenonTitle)
                {
                    details = MsgTestUtils.CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.XenonVoice);
                    details.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, sessionId);
                    details.AddProperty(XonPresNoti.MSG_PROP_SESSION_DESCRIPTION, "game invite");
                    details.AddProperty(XonPresNoti.MSG_PROP_SESSION_HOST_XNADDR, u.UserId);
                    details.AddProperty(XonPresNoti.MSG_PROP_SESSION_HOST_KEY, contextId);
                }
                else
                {
                    details = MsgTestUtils.CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.XboxVoice);
                    details.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, sessionId);
                }
                msgFlags |= XonPresNoti.MSG_FLAG_HAS_TEXT|XonPresNoti.MSG_FLAG_HAS_VOICE;
            }
            else
            {
                // The session ID is required on the server
                try
                {
                    details.GetQwordProperty(XonPresNoti.MSG_PROP_SESSION_ID);
                }
                catch(InvalidMsgPropertyException)
                {
                    details.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, sessionId);
                }
            }

            u.Invite2(dst, sessionId, contextId, msgFlags, details);

            // Create a fake message for the MsgTestUtils.EnsureDelivery() call
            UserMessage msg = UserMessage.Create(
                    u,
                    XonPresNoti.MSG_TYPE_GAME_INVITE,
                    contextId,
                    msgFlags,
                    0,
                    details);
            msg.CreateRecipients(dst.Length);
            for(int i = 0; i < dst.Length; ++i)
            {
                msg.Recipients[i].userId = dst[i].UserId;
            }
            MsgTestUtils.EnsureDelivery(msg);

            return msg;
        }

        //------------------------------------------------------------------------------
        // Live messages
        //------------------------------------------------------------------------------
        protected UserMessage SendLiveMessage(PNUser dst, string text)
        {
            return SendLiveMessage(PNUser.Service, new PNUser[]{dst}, 0, 0, text);
        }

        protected UserMessage SendLiveMessage(PNUser []dst, uint msgFlags, ushort expireMin, string text)
        {
            return SendLiveMessage(PNUser.Service, dst, msgFlags, expireMin, text);
        }

        protected UserMessage SendLiveMessage(PNUser u, PNUser []dst, uint msgFlags, ushort expireMin, string text)
        {
            // Add our fake string ID lookup
            MsgDetails details = MsgDetails.CreateBlank();
            details.AddProperty(XonPresNoti.MSG_PROP_SYSTEM_TEXT, (uint)0);

            UserMessage msg = UserMessage.Create(
                    u,
                    XonPresNoti.MSG_TYPE_LIVE_MESSAGE,
                    0,
                    msgFlags,
                    expireMin,
                    details);
            msg.Send(u, dst, PNRequestMsg.FDPort.Messaging_DC);
            MsgTestUtils.EnsureDelivery(msg);

            return msg;
        }

        //------------------------------------------------------------------------------
        // RevokeEx Helpers
        //------------------------------------------------------------------------------
        protected void RevokeExMatchId(PNUser user, PNUser recipient, uint msgId, bool never)
        {
            RevokeExMatchId(user, new PNUser[] { recipient }, new uint[] { msgId }, never);
        }

        protected void RevokeExMatchId(PNUser user, PNUser[] recipients, uint[] msgIds, bool never)
        {
            uint flags = XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_ID;
            flags |= never ? XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER : 0;

            RecipientResult[] results = new RecipientResult[recipients.Length];
            for (int i = 0; i < results.Length; ++i)
            {
                results[i] = new RecipientResult();
                results[i].userId = recipients[i].UserId;
                results[i].msgId = msgIds[i];
            }

            RevokeEx(user, 0, flags, 0, null, results);
        }

        protected void RevokeExMatchSender(PNUser user, PNUser recipient, byte type, bool never)
        {
            RevokeExMatchSender(user, new PNUser[] { recipient }, type, never);
        }

        protected void RevokeExMatchSender(PNUser user, PNUser[] recipients, byte type, bool never)
        {
            uint flags = XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_SENDER|XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE;
            flags |= never ? XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER : 0;

            RecipientResult[] results = new RecipientResult[recipients.Length];
            for (int i = 0; i < results.Length; ++i)
            {
                results[i] = new RecipientResult();
                results[i].userId = recipients[i].UserId;
            }

            RevokeEx(user, 0, flags, type, null, results);
        }

        protected void RevokeExMatchContext(PNUser user, PNUser recipient, ulong senderContext, byte type, bool never)
        {
            RevokeExMatchContext(user, new PNUser[] { recipient }, senderContext, type, never);
        }

        protected void RevokeExMatchContext(PNUser user, PNUser[] recipients, ulong senderContext, byte type, bool never)
        {
            uint flags = XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_CONTEXT|XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE;
            flags |= never ? XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER : 0;

            RecipientResult[] results = new RecipientResult[recipients.Length];
            for (int i = 0; i < results.Length; ++i)
            {
                results[i] = new RecipientResult();
                results[i].userId = recipients[i].UserId;
            }

            RevokeEx(user, senderContext, flags, type, null, results);
        }

        protected void RevokeExMatchProperty(PNUser user, PNUser recipient, MsgPropertyWrapped prop, byte msgType, bool never)
        {
            RevokeExMatchProperty(user, new PNUser[] { recipient }, prop, msgType, never);
        }

        protected void RevokeExMatchProperty(PNUser user, PNUser[] recipients, MsgPropertyWrapped prop, byte msgType, bool never)
        {
            uint flags = XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_PROP|XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE;
            flags |= never ? XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER : 0;

            RecipientResult[] results = new RecipientResult[recipients.Length];
            for (int i = 0; i < results.Length; ++i)
            {
                results[i] = new RecipientResult();
                results[i].userId = recipients[i].UserId;
            }

            RevokeEx(user, 0, flags, msgType, prop, results);
        }

        protected void RevokeExMatchType(PNUser user, PNUser recipient, byte type, bool never)
        {
            RevokeExMatchType(user, new PNUser[] { recipient }, type, never);
        }

        protected void RevokeExMatchType(PNUser user, PNUser[] recipients, byte type, bool never)
        {
            uint flags = XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE;
            flags |= never ? XonPresNoti.XMSG_REVOKE_MESSAGE_EX_FLAG_BLOCK_SENDER : 0;

            RecipientResult[] results = new RecipientResult[recipients.Length];

            for (int i = 0; i < results.Length; ++i)
            {
                results[i] = new RecipientResult();
                results[i].userId = recipients[i].UserId;
            }

            RevokeEx(user, 0, flags, type, null, results);
        }

        protected void RevokeEx(PNUser sender,
                                ulong senderContext,
                                uint revokeFlags,
                                byte msgType,
                                MsgPropertyWrapped property,
                                RecipientResult []recipients)
        {
            QMsgRevokeMsgEx req = new QMsgRevokeMsgEx(  sender,
                                                        senderContext,
                                                        revokeFlags,
                                                        msgType,
                                                        property,
                                                        recipients);

            PNMsg rep;
            req.TransactFD(out rep);
            ValueCheck.Test("Reply Data Type", typeof(QRevokeMsgReplyMsgData).Name, rep.Data.GetType().Name);
            QRevokeMsgReplyMsgData replyData = (QRevokeMsgReplyMsgData)rep.Data;

            if(HResult.Failed(replyData.hr))
            {
                throw new HResultException(replyData.hr, "Revoke message failed");
            }
        }

        //------------------------------------------------------------------------------
        // Delete message helpers
        //------------------------------------------------------------------------------
        protected void DeleteMessage(PNUser u, UserMessage msg)
        {
            DeleteMessage(u, msg, false, false);
        }

        protected void DeleteMessage(PNUser u, UserMessage msg, bool block)
        {
            DeleteMessage(u, msg, block, false);
        }

        protected void DeleteMessage(PNUser u, UserMessage msg, bool block, bool useDatacenterPort)
        {
            msg.Delete(u, block, useDatacenterPort);
            MsgTestUtils.WaitForDeletedMessage(u, msg.ID);
        }

        protected void WaitForDeletedMessage(PNUser sender, RecipientResult[] recipients)
        {
            // Add a condition that each recipient should receive the deleted
            // message qval before we return a success
            if(null != recipients && recipients.Length > 0)
            {
                PNConditionalWaitState waitState = new PNConditionalWaitState();
                foreach(RecipientResult recipient in recipients)
                {
                    PNUser recipientUser = PNUser.Find(recipient.userId);

                    // Ignore missing or offline users or message IDs that are invalid
                    if(null != recipientUser && recipientUser.LoggedOn && (0 == (recipient.msgId & 0xff000000)))
                    {
                        waitState.AddRequiredDeletedMessageId(
                                recipient.msgId,
                                sender,
                                recipientUser);
                    }
                }

                waitState.WaitOnQValConditions();
            }
        }


        //------------------------------------------------------------------------------
        // Custom validation routines
        //------------------------------------------------------------------------------
        protected void ValidateMessages(PNUser []users, uint []msgIds)
        {
            uint count = 0;
            foreach(PNUser u in users)
            {
                UserMsgFolder folder = new UserMsgFolder(u);
                uint msgCount = folder.Load();
                if(msgCount == 0)
                {
                    throw new UnexpectedTestResultException(String.Format("User {0:x} did not have any messages", u.UserId));
                }

                if(null == folder[msgIds[count]])
                {
                    throw new UnexpectedTestResultException(String.Format("User {0:x} did not have message ID: {1:x}",
                            u.UserId, msgIds[count]));
                }

                count++;
            }
        }

        protected void ValidateOfflineMessageReceived(PNUser user, PNUser sender, UserMessage msg)
        {
            uint hr = MsgTestUtils.Fc.LogonUser(user);

            ValueCheck.TestHR("Logon HRESULT with pending message for user: " + user.UserId.ToString("x"), HResult.XONLINE_S_LOGON_USER_MESSAGE_ENUMERATION_NEEDED, hr);
            UserMessage firstMsg = GetFirstMessageFrom(user, sender);
            if(msg.ID != Message.MANY_RECIPIENTS)
            {
                ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.ID", msg.ID, firstMsg.ID);
            }
            ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.Type", msg.Type, firstMsg.Type);
            ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.Context", msg.Context, firstMsg.Context);
            ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.TitleId", msg.TitleID, firstMsg.TitleID);
            ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.Flags", msg.Flags, firstMsg.Flags);
            ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.SenderName", msg.SenderName, firstMsg.SenderName);
            ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.SentTime", msg.SentTime, firstMsg.SentTime, new TimeSpan(0, 1, 0));

            if(msg.ExpireMinutes > 0)
            {
                ValueCheck.Test("User[" + user.UserId.ToString("x") + "] UserMessage.ExpireMinutes", msg.ExpireMinutes, firstMsg.ExpireMinutes);
            }
            else
            {
                ValueCheck.TestNonZero("User[" + user.UserId.ToString("x") + "] UserMessage.ExpireMinutes", firstMsg.ExpireMinutes);
            }
        }

        //------------------------------------------------------------------------------
        // Message query helpers
        //------------------------------------------------------------------------------
        public UserMessage GetFirstMessageFrom(PNUser user, PNUser sender)
        {
            UserMsgFolder folder = new UserMsgFolder(user);
            folder.LoadEx();
            UserMessage []msgs = folder.FindBySender(0, sender.UserId);
            ValueCheck.TestNonZero("Messages from sender: " + sender.UserId.ToString("x"), msgs.Length);
            return msgs[0];
        }

        public void WaitAndValidateMessage(PNUser user, UserMessage msg)
        {
            QValPacket qval = user.WaitForNewMessageType(msg.Type);
            user.HandleQValPacket(qval);

            UserMsgFolder inbox = new UserMsgFolder(user);
            inbox.LoadEx();

            inbox.ValidateContainsMessage(msg.ID, msg);
        }

        public void ValidateContains(UserTitle[] titles, uint titleId)
        {
            bool found = false;
            StringBuilder strTitleList = new StringBuilder();

            foreach(UserTitle title in titles)
            {
                strTitleList.Append(title.TitleID.ToString("x"));
                strTitleList.Append(" ");
                if(titleId == title.TitleID)
                {
                    found = true;
                    break;
                }
            }
            ValueCheck.IsTrue(found, "Title: '" + titleId.ToString("x") + "' in list: '" + strTitleList.ToString() + "'");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\example\StdAfx.h ===
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__1D8E8DC2_D581_49DC_B7D8_5F1C81FDA6BA__INCLUDED_)
#define AFX_STDAFX_H__1D8E8DC2_D581_49DC_B7D8_5F1C81FDA6BA__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <atlbase.h>

// TODO: reference additional headers your program requires here
#include "xeventids.h"
#include "xmgmt.h"

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__1D8E8DC2_D581_49DC_B7D8_5F1C81FDA6BA__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\dll\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\example\xomexample.cpp ===
#include "stdafx.h"

//
// Define your debugging areas using XomDefineArea. If you want to use the same
// area in other files use the macro XomImportArea.
//

XomDefineArea(log);
XomDefineArea(Debug);
XomDefineArea(Test);

//
// Declare your setting objects globally
//

CXomSettingEx g_DogName (
    CXomOption(CXomSetting::O_NAME, "Dog.Name") +
    CXomOption(CXomSetting::O_DEFAULT, "Otto") );

CXomSettingEx g_DogAge (
    CXomOption(CXomSetting::O_NAME, "Dog.Age") +
    CXomOption(CXomSetting::O_MIN, (DWORD) 0) +
    CXomOption(CXomSetting::O_MAX, 20) );

void LoggingAndTracing();
void Settings();
void NTEvents();

#if 0
class CMyCallback : public CXomControlCallback
{
public:

    IMPLEMENT_REFCOUNT_COM;

    virtual HRESULT OnControlRequest(
        LPCSTR pszRequest,
        DWORD dwRequestId,
        CXomControlResponseInterface* pResponseInterface )
    {
        if(_strcmpi(pszRequest, "help") == 0)
        {
            pResponseInterface->WriteResponse(dwRequestId,
                (BYTE*)"Hello from xomexample\r\n", (DWORD) -1);
        }

        return S_OK;
    }
} g_MyCallback;
#endif

HRESULT Logon()
{
    HANDLE hToken;
    BOOL fRes;
    HRESULT hr = S_OK;

    fRes = LogonUserA("TEST_ACCOUNT", ".", "!Q2w#E4r%T", LOGON32_LOGON_NETWORK,
        LOGON32_PROVIDER_DEFAULT, &hToken);

/*
    fRes = LogonUserA("IWAM_DCAIAFA1", ".", "", LOGON32_LOGON_NETWORK,
        LOGON32_PROVIDER_DEFAULT, &hToken);
*/

    if(!fRes)
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }

    fRes = ImpersonateLoggedOnUser(hToken);

    if(!fRes)
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }

lDone:

    return hr;
}


int __cdecl main(int argc, char* argv[])
{
    HRESULT hr = S_OK;
    DWORD nTry;
    DWORD dwTime;

//  Logon();

#if 0   
    hr = CoInitialize(NULL);
    if (FAILED(hr))
    {
        fprintf(stderr, "CoInitialize: (0x%08x)\n", hr);
        goto lDone;
    }
#endif

    //
    // Initialize mgmt framework
    //
#if 0
    hr = g_xomcentral.Init(
        "xomexample",       // NT event source name
        "xomexample.ini"    // Configuration INI
        );
#endif

    hr = g_xomcentral.Init(
        "xomexample"        // NT event source name
        );

    if(FAILED(hr))
    {
        XomNtEvent( XEVENT_MGMT_INIT_WARNING_1, "An error occurred during initialization. hr = 0x%08x", hr );
        goto lDone;
    }

    //hr = g_xomcentral.RegisterControlCallback(&g_MyCallback);

    if(FAILED(hr))
    {
        XomNtEvent( XEVENT_MGMT_INIT_WARNING_2,
            "An error occurred during initialization. g_xomcentral.RegisterControlCallback failed. hr = 0x%08x", hr );
        goto lDone;
    }

    XomNtEvent( XEVENT_MGMT_INIT_SUCCESS, "" );

    LoggingAndTracing();
    Settings();
    NTEvents();

lDone:

    g_xomcentral.Term();

    return 0;
}


void LoggingAndTracing()
{
    //
    // NT Event log examples
    //
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_3, "Test");
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_4, "Test %d", 1);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_5, "Test %d %d", 1, 2);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_6, "Test %d %d %d", 1, 2, 3);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_7, "Test %d %d %d %d", 1, 2, 3, 4);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_8, "Test %d %d %d %d %d", 1, 2, 3, 4, 5);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_9, "Test %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_10, "Test %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_11, "Test %d %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7, 8);
    XomNtEvent(XEVENT_MGMT_INIT_WARNING_12, "Test %d %d %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7, 8, 9);

    XomLog(log, "Test");
    XomLog(log, "Test %d", 1);
    XomLog(log, "Test %d %d", 1, 2);
    XomLog(log, "Test %d %d %d", 1, 2, 3);
    XomLog(log, "Test %d %d %d %d", 1, 2, 3, 4);
    XomLog(log, "Test %d %d %d %d %d", 1, 2, 3, 4, 5);
    XomLog(log, "Test %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6);
    XomLog(log, "Test %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7);
    XomLog(log, "Test %d %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7, 8);
    XomLog(log, "Test %d %d %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7, 8, 9);

    XomTrace(Debug, L_LOW,  "Test");
    XomTrace(Debug, L_NORMAL,"Test %d", 1);
    XomTrace(Debug, L_HIGH,"Test %d %d", 1, 2);
    XomTrace(Debug, L_ERROR,"Test %d %d %d", 1, 2, 3);
    XomTrace(Debug, L_LOW,"Test %d %d %d %d", 1, 2, 3, 4);
    XomTrace(Debug, L_NORMAL,"Test %d %d %d %d %d", 1, 2, 3, 4, 5);
    XomTrace(Debug, L_HIGH,"Test %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6);
    XomTrace(Debug, L_ERROR,"Test %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7);
    XomTrace(Debug, L_LOW,"Test %d %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7, 8);
    XomTrace(Debug, L_NORMAL,"Test %d %d %d %d %d %d %d %d %d", 1, 2, 3, 4, 5, 6, 7, 8, 9);

    XomCtxTraceE0( Test, L_NORMAL, 123, "TestE0" );
    XomCtxTraceEM0( Test, L_NORMAL, 123, 1000, "TestEM0-1" );
    XomCtxTraceEM0( Test, L_NORMAL, 123, 0x1000, "TestEM0-2" );
    XomCtxTraceM0( Test, L_NORMAL, 1000, "TestM0-1" );
    XomCtxTraceM0( Test, L_NORMAL, 0x1000, "TestM0-2" );
    XomCtxTraceM1U0( Test, L_NORMAL, 1000, 1, "TestM1U0-1" );
    XomCtxTraceM1U0( Test, L_NORMAL, 0x1000, 11, "TestM1U0-2" );
    XomCtxTraceM2U0( Test, L_NORMAL, 1000, 1, 2, "TestM2U0-1" );
    XomCtxTraceM2U0( Test, L_NORMAL, 0x1000, 1, 2, "TestM2U0-2" );
    XomCtxTraceM2U0( Test, L_NORMAL, 0x1000, 1, 22, "TestM2U0-3" );
    XomCtxTraceM2U0( Test, L_NORMAL, 0x1000, 11, 22, "TestM2U0-4" );
    XomCtxTraceMI0( Test, L_NORMAL, 1000, 0xabcd6789, "TestMI0-1" );
    XomCtxTraceMI0( Test, L_NORMAL, 0x1000, 1, "TestMI0-2" );
    XomCtxTraceMI0( Test, L_NORMAL, 0x1000, 0xabcd6789, "TestMI0-3" );
    XomCtxTraceMI0( Test, L_NORMAL, 1000, 0xabcd6789, "TestMI0-4" );
}

void Settings()
{
    //
    // The easiest way to get your settings is by declaring global CXomSetting
    // objects and accessing them later.
    //

    XomNtEvent( XEVENT_MGMT_INIT_SUCCESS_1, "The dog's name is %s", g_DogName.GetStr() );

    //
    // You can also get your settings dynamically
    //

    CXomSetting* pSetting;

    if(SUCCEEDED(g_xomcentral.GetSetting("Dog.Owner", &pSetting)))
    {
        XomLog(log, "The dog's owner is %s", pSetting->GetStr());
    }
    else
    {
        XomNtEvent( XEVENT_MGMT_INIT_WARNING_13, "Dog's owner not specified" );
    }

    //
    // Or you can enumerate all settings that match a substring
    //
#if 0
    XomSettingSearch search;
    ZeroMemory(&search, sizeof(search));

    while(g_xomcentral.QuerySettings("dog.", &pSetting, &search))
    {
        XomTrace(Debug, L_NORMAL, "Setting name is %s and the value is %s", pSetting->GetName(), pSetting->GetStr());
    }
#endif
}


void NTEvents()
{
    for( int i = 0; i < 500; i++ )
    {
        XomNtEvent( XEVENT_MGMT_INIT_FAILURE_10, "Event test %d", i );

        Sleep( 20 );
    }

    for( int i = 0; i < 500; i++ )
    {
        IN_ADDR ina = { 0 };

        ina.S_un.S_addr = 1 + ( i % 5 );

        XomNtIPEvent2( XEVENT_MGMT_INIT_WARNING_14, 0, &ina, "Event test %d: IP = %s", i, inet_ntoa( ina ) );

        Sleep( 20 );
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\rtrace\precomp.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	xnqparse.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\dll\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\rtrace\main.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    main.cpp

Abstract:

--*/

#include "precomp.h"

//
// We like colors in our messages
//

static const WORD c_CollorAttr[] = {
	/* LOW */     FOREGROUND_GREEN | FOREGROUND_RED,
	/* NORMAL */  FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED,
	/* HIGH */    FOREGROUND_GREEN | FOREGROUND_RED  | FOREGROUND_INTENSITY,
	/* ERROR */   FOREGROUND_RED   | FOREGROUND_INTENSITY };

SOCKET g_socket = INVALID_SOCKET;

//
//
//

void WriteMessage(
	char* pBuffer,
	DWORD cb );

//
//
//

HRESULT Init()
{
	WORD wVersionRequested;
    WSADATA wsaData;
	sockaddr_in sin;
    int iErr;
	
	HRESULT hr = S_OK;

    wVersionRequested = MAKEWORD(2, 2);

    iErr = WSAStartup(wVersionRequested, &wsaData);

    if(0 != iErr)
    {
        printf("WSAStartup failed err=%d\n", iErr);
        hr = E_FAIL;
        goto lDone;
    }

    if( LOBYTE(wsaData.wVersion) != 2 ||
        HIBYTE(wsaData.wVersion) != 2 )
    {
        printf("WSAStartup returned bad version %d,%d\n", LOBYTE(wsaData.wVersion), HIBYTE(wsaData.wVersion));
        hr = E_FAIL;
        goto lDone;
    }

    g_socket = socket(AF_INET, SOCK_DGRAM, 0);

    if(INVALID_SOCKET == g_socket)
    {
        printf("failed to create socket failed\n");
        hr = E_FAIL;
        goto lDone;
    }

	ZeroMemory(&sin, sizeof(sin));
	sin.sin_family = AF_INET;
	sin.sin_port = htons(4101);

	iErr = bind(g_socket, (sockaddr*) &sin, sizeof(sin));

	if(SOCKET_ERROR == iErr)
	{
		hr = HRESULT_FROM_WIN32(WSAGetLastError());
		goto lDone;
	}
	
lDone:

	return hr;
}

void Term()
{
	if(INVALID_SOCKET == g_socket)
	{
		closesocket(g_socket);
		g_socket = NULL;
	}
}

void __cdecl main()
{
	HRESULT hr;
	char rgbBuffer[1024];
	int cb;

	hr = Init();

	if(FAILED(hr))
	{
		goto lDone;
	}
	
	for(;;)
	{
		cb = recv(g_socket, rgbBuffer, sizeof(rgbBuffer)-1, 0);

		if(SOCKET_ERROR == cb)
		{
			printf("recv failed, err = %d\n", WSAGetLastError());
			break;
		}

		rgbBuffer[cb] = '\0';
	
		WriteMessage(rgbBuffer, cb);
	}

lDone:
	
	Term();

	return;
}

void WriteMessage(
	char* pBuffer,
	DWORD cb
)
{
	LPSTR pszParams;
	LPSTR pszMessage;
	CXomNameValuePairList oParams;
	DWORD dwLevel;
	DWORD dwEventId;
	HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
	HRESULT hr = S_OK;

	// Separate parameters from the message

	pszParams = pBuffer;

	pszMessage = strchr(pBuffer, ':');

	if(!pszMessage)
	{
		hr = E_INVALIDARG;
		goto lDone;
	}

	*pszMessage = '\0';
	pszMessage++;

	// Parse the parameters

	hr = oParams.Parse(pszParams);

	if(FAILED(hr))
	{
		goto lDone;
	}

	if(oParams.GetCount() < 7)
	{
		hr = E_INVALIDARG;
		goto lDone;
	}

	// Set the console color

	dwLevel = atoi(oParams.GetName(5));

	if(dwLevel < ARRAY_ELEMENTS(c_CollorAttr))
	{
		SetConsoleTextAttribute(hStdOut, c_CollorAttr[dwLevel]);
	}

	// Display message parameters

	printf("P:%s A:%s", oParams.GetName(0), oParams.GetName(4));

	dwEventId = atoi(oParams.GetName(6));

	if(dwEventId != 0)
	{
		printf(" E:%d", dwEventId);
	}

	printf(" - ");

	// Display the message itself

	printf("%s\n", pszMessage);

lDone:

	if(FAILED(hr))
	{
		printf("Bad message\n");
	}

	return;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\rtrace\precomp.h ===
#ifndef _PRECOMP_H_
#define _PRECOMP_H_

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

#define INCL_WINSOCK_API_TYPEDEFS 1
#include <winsock2.h>
#include <wsockntp.h>
#include <Iphlpapi.h>

#include <wmsstd.h>
#include <xalloc.h>
#include <xalloc.h>
#include <ntservice.h>
#include <servsock.h>
#include <servpipe.h>
#include <vptrarr.h>
#include <xomcontrolprot.h>
#include <xlocks.h>
#include <tcpcnt.h>
#include <xomcmmon.h>

#ifndef ASSERT
#define ASSERT XONASSERT
#endif

#ifndef ARRAY_ELEMENTS
#define ARRAY_ELEMENTS(x) (sizeof(x)/sizeof(x[0]))
#endif

#endif // #ifndef _XCSSERVER_PRECOMP_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\StressUser.cs ===
// StressUser.cs
//
//    Wrapper for stress related state of a PNUser
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Xml;
using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.Utilities;
using xonline.common.diagnostics;
using xonline.common.service;

namespace MessagingTest
{
    public enum StressUserInboxStatus
    {
        HasInvite,
        NoInvite,
        DontCare
    }

    public class StressUser : PNUser
    {
        private int fLocked = 0;
        public UserMsgFolder MsgFolder;

        public bool HasInvite
        {
            get
            {
                //MsgFolder.Load2();

                foreach (UserMessage msg in MsgFolder.Inbox)
                {
                    if (msg.Type == XonPresNoti.MSG_TYPE_GAME_INVITE)
                        return true;
                }

                return false;

                //IDictionaryEnumerator inviteEnum = this.InviteEnumerator;
                //if (inviteEnum.MoveNext())
                //    return true;
                //else
                //    return false;
            }
        }

        ////////////////////////////////////////////////
        // Ctor
        //
        public StressUser( PuidName puidName ) : base(puidName.GamerTag, puidName.Puid, new PNXbox(true))
        {
            AliveMsg();
            MsgFolder = new UserMsgFolder(this);
        }

        /// <summary>
        /// Sends the alive message
        /// </summary>
        public void AliveMsg()
        {
            if (!this.Xbox.ConnectedToFakeSG)
                this.Xbox.ConnectToFakeSG();

            ServerTestFramework.LiveService.FakeSG.GlobalFakeSG.FakeSG.AddUser(this.Xbox.XboxId, this.UserId, this.UserFlags);

            PNMsg replyMsg;
            PMsgAlive2 aliveMsg = new PMsgAlive2(this);
            aliveMsg.TransactFD(out replyMsg);

            PAliveReplyMsgData reply = (PAliveReplyMsgData)replyMsg.Data;
            if (reply.HR != HResult.S_OK && reply.HR != HResult.XONLINE_S_LOGON_USER_HAS_MESSAGE)
                Global.RO.Error("Alive message return HR:" + reply.HR);

            //Default state after alive.
            this.State = XonPresNoti.P_STATE_MASK_ONLINE;
            //CAREFUL: This will also trigger state2.
            this.SetTitleData();
        }

        public void Release()
        {
            Interlocked.Exchange(ref fLocked, 0);
        }

        public bool Acquire()
        {
            return Interlocked.Exchange(ref fLocked, 1) == 0;
        }
    }

    ////////////////////////////////////////////////
    // Stress User List
    //    Manages the list of Stress Users
    //
    public class StressUserList
    {
        public static ulong basePuid = 0;
        public static int puidCount;

        // only used for reference not for making requests
        public static List<StressUser> UserList = null;

        // used for making requests
        private static Queue UsersWithInvites = Queue.Synchronized(new Queue());
        private static Queue UsersWithoutInvites = Queue.Synchronized(new Queue());

        public static void Initialize()
        {
            BulkUserSet userSet = STFLiveGlobal.GetUserSet("xenon");
            puidCount = (int)userSet.Count;
            basePuid = userSet.Base;
            CPUIDList puidList = userSet.GetPuidList();
            UserList = new List<StressUser>(puidList.GetSize());

            Global.RO.Info("Logging in users...");

            for (int i = 0; i < puidList.GetSize(); ++i)
            {
                StressUser user = null;

                try
                {
                    user = new StressUser(puidList[i]);
                }
                catch (Exception ex)
                {
                    Global.RO.Error("Exception creating StressUser: {0}", ex.Message);
                    continue;
                }

                UserList.Add(user);

                if (user.HasInvite)
                    UsersWithInvites.Enqueue(user);
                else
                    UsersWithoutInvites.Enqueue(user);

                if (i % 100 == 0)
                    Global.RO.Info("" + i + " of " + puidList.GetSize() + " users logged in.");
            }

            Global.RO.Info("Logged in all " + puidList.GetSize() + " users.");
        }

        public static void AddUserToQueue(StressUser user)
        {
            if (!user.LoggedOn)
            {
                Global.RO.Error("Use was offline somehow? Sending alive again...");
                user.AliveMsg();
            }

            Queue q = UsersWithoutInvites;
            try
            {
                q = user.HasInvite ? UsersWithInvites : UsersWithoutInvites;
            }
            catch (Exception /*e*/)
            {
                Global.RO.Info("user.HasInvite failed, just adding user to UsersWithoutInvites so they aren't leaked...");
            }

            lock (q.SyncRoot)
            {
                q.Enqueue(user);
            }
        }

        private static StressUser GetUserFromQueue(Queue q, bool acquireLock)
        {
            int iUser = 0;
            StressUser user = null;

            lock (q.SyncRoot)
            {
                int iUserCount = q.Count;
                while (iUser < iUserCount)
                {
                    user = (StressUser)q.Dequeue();

                    if (!acquireLock || user.Acquire())
                        break;

                    // Caller is responsible for enqueue in success case
                    iUser++;
                    q.Enqueue(user);
                }

                if (iUser == iUserCount)
                {
                    // all locked
                    user = null;
                }
            }

            return user;
        }

        public static StressUser GetUser(StressUserInboxStatus inboxStatus)
        {
            return GetUser(inboxStatus, true);
        }

        public static StressUser GetUser(StressUserInboxStatus inboxStatus, bool acquireLock)
        {
            StressUser user = null;
            Queue q = null;

            switch (inboxStatus)
            {
                case StressUserInboxStatus.DontCare:
                    bool randBool = RandomEx.GlobalRandGen.NextBool();
                    q = RandomEx.GlobalRandGen.NextBool() ? UsersWithInvites : UsersWithoutInvites;
                    break;
                case StressUserInboxStatus.HasInvite:
                    q = UsersWithInvites;
                    break;
                case StressUserInboxStatus.NoInvite:
                    q = UsersWithoutInvites;
                    break;
                default:
                    throw new ArgumentException("Unknown StressUserInboxStatus value " + inboxStatus.ToString());
            }

            user = GetUserFromQueue(q, acquireLock);

            // If there wasn't a user available and the caller doesn't care which queue they
            // come from, try the other one
            if (user == null && inboxStatus == StressUserInboxStatus.DontCare)
            {
                user = GetUserFromQueue(q == UsersWithInvites ? UsersWithoutInvites : UsersWithInvites, acquireLock);
            }

            return user;
        }

        public static StressUser[] GetUser(ushort numUsers, StressUserInboxStatus inboxStatus)
        {
            return GetUser(numUsers, inboxStatus, true);
        }

        public static StressUser[] GetUser(ushort numUsers, StressUserInboxStatus inboxStatus, bool acquireLock)
        {
            int iUser = 0;
            StressUser[] users = new StressUser[numUsers];

            while (iUser < numUsers)
            {
                StressUser user = GetUser(inboxStatus, acquireLock);
                if (user != null)
                {
                    users[iUser] = user;
                    iUser++;
                }
                else
                {
                    break;
                }
            }

            if (iUser < numUsers)
            {
                for(int i = 0; i < iUser; ++i)
                {
                    users[i].Release();
                    AddUserToQueue(users[i]);
                }

                users = null;
            }

            return users;
        }

        public static int UserQueueCountWithInvites
        {
            get
            {
                lock (UsersWithInvites.SyncRoot)
                {
                    return UsersWithInvites.Count;
                }
            }
        }

        public static int UserQueueCountWithoutInvites
        {
            get
            {
                lock (UsersWithoutInvites.SyncRoot)
                {
                    return UsersWithoutInvites.Count;
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\ezlog\EZLog.cs ===
using System;
using System.Drawing;
using System.Collections;
using System.ComponentModel;
using System.Windows.Forms;
using System.Data;
using System.Net;
using System.Net.Sockets;
using System.Text;
using System.Diagnostics;
using System.IO;

namespace xonline.server.mgmt.ezlog 
{
	/// <summary>
	/// Summary description for EZLogForm.
	/// </summary>
	public class EZLogForm : System.Windows.Forms.Form
	{
		private TcpClient tcpClient = null;
		private NetworkStream networkStream = null;
		private Queue linequeue = new Queue();
		
		private System.Windows.Forms.Button button1;
		private System.Windows.Forms.ComboBox ServerComboBox;
		private System.Windows.Forms.Label label1;
		private System.Windows.Forms.Label label3;
		private System.Windows.Forms.Label TargetNameLabel;
		private System.Windows.Forms.Label label4;
		private System.Windows.Forms.GroupBox groupBox1;
		private System.Windows.Forms.RadioButton LogLevelRadio0;
		private System.Windows.Forms.RadioButton LogLevelRadio1;
		private System.Windows.Forms.RadioButton LogLevelRadio2;
		private System.Windows.Forms.RadioButton LogLevelRadio3;
		private System.Windows.Forms.RadioButton LogLevelRadio4;
		private System.Windows.Forms.ComboBox TargetComboBox;
		private System.Windows.Forms.ListBox ServicesListBox;
		private System.Windows.Forms.Label label2;
		private System.Windows.Forms.Panel panel2;
		private System.Windows.Forms.Panel panel3;
		private System.Windows.Forms.Label label5;
		private System.Windows.Forms.CheckedListBox AreasListBox;
		private System.Windows.Forms.Panel panel1;
		/// <summary>
		/// Required designer variable.
		/// </summary>
		private System.ComponentModel.Container components = null;

		public EZLogForm()
		{
			//
			// Required for Windows Form Designer support
			//
			InitializeComponent();

			//
			// TODO: Add any constructor code after InitializeComponent call
			//

			TargetComboBox.Text = GetLocalHostName();
			ModeDisconnected();
			AcceptButton = button1;

			try
			{
				FileStream fs = File.OpenRead("freq.ini");
				StreamReader sr = new StreamReader(fs);

				string s = sr.ReadLine();
				Debug.Assert(s == "begin servers", "bad ini file");
				while (s != "end servers")
				{
					s = sr.ReadLine();
					if (s != "end servers")
						ServerComboBox.Items.Add(s);
				}

				s = sr.ReadLine();
				Debug.Assert(s == "begin targets", "bad ini file");
				while (s != "end targets")
				{
					s = sr.ReadLine();
					if (s != "end targets")
						TargetComboBox.Items.Add(s);
				}

				sr.Close();
				fs.Close();
			}
			catch(Exception)
			{
			}
		}

		/// <summary>
		/// Clean up any resources being used.
		/// </summary>
		protected override void Dispose( bool disposing )
		{
			if( disposing )
			{
				Disconnect();

				if (tcpClient != null)
				{
					tcpClient.Close();
				}

				FileStream fs = File.Create("freq.ini");
				StreamWriter sw = new StreamWriter(fs);

				sw.WriteLine("begin servers");

				for (int i = 0; i < ServerComboBox.Items.Count; i++)
				{
					sw.WriteLine(ServerComboBox.Items[i]);
				}

				sw.WriteLine("end servers");
				sw.WriteLine("begin targets");

				for (int i = 0; i < TargetComboBox.Items.Count; i++)
				{
					sw.WriteLine(TargetComboBox.Items[i]);
				}

				sw.WriteLine("end targets");

				sw.Close();
				fs.Close();

				if (components != null) 
				{
					components.Dispose();
				}
			}
			base.Dispose( disposing );
		}

		#region Windows Form Designer generated code
		/// <summary>
		/// Required method for Designer support - do not modify
		/// the contents of this method with the code editor.
		/// </summary>
		private void InitializeComponent()
		{
			this.ServerComboBox = new System.Windows.Forms.ComboBox();
			this.button1 = new System.Windows.Forms.Button();
			this.label1 = new System.Windows.Forms.Label();
			this.label3 = new System.Windows.Forms.Label();
			this.TargetNameLabel = new System.Windows.Forms.Label();
			this.label4 = new System.Windows.Forms.Label();
			this.groupBox1 = new System.Windows.Forms.GroupBox();
			this.LogLevelRadio4 = new System.Windows.Forms.RadioButton();
			this.LogLevelRadio3 = new System.Windows.Forms.RadioButton();
			this.LogLevelRadio2 = new System.Windows.Forms.RadioButton();
			this.LogLevelRadio1 = new System.Windows.Forms.RadioButton();
			this.LogLevelRadio0 = new System.Windows.Forms.RadioButton();
			this.TargetComboBox = new System.Windows.Forms.ComboBox();
			this.ServicesListBox = new System.Windows.Forms.ListBox();
			this.label2 = new System.Windows.Forms.Label();
			this.panel2 = new System.Windows.Forms.Panel();
			this.AreasListBox = new System.Windows.Forms.CheckedListBox();
			this.label5 = new System.Windows.Forms.Label();
			this.panel1 = new System.Windows.Forms.Panel();
			this.panel3 = new System.Windows.Forms.Panel();
			this.groupBox1.SuspendLayout();
			this.panel2.SuspendLayout();
			this.panel1.SuspendLayout();
			this.panel3.SuspendLayout();
			this.SuspendLayout();
			// 
			// ServerComboBox
			// 
			this.ServerComboBox.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right);
			this.ServerComboBox.Location = new System.Drawing.Point(8, 24);
			this.ServerComboBox.Name = "ServerComboBox";
			this.ServerComboBox.Size = new System.Drawing.Size(296, 21);
			this.ServerComboBox.TabIndex = 0;
			this.ServerComboBox.Text = "[IP or Hostname]";
			// 
			// button1
			// 
			this.button1.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);
			this.button1.Location = new System.Drawing.Point(224, 56);
			this.button1.Name = "button1";
			this.button1.Size = new System.Drawing.Size(80, 24);
			this.button1.TabIndex = 2;
			this.button1.Text = "Connect";
			this.button1.Click += new System.EventHandler(this.button1_Click);
			// 
			// label1
			// 
			this.label1.Location = new System.Drawing.Point(8, 8);
			this.label1.Name = "label1";
			this.label1.Size = new System.Drawing.Size(72, 16);
			this.label1.TabIndex = 3;
			this.label1.Text = "Connect to:";
			// 
			// label3
			// 
			this.label3.Location = new System.Drawing.Point(8, 56);
			this.label3.Name = "label3";
			this.label3.Size = new System.Drawing.Size(40, 16);
			this.label3.TabIndex = 6;
			this.label3.Text = "Target:";
			// 
			// TargetNameLabel
			// 
			this.TargetNameLabel.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right);
			this.TargetNameLabel.Location = new System.Drawing.Point(120, 80);
			this.TargetNameLabel.Name = "TargetNameLabel";
			this.TargetNameLabel.Size = new System.Drawing.Size(184, 16);
			this.TargetNameLabel.TabIndex = 8;
			// 
			// label4
			// 
			this.label4.Location = new System.Drawing.Point(48, 80);
			this.label4.Name = "label4";
			this.label4.Size = new System.Drawing.Size(72, 16);
			this.label4.TabIndex = 7;
			this.label4.Text = "Target name:";
			// 
			// groupBox1
			// 
			this.groupBox1.Anchor = (System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right);
			this.groupBox1.Controls.AddRange(new System.Windows.Forms.Control[] {
																					this.LogLevelRadio4,
																					this.LogLevelRadio3,
																					this.LogLevelRadio2,
																					this.LogLevelRadio1,
																					this.LogLevelRadio0});
			this.groupBox1.Location = new System.Drawing.Point(8, 24);
			this.groupBox1.Name = "groupBox1";
			this.groupBox1.Size = new System.Drawing.Size(104, 112);
			this.groupBox1.TabIndex = 5;
			this.groupBox1.TabStop = false;
			this.groupBox1.Text = "Logging Level";
			// 
			// LogLevelRadio4
			// 
			this.LogLevelRadio4.Enabled = false;
			this.LogLevelRadio4.Location = new System.Drawing.Point(16, 88);
			this.LogLevelRadio4.Name = "LogLevelRadio4";
			this.LogLevelRadio4.Size = new System.Drawing.Size(80, 16);
			this.LogLevelRadio4.TabIndex = 4;
			this.LogLevelRadio4.Text = "Muted (4)";
			this.LogLevelRadio4.CheckedChanged += new System.EventHandler(this.LogLevelRadio_CheckedChanged);
			// 
			// LogLevelRadio3
			// 
			this.LogLevelRadio3.Enabled = false;
			this.LogLevelRadio3.Location = new System.Drawing.Point(16, 72);
			this.LogLevelRadio3.Name = "LogLevelRadio3";
			this.LogLevelRadio3.Size = new System.Drawing.Size(80, 16);
			this.LogLevelRadio3.TabIndex = 3;
			this.LogLevelRadio3.Text = "Error (3)";
			this.LogLevelRadio3.CheckedChanged += new System.EventHandler(this.LogLevelRadio_CheckedChanged);
			// 
			// LogLevelRadio2
			// 
			this.LogLevelRadio2.Enabled = false;
			this.LogLevelRadio2.Location = new System.Drawing.Point(16, 56);
			this.LogLevelRadio2.Name = "LogLevelRadio2";
			this.LogLevelRadio2.Size = new System.Drawing.Size(80, 16);
			this.LogLevelRadio2.TabIndex = 2;
			this.LogLevelRadio2.Text = "High (2)";
			this.LogLevelRadio2.CheckedChanged += new System.EventHandler(this.LogLevelRadio_CheckedChanged);
			// 
			// LogLevelRadio1
			// 
			this.LogLevelRadio1.Enabled = false;
			this.LogLevelRadio1.Location = new System.Drawing.Point(16, 40);
			this.LogLevelRadio1.Name = "LogLevelRadio1";
			this.LogLevelRadio1.Size = new System.Drawing.Size(80, 16);
			this.LogLevelRadio1.TabIndex = 1;
			this.LogLevelRadio1.Text = "Normal (1)";
			this.LogLevelRadio1.CheckedChanged += new System.EventHandler(this.LogLevelRadio_CheckedChanged);
			// 
			// LogLevelRadio0
			// 
			this.LogLevelRadio0.Enabled = false;
			this.LogLevelRadio0.Location = new System.Drawing.Point(16, 24);
			this.LogLevelRadio0.Name = "LogLevelRadio0";
			this.LogLevelRadio0.Size = new System.Drawing.Size(80, 16);
			this.LogLevelRadio0.TabIndex = 0;
			this.LogLevelRadio0.Text = "Low (0)";
			this.LogLevelRadio0.CheckedChanged += new System.EventHandler(this.LogLevelRadio_CheckedChanged);
			// 
			// TargetComboBox
			// 
			this.TargetComboBox.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right);
			this.TargetComboBox.Location = new System.Drawing.Point(48, 56);
			this.TargetComboBox.Name = "TargetComboBox";
			this.TargetComboBox.Size = new System.Drawing.Size(168, 21);
			this.TargetComboBox.TabIndex = 12;
			// 
			// ServicesListBox
			// 
			this.ServicesListBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.ServicesListBox.Enabled = false;
			this.ServicesListBox.Location = new System.Drawing.Point(0, 16);
			this.ServicesListBox.Name = "ServicesListBox";
			this.ServicesListBox.Size = new System.Drawing.Size(296, 108);
			this.ServicesListBox.TabIndex = 3;
			this.ServicesListBox.SelectedIndexChanged += new System.EventHandler(this.ServicesListBox_SelectedIndexChanged);
			// 
			// label2
			// 
			this.label2.Dock = System.Windows.Forms.DockStyle.Top;
			this.label2.Name = "label2";
			this.label2.Size = new System.Drawing.Size(296, 16);
			this.label2.TabIndex = 4;
			this.label2.Text = "Services:";
			// 
			// panel2
			// 
			this.panel2.Anchor = (((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Bottom) 
				| System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right);
			this.panel2.Controls.AddRange(new System.Windows.Forms.Control[] {
																				 this.AreasListBox,
																				 this.label5,
																				 this.panel1});
			this.panel2.Location = new System.Drawing.Point(8, 240);
			this.panel2.Name = "panel2";
			this.panel2.Size = new System.Drawing.Size(296, 152);
			this.panel2.TabIndex = 15;
			// 
			// AreasListBox
			// 
			this.AreasListBox.Dock = System.Windows.Forms.DockStyle.Fill;
			this.AreasListBox.Location = new System.Drawing.Point(0, 16);
			this.AreasListBox.Name = "AreasListBox";
			this.AreasListBox.Size = new System.Drawing.Size(184, 124);
			this.AreasListBox.TabIndex = 4;
			this.AreasListBox.SelectedIndexChanged += new System.EventHandler(this.AreasListBox_SelectedIndexChanged);
			this.AreasListBox.ItemCheck += new System.Windows.Forms.ItemCheckEventHandler(this.AreasListBox_ItemCheck);
			// 
			// label5
			// 
			this.label5.Dock = System.Windows.Forms.DockStyle.Top;
			this.label5.Name = "label5";
			this.label5.Size = new System.Drawing.Size(184, 16);
			this.label5.TabIndex = 11;
			this.label5.Text = "Areas:";
			// 
			// panel1
			// 
			this.panel1.Controls.AddRange(new System.Windows.Forms.Control[] {
																				 this.groupBox1});
			this.panel1.Dock = System.Windows.Forms.DockStyle.Right;
			this.panel1.Location = new System.Drawing.Point(184, 0);
			this.panel1.Name = "panel1";
			this.panel1.Size = new System.Drawing.Size(112, 152);
			this.panel1.TabIndex = 18;
			// 
			// panel3
			// 
			this.panel3.Anchor = ((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Left) 
				| System.Windows.Forms.AnchorStyles.Right);
			this.panel3.Controls.AddRange(new System.Windows.Forms.Control[] {
																				 this.ServicesListBox,
																				 this.label2});
			this.panel3.Location = new System.Drawing.Point(8, 104);
			this.panel3.Name = "panel3";
			this.panel3.Size = new System.Drawing.Size(296, 136);
			this.panel3.TabIndex = 17;
			// 
			// EZLogForm
			// 
			this.AutoScaleBaseSize = new System.Drawing.Size(5, 13);
			this.ClientSize = new System.Drawing.Size(312, 398);
			this.Controls.AddRange(new System.Windows.Forms.Control[] {
																		  this.TargetComboBox,
																		  this.TargetNameLabel,
																		  this.label4,
																		  this.label3,
																		  this.label1,
																		  this.button1,
																		  this.ServerComboBox,
																		  this.panel2,
																		  this.panel3});
			this.MinimumSize = new System.Drawing.Size(320, 432);
			this.Name = "EZLogForm";
			this.Text = "EZLog";
			this.groupBox1.ResumeLayout(false);
			this.panel2.ResumeLayout(false);
			this.panel1.ResumeLayout(false);
			this.panel3.ResumeLayout(false);
			this.ResumeLayout(false);

		}
		#endregion

		/// <summary>
		/// The main entry point for the application.
		/// </summary>
		[STAThread]
		static void Main() 
		{
			Application.Run(new EZLogForm());
		}

		private void ClientWriteLine(string s)
		{
			Debug.Assert(!ClientMoreToRead());
			Byte[] sendBytes = Encoding.ASCII.GetBytes(s + "\n");
			networkStream.Write(sendBytes, 0, sendBytes.Length);
			ClientReadResponse();
		}

		private int strlen(string s)
		{
			//This is to hack around the fact that s.Length seems to return the size of the backing array instead of the logical string length.
			char[] bytes = s.ToCharArray();
			int i = 0;
			while (i < bytes.Length && bytes[i] != 0)
			{
				i++;
			}

			return i;
		}

		private void ClientReadResponseOnce()
		{
			tcpClient.ReceiveTimeout = 1000;

			System.Threading.Thread.Sleep(500);

			byte[] bytes = new byte[tcpClient.ReceiveBufferSize];

			string s = "";
			try
			{
				while (true)
				{
					try
					{
						networkStream.Read(bytes, 0, (int)tcpClient.ReceiveBufferSize);
					}
					catch(System.IO.IOException ioe)
					{
						if (ioe.InnerException.GetType() == typeof(SocketException))
						{
							throw ioe.InnerException;
						}
						throw;
					}

					string t = Encoding.UTF8.GetString(bytes);
					s += t.Substring(0, strlen(t));
				}
			}
			catch(SocketException)
			{
			}

			while (strlen(s) > 0)
			{
				int linepos = s.IndexOf("\r\n");
				if (linepos >= 0)
				{
					string line = s.Substring(0, linepos);
					if (line != "")
					{
						linequeue.Enqueue(line);
						s = s.Substring(linepos + 2);
					}
				}
				else
				{
					Debug.Assert(false, "ClientReadResponseOnce() -- Line not empty.");					
				}
			}
		}

		private void ClientReadResponse()
		{
			string s = "";
			string linepart = "";

			tcpClient.ReceiveTimeout = 5000;

			try
			{
				bool f = true;
				while (f)
				{
					byte[] bytes = new byte[tcpClient.ReceiveBufferSize];

					try
					{
						networkStream.Read(bytes, 0, (int)tcpClient.ReceiveBufferSize);
					}
					catch(System.IO.IOException ioe)
					{
						if (ioe.InnerException.GetType() == typeof(SocketException))
						{
							throw ioe.InnerException;
						}
						throw;
					}

					s = Encoding.UTF8.GetString(bytes);
					s = s.Substring(0, strlen(s));

					s = linepart + s;
					linepart = "";

					while (strlen(s) > 0)
					{
						int linepos = s.IndexOf("\r\n");
						if (linepos >= 0)
						{
							string line = s.Substring(0, linepos);

							if (line != "." && line != "")
							{
								linequeue.Enqueue(line);
							}
							else if (line == ".")
							{
								f = false;
							}

							s = s.Substring(linepos + 2);
						}
						else
						{
							linepart = s;
							break;
						}
					}
				}

				Debug.Assert(linepart == "", "ClientReadResponse() -- Line not empty.");
			}
			catch(SocketException)
			{
				MessageBox.Show("Request timed out.", "EZLog");
				throw;
			}
		}

		private bool ClientMoreToRead()
		{
			if (linequeue.Count > 0)
			{
				return true;
			}

			return false;
		}

		private string ClientReadLine()
		{
			if (linequeue.Count == 0)
			{
				return null;
			}

			return (string)linequeue.Dequeue();
		}

		private string GetLocalHostName()
		{
			IPHostEntry iphe = Dns.Resolve(Dns.GetHostName());
			return iphe.HostName;
		}

		private void Connect()
		{
			ModeConnecting();

			try
			{
				tcpClient = new TcpClient();
				tcpClient.Connect(ServerComboBox.Text, 4100);
				networkStream = tcpClient.GetStream();
				if (!networkStream.CanWrite || !networkStream.CanRead)
				{
					throw new SocketException();
				}

				tcpClient.ReceiveTimeout = 2000;

				byte[] bytes = new byte[tcpClient.ReceiveBufferSize];
				try
				{
					networkStream.Read(bytes, 0, (int)tcpClient.ReceiveBufferSize);
				}
				catch(IOException ioe)
				{
					if (ioe.InnerException.GetType() == typeof(SocketException))
					{
						throw ioe.InnerException;
					}
					throw;
				}

				if (Encoding.UTF8.GetString(bytes).Substring(0, 5) != "Hello")
				{
					throw new SocketException();
				}

				try
				{
					RefreshLists();

					ModeConnected();
					
					if (!ServerComboBox.Items.Contains(ServerComboBox.Text))
						ServerComboBox.Items.Add(ServerComboBox.Text);
					if (!TargetComboBox.Items.Contains(TargetComboBox.Text))
						TargetComboBox.Items.Add(TargetComboBox.Text);
				}
				catch(ArgumentOutOfRangeException)
				{
					MessageBox.Show("No services found.", "EZLog");
					Disconnect();
				}
			}
			catch(SocketException)
			{
				MessageBox.Show("Can not connect to \"" + ServerComboBox.Text + "\"." + "\n", "EZLog");

				Disconnect();
			}
		}

		private void Disconnect()
		{
			try
			{
				//We don't care about the output before disconnecting
				linequeue.Clear();

				if (ServicesListBox.Items.Count > 0)
				{
					string s = ServicesListBox.SelectedItems[0].ToString();
					int i = s.IndexOf("(");
					s = s.Substring(0, i);
					ClientWriteLine("exec " + s + " deletetarget " + TargetNameLabel.Text);
				}
			}
			catch
			{
			}
			finally
			{
				//And we don't care about the output after disconnecting
				linequeue.Clear();

				ModeDisconnected();

				if (networkStream != null)
				{
					networkStream.Close();
					networkStream = null;
				}
			}
		}

		private int GetLogLevel()
		{
			for (int i = 0; i < 5; i++)
				if (LogLevelRadio(i).Checked)
					return i;
			return -1;
		}

		private RadioButton LogLevelRadio(int i)
		{
			switch(i)
			{
				case 0: return LogLevelRadio0;
				case 1: return LogLevelRadio1;
				case 2: return LogLevelRadio2;
				case 3: return LogLevelRadio3;
				case 4: return LogLevelRadio4;
			}

			Debug.Assert(false);
			return null;
		}

		private void SetLogLevel(int i)
		{
			LogLevelRadio(i).Enabled = false;
			LogLevelRadio(i).Checked = true; 
			LogLevelRadio(i).Enabled = true;
		}

		private void ChangeLogLevel(int i)
		{
			ClientWriteLine("exec " + GetSelectedServiceName() + " changearealevel " + GetSelectedAreaName() + " " + i.ToString());
			string s = ClientReadLine();
			if (!s.StartsWith("Changed filter level of area "))
			{
				Debug.Assert(false, "ChangeLogLevel -- " + s);
				return;
			}
			Debug.Assert(!ClientMoreToRead());

			AreasListBox.Enabled = false;
			CheckState cs = AreasListBox.CheckedItems.Contains(AreasListBox.SelectedItem) ? CheckState.Checked : CheckState.Unchecked;
			s = AreasListBox.SelectedItem.ToString();
			int index = AreasListBox.SelectedIndex;
			AreasListBox.Items.RemoveAt(index);
			s = s.Remove(s.Length - 1, 1);
			s = s + i.ToString();
			AreasListBox.Items.Insert(index, s);
			AreasListBox.SetItemCheckState(index, cs);
			AreasListBox.SelectedIndex = index;
			AreasListBox.Enabled = true;
		}

		private void ModeConnecting()
		{
			button1.Text = "Connecting...";
			button1.Enabled = false;

			ServerComboBox.Enabled = false;
			TargetComboBox.Enabled = false;

			ServicesListBox.Enabled = false;
			AreasListBox.Enabled = false;

			for (int i = 0; i < 5; i++)
				LogLevelRadio(i).Enabled = false;
		}

		private void ModeConnected()
		{
			button1.Text = "Disconnect";
			button1.Enabled = true;
			
			ServerComboBox.Enabled = false;
			TargetComboBox.Enabled = false;

			ServicesListBox.Enabled = true;
			AreasListBox.Enabled = true;

			for (int i = 0; i < 5; i++)
				LogLevelRadio(i).Enabled = true;
		}

		private void ModeDisconnected()
		{
			button1.Text = "Connect";
			button1.Enabled = true;
			TargetNameLabel.Text = "";

			ServerComboBox.Enabled = true;
			TargetComboBox.Enabled = true;

			ServicesListBox.Enabled = false;
			ServicesListBox.Items.Clear();
			AreasListBox.Enabled = false;
			AreasListBox.Items.Clear();

			for (int i = 0; i < 5; i++)
				LogLevelRadio(i).Enabled = false;
		}

		private string GetSelectedAreaName()
		{
			string s = AreasListBox.SelectedItem.ToString();
			return s.Substring(0, s.IndexOf("level=") - 1);
		}

		private string GetSelectedServiceName()
		{
			string s = ServicesListBox.SelectedItem.ToString();
			s = s.Substring(0, s.IndexOf("(")) + ":" + s.Substring(s.IndexOf(")") + 2, s.Length - (s.IndexOf(")") + 2));
			return s;
		}

		private void NewTarget(string servicename)
		{
			string targetname = TargetNameLabel.Text;
			ClientWriteLine("exec " + servicename + " newtarget " + targetname + " type=remote;address=" + TargetComboBox.Text);

			string result = ClientReadLine();
			if (result != ("Target " + targetname + " was created successfully."))
			{
				MessageBox.Show("Target creation failed.", "EZLog");
				Disconnect();
			}

			Debug.Assert(!ClientMoreToRead());
		}


		private void ChangeArea()
		{
			string s = AreasListBox.SelectedItem.ToString();
			int level = (int)new Int32Converter().ConvertFromString(s.Substring(s.IndexOf("level=") + 6));
			SetLogLevel(level);
		}

		private void ChangeService()
		{
			AreasListBox.Enabled = false;
			AreasListBox.Items.Clear();

			ClientWriteLine("exec " + GetSelectedServiceName() + " listareas");

			while (ClientMoreToRead())
			{
				string s = ClientReadLine();
				string areaname = s.Substring(5, s.IndexOf(" ") - 5);
				string level = s.Substring(s.IndexOf("Level:") + 6, 1);
				AreasListBox.Items.Add(areaname + " level=" + level);
				if (s.IndexOf(TargetNameLabel.Text) != -1)
				{
					AreasListBox.SetItemChecked(AreasListBox.Items.Count - 1, true);
				}
			}

			AreasListBox.SetSelected(0, true);

			ChangeArea();

			AreasListBox.Enabled = true;
		}

		private void RefreshLists()
		{
			TargetNameLabel.Text = "ezlog" + new Random().Next().ToString();

			//We have a slightly different code path for this because the output doesn't end with a "."
			Byte[] sendBytes = Encoding.ASCII.GetBytes("list\n");
			networkStream.Write(sendBytes, 0, sendBytes.Length);
			ClientReadResponseOnce();

			//we need to queue the targets for creation instead of doing them inline
			Queue NewTargetQueue = new Queue();

			while (ClientMoreToRead())
			{
				ServicesListBox.Items.Add(ClientReadLine());
				ServicesListBox.SelectedIndex = ServicesListBox.Items.Count - 1;
				NewTargetQueue.Enqueue(GetSelectedServiceName());
			}
			ServicesListBox.SetSelected(0, true);

			while(NewTargetQueue.Count > 0)
			{
				NewTarget((string)NewTargetQueue.Dequeue());
			}

			ChangeService();
		}

		private void button1_Click(object sender, System.EventArgs e)
		{
			if (button1.Text == "Connect")
			{
				if (TargetComboBox.Text == "")
				{
					MessageBox.Show("You must first enter a target before connecting.", "EZLog");
					return;
				}

				Connect();
			}
			else if (button1.Text == "Disconnect")
			{
				Disconnect();
			}
		}

		private void LogLevelRadio_CheckedChanged(object sender, System.EventArgs e)
		{
			RadioButton r = (RadioButton)sender;
			if (r.Enabled && r.Checked)
			{
				string s = r.Text.Substring(r.Text.IndexOf("(") + 1, 1);
				ChangeLogLevel(Int32.Parse(s));
			}
		}

		private void ServicesListBox_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if (ServicesListBox.Enabled)
			{
				try
				{
					ChangeService();
				}
				catch(ArgumentOutOfRangeException)
				{
					MessageBox.Show("No services found.", "EZLog");
					Disconnect();
				}
			}
		}

		private void AreasListBox_ItemCheck(object sender, System.Windows.Forms.ItemCheckEventArgs e)
		{
			if (AreasListBox.Enabled)
			{
				if (e.NewValue == CheckState.Checked)
				{
					ClientWriteLine("exec " + GetSelectedServiceName() + " addtarget " + TargetNameLabel.Text + " " + GetSelectedAreaName());
					string s = ClientReadLine();
					Debug.Assert(s == "Target " + TargetNameLabel.Text + " assigned to area " + GetSelectedAreaName());
					Debug.Assert(!ClientMoreToRead());
				}
				else
				{
					ClientWriteLine("exec " + GetSelectedServiceName() + " removetarget " + TargetNameLabel.Text + " " + GetSelectedAreaName());
					string s = ClientReadLine();
					Debug.Assert(s == "Done.");
					Debug.Assert(!ClientMoreToRead());
				}
			}
		}

		private void AreasListBox_SelectedIndexChanged(object sender, System.EventArgs e)
		{
			if (AreasListBox.Enabled)
			{
				ChangeArea();
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\dll\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\soap\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\dll\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_soap_none_12.4.56.0_none_b4e3725f192f1f26
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=soap
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.manifest
XP_MANIFEST_PATH=manifests\msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.cat
XP_CATALOG_PATH=manifests\msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.cat
XP_PAYLOAD_PATH=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=soap,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\messaging\test\stf\MsgTestUtils.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.Notification;
using ServerTestFramework.LiveService.Presence;
using ServerTestFramework.LiveService.PresNotiCommon;
using ServerTestFramework.Utilities;
using xonline.common.config;

namespace MessagingTest
{
    // Flags used for specifying messaging details
    public class MessageDetailTypes
    {
        public const ushort PartySession = 0x0001;
        public const ushort Photo = 0x0002;
        public const ushort Session = 0x0004;
        public const ushort SessionDescription = 0x0008;
        public const ushort Text = 0x0010;
        public const ushort TitleCustomData = 0x0020;
        public const ushort Video = 0x0040;
        public const ushort VoiceChatPort = 0x0080;
        public const ushort XboxVoice = 0x0100;
        public const ushort XenonVoice = 0x0200;
    }

    public class MsgTestUtils
    {
        // Single FriendsCommon object
        public static FriendsCommon Fc = new FriendsCommon();

        // Default system message testing Title ID
        public const uint DefaultSystemTitleID = 10;

        // Messaging config settings
        public static readonly bool IsWelcomeMessageEnabled = (int.Parse(Config.GetSetting("presence_WelcomeToXboxLiveMessage")) != 0);
        public static readonly uint MessagingDailyRecipients = uint.Parse(Config.GetSetting("presence_MessagingDailyRecipients"));
        public static readonly uint MessagingDailySends = uint.Parse(Config.GetSetting("presence_MessagingDailySends"));

        static public SystemMessage InitValidLiveMsg(
                string testCaseName,
                Message.Priority priority,
                uint region,
                uint titleId,
                ushort delayMinutes,
                ushort expireMinutes
                )
        {
            // Clean out system messages for this title everywhere
            SystemMsgFolder.DeleteAll( titleId, SystemMessage.RevokeAlso.Yes );

            // Build and send message
            SystemMessage msg =
                SystemMessage.CreateLiveMsg(
                priority,
                "MessagingTest",
                titleId,
                region,
                testCaseName,
                1, // string Id
                delayMinutes,
                expireMinutes );
            uint msgId = msg.Send();

            // Fetch copy and validate message
            SystemMessage msgFetched = new SystemMessage( titleId, msgId );
            msg.CheckSystemMessage( msgFetched );

            return msg;
        }

        public static MsgDetails CreateDetails(ushort detailTypes)
        {
            return CreateDetails(detailTypes, null);
        }

        public static MsgDetails CreateDetails(ushort detailTypes, Dictionary<ushort, uint> attachmentFlags)
        {
            MsgDetails details = MsgDetails.CreateBlank();

            if (0 != (detailTypes & MessageDetailTypes.PartySession))
            {
                details.AddProperty(XonPresNoti.MSG_PROP_PARTY_SESSION_ID, RandomEx.GlobalRandGen.NextUlong());
                details.AddProperty(XonPresNoti.MSG_PROP_PARTY_SESSION_HOST_KEY, RandomEx.GlobalRandGen.GenerateRandomBlob(16)); // sizeof(XNKEY)
                details.AddProperty(XonPresNoti.MSG_PROP_PARTY_SESSION_HOST_XNADDR, RandomEx.GlobalRandGen.GenerateRandomBlob(36)); // sizeof(XNADDR)
            }

            if (0 != (detailTypes & MessageDetailTypes.Photo))
            {
                details.AddProperty(
                    XonPresNoti.MSG_PROP_PHOTO_DATA,
                    1024,
                   GetAttachmentFlag(XonPresNoti.MSG_PROP_PHOTO_DATA, attachmentFlags),
                   "http://fakeattach/picture_data"
                   );
                details.AddProperty(XonPresNoti.MSG_PROP_PHOTO_DATA_CODEC, XonPresNoti.PROP_PHOTO_DATA_CODEC_PNG);
            }

            if (0 != (detailTypes & MessageDetailTypes.Session))
            {
                details.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, RandomEx.GlobalRandGen.NextUlong());
                details.AddProperty(XonPresNoti.MSG_PROP_SESSION_HOST_KEY, RandomEx.GlobalRandGen.GenerateRandomBlob(16)); // sizeof(XNKEY)
                details.AddProperty(XonPresNoti.MSG_PROP_SESSION_HOST_XNADDR, RandomEx.GlobalRandGen.GenerateRandomBlob(36)); // sizeof(XNADDR)
            }

            if (0 != (detailTypes & MessageDetailTypes.SessionDescription))
            {
                details.AddProperty(XonPresNoti.MSG_PROP_SESSION_DESCRIPTION, RandomEx.GlobalRandGen.GenerateTotallyRandomString(8)); // TODO: Max length
            }

            if (0 != (detailTypes & MessageDetailTypes.Text))
            {
                details.AddProperty(XonPresNoti.MSG_PROP_TEXT, RandomEx.GlobalRandGen.GenerateRandomString((int)XonPresNoti.MAX_SUBJECT_SIZE));
                details.AddProperty(XonPresNoti.MSG_PROP_TEXT_LANGUAGE, (uint)1);
            }

            if (0 != (detailTypes & MessageDetailTypes.TitleCustomData))
            {
                details.AddProperty(XonPresNoti.MSG_PROP_GAME_MESSAGE, RandomEx.GlobalRandGen.GenerateTotallyRandomString(16)); // TODO: Max length
                details.AddProperty(XonPresNoti.MSG_PROP_PLAYER_MESSAGE, RandomEx.GlobalRandGen.GenerateTotallyRandomString(16)); // TODO: Max length
                details.AddProperty(XonPresNoti.MSG_PROP_CUSTOM_ACTIONS, RandomEx.GlobalRandGen.GenerateRandomBlob(628)); // sizeof(XMSG_CUSTOMACTION)
                details.AddProperty(XonPresNoti.MSG_PROP_CUSTOM_PAYLOAD, RandomEx.GlobalRandGen.GenerateRandomBlob(4)); // Simple DWORD payload
            }

            if (0 != (detailTypes & MessageDetailTypes.Video))
            {
                details.AddProperty(
                    XonPresNoti.MSG_PROP_VIDEO_FRAME_DATA,
                    1024,
                   GetAttachmentFlag(XonPresNoti.MSG_PROP_VIDEO_FRAME_DATA, attachmentFlags),
                   "http://fakeattach/video_frame_data"
                   );
                details.AddProperty(XonPresNoti.MSG_PROP_VIDEO_FRAME_CODEC, 1);

                details.AddProperty(
                    XonPresNoti.MSG_PROP_VIDEO_DATA,
                    1024,
                   GetAttachmentFlag(XonPresNoti.MSG_PROP_VIDEO_DATA, attachmentFlags),
                   "http://fakeattach/video_data"
                   );
                details.AddProperty(XonPresNoti.MSG_PROP_VIDEO_DATA_CODEC, 1); // no consts yet for video codec
                details.AddProperty(XonPresNoti.MSG_PROP_VIDEO_DATA_DURATION, (uint)100);
            }

            if (0 != (detailTypes & MessageDetailTypes.VoiceChatPort))
            {
                details.AddProperty(XonPresNoti.HUD_MSG_PROP_VOICECHAT_PORT, (ushort)(RandomEx.GlobalRandGen.Next()));
            }

            if (0 != (detailTypes & MessageDetailTypes.XboxVoice))
            {
                details.AddProperty(
                    XonPresNoti.MSG_PROP_VOICE_DATA,
                    1024,
                   GetAttachmentFlag(XonPresNoti.MSG_PROP_VOICE_DATA, attachmentFlags),
                   "http://fakeattach/xbox1_voice_data"
                   );
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_CODEC, XonPresNoti.PROP_VOICE_DATA_CODEC_SASE3200);
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_DURATION, (uint)10);
            }

            if (0 != (detailTypes & MessageDetailTypes.XenonVoice))
            {
                details.AddProperty(
                    XonPresNoti.MSG_PROP_VOICE_DATA,
                    1024,
                   GetAttachmentFlag(XonPresNoti.MSG_PROP_VOICE_DATA, attachmentFlags),
                   "http://fakeattach/xenon_voice_data"
                   );
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_CODEC, XonPresNoti.PROP_VOICE_DATA_CODEC_WMAVOICE_V90);
                details.AddProperty(XonPresNoti.MSG_PROP_VOICE_DATA_DURATION, (uint)10);
            }

            return details;
        }

        private static uint GetAttachmentFlag(ushort msgProp, Dictionary<ushort, uint> attachmentFlags)
        {
            return (attachmentFlags != null) && attachmentFlags.ContainsKey(msgProp) ? attachmentFlags[msgProp] : 0;
        }

        public static UserMessage CreateMessage(PNUser sender, byte msgType)
        {
            return CreateMessage(sender, msgType, null, 0, null);
        }

        public static UserMessage CreateMessage(PNUser sender, byte msgType, uint? flags, ushort expireMinutes, MsgDetails details)
        {
            MsgDetails msgDetails = MsgDetails.CreateBlank();
            ulong context = RandomEx.GlobalRandGen.NextUlong();
            uint msgFlags = 0;

            // Assign default values
            switch (msgType)
            {
                case XonPresNoti.MSG_TYPE_FRIEND_REQUEST:
                    msgDetails = CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.XenonVoice);
                    msgFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE;
                    break;
                case XonPresNoti.MSG_TYPE_LIVE_MESSAGE:
                    msgDetails = CreateDetails(MessageDetailTypes.Text);
                    msgFlags = XonPresNoti.MSG_FLAG_RECOMMENDED | XonPresNoti.MSG_FLAG_HAS_TEXT;
                    break;
                case XonPresNoti.MSG_TYPE_PARTY_CHAT_INVITE:
                    msgDetails = CreateDetails(MessageDetailTypes.PartySession | MessageDetailTypes.Session);
                    msgFlags = 0;
                    break;
                case XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE:
                    msgDetails = CreateDetails(MessageDetailTypes.Photo | MessageDetailTypes.Text | MessageDetailTypes.XenonVoice);
                    msgFlags = XonPresNoti.MSG_FLAG_HAS_PHOTO | XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE;
                    break;
                case XonPresNoti.MSG_TYPE_QUICK_CHAT_INVITE:
                    msgDetails = CreateDetails(MessageDetailTypes.Session | MessageDetailTypes.SessionDescription | MessageDetailTypes.VoiceChatPort);
                    msgFlags = 0;
                    break;
                case XonPresNoti.MSG_TYPE_TITLE_CUSTOM:
                    msgDetails = CreateDetails(
                        MessageDetailTypes.Photo | MessageDetailTypes.Text | MessageDetailTypes.XenonVoice | MessageDetailTypes.TitleCustomData);
                    msgFlags = XonPresNoti.MSG_FLAG_HAS_PHOTO | XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE;
                    break;
                case XonPresNoti.MSG_TYPE_VIDEO_CHAT_INVITE:
                    msgDetails = CreateDetails(MessageDetailTypes.Session);
                    msgFlags = 0;
                    break;
                default:
                    throw new UnexpectedTestResultException(String.Format("Unknown message type {0}", msgType));
            }

            // Override the defaults, if applicable
            if (details != null)
                msgDetails = details;

            if (flags != null)
                msgFlags = (uint)flags;

            // Create the message
            UserMessage msg = UserMessage.Create(sender, msgType, context, msgFlags, expireMinutes, msgDetails);

            return msg;
        }

        public static UserMessage CreateAndSendMessage(PNUser sender, PNUser recipient, byte msgType)
        {
            return CreateAndSendMessage(sender, new PNUser[] { recipient }, msgType, null, 0, null);
        }

        public static UserMessage CreateAndSendMessage(PNUser sender, PNUser[] recipients, byte msgType)
        {
            return CreateAndSendMessage(sender, recipients, msgType, null, 0, null);
        }

        public static UserMessage CreateAndSendMessage(PNUser sender, PNUser[] recipients, byte msgType, uint? flags, ushort expireMinutes, MsgDetails details)
        {
            UserMessage msg = CreateMessage(sender, msgType, flags, expireMinutes, details);
            msg.Send(sender, recipients);
            EnsureDelivery(msg);
            return msg;
        }

        public static void EnsureDelivery(UserMessage msg)
        {
            PNUser sender = PNUser.Find(msg.SenderID);
            ValueCheck.TestNotNull("Sending User", sender);

            WaitForMessageDelivery(msg);

            // Validate the message arrival and data for each recipient
            foreach (RecipientResult result in msg.Recipients)
            {
                PNUser recipient = PNUser.Find(result.userId);
                recipient.ProcessQVals();

                // Skip offline users
                if (!recipient.LoggedOn)
                    continue;

                UserMsgFolder folder = new UserMsgFolder(recipient);
                folder.LoadEx();

                if (folder.InboxCount == 0)
                {
                    throw new UnexpectedTestResultException("Recipient: " + recipient.UserId.ToString("x") + " did not have any messages in their inbox");
                }

                // Validate enumeration, retrieve the message summaries then retrieve the message details
                UserMessage recvMsg;

                // Find the message directly by ID, in the case when the message ID is not
                // known we will find it by type, sender and context.
                if (0 != result.msgId)
                {
                    recvMsg = folder[result.msgId];
                }
                else
                {
                    UserMessage[] matches = folder.Find(msg.Type, msg.SenderID, msg.Context);
                    ValueCheck.Test("Only know how to deal with a single received message", 1, matches.Length);

                    recvMsg = matches[0];
                }

                // Create a message copy to retrieve the details
                UserMessage detailsMsg = UserMessage.CreateBlank();
                uint hr = detailsMsg.GetDetails(recipient, recvMsg.ID, 0, 0);
                ValueCheck.TestHR("GetDetails for message ID: " + result.msgId, HResult.S_OK, hr);

                //
                // Validate the basic meta-data
                //
                ValueCheck.Test("Summary MsgType", msg.Type, recvMsg.Type);
                ValueCheck.Test("Summary SenderID", msg.SenderID, recvMsg.SenderID);
                ValueCheck.Test("Summary Context", msg.Context, recvMsg.Context);

                //
                // Validate that expiration is obeyed
                //
                ValueCheck.Test(
                    "Summary ExpireMinutes",
                    msg.ExpireMinutes > 0 ? msg.ExpireMinutes : XonPresNoti.GetDefaultExpirationForMsgType(msg.Type),
                    recvMsg.ExpireMinutes
                    );

                //
                // Only validate that sender name is valid for non system messages
                //
                if (0 != msg.SenderID)
                {
                    ValueCheck.Test("Summary SenderName", msg.SenderName, recvMsg.SenderName);
                }

                //
                // Get the message flags in the qflag and validate the details aspect of the flags
                //
                PNUser.MessageInfo msgInfo = recipient.GetMessageInfo(recvMsg.ID);
                ValueCheck.TestNotNull("MessageInfo (QVAL data) for msgID " + recvMsg.ID, msgInfo);

                ValueCheck.Test("QVal Message Type", (byte)recvMsg.Type, (byte)(msgInfo.Data >> 24));


                // Compare the 3rd byte in message qval data with the message flags in the received message
                ValueCheck.IsTrue(
                        (msgInfo.Data & 0x00FF0000) == (msgInfo.Data & ((recvMsg.Flags & XonPresNoti.MSG_FLAGS_TITLE_RESERVED) >> 8)),
                        "Title reserved qval flags test");

                // Compare the title reserved flags directly with the sent message
                ValueCheck.TestBits(
                        "Title reserved sent to recv flags test",
                        msg.Flags & XonPresNoti.MSG_FLAGS_TITLE_RESERVED,
                        recvMsg.Flags & XonPresNoti.MSG_FLAGS_TITLE_RESERVED);

                //
                // Validate the notification flags in the context of the actual message data
                // Only test on messages from non-system users. Friend requests always
                // come from title 0 or the dash.
                //
                if (null != sender.Xbox && msg.Type != XonPresNoti.MSG_TYPE_FRIEND_REQUEST)
                {
                    if (0 != (msgInfo.Data & XonPresNoti.MSG_NOTIFICATION_FLAG_SAME_TITLE))
                    {
                        ValueCheck.Test("Same title flag test", sender.Xbox.TitleId, recipient.Xbox.TitleId);
                    }
                    else
                    {
                        if (sender.Xbox.TitleId == recipient.Xbox.TitleId)
                        {
                            throw new UnexpectedTestResultException(String.Format("Recipient and sender had matching titlId ({0:x}) but no flag was sent indicating", sender.Xbox.TitleId));
                        }
                    }
                }

                if (null != sender.Xbox && msg.Type != XonPresNoti.MSG_TYPE_FRIEND_REQUEST)
                {
                    if (0 != (msgInfo.Data & XonPresNoti.MSG_NOTIFICATION_FLAG_SAME_PUBLISHER))
                    {
                        ValueCheck.Test("Same title flag test", sender.Xbox.TitleId & 0xffff0000, recipient.Xbox.TitleId & 0xffff0000);
                    }
                    else
                    {
                        if ((sender.Xbox.TitleId & 0xffff0000) == (recipient.Xbox.TitleId & 0xffff0000))
                        {
                            throw new UnexpectedTestResultException(String.Format("Recipient and sender had matching publisher in titleId ({0:x}) but no flag was sent indicating", sender.Xbox.TitleId));
                        }
                    }
                }

                if (0 != (msgInfo.Data & XonPresNoti.MSG_NOTIFICATION_FLAG_INVITE_FROM_FRIEND))
                {
                    ValueCheck.IsTrue(sender.GetBuddyInfo(recipient.UserId) != null, "Friend invite flag test");
                }

                if (0 != (msg.Flags & XonPresNoti.MSG_FLAG_HAS_VOICE))
                {
                    ValueCheck.TestBits("Existence of voice notification bits", XonPresNoti.MSG_NOTIFICATION_FLAG_HAS_VOICE, msgInfo.Data);
                }

                if (0 != (msgInfo.Data & XonPresNoti.MSG_NOTIFICATION_FLAG_HAS_VOICE))
                {
                    MsgPropertyAttachment sentAttachment = msg.Details.GetAttachmentProperty(XonPresNoti.MSG_PROP_VOICE_DATA);
                    MsgPropertyAttachment recvAttachment = detailsMsg.Details.GetAttachmentProperty(XonPresNoti.MSG_PROP_VOICE_DATA);
                    ValueCheck.TestNotNull("Voice attachment", sentAttachment);
                    ValueCheck.TestNotNull("Voice attachment", recvAttachment);

                    ValueCheck.Test("VoiceAttachment.cbAttach", sentAttachment.cbAttach, recvAttachment.cbAttach);
                    ValueCheck.Test("VoiceAttachment.dwFlags", sentAttachment.dwFlags, recvAttachment.dwFlags);
                    ValueCheck.Test("VoiceAttachment.url", sentAttachment.url, recvAttachment.url);
                }

                if (0 != (msg.Flags & XonPresNoti.MSG_FLAG_HAS_TEXT))
                {
                    ValueCheck.TestBits("Existence of text notification bits", XonPresNoti.MSG_NOTIFICATION_FLAG_HAS_TEXT, msgInfo.Data);
                }

                if (0 != (msgInfo.Data & XonPresNoti.MSG_NOTIFICATION_FLAG_HAS_TEXT))
                {
                    string sentText = msg.Details.GetStringProperty(XonPresNoti.MSG_PROP_TEXT);
                    string recvText = detailsMsg.Details.GetStringProperty(XonPresNoti.MSG_PROP_TEXT);

                    // Subject is only filled in for xenon clients when doing the Enum2, however subject is cleared out
                    // for transient messages.
                    if (recipient.Xbox.IsXenonTitle && (0 == (recvMsg.ID & XonPresNoti.MSG_ID_TRANSIENT_MESSAGE)))
                    {
                        // Message subjects are truncated due to UTF-16 conversion on server even though
                        // you might have this UTF-8 encoded text in the properties which you can retrieve
                        // directly. This was done to 'simplify' the prototocol :P
                        // MAX_SUBJECT_SIZE unicode charachers null terminated.
                        ValueCheck.Test("Message subject text", recvText.Substring(0, recvText.Length < XonPresNoti.MAX_SUBJECT_SIZE - 1 ? recvText.Length : (int)(XonPresNoti.MAX_SUBJECT_SIZE - 1)), recvMsg.Subject);
                    }
                    ValueCheck.Test("Text attachment sent to recv", sentText, recvText);
                }

                if (0 != (msgInfo.Data & XonPresNoti.MSG_NOTIFICATION_FLAG_ALT_TITLE))
                {
                    bool foundAltTitle = false;
                    for (uint i = 0; i < 4; ++i)
                    {
                        if (sender.Xbox.TitleId == recipient.Xbox.AltTitles[i])
                        {
                            foundAltTitle = true;
                            break;
                        }
                    }
                    ValueCheck.IsTrue(foundAltTitle, "Message flag alt title test");
                }
                else
                {
                    // Check to make sure that converse is true
                    for (int i = 0; i < 4; ++i)
                    {
                        if (null != sender.Xbox && sender.Xbox.TitleId == recipient.Xbox.AltTitles[i])
                        {
                            throw new UnexpectedTestResultException(
                                    String.Format("Recipient had a matching alt title ID (#{0}: {1:x}) but server did not indicate that in the flags",
                                        i,
                                        recipient.Xbox.AltTitles[i]));
                        }
                    }
                }

                // Do pairwise comparison of every detail property
                VerifyMessageDetails(msg.Details, detailsMsg.Details);
            }
        }

        public static void WaitForMessageDelivery(UserMessage msg)
        {
            PNConditionalWaitState wait = new PNConditionalWaitState(30);
            PNUser sender = PNUser.Find(msg.SenderID);
            ValueCheck.TestNotNull("Sender user object", sender);

            // Create a conditional wait state for each recipient
            foreach (RecipientResult result in msg.Recipients)
            {
                PNUser recipient = PNUser.Find(result.userId);

                // Skip offline users
                if (!recipient.LoggedOn)
                    continue;

                ValueCheck.TestNotNull("Recipient user object: " + result.userId.ToString("x"), recipient);

                // Build the message data that we're going to wait on
                uint msgData = (0x00ffffff & ConvertMsgFlagsToNotificationFlags(msg.Flags)) | (uint)(msg.Type << 24);
                wait.AddRequiredMessageData(msgData, sender, recipient);

                // If the message is a transient message we also need a qflag notification that
                // a transient message was delivered
                if (msg.ID != Message.MANY_RECIPIENTS && 0 != (msg.ID & XonPresNoti.MSG_ID_TRANSIENT_MESSAGE))
                    wait.AddRequiredQFlag(XonPresNoti.QFLAG_MASK_TRANSIENT_MSGS, sender, recipient);
            }

            wait.WaitOnQValConditions();
        }

        public static List<UserMessage> SendManyMessages(PNUser targetUser, bool fTransient, uint cMessages)
        {
            return SendManyMessages(targetUser, fTransient, cMessages, 25);
        }

        public static List<UserMessage> SendManyMessages(PNUser targetUser, bool fTransient, uint cMessages, uint cMessagesPerUser)
        {
            // Transient messages (i.e. Game Invites) can only have one outstanding per sender
            // This means that to send N invites, we need N unique users
            uint cUsers = fTransient ? cMessages : (cMessages / cMessagesPerUser) + 1;

            List<UserMessage> msgList = new List<UserMessage>((int)cMessages);

            Global.RO.Info(
                "Sending {0} {1} messages to \"{2}\" with {3} users",
                cMessages,
                fTransient ? "transient" : "persistent",
                targetUser.Name,
                cUsers
                );

            PNUser[] senders = MsgTestUtils.Fc.CreateXenonUsers(cUsers, true);
            UserMessage msg = null;
            PNConditionalWaitState wait = new PNConditionalWaitState();

            for (uint i = 0; i < cMessages; ++i)
            {
                uint index = i % cUsers;

                if (fTransient)
                {
                    List<UserMessage> inviteList = SendGameInvite(senders[index], new PNUser[] { targetUser }, (ulong)(i + 1), (ulong)i, true);
                    msgList.Add(inviteList[0]);
                }
                else
                {
                    msg = UserMessage.Create(senders[index], XonPresNoti.MSG_TYPE_TITLE_CUSTOM, (ulong)i, 0, 0);
                    msg.Send(targetUser);
                    wait.AddRequiredMessageType(XonPresNoti.MSG_TYPE_TITLE_CUSTOM, senders[index], targetUser);
                    msgList.Add(msg);
                }
            }

            if (!fTransient)
                wait.WaitOnQValConditions();

            return msgList;
        }

        public static UserMessage SendGameInvite(PNUser sender, PNUser recipient)
        {
            List<UserMessage> msgList = SendGameInvite(
                sender,
                new PNUser[] { recipient },
                RandomEx.GlobalRandGen.NextUlong(),
                RandomEx.GlobalRandGen.NextUlong(),
                true
                );

            return msgList[0];
        }

        public static List<UserMessage> SendGameInvite(PNUser sender, PNUser[] recipients)
        {
            return SendGameInvite(sender, recipients, RandomEx.GlobalRandGen.NextUlong(), RandomEx.GlobalRandGen.NextUlong(), true);
        }

        public static List<UserMessage> SendGameInvite(PNUser sender, PNUser[] recipients, ulong sessionId, ulong context, bool fEnsureArrival)
        {
            MsgDetails msgDetails = MsgDetails.CreateBlank();
            return SendGameInvite(sender, recipients, sessionId, context, fEnsureArrival, 0, msgDetails);
        }

        public static List<UserMessage> SendGameInvite(PNUser sender, PNUser[] recipients, ulong sessionId, ulong context, bool fEnsureArrival, uint msgFlags, MsgDetails msgDetails)
        {
            List<UserMessage> msgList = null;
            List<UserMsgFolder> folderList = null;

            if (fEnsureArrival)
            {
                msgList = new List<UserMessage>();
                folderList = new List<UserMsgFolder>(recipients.Length);

                foreach (PNUser recipient in recipients)
                    folderList.Add(new UserMsgFolder(recipient));
            }

            msgDetails.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, sessionId);
            sender.Invite2(recipients, sessionId, context, msgFlags, msgDetails);

            if (fEnsureArrival)
            {
                foreach (UserMsgFolder folder in folderList)
                {
                    UserMessage msg = folder.WaitForMsgByContext(XonPresNoti.MSG_TYPE_GAME_INVITE, context, 60);
                    msgList.Add(msg);
                }
            }

            return msgList;
        }

        private static void StressInvite2(PNUser sender, PNUser[] recipients, ulong sessionId, ulong context)
        {
            uint state = sender.State;
            state |= XonPresNoti.P_STATE_MASK_PLAYING;

            state |= XonPresNoti.P_STATE_MASK_JOINABLE;

            GlobalFakeSG.FakeSG.SetUserState(sender.Xbox.XboxId, sender.UserId, sessionId, state, sender.TitleStuff, (ushort)sender.TitleStuff.Length);

            // Send the invite
            MsgDetails msgDetails = MsgDetails.CreateBlank();
            msgDetails.AddProperty(XonPresNoti.MSG_PROP_SESSION_ID, sessionId);

            PMsgInvite2 inviteMsg = new PMsgInvite2(sender, recipients, context, 0, msgDetails);
            inviteMsg.TransactFD();
        }

        public static UserMessage SendGameInviteWithText(PNUser sender, PNUser recipient)
        {

            MsgDetails msgDetails = MsgDetails.CreateBlank();
            msgDetails.AddProperty(XonPresNoti.MSG_PROP_TEXT, RandomEx.GlobalRandGen.GenerateRandomString((int)XonPresNoti.MAX_SUBJECT_SIZE));
            msgDetails.AddProperty(XonPresNoti.MSG_PROP_TEXT_LANGUAGE, (uint)1);

            List<UserMessage> msgList = SendGameInvite(
                sender,
                new PNUser[] { recipient },
                RandomEx.GlobalRandGen.NextUlong(),
                RandomEx.GlobalRandGen.NextUlong(),
                true,
                XonPresNoti.MSG_FLAG_HAS_TEXT,
                msgDetails
                );

            return msgList[0];
        }

        public static UserMessage FindMessageByIdAndContext(List<UserMessage> msgList, uint id, ulong context)
        {
            foreach (UserMessage msg in msgList)
            {
                if (msg.ID == id && msg.Context == context)
                    return msg;
            }

            return null;
        }

        public static PNUser[] CreateCleanUsers(int count)
        {
            PNUser[] result = new PNUser[count];
            for (int i = 0; i < count; i++)
            {
                result[i] = CreateCleanUser();
            }
            return result;
        }

        public static PNUser CreateCleanUser()
        {
            PNUser user = Fc.CreateUser(true);

            UserMsgFolder msgFolder = new UserMsgFolder(user);

            if (IsWelcomeMessageEnabled)
            {
                msgFolder.WaitForMsgBySender(XonPresNoti.MSG_TYPE_LIVE_MESSAGE, 0, 5);
            }

            msgFolder.Load2();
            msgFolder.DeleteInbox();

            ValueCheck.Test("Message Inbox Count", (ushort)0, msgFolder.Count);

            return user;
        }

        public static void VerifyMessageDetails(MsgDetails detailsExpected, MsgDetails detailsGot)
        {
            for (int i = 0; i < detailsExpected.properties.Length; ++i)
            {
                MsgProperty msgProp = detailsExpected.properties[i];
                string testText = String.Format("Details Property {0}, type {1}", msgProp.tag, msgProp.type);

                switch (msgProp.type)
                {
                    case (XonPresNoti.MSG_PROP_TYPE_ATTACHMENT):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetAttachmentProperty(msgProp.tag).url,
                            detailsGot.GetAttachmentProperty(msgProp.tag).url
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_BINARY):
                        ValueCheck.TestAll(
                            testText,
                            detailsExpected.GetBinaryProperty(msgProp.tag),
                            detailsGot.GetBinaryProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_BOOL):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetBoolProperty(msgProp.tag),
                            detailsGot.GetBoolProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_FILETIME):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetDateTimeProperty(msgProp.tag),
                            detailsGot.GetDateTimeProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_I1):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetByteProperty(msgProp.tag),
                            detailsGot.GetByteProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_I2):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetWordProperty(msgProp.tag),
                            detailsGot.GetWordProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_I4):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetDwordProperty(msgProp.tag),
                            detailsGot.GetDwordProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_I8):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetQwordProperty(msgProp.tag),
                            detailsGot.GetQwordProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_NULL):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.HasNullProperty(msgProp.tag),
                            detailsGot.HasNullProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_STRING):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetStringProperty(msgProp.tag),
                            detailsGot.GetStringProperty(msgProp.tag)
                            );
                        break;
                    case (XonPresNoti.MSG_PROP_TYPE_STRING_ID):
                        ValueCheck.Test(
                            testText,
                            detailsExpected.GetStringIdProperty(msgProp.tag),
                            detailsGot.GetStringIdProperty(msgProp.tag)
                            );
                        break;
                    default:
                        throw new UnexpectedTestResultException("Unknown message property type");
                }
            }
        }

        public static uint ConvertMsgFlagsToNotificationFlags(uint msgFlags)
        {
            uint notiFlags = 0;

            if (0 != (msgFlags & XonPresNoti.MSG_FLAG_HAS_VOICE))
            {
                notiFlags |= XonPresNoti.MSG_NOTIFICATION_FLAG_HAS_VOICE;
            }
            if (0 != (msgFlags & XonPresNoti.MSG_FLAG_HAS_TEXT))
            {
                notiFlags |= XonPresNoti.MSG_NOTIFICATION_FLAG_HAS_TEXT;
            }
            if (0 != (msgFlags & XonPresNoti.MSG_FLAGS_TITLE_RESERVED))
            {
                notiFlags |= ((msgFlags & XonPresNoti.MSG_NOTIFICATION_FLAG_TITLE_RESERVED) >> 8);
            }

            return notiFlags;
        }

        public static void RevokeMessage(PNUser sender, ulong context, byte msgType, RecipientResult[] results)
        {
            RevokeMessage(sender, context, msgType, results, false);
        }

        public static void RevokeMessage(PNUser sender, ulong context, byte msgType, RecipientResult[] results, bool useDatacenterPort)
        {
            QMsgRevokeMsg msgRevoke = new QMsgRevokeMsg(sender, context, msgType, results);
            PNMsg reply;

            if (useDatacenterPort)
                msgRevoke.PortOnFD = PNRequestMsg.FDPort.Messaging_DC;

            msgRevoke.TransactFD(out reply);

            QRevokeMsgReplyMsgData replyData = (QRevokeMsgReplyMsgData)(reply.Data);

            if (HResult.Failed(replyData.hr))
                throw new HResultException(replyData.hr, "Revoke Message Failed");
        }

        public static void WaitForDeletedMessage(PNUser user, uint msgId)
        {
            QValPacket qval = user.WaitForDeletedMessage(msgId);
            user.HandleQValPacket(qval);
        }

        public static void VerifyMessageExists(PNUser user, uint msgId, ulong senderId, byte msgType)
        {
            UserMsgFolder msgFolder = new UserMsgFolder(user);
            msgFolder.Load2();

            ValueCheck.TestNotNull("Message Exists", msgFolder[msgId]);
            ValueCheck.Test("Message Sender ID", senderId, msgFolder[msgId].SenderID);
            ValueCheck.Test("Message Type", msgType, msgFolder[msgId].Type);
        }

        public static void VerifyMessageIsGone(PNUser user, uint msgId)
        {
            UserMsgFolder folder = new UserMsgFolder(user);
            folder.LoadEx();
            ValueCheck.IsFalse(folder.ContainsMessage(msgId), "Folder should not contain msgId " + msgId);
        }

        public static void LogonRandomUsers(PNUser[] userList, uint cUsers)
        {
            if (cUsers > userList.Length)
                throw new ArgumentException(
                    String.Format("cUsers ({0}) must be <= userList.Length ({1})", cUsers, userList.Length));

            uint cNumLoggedIn = 0;

            // Count how many are already logged on
            foreach (PNUser user in userList)
            {
                if (user.LoggedOn)
                    cNumLoggedIn++;
            }

            Global.RO.Info("LogonRandomUsers: {0} already logged in, {1} requested", cNumLoggedIn, cUsers);

            // Short circuit if no work to do
            if (cNumLoggedIn >= cUsers)
                return;

            for (uint i = 0; i < cUsers - cNumLoggedIn; ++i)
            {
                while (true)
                {
                    int randIndex = RandomEx.GlobalRandGen.Next(userList.Length);

                    if (!userList[randIndex].LoggedOn)
                    {
                        Fc.LogonUser(userList[randIndex]);
                        break;
                    }
                }
            }
        }

        public static UserMessage SendRandomMessage(PNUser sender, PNUser recipient, bool fWaitForDelivery, bool fValidateMessage)
        {
            return SendRandomMessage(sender, new PNUser[] { recipient }, fWaitForDelivery, fValidateMessage);
        }

        public static UserMessage SendRandomMessage(PNUser sender, PNUser[] recipients, bool fWaitForDelivery, bool fValidateMessage)
        {
            UserMessage msg = null;

            uint? msgFlags = null;
            MsgDetails details = MsgDetails.CreateBlank();

            byte msgType = MessagingTestConfig.GetRandomMessageType();

            // If it is a game invite, we need to check to make sure they don't already have one outstanding or errors will ensue.
            // We also make sure the config file isn't game invites ONLY or the while loop would be infinite
            //if (msgType == XonPresNoti.MSG_TYPE_GAME_INVITE && sender.HasUnAnsweredInvite() && MessagingTestConfig.GetMessageTypeProbability(XonPresNoti.MSG_TYPE_GAME_INVITE) < 100)
            //{
            //    do
            //    {
            //        Global.RO.Error("new message");
            //        msgType = MessagingTestConfig.GetRandomMessageType();
            //    } while (msgType != XonPresNoti.MSG_TYPE_GAME_INVITE);
            //}

            string msgSubType = MessagingTestConfig.GetRandomMessageSubType(msgType);

            switch (msgType)
            {
                case XonPresNoti.MSG_TYPE_GAME_INVITE:
                    StressInvite2(sender, recipients, sender.UserId, sender.UserId);
                    break;
                case XonPresNoti.MSG_TYPE_PERSONAL_MESSAGE:
                    if (msgSubType == "Photo")
                    {
                        msgFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_PHOTO;
                        details = CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.Photo);
                    }
                    else if (msgSubType == "PhotoAndVoice")
                    {
                        msgFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_PHOTO | XonPresNoti.MSG_FLAG_HAS_VOICE;
                        details = CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.Photo | MessageDetailTypes.XenonVoice);
                    }
                    else if (msgSubType == "Voice")
                    {
                        msgFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE;
                        details = CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.XenonVoice);
                    }

                    msg = CreateMessage(sender, msgType, msgFlags, 0, details);
                    break;
                case XonPresNoti.MSG_TYPE_FRIEND_REQUEST:
                    if (msgSubType == "Voice")
                    {
                        msgFlags = XonPresNoti.MSG_FLAG_HAS_TEXT | XonPresNoti.MSG_FLAG_HAS_VOICE;
                        details = CreateDetails(MessageDetailTypes.Text | MessageDetailTypes.XenonVoice);
                    }

                    msg = CreateMessage(sender, msgType, msgFlags, 0, details);
                    break;
                default:
                    msg = CreateMessage(sender, msgType);
                    break;
            }

            if (msgType != XonPresNoti.MSG_TYPE_GAME_INVITE)
            {
                msg.Send(sender, recipients);

                if (fWaitForDelivery)
                {
                    if (fValidateMessage)
                        EnsureDelivery(msg);
                    else
                        WaitForMessageDelivery(msg);
                }
            }

            return msg;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\dll\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_soap_none_12.4.56.0_none_b4e3725f192f1f26
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=soap
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.manifest
XP_MANIFEST_PATH=manifests\msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.cat
XP_CATALOG_PATH=manifests\msil_soap_no-public-key_12.4.56.0_x-ww_903867ce.cat
XP_PAYLOAD_PATH=msil_soap_no-public-key_12.4.56.0_x-ww_903867ce
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=soap,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\soap\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__soap_1_none_12.4.56.0_none_7c4f0413b52e6554
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_soap_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.manifest
XP_MANIFEST_PATH=manifests\x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.cat
XP_CATALOG_PATH=manifests\x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.cat
XP_PAYLOAD_PATH=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_soap_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\soap\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__soap_1_none_12.4.56.0_none_7c4f0413b52e6554
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_soap_1
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.manifest
XP_MANIFEST_PATH=manifests\x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.cat
XP_CATALOG_PATH=manifests\x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2.cat
XP_PAYLOAD_PATH=x86__soap_1_no-public-key_12.4.56.0_x-ww_682cb6b2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_soap_1,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\mc\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\soap\soapfeapp.cs ===
using System;
using System.IO;
using System.Web;
using System.Web.Caching;
using System.Threading;
using System.Text;
using System.Reflection;
using System.Diagnostics;
using System.Collections;
using System.Security.Principal;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

[assembly: XomAreaDefinition(XomAreaName.soaptrace)]

namespace xonline.server.mgmt.soap 
{
    public class SoapFrontEndApp : HttpApplication
    {
        static SoapFrontEndApp()
        {
            Config.Assembly = Assembly.GetExecutingAssembly();
        }

        public virtual void Application_Start(object sender, EventArgs e)
        {
            XomLoggingControl.Init();

            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(SoapFrontEndApp.OnControlRequest);
            XomPerformanceCounterCategory.InitPerfCtrs();

            // add to application  state  to  affect  error  processing
            Application.Add(FrontEndApp.FE_APP_COUNTERS, XOn.SOAP_ERROR_PERF_COUNTERS);
            
            // prevent performance degradation when periods of slow activity alternate with periods of heavy activity
            // KB#827419 http://support.microsoft.com/default.aspx?scid=kb;en-us;827419
            int workerThreads = Config.GetIntSetting(Setting.feapp_workerThreads);;
            int completionPortThreads = Config.GetIntSetting(Setting.feapp_completionPortThreads);;

            int maxWorkerThreads, maxCompletionPortThreads = 0;
            ThreadPool. GetMaxThreads(out maxWorkerThreads, out maxCompletionPortThreads);
            workerThreads = Math.Min(maxWorkerThreads, workerThreads);
            completionPortThreads = Math.Min(maxCompletionPortThreads, completionPortThreads);

            ThreadPool.SetMinThreads(workerThreads, completionPortThreads);
            
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "\r\n" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "==================================" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "New Application, started " + DateTime.Now );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "==================================" );
            
            Xom.NtEvent(XEvent.Id.MC_APPDOMAIN_STARTED_2, "A new app domain has started.\r\n" + AppDomain.CurrentDomain.ToString());
                       
        }
        
        public virtual void Application_End(object sender, EventArgs e)
        {
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "\r\n" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "==================================" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "Application End, " + DateTime.Now );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "==================================" );

            XomLoggingControl.Close();
            
            Xom.NtEvent(XEvent.Id.MC_APPDOMAIN_STOPPED, "The app domain has ended.\r\n" + AppDomain.CurrentDomain.ToString());
        }
    
#if ICECAP 
        int _mark = 0;
#endif
        
        public virtual void Application_BeginRequest(object sender, EventArgs e)
        {
#if ICECAP
            IceCap.StartProfile(IceCap.PROFILE_THREADLEVEL, IceCap.PROFILE_CURRENTID);
            IceCap.CommentMarkProfile(++_mark, url);
#endif
        }
        
        public virtual void Application_EndRequest(object sender, EventArgs e)
        {
            if (Context.Items["XEvent"] != null)
            {
                Context.Response.AppendHeader("X-Event", (string) Context.Items["XEvent"]);
            }

            FrontEndApp.ReformatResponse(Context);
            FrontEndApp.CacheControl(Context);

            OnAudit(sender, e);
#if ICECAP
            IceCap.StopProfile(IceCap.PROFILE_THREADLEVEL, IceCap.PROFILE_CURRENTID);
#endif
        }

        public virtual void Application_OnError(object sender, EventArgs ea)
        {
            FrontEndApp.LogException(
                Context, Context == null ? null : Context.Error, false
            );
        }

        public virtual void Application_PostAuthenticateRequest(object sender, EventArgs eventArgs)
        {
            // some derived classes use to initialize AAInfo
        }

        public static void LogException(Exception e) {
            FrontEndApp.LogException(e);
        }

        public static void AddErrorPerfCounter(PerformanceCounter ctr)
        {
            AddErrorPerfCounters(new PerformanceCounter []{ctr});
        }
        
        public static void AddErrorPerfCounters(PerformanceCounter[] ctrs)
        {
            XRLUtil.AddErrorPerfCounters(ctrs, XOn.SOAP_ERROR_PERF_COUNTERS);
        }

        //
        // Control stuff
        //
        public static void OnControlRequest(object sender, ControlRequestEventArgs args)
        {
            try
            {
                switch (args.Command)
                {
                case "help":
                    XomControlConnection.SendMessage("SoapFrontEndApp help:\r\n" +
                                " ForceGC -- forces a garbage collection by calling GC.WaitForPendingFinalizers,\r\n" +
                                "            GC.Collect(). WARNING: will stop all threads on the service while\r\n" +
                                "            executing.  Should only be used when absoutely necessary!!\r\n\r\n", args.RequestId);
                    args.Handled = true;
                    break;
                    
                case "forcegc":
                    XomControlConnection.SendMessage(ProcessForceGCRequest(args), args.RequestId);
                    args.Handled = true;
                    break;
                }
            }
            catch(Exception e)
            {
                XomControlConnection.SendMessage("Error: " + e.ToString() + "\r\n\r\n", args.RequestId);
            }
        }
    
        public static string ProcessForceGCRequest(ControlRequestEventArgs args)
        {
            long bytes = GC.GetTotalMemory(true);
            return "Collection complete.   Bytes currently allocated: " + bytes + " (approximate)\r\n";
        }
        
        
        public virtual void OnAudit(object sender, EventArgs eventArgs)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\mclogtest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\soap\soap\SoapExtension.cs ===
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.IO;
using System.Net;
using System.Text;
using System.Diagnostics;
using System.Collections;

using xonline.common.service;

// Define a SOAP Extension that traces the SOAP request and SOAP
// response for the XML Web service method the SOAP extension is
// applied to.

namespace xonline.server.mgmt.soap 
{
    public class SoapExceptionExtension : SoapExtension
    {
        public override Stream ChainStream( Stream stream )
        {
            return stream;
        }

        public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute) 
        {
            return this;
        }

        public override object GetInitializer(Type WebServiceType) 
        {
          return this;    
        }

        public override void Initialize(object initializer) 
        {
        }

        public override void ProcessMessage(SoapMessage message) 
        {
            if (message.Stage == SoapMessageStage.AfterSerialize && message.Exception != null)
            {
                // if it is already logged,  then we just  return.  the
                // value is set to "true",  but we just check existence
                
                if (HttpContext.Current.Items[FrontEndApp.FE_APP_LOGGED] != null)
                {
                    return;
                }

                Exception se = message.Exception;
                Debug.Assert(se is SoapException);

                Exception e = se.InnerException;

                // web exceptions are already logged.  we don't log
                // client faults. set them to null to avoid logging

                if ((e is xonline.server.webcache.common.XboxWebException) ||
                   (((SoapException) se).Code == SoapException.ClientFaultCode))
                {
                    e = null;
                }

                // if e is null,  then nothing gets logged,  but we
                // still to increment  error  performance  counters

                FrontEndApp.LogException(HttpContext.Current, e, false);
            }
        }
    }

#if DEBUG
    public class SoapTraceExtension : SoapExtension
    {
        Stream oldStream;
        Stream newStream;
        string filename;

        // Save the Stream representing the SOAP request or SOAP response into
        // a local memory buffer.
        public override Stream ChainStream( Stream stream )
        {
            oldStream = stream;
            newStream = new MemoryStream();
            return newStream;
        }

        // When the SOAP extension is accessed for the first time, the XML Web
        // service method it is applied to is accessed to store the file
        // name passed in, using the corresponding SoapExtensionAttribute.   
        public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute) 
        {
            return ((TraceExtensionAttribute) attribute).Filename;
        }

        // The SOAP extension was configured to run using a configuration file
        // instead of an attribute applied to a specific XML Web service
        // method.
        public override object GetInitializer(Type WebServiceType) 
        {
          // Return a file name to log the trace information to, based on the
          // type.
          return "C:\\Logs\\SOAPTraceLog.txt";    
        }

        // Receive the file name stored by GetInitializer and store it in a
        // member variable for this specific instance.
        public override void Initialize(object initializer) 
        {
            filename = (string) initializer;
        }

        //  If the SoapMessageStage is such that the SoapRequest or
        //  SoapResponse is still in the SOAP format to be sent or received,
        //  save it out to a file.
        public override void ProcessMessage(SoapMessage message) 
        {
            switch (message.Stage) {
            case SoapMessageStage.BeforeSerialize:
                break;
            case SoapMessageStage.AfterSerialize:
                WriteOutput(message);
                break;
            case SoapMessageStage.BeforeDeserialize:
                WriteInput(message);
                break;
            case SoapMessageStage.AfterDeserialize:
                break;
            default:
                 throw new Exception("invalid stage");
            }
        }

        public void WriteOutput(SoapMessage message)
        {
            newStream.Position = 0;
            FileStream fs = new FileStream(filename, FileMode.Append,
                                           FileAccess.Write);
            StreamWriter w = new StreamWriter(fs);

            string soapString = (message is SoapServerMessage) ? "SoapResponse" : "SoapRequest";
            w.WriteLine("-----" + soapString + " at " + DateTime.Now);
            w.Flush();
            Copy(newStream, fs);
            w.Close();
            newStream.Position = 0;
            Copy(newStream, oldStream);
        }

        public void WriteInput(SoapMessage message)
        {
            Copy(oldStream, newStream);
            FileStream fs = new FileStream(filename, FileMode.Append,
                                           FileAccess.Write);
            StreamWriter w = new StreamWriter(fs);

            string soapString = (message is SoapServerMessage) ?
                                "SoapRequest" : "SoapResponse";
            w.WriteLine("-----" + soapString + 
                        " at " + DateTime.Now);
            w.Flush();
            newStream.Position = 0;
            Copy(newStream, fs);
            w.Close();
            newStream.Position = 0;
        }

        void Copy(Stream from, Stream to) 
        {
            TextReader reader = new StreamReader(from);
            TextWriter writer = new StreamWriter(to);
            writer.WriteLine(reader.ReadToEnd());
            writer.Flush();
        }
    }

    // Create a SoapExtensionAttribute for the SOAP Extension that can be
    // applied to an XML Web service method.
    [AttributeUsage(AttributeTargets.Method)]
    public class TraceExtensionAttribute : SoapExtensionAttribute
    {

        private string filename = "C:\\Logs\\SOAPTraceLog.txt";
        private int priority;

        public override Type ExtensionType
        {
            get { return typeof(SoapTraceExtension); }
        }

        public override int Priority
        {
            get { return priority; }
            set { priority = value; }
        }

        public string Filename
        {
            get {
                return filename;
            }
            set {
                filename = value;
            }
        }
    }
#endif
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\ProtocolTest\ProtocolTest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\dvt\DvtMain.cs ===
using System;

using xonline.common.mgmt;
using xonline.common.service;
using System.Diagnostics;
using System.Reflection;
using System.Reflection.Emit;

namespace XmgmtDvt
{
    class XmgmtDvt
    {
        public static int Main(string[] args)
        {

            GenerateSerializers("dynamicasm.dll");
            XomControl.ControlRequestEventHandler h = new XomControl.ControlRequestEventHandler(DvtMgmt.OnControlRequest);
            XomControl.ControlRequestEvent += h;

            Console.WriteLine("Hit Enter to exit");
            Console.ReadLine();

            XomControl.ControlRequestEvent -= h;
            return 0;
        }

        public static void GenerateSerializers(string assemblyFileName)
        {
            // Create a new dynamic assembly, a new dynamic module and a new dynamic type 
            // on the current AppDomain. Only one type will be used to hold all the 
            // dynaminc methods.

            AssemblyBuilder asmBdr = AppDomain.CurrentDomain.DefineDynamicAssembly(
                new AssemblyName("FastWireDataSavedAssembly"),
                AssemblyBuilderAccess.Save);

            ModuleBuilder modBdr = asmBdr.DefineDynamicModule("FastWireInfoSavedModule", assemblyFileName);

            // Generate context objects for each WireDatatype in local assembly. At the 
            // same time generate Read and Write method builders for each type. These can 
            // be used to generate calls to these methods before they are finished.
            Assembly assembly = Assembly.GetExecutingAssembly();
            foreach (Type type in assembly.GetTypes())
            {
                if (type.IsSubclassOf(typeof(WireData)))
                {
                    Type.GetType("xonline.common.service.WireDataSerializerCache, XblCore, Culture=neutral, Version=9.2.0.0, PublicKeyToken=8b1c842ce623c912", true).GetMethod("EmitMethodsForType", BindingFlags.Static | BindingFlags.NonPublic).Invoke(null, new object[] { modBdr, type, null });
                }
            }

            asmBdr.Save(assemblyFileName);
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\dvt\DvtMgmt.cs ===
using System;
using System.Collections.Generic;
using System.IO;
using System.Text;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

namespace XmgmtDvt
{
    class DvtMgmt
    {
        private const string c_szHelpText = @"
            xmgmt Test Module Help:
                echo <string>   : Replies with the same command
                getstring <len> : returns a random string of length <len>
                help            : displays this text" +
            "";

        //==============================================================================
        // OnControlRequest: Called by Xmgmt when a control request / command is sent
        //==============================================================================
        public static void OnControlRequest(object sender, ControlRequestEventArgs args)
        {
            string str = null;
            try
            {
                switch (args.Command)
                {
                    case "help":
                        str = c_szHelpText;
                        break;
                    case "getstring":
                        str = GetString(Convert.ToInt32(args.CommandArgs[0]));
                        break;
                    case "echo":
                        str = args.CommandArgs[0];
                        break;
                    case "register":
                        str = RegisterComponent(args.CommandArgs[0]);
                        break;
                    case "unregister":
                        str = UnregisterComponent(args.CommandArgs[0], Int32.Parse(args.CommandArgs[1]));
                        break;
                };
            }
            catch (Exception ex)
            {
                str = "Error:" + ex.ToString();
            }

            if (str != null)
            {
                XomControlConnection.SendMessage(str, args.RequestId);
                args.Handled = true;
            }
        }

        private static string GetString(int numChar)
        {
            string tempString = "";
            Random r = new Random(numChar);

            for (int i = 0; i < numChar; i++)
            {
                tempString = tempString + Convert.ToChar(r.Next(32, 126));
            }

            return tempString;
        }

        private static string UnregisterComponent(string component, int index)
        {
            PipeStream p;

            if (!components.ContainsKey(component))
            {
                return "No component found to unregister";
            }

            p = components[component][index];
            p.Close();
            components[component].RemoveAt(index);
            return "Component removed";
        }

        private static string RegisterComponent(string component)
        {
            PipeStream p = new PipeStream("\\\\.\\pipe\\xmgmtsrvpipe", XomConsts.PIPE_BUFFER_SIZE);

            RegisterMsg msg = new RegisterMsg { ComponentName = component };

            msg.WriteStream(p.Writer);
            p.Flush();

            byte[] buf = new byte[XomConsts.PIPE_BUFFER_SIZE];

            p.BeginRead(buf, 0, XomConsts.PIPE_BUFFER_SIZE, new AsyncCallback(ReadMessage), new PipeState { buffer = buf, pipe = p });

            if (!components.ContainsKey(component))
            {
                components[component] = new List<PipeStream>();
            }

            components[component].Add(p);

            return "Registered component";
        }

        private static void ReadMessage(IAsyncResult ar)
        {
            PipeState s = (PipeState)ar.AsyncState;

            int cb = s.pipe.EndRead(ar);

            if (cb == 0)
                return;

            ExchangeMsg msg = new ExchangeMsg(XomConsts.XOMCTRLMSGID_REQUEST);

            msg.ReadBytes(s.buffer);

            // XomControlConnection.SendMessage(msg.Message, msg.RequestId);
            msg.Type = XomConsts.XOMCTRLMSGID_RESPONSE;
            msg.WriteStream(s.pipe.Writer);
            s.pipe.Flush();
            (new DoneMsg { RequestId = msg.RequestId } ).WriteStream(s.pipe.Writer);
            s.pipe.Flush();
            
            s.pipe.BeginRead(s.buffer, 0, XomConsts.PIPE_BUFFER_SIZE, new AsyncCallback(ReadMessage), s);
        }

        class PipeState
        {
            public PipeStream pipe { get; set; }
            public byte[] buffer { get; set; }
        }

        static Dictionary<string, List<PipeStream>> components = new Dictionary<string, List<PipeStream>>();
    }

    public abstract class XMgmtHeader : WireData
    {
        public uint MsgSize;
        public uint Type;

        public XMgmtHeader(uint size, uint type)
        {
            MsgSize = size;
            Type = type;
        }
    }

    public class RegisterMsg : XMgmtHeader
    {
        public uint ProcessId = (uint)System.Diagnostics.Process.GetCurrentProcess().Id;

        [WireInfo(ArraySize = (int)XomConsts.XOMCTRL_MAXPROCESSNAME)]
        public string ProcessName = System.Diagnostics.Process.GetCurrentProcess().MainModule.ModuleName;
        [WireInfo(ArraySize = (int)XomConsts.XOMCTRL_MAXCOMPONENTNAME)]
        public string ComponentName = String.Empty;

        public RegisterMsg()
            : base(12 + XomConsts.XOMCTRL_MAXPROCESSNAME + XomConsts.XOMCTRL_MAXCOMPONENTNAME,
                    XomConsts.XOMCTRLMSGID_REGISTER)
        {
            if (ProcessName.EndsWith(".exe", StringComparison.InvariantCultureIgnoreCase))
            {
                ProcessName = ProcessName.Substring(0, ProcessName.Length - 4);
            }
        }
    }

    public class ExchangeMsg : XMgmtHeader
    {
        public uint RequestId;

        [WireInfo(Serialize = false)]
        public string Message = String.Empty;

        public override WireData ReadStream(BinaryReader reader)
        {
            base.ReadStream(reader);
            Message = (new UTF8Encoding()).GetString(reader.ReadBytes((int)MsgSize - 12));
            Console.WriteLine(Message);

            return null;
        }

        public override void WriteStream(BinaryWriter writer)
        {
            byte[] bytes = (new UTF8Encoding()).GetBytes(Message);
            MsgSize = 12 +(uint)bytes.Length;
//            MsgSize = 13;
            Console.WriteLine("Writing result");
            //base.WriteStream(writer);
            base.WriteStream(new WrapWriter(writer));
            //writer.Write((uint)13);
            //writer.Write(Type);
            //writer.Write(RequestId);
            //if (bytes.Length > 1)
            //    throw new Exception("Length too big: " + bytes.Length);
            writer.Write(bytes, 0, bytes.Length);
        }

        public ExchangeMsg(uint type)
            : base(0, type)
        {}
    }

    public class WrapWriter : BinaryWriter
    {
        BinaryWriter Writer { get; set; }

        public WrapWriter(BinaryWriter bw)
        {
            Writer = bw;
        }

        public override void Write(uint value)
        {
            Writer.Write(value);
        }
    }

    public class DoneMsg : XMgmtHeader
    {
        public uint RequestId = 0;
        public HResult hr = HResult.S_OK;

        public DoneMsg()
            : base(16, XomConsts.XOMCTRLMSGID_RESPONSE_DONE)
        { }
    }

    static class XomConsts
    {
        public const uint XOMCTRL_MAXPROCESSNAME = 256;
        public const uint XOMCTRL_MAXCOMPONENTNAME = 256;
        public const uint XOMCTRL_MAXMESSAGESIZE = 30720;
        public const int PIPE_BUFFER_SIZE = (int)XOMCTRL_MAXMESSAGESIZE;

        public const uint XOMCTRLMSGID_REGISTER = 0x01;
        public const uint XOMCTRLMSGID_REQUEST = 0x02;
        public const uint XOMCTRLMSGID_RESPONSE = 0x03;
        public const uint XOMCTRLMSGID_RESPONSE_DONE = 0x04;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\mc\XomAdminTest.cs ===
using System;
using System.Net;
using System.Net.Sockets;
using System.Threading;
using System.Text;
using System.IO;
using NUnit.Framework;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.mgmt.test.mc 
{
    [TestFixture]
    public class XomAdminTest
    {
        private XomControl.ControlRequestEventHandler m_xomControlEventHandler;
        private int m_iFakeServerPort;
        private AutoResetEvent m_eventPort;

        [SetUp]
        public void RegisterEventHandler()
        {
            // set up our control request handler
            Console.WriteLine("Instantiating and registering event handler");
            Console.Out.Flush();
            m_xomControlEventHandler = new XomControl.ControlRequestEventHandler(OnControlRequest2);
            XomControl.ControlRequestEvent += m_xomControlEventHandler;
        }

        [TearDown]
        public void UnregisterEventHandler()
        {
            Console.WriteLine("unregistering event handler");
            Console.Out.Flush();
            XomControl.ControlRequestEvent -= m_xomControlEventHandler;
        }

        [Test]
        public void SendRequest()
        {
            Console.WriteLine("Creating XomAdminSession for SendRequest tests");
            Console.Out.Flush();
            XomAdminSession xomAdminSession = CreateSession();
            Console.WriteLine("XomAdminSession object created");
            Console.Out.Flush();

            // test parameter validation
            Console.WriteLine("Testing parameter validation");
            Console.Out.Flush();
            string sRequest = null;
            int iTimeoutMilliseconds = 10000;
            string[] rgsResponses = null;
            int hrResultCode = 0;
            bool bThrown = false;
            try
            {
                xomAdminSession.SendRequest(sRequest, iTimeoutMilliseconds, out rgsResponses, out hrResultCode);
            }
            catch (ArgumentNullException e)
            {
                bThrown = true;
                Assert.AreEqual("sRequest", e.ParamName);
            }
            Assert.IsTrue(bThrown);
            Console.WriteLine("Parameter validation tests complete");

            Console.WriteLine("Testing 'list' request");
            Console.Out.Flush();
            sRequest = "list";
            rgsResponses = null;
            hrResultCode = 0;
            Console.WriteLine("Sending request to admin process: " + sRequest);
            Console.Out.Flush();
            xomAdminSession.SendRequest(
                sRequest, 
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            // confirm that one of the responses is the XomTest component, and output
            // the responses to the console while we're at it.
            bool bFound = false;
            foreach (string sResponse in rgsResponses)
            {
                Console.Write(sResponse);
                if (sResponse.Trim().EndsWith("XomTest"))
                {
                    bFound = true;
                }
            }
            Console.Out.Flush();
            Assert.AreEqual(true, bFound);

            Console.WriteLine("Testing 'help' request");
            Console.Out.Flush();
            sRequest = "help";
            Console.WriteLine("Sending request to admin process: " + sRequest);
            Console.Out.Flush();
            xomAdminSession.SendRequest(
                sRequest, 
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            foreach (string sResponse in rgsResponses)
            {
                Console.Write(sResponse);
            }
            Console.Out.Flush();

            Console.WriteLine("Testing 'exec :XomTest help' request");
            Console.Out.Flush();
            sRequest = "exec :XomTest help";
            Console.WriteLine("Sending request to admin process: " + sRequest);
            Console.Out.Flush();
            xomAdminSession.SendRequest(
                sRequest, 
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            foreach (string sResponse in rgsResponses)
            {
                Console.Write(sResponse);
            }
            Console.Out.Flush();

        }

        [Test]
        public void SendCommand()
        {
            Console.WriteLine("Creating XomAdminSession for SendCommand tests");
            Console.Out.Flush();
            XomAdminSession xomAdminSession = CreateSession();
            Console.WriteLine("XomAdminSession object created");
            Console.Out.Flush();

            // test parameter validation
            Console.WriteLine("Testing parameter validation");
            Console.Out.Flush();
            string sProcess = null;
            string sComponent = null;
            string sCommand = "not null";
            int iTimeoutMilliseconds = 10000;
            string[] rgsResponses = null;
            int hrResultCode = 0;
            bool bThrown = false;
            try
            {
                xomAdminSession.SendCommand(
                    sProcess, 
                    sComponent, 
                    sCommand, 
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
            }
            catch (ArgumentNullException e)
            {
                bThrown = true;
                Assert.AreEqual("sProcess and sComponent", e.ParamName);
            }
            Assert.IsTrue(bThrown);

            sProcess = "not null";
            sComponent = "not null";
            sCommand = null;
            rgsResponses = null;
            hrResultCode = 0;
            bThrown = false;
            try
            {
                xomAdminSession.SendCommand(
                    sProcess, 
                    sComponent, 
                    sCommand, 
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
            }
            catch (ArgumentNullException e)
            {
                bThrown = true;
                Assert.AreEqual("sCommand", e.ParamName);
            }
            Assert.IsTrue(bThrown);

            Console.WriteLine("Parameter validation tests complete");

            // test sending command by process name
            Console.WriteLine("Sending help command to process nunit-gui");
            Console.Out.Flush();
            sProcess = "nunit-gui";
            sComponent = null;
            sCommand = "help";
            rgsResponses = null;
            hrResultCode = 0;
            xomAdminSession.SendCommand(
                sProcess, 
                sComponent,
                sCommand,
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            // should be only one result block
            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            Assert.AreEqual(1, rgsResponses.Length);

            // display the help text
            Console.WriteLine("Response text:");
            Console.Write(rgsResponses[0]);
            Console.WriteLine("Finished sending help command to process nunit-gui");
            Console.Out.Flush();

            // test sending command by component name
            Console.WriteLine("Sending help command to component XomTest");
            Console.Out.Flush();
            sProcess = null;
            sComponent = "XomTest";
            sCommand = "help";
            rgsResponses = null;
            hrResultCode = 0;
            xomAdminSession.SendCommand(
                sProcess, 
                sComponent,
                sCommand,
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            // should be only one result block
            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            Assert.AreEqual(1, rgsResponses.Length);

            // display the help text
            Console.WriteLine("Response text:");
            Console.Write(rgsResponses[0]);
            Console.WriteLine("Finished sending help command to component XomTest");
            Console.Out.Flush();

            // test sending command by process and component name
            Console.WriteLine("Sending help command to process:component nunit-gui:XomTest");
            Console.Out.Flush();
            sProcess = "nunit-gui";
            sComponent = "XomTest";
            sCommand = "help";
            rgsResponses = null;
            hrResultCode = 0;
            xomAdminSession.SendCommand(
                sProcess, 
                sComponent,
                sCommand,
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            // should be only one result block
            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            Assert.AreEqual(1, rgsResponses.Length);

            // display the help text
            Console.WriteLine("Response text:");
            Console.Write(rgsResponses[0]);
            Console.WriteLine("Finished sending help command to process:component nunit-gui:XomTest");
            Console.Out.Flush();

            // test sending a non-help command
            Console.WriteLine("Sending test1 command to process:component nunit-gui:XomTest");
            Console.Out.Flush();
            sProcess = "nunit-gui";
            sComponent = "XomTest";
            sCommand = "test1";
            rgsResponses = null;
            hrResultCode = 0;
            xomAdminSession.SendCommand(
                sProcess, 
                sComponent,
                sCommand,
                iTimeoutMilliseconds,
                out rgsResponses, 
                out hrResultCode);

            // result code should be 0
            Console.WriteLine("hrResultCode: " + hrResultCode);
            Assert.AreEqual(0, hrResultCode);

            // should be only one result block
            Console.WriteLine("Number of response blocks: " + rgsResponses.Length);
            Assert.AreEqual(1, rgsResponses.Length);

            // display the response text
            Console.WriteLine("Response text:");
            Console.Write(rgsResponses[0]);
            Console.WriteLine("Finished sending test1 command to process:component nunit-gui:XomTest");
            Console.Out.Flush();

            // test sending a command that we expect to timeout
            bThrown = false;
            try
            {
                Console.WriteLine("Sending slow command to process:component nunit-gui:XomTest");
                Console.Out.Flush();
                sProcess = "nunit-gui";
                sComponent = "XomTest";
                sCommand = "slow";
                rgsResponses = null;
                hrResultCode = 0;
                iTimeoutMilliseconds = 100;
                xomAdminSession.SendCommand(
                    sProcess, 
                    sComponent,
                    sCommand,
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
            }
            catch (XomException e)
            {
                bThrown = true;
                Assert.IsTrue(e.Message.IndexOf("timeout") != -1);
            }
            Assert.IsTrue(bThrown);

            Console.WriteLine("Slow command timed out as expected");
        }

        [Test]
        public void XomProcessComponentPair()
        {
            // test parameter validation on the constructor
            Console.WriteLine("Testing parameter validation on XomProcessComponentPair");
            XomProcessComponentPair xomProcessComponentPair = null;
            bool bThrown = false;
            try
            {
                xomProcessComponentPair = new XomProcessComponentPair(null, "compoenent");
            }
            catch (ArgumentNullException e)
            {
                Assert.AreEqual("sProcess", e.ParamName);
                bThrown = true;
            }
            Assert.IsTrue(bThrown);

            bThrown = false;
            try
            {
                xomProcessComponentPair = new XomProcessComponentPair("process", null);
            }
            catch (ArgumentNullException e)
            {
                Assert.AreEqual("sComponent", e.ParamName);
                bThrown = true;
            }
            Assert.IsTrue(bThrown);
            Console.WriteLine("Parameter validation tests complete");

            // test the properties
            Console.WriteLine("Testing properties on XomProcessComponentPair");
            xomProcessComponentPair = new XomProcessComponentPair("process", "component");
            Assert.AreEqual("process", xomProcessComponentPair.Process);
            Assert.AreEqual("component", xomProcessComponentPair.Component);
            Console.WriteLine("Property tests complete ");
        }

        [Test]
        public void List()
        {
            Console.WriteLine("Creating XomAdminSession for List tests");
            Console.Out.Flush();
            XomAdminSession xomAdminSession = CreateSession();
            Console.WriteLine("XomAdminSession object created");

            // no parameter validation to test

            Console.WriteLine("Testing List method");
            Console.Out.Flush();
            XomProcessComponentPair[] rgXomProcessComponentPair = null;
            int iTimeoutMilliseconds = 10000;
            rgXomProcessComponentPair = xomAdminSession.List(iTimeoutMilliseconds);

            // we expect two process/compoennt pairs in this unit test
            // xmgmtsrv:xmgmtsrv
            // nunit-gui:XomTest

            Assert.AreEqual(2, rgXomProcessComponentPair.Length);
            Assert.AreEqual("xmgmtsrv", rgXomProcessComponentPair[0].Process);
            Assert.AreEqual("xmgmtsrv", rgXomProcessComponentPair[0].Component);
            Assert.AreEqual("nunit-gui", rgXomProcessComponentPair[1].Process);
            Assert.AreEqual("XomTest", rgXomProcessComponentPair[1].Component);

            Console.WriteLine("List method tests complete");
        }

        // this test is to confirm the behavior of the XomAdmin class when the 
        // socket connection to the admin server is broken
        [Test]
        public void SocketErrors()
        {
            // create the event we'll use to sync with the server thread
            m_eventPort = new AutoResetEvent(false);

            // start up the server thread
            Console.WriteLine("Starting FakeAdminServer thread");
            Console.Out.Flush();
            ThreadStart threadStart = new ThreadStart(FakeAdminServer);
            Thread thread = new Thread(threadStart);
            thread.Start();

            // now wait until we're signaled by the server thread that it
            // has started up and written the port number it's listening
            // on to m_iFakeServerPort.
            Console.WriteLine("Waiting for signal from FakeAdminServer thread");
            Console.Out.Flush();
            if (!m_eventPort.WaitOne(10000, false))
            {
                // we should've received a signal!
                Assert.Fail();
            }
            Console.WriteLine("Received signal from FakeAdminServer thread");
            Console.WriteLine("Server is listening on port " + m_iFakeServerPort);
            Console.Out.Flush();

            // get an IPAddress object for localhost
            Console.WriteLine("Getting IPAddress of localhost");
            Console.Out.Flush();
            IPHostEntry ipHostEntry = Dns.GetHostByName("localhost");

            // use the first address in the address list
            IPAddress ipAddress = ipHostEntry.AddressList[0];
            Console.WriteLine("IPAddress of localhost is " + ipAddress.ToString());

            // the server will accept the first connection attempt, and then
            // immediately close the socket. This means the XomAdminSession can be 
            // created, but the first operation will throw
            // second connection should be accepted and then broken
            // after one command is sent
            Console.WriteLine("Attempting to create first XomAdminSession, should succeed");
            Console.Out.Flush();
            XomAdminSession xomAdminSession = new XomAdminSession(ipAddress, m_iFakeServerPort);
            Console.WriteLine("XomAdminSession created successfully");
            Console.Out.Flush();
            bool bThrown = false;
            string sRequest = "help";
            int iTimeoutMilliseconds = 10000;
            string[] rgsResponses = null;
            int hrResultCode = -1;
            try
            {
                // attempt to send a request - should fail with a socket exception
                Console.WriteLine("Attempting to send admin request, should throw IOException");
                Console.Out.Flush();
                xomAdminSession.SendRequest(
                    sRequest, 
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
                // shouldn't get here
                Assert.Fail();
            }
            catch (IOException e)
            {
                Console.WriteLine("IOException caught as expected, details: " + e.Message);
                Console.Out.Flush();
                bThrown = true;
            }
            Assert.IsTrue(bThrown);

            // the server will break the second connection after it receives something from the 
            // client, so again, the first admin request should throw
            Console.WriteLine("Attempting to create second XomAdminSession, should succeed");
            Console.Out.Flush();
            xomAdminSession = new XomAdminSession(ipAddress, m_iFakeServerPort);
            Console.WriteLine("XomAdminSession created successfully");
            Console.Out.Flush();
            try
            {
                // attempt to send a request - should fail with a socket exception
                Console.WriteLine("Attempting to send admin request, should throw IOException");
                Console.Out.Flush();
                xomAdminSession.SendRequest(
                    sRequest, 
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
                // shouldn't get here
                Assert.Fail();
            }
            catch (IOException e)
            {
                Console.WriteLine("IOException caught as expected, details: " + e.Message);
                Console.Out.Flush();
                bThrown = true;
            }
            Assert.IsTrue(bThrown);

            // the server will break the connection after sending it's reply to the first
            // admin request, this still causes the first request to throw
            Console.WriteLine("Attempting to create third XomAdminSession, should succeed");
            Console.Out.Flush();
            xomAdminSession = new XomAdminSession(ipAddress, m_iFakeServerPort);
            Console.WriteLine("XomAdminSession created successfully");
            Console.Out.Flush();

            try
            {
                // this one should throw
                Console.WriteLine("Attempting to send admin request, should throw IOException");
                Console.Out.Flush();
                xomAdminSession.SendRequest(
                    sRequest, 
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
                // shouldn't get here
                Assert.Fail();
            }
            catch (IOException e)
            {
                Console.WriteLine("IOException caught as expected, details: " + e.Message);
                Console.Out.Flush();
                bThrown = true;
            }
            Assert.IsTrue(bThrown);

            Console.WriteLine("Waiting 10 seconds for FakeAdminServer thread to terminate");
            Console.Out.Flush();
            if (!thread.Join(10000))
            {
                Console.WriteLine("FakeAdminServer thread did not terminate properly");
                Console.WriteLine("terminating FakeAdminServer thread forcibly");
                Console.Out.Flush();
                thread.Abort();
                Assert.Fail();
            }
        }

        public void FakeAdminServer()
        {
            Console.WriteLine("FakeAdminServer thread starting");
            Console.WriteLine("Creating a socket to receive admin commands");
            Console.Out.Flush();
            Socket socketListen = new Socket(
                AddressFamily.InterNetwork, 
                SocketType.Stream, 
                ProtocolType.Tcp);

            // bind to a free address and port
            Console.WriteLine("Binding socket to a port");
            Console.Out.Flush();
            IPEndPoint ipEndPoint = new IPEndPoint(IPAddress.Any, 0);
            socketListen.Bind(ipEndPoint);

            // what are we bound to?
            ipEndPoint = (IPEndPoint)socketListen.LocalEndPoint;
            Console.WriteLine("Socket is bound to " 
                + ipEndPoint.Address 
                + ":" 
                + ipEndPoint.Port);
            Console.Out.Flush();
            m_iFakeServerPort = ipEndPoint.Port;
            Console.WriteLine("Signaling main thread that server is ready");
            m_eventPort.Set();

            // start listening for incoming connections...
            Console.WriteLine("Listening for incoming connections");
            Console.Out.Flush();
            socketListen.Listen(1);

            // with the first attempt, we turn around and break the connection
            // right away...
            Socket socketConnection = socketListen.Accept();
            Console.WriteLine("First connection accepted, closing socket immediately");
            Console.Out.Flush();
            socketConnection.Close();

            // with the second attempt, we wait until we've received something
            // and then break the connection
            socketConnection = socketListen.Accept();
            Console.WriteLine("First connection accepted, waiting for receive");
            Console.Out.Flush();
            byte[] rgb = new byte[1];
            socketConnection.Receive(rgb);
            Console.WriteLine("Byte received, closing socket");
            Console.Out.Flush();
            socketConnection.Close();

            // with the third attempt, we wait until we've received something
            // reply to it, and then break the connection
            socketConnection = socketListen.Accept();
            Console.WriteLine("First connection accepted, waiting for receive");
            Console.Out.Flush();
            socketConnection.Receive(rgb);
            Console.WriteLine("Byte received, sending reply");
            Console.Out.Flush();
            string s = "hello world";
            ASCIIEncoding asciiEncoding = new ASCIIEncoding();
            rgb = asciiEncoding.GetBytes(s.ToCharArray());
            socketConnection.Send(rgb);
            Console.WriteLine("Reply sent, closing socket");
            Console.Out.Flush();
            socketConnection.Close();

            Console.WriteLine("Shutting down and closing listening socket");
            Console.Out.Flush();
            socketListen.Shutdown(SocketShutdown.Both);
            socketListen.Close();
            Console.WriteLine("FakeAdminServer thread ending");
            Console.Out.Flush();
        }

        private static XomAdminSession CreateSession()
        {
            // get an IPAddress object for localhost
            Console.WriteLine("Getting IPAddress of localhost");
            Console.Out.Flush();
            IPHostEntry ipHostEntry = Dns.GetHostByName("localhost");

            // use the first address in the address list
            IPAddress ipAddress = ipHostEntry.AddressList[0];
            Console.WriteLine("IPAddress of localhost is " + ipAddress.ToString());

            // try to connect to the management process on localhost
            Console.WriteLine("XonAdminSession constructor - connecting to admin process");
            Console.WriteLine(
                "Note: Xbox Online Management Service must be installed and started on localhost "
                + "for this unit test to be successful");
            Console.WriteLine("To install, run xmgmtsrv.exe -install");
            Console.WriteLine("To confirm install and start, use the services manager");
            Console.Out.Flush();
            XomAdminSession xomAdminSession = new XomAdminSession(ipAddress);
            Console.WriteLine("XonAdminSession sucessfully created");

            return xomAdminSession;
        }

        public void OnControlRequest2(object sender, ControlRequestEventArgs args)
        {
            switch(args.Command)
            {
            case "help":
                XomControlConnection.SendMessage(
                    "Test harness supports the following fake commands:\r\n" 
                    + "  test1\r\n"
                    + "  test2\r\n"
                    + "  slow\r\n"
                    , args.RequestId);
                args.Handled = true;
                break;
            case "test1":
                XomControlConnection.SendMessage(
                    "test 1 command invoked\r\n",
                    args.RequestId);
                args.Handled = true;
                break;
            case "test2":
                XomControlConnection.SendMessage(
                    "test2 command invoked\r\n",
                    args.RequestId);
                args.Handled = true;
                break;
            case "slow":
                Thread.Sleep(1000);
                XomControlConnection.SendMessage(
                    "slow command invoked\r\n",
                    args.RequestId);
                args.Handled = true;
                break;
            }
        }        
    }
}

namespace xonline.server.mgmt.test.mc 
{
    // XomLogTarget references the ToStr static method of the SGInfo class
    // Including sginfo.cs brings in a boatload of new dependencies, and it's only
    // used for some debug spew, so I'm stubbing it out so we don't have to 
    // use the real SGInfo class
    public class SGInfo
    {
        public static string ToStr()
        {
            return String.Empty;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\ProtocolTest\ProtocolTest\xmgmtTestModuleMain.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Threading;

using xonline.common.service;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.config;


namespace xonline.common.mgmt.test
{
    public class xmgmtTestModule
    {
        public xmgmtTestModule ()
        {
            init();
        }

        private void init()
        {
            // Tell XMgmt that we want our handler called for control requests
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(xmgmtTestCallback.OnControlRequest);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\xmgmtcs\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\ProtocolTest\ProtocolTest\xmgmtTestModuleMgmt.cs ===
using System;

using xonline.common.config;
using xonline.common.mgmt;


namespace xonline.common.mgmt.test
{
    public class xmgmtTestCallback
    {
        private const string c_szHelpText = @"
            xmgmt Test Module Help:
                reload          : Does nothing
                list            : Does nothing
                healthcheck     : Prints out some random junk to show this is working.
            ";

        //==============================================================================
        // OnControlRequest: Called by Xmgmt when a control request / command is sent
        //==============================================================================
        public static void OnControlRequest ( object sender, ControlRequestEventArgs args )
        {
            string str = null;
            try
            {
                switch (args.Command)
                {
                    case "help":
                        str = c_szHelpText;
                        break;
                    case "reload":
                        str = "Reload placeholder.";
                        break;
                    case "list":
                        str = "List placeholder.";
                        break;
                    case "healthcheck":
                        str = "Healthcheck information: None";
                        break;
                    case "getstring":
                        str = GetString(Convert.ToInt32(args.CommandArgs[0]));
                        break;
                    case "echo":
                        str = args.CommandArgs[0];
                        break;
                   
                };
            }
            catch (Exception ex)
            {
                str = "Error:" + ex.ToString();
            }

            if (str != null)
            {
                XomControlConnection.SendMessage(str, args.RequestId);
                args.Handled = true;
            }
        }

        private static string GetString(int numChar)
        {
            string tempString= "";
            Random r = new Random(numChar);

            for(int i = 0; i < numChar; i++)
            {
                tempString = tempString + Convert.ToChar(r.Next(32, 126));
            }

            return tempString;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\mclogtest\MCLogTest.cs ===
using System;
using System.Threading;
using xonline.common.mgmt;
using xonline.common.service;

[assembly: XomAreaDefinition(XomAreaName.log)]

namespace xonline.server.mgmt.test.mclogtest 
{
    class MCLogTest
    {
        static int _nLogsPerThread = 400;
        static int _msSleepPerLog = 100;
        static int _nThreads = 20;

        static void LoggingThreadMethod()
        {
            for( int i = 0; i < _nLogsPerThread; i++ )
            {
                // Xom.Log(XomAreaName.log, "This is a test" );
              Xom.NtEvent( XEvent.Id.MGMT_GENERIC_ERROR_5, "This is a test" );
                Thread.Sleep( _msSleepPerLog );
            }
        }

        [STAThread]
        static void Main(string[] args)
        {
            Console.WriteLine( "Starting logging tests ({0} threads)...", _nThreads );
            XomLoggingControl.Init();

            Thread[] rgThreads = new Thread[ _nThreads ];

            for( int i = 0; i < _nThreads; i++ )
            {
                rgThreads[ i ] = new Thread( new ThreadStart( LoggingThreadMethod ) );
                rgThreads[ i ].Start();
            }

            Thread.Sleep( 10000 );

            for( int i = 0; i < _nThreads; i++ )
            {
                rgThreads[ i ].Join();
            }

            XomLoggingControl.Close();
            Console.WriteLine( "Done logging tests." );
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtc\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtc\precomp.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	xnqparse.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtc\precomp.h ===
#ifndef _PRECOMP_H_
#define _PRECOMP_H_

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>
#include <process.h>

#define INCL_WINSOCK_API_TYPEDEFS 1
#include <winsock2.h>
#include <wsockntp.h>
#include <Iphlpapi.h>

#ifndef ARRAY_ELEMENTS
#define ARRAY_ELEMENTS(x) (sizeof(x)/sizeof(x[0]))
#endif

#include <atlbase.h>
#include <wmsstd.h>
#include <xalloc.h>
#include <ntservice.h>
#include <servsock.h>
#include <servpipe.h>
#include <vptrarr.h>
#include <xomcontrolprot.h>
#include <xlocks.h>
#include <tcpcnt.h>
#include <xmgmt.h>
#include <xomcmmon.h>
#include <xomadmin.h>
#include <vavltable.h>
#include <xomsettings.h>
#include <eventthrottle.h>
#include <xomlggng.h>
#include <xlocks.h>

using namespace xlocks;

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers

#ifndef ASSERT
#define ASSERT XONASSERT
#endif


#endif // #ifndef _XCSSERVER_PRECOMP_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\throttletest\ThrottleTest.cpp ===
#include <windows.h>
#include <winsock.h>
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "EventThrottle.h"
#include "XEventIDs.h"


//////////////////////////////////////////////////////////////////////////////
typedef CEventThrottle
        <
            50000,      // wBaseEventId
            4000,       // wNumEvents
            5009,       // wIPHashSize
            1000000,    // 1MB of hash tables
            1000000     // 1MB of hash entries
        > CBasicEventThrottle;

typedef CEventThrottle
        <
            50000,      // wBaseEventId
            4000,       // wNumEvents
            89,         // wIPHashSize
            1000000,    // 1MB of hash tables
            1000000     // 1MB of hash entries
        > CStressEventThrottle;


//////////////////////////////////////////////////////////////////////////////
CRITICAL_SECTION g_cs;
CStressEventThrottle *g_pET;
HANDLE g_hevtShutdown;

struct THREAD_PARAMS
{
    DWORD dwNumThreads;
    DWORD dwNumIPs;
    WORD wStartEvent;
    WORD wNumEvents;

} g_rgThreadParams[] =
{
    { 20,   1000, 50000, 100 },
    { 5,    1,    50100, 1 }
};

DWORD WINAPI EventThreadProc( void *pvParam )
{
    THREAD_PARAMS *pParams = (THREAD_PARAMS *)pvParam;

    EnterCriticalSection( &g_cs );

    printf( "Starting thread id %d:  %d IPs, events %d-%d\n",
        GetCurrentThreadId(), pParams->dwNumIPs, pParams->wStartEvent, pParams->wStartEvent + pParams->wNumEvents - 1 );

    LeaveCriticalSection( &g_cs );

    DWORD dwIna;
    BOOL fAllow;
    DWORD dwNumSkips;
    DWORD dwNumSkipsTotal;
    DWORD dwRecentRate;

    QWORD hnsFakeClock = 0;
    DWORD dwAllowed = 0;
    DWORD dwNotAllowed = 0;
    DWORD dwTotalSkipped = 0;

    for( WORD wEvent = pParams->wStartEvent; wEvent < pParams->wStartEvent + pParams->wNumEvents; wEvent++ )
    {
        EnterCriticalSection( &g_cs );

        // g_pET->InitToMinimumDistance( wEvent, 100, TRUE );
        g_pET->Initialize( wEvent, CStressEventThrottle::SOMETIMES_ALLOW, FALSE, 0, 100, TRUE );

        LeaveCriticalSection( &g_cs );
    }

    while( TRUE )
    {
        DWORD dwWaitRes = WaitForSingleObject( g_hevtShutdown, 0 );

        if( dwWaitRes != WAIT_TIMEOUT )
        {
            break;
        }

        for( DWORD i = 0; i < 1000; i++ )
        {
            hnsFakeClock += 10;

            //
            // Pseudo-randomly populate the IP address from the given range
            //
            dwIna = 1 + ( rand() % pParams->dwNumIPs );

            WORD wEventID = pParams->wStartEvent + ( rand() % pParams->wNumEvents );

            EnterCriticalSection( &g_cs );

            BOOL fOk = g_pET->ProcessEvent(
                            hnsFakeClock,
                            wEventID,
                            (WORD) i,               // packet size
                            &dwIna,                 // IP address
                            &fAllow,
                            &dwNumSkips,
                            &dwNumSkipsTotal,
                            &dwRecentRate );

            LeaveCriticalSection( &g_cs );

            if( !fOk )
            {
                goto failed;
            }

            if( fAllow )
            {
                dwAllowed++;
                dwTotalSkipped += dwNumSkips;
            }
            else
            {
                dwNotAllowed++;
            }
        }
    }

    EnterCriticalSection( &g_cs );

    printf( "Thread id %d:  %d allowed, %d not\n", GetCurrentThreadId(), dwAllowed, dwNotAllowed );

    LeaveCriticalSection( &g_cs );

failed:
    return( 0 );
}

BOOL TestMultiThreading()
{
    BOOL fPassed = FALSE;

    printf( "Testing multithreading...\n" );

    InitializeCriticalSection( &g_cs );
    g_hevtShutdown = CreateEvent( NULL, TRUE, FALSE, NULL );

    g_pET = new CStressEventThrottle;

    //////////////////////////////////////////////////////////////////////////
    //
    // Cheezy multi-threading approach that leaks and has shutdown issues -
    // please don't copy this code anywhere important
    //
    for( int i = 0; i < dimensionof( g_rgThreadParams ); i++ )
    {
        for( DWORD j = 0; j < g_rgThreadParams[ i ].dwNumThreads; j++ )
        {
            CreateThread( NULL, 0, EventThreadProc, (void *) &g_rgThreadParams[ i ], 0, NULL );
        }
    }

    //
    // Wait a while for threads to execute
    //
    Sleep( 15000 );

    SetEvent( g_hevtShutdown );

    Sleep( 5000 );

    //////////////////////////////////////////////////////////////////////////
    fPassed = TRUE;

//failed:
    delete g_pET;

    printf( "Multithreaded testing = %s\n\n", fPassed ? "passed" : "failed" );

    DeleteCriticalSection( &g_cs );
    CloseHandle( g_hevtShutdown );

    return( fPassed );
}


//////////////////////////////////////////////////////////////////////////////
BOOL TestIPTracking()
{
    BOOL fPassed = FALSE;

    printf( "Testing IP tracking...\n" );

    CBasicEventThrottle *pBET = new CBasicEventThrottle;

    DWORD dwIna;
    BOOL fAllow;
    DWORD dwNumSkips;
    DWORD dwNumSkipsTotal;
    DWORD dwRecentRate;

    QWORD hnsFakeClock;
    DWORD dwAllowed;
    DWORD dwNotAllowed;
    DWORD dwTotalSkipped;


    //////////////////////////////////////////////////////////////////////////
    //
    // Minimum distance IP tracking tests
    //
    struct
    {
        WORD wNumIPs;
        DWORD hnsMinDistance;
        DWORD hnsLoopIncrement;
        DWORD dwNumLoops;
        DWORD dwAllowed;
        DWORD dwNotAllowed;

    } rgMinDistTests[] =
    {
        { 1,    10000000, 1,        10000001,   2,          9999999 },
        { 2,    10000000, 10,       5000000,    10,         4999990 },
        { 10,   10000000, 100,      2000000,    200,        1999800 },
        { 100,  10000000, 1000,     1000000,    9958,       990042 },
        { 1000, 10000000, 10000,    5000000,    2501253,    2498747 },
        { 9999, 10000000, 10000,    10000000,   9076425,    923575 },
        { 50000, 10000000, 1000,    10000000,   7662574,    2337426 }
    };

    printf( "\n" );

    for( int iLoop = 0; iLoop < dimensionof( rgMinDistTests ); iLoop++ )
    {
        if( rgMinDistTests[ iLoop ].hnsLoopIncrement >= 10000 )
        {
            printf( "    ProcessEvent() %d IPs w/ min distance = %d ms (%d ms increments)\n",
                rgMinDistTests[ iLoop ].wNumIPs,
                rgMinDistTests[ iLoop ].hnsMinDistance / 10000,
                rgMinDistTests[ iLoop ].hnsLoopIncrement / 10000 );
        }
        else
        {
            printf( "    ProcessEvent() %d IPs w/ min distance = %d ms (%d hns increments)\n",
                rgMinDistTests[ iLoop ].wNumIPs,
                rgMinDistTests[ iLoop ].hnsMinDistance / 10000,
                rgMinDistTests[ iLoop ].hnsLoopIncrement );
        }

        if( !pBET->Initialize(
                            CBasicEventThrottle::ALL_EVENTS,
                            CBasicEventThrottle::SOMETIMES_ALLOW,
                            FALSE,
                            0,
                            rgMinDistTests[ iLoop ].hnsMinDistance,
                            TRUE ) )
        {
            printf( "InitToMinimumDistance( ALL_EVENTS ) failed!\n" );
            goto failed;
        }

        hnsFakeClock = 5000000000;
        dwAllowed = 0;
        dwNotAllowed = 0;
        dwTotalSkipped = 0;

        srand( iLoop + 2 );

        for( DWORD i = 0; i < rgMinDistTests[ iLoop ].dwNumLoops; i++ )
        {
            if( i > 0 )
            {
                hnsFakeClock += rgMinDistTests[ iLoop ].hnsLoopIncrement;
            }

            //
            // Pseudo-randomly populate the IP address from the given range
            //
            dwIna = 1 + ( rand() % rgMinDistTests[ iLoop ].wNumIPs );

            if( !pBET->ProcessEvent(
                            hnsFakeClock,
                            XEVENT_MGMT_GENERIC_ERROR_6,
                            (WORD) i,               // packet size
                            &dwIna,                 // IP address
                            &fAllow,
                            &dwNumSkips,
                            &dwNumSkipsTotal,
                            &dwRecentRate ) )
            {
                printf( "ProcessEvent() #%d w/ no settings failed!\n", i );
                goto failed;
            }

            if( fAllow )
            {
                dwAllowed++;
                dwTotalSkipped += dwNumSkips;
            }
            else
            {
                dwNotAllowed++;
            }
        }

        printf( "        %d processed (%d/%d)\n", i, dwAllowed, dwNotAllowed );

        if( ( dwAllowed != rgMinDistTests[ iLoop ].dwAllowed ) ||
            ( dwNotAllowed != rgMinDistTests[ iLoop ].dwNotAllowed ) )
        {
            printf( "    FAILED due to unexpected results\n" );
            goto failed;
        }
    }


    //////////////////////////////////////////////////////////////////////////
    //
    // Hash abuse IP tracking tests
    //
    struct
    {
        WORD wIPIncrement;
        DWORD hnsMinDistance;
        DWORD hnsLoopIncrement;
        DWORD dwNumLoops;

    } rgAbuseTests[] =
    {
        { 1,    10000000, 1,    100000 },
        { 2,    10000000, 1,    100000 },
        { 10,   10000000, 1,    100000 },
        { 5009, 10000000, 1,    100000 },
        { 1,    10000000, 10,   100000 },
        { 2,    10000000, 10,   100000 },
        { 10,   10000000, 10,   100000 },
        { 5009, 10000000, 10,   100000 },
        { 1,    10000000, 100,  100000 },
        { 2,    10000000, 100,  100000 },
        { 10,   10000000, 100,  100000 },
        { 5009, 10000000, 100,  100000 }
    };

    printf( "\n" );

    for( int iLoop = 0; iLoop < dimensionof( rgAbuseTests ); iLoop++ )
    {
        if( rgAbuseTests[ iLoop ].hnsLoopIncrement >= 10000 )
        {
            printf( "    ProcessEvent() %d IP incr w/ min distance = %d ms (%d ms increments)\n",
                rgAbuseTests[ iLoop ].wIPIncrement,
                rgAbuseTests[ iLoop ].hnsMinDistance / 10000,
                rgAbuseTests[ iLoop ].hnsLoopIncrement / 10000 );
        }
        else
        {
            printf( "    ProcessEvent() %d IP incr w/ min distance = %d ms (%d hns increments)\n",
                rgAbuseTests[ iLoop ].wIPIncrement,
                rgAbuseTests[ iLoop ].hnsMinDistance / 10000,
                rgAbuseTests[ iLoop ].hnsLoopIncrement );
        }

        if( !pBET->Initialize(
                            CBasicEventThrottle::ALL_EVENTS,
                            CBasicEventThrottle::SOMETIMES_ALLOW,
                            FALSE,
                            0,
                            rgAbuseTests[ iLoop ].hnsMinDistance,
                            TRUE ) )
        {
            printf( "InitToMinimumDistance( ALL_EVENTS ) failed!\n" );
            goto failed;
        }

        hnsFakeClock = 5000000000;
        DWORD dwIP = 0;
        DWORD dwStartTime = GetTickCount();

        for( DWORD i = 0; i < rgAbuseTests[ iLoop ].dwNumLoops; i++ )
        {
            if( i > 0 )
            {
                hnsFakeClock += rgAbuseTests[ iLoop ].hnsLoopIncrement;
                dwIP += rgAbuseTests[ iLoop ].wIPIncrement;
            }

            //
            // Pseudo-randomly populate the IP address from the given range
            //
            if( !pBET->ProcessEvent(
                            hnsFakeClock,
                            XEVENT_MGMT_GENERIC_ERROR_7,
                            (WORD) i,               // packet size
                            &dwIP,                  // IP address
                            &fAllow,
                            &dwNumSkips,
                            &dwNumSkipsTotal,
                            &dwRecentRate ) )
            {
                printf( "ProcessEvent() #%d w/ no settings failed!\n", i );
                goto failed;
            }
        }

        printf( "        %d processed in %d ms\n", i, GetTickCount() - dwStartTime );
    }

    //////////////////////////////////////////////////////////////////////////
    fPassed = TRUE;

failed:
    delete pBET;

    printf( "IP tracking testing = %s\n\n", fPassed ? "passed" : "failed" );

    return( fPassed );
}

//////////////////////////////////////////////////////////////////////////////
BOOL TestBasicProcessing()
{
    BOOL fPassed = FALSE;

    CBasicEventThrottle *pBET = new CBasicEventThrottle;

    printf( "Testing basic event processing... (size = %dKB)\n", sizeof( *pBET ) / 1000 );

    DWORD dwIna;
    BOOL fAllow;
    DWORD dwNumSkips;
    DWORD dwNumSkipsTotal;
    DWORD dwRecentRate;

    QWORD hnsFakeClock;
    DWORD dwAllowed;
    DWORD dwNotAllowed;
    DWORD dwTotalSkipped;

    //////////////////////////////////////////////////////////////////////////
    //
    // Parameter validation tests
    //
    printf( "\n    ProcessEvent() params\n" );

#if DBG
    if( pBET->ProcessEvent( 0, 50000, 0, &dwIna, &fAllow, &dwNumSkips, &dwNumSkipsTotal, &dwRecentRate ) ||
        pBET->ProcessEvent( 1, 50000, 0, &dwIna, NULL,    &dwNumSkips, &dwNumSkipsTotal, &dwRecentRate ) ||
        pBET->ProcessEvent( 1, 50000, 0, &dwIna, &fAllow, NULL,        &dwNumSkipsTotal, &dwRecentRate ) ||
        pBET->ProcessEvent( 1, 50000, 0, &dwIna, &fAllow, &dwNumSkips, NULL,             &dwRecentRate ) ||
        pBET->ProcessEvent( 1, 50000, 0, &dwIna, &fAllow, &dwNumSkips, &dwNumSkipsTotal, NULL ) )
    {
        printf( "ProcessEvent( bad params ) failed!\n" );
        goto failed;
    }
#endif

    //
    // Default settings test - by default there is no rate enforcement or clock enforcement.
    // Simulate processing 10M events in a second.
    //
    hnsFakeClock = 5000000000;

    for( int i = 0; i < 10000000; i++ )
    {
        hnsFakeClock++;

        if( !pBET->ProcessEvent(
                        hnsFakeClock,
                        XEVENT_MGMT_GENERIC_ERROR_8,
                        (WORD) i,                           // packet size
                        ( ( i % 2 ) == 0 ) ? NULL : &dwIna, // IP address
                        &fAllow,
                        &dwNumSkips,
                        &dwNumSkipsTotal,
                        &dwRecentRate ) )
        {
            printf( "ProcessEvent() #%d w/ no settings failed!\n", i );
            goto failed;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    //
    // Minimum distance tests (no IP tracking)
    //
    struct
    {
        DWORD hnsMinDistance;
        DWORD hnsLoopIncrement;
        DWORD dwNumLoops;
        DWORD dwAllowed;
        DWORD dwNotAllowed;
        DWORD dwTotalSkipped;

    } rgMinDistTests[] =
    {
        { 10000000, 1,        10000001,   2,          9999999,    9999999 },
        { 10000000, 10,       10000001,   11,         9999990,    9999990 },
        { 10000000, 100,      10000001,   101,        9999900,    9999900 },
        { 10000000, 1000,     10000001,   1001,       9999000,    9999000 },
        { 10000000, 10000,    1000001,    1001,       999000,     999000 },
        { 10000000, 100000,   1000001,    10001,      990000,     990000 },
        { 10000000, 1000000,  1000001,    100001,     900000,     900000 },
        { 20000000, 10000000, 1000001,    500001,     500000,     500000 }
    };

    printf( "\n" );

    for( int iLoop = 0; iLoop < dimensionof( rgMinDistTests ); iLoop++ )
    {
        if( rgMinDistTests[ iLoop ].hnsLoopIncrement >= 10000 )
        {
            printf( "    ProcessEvent() w/ min distance = %d ms (%d ms increments)\n",
                rgMinDistTests[ iLoop ].hnsMinDistance / 10000,
                rgMinDistTests[ iLoop ].hnsLoopIncrement / 10000 );
        }
        else
        {
            printf( "    ProcessEvent() w/ min distance = %d ms (%d hns increments)\n",
                rgMinDistTests[ iLoop ].hnsMinDistance / 10000,
                rgMinDistTests[ iLoop ].hnsLoopIncrement );
        }

        if( !pBET->Initialize(
                            CBasicEventThrottle::ALL_EVENTS,
                            CBasicEventThrottle::SOMETIMES_ALLOW,
                            FALSE,
                            0,
                            rgMinDistTests[ iLoop ].hnsMinDistance ) )
        {
            printf( "InitToMinimumDistance( ALL_EVENTS ) failed!\n" );
            goto failed;
        }

        hnsFakeClock = 5000000000;
        dwAllowed = 0;
        dwNotAllowed = 0;
        dwTotalSkipped = 0;

        for( DWORD i = 0; i < rgMinDistTests[ iLoop ].dwNumLoops; i++ )
        {
            if( i > 0 )
            {
                hnsFakeClock += rgMinDistTests[ iLoop ].hnsLoopIncrement;
            }

            if( !pBET->ProcessEvent(
                            hnsFakeClock,
                            XEVENT_MGMT_GENERIC_ERROR_9,
                            (WORD) i,                           // packet size
                            ( ( i % 2 ) == 0 ) ? NULL : &dwIna, // IP address
                            &fAllow,
                            &dwNumSkips,
                            &dwNumSkipsTotal,
                            &dwRecentRate ) )
            {
                printf( "ProcessEvent() #%d w/ no settings failed!\n", i );
                goto failed;
            }

            if( fAllow )
            {
                dwAllowed++;
                dwTotalSkipped += dwNumSkips;
            }
            else
            {
                dwNotAllowed++;
            }
        }

        printf( "        %d processed (%d/%d): %d skipped\n", i, dwAllowed, dwNotAllowed, dwTotalSkipped );

        if( ( dwAllowed != rgMinDistTests[ iLoop ].dwAllowed ) ||
            ( dwNotAllowed != rgMinDistTests[ iLoop ].dwNotAllowed ) ||
            ( dwTotalSkipped != dwNumSkipsTotal ) ||
            ( dwTotalSkipped != rgMinDistTests[ iLoop ].dwTotalSkipped ) )
        {
            printf( "    FAILED due to unexpected results\n" );
            goto failed;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    //
    // Rate alert tests (no IP tracking)
    //
    WORD wEth = CBasicEventThrottle::ETHERNET_OVERHEAD_PER_PACKET;

    struct
    {
        WORD wAlertRateThreshold;
        WORD wAlertIntervalSecs;
        BOOL fAlertOnBytes;
        DWORD dwAlertBytesThreshold;
        WORD wPacketSize;
        DWORD hnsLoopIncrement;
        DWORD dwNumLoops;
        DWORD dwAllowed;
        DWORD dwNotAllowed;

    } rgRateAlertTests[] =
    {
        { 10,   60,     0,  0,      1,      1000000,  10000,    17,     9983 },
        { 10,   30,     0,  0,      2,      1000000,  10000,    34,     9966 },
        { 10,   60,     0,  0,      4,      2000000,  10000,    0,      10000 },
        { 10,   30,     0,  0,      8,      1111112,  10000,    0,      10000 },
        { 100,  5,      0,  0,      16,     100000,   10100,    21,     10079 },
        { 100,  1,      0,  0,      32,     100000,   10001,    100,    9901 },
        { 1000, 5,      0,  0,      64,     10000,    50000,    10,     49990 },

        { 0,    60,     1,  10 * (wEth + 1),    1,      1000000,  10000,    17,     9983 },
        { 0,    30,     1,  10 * (wEth + 2),    2,      1000000,  10000,    34,     9966 },
        { 0,    60,     1,  10 * (wEth + 4),    4,      2000000,  10000,    0,      10000 },
        { 0,    30,     1,  10 * (wEth + 8),    8,      1111112,  10000,    0,      10000 },
        { 0,    5,      1,  100 * (wEth + 16),  16,     100000,   10100,    21,     10079 },
        { 0,    1,      1,  100 * (wEth + 32),  32,     100000,   10001,    100,    9901 },
        { 0,    5,      1,  1000 * (wEth + 64), 64,     10000,    50000,    10,     49990 }
    };

    printf( "\n" );

    for( int iLoop = 0; iLoop < dimensionof( rgRateAlertTests ); iLoop++ )
    {
        if( rgRateAlertTests[ iLoop ].fAlertOnBytes )
        {
            printf( "    ProcessEvent() w/ rate alert @ %d bytes/sec every %d secs (one %d byte pkt/%d ms)\n",
                rgRateAlertTests[ iLoop ].dwAlertBytesThreshold,
                rgRateAlertTests[ iLoop ].wAlertIntervalSecs,
                rgRateAlertTests[ iLoop ].wPacketSize,
                rgRateAlertTests[ iLoop ].hnsLoopIncrement / 10000 );

            assert( rgRateAlertTests[ iLoop ].wAlertRateThreshold == 0 );

            if( !pBET->Initialize(
                                CBasicEventThrottle::ALL_EVENTS,
                                CBasicEventThrottle::SOMETIMES_ALLOW,
                                TRUE /* using bytes */,
                                rgRateAlertTests[ iLoop ].dwAlertBytesThreshold,
                                (QWORD) rgRateAlertTests[ iLoop ].wAlertIntervalSecs *
                                    CBasicEventThrottle::HNS_PER_SECOND ) )
            {
                printf( "InitToRateAlerts( ALL_EVENTS ) failed!\n" );
                goto failed;
            }
        }
        else
        {
            printf( "    ProcessEvent() w/ rate alert @ %d/sec every %d secs (%d ms increments)\n",
                rgRateAlertTests[ iLoop ].wAlertRateThreshold,
                rgRateAlertTests[ iLoop ].wAlertIntervalSecs,
                rgRateAlertTests[ iLoop ].hnsLoopIncrement / 10000 );

            assert( rgRateAlertTests[ iLoop ].dwAlertBytesThreshold == 0 );

            if( !pBET->Initialize(
                                CBasicEventThrottle::ALL_EVENTS,
                                CBasicEventThrottle::SOMETIMES_ALLOW,
                                FALSE /* not using bytes */,
                                rgRateAlertTests[ iLoop ].wAlertRateThreshold,
                                (QWORD) rgRateAlertTests[ iLoop ].wAlertIntervalSecs *
                                    CBasicEventThrottle::HNS_PER_SECOND ) )
            {
                printf( "InitToRateAlerts( ALL_EVENTS ) failed!\n" );
                goto failed;
            }
        }

        hnsFakeClock = 5000000000;
        dwAllowed = 0;
        dwNotAllowed = 0;

        for( DWORD i = 0; i < rgRateAlertTests[ iLoop ].dwNumLoops; i++ )
        {
            if( i > 0 )
            {
                hnsFakeClock += rgRateAlertTests[ iLoop ].hnsLoopIncrement;
            }

            if( !pBET->ProcessEvent(
                            hnsFakeClock,
                            XEVENT_MGMT_GENERIC_ERROR_10,
                            rgRateAlertTests[ iLoop ].wPacketSize,
                            ( ( i % 2 ) == 0 ) ? NULL : &dwIna, // IP address
                            &fAllow,
                            &dwNumSkips,
                            &dwNumSkipsTotal,
                            &dwRecentRate ) )
            {
                printf( "ProcessEvent() #%d w/ no settings failed!\n", i );
                goto failed;
            }

            if( fAllow )
            {
                dwAllowed++;

                if( FALSE )
                {
                    printf( "            Alert: Evt #%d @ time %d ms - recent rate = %d\n",
                        i, (DWORD)( ( hnsFakeClock - 5000000000 ) / 10000 ), dwRecentRate );
                }
            }
            else
            {
                dwNotAllowed++;
            }
        }

        printf( "        %d processed (%d/%d)\n", i, dwAllowed, dwNotAllowed );

        if( ( dwAllowed != rgRateAlertTests[ iLoop ].dwAllowed ) ||
            ( dwNotAllowed != rgRateAlertTests[ iLoop ].dwNotAllowed ) )
        {
            printf( "    FAILED due to unexpected results\n" );
            goto failed;
        }
    }

    //////////////////////////////////////////////////////////////////////////
    fPassed = TRUE;

failed:
    delete pBET;

    printf( "Basic event processing testing = %s\n\n", fPassed ? "passed" : "failed" );

    return( fPassed );
}


//////////////////////////////////////////////////////////////////////////////
BOOL TestInitMethods()
{
    BOOL fPassed = FALSE;

    printf( "Testing init functionality...\n" );

    CBasicEventThrottle *pBET = new CBasicEventThrottle;

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::ALWAYS_ALLOW ) )
    {
        printf( "Initialize( ALL_EVENTS, ALWAYS ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::NEVER_ALLOW ) )
    {
        printf( "Initialize( ALL_EVENTS, NEVER ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100 ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, FALSE, 100 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100 ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, TRUE, 100 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100,
                    1 ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, FALSE, 100, 1 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100,
                    1 ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, TRUE, 100, 1 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100,
                    10000000000 ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, FALSE, 100, 1E10 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100,
                    10000000000 ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, TRUE, 100, 1E10 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100,
                    10000000000,
                    TRUE ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, FALSE, 100, 1E10, TRUE ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    CBasicEventThrottle::ALL_EVENTS,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100,
                    10000000000,
                    TRUE ) )
    {
        printf( "Initialize( ALL_EVENTS, SOMETIMES, TRUE, 100, 1E10, TRUE ) failed!\n" );
        goto failed;
    }

    //////////////////////////////////////////////////////////////////////////
    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_11,
                    CBasicEventThrottle::ALWAYS_ALLOW ) )
    {
        printf( "Initialize( GENERIC_ERROR, ALWAYS ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_12,
                    CBasicEventThrottle::SOMETIMES_ALLOW ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_13,
                    CBasicEventThrottle::NEVER_ALLOW ) )
    {
        printf( "Initialize( GENERIC_ERROR, NEVER ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_14,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100 ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, FALSE, 100 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_15,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100 ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, TRUE, 100 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_16,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100,
                    1 ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, FALSE, 100, 1 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_17,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100,
                    1 ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, TRUE, 100, 1 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_18,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100,
                    10000000000 ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, FALSE, 100, 1E10 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_19,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100,
                    10000000000 ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, TRUE, 100, 1E10 ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_20,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    FALSE,
                    100,
                    10000000000,
                    TRUE ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, FALSE, 100, 1E10, TRUE ) failed!\n" );
        goto failed;
    }

    if( !pBET->Initialize(
                    XEVENT_MGMT_GENERIC_ERROR_21,
                    CBasicEventThrottle::SOMETIMES_ALLOW,
                    TRUE,
                    100,
                    10000000000,
                    TRUE ) )
    {
        printf( "Initialize( GENERIC_ERROR, SOMETIMES, TRUE, 100, 1E10, TRUE ) failed!\n" );
        goto failed;
    }


    if( pBET->Initialize( 49999, CBasicEventThrottle::SOMETIMES_ALLOW ) ||
        pBET->Initialize( 54000, CBasicEventThrottle::SOMETIMES_ALLOW ) ||
        pBET->Initialize( 0, CBasicEventThrottle::SOMETIMES_ALLOW ) ||
        pBET->Initialize( 50000, (CBasicEventThrottle::ALLOW_TYPE)( CBasicEventThrottle::ALWAYS_ALLOW - 1 ) ) ||
        pBET->Initialize( 50000, (CBasicEventThrottle::ALLOW_TYPE)( CBasicEventThrottle::NEVER_ALLOW + 1 ) ) )
    {
        printf( "Initialize( bad params ) failed!\n" );
        goto failed;
    }

    //////////////////////////////////////////////////////////////////////////
    fPassed = TRUE;

failed:
    delete pBET;

    printf( "Init functionality testing = %s\n\n", fPassed ? "passed" : "failed" );

    return( fPassed );
}


//////////////////////////////////////////////////////////////////////////////
void __cdecl main( int argc, char *argv[] )
{
    if( !TestInitMethods() )
    {
        return;
    }

    if( !TestBasicProcessing() )
    {
        return;
    }

    if( !TestIPTracking() )
    {
        return;
    }

    if( !TestMultiThreading() )
    {
        return;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\xmgmtcs\xmgmtcs.cs ===
using System;
using System.Net;
using xonline.common.tools.console;
using xonline.common.mgmt;

namespace xonline.server.mgmt.test.xmgmtcs 
{
    // this is a little command line driver around the XomAdmin class that 
    // it mimics the functionality of the -c 'console' mode of xmgmtc, but it
    // not meant to replace xmgmtc at this time. It's mostly here so I can
    // troubleshoot any problems that may arise using the C# XomAdmin class,
    public class XomAdminApp
    {
        public static int Main(string[] rgsArgs)
        {
            string[] rgsValidCommandLineArgs = {"c"};
            NamedArgParser namedArgParser = new NamedArgParser(rgsValidCommandLineArgs);
            if (!namedArgParser.Parse(rgsArgs))
            {
                Usage();
                return 1;
            }

            string sServer = namedArgParser["c"];
            if (sServer == null || sServer == String.Empty)
            {
                System.Console.WriteLine("Error: Server name or IP address is missing");
                Usage();
                return 1;
            }

            int i = RunConsole(sServer);
            return i;
        }

        private static int RunConsole(string sServer)
        {
            if (sServer == null)
            {
                throw new ArgumentNullException("sServer");
            }

            System.Console.WriteLine("Attempting to connect to server " + sServer);

            IPAddress ipAddress = null;
            try
            {
                ipAddress = IPAddress.Parse(sServer);
            }
            catch (FormatException)
            {
                // sServer is not parsable as an IP address, see if we can look it up 
                // through DNS...
                System.Console.WriteLine("Attempting to resolve hostname " + sServer);
                IPHostEntry ipHostEntry = Dns.GetHostEntry(sServer);
                if (ipHostEntry.AddressList.Length == 0)
                {
                    System.Console.WriteLine("Error: Unable to resolve hostname: " + sServer);
                    return 1;
                }

                // use the first address in IPHostEntry, whatever it is...
                ipAddress = ipHostEntry.AddressList[0];
            }

            // create the XomAdmin object
            System.Console.WriteLine("Attempting to connect to " + ipAddress.ToString());
            XomAdminSession xomAdminSession = new XomAdminSession(ipAddress);

            // now start requesting and processing commands
            System.Console.WriteLine("Connected to " + ipAddress.ToString());
            System.Console.WriteLine("Enter management requests at the '>' prompt below");
            System.Console.WriteLine("Enter help for a list of commands");
            System.Console.WriteLine("Enter helpwalk to see help for all process/components");
            System.Console.WriteLine("Enter quit to exit");

            int iTimeoutMilliseconds = 10000;
            while (true)
            {
                System.Console.Write(">");
                string sRequest = null;
                sRequest = System.Console.ReadLine();
                if (sRequest.Trim().ToUpper() == "QUIT")
                {
                    System.Console.WriteLine("Exiting...");
                    return 0;
                }
                else if (sRequest.Trim().ToUpper() == "HELPWALK")
                {
                    HelpWalk(xomAdminSession, iTimeoutMilliseconds);
                }
                else
                {
                    DoRequest(xomAdminSession, sRequest, iTimeoutMilliseconds);
                }
            }
        }

        private static void HelpWalk(XomAdminSession xomAdminSession, int iTimeoutMilliseconds)
        {
            // get the list of process component pairs
            XomProcessComponentPair[] rgXomProcessComponentPairs = xomAdminSession.List(iTimeoutMilliseconds);

            foreach (XomProcessComponentPair xomProcessComponentPair in rgXomProcessComponentPairs)
            {
                System.Console.WriteLine(
                    "help for " 
                    + xomProcessComponentPair.Process
                    + ":"
                    + xomProcessComponentPair.Component);

                string[] rgsResponses = null;
                int hrResultCode = -1;

                xomAdminSession.SendCommand(
                    xomProcessComponentPair.Process, 
                    xomProcessComponentPair.Component, 
                    "help", 
                    iTimeoutMilliseconds,
                    out rgsResponses, 
                    out hrResultCode);
                PrintResponse(rgsResponses, hrResultCode);
            }
        }

        private static void DoRequest(XomAdminSession xomAdminSession, string sRequest, int iTimeoutMilliseconds)
        {
            string[] rgsResponses = null;
            int hrResultCode = -1;

            xomAdminSession.SendRequest(
                sRequest,
                iTimeoutMilliseconds,
                out rgsResponses,
                out hrResultCode);
            PrintResponse(rgsResponses, hrResultCode);
        }

        private static void PrintResponse(string[] rgsResponses, int hrResultCode)
        {
            foreach (string sResponse in rgsResponses)
            {
                System.Console.Write(sResponse);
            }
            if (hrResultCode != 0)
            {
                System.Console.WriteLine("HR=" + hrResultCode.ToString("x"));
            }
        }

        private static void Usage()
        {
            //   0         1         2         3         4         5         6         7         8
            string[] rgsUsage = {
                "",
                "xmgmtcs.exe usage:",
                "  xmgmtcs.exe -c [<serverip>|<servername>]",
                "",
                "  xmgmtcs.exe opens a connection to the xmgmtsrv.exe process running on",
                "  <serverip> or <servername>, forwards requests typed into the console to that",
                "  process, and displays the results.",
                "",
                "  Enter 'quit' at the command prompt to exit xmgmtcs",
                "",
                "  Note: The purpose of this program is to allow troubleshooting of the ",
                "  XonAdminSession C# class. If you are performing routine server maintenance,",
                "  you should use xmgmtc.exe instead!",
                ""};

            foreach (string s in rgsUsage)
            {
                System.Console.WriteLine(s);
            }
        }
    }

    // XomLogTarget references the ToStr static method of the SGInfo class
    // Including sginfo.cs brings in a boatload of new dependencies, and it's only
    // used for some debug spew, so I'm stubbing it out so we don't have to 
    // use the real SGInfo class
    public class SGInfo
    {
        public static string ToStr()
        {
            return String.Empty;
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtc\main.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    main.cpp

Abstract:

--*/

#include "precomp.h"
#include <xmgmt.h>

#include <atlsafe.h>

#define MAX_INSTANCES 256

//
// named pipe for sharing remote debug trace among multiple instances of the 
// management framework console.
//

const WCHAR c_wszTraceNamedPipe[] = L"\\\\.\\pipe\\xmgmtctrace";
HANDLE g_rghNamedPipeClients[MAX_INSTANCES];
DWORD g_cNamedPipeClients = 0;
CReaderWriterLock3 g_lockNamedPipeClients;

struct traceBuffer
{
    in_addr     source;
    char        rgb[65536];
};

//
// We like colors in our messages
//

static const WORD c_CollorAttr[] = {
	/* LOW */     FOREGROUND_GREEN | FOREGROUND_RED,
	/* NORMAL */  FOREGROUND_GREEN | FOREGROUND_BLUE | FOREGROUND_RED,
	/* HIGH */    FOREGROUND_GREEN | FOREGROUND_RED  | FOREGROUND_INTENSITY,
	/* ERROR */   FOREGROUND_RED   | FOREGROUND_INTENSITY };

//
//
//

HRESULT g_hrThreadPipes = S_FALSE;
HRESULT g_hrThreadTrace = S_FALSE;

//
// Trace filters
//

CHAR g_szFilterProcessName[256] = "";
CHAR g_szFilterComponentName[256] = "";
CHAR g_szFilterAreaName[256] = "";
DWORD g_dwFilterProcessId = 0;
DWORD g_dwFilterThreadId = 0;

BOOL g_fSuppressTraceHeaders = FALSE;

//
//
//

HRESULT Init()
{
	WORD wVersionRequested;
    WSADATA wsaData;
    int iErr;
	
	HRESULT hr = S_OK;

    wVersionRequested = MAKEWORD(2, 2);

    iErr = WSAStartup(wVersionRequested, &wsaData);

    if(0 != iErr)
    {
        printf("WSAStartup failed err=%d\n", iErr);
        hr = E_FAIL;
        goto lDone;
    }

    if( LOBYTE(wsaData.wVersion) != 2 ||
        HIBYTE(wsaData.wVersion) != 2 )
    {
        printf("WSAStartup returned bad version %d,%d\n", LOBYTE(wsaData.wVersion), HIBYTE(wsaData.wVersion));
        hr = E_FAIL;
        goto lDone;
    }

lDone:

	return hr;
}

void Term()
{
}

class CPrintResponse : public CReadCallback
{
    BYTE lastChar;

public:
CPrintResponse() : lastChar(0) {}

    HRESULT OnReadResponseSize(DWORD cbSize)
    {
        lastChar = 0;
        return S_OK;
    }

    HRESULT OnReadResponse(LPCBYTE pbDataRead, DWORD cDataRead)
    {
        while (cDataRead > 0)
        {
            putchar(*pbDataRead);
            cDataRead--;
            lastChar = *pbDataRead++;
        }

        return S_OK;
    }

    BYTE GetLastChar() { return lastChar; }
};

HRESULT DoConsoleStuffFromStream(CXomAdminSession* pSession, FILE* pInput, bool fQuitOnError)
{
    HRESULT hr = S_OK;
    char szCommand[250];
    CPrintResponse oPrintCallback;
    HRESULT hrRequest;

    char* pCommand = NULL;
    char* pCommandOld = NULL;
    char* pCR = NULL;

    while(1)
    {
        putchar('>') ;
        delete []pCommand;
        pCommand = NULL;

        pCommandOld = NULL;
        pCR = NULL;
        // Friggin' fgets includes the \n at the end of the string. We've to remove it.
            
        while ( fgets(szCommand, ARRAY_ELEMENTS(szCommand), pInput) != NULL)    
        {
            pCommand = new char [( pCommandOld? strlen(pCommandOld):0) + ARRAY_ELEMENTS(szCommand)+1];
            if (pCommandOld)
            {
                strcpy( pCommand, pCommandOld);
            }
            else
            {
                *pCommand = '\0';
            }
            pCR = strchr(szCommand, '\n');
            if (pCR != NULL)
            {
                *pCR = '\0';
            }

            strcat (pCommand, szCommand );
            delete [] pCommandOld;
            pCommandOld = pCommand;
            if ( pCR )
            {
                // the line is read
                break;
            }
        }

        if(pCR == NULL)
        {
            break;
        }
  
        // Skip empty commands

        if(pCommand && *pCommand == '\0')
        {
            continue;
        }

        // Echo command if it's not from stdin

        if(pInput != stdin)
        {
            puts(pCommand);
        }

        if (strlen (pCommand) >= CTCPCnt_RECEIVE_BUFFER_LENGTH )
        {
            puts ("Cannot send the command. The command is too long.");
            continue;
        }

        // Send the request to xmgmt service.
        // Prints the results as they come from the server.
        
        hr = pSession->SendRequest(pCommand, &oPrintCallback, &hrRequest);

        if(FAILED(hr))
        {
            printf("SendRequest failed. hr = 0x%08x\n", hr);
            goto lDone;
        }

        if(FAILED(hrRequest))
        {
            printf("hr = 0x%08x\n", hrRequest);

            if(fQuitOnError)
            {
                // The command failed and the user wants to quit on errors.
                
                hr = hrRequest;
                pSession->SendRequest("quit", NULL, &hrRequest);
                goto lDone;
            }
        }
        
        // quit the client if the quit command was executed and successful.
        if ( pCommand[0] == 'q' || pCommand[0] == 'Q' )
        {
            break;
        }
        if (oPrintCallback.GetLastChar() != '\n')
        {
            printf("\n");
        }
    }

lDone:
    delete [] pCommand;
    pCommand = NULL;
    
    return hr;
}

HRESULT RunImmediate(CXomAdminSession* pSession, LPCSTR szCommand)
{
    HRESULT hr = S_OK;
    CPrintResponse oPrintCallback;
    HRESULT hrRequest;

    if (szCommand[0] != 'q' && szCommand[0] != 'Q')
    {
        hr = pSession->SendRequest(szCommand, &oPrintCallback, &hrRequest);

        if(FAILED(hr))
        {
            printf("SendRequest failed. hr = 0x%08x\n", hr);
            goto lDone;
        }

        if(FAILED(hrRequest))
        {
            printf("hr = 0x%08x\n", hrRequest);
            hr = hrRequest;
        }
    }
    
    pSession->SendRequest("quit", NULL, &hrRequest);

lDone:
    return hr;
}

HRESULT AddServerToProcess(LPCSTR pszServer, LPSTR* &rgSvrs, DWORD &nSvrCount)
{
    LPSTR *rgNew = new LPSTR[nSvrCount+1];
    if (rgNew == NULL)
    {
        return E_OUTOFMEMORY;
    }

    memcpy(rgNew, rgSvrs, nSvrCount*sizeof(LPSTR));
    rgNew[nSvrCount] = _strdup(pszServer);
    nSvrCount++;
    delete[] rgSvrs;
    rgSvrs = rgNew;

    return S_OK;
}


HRESULT GetServersForInterface(LPCSTR pszInterface, LPCSTR pszCfgSvr, LPCSTR pszCfgDb, LPSTR* &rgSvrs, DWORD &nSvrCount)
{
    HRESULT hr = S_OK;

    ::CoInitializeEx(NULL, COINIT_MULTITHREADED);

    if (pszCfgSvr != NULL)
    {
//        CODBWSession ses;
    }
    else
    {
        CComPtr<XblConfig::IConfig> pConfig;
        hr = pConfig.CoCreateInstance(__uuidof(XblConfig::ConfigInterop));

        if (FAILED(hr))
        {
            CComPtr<IErrorInfo> pErr;

            ::GetErrorInfo(0, &pErr);

            if (pErr)
            {
                CComBSTR desc;

                pErr->GetDescription(&desc);
                printf("%S\n", desc);
            }
            else
            {
                printf("no error info\n");
            }
            printf("Can't open object\n");
            return hr;
        }

        SAFEARRAY* pSafeArray = NULL;
        CComSafeArray<BSTR> sa;
        hr = pConfig->GetServerListByInterface(CComBSTR(pszInterface), &pSafeArray);
        if (FAILED(hr))
        {
            printf("Failed to get list\n");
            return hr;
        }

        hr = sa.Attach(pSafeArray);
        if (FAILED(hr))
        {
            printf("Failed to attach to SafeArray\n");
            return hr;
        }
        pSafeArray = NULL;

        for (LONG l = sa.GetLowerBound(); l <= sa.GetUpperBound(); l++)
        {
            hr = AddServerToProcess(CW2A(sa.GetAt(l)), rgSvrs, nSvrCount);
            if (FAILED(hr))
            {
                printf("Add server failed\n");
                return hr;
            }
        }
    }

    ::CoUninitialize();

    return hr;
}

HRESULT RunConsole(CXomParamList* pParams)
{
    HRESULT hr = S_OK;
    DWORD nParamNdx;
    FILE* pfiInput = NULL;

    //
    // Process parameters
    //

    LPCSTR pszServer = NULL;
    LPCSTR pszFile = NULL;
    LPCSTR pszCfgSvr = NULL;
    LPCSTR pszCfgDb = "npdb";
    LPCSTR pszInterface = NULL;
    bool fLeaveItOpen = false;
    bool fQuitOnError = false;
    bool fRunImmediate = false;

    LPSTR *rgSvrs = NULL;
    DWORD nSvrCount = 0;

    for(nParamNdx=1; nParamNdx < pParams->GetCount(); nParamNdx++)
    {
        LPCSTR pszParam = pParams->GetParam(nParamNdx);

        if(_stricmp(pszParam, "-c") == 0)
        {
            // This is the console parameter. It's optionally accompanied with
            // the server the user wants to conect to.

            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;
                hr = AddServerToProcess(pParams->GetParam(nParamNdx), rgSvrs, nSvrCount);
                if (FAILED(hr))
                {
                    goto lDone;
                }
            }
            fRunImmediate = false;
        }
        else if(_stricmp(pszParam, "-f") == 0)
        {
            // File parameter. User wants the console input to come from the
            // specified file.
            
            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;
                pszFile = pParams->GetParam(nParamNdx);
            }
            fRunImmediate = false;
        }
        else if(_stricmp(pszParam, "-o") == 0)
        {
            // Keep console open after processing the file. Only makes sense
            // if -f was specified.
            
            fLeaveItOpen = true;
        }
        else if(_stricmp(pszParam, "-e") == 0)
        {
            // Causes an error in a command to make the application quit 
            // returning that error.

            fQuitOnError = true;
        }
        else if(_stricmp(pszParam, "-r") == 0)
        {
            // Execute the command immediately, return the results and quit.
            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;
                pszFile = pParams->GetParam(nParamNdx);
                fRunImmediate = true;
            }
        }
        else if (_stricmp(pszParam, "-svr") == 0)
        {
            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;
                pszCfgSvr = pParams->GetParam(nParamNdx);
            }
        }
        else if (_stricmp(pszParam, "-db") == 0)
        {
            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;
                pszCfgDb = pParams->GetParam(nParamNdx);
            }
        }
        else if (_stricmp(pszParam, "-i") == 0)
        {
            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;
                pszInterface = pParams->GetParam(nParamNdx);
            }
        }
    }

    if (pszInterface != NULL)
    {
        DWORD nCount = nSvrCount;
        // Find the list of servers in npdb
        hr = GetServersForInterface(pszInterface, pszCfgSvr, pszCfgDb, rgSvrs, nSvrCount);

        if (nCount == nSvrCount)
        {
            printf("Could not find servers for interface '%s'.\n", pszInterface);
            goto lDone;
        }

        if (FAILED(hr))
        {
            printf("Could not find servers for interface '%s': 0x%08x\n", pszInterface, hr);
            goto lDone;
        }
    }
    else if(rgSvrs == NULL)
    {
        // If the server was not specified use localhost
        AddServerToProcess("localhost", rgSvrs, nSvrCount);
    }

    DWORD dwCount = nSvrCount;
    do
    {
        CXomAdminSession session;
        // Connect

        pszServer = rgSvrs[dwCount-1];

        printf("Connecting to %s...", pszServer);
            
        hr = session.Init(pszServer);

        if(FAILED(hr))
        {
            printf("Failed. hr=0x%08x\n", hr);
            goto lIter;
        }

        printf("Ok.\n");

        // Now we either get the commands from the stdin or from a file (or maybe both...)

        if (fRunImmediate)
        {
            hr = RunImmediate(&session, pszFile);
        }
        else if(pszFile != NULL)
        {
            // Primary input comes from file specified by user.

            pfiInput = fopen(pszFile, "rt");

            if(NULL == pfiInput)
            {
                printf("Failed to open file %s\n", pszFile);
                hr = E_FAIL;
                goto lDone;
            }

            // Run the console with the stuff from the file.

            hr = DoConsoleStuffFromStream(&session, pfiInput, fQuitOnError);

            if(pfiInput != NULL)
            {
                fclose(pfiInput);
                pfiInput = NULL;
            }

            if(FAILED(hr))
            {
                goto lDone;
            }
        }

        if(pszFile == NULL || fLeaveItOpen)
        {
            // Either the user didn't provide a file to use for input or he
            // requested to leave the console open after we're done with the file.

            hr = DoConsoleStuffFromStream(&session, stdin, fQuitOnError);

            if(FAILED(hr))
            {
                goto lDone;
            }
        }
lIter:
        dwCount--;
    } while (dwCount > 0);


lDone:

    if (rgSvrs != NULL)
    {
        for (DWORD i = 0; i < nSvrCount; i++)
        {
            free(rgSvrs[i]);
        }

        delete[] rgSvrs;
    }

    return hr;
}

unsigned int __stdcall Thread_ConnectNamedPipes(void *)
{
    HRESULT hr = S_OK;
    HANDLE hPipe = INVALID_HANDLE_VALUE;

    for(;;)
    {
        // Create an instance of the named pipe

        hPipe = CreateNamedPipeW(
            c_wszTraceNamedPipe,
    		PIPE_ACCESS_DUPLEX,
    		PIPE_TYPE_MESSAGE | PIPE_READMODE_MESSAGE | PIPE_WAIT,
    		PIPE_UNLIMITED_INSTANCES,
    		1024,
    		1024,
    		10000,
    		NULL);

        if(INVALID_HANDLE_VALUE == hPipe)
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            printf("CreateNamedPipeW failed, hr = 0x%08x\n", hr);
            goto lDone;
        }

        g_hrThreadPipes = S_OK;

        // Connect it

        if(!ConnectNamedPipe(hPipe, NULL))
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            printf("ConnectNamedPipe failed, hr = 0x%08x\n", hr);
            goto lDone;
        }

        // Named pipe connected. Add it to the party.

        g_lockNamedPipeClients.WriteLock();

        if(g_cNamedPipeClients < MAX_INSTANCES)
        {
            g_rghNamedPipeClients[g_cNamedPipeClients] = hPipe;
            g_cNamedPipeClients++;
            hPipe = NULL;
        }
        else
        {
            printf("Cannot connect new instance. Too many instances\n");
            CloseHandle(hPipe);
        }

        g_lockNamedPipeClients.WriteUnlock();
    }

lDone:

    g_hrThreadPipes = hr;

    return 0;
}

unsigned int __stdcall Thread_TraceServer(void* )
{
    HRESULT         hr = S_OK;
    SOCKET          _socket = INVALID_SOCKET;
    sockaddr_in     saSender;
    int             cbSender;

    // Create socket, initialize and bind it to managememt framework's remote 
    // trace port.

    _socket = socket(AF_INET, SOCK_DGRAM, 0);

    if(INVALID_SOCKET == _socket)
    {
        printf("failed to create socket\n");
        hr = E_FAIL;
        goto lDone;
    }

    sockaddr_in sin;
    ZeroMemory(&sin, sizeof(sin));
    sin.sin_family = AF_INET;
    sin.sin_port = htons(XOMCTRL_TRACE_PORT);

    int iErr = bind(_socket, (sockaddr*) &sin, sizeof(sin));

    if(SOCKET_ERROR == iErr)
    {
        hr = HRESULT_FROM_WIN32(WSAGetLastError());
        printf("bind failed, hr = 0x%08x\n", hr);
        goto lDone;
    }
    
    g_hrThreadTrace = S_OK;
    
    for(;;)
    {
        struct  traceBuffer buffer;
        int cb;
        
        // Get debug stuff
        
        cbSender = sizeof(saSender);
        cb = recvfrom(_socket, buffer.rgb, sizeof(buffer.rgb)-1, 0, (sockaddr *)&saSender, &cbSender);

        if(SOCKET_ERROR == cb)
        {
            iErr = WSAGetLastError();
            if (iErr == WSAEMSGSIZE)
            {
                printf("Warning: recv returned WSSAEMSGSIZE; data truncated\n");
                cb = sizeof(buffer.rgb)-1;
            }
            else
            {
                printf("recv failed, err = %d\n", WSAGetLastError());
                break;
            }
        }


        // Copy the source IP address into buffer.source
        memcpy(&buffer.source, &saSender.sin_addr, sizeof(buffer.source));

        // Send it to all instances
        g_lockNamedPipeClients.WriteLock();

        for(DWORD nInst=0; nInst < g_cNamedPipeClients; nInst++)
        {
            DWORD cbWritten;

            WriteFile(
                g_rghNamedPipeClients[nInst],
                (void *)&buffer,
                sizeof(buffer.source) + cb,
                &cbWritten,
                NULL);
        }

        g_lockNamedPipeClients.WriteUnlock();
    }

lDone:

    g_hrThreadTrace = hr;

    if(_socket != INVALID_SOCKET)
    {
        closesocket(_socket);
    }

    return 0;
}

void DisplayTraceMessage(
    in_addr* pSource,
    char* pBuffer,
    DWORD cb
)
{
    LPSTR pszParams;
    LPSTR pszMessage;
    CXomNameValuePairList oParams;
    DWORD dwLevel;
    DWORD dwEventId;
    HANDLE hStdOut = GetStdHandle(STD_OUTPUT_HANDLE);
    HRESULT hr = S_OK;
    
    // Separate parameters from the message
    
    pszParams = pBuffer;
    
    pszMessage = strstr( pBuffer, "::" );
    
    if(!pszMessage)
    {
        hr = E_INVALIDARG;
        goto lDone;
    }
    
    *pszMessage = '\0';
    pszMessage += 2;
    
    // Parse the parameters
    
    hr = oParams.Parse(pszParams);
    
    if(FAILED(hr))
    {
        goto lDone;
    }
    
    if(oParams.GetCount() < 7)
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

    // Apply filter

    if( g_dwFilterProcessId != 0 &&
        atoi(oParams.GetName(1)) != g_dwFilterProcessId )
    {
        goto lDone;
    }

    if( g_dwFilterThreadId != 0 &&
        atoi(oParams.GetName(3)) != g_dwFilterThreadId )
    {
        goto lDone;
    }

    if( g_szFilterProcessName[0] != '\0' &&
        _stricmp(oParams.GetName(0), g_szFilterProcessName) != 0 )
    {
        goto lDone;
    }

    if( g_szFilterComponentName[0] != '\0' &&
        _stricmp(oParams.GetName(2), g_szFilterComponentName) != 0 )
    {
        goto lDone;
    }

    if( g_szFilterAreaName[0] != '\0' &&
        _stricmp(oParams.GetName(4), g_szFilterAreaName) != 0 )
    {
        goto lDone;
    }


    // Set the console color
    
    dwLevel = atoi(oParams.GetName(5));
    
    if(dwLevel < ARRAY_ELEMENTS(c_CollorAttr))
    {
        SetConsoleTextAttribute(hStdOut, c_CollorAttr[dwLevel]);
    }

    // Display message parameters
    if (!g_fSuppressTraceHeaders)
    {
        printf("S:%d.%d.%d.%d P:%s T:%s A:%s", 
               pSource->S_un.S_un_b.s_b1,
               pSource->S_un.S_un_b.s_b2,
               pSource->S_un.S_un_b.s_b3,
               pSource->S_un.S_un_b.s_b4,
               oParams.GetName(0),
               oParams.GetName(3),
               oParams.GetName(4));

        dwEventId = atoi(oParams.GetName(6));

        if(dwEventId != 0)
        {
            printf(" E:%d", dwEventId);
        }

        printf(" - ");
    }

    // Display the message itself
    
    printf("%s\n", pszMessage);

lDone:

    if(FAILED(hr))
    {
        printf("Bad message\n");
    }

    fflush(stdout);
    
    return;
}


HRESULT RunTrace(CXomParamList* pParams)
{
    HRESULT hr = S_OK;
    HANDLE hInputPipe = INVALID_HANDLE_VALUE;

    // Parameters
    
    for(DWORD nParamNdx=1; nParamNdx < pParams->GetCount(); nParamNdx++)
    {
        LPCSTR pszParam = pParams->GetParam(nParamNdx);

        if(_stricmp(pszParam, "-fp") == 0)
        {
            // Filter process

            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;

                g_dwFilterProcessId = atoi(pParams->GetParam(nParamNdx));

                if(g_dwFilterProcessId == 0)
                {
                    lstrcpynA(g_szFilterProcessName, pParams->GetParam(nParamNdx), 
                        ARRAY_ELEMENTS(g_szFilterProcessName));
                }
            }
        }
        else if(_stricmp(pszParam, "-ft") == 0)
        {
            // Filter thread

            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;

                g_dwFilterThreadId = atoi(g_szFilterProcessName);
            }
        }
        else if(_stricmp(pszParam, "-fc") == 0)
        {
            // Filter component

            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;

                lstrcpynA(g_szFilterComponentName, pParams->GetParam(nParamNdx),
                    ARRAY_ELEMENTS(g_szFilterComponentName));
            }
        }
        else if(_stricmp(pszParam, "-fa") == 0)
        {
            // Filter area

            if( nParamNdx+1 < pParams->GetCount() &&
                pParams->GetParam(nParamNdx+1)[0] != '-' )
            {
                nParamNdx++;

                lstrcpynA(g_szFilterAreaName, pParams->GetParam(nParamNdx),
                    ARRAY_ELEMENTS(g_szFilterAreaName));
            }
        }
        else if(_stricmp(pszParam, "-noprefix") == 0)
        {
            // Less spew, shorter trace lines

            g_fSuppressTraceHeaders = TRUE;
        }


    }


    // Is there a server currently running?

    WaitNamedPipeW(c_wszTraceNamedPipe, 1000);

    hInputPipe = CreateFileW(c_wszTraceNamedPipe, GENERIC_READ | GENERIC_WRITE,
		0, NULL, OPEN_EXISTING, 0, NULL);

    if(INVALID_HANDLE_VALUE == hInputPipe)
    {
        // No server. We'll do it.

        DWORD dwThreadId;

        // Start the thread that will create and connect pipes for the console
        // instances.
        
        _beginthreadex(NULL, 0, Thread_ConnectNamedPipes, NULL, 0, (unsigned*) &dwThreadId);

        // Start the thread that will get the debug stuff and send to all 
        // instances using the pipes.
        
        _beginthreadex(NULL, 0, Thread_TraceServer, NULL, 0, (unsigned*) &dwThreadId);

        // Wait up until everything is initialized.

        DWORD dwNow = GetTickCount();

        while(GetTickCount() - dwNow < 5000 &&
            g_hrThreadPipes == S_FALSE ||
            g_hrThreadTrace == S_FALSE)
        {
            Sleep(100);
        }

        if( g_hrThreadPipes != S_OK ||
            g_hrThreadTrace != S_OK )
        {
            printf("Failed to initialize trace server, hr1=0x%08x, hr2=0x%08x\n",
                g_hrThreadPipes, g_hrThreadTrace);
            hr = E_FAIL;
            goto lDone;
        }

        // Ok. Try again.

        hInputPipe = CreateFileW(c_wszTraceNamedPipe, GENERIC_READ | GENERIC_WRITE,
    		0, NULL, OPEN_EXISTING, 0, NULL);

        if(INVALID_HANDLE_VALUE == hInputPipe)
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            printf("Failed to open named pipe, hr = 0x%08x\n", hr);
            goto lDone;
        }
    }

    // Configure named pipe to work message like.

    DWORD dwMode = PIPE_READMODE_MESSAGE;
    SetNamedPipeHandleState(hInputPipe, &dwMode, NULL, NULL);

    for(;;)
    {
        struct  traceBuffer buffer;
        DWORD               cb;

        if(!ReadFile(hInputPipe, (void *)&buffer, sizeof(buffer), &cb, NULL))
        {
            hr = HRESULT_FROM_WIN32(GetLastError());
            goto lDone;
        }

        // Guard against malformed data
        if (cb < sizeof(buffer.source))
        {
            hr = E_FAIL;
            goto lDone;
        }

        cb -= sizeof(buffer.source);    //adjust the buffer size to that of the used portion of the rgb
        buffer.rgb[cb] = '\0';          // and cap the text portion to be sure its a string
        DisplayTraceMessage(&buffer.source, buffer.rgb, cb);
    }

lDone:

    if(hInputPipe != INVALID_HANDLE_VALUE)
    {
        CloseHandle(hInputPipe);
    }

    return hr;
}

void DisplayUsage()
{
    puts(
"Usage:\n"
"\n"
" xmgmtc [<Console Options> | <Trace options>]\n"
"\n"
"Console Mode Options:\n"
"\n"
"  -c <servername>   - Attach admin console to <servername>. LocalHost will be\n"
"                      used if omitted.  Can specify this parameter multiple times\n"
"                      to connect to multiple servers.\n"
"    -i <interface>  - Connect to every online server exposing this interface\n"
"    -f <filename>   - Input from file.\n"
"    -r <command>    - Runs a command immediately from the command line.\n"
"    -o              - Leave console open after processing file or running\n"
"                      command.\n"
"    -e              - Quit console on error.\n"
"\n"
"Trace Mode Options:\n"
"\n"
" -t                 - Run in trace mode\n"
"    -fp <proc/pid>  - Show only trace coming from process name or id.\n"
"    -ft <tid>       - Show only trace coming from specific thread.\n"
"    -fc <component> - Show only trace coming from component.\n"
"    -fa <area>      - Show only trace coming from area.\n"
"    -noprefix       - Don't print prefix on trace lines.\n");
}

int __cdecl main()
{
	HRESULT hr;
    CXomParamList params;    

	hr = Init();

	if(FAILED(hr))
	{
		goto lDone;
	}

	//
	// Parse command line parameters
	//

    hr = params.Parse(GetCommandLineA());

	if( FAILED(hr) )
	{
	    printf("Syntax error.\n");
        DisplayUsage();
	    goto lDone;
	}

    //
    // Process parameters
    //

    DWORD nParamNdx;
    bool fRunConsole = false;
    bool fRunTrace = false;

    for(nParamNdx=1; nParamNdx < params.GetCount(); nParamNdx++)
    {
        LPCSTR pszParam = params.GetParam(nParamNdx);

        if(_stricmp(pszParam, "-c") == 0)
        {
            fRunConsole = true;
        }
        else if(_stricmp(pszParam, "-t") == 0)
        {
            fRunTrace = true;
        }
        else if(
            _stricmp(pszParam, "-h") == 0 ||
            _stricmp(pszParam, "-?") == 0 ||
            _stricmp(pszParam, "/h") == 0 ||
            _stricmp(pszParam, "/?") == 0 )
        {
            DisplayUsage();
            hr = S_FALSE;
            goto lDone;
        }
    }

    if(fRunTrace)
    {
        hr = RunTrace(&params);
	printf("Runtrace returned hr = %x", hr);
    }
    else 
    {
        hr = RunConsole(&params);
    }


lDone:
	
	Term();

	return (int) hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\ProtocolTest\ProtocolTest\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("ProtocolTest")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("ProtocolTest")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2007")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("f184b534-740a-4325-bcc3-12e503c91771")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\test\ProtocolTest\ProtocolTestApp\xmgmtTest.cs ===
using System;
using System.Collections;
using System.Threading;
using ServerTestFramework;
using xonline.common.config;
using ServerTestFramework.Utilities;
//using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Billing;
using System.Collections.Generic;
using System.Text;
using System.IO;

using live.common;
using live.protocol;
using live.server;
using live.client;

using xonline.common.mgmt.test;

namespace live.xmgmtTest
{
    [TestGroup]
    public class Functionals : TestNode
    {
        private static Thread service = null;
        private static xmgmtTestModule xmgmtMod = null;
        [TestGroupSetup]
        public void Setup ()
        {
            live.common.Config.SetConfig(new STFConfig());
            service = new Thread(new ThreadStart(serviceThread));
            service.Start();
            Thread.Sleep(5000);
        }

        /// <summary>
        /// Creates the object that houses the ProtocolTest Module that plugs
        /// into xmgmt.
        /// </summary>
        private static void serviceThread ()
        {
            xmgmtMod = new xmgmtTestModule();

            bool alwaysTrue = true;
            while (alwaysTrue)
            {
                Global.RO.Debug("Protocol Test Service Still Running...");
                Thread.Sleep(30000);
            }
        }

        [TestGroupTearDown]
        public void Teardown() 
        {
            service.Abort();
        }

        [TestCase, Description("Sends the Help command to the ProtocolTest xmgmt service, then checks the response.")]
        class P_Verify_Simple_Command : TestBase
        {
            override protected void Execute ()
            {
                // need to add the extra new lines since the response gets that tacked on.
                string expectedResponse = @"
            xmgmt Test Module Help:
                reload          : Does nothing
                list            : Does nothing
                healthcheck     : Prints out some random junk to show this is working.
            ";

                string response = null;
                bool passed = ServerTestFramework.LiveService.ManagementConsole.Execute("127.0.0.1", "e :ProtocolTest Help", out response);

                if (passed == true)
                    Global.RO.Info("XMGMT command Passed");
                else
                    Global.RO.Info("XMGMT command Failed");

                if (response != null)
                    Global.RO.Info(response);
                else
                    Global.RO.Info("Response was null");

                if (response.CompareTo(expectedResponse) == 0)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        [TestCase, Description("Tries to reach the maximum string length for the return string")]
        class P_Command_Response_Zero_to_25000 : TestBase
        {
            override protected void Execute ()
            {
                string response = null;
                bool failure = false;

                for (int i = 0; i < 25000; i += 100)
                {
                    if (i % 300 == 0)
                    {
                        Global.RO.Info("Sending command 'e :ProtocolTest GetString " + i);
                    }
                    bool passed = ServerTestFramework.LiveService.ManagementConsole.Execute("127.0.0.1", "e :ProtocolTest GetString " + i, out response);

                    if (response == null)
                    {
                        Global.RO.Error("Response was null");
                        failure = true;
                    }

                    // Check that the length is the same as what we requested.
                    if (response.Length != i)
                    {
                        Global.RO.Error("Response length: " + response.Length + " | Requested: " + i);
                        failure = true;
                    }
                    else if (i % 300 == 0)
                    {
                        Global.RO.Success("Response length: " + response.Length + " | Requested: " + i);
                    }
                    Thread.Sleep(500);
                }

                if (failure != true)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        [TestCase, Description("Tries to reach the maximum string length for the return string")]
        class N_Crash_Xmgmtsvr : TestBase
        {
            override protected void Execute ()
            {
                string response = null;
                bool failure = false;

                for (int i = 0; i < 25000; i += 100)
                {
                    if (i % 100 == 0)
                    {
                        Global.RO.Info("Sending command 'e :ProtocolTest GetString " + i);
                    }
                    bool passed = ServerTestFramework.LiveService.ManagementConsole.Execute("127.0.0.1", "e :ProtocolTest GetString " + i, out response);

                    if (response == null)
                    {
                        Global.RO.Error("Response was null");
                        failure = true;
                    }

                    // Check that the length is the same as what we requested.
                    if (response.Length != i)
                    {
                        Global.RO.Error("Response length: " + response.Length + " | Requested: " + i);
                        failure = true;
                    }
                    else if (i % 300 == 0)
                    {
                        Global.RO.Success("Response length: " + response.Length + " | Requested: " + i);
                    }
                    //Thread.Sleep(500);
                }

                if (failure != true)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

        [TestCase, Description("Loops multiple times and sends a command to the service that should echo back.")]
        class P_Command_Echo : TestBase
        {
            protected override void Execute ()
            {
 	            Random rand = new Random(DateTime.Now.Millisecond);
                bool failure = false;
                int loopCount = rand.Next(128);
                
                for (int i = 0; i < loopCount; i++)
                {
                    Global.RO.Info("Iteration " + (i+1) + " of " + loopCount);
                    string garbage = "";
                    int length = rand.Next(3072);
                    for (int j = 0; j < length; j++)
                    {
                        garbage = garbage + Convert.ToChar(rand.Next(65, 90));
                    }

                    string response = null;
                    bool passed = ServerTestFramework.LiveService.ManagementConsole.Execute("127.0.0.1", "e :ProtocolTest echo " + garbage, out response);

                    if (response == null)
                    {
                        Global.RO.Error("Response was null");
                        failure = true;
                        break;
                    }

                    // Make sure what we got back is the same string that we sent.
                    if (garbage.CompareTo(response) != 0)
                    {
                        Global.RO.Error("Sent:     " + garbage);
                        Global.RO.Error("Received: " + response);
                        failure = true;
                    }
                    else
                    {
                        Global.RO.Success("Sent:     " + garbage);
                        Global.RO.Success("Received: " + response);
                    }
                    Thread.Sleep(500);
                }

                if (failure != true)
                {
                    ResultCode = TEST_RESULTS.PASSED;
                }
                else
                {
                    ResultCode = TEST_RESULTS.FAILED;
                }
            }
        }

    }



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtc\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_xmgmtc_none_12.4.56.0_none_3f999da9cb97736a
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xmgmtc
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.manifest
XP_MANIFEST_PATH=manifests\x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.cat
XP_CATALOG_PATH=manifests\x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.cat
XP_PAYLOAD_PATH=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xmgmtc,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\clientadmin.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    clientadmin.h

Abstract:


--*/

#ifndef _CLIENTADMIN_H_
#define _CLIENTADMIN_H_

class CClientAdminConnection;
class CClientAdminList;

class CClientServiceList;


class CClientAdminConnection : 
    public CTCPCnt
{
public:

    CClientAdminConnection();
        
    virtual ~CClientAdminConnection();
    
    HRESULT Init(
        CClientAdminList* pAdminList,
        CClientServiceList* pServiceList,
        CServerSocket* pSocket );

    void Term();

    HRESULT SendResponse(
        BYTE* pBuffer,
        DWORD cbBuffer );

    HRESULT SendVargResponse(
        char* pszFmt, 
        va_list varg);

    HRESULT SendFmtResponse(
        char* pszFmt, 
        ...);

    HRESULT RequestDone(
       HRESULT hrRequest );
    
    DWORD GetAdminId()
    {
        return m_dwAdminId;
    }

protected:

    // CTCPCnt
    virtual void OnDisconnect(
        HRESULT hrReason );  
    
    virtual void OnDone();  

    virtual void ParseReceiveBuffer(
        BYTE* pBuffer,
        DWORD* pcbBuffer );

    void ProcessRequest();

    void ProcessCommandHelp(
        CXomParamList* pParams);

    void ProcessCommandList(
        CXomParamList* pParams);

    void ProcessCommandInstall(
        CXomParamList* pParams,
        BOOL fInstall);

    void ProcessCommandWhoAmI(
        CXomParamList* pParams);


    void ExecuteServiceCommand(
        LPCSTR pszTarget,
        LPCSTR pszCommand );

    CHAR m_rgbRequest[CTCPCnt_RECEIVE_BUFFER_LENGTH];
    DWORD m_cbRequest;

    CHAR m_rgbResponse[4096];
    DWORD m_cbResponse;
        // Buffer to store the response of an admin command for an audit event.

    CClientAdminList* m_pAdminList;

    CClientServiceList* m_pServiceList;

    CCritSec m_lock;

    DWORD m_dwAdminId;

    static DWORD s_dwAdminIdSeed;

    BOOL m_fProcessingRequest;
    BOOL m_fTerminate;

};

class CClientAdminList
{
public:

    IMPLEMENT_REFCOUNT;

    CClientAdminList();

    ~CClientAdminList();

    HRESULT Init(
        CClientServiceList* pServiceList );

    void Term();

    HRESULT CreateInstance(
        CServerSocket* pSocket,
        CClientAdminConnection** ppClientAdmin);

    HRESULT Remove(
        CClientAdminConnection* pClientAdmin);

    HRESULT SendResponseToAdmin(
        DWORD dwAdminId,
        BYTE* pBuffer,
        DWORD cbBuffer,
        HRESULT* phrRequest);

protected:

    CVPtrArray m_List;
    
    CReaderWriterLock3 m_lockList;

    CClientServiceList* m_pServiceList;
};



#endif // #ifndef _CLIENTADMIN_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\clientservice.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    clientservice.cpp

Abstract:


--*/

#include "precomp.h"
#include "clientservice.h"
#include "clientadmin.h"

CClientService::CClientService()
{
    m_pPipe = NULL;
    m_pServiceList = NULL;
    m_pAdminList = NULL;
    m_szProcessName[0] = '\0';
    m_szComponentName[0] = '\0';
    m_szUniqueComponentName[0] = '\0';
    m_dwProcessId = 0;
    m_dwUniqueSuffix = 0;
    m_lOutgoing = 0;
    m_szDotNetPath[0] = L'\0';
}

CClientService::~CClientService()
{
    SAFE_RELEASE(m_pServiceList);
    SAFE_RELEASE(m_pAdminList);

    if(m_pPipe != NULL)
    {
        m_pPipe->Close();
        m_pPipe->Release();
        m_pPipe = NULL;
    }
}

HRESULT CClientService::Init(
    CClientServiceList* pServiceList,
    CClientAdminList* pAdminList,
    CServerPipe* pPipe )
{
    HRESULT hr = S_OK;
    
    m_pServiceList = pServiceList;
    m_pServiceList->AddRef();

    m_pAdminList = pAdminList;
    m_pAdminList->AddRef();
    
    m_pPipe = pPipe;
    m_pPipe->AddRef();

    hr = m_OutgoingBuffers.Initialize(64);

    if(FAILED(hr))
    {
        goto lDone;
    }
        
    hr = StartReceiving();

    if(FAILED(hr))
    {
        goto lDone;
    }

lDone:

    return S_OK;
}

void CClientService::Term()
{
    this->AddRef();  // hold on to the object so it doesn't get deleted prematurely

    m_pServiceList->Lock();  // grab all locks upfront to avoid dead lock
    m_lock.WriteLock();

    m_pPipe->Close();
    m_pServiceList->Remove(this);
    
    m_lock.WriteUnlock();
    m_pServiceList->Unlock();

    this->Release();
}

HRESULT CClientService::StartReceiving()
{
    HRESULT hr = S_OK;

    hr = m_pPipe->Read(m_rgbBuffer, ARRAY_ELEMENTS(m_rgbBuffer), this, 0);

    if(FAILED(hr))
    {
        goto lDone;
    }

lDone:

    return hr;
}

HRESULT CClientService::SendNextBuffer()
{
    HRESULT hr = S_OK;
    BOOL fRes;
    CTCPCntBuffer* pBuffer = NULL;

    m_lock.WriteLock();

    fRes = m_OutgoingBuffers.RemoveHead((void**)&pBuffer);

    m_lock.WriteUnlock();

    if(!fRes)
    {
        hr = E_FAIL;
        goto lDone;
    }

    hr = m_pPipe->Write(pBuffer->GetBuffer(), pBuffer->GetBufferLength(), this, (ULONGLONG)pBuffer);

    if(FAILED(hr))
    {
        goto lDone;
    }

lDone:
    
    return hr;
}

HRESULT CClientService::Send(
    CTCPCntBuffer* pBuffer
)
{
    HRESULT hr = S_OK;
    LISTPOS res;

    pBuffer->AddRef();

    m_lock.WriteLock();

    res = m_OutgoingBuffers.AddTail((void*) pBuffer);

    m_lock.WriteUnlock();

    if(NULL == res)
    {
        pBuffer->Release();
        goto lDone;
    }

    if(InterlockedIncrement(&m_lOutgoing) == 1)
    {
        hr = SendNextBuffer();

        if(FAILED(hr))
        {
            goto lDone;
        }
    }

lDone:

    if(FAILED(hr))
    {
        Term();
    }

    return hr;
}

HRESULT CClientService::SendCommand(
    DWORD dwAdminId,
    LPCSTR pszCommand
)
{
    HRESULT hr = S_OK;
    CTCPCntVarBuffer* pMsgBuffer = NULL;
    XOMCTRLMSG_REQUEST* pMsg;
    int cchCommand;

    // Check command size

    cchCommand = strlen(pszCommand);

    if(cchCommand > XOMCTRL_MAXMESSAGESIZE - sizeof(XOMCTRLMSG_REQUEST))
    {
        hr = E_FAIL;
        goto lDone;
    }

    // Allocate a buffer to hold a XOMCTRLMSG_REQUEST message

    pMsgBuffer = CTCPCntVarBuffer::CreateInstance(cchCommand + 
        sizeof(XOMCTRLMSG_REQUEST));

    if(NULL == pMsgBuffer)
    {
        goto lDone;
    }

    // Fill out the message

    pMsg = (XOMCTRLMSG_REQUEST*) pMsgBuffer->GetBuffer();
    pMsg->hdr.dwSize = pMsgBuffer->GetBufferLength();
    pMsg->hdr.dwType = XOMCTRLMSGID_REQUEST;
    pMsg->dwRequestId = dwAdminId; 
    memcpy(((BYTE*)pMsg) + sizeof(XOMCTRLMSG_REQUEST), pszCommand, cchCommand);

    // Send out the message

    hr = Send(pMsgBuffer);

    if(FAILED(hr))
    {
        goto lDone;
    }

lDone:

    // Send will addref pMsgBuffer if it succeeds. It's safe to release it here.

    SAFE_RELEASE(pMsgBuffer);

    return hr;
}


HRESULT CClientService::OnPipeWrite(
    BYTE* pBufferSent,
    DWORD cbToSend,
    DWORD cbSent,
    HRESULT hr,
    ULONGLONG qwCallbackArg
)
{
    CTCPCntBuffer* pBuffer = (CTCPCntBuffer*)qwCallbackArg;

    LONG val = InterlockedDecrement(&m_lOutgoing);

    if(SUCCEEDED(hr) && val != 0)
    {
        hr = SendNextBuffer();
    }

    SAFE_RELEASE(pBuffer);

    if(FAILED(hr))
    {
        Term();
    }

    return hr;
}

HRESULT CClientService::OnPipeRead(
    BYTE* pbFilledInBuffer,
    DWORD cbRead,
    HRESULT hr,
    ULONGLONG qwCallbackArg)
{
    XOMCTRLMSG_HEADER* pMsgHdr;

    if(FAILED(hr))
    {
        goto lDone;
    }

    pMsgHdr = (XOMCTRLMSG_HEADER*) pbFilledInBuffer;

    if(pMsgHdr->dwSize != cbRead)
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

    switch(pMsgHdr->dwType)
    {
    case XOMCTRLMSGID_REGISTER:
        {
            if(pMsgHdr->dwSize != sizeof(XOMCTRLMSG_REGISTER))
            {
                hr = E_INVALIDARG;
                goto lDone;
            }
            
            XOMCTRLMSG_REGISTER* pMsg = (XOMCTRLMSG_REGISTER*) pMsgHdr;

            m_lock.WriteLock();

            lstrcpyn(m_szProcessName, pMsg->szProcessName, 
                ARRAY_ELEMENTS(m_szProcessName));

            lstrcpyn(m_szComponentName, pMsg->szComponentName, 
                ARRAY_ELEMENTS(m_szComponentName));
            lstrcpyn(m_szUniqueComponentName, pMsg->szComponentName, 
                ARRAY_ELEMENTS(m_szUniqueComponentName));
            m_dwProcessId = pMsg->dwProcessId;

            // The client will use this service as the source of all their
            // NT events. Don't ask...
            
            RegisterNtEventSource();

            m_lock.WriteUnlock();

            hr = m_pServiceList->EnsureUniqueComponent(this);

            break;
        }
    
    case XOMCTRLMSGID_RESPONSE:
        {
            if(pMsgHdr->dwSize < sizeof(XOMCTRLMSG_RESPONSE))
            {
                hr = E_INVALIDARG;
                goto lDone;
            }

            XOMCTRLMSG_RESPONSE* pMsg = (XOMCTRLMSG_RESPONSE*) pMsgHdr;

            m_pAdminList->SendResponseToAdmin(pMsg->dwRequestId, ((BYTE*)pMsg) + sizeof(XOMCTRLMSG_RESPONSE),
                pMsgHdr->dwSize - sizeof(XOMCTRLMSG_RESPONSE), NULL);

            break;
        }

    case XOMCTRLMSGID_RESPONSE_DONE:
        {
            if(pMsgHdr->dwSize < sizeof(XOMCTRLMSG_RESPONSE_DONE))
            {
                hr = E_INVALIDARG;
                goto lDone;
            }

            XOMCTRLMSG_RESPONSE_DONE* pMsg = (XOMCTRLMSG_RESPONSE_DONE*) pMsgHdr;

            m_pAdminList->SendResponseToAdmin(pMsg->dwRequestId, NULL, 0, &(pMsg->hr));

            break;
        }

    default:
        
        hr = E_FAIL;
        goto lDone;

    };

lDone:

    if(SUCCEEDED(hr))
    {
        StartReceiving();
    }
    else
    {
        Term();
    }

    return hr;
}

HRESULT CClientService::RegisterNtEventSource()
{
    HRESULT hr = S_OK;

    static const CHAR szSvcEventRoot[] = 
        "System\\CurrentControlSet\\Services\\EventLog\\Application\\";

    // Get the fullpath to this module to use as the message file

    // Open the eventlog\application regkey

    LONG lRes = 0;
    HKEY    hKeyApp;

    lRes = RegOpenKey(HKEY_LOCAL_MACHINE, szSvcEventRoot, &hKeyApp);
    
    if (lRes == ERROR_SUCCESS)
    {
        DWORD dwType = 0;

        // Set %DotNetRoot%\EventMessageFile.dll file to be the message file for everybody
        lRes = RegGetValue(hKeyApp, m_szComponentName, "EventMessageFile", RRF_RT_ANY, &dwType, NULL, NULL);

        // Only create the event message file if it doesn't already exist, or was created with a previous
        // version of xmgmt.
        if (lRes != ERROR_SUCCESS || dwType == REG_NONE || dwType == REG_SZ)
        {
            CMaxPathStr moduleName(DotNetPath());

            moduleName.CopyFrom("\\EventLogMessages.dll");

            // Create the source subkey 
            
            HKEY hKeySub;
            lRes = RegCreateKey(hKeyApp, m_szComponentName, &hKeySub);
            if (lRes == ERROR_SUCCESS)
            {
                lRes = RegSetValueEx(hKeySub, "EventMessageFile", NULL,REG_EXPAND_SZ,(BYTE*)moduleName.cstr(), moduleName.GetLength());
                if ( lRes == ERROR_SUCCESS )
                {
                    // Types supported. This is to flag whether the component supports Error, Warning, Info, ... the bits represent
                    // which types of messages can be send.
                    
                    DWORD dwVal = EVENTLOG_INFORMATION_TYPE | EVENTLOG_WARNING_TYPE | EVENTLOG_ERROR_TYPE;
                    lRes = RegSetValueEx(hKeySub, "TypesSupported", NULL, REG_DWORD, (BYTE*)&dwVal, sizeof(DWORD));
                }

                if ( lRes != ERROR_SUCCESS )
                {
                    hr = HRESULT_FROM_WIN32(GetLastError());
                }

                RegCloseKey(hKeySub);
            }
            else
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
            }
        }

        RegCloseKey(hKeyApp);
    }
    else
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
    }

    return hr;
}

#define XMGMT_CLRVER "v2.0.50727"

LPSTR CClientService::DotNetPath()
{
    HRESULT hr = S_OK;
    HKEY    hKey = NULL;
    DWORD   cbDotNetRoot = sizeof(m_szDotNetPath);


    if (strlen(m_szDotNetPath) == 0)
    {
        hr = RegOpenKeyEx(
                    HKEY_LOCAL_MACHINE,
                    "SOFTWARE\\Microsoft\\.NETFramework",
                    0,
                    KEY_READ,
                    &hKey
                    );
        if (FAILED(hr))
        {
            strcat(m_szDotNetPath,"%WINDIR%\\Microsoft.Net\\Framework\\" XMGMT_CLRVER);
            goto lCleanup;
        }
        
    
        hr = RegQueryValueEx(
                    hKey,
                    "InstallRoot",
                    NULL,
                    NULL,
                    (LPBYTE)m_szDotNetPath,
                    &cbDotNetRoot
                    );

        if (FAILED(hr))
        {
            strcat(m_szDotNetPath,"%WINDIR%\\Microsoft.Net\\Framework\\" XMGMT_CLRVER);
            goto lCleanup;
        }
    

        // $REVIEW (michion): Need to calc/derive the current .net version or maybe search
        //                    for installutil.exe?

        strcat(m_szDotNetPath, XMGMT_CLRVER);
    }



lCleanup:

    if (hKey)
        RegCloseKey(hKey);

    return m_szDotNetPath;      // ok to return even in error conditions since the string has been nulled out
}

CClientServiceList::CClientServiceList()
{
    m_pAdminList = NULL;
}

CClientServiceList::~CClientServiceList()
{
    SAFE_RELEASE(m_pAdminList);
}

void CClientServiceList::Lock()
{
    m_lockClientServices.WriteLock();
}


void CClientServiceList::Unlock()
{
    m_lockClientServices.WriteUnlock();
}


HRESULT CClientServiceList::Init(
    CClientAdminList* pAdminList
)
{
    HRESULT hr = S_OK;

    m_pAdminList = pAdminList;
    m_pAdminList->AddRef();
    
    return hr;
}

void CClientServiceList::Term()
{
    CClientService* pService;

    m_lockClientServices.WriteLock();

    while(m_ClientServices.GetSize() > 0)
    {
        if(! m_ClientServices.GetAt(0, (void**)&pService))
            break;

        // Remove the entry from the global list now, so the client's remove
        // doesn't double-release the pointer.
        if(! m_ClientServices.RemoveAt(0, 1))
        {
            break;
        }

        pService->Term();
        pService->Release();
    }
        
    m_lockClientServices.WriteUnlock();
}
    

HRESULT CClientServiceList::CreateInstance(
    CServerPipe* pPipe,
    CClientService** ppClientService)
{
    HRESULT hr = S_OK;
    BOOL fRes = FALSE;

    CClientService* pNew = new CClientService;

    if(NULL == pNew)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    m_lockClientServices.WriteLock();

    // Init starts the async read, so if the read completes before getting to add
    // the entry to the temp list, the callback fails to move the entry as there is
    // no reference in the temporary list.
    hr = pNew->Init(this, m_pAdminList, pPipe);

    if(FAILED(hr))
    {
        m_lockClientServices.WriteUnlock();
        goto lDone;
    }

    fRes = m_ClientServicesTemp.Add((void*)pNew, NULL);

    m_lockClientServices.WriteUnlock();

    if(!fRes)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    if(ppClientService != NULL)
    {
        *ppClientService = pNew;
        pNew->AddRef();
    }

    pNew = NULL;

lDone:

    SAFE_RELEASE(pNew);

    return hr;
}

HRESULT CClientServiceList::EnsureUniqueComponent(
    CClientService *pClientService
)
{
    HRESULT hr = S_OK;

    BOOL fUnique = FALSE;

    while (!fUnique)
    {
        fUnique = TRUE;
        m_lockClientServices.WriteLock();
        
        for(DWORD nEntry=0; nEntry < m_ClientServices.GetSize(); nEntry++)
        {
            CClientService* pClientService2;
            if(!m_ClientServices.GetAt(nEntry, (void**) &pClientService2))
            {
                hr = E_UNEXPECTED;
                break;
            }

            if( pClientService2 != pClientService &&
                pClientService2->GetProcessId() == pClientService->GetProcessId() &&
                (_stricmp(pClientService2->GetProcessName(), pClientService->GetProcessName()) == 0) &&
                (_stricmp(pClientService2->GetComponentName(), pClientService->GetComponentName()) == 0)
                )
            {
                fUnique = FALSE;
                break;
            }
        }

        m_lockClientServices.WriteUnlock();

        if (FAILED(hr))
            goto lDone;

        if (!fUnique)
        {
            pClientService->IncrementUniqueComponentName();
        }
    }

    // Now take the populated entry and insert it into the full list of names
    DWORD nService;
    m_lockClientServices.WriteLock();
    for (nService = 0; nService < m_ClientServices.GetSize(); nService++)
    {
        CClientService* pClientService2;
        if(!m_ClientServices.GetAt(nService, (void**) &pClientService2))
        {
            hr = E_UNEXPECTED;
            break;
        }

        // First try to match the process name
        int cmp = _stricmp(pClientService->GetProcessName(), pClientService2->GetProcessName());
        if ( cmp < 0)
        {
            if (!m_ClientServices.InsertAt(nService, pClientService))
            {
                hr = E_OUTOFMEMORY;
                break;
            }
            pClientService->AddRef();
            break;
        }
        else if (cmp > 0)
        {
            continue;
        }

        // Then try the PID
        if (pClientService->GetProcessId() < pClientService2->GetProcessId())
        {
            if (!m_ClientServices.InsertAt(nService, pClientService))
            {
                hr = E_OUTOFMEMORY;
                break;
            }
            pClientService->AddRef();
            break;
        }
        else if (pClientService->GetProcessId() > pClientService2->GetProcessId())
        {
            continue;
        }

        if (_stricmp(pClientService->GetComponentName(), pClientService2->GetComponentName()) < 0)
        {
            if (!m_ClientServices.InsertAt(nService, pClientService))
            {
                hr = E_OUTOFMEMORY;
                break;
            }
            pClientService->AddRef();
            break;
        }
    }

    if (SUCCEEDED(hr) && nService == m_ClientServices.GetSize())
    {
        if (!m_ClientServices.Add((void*)pClientService, NULL))
        {
            hr = E_OUTOFMEMORY;
        }
        pClientService->AddRef();
    }

    m_lockClientServices.WriteUnlock();

    if (SUCCEEDED(hr))
    {
        hr = Remove(pClientService, m_ClientServicesTemp);
    }

lDone:

    return hr;
}

HRESULT CClientServiceList::Remove(
    CClientService* pClientService,
    CVPtrArray &refList
)
{
    DWORD nEntry;
    CClientService* pClientService2;
    HRESULT hr = E_FAIL;

    m_lockClientServices.WriteLock();
    
    for(nEntry=0; nEntry < refList.GetSize(); nEntry++)
    {
        if(!refList.GetAt(nEntry, (void**) &pClientService2))
        {
            hr = E_UNEXPECTED;
            break;
        }

        if(pClientService == pClientService2)
        {
            if(!refList.RemoveAt(nEntry))
            {
                hr = E_UNEXPECTED;
                break;
            }

            pClientService->Release();

            hr = S_OK;
            break;
        }
    }

    m_lockClientServices.WriteUnlock();

    return hr;
}

HRESULT CClientServiceList::Remove(
    CClientService* pClientService
)
{
    return Remove(pClientService, m_ClientServices);
}


HRESULT CClientServiceList::SendRequestToService(
    LPCSTR pszProcessName,
    DWORD dwProcessId,
    LPCSTR pszComponentName,
    DWORD dwAdminId,
    LPCSTR pszCommand
)
{
    HRESULT hr = S_FALSE;
    DWORD nService;
    CClientService* pService = NULL;


    m_lockClientServices.WriteLock();

    DWORD nIncServicsFound = 0;
    for(nService=0; nService < m_ClientServices.GetSize(); nService++)
    {
        CClientService* pServiceTemp = NULL;
        if(!m_ClientServices.GetAt(nService, (void**) &pServiceTemp))
        {
            hr = E_UNEXPECTED;
            break;
        }

        if( dwProcessId != 0 &&
            pServiceTemp->GetProcessId() != dwProcessId)
        {
            continue;
        }

        //
        //  If we have a process id already, skip the name check.
        //  This means the caller used the process name to generate
        //  the process id, and it won't match any process name 
        //  on the system.
        //

        else if( 
            dwProcessId == 0 &&
            pszProcessName != NULL &&
            pszProcessName[0] != '\0' &&
            _stricmp(pServiceTemp->GetProcessName(), pszProcessName) != 0)
        {
            continue;
        }

        if( pszComponentName != NULL &&
            pszComponentName[0] != '\0')
        {
            if (_stricmp(pServiceTemp->GetComponentName(), pszComponentName) != 0)
            {
                // If this name is "unique-ified", then allow matching on base name too.

                // Relying on the fact that Incremented names will show up lexographically
                // after the original names, so I don't need a second pass to find that name
                // too.
                if (!pServiceTemp->IsIncrementedName() ||
                    _stricmp(pServiceTemp->GetComponentName(false), pszComponentName) != 0)
                {
                    continue;
                }
                else if (pService != NULL && !pService->IsIncrementedName() && pServiceTemp->IsIncrementedName())
                {
                    // Exception to the no multiple match rule: if the base of "unique-ified" name matches,
                    // but I already previously matched a non-modified entry, then skip this entry, as unmodified
                    // entries take precendence.
                    continue;
                }
            }
            else if (pService != NULL && pService->IsIncrementedName() && !pServiceTemp->IsIncrementedName())
            {
                // prefer more specific match (prefer unmodified to "unique-ified")
                pService->Release();
                pService = NULL;
            }
        }

        if (pService == NULL)
        {
            // First command found, hold onto it
            pService = pServiceTemp;
            pService->AddRef();

            // Reset count of entries found, as a new baseline is established.
            nIncServicsFound = 1;
        }
        else if (pService->IsIncrementedName() && pServiceTemp->IsIncrementedName())
        {
            // Only keep track of "unique-ified" names found, in case an unmodified name shows up later.
            nIncServicsFound++;
        }
        else
        {
            // At least one command already found, fail the request.
            m_pAdminList->SendResponseToAdmin( dwAdminId, (BYTE*)"Multiple destinations for command are not allowed.\r\n", -1, NULL );
            hr = E_FAIL;
            break;
        }
    }

    m_lockClientServices.WriteUnlock();

    if (nIncServicsFound > 1)
    {
        // Turns out that there were more specific components found, so return multiple destination error.
        m_pAdminList->SendResponseToAdmin( dwAdminId, (BYTE*)"Multiple destinations for command are not allowed.\r\n", -1, NULL );
        hr = E_FAIL;
    }

    if (SUCCEEDED(hr) && pService != NULL)
    {
        hr = pService->SendCommand(dwAdminId, pszCommand);

        if(FAILED(hr))
        {
            pService->Term();
            goto lDone;
        }
    }

lDone:

    if (pService != NULL)
    {
        pService->Release();
    }

    return hr;
}

HRESULT CClientServiceList::SendAdminSessionDiedMessage(
    DWORD dwAdminId
)
{
    HRESULT hr = S_FALSE;
    DWORD nService;
    CClientService* pService;

    // Broadcast the command to all services notifying that the admin session
    // has died. 

    m_lockClientServices.WriteLock();

    for(nService=0; nService < m_ClientServices.GetSize(); nService++)
    {
        if(!m_ClientServices.GetAt(nService, (void**) &pService))
        {
            hr = E_UNEXPECTED;
            goto lDone;
        }

        //
        //  Keep this service object around until we're sending the command.
        //  There's a condition inside SendCommand that can call Term()
        //  and prematurely release the object before we're done.
        //

        pService->AddRef();

        if(FAILED(pService->SendCommand(dwAdminId, "AdminSessionDied")))
        {
            pService->Term();
        }

        pService->Release();
    }

lDone:

    m_lockClientServices.WriteUnlock();

    return hr;
}


HRESULT CClientServiceList::ListServices(
    CClientAdminConnection* pAdmin,
    LPCSTR pszPrefix
)
{
    HRESULT hr = S_OK;
    DWORD nService;

    m_lockClientServices.WriteLock();

    for(nService=0; nService < m_ClientServices.GetSize(); nService++)
    {
        CClientService* pService;
        char szPid[10];

        if(!m_ClientServices.GetAt(nService, (void**)&pService))
        {
            XOMASSERT(!"m_ClientServices.GetAt should not have failed");
            break;
        }


        sprintf(szPid, "%d", pService->GetProcessId());
        if (pszPrefix == NULL ||
            (_strnicmp(pszPrefix, pService->GetProcessName(), strlen(pszPrefix)) == 0) ||
            (_strnicmp(pszPrefix, pService->GetComponentName(), strlen(pszPrefix)) == 0) ||
            (_strnicmp(pszPrefix, szPid, strlen(pszPrefix)) == 0)
            )
        {
            pAdmin->SendFmtResponse("%s(%d) %s\r\n", pService->GetProcessName(),
                pService->GetProcessId(), pService->GetComponentName());
        }
    }

    m_lockClientServices.WriteUnlock();

    if( 0 == nService )
    {
        pAdmin->SendFmtResponse( "No services currently registered\r\n" );
    }

    pAdmin->RequestDone(hr);

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\clientservice.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    clientservice.h

Abstract:


--*/

#ifndef _CLIENTSERVICE_H_
#define _CLIENTSERVICE_H_

#include <cutil.h>

class CClientService;
class CClientServiceList;

class CClientAdminList;
class CClientAdminConnection;

class CClientService : public CServerPipeCallback
{
public:

    IMPLEMENT_REFCOUNT;
    
    CClientService();
    
    ~CClientService();

    HRESULT Init(
        CClientServiceList* pServiceList,
        CClientAdminList* pAdminList,
        CServerPipe* pPipe );

    void Term();

    HRESULT Send(
        CTCPCntBuffer* pBuffer );

    HRESULT SendCommand(
        DWORD dwAdminId,
        LPCSTR pszCommand );

    LPCSTR GetProcessName()
    {
        return m_szProcessName;
    }

    DWORD GetProcessId()
    {
        return m_dwProcessId;
    }

    LPCSTR GetComponentName(bool bUnique = true)
    {
        return bUnique ? m_szUniqueComponentName : m_szComponentName;
    }

    void IncrementUniqueComponentName()
    {
        m_lock.WriteLock();
        m_dwUniqueSuffix++;
        sprintf(m_szUniqueComponentName, "%s-%d", m_szComponentName, m_dwUniqueSuffix);
        m_lock.WriteUnlock();
    }

    bool IsIncrementedName()
    {
        return m_dwUniqueSuffix > 0;
    }

protected:

    HRESULT StartReceiving();

    HRESULT SendNextBuffer();

    virtual HRESULT OnPipeWrite(
        BYTE* pBufferSent,
        DWORD cbToSend,
        DWORD cbSent,
        HRESULT hr,
        ULONGLONG qwCallbackArg);

    virtual HRESULT OnPipeRead(
        BYTE* pbFilledInBuffer,
        DWORD cbRead,
        HRESULT hr,
        ULONGLONG qwCallbackArg);

    HRESULT RegisterNtEventSource();
    LPSTR DotNetPath();

    CClientServiceList* m_pServiceList;

    CClientAdminList* m_pAdminList;
    
    CServerPipe* m_pPipe;

    BYTE m_rgbBuffer[XOMCTRL_MAXMESSAGESIZE];

    CHAR m_szProcessName[XOMCTRL_MAXPROCESSNAME];
    CHAR m_szComponentName[XOMCTRL_MAXCOMPONENTNAME];

    CHAR m_szUniqueComponentName[XOMCTRL_MAXCOMPONENTNAME];
    DWORD m_dwUniqueSuffix;

    CHAR m_szDotNetPath[MAX_PATH];
    DWORD m_dwProcessId;


    CCritSec m_lock;

    CVPtrList m_OutgoingBuffers;
    LONG m_lOutgoing;
};


class CClientServiceList
{
public:

    IMPLEMENT_REFCOUNT;

    CClientServiceList();

    ~CClientServiceList();

    HRESULT Init(
        CClientAdminList* pAdminList );

    void Term();
    
    HRESULT CreateInstance(
        CServerPipe* pPipe,
        CClientService** ppClientService);

    HRESULT Remove(
        CClientService* pClientService );

    HRESULT SendRequestToService(
        LPCSTR pszProcessName,
        DWORD dwProcessId,
        LPCSTR pszComponentName,
        DWORD dwAdminId,
        LPCSTR pszCommand );

    HRESULT ListServices(
        CClientAdminConnection* pAdmin,
        LPCSTR pszPrefix );

    HRESULT SendAdminSessionDiedMessage(
        DWORD dwAdminId );

    HRESULT EnsureUniqueComponent(
        CClientService *pClientService );

    void Lock();

    void Unlock();

protected:

    HRESULT Remove(
        CClientService* pClientService,
        CVPtrArray &refList );

    CVPtrArray m_ClientServices;
    CVPtrArray m_ClientServicesTemp;

    CCritSec m_lockClientServices;

    CClientAdminList* m_pAdminList;

};
        



#endif // #ifndef _CLIENTSERVICE_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\clientadmin.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    clientadmin.cpp

Abstract:


--*/

#include "precomp.h"


#include "clientadmin.h"
#include "clientservice.h"
#include "installcontroller.h"




const char c_szHelloMsg[]           = "Hello\r\n";
const char c_szCommandHelp[]        = "h";
const char c_szCommandHelp2[]       = "help";
const char c_szCommandList[]        = "l";
const char c_szCommandList2[]       = "list";
const char c_szCommandExec[]        = "e";
const char c_szCommandExec2[]       = "exec";
const char c_szCommandInstall[]     = "INSTALL";
const char c_szCommandUninstall[]   = "UNINSTALL";
const char c_szCommandQuit[]        = "q";
const char c_szCommandQuit2[]       = "quit";
const char c_szCommandWhoAmI[]      = "w";
const char c_szCommandWhoAmI2[]     = "whoami";

DWORD CClientAdminConnection::s_dwAdminIdSeed = 0;




CClientAdminConnection::CClientAdminConnection()
{
    m_cbRequest = 0;
    m_pAdminList = NULL;
    m_pServiceList = NULL;
    m_dwAdminId = InterlockedIncrement((LONG*)&s_dwAdminIdSeed);
    m_fProcessingRequest = FALSE;
    m_fTerminate = FALSE;
}

CClientAdminConnection::~CClientAdminConnection()
{
    SAFE_RELEASE(m_pAdminList);
    SAFE_RELEASE(m_pServiceList);
}

HRESULT CClientAdminConnection::Init(
    CClientAdminList* pAdminList,
    CClientServiceList* pServiceList,
    CServerSocket* pSocket )
{
    HRESULT hr = S_OK;
    CTCPCntVarBuffer* pBuf = NULL;

    m_pAdminList = pAdminList;
    m_pAdminList->AddRef();

    m_pServiceList = pServiceList;
    m_pServiceList->AddRef();
    
    hr = Attach(pSocket);

    if(FAILED(hr))
    {
        goto lDone;
    }

lDone:

    return hr;
}

void CClientAdminConnection::Term()
{
    // Calling m_pAdminList->Remove *could* end up detroying the object before
    // we could even release the critical section, so we're going to protect
    // this whole thing in a addref/release block.

    AddRef();

    m_lock.WriteLock();

    Disconnect(S_OK);

    if(m_pAdminList != NULL)
    {
        m_pAdminList->Remove(this);
    }

    m_lock.WriteUnlock();

    Release();
}

void CClientAdminConnection::OnDisconnect(
    HRESULT hrReason 
)
{
    if(m_pServiceList != NULL)
    {
        m_pServiceList->SendAdminSessionDiedMessage(m_dwAdminId);
    }
    
    Term();
}

void CClientAdminConnection::OnDone()
{   if (m_fTerminate)
    {
        Term();
    }        
}

void CClientAdminConnection::ParseReceiveBuffer(
    BYTE* pBuffer,
    DWORD* pcbBuffer 
)
{
    HRESULT hr = S_OK;
    DWORD nBuffer;

    for(nBuffer=0; nBuffer < *pcbBuffer; nBuffer++, pBuffer++)
    {
        if(m_cbRequest == ARRAY_ELEMENTS(m_rgbRequest))
        {
            // Request is bigger than buffer
            hr = E_FAIL;
            goto lDone;
        }
        switch(*pBuffer)
        {
            case '\r':
                continue;

            case '\n':

                // Yay, command is ready! Process it.
                
                m_rgbRequest[m_cbRequest] = '\0';

                if(InterlockedCompareExchange((LONG*)&m_fProcessingRequest, (LONG)TRUE, (LONG)FALSE) != FALSE)
                {
                    // We're processing another command. We currently don't 
                    // queue commands. One at a time, please.
                    
                    hr = E_FAIL;
                    goto lDone;
                }

                // Initialize response buffer (for the audit event only)
                
                m_cbResponse = 0;

                // Start processing the request
                
                ProcessRequest();
                m_cbRequest = 0;
                break;

            default:
                m_rgbRequest[m_cbRequest] = *pBuffer;
                m_cbRequest++;
                break;
        }
    }

    *pcbBuffer = 0;

lDone:

    if(FAILED(hr))
    {
        // Disconnect on protocol errors
        Disconnect(hr);
    }
    
    return;
}

void CClientAdminConnection::ProcessRequest()
{
    CXomParamList oParams;
    HRESULT hr = S_OK;

    hr = oParams.Parse(m_rgbRequest);

    if(FAILED(hr))
    {
        SendFmtResponse("Syntax error.");
        RequestDone(E_FAIL);
        goto lDone;
    }

    if(oParams.GetCount() < 1)
    {
        SendFmtResponse("No command.");
        RequestDone(E_FAIL);
        goto lDone;
    }

    if( (_stricmp(oParams.GetParam(0), c_szCommandHelp) == 0) ||
        (_stricmp(oParams.GetParam(0), c_szCommandHelp2) == 0) )
    {
        ProcessCommandHelp(&oParams);
    }
    else if( (_stricmp(oParams.GetParam(0), c_szCommandList) == 0) ||
        (_stricmp(oParams.GetParam(0), c_szCommandList2) == 0) )
    {
        ProcessCommandList(&oParams);
    }
    else if( (strcmp(oParams.GetParam(0), c_szCommandInstall) == 0))
    {
        ProcessCommandInstall(&oParams, true);
    }
    else if( (strcmp(oParams.GetParam(0), c_szCommandUninstall) == 0))
    {
        ProcessCommandInstall(&oParams, false);
    }
    else if( (_stricmp(oParams.GetParam(0), c_szCommandExec) == 0) ||
        (_stricmp(oParams.GetParam(0), c_szCommandExec2) == 0) )
    {
        if(oParams.GetCount() < 3)
        {
            SendFmtResponse("No command.");
            RequestDone(E_FAIL);
            goto lDone;
        }

        ExecuteServiceCommand(oParams.GetParam(1), 
            m_rgbRequest + oParams.GetParamOffset(2)); 
        
        // BUGBUG: if the first command starts with a double-quote, it will be truncated.
    }
    else if( (_stricmp(oParams.GetParam(0), c_szCommandQuit) == 0) ||
        (_stricmp(oParams.GetParam(0), c_szCommandQuit2) == 0) )
    {
        // Process command quit
        SendFmtResponse("Goodbye.");
        RequestDone(S_OK);
        m_fTerminate = TRUE;
        //Done will ensure that all previous buffers are sent, then will invoke OnDone callback.
        Done();
    }
    else if( (_stricmp(oParams.GetParam(0), c_szCommandWhoAmI) == 0) ||
        (_stricmp(oParams.GetParam(0), c_szCommandWhoAmI2) == 0) )
    {
        ProcessCommandWhoAmI(&oParams);
    }
    else
    {
        SendFmtResponse("Command invalid.\r\n");
        RequestDone(E_FAIL);
    }

lDone:
    
    m_cbRequest = 0;
    
    return;
}




void CClientAdminConnection::ProcessCommandInstall(
    CXomParamList* pParams,
    BOOL fInstall
)
{
    HRESULT     hr = S_OK;

    CInstallManager     mgr(this);

    hr = mgr.Run(fInstall, pParams);

    RequestDone(hr);

    return;
}


void CClientAdminConnection::ProcessCommandHelp(
    CXomParamList* pParams
)
{
    static const char szHelp[] =
        "List of commands:\r\n"
        "  help\r\n"
        "  list [<prefix>]\r\n"
        "  exec <process>[:<component>] <command> [<param1> ... <paramN>].\r\n"
        "  INSTALL [<component1> <component2> ... <componentN>] (cannot be abbreviated and must be capitalized)\r\n"
        "  UNINSTALL [<component1> <component2> ... <componentN>] (cannot be abbreviated and must be capitalized)\r\n"
        "  whoami\r\n"
        "  quit\r\n";

    SendResponse((BYTE*)szHelp, ARRAY_ELEMENTS(szHelp) - 1);
    RequestDone(S_OK);
}

void CClientAdminConnection::ProcessCommandList(
    CXomParamList* pParams
)
{
    LPCSTR pszPrefix = NULL;

    if (pParams->GetCount() == 2)
    {
        pszPrefix = pParams->GetParam(1);
    }
    m_pServiceList->ListServices(this, pszPrefix);
}


void CClientAdminConnection::ExecuteServiceCommand(
    LPCSTR pszTarget,
    LPCSTR pszCommand
)
{
    HRESULT hr = S_OK;
    CHAR szProcessName[XOMCTRL_MAXPROCESSNAME];
    SIZE_T cchProcessName;
    CHAR szComponentName[XOMCTRL_MAXCOMPONENTNAME];
    DWORD dwProcessId = 0;

    //
    // Find the colon. It separates the process name from the component
    // name.
    //
    
    const CHAR* pEndOfProcessName = strchr(pszTarget, ':');

    //
    // Extract the component name
    //
    
    if(pEndOfProcessName != NULL)
    {
        lstrcpyn(szComponentName, pEndOfProcessName+1, XOMCTRL_MAXCOMPONENTNAME);
    }
    else
    {
        szComponentName[0] = '\0';
        pEndOfProcessName = (CHAR*) pszTarget + strlen(pszTarget);
    }
        
    // 
    // Extract the process name
    //
    
    cchProcessName = pEndOfProcessName - pszTarget;

    if(cchProcessName > XOMCTRL_MAXPROCESSNAME-1)
    {
        hr = E_INVALIDARG;
        goto lDone;
    }

    memcpy(szProcessName, pszTarget, cchProcessName);
    szProcessName[cchProcessName] = '\0';
    dwProcessId = atoi(szProcessName);

    hr = m_pServiceList->SendRequestToService(szProcessName, dwProcessId, 
        szComponentName, m_dwAdminId, pszCommand);

    if(FAILED(hr))
    {
        goto lDone;
    }

    if(S_FALSE == hr)
    {
        // Could not find target
        SendResponse((BYTE*)"Process/Component not found\r\n", (DWORD)-1);
        RequestDone(E_FAIL);
    }

lDone:

    if(FAILED(hr))
    {
        RequestDone(hr);
    }

    return;
}

HRESULT CClientAdminConnection::SendResponse(
    BYTE* pResponse,
    DWORD cbResponse )
{
    HRESULT hr = S_OK;
    CTCPCntVarBuffer* pBuf = NULL;
    DWORD cbBuffer; 
    
    if((DWORD)-1 == cbResponse)
    {
        cbResponse = strlen((CHAR*)pResponse);
    }

    pBuf = CTCPCntVarBuffer::CreateInstance(cbResponse + 64);

    if(NULL == pBuf)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    cbBuffer = 0;
    
    cbBuffer += safe_snprintf(
        (char*) pBuf->GetBuffer(),
        pBuf->GetBufferLength(),
        "Size=%d\r\n", cbResponse);

    memcpy(pBuf->GetBuffer() + cbBuffer, pResponse, cbResponse);

    cbBuffer += cbResponse;

    pBuf->Resize(cbBuffer);

    hr = Send(pBuf);

    if(FAILED(hr))
    {
        goto lDone;
    }

    // Write this part of the response to the response buffer

    DWORD cbToWriteToRespBuffer = __min(cbResponse, 
        sizeof(m_rgbResponse) - m_cbResponse - 1);

    memcpy(m_rgbResponse + m_cbResponse, pResponse, cbToWriteToRespBuffer);

    m_cbResponse += cbToWriteToRespBuffer;

 lDone:

    SAFE_RELEASE(pBuf);

    if(FAILED(hr))
    {
        Disconnect(E_FAIL);
    }

    return hr;
}
#define INAFMT "%d.%d.%d.%d"
#define INAPRM(x) \
    (x)->S_un.S_un_b.s_b1, \
    (x)->S_un.S_un_b.s_b2, \
    (x)->S_un.S_un_b.s_b3, \
    (x)->S_un.S_un_b.s_b4

void CClientAdminConnection::ProcessCommandWhoAmI(
    CXomParamList* pParams
)
{
    sockaddr_in remoteAddr;
    m_pSocket->GetPeerAddress(&remoteAddr);

    SendFmtResponse(INAFMT ":%d", INAPRM(&remoteAddr.sin_addr), ntohs(remoteAddr.sin_port));
    RequestDone(S_OK);
}

HRESULT CClientAdminConnection::RequestDone(
    HRESULT hrRequest
)
{
    HRESULT hr = S_OK;
    CTCPCntVarBuffer* pBuf = NULL;
    DWORD cbBuffer; 
    
    pBuf = CTCPCntVarBuffer::CreateInstance(64);

    if(NULL == pBuf)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    cbBuffer = 0;
    
    cbBuffer += safe_snprintf(
        (char*) pBuf->GetBuffer(),
        pBuf->GetBufferLength(),
        "Result=%u\r\n", hrRequest);

    pBuf->Resize(cbBuffer);

    InterlockedExchange((LONG*)&m_fProcessingRequest, FALSE);

    hr = Send(pBuf);

    if(FAILED(hr))
    {
        goto lDone;
    }

    // Log an admin event

    m_rgbResponse[m_cbResponse] = '\0';

    sockaddr_in remoteAddr;
    m_pSocket->GetPeerAddress(&remoteAddr);

    XomNtEvent(XEVENT_MGMT_ADMIN_COMMAND, 
        "Client: " INAFMT ":%d\nRequest: %s\n\nHr:0x%08x\n\nResponse:\n%s",
        INAPRM(&remoteAddr.sin_addr), ntohs(remoteAddr.sin_port), m_rgbRequest,
        hrRequest, m_rgbResponse);

lDone:

    SAFE_RELEASE(pBuf);

    if(FAILED(hr))
    {
        Disconnect(E_FAIL);
    }

    return hr;
}

HRESULT CClientAdminConnection::SendVargResponse(
    char* pszFmt, 
    va_list varg
)
{
    HRESULT hr = S_OK;
    char szFmt[1024];

    // Build the formated message that we're going to send with SendResponse.
    _vsnprintf(szFmt, ARRAY_ELEMENTS(szFmt), pszFmt, varg);

    // Make sure that the string is null terminated.
    szFmt[ARRAY_ELEMENTS(szFmt)-1] = '\0';

    // And send it
    hr = SendResponse((BYTE*) szFmt, (DWORD)-1);

    return hr;
}


HRESULT CClientAdminConnection::SendFmtResponse(
    char* pszFmt, 
    ...
)
{
    HRESULT hr = S_OK;
    va_list marker;

    va_start(marker, pszFmt);
    hr = SendVargResponse(pszFmt, marker);
    va_end(marker);

    return hr;
}

CClientAdminList::CClientAdminList()
{
    m_pServiceList = NULL;
}

CClientAdminList::~CClientAdminList()
{
    SAFE_RELEASE(m_pServiceList);

    //BUGBUG: clean-up admin list
}


HRESULT CClientAdminList::Init(
    CClientServiceList* pServiceList )
{
    HRESULT hr = S_OK;

    m_pServiceList = pServiceList;
    m_pServiceList->AddRef();
    
    return hr;
}

void CClientAdminList::Term()
{
    CClientAdminConnection* pAdmin;

    m_lockList.WriteLock();

    while(m_List.GetSize() > 0)
    {
        if(! m_List.GetAt(0, (void**)&pAdmin))
            break;

        pAdmin->Term();
    }
        
    m_lockList.WriteUnlock();
}

HRESULT CClientAdminList::CreateInstance(
    CServerSocket* pSocket,
    CClientAdminConnection** ppClientAdmin)
{
    HRESULT hr = S_OK;
    BOOL fRes;

    CClientAdminConnection* pNew = new CClientAdminConnection;

    if(NULL == pNew)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    hr = pNew->Init(this, m_pServiceList, pSocket);

    if(FAILED(hr))
    {
        goto lDone;
    }

    m_lockList.WriteLock();
    
    // Creation of the ClientAdminConnection already has a refcnt = 1, so
    // no need to add it here.
    fRes = m_List.Add((void*)pNew, NULL);

    m_lockList.WriteUnlock();

    if(!fRes)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    if(ppClientAdmin != NULL)
    {
        *ppClientAdmin = pNew;
        pNew->AddRef();
    }

    pNew = NULL;

lDone:

    SAFE_RELEASE(pNew);

    return hr;
}

HRESULT CClientAdminList::Remove(
    CClientAdminConnection* pClient
)
{
    DWORD nEntry;
    CClientAdminConnection* pClient2;
    HRESULT hr = E_FAIL;

    m_lockList.WriteLock();
    
    for(nEntry=0; nEntry < m_List.GetSize(); nEntry++)
    {
        if(!m_List.GetAt(nEntry, (void**) &pClient2))
        {
            hr = E_UNEXPECTED;
            break;
        }

        if(pClient == pClient2)
        {
            if(!m_List.RemoveAt(nEntry, 1))
            {
                hr = E_UNEXPECTED;
                break;
            }

            pClient->Release();

            hr = S_OK;
            break;
        }
    }

    m_lockList.WriteUnlock();

    return hr;
}

HRESULT CClientAdminList::SendResponseToAdmin(
    DWORD dwAdminId,
    BYTE* pBuffer,
    DWORD cbBuffer,
    HRESULT* phrRequest
)
{
    HRESULT hr = S_OK;
    DWORD nEntry;
    CClientAdminConnection* pClient = NULL;

     m_lockList.ReadLock();
    
    for(nEntry=0; nEntry < m_List.GetSize(); nEntry++)
    {
        if(!m_List.GetAt(nEntry, (void**) &pClient))
        {
            hr = E_UNEXPECTED;
            break;
        }

        if(pClient->GetAdminId() == dwAdminId)
        {
            pClient->AddRef();

            break;
        }
        pClient = NULL;
    }

    m_lockList.ReadUnlock();

    if (SUCCEEDED(hr) && pClient != NULL)
    {
        if(pBuffer != NULL)
        {
            pClient->SendResponse(pBuffer, cbBuffer);
        }

        if(phrRequest != NULL)
        {
            pClient->RequestDone(*phrRequest);
        }

        pClient->Release();
        pClient = NULL;
    }


    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtc\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_xmgmtc_none_12.4.56.0_none_3f999da9cb97736a
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xmgmtc
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.manifest
XP_MANIFEST_PATH=manifests\x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.cat
XP_CATALOG_PATH=manifests\x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960.cat
XP_PAYLOAD_PATH=x86_xmgmtc_no-public-key_12.4.56.0_x-ww_56f91960
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xmgmtc,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\installcontroller.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    installcontroller.h

Abstract:


--*/

#ifndef _INSTALLCONTROLLER_H_
#define _INSTALLCONTROLLER_H_

//class CClientAdminConnection;
//class CClientAdminList;
//class CClientServiceList;

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers
using namespace XblConfig;



#define DESKTOP_ALL (DESKTOP_READOBJECTS | DESKTOP_CREATEWINDOW | \
DESKTOP_CREATEMENU | DESKTOP_HOOKCONTROL | DESKTOP_JOURNALRECORD | \
DESKTOP_JOURNALPLAYBACK | DESKTOP_ENUMERATE | DESKTOP_WRITEOBJECTS | \
DESKTOP_SWITCHDESKTOP | STANDARD_RIGHTS_REQUIRED)

#define WINSTA_ALL (WINSTA_ENUMDESKTOPS | WINSTA_READATTRIBUTES | \
WINSTA_ACCESSCLIPBOARD | WINSTA_CREATEDESKTOP | WINSTA_WRITEATTRIBUTES | \
WINSTA_ACCESSGLOBALATOMS | WINSTA_EXITWINDOWS | WINSTA_ENUMERATE | \
WINSTA_READSCREEN | STANDARD_RIGHTS_REQUIRED)

#define GENERIC_ACCESS (GENERIC_READ | GENERIC_WRITE | GENERIC_EXECUTE | \
GENERIC_ALL)






//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// CInstallManager
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------


class CInstallManager
{
public:

    CInstallManager(CClientAdminConnection *foo);
    ~CInstallManager();

    DWORD Run(BOOL fInstall, CXomParamList *pParams = NULL);

    HRESULT     InitServerName();
    HRESULT     InitComponentList();
    LPWSTR      DotNetPath();
    LPWSTR      WebRootPath();
    CComBSTR&   ServerName();
    
    BOOL        AddAceToWindowStation(HWINSTA hwinsta, PSID psid);
    BOOL        AddAceToDesktop(HDESK hdesk, PSID psid);
    BOOL        GetLogonSID (HANDLE hToken, PSID *ppsid); 
    VOID        FreeLogonSID (PSID *ppsid);
    BOOL        SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege);

    HRESULT     JackStationDesktop();
    HRESULT     UnjackStationDesktop();

    
    HRESULT SendFmtResponse(char* pszFmt, ...);

    CClientAdminConnection*     m_parent;


private:

    CComPtr<IConfig>    m_pIConfig;
    CComBSTR            m_bsServerName;

    WCHAR m_szRootPath  [MAX_PATH];
    WCHAR m_szDotNetPath[MAX_PATH];

    BOOL  m_fIsJacked;

    CVPtrArray m_components;
};



//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
// CInstallComponent
//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------


class CInstallComponent
{

public:

    CInstallComponent(CInstallManager *caller, CComBSTR eComponent);
    ~CInstallComponent();

    HRESULT SendFmtResponse(char* pszFmt, ...);
    
    DWORD       Init(CComPtr<IConfig>  pIConfig);
    CComBSTR&   GetExecutable() { return m_bsExecutable; }
    DWORD       RunInstaller(BOOL fInstall);

    CComBSTR&    GetComponent()  { return m_eComponent;  }

    LPWSTR      DotNetPath();
    LPWSTR      WebRootPath();

    BOOL        Success()       { return (m_dwExitCode == 0); };

private:

    DWORD               m_timeout;      // max # of 1 second loops to allow installer to run

    HANDLE              m_hStdOut;
    HANDLE              m_hStdErr;

    DWORD               m_dwExitCode;  // exit code reported by the installer

    CComBSTR            m_eComponent;
    Installer           m_eInstaller;
    CComBSTR            m_bsExecutable;
    CComBSTR            m_bsEnvironment;

    CInstallManager*    m_parent;

    static WCHAR        m_szDotNetBin[512];
    
};





//-----------------------------------------------------------------------------





#endif // #ifndef _INSTALLCONTROLLER_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\installcontroller.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    installcontroller.cpp

Abstract:


--*/




#include "precomp.h"


#include "clientadmin.h"
#include "clientservice.h"
#include "installcontroller.h"





CInstallComponent::CInstallComponent(CInstallManager *parent, CComBSTR eComponent) : 
    m_parent(parent),
    m_eComponent(eComponent)
{
    m_timeout       = 1800;            // allow 1800 seconds (30 min) to complete configurator work

    m_hStdOut       = NULL;
    m_hStdErr       = NULL;

    m_dwExitCode    = -1;

    m_eInstaller    = Installer_unspecified;
}




CInstallComponent::~CInstallComponent()
{
}



LPWSTR CInstallComponent::DotNetPath()
{
    return m_parent->DotNetPath();
}


LPWSTR CInstallComponent::WebRootPath()
{
    return m_parent->WebRootPath();
}



HRESULT CInstallComponent::SendFmtResponse(
    char* pszFmt, 
    ...
)
{
    HRESULT hr = S_OK;
    va_list marker;

    if (m_parent)
    {
        va_start(marker, pszFmt);
        hr = m_parent->m_parent->SendVargResponse(pszFmt, marker);
        va_end(marker);
    }

    return hr;
}





/* CInstallComponent::Init()
 * -------------------------
 * Method to initialize a CInstallComponent object with any data necessary
 * before executing the RunInstaller() method
 *
*/
DWORD CInstallComponent::Init(CComPtr<IConfig>  pIConfig)
{
    HRESULT hr = S_OK;
    
    CComPtr<IComponentInfo>     pComponentInfo;

    hr = pIConfig->get_Environment(&m_bsEnvironment);
    if (FAILED(hr))
    {
        SendFmtResponse("ERROR(CInstallComponent::Init): get_Environment failed for component %ws (0x%08x)\n", static_cast<wchar_t *> (m_eComponent), hr);
        goto lError;
    }
    
    hr = pIConfig->GetComponent(m_eComponent, &pComponentInfo);
    if (FAILED(hr))
    {
        SendFmtResponse("ERROR(CInstallComponent::Init): GetComponent failed for component %ws (0x%08x)\n", static_cast<wchar_t *> (m_eComponent), hr);
        goto lError;
    }

    hr = pComponentInfo->get_Executable(&m_bsExecutable);
    if (FAILED(hr))
    {
        SendFmtResponse("ERROR(CInstallComponent::Init): get_Executable failed for component %ws (0x%08x)\n", static_cast<wchar_t *> (m_eComponent), hr);
        goto lError;
    }


    hr = pComponentInfo->get_Installer(&m_eInstaller);
    if (FAILED(hr))
    {
        SendFmtResponse("ERROR(CInstallComponent::Init): get_Installer failed for component %ws (0x%08x)\n", static_cast<wchar_t *> (m_eComponent), hr);
        goto lError;
    }

lError:
    return hr;
}

/* CInstallComponent::RunInstaller()
 * ---------------------------------
 * Method to execute an installer based on the specification/configuration
 * retrieved from the configuration store.
 *
 *
 * N.B.  Error handling here is tricky.  The DWORD that we return indicates
 *       a failure having to do with attempting to run an installer and not
 *       a failure of a particular installer.  The former can be considered
 *       to be more of an exception-like condition.  The later is still bad
 *       but not so much so that we would abandone the setup processing for
 *       subsequent components.
 *
 *
*/
DWORD CInstallComponent::RunInstaller(BOOL fInstall)
{
    DWORD                  rc        = 0;
    DWORD                  dwWaiting = 0;

    CHAR                   szCmd[1024];
    CHAR                   sz[MAX_PATH];

    SECURITY_ATTRIBUTES    sa;
    STARTUPINFO            startInfo;
    PROCESS_INFORMATION    procInfo;


    //-------------------------------------------------------------------------
    // Ignore any unsupported installer types or components where we can't get
    // to the actual binary/assembly
    // 
    if (m_eInstaller == Installer_unspecified || m_bsExecutable.Length() == 0)
    {
        m_dwExitCode = 0;
        SendFmtResponse("      No Action: %35.35S ... [ OK ]\r\n", m_eComponent);
        goto lDone;
    }


    SendFmtResponse("   %12.12s: %35.35S ... ", (fInstall ? "Installing" : "Uninstalling"), m_bsExecutable);

    ::ZeroMemory(&startInfo, sizeof(startInfo));
    ::ZeroMemory(&procInfo,  sizeof(procInfo));





    //-------------------------------------------------------------------------
    // The file handle needs to be inheritable in order for the launched process
    // to be able to write to it, so put together a SECURITY_ATTRIBUTES struct 
    // for the STDOUT and STDERR redirection file handles we're going to need
    // 
    sa.nLength              = sizeof(sa);
    sa.lpSecurityDescriptor = NULL;
    sa.bInheritHandle       = TRUE;



    //-------------------------------------------------------------------------
    // Create the console redirection output files: one each STDOUT and STDERR
    // 
    sprintf(sz, "%S\\%S.%s.stdout.txt", WebRootPath(), m_bsExecutable, fInstall ? "installer" : "uninstaller");
    m_hStdOut = CreateFile(
                            sz,
                            GENERIC_WRITE,
                            FILE_SHARE_READ,
                            &sa,
                            CREATE_ALWAYS,
                            FILE_ATTRIBUTE_NORMAL,
                            NULL);
    startInfo.hStdOutput = m_hStdOut;


    sprintf(sz, "%S\\%S.%s.stderr.txt", WebRootPath(), m_bsExecutable, fInstall ? "installer" : "uninstaller");
    m_hStdErr = CreateFile(
                           sz,
                            GENERIC_WRITE,
                            FILE_SHARE_READ,
                            &sa,
                            CREATE_ALWAYS,
                            FILE_ATTRIBUTE_NORMAL,
                            NULL);
    startInfo.hStdError = m_hStdErr;




    switch (m_eInstaller)
    {
        case Installer_installutil:
            sprintf(szCmd, "\"%S\\installutil.exe\" %s \"%S\\%S\"", DotNetPath(), fInstall ? "/ShowCallStack" : "/u", WebRootPath(), m_bsExecutable);
            break;

        case Installer_xblsvc:
            sprintf(szCmd, "\"%S\\%S\" %s", WebRootPath(), m_bsExecutable, fInstall ? "-install" : "-uninstall");
            break;

        default:
            // $REVIEW (michion): exception?
            sprintf(szCmd, "");
            break;
    }


    //-------------------------------------------------------------------------
    // Setup how we want our sub-process to appear
    // 
    startInfo.cb               = sizeof(STARTUPINFO);
    startInfo.dwFlags          = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
    startInfo.wShowWindow      = SW_SHOWNORMAL;
    startInfo.hStdInput        = NULL;
    startInfo.lpDesktop        = TEXT("winsta0\\default");


    rc = CreateProcess(
                            NULL,
                            szCmd,
                            NULL,
                            NULL,
                            TRUE,
                            CREATE_SEPARATE_WOW_VDM, // CREATE_NO_WINDOW
                            NULL,
                            NULL,
                            &startInfo,
                            &procInfo);

    if (!rc)
    {
        rc = GetLastError();
        SendFmtResponse("   ERROR: CreateProcess\r\n");
        goto lError;
    }


    //-------------------------------------------------------------------------
    // Now, park on the process handle and wait for it to signal completion
    //
    do
    {
        rc = WaitForSingleObject(procInfo.hProcess, 1000);
        dwWaiting += 1;
    } while ( rc == WAIT_TIMEOUT && dwWaiting < m_timeout);
    

    if (rc == WAIT_TIMEOUT)
    {
        //---------------------------------------------------------------------
        // Hmmm... badness... launched process hasn't gotten back to us...
        // Kill it and bail
        //
        SendFmtResponse("   ERROR: WAIT_TIMEOUT\r\n");
        TerminateProcess(procInfo.hProcess, 9999);  // $REVIEW (michion): what to force as an exit code?
        rc = -1;
        goto lError;
    }


    if (rc == WAIT_ABANDONED)
    {
        //---------------------------------------------------------------------
        // If the process somehow managed to get us this, then it should be 
        // dead and gone, so we shouldn't need to call TerminateProcess
        //
        SendFmtResponse("   ERROR:WAIT_ABANDONED\r\n");
        rc = -2;
        goto lError;
    }



    if (!GetExitCodeProcess(procInfo.hProcess, &m_dwExitCode))
    {
        SendFmtResponse("[ *unknown* ]\r\n");
    }
    else
    {
        if (m_dwExitCode)
            SendFmtResponse("[ ERROR!: %d ]\r\n", m_dwExitCode);
        else
            SendFmtResponse("[ OK ]\r\n");
    }


    goto lDone;


lError:
    SendFmtResponse("Error (RunInstaller): %u\r\n", rc);



lDone:

    if (procInfo.hProcess != NULL)
    {
        CloseHandle(procInfo.hProcess);
        procInfo.hProcess = NULL;
    }

    if (procInfo.hThread != NULL)
    {
        CloseHandle(procInfo.hThread);
        procInfo.hThread = NULL;
    }

    if (m_hStdOut != NULL)
    {
        CloseHandle(m_hStdOut);
        m_hStdOut = NULL;
    }

    if (m_hStdErr != NULL)
    {
        CloseHandle(m_hStdErr);
        m_hStdErr = NULL;
    }

    return rc;
}









CInstallManager::CInstallManager(CClientAdminConnection *caller)
{
    m_parent = caller;

    m_pIConfig = NULL;

    m_fIsJacked = FALSE;

    ::ZeroMemory(&m_szRootPath,   sizeof(m_szRootPath));
    ::ZeroMemory(&m_szDotNetPath, sizeof(m_szDotNetPath));
}




CInstallManager::~CInstallManager()
{
    CInstallComponent *p = NULL;

    if (m_fIsJacked)
    {
        UnjackStationDesktop();
    }

    while(m_components.GetSize() > 0)
    {
        p = NULL;

        if(!m_components.GetAt(0, (void**)&p))
            break;

        m_components.RemoveAt(0);
        
        if (p)
            delete p;
    }
}




DWORD CInstallManager::Run(BOOL fInstall, CXomParamList *pParams)
{
    DWORD   idx = 0;
    DWORD   cFailed = 0;
    DWORD   iUnits = 0;
    HRESULT hr = S_OK;

    CInstallComponent   *pComponent = NULL;

    SendFmtResponse("Begin %s components...", fInstall ? "installing" : "uninstalling");
    
    hr = InitComponentList();
    if (FAILED(hr))
    {
        SendFmtResponse("\r\nERROR(CInstallManager::Run): InitComponentList failed (0x%08x)\n", hr);
        goto lError;
    }

    iUnits = pParams != NULL && pParams->GetCount() > 1 ? pParams->GetCount() - 1 : m_components.GetSize();
    SendFmtResponse("( %d component(s) )\r\n", iUnits);

    //-------------------------------------------------------------------------
    // To support installation of the SG's RawNic driver, we need to play some
    // games with the ACLs on the default station's desktop to allow our 
    // process to use it.  This is necessary because Win2K3 has hardcoded logic
    // which prevents a process that doesn't have a WSF_VISIBLE in its process'
    // windows station to install an unsigned driver REGARDLESS OF THE UI 
    // SETTING.  What this means for us is that to get the SG to install, we have
    // to arrange for our "sgsvc.exe -install" process to have a windows station
    // that is tagged as visible, something that won't be true of the normal 
    // XmgmtSrv's process or, more accurately, a process launched by xmgmtsrv
    // (because of how NT services are launched by SCM, they don't have a 
    // visible desktop/station normally)
    //
    // The solution is somewhat sneaky but effective.  By manipulating the DACL 
    // on the winsta0\desktop, we can nerf the security on those objects enough
    // that a process we launch (via CreateProcess) can specify winsta0\default
    // as its default station\desktop.  
    //
    // Oddly enough, even when there are no users logged in to the console or
    // TS, winsta0\default is still 'attachable' which is great for us, but 
    // still a bit weird...
    //
    // $REVIEW (michion): For now, I'm leaving the station\desktop ACL in its
    // nerfed state (because I'm not reverting the DACL with a call to
    // UnjackStationDesktop().  For safety, the DACLs should really be returned
    // once the install/uninstall pass is complete
    //
    hr = JackStationDesktop();
    if (FAILED(hr))
    {
        SendFmtResponse("ERROR(CInstallManager::Run): Unable to establish security access to station/desktop (0x%08x)\n", hr);
        goto lError;
    }


    //-------------------------------------------------------------------------
    // Now, for each component object we created, run the Init() method to have 
    // the component details read out of the configDB and then run the Install
    // method to have the configurator fire
    //
    iUnits = 0;
    for(idx=0; idx < m_components.GetSize(); idx++)
    {
        if(!m_components.GetAt(idx, (void**) &pComponent))
        {
            SendFmtResponse("ERROR(CInstallManager::Run): Unable to GetAt component # %d\n", idx);
            hr = E_UNEXPECTED;
            goto lError;
        }

        if (pParams != NULL && pParams->GetCount() > 1)
        {
            bool foundMatch = false;

            for (DWORD idx = 1; idx < pParams->GetCount(); idx++)
            {
                if (pComponent->GetComponent() == pParams->GetParam(idx))
                {
                    foundMatch = true;
                    break;
                }
            }

            if (!foundMatch)
                continue;
        }

        SendFmtResponse("%3d", iUnits);
        hr = pComponent->RunInstaller(fInstall);
        if (FAILED(hr))
        {
            SendFmtResponse("ERROR(CInstallManager::Run): Installation failed for component %S: (0x%08x)\n", pComponent->GetExecutable(), hr);
            goto lError;
        }

        iUnits++;
        if (!pComponent->Success())
            cFailed++;
    }



    SendFmtResponse("Completed %s %d components.\r\n", fInstall ? "installing" : "uninstalling", iUnits);

    if (cFailed)
    {
        SendFmtResponse("*** %d component install errors detected ***\r\n", cFailed);
        return E_FAIL;
    }
    else
    {
        return S_OK;
    }



lError:
    return hr;
}




CComBSTR& CInstallManager::ServerName()
{
    HRESULT hr = S_OK;

    CHAR    szServerName[MAX_COMPUTERNAME_LENGTH+1] = "";
    DWORD   cchServerName  = sizeof(szServerName) / sizeof(CHAR);


    if (!m_bsServerName)
    {
         //-------------------------------------------------------------------------
        // First thing we need to do is contact the configDB to find out what 
        // service components are supposed to be running here.  All that data
        // in the configDB is keyed off our server name, so we need to get
        // that piece of data first:
    
        if (!GetComputerNameEx(ComputerNameNetBIOS, szServerName, &cchServerName))
        {
            hr = GetLastError();
            SendFmtResponse("ERROR(CInstallManager::ServerName): GetComputerNameEx: (0x%08x)\n", hr);
            goto lCleanup;
        }
    
        m_bsServerName = szServerName;
    }

    
lCleanup:
    return m_bsServerName;
}






HRESULT CInstallManager::InitComponentList()
{
    HRESULT rc = S_OK;
    HRESULT hr = S_OK;

    SAFEARRAY   *psaRet = NULL;
    long        lLow, lHigh, lIdx;
    VARTYPE     vt;
	void        *pv;
    
    CComPtr<IConfig>    pIConfig;
    
    CInstallComponent   *pComponent = NULL;



     //-------------------------------------------------------------------------
    // Get an interface pointer to the common config object
    //
    rc = pIConfig.CoCreateInstance(__uuidof(ConfigInterop));
    if (FAILED(rc))
    {
        SendFmtResponse("ERROR(CInstallManager::Init): Could not CoCreateInstance CCW for CommonConfig.DLL, has it been REGASM'd?\n");
        goto lError;
    }
    
	rc = pIConfig->GetComponentListByServer(ServerName(), &psaRet);
	if (FAILED(rc))
	{
        SendFmtResponse("ERROR(CInstallManager::Init): GetComponentListByServer failed for server %S (0x%08x)\n", m_bsServerName, rc);
        return rc;
	}

    if (psaRet == NULL)
    {
        SendFmtResponse("ERROR(CInstallManager::Init): GetComponentListByServer returned no SAFEARRAY\n");
        return rc;
    }

    if (SafeArrayGetDim(psaRet) != 1)
    {
        SendFmtResponse("ERROR(CInstallManager::Init): GetComponentListByServer returned a SAFEARRAY with more than one dimension\n");
        return rc;
    }

    hr = SafeArrayGetLBound(psaRet, 1, &lLow);
	if (FAILED(hr))
	{
        SendFmtResponse("ERROR(CInstallManager::Init): SafeArrayGetLBound: (0x%08x)\n", hr);
        return rc;
	}

    hr = SafeArrayGetUBound(psaRet, 1, &lHigh);
	if (FAILED(hr))
	{
        SendFmtResponse("ERROR(CInstallManager::Init): SafeArrayGetUBound: (0x%08x)\n", hr);
        return rc;
	}

    hr = SafeArrayGetVartype(psaRet, &vt);
    if (FAILED(hr))
    {
        SendFmtResponse("ERROR(CInstallManager::Init): SafeArrayGetVartype: (0x%08x)\n", hr);
        return rc;
    }

    if (vt != VT_BSTR)
    {
        SendFmtResponse("ERROR(CInstallManager::Init): GetComponentListByServer returned a SAFEARRAY that is not composed of VT_BSTR\n");
        return rc;
    }


    for (lIdx=lLow; lIdx <=lHigh; lIdx++)
    {
        CComBSTR        bstrComponent;

        CComPtr<IComponentInfo> pComponentInfo;


        hr = SafeArrayGetElement(psaRet, &lIdx, (void *)&bstrComponent);
        if (FAILED(hr))
        {
            SendFmtResponse("ERROR(CInstallManager::Init): SafeArrayGetElement: (0x%08x)\n", hr);
            return rc;
        }


        pComponent = new CInstallComponent(this, bstrComponent);

        hr = pComponent->Init(pIConfig);
        if (FAILED(hr))
        {
            SendFmtResponse("ERROR(CInstallManager::Init): SafeArrayGetElement: (0x%08x)\n", hr);
            return rc;
        }

        m_components.Add((void*)pComponent, NULL);
    }
     

    return S_OK;

    
lError:
    return rc;

}






HRESULT CInstallManager::SendFmtResponse(char* pszFmt, ...)
{
    HRESULT hr = S_OK;
    va_list marker;

    if (m_parent)
    {
        va_start(marker, pszFmt);
        hr = m_parent->SendVargResponse(pszFmt, marker);
        va_end(marker);
    }

    return hr;
}




LPWSTR CInstallManager::DotNetPath()
{
    HRESULT hr = S_OK;
    HKEY    hKey = NULL;
    DWORD   cbDotNetRoot = sizeof(m_szDotNetPath);


    if (wcslen(m_szDotNetPath) == 0)
    {
        hr = RegOpenKeyExW(
                    HKEY_LOCAL_MACHINE,
                    L"SOFTWARE\\Microsoft\\.NETFramework",
                    0,
                    KEY_READ,
                    &hKey
                    );
        if (FAILED(hr))
        {
            SendFmtResponse("ERROR(CInstallManager::DotNetPath): RegOpenKeyExW: (0x%08x)\n", hr);
            goto lCleanup;
        }
        
    
        hr = RegQueryValueExW(
                    hKey,
                    L"InstallRoot",
                    NULL,
                    NULL,
                    (LPBYTE)m_szDotNetPath,
                    &cbDotNetRoot
                    );

        if (FAILED(hr))
        {
            SendFmtResponse("ERROR(CInstallManager::DotNetPath): RegQueryValueExW: (0x%08x)\n", hr);
            goto lCleanup;
        }
    

        // $REVIEW (michion): Need to calc/derive the current .net version or maybe search
        //                    for installutil.exe?

        wcscat(m_szDotNetPath, L"v2.0.50727");
    }



lCleanup:

    if (hKey)
        RegCloseKey(hKey);

    return m_szDotNetPath;      // ok to return even in error conditions since the string has been nulled out
}




LPWSTR CInstallManager::WebRootPath()
{
    HRESULT hr = S_OK;

    WCHAR   szModulePath[MAX_PATH];
    WCHAR   szDrive[_MAX_DRIVE];
    WCHAR   szDir[_MAX_DIR];
    WCHAR   *pc = NULL;


    if (wcslen(m_szRootPath) == 0)
    {
        //-------------------------------------------------------------------------
        // Infer the root directory of the installation based on the location of 
        // the XMGMTSRV.EXE (which should be x:\webroot\common)
        //
        // $REVIEW (michion): Definitely not the best solution here?
        //
        if (!GetModuleFileNameW(NULL, szModulePath, ARRAY_ELEMENTS(szModulePath)))
        {
            hr = GetLastError();
            SendFmtResponse("ERROR(CInstallManager::InstallRootPath): GetModuleFileNameW: (0x%08x)\n", hr);
            goto lCleanup;
        }
    
        _wsplitpath(szModulePath, szDrive, szDir, NULL, NULL);
    
        pc = wcsrchr(szDir, '\\');         // find and strip the trailing backslash
        if ( pc != NULL && pc != szDir)
            *pc = '\0';
    
        pc = wcsrchr(szDir, '\\');        // ... and strip the last directory (should be 'common')
        if ( pc != NULL && pc != szDir)
            *pc = '\0';
    
    
        // $REVIEW (michion): Should we enforce that the last directory we stripped was 'common' ?
        swprintf(m_szRootPath, L"%s%s", szDrive, szDir);
    }


lCleanup:

    return m_szRootPath;

}




HRESULT CInstallManager::JackStationDesktop()
{
    HRESULT                 hr = E_FAIL;
    HANDLE                  hToken = NULL;
    HDESK                   hdesk = NULL;
    HWINSTA                 hwinsta = NULL;
    HWINSTA                 hwinstaSave = NULL;
    PSID                    pSid = NULL;

    //-------------------------------------------------------------------------
    // Need to make sure NOT to repeatedly call the AddAce*() methods as they
    // currently do not check to see if an ACE is already present.  If they are
    // called repeatedly to add the same ACE, eventually, we run out of space
    // in the DACL, which is a bad thing
    //
    // $REVIEW (michion): Where to fix this... probably in the AddAce*()...
    //
    if (m_fIsJacked)
    {
        hr = S_OK;
        goto lDone;
    }

    if (!OpenProcessToken( GetCurrentProcess(), TOKEN_READ, &hToken))
    {
        SendFmtResponse("ERROR: OpenProcessToken %d\r\n", hr = GetLastError());
        goto lDone;
    }
 

    // Save a handle to the caller's current window station.
    if ( (hwinstaSave = GetProcessWindowStation() ) == NULL)
    {
        SendFmtResponse("ERROR: GetProcessWindowStation %d\r\n", hr = GetLastError());
        goto lDone;
    }

    // Get a handle to the interactive window station.
    hwinsta = OpenWindowStation("winsta0", FALSE, READ_CONTROL | WRITE_DAC);
    if (hwinsta == NULL) 
    {
        SendFmtResponse("ERROR: OpenWindowStation %d\r\n", hr = GetLastError());
        goto lDone;
    }

    // To get the correct default desktop, set the caller's 
    // window station to the interactive window station.
    if (!SetProcessWindowStation(hwinsta))
    {
        SendFmtResponse("ERROR: SetProcessWindowStation %d\r\n", hr = GetLastError());
        goto lDone;
    }

    // Get a handle to the interactive desktop.
    hdesk = OpenDesktop("default", 0, FALSE, READ_CONTROL | WRITE_DAC | DESKTOP_WRITEOBJECTS | DESKTOP_READOBJECTS);
    if (hdesk == NULL) 
    {
        SendFmtResponse("ERROR: OpenDesktop %d\r\n", hr = GetLastError());
        goto lDone;
    }

    // Restore the caller's window station.
    if (!SetProcessWindowStation(hwinstaSave)) 
    {
        SendFmtResponse("ERROR: SetProcessWindowStation %d\r\n", hr = GetLastError());
        goto lDone;
    }


    // Get the SID for the client's logon session.
    if (!GetLogonSID(hToken, &pSid)) 
    {
        SendFmtResponse("ERROR: GetLogonSID %d\r\n", hr = GetLastError());
        goto lDone;
    }
    
    // Allow logon SID full access to interactive window station.
    if (! AddAceToWindowStation(hwinsta, pSid) ) 
    {
        SendFmtResponse("ERROR: AddAceToWindowStation %d\r\n", hr = GetLastError());
        goto lDone;
    }
    
    // Allow logon SID full access to interactive desktop.
    if (! AddAceToDesktop(hdesk, pSid) ) 
    {
        SendFmtResponse("ERROR: AddAceToDesktop %d\r\n", hr = GetLastError());
        goto lDone;
    }
    

    hr = S_OK;
    
lDone:

    // $REVIEW (michion): This actually results in SetProcessWindowStation being called twice in normal cases
    if (hwinstaSave != NULL)
       SetProcessWindowStation (hwinstaSave);
 
    if (pSid)
       FreeLogonSID(&pSid);
 
    if (hwinsta)
       CloseWindowStation(hwinsta);
 
    if (hdesk)
       CloseDesktop(hdesk);

    return hr;


}






HRESULT CInstallManager::UnjackStationDesktop()
{
    HRESULT                 hr = E_FAIL;

    hr = S_OK;
    goto lDone;


lDone:

    return hr;
}


BOOL CInstallManager::AddAceToWindowStation(HWINSTA hwinsta, PSID psid)
{
   ACCESS_ALLOWED_ACE   *pace;
   ACL_SIZE_INFORMATION aclSizeInfo;
   BOOL                 bDaclExist;
   BOOL                 bDaclPresent;
   BOOL                 bSuccess = FALSE;
   DWORD                dwNewAclSize;
   DWORD                dwSidSize = 0;
   DWORD                dwSdSizeNeeded;
   PACL                 pacl;
   PACL                 pNewAcl;
   PSECURITY_DESCRIPTOR psd = NULL;
   PSECURITY_DESCRIPTOR psdNew = NULL;
   PVOID                pTempAce;
   SECURITY_INFORMATION si = DACL_SECURITY_INFORMATION;
   unsigned int         i;

   __try
   {
      // Obtain the DACL for the window station.

      if (!GetUserObjectSecurity(
             hwinsta,
             &si,
             psd,
             dwSidSize,
             &dwSdSizeNeeded)
      )
      if (GetLastError() == ERROR_INSUFFICIENT_BUFFER)
      {
         psd = (PSECURITY_DESCRIPTOR)HeapAlloc(
               GetProcessHeap(),
               HEAP_ZERO_MEMORY,
               dwSdSizeNeeded);

         if (psd == NULL)
            __leave;

         psdNew = (PSECURITY_DESCRIPTOR)HeapAlloc(
               GetProcessHeap(),
               HEAP_ZERO_MEMORY,
               dwSdSizeNeeded);

         if (psdNew == NULL)
            __leave;

         dwSidSize = dwSdSizeNeeded;

         if (!GetUserObjectSecurity(
               hwinsta,
               &si,
               psd,
               dwSidSize,
               &dwSdSizeNeeded)
         )
            __leave;
      }
      else
         __leave;

      // Create a new DACL.

      if (!InitializeSecurityDescriptor(
            psdNew,
            SECURITY_DESCRIPTOR_REVISION)
      )
         __leave;

      // Get the DACL from the security descriptor.

      if (!GetSecurityDescriptorDacl(
            psd,
            &bDaclPresent,
            &pacl,
            &bDaclExist)
      )
         __leave;

      // Initialize the ACL.

      ZeroMemory(&aclSizeInfo, sizeof(ACL_SIZE_INFORMATION));
      aclSizeInfo.AclBytesInUse = sizeof(ACL);

      // Call only if the DACL is not NULL.

      if (pacl != NULL)
      {
         // get the file ACL size info
         if (!GetAclInformation(
               pacl,
               (LPVOID)&aclSizeInfo,
               sizeof(ACL_SIZE_INFORMATION),
               AclSizeInformation)
         )
            __leave;
      }

      // Compute the size of the new ACL.

      dwNewAclSize = aclSizeInfo.AclBytesInUse + (2*sizeof(ACCESS_ALLOWED_ACE)) + (2*GetLengthSid(psid)) - (2*sizeof(DWORD));

      // Allocate memory for the new ACL.

      pNewAcl = (PACL)HeapAlloc(
            GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            dwNewAclSize);

      if (pNewAcl == NULL)
         __leave;

      // Initialize the new DACL.

      if (!InitializeAcl(pNewAcl, dwNewAclSize, ACL_REVISION))
         __leave;

      // If DACL is present, copy it to a new DACL.

      if (bDaclPresent)
      {
         // Copy the ACEs to the new ACL.
         if (aclSizeInfo.AceCount)
         {
            for (i=0; i < aclSizeInfo.AceCount; i++)
            {
               // Get an ACE.
               if (!GetAce(pacl, i, &pTempAce))
                  __leave;

               // Add the ACE to the new ACL.
               if (!AddAce(
                     pNewAcl,
                     ACL_REVISION,
                     MAXDWORD,
                     pTempAce,
                    ((PACE_HEADER)pTempAce)->AceSize)
               )
                  __leave;
            }
         }
      }

      // Add the first ACE to the window station.

      pace = (ACCESS_ALLOWED_ACE *)HeapAlloc(
            GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            sizeof(ACCESS_ALLOWED_ACE) + GetLengthSid(psid) -
                  sizeof(DWORD));

      if (pace == NULL)
         __leave;

      pace->Header.AceType  = ACCESS_ALLOWED_ACE_TYPE;
      pace->Header.AceFlags = CONTAINER_INHERIT_ACE | INHERIT_ONLY_ACE | OBJECT_INHERIT_ACE;
      pace->Header.AceSize  = sizeof(ACCESS_ALLOWED_ACE) + (WORD) GetLengthSid(psid) - sizeof(DWORD);
      pace->Mask            = GENERIC_ACCESS;

      if (!CopySid(GetLengthSid(psid), &pace->SidStart, psid))
         __leave;

      if (!AddAce(
            pNewAcl,
            ACL_REVISION,
            MAXDWORD,
            (LPVOID)pace,
            pace->Header.AceSize)
      )
         __leave;

      // Add the second ACE to the window station.

      pace->Header.AceFlags = NO_PROPAGATE_INHERIT_ACE;
      pace->Mask            = WINSTA_ALL;

      if (!AddAce(
            pNewAcl,
            ACL_REVISION,
            MAXDWORD,
            (LPVOID)pace,
            pace->Header.AceSize)
      )
         __leave;

      // Set a new DACL for the security descriptor.

      if (!SetSecurityDescriptorDacl(
            psdNew,
            TRUE,
            pNewAcl,
            FALSE)
      )
         __leave;

      // Set the new security descriptor for the window station.

      if (!SetUserObjectSecurity(hwinsta, &si, psdNew))
         __leave;

      // Indicate success.

      bSuccess = TRUE;
   }
   __finally
   {
      // Free the allocated buffers.

      if (pace != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)pace);

      if (pNewAcl != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)pNewAcl);

      if (psd != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)psd);

      if (psdNew != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)psdNew);
   }

   return bSuccess;
}



BOOL CInstallManager::AddAceToDesktop(HDESK hdesk, PSID psid)
{
   ACL_SIZE_INFORMATION aclSizeInfo;
   BOOL                 bDaclExist;
   BOOL                 bDaclPresent;
   BOOL                 bSuccess = FALSE;
   DWORD                dwNewAclSize;
   DWORD                dwSidSize = 0;
   DWORD                dwSdSizeNeeded;
   PACL                 pacl;
   PACL                 pNewAcl;
   PSECURITY_DESCRIPTOR psd = NULL;
   PSECURITY_DESCRIPTOR psdNew = NULL;
   PVOID                pTempAce;
   SECURITY_INFORMATION si = DACL_SECURITY_INFORMATION;
   unsigned int         i;

   __try
   {
      // Obtain the security descriptor for the desktop object.

      if (!GetUserObjectSecurity(
            hdesk,
            &si,
            psd,
            dwSidSize,
            &dwSdSizeNeeded))
      {
         if (GetLastError() == ERROR_INSUFFICIENT_BUFFER)
         {
            psd = (PSECURITY_DESCRIPTOR)HeapAlloc(
                  GetProcessHeap(),
                  HEAP_ZERO_MEMORY,
                  dwSdSizeNeeded );

            if (psd == NULL)
               __leave;

            psdNew = (PSECURITY_DESCRIPTOR)HeapAlloc(
                  GetProcessHeap(),
                  HEAP_ZERO_MEMORY,
                  dwSdSizeNeeded);

            if (psdNew == NULL)
               __leave;

            dwSidSize = dwSdSizeNeeded;

            if (!GetUserObjectSecurity(
                  hdesk,
                  &si,
                  psd,
                  dwSidSize,
                  &dwSdSizeNeeded)
            )
               __leave;
         }
         else
            __leave;
      }

      // Create a new security descriptor.

      if (!InitializeSecurityDescriptor(
            psdNew,
            SECURITY_DESCRIPTOR_REVISION)
      )
         __leave;

      // Obtain the DACL from the security descriptor.

      if (!GetSecurityDescriptorDacl(
            psd,
            &bDaclPresent,
            &pacl,
            &bDaclExist)
      )
         __leave;

      // Initialize.

      ZeroMemory(&aclSizeInfo, sizeof(ACL_SIZE_INFORMATION));
      aclSizeInfo.AclBytesInUse = sizeof(ACL);

      // Call only if NULL DACL.

      if (pacl != NULL)
      {
         // Determine the size of the ACL information.

         if (!GetAclInformation(
               pacl,
               (LPVOID)&aclSizeInfo,
               sizeof(ACL_SIZE_INFORMATION),
               AclSizeInformation)
         )
            __leave;
      }

      // Compute the size of the new ACL.

      dwNewAclSize = aclSizeInfo.AclBytesInUse + sizeof(ACCESS_ALLOWED_ACE) + GetLengthSid(psid) - sizeof(DWORD);

      // Allocate buffer for the new ACL.

      pNewAcl = (PACL)HeapAlloc(
            GetProcessHeap(),
            HEAP_ZERO_MEMORY,
            dwNewAclSize);

      if (pNewAcl == NULL)
         __leave;

      // Initialize the new ACL.

      if (!InitializeAcl(pNewAcl, dwNewAclSize, ACL_REVISION))
         __leave;

      // If DACL is present, copy it to a new DACL.

      if (bDaclPresent)
      {
         // Copy the ACEs to the new ACL.
         if (aclSizeInfo.AceCount)
         {
            for (i=0; i < aclSizeInfo.AceCount; i++)
            {
               // Get an ACE.
               if (!GetAce(pacl, i, &pTempAce))
                  __leave;

               // Add the ACE to the new ACL.
               if (!AddAce(
                  pNewAcl,
                  ACL_REVISION,
                  MAXDWORD,
                  pTempAce,
                  ((PACE_HEADER)pTempAce)->AceSize)
               )
                  __leave;
            }
         }
      }

      // Add ACE to the DACL.

      if (!AddAccessAllowedAce(
            pNewAcl,
            ACL_REVISION,
            DESKTOP_ALL,
            psid)
      )
         __leave;

      // Set new DACL to the new security descriptor.

      if (!SetSecurityDescriptorDacl(
            psdNew,
            TRUE,
            pNewAcl,
            FALSE)
      )
         __leave;

      // Set the new security descriptor for the desktop object.

      if (!SetUserObjectSecurity(hdesk, &si, psdNew))
         __leave;

      // Indicate success.

      bSuccess = TRUE;
   }
   __finally
   {
      // Free buffers.

      if (pNewAcl != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)pNewAcl);

      if (psd != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)psd);

      if (psdNew != NULL)
         HeapFree(GetProcessHeap(), 0, (LPVOID)psdNew);
   }

   return bSuccess;
}








BOOL CInstallManager::GetLogonSID (HANDLE hToken, PSID *ppsid) 
{
    BOOL            bSuccess    = FALSE;
    DWORD           dwIndex     = 0;
    DWORD           dwLength    = 0;
    PTOKEN_GROUPS   ptg         = NULL;

    
    // Verify the parameter passed in is not NULL.
    if (NULL == ppsid)
        goto Cleanup;

    *ppsid = NULL;
    // Primer call to determine buffer size requirements
    if (!GetTokenInformation(hToken, TokenGroups, (LPVOID) ptg, 0, &dwLength)) 
    {
        if (GetLastError() != ERROR_INSUFFICIENT_BUFFER) 
            goto Cleanup;
        
        ptg = (PTOKEN_GROUPS)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwLength);
        if (ptg == NULL)
            goto Cleanup;
    }
    
    // Now make the actual call to get data
    if (!GetTokenInformation(hToken, TokenGroups, (LPVOID) ptg, dwLength, &dwLength)) 
    {
        goto Cleanup;
    }
    
    // Loop through the groups to find the logon SID.
    for (dwIndex = 0; dwIndex < ptg->GroupCount; dwIndex++) 
    {
        if ((ptg->Groups[dwIndex].Attributes & SE_GROUP_LOGON_ID) ==  SE_GROUP_LOGON_ID) 
        {
            // Found the logon SID; make a copy of it.
            dwLength = GetLengthSid(ptg->Groups[dwIndex].Sid);

            *ppsid = (PSID) HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwLength);
            if (*ppsid == NULL)
                goto Cleanup;

            if (!CopySid(dwLength, *ppsid, ptg->Groups[dwIndex].Sid)) 
            {
                HeapFree(GetProcessHeap(), 0, (LPVOID)*ppsid);
                goto Cleanup;
            }
            break;
        }
    }
    
    bSuccess = (*ppsid != NULL);


Cleanup: 

    if (ptg != NULL)
        HeapFree(GetProcessHeap(), 0, (LPVOID)ptg);
    
    return bSuccess;
}






VOID CInstallManager::FreeLogonSID (PSID *ppsid) 
{
    HeapFree(GetProcessHeap(), 0, (LPVOID)*ppsid);
}








BOOL CInstallManager::SetPrivilege(HANDLE hToken, LPCTSTR lpszPrivilege, BOOL bEnablePrivilege)
{
    TOKEN_PRIVILEGES tp;
    LUID luid;

    if ( !LookupPrivilegeValue( 
            NULL,            // lookup privilege on local system
            lpszPrivilege,   // privilege to lookup 
            &luid ) )        // receives LUID of privilege
    {
        printf("LookupPrivilegeValue error: %u\n", GetLastError() ); 
        return FALSE; 
    }
    
    tp.PrivilegeCount     = 1;
    tp.Privileges[0].Luid = luid;

    if (bEnablePrivilege)
        tp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;
    else
        tp.Privileges[0].Attributes = 0;
    
    // Enable the privilege or disable all privileges.
    if ( !AdjustTokenPrivileges(
           hToken, 
           FALSE, 
           &tp, 
           sizeof(TOKEN_PRIVILEGES), 
           (PTOKEN_PRIVILEGES) NULL, 
           (PDWORD) NULL) )
    { 
        printf("AdjustTokenPrivileges error: %u\n", GetLastError() ); 
        return FALSE; 
    } 

return TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_xmgmtsrv_none_12.4.56.0_none_f3fa9e10c8873f52
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xmgmtsrv
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.manifest
XP_MANIFEST_PATH=manifests\x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.cat
XP_CATALOG_PATH=manifests\x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.cat
XP_PAYLOAD_PATH=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xmgmtsrv,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\precomp.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//    xnqparse.pch will be the pre-compiled header
//    stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\precomp.h ===
#ifndef _PRECOMP_H_
#define _PRECOMP_H_

#include <stdio.h>
#include <stdlib.h>
#include <malloc.h>

#ifdef UNICODE
#undef UNICODE
#endif

#ifdef _UNICODE
#undef _UNICODE
#endif


#define INCL_WINSOCK_API_TYPEDEFS 1
#include <winsock2.h>
#include <wsockntp.h>
#include <Iphlpapi.h>
#include <Aclapi.h>
#include <Sddl.h>
#include <winhttp.h>


#ifndef ARRAY_ELEMENTS
#define ARRAY_ELEMENTS(x) (sizeof(x)/sizeof(x[0]))
#endif

#include <atlbase.h>
#include <atlcom.h>

#include <wmsstd.h>
#include <xalloc.h>
#include <ntservice.h>
#include <servsock.h>
#include <servpipe.h>
#include <vptrarr.h>
#include <xomcontrolprot.h>
#include <xlocks.h>
#include <tcpcnt.h>
#include <xmgmt.h>
#include <vavltable.h>
#include <xomsettings.h>
#include <eventthrottle.h>
#include <xomlggng.h>
#include <xboxverp.h>
#include <xeventids.h>

#ifndef ASSERT
#define ASSERT XOMASSERT
#endif

#import "CommonConfig.tlb" raw_interfaces_only, no_smart_pointers
using namespace XblConfig;

using namespace xlocks;

#endif // #ifndef _XCSSERVER_PRECOMP_H_
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\xmgmtsrv.h ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    xmgmtsrv.h

Abstract:


--*/

#ifndef _XMGMTSRV_H_
#define _XMGMTSRV_H_

#include "clientservice.h"
#include "clientadmin.h"

#define XMGMTSRV_ADMIN_PORT ((WORD)(4100))

class CXMgmtSrv : 
    public CServerPipeServerCallback,
    public CServerSocketCallback
{
public:

    IMPLEMENT_REFCOUNT;

    CXMgmtSrv();

    ~CXMgmtSrv();

    HRESULT EnableMessingWithSecurity();

    HRESULT InitializeServerPipe();

    HRESULT Init();

    void Shutdown();

    HRESULT Go();

protected:

    void GetAdminListenAddresses(
        sockaddr_in* psa1, 
        sockaddr_in* psa2 );

    virtual HRESULT OnPipeConnect(
        CServerPipeServer* pServerPipe,
        CServerPipe* pAcceptedPipe,
        HRESULT hrResult,
        ULONGLONG qwCallbackArg );

    virtual void OnSocketAccept(
                        CServerSocket *pListenSocket,
                        CServerSocket *pAcceptedSocket,
                        sockaddr_in *pLocalAddr,
                        sockaddr_in *pRemoteAddr,
                        HRESULT hrCallback,
                        QWORD qwCallbackArg );
    
    static DWORD WINAPI PingThreadProc( void *pvParam );
    void DoPings();

    HRESULT CrackUrls(LPCSTR pszUrlList, LPWSTR* ppszBuf, DWORD *pdwNumUrls, URL_COMPONENTS** ppUrlComponents);


    CCompletionPort* m_pIOCP;
    
    CServerPipeServer* m_pServerPipe;

    CClientServiceList* m_pServiceList;

    CServerSocket* m_pSocket1;
        // Admin connection socket 1

    CServerSocket* m_pSocket2;
        // Admin connection socket 2
    CServerSocket* m_pLocalHostSocket;

    CClientAdminList* m_pAdminList;

    HANDLE m_hevtShutdown;
    HANDLE m_hPingThread;

};



#endif
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\main.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    main.cpp

Abstract:

    Service handler and entry point

--*/

#include "precomp.h"

#include "xmgmtsrv.h"

CXMgmtSrv g_oSrv;

class CService : public CNTService
{
public:

    CService() :
        CNTService(
            L"xmgmt",
            L"XBox Online Management Service",
            L"Allows remote administration of the XBox online services",
            NULL,
            Component_xmgmtsrv)
    {
    }

    virtual HRESULT InitService (
        DWORD dwArgc, 
        LPWSTR* ppszArgv
    )
    {
        HRESULT hr = S_OK;

        // Initialize Winsock

        WSADATA wsaData;

        int rc = WSAStartup( MAKEWORD( 2, 2 ), &wsaData );
        if( 0 != rc )
        {
            hr = HRESULT_FROM_WIN32( WSAGetLastError() );
            goto lDone;
        }

        // Initialize the service

        hr = g_oSrv.Init();

        if(FAILED(hr))
        {
            goto lDone;
        }
        
    lDone:

        return hr;
    }

    virtual HRESULT RunService(
        BOOL* pfServiceRan
    )
    {
        HRESULT hr = S_OK;

        hr = g_oSrv.Go();
        if(FAILED(hr))
        {
            goto lDone;
        }

        
        WaitForSingleObject(ShutdownEvent(), INFINITE);
        
lDone:
        g_oSrv.Shutdown();

        return hr;
    }
};

// The instance of our service

CService g_Service;

// The CNTService library depends on the following global

CNTService* g_pService = &g_Service;

int __cdecl wmain(
    int argc, 
    WCHAR** argv
)
/*++

Routine Description:

    entry point. Hands execution control over to the NT service class.

Arguments:

    arc - count of arguments
    argv - array of arguments

Return Value:

    None

--*/ 
{
    return g_Service.ProcessMain(argc, argv);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\xmgmtsrv.cpp ===
/*++

Copyright (c) 2001 Microsoft Corporation

Module Name:

    xmgmtsrv.cpp

Abstract:

--*/

#include "precomp.h"
#include "xmgmtsrv.h"

// Logs
XomDefineArea(PingLog);


// Settings

CXomSettingEx g_oSettingFilterIP1(
    CXomOption(CXomSetting::O_NAME, "xmgmtsrv.FilterIP1") +
    CXomOption(CXomSetting::O_DEFAULT, "") );
    // Takes a ip address in the form: x.x.x.x
    // If specified, it will be used to bind the admin socket to.

CXomSettingEx g_oSettingFilterMAC1(
    CXomOption(CXomSetting::O_NAME, "xmgmtsrv.FilterMAC1") +
    CXomOption(CXomSetting::O_DEFAULT, "") );
    // Takes a 48bit mac address. E.g: 00-06-5b-84-81-E8
    // If specified, it will be used to bind the admin socket to.

CXomSettingEx g_oSettingFilterIP2(
    CXomOption(CXomSetting::O_NAME, "xmgmtsrv.FilterIP2") +
    CXomOption(CXomSetting::O_DEFAULT, "") );
    // Takes a ip address in the form: x.x.x.x
    // If specified, it will be used to bind the admin socket to.

CXomSettingEx g_oSettingFilterMAC2(
    CXomOption(CXomSetting::O_NAME, "xmgmtsrv.FilterMAC2") +
    CXomOption(CXomSetting::O_DEFAULT, "") );
    // Takes a 48bit mac address. E.g: 00-06-5b-84-81-E8
    // If specified, it will be used to bind the admin socket to.


CXomSettingEx g_oSettingPingUrls(
    CXomOption(CXomSetting::O_NAME, "xmgmtsrv.PingUrls") +
    CXomOption(CXomSetting::O_DEFAULT, "") );
    // Takes one or more URLs, separated by semicolon.
    // URLs will be hit on the interval defined in PingIntervalSeconds

CXomSettingEx g_oSettingPingIntervalSecs(
    CXomOption(CXomSetting::O_NAME, "xmgmtsrv.PingIntervalSeconds") +
    CXomOption(CXomSetting::O_DEFAULT, 60) );


CXMgmtSrv::CXMgmtSrv()
{
    m_pIOCP = NULL;
    m_pServerPipe = NULL;
    m_pServiceList = NULL;
    m_pSocket1 = NULL;
    m_pSocket2 = NULL;
    m_pLocalHostSocket = NULL;

}

CXMgmtSrv::~CXMgmtSrv()
{
    Shutdown();

}

HRESULT CXMgmtSrv::EnableMessingWithSecurity()
{
    HANDLE hToken;
    LUID luidDebugPrivilege;
    DWORD dwBufferLength;
    TOKEN_PRIVILEGES* ptp;
    HRESULT hr = S_OK;

    if(!OpenProcessToken(GetCurrentProcess(), PROCESS_VM_WRITE |
        PROCESS_VM_OPERATION, &hToken) )
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }

    if(!LookupPrivilegeValueW(NULL, L"SeSecurityPrivilege",
        &luidDebugPrivilege) )
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }

    dwBufferLength = sizeof(TOKEN_PRIVILEGES) +
        sizeof(LUID_AND_ATTRIBUTES) * 1;

    __try {
        ptp = (TOKEN_PRIVILEGES*) _alloca(dwBufferLength);
    }
    __except( GetExceptionCode() == STATUS_STACK_OVERFLOW )
    {
        _resetstkoflw();
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    ptp->PrivilegeCount = 1;
    ptp->Privileges[0].Luid = luidDebugPrivilege;
    ptp->Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

    if(!AdjustTokenPrivileges(hToken, FALSE, ptp, dwBufferLength, NULL,
        NULL) )
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }

lDone:

    return hr;
}

HRESULT CXMgmtSrv::InitializeServerPipe()
{
    EXPLICIT_ACCESSA ea[2];
    PSECURITY_DESCRIPTOR pSD = NULL;
    DWORD dwRes;
    DWORD dwSDSize;

    HRESULT hr = S_OK;

    //
    // We will allow only two classes of people to access the server pipe:
    // this process and the users locally logged on. No outsiders allowed.
    // To accomplish that I'll use the very well documented and simple to
    // use NT security API (aargghh).
    //

    //
    // Locally logged users can access this object. Only took me 4 hours
    // to figure out how to do this.
    //

    ea[0].grfAccessPermissions = GENERIC_READ | GENERIC_WRITE;
    ea[0].grfAccessMode = GRANT_ACCESS;
    ea[0].grfInheritance = NO_INHERITANCE;
    BuildTrusteeWithNameA(&(ea[0].Trustee), "Local");

    //
    // Include ourselves in the list of people that can access the pipe.
    // Did I mention that I hate all this stuff? BTW, I'm tying this stuff
    // to the System account. Therefore this service can only run under
    // the System account.
    //

    ea[1].grfAccessPermissions = SPECIFIC_RIGHTS_ALL | STANDARD_RIGHTS_ALL |
        GENERIC_ALL;
    ea[1].grfAccessMode = GRANT_ACCESS;
    ea[1].grfInheritance = NO_INHERITANCE;
    BuildTrusteeWithNameA(&(ea[1].Trustee), "System");

    //
    // Finally build the f*#%*&^ security descriptor. I can't believe that
    // I lost my entire day trying to to this.
    //

    dwRes = BuildSecurityDescriptorA(NULL, NULL, 2, ea, 0, NULL, NULL,
        &dwSDSize, &pSD);

     if(dwRes != ERROR_SUCCESS)
    {
        hr = HRESULT_FROM_WIN32(dwRes);
        goto lDone;
    }

    //
    // Initialize the named pipe server passing the security descriptor
    // we created.
    //

    hr = m_pServerPipe->Init(m_pIOCP, L"\\\\.\\pipe\\xmgmtsrvpipe", pSD);

    if(FAILED(hr))
    {
        goto lDone;
    }

lDone:

    if(pSD != NULL)
    {
        LocalFree(pSD);
        pSD = NULL;
    }

    return hr;
}

HRESULT ConvertMACtoIP(
    char* pszMac,
    in_addr* pIp
)
{
    ULONG ulAiBufferSize;
    ulAiBufferSize = 0;
    DWORD dwRet;
    const int MacAddressSize=6;
    BYTE rgbMac[MacAddressSize];

    HRESULT hr = S_OK;

    // First convert the address in the FilterMAC setting into a byte array

    for(DWORD dwByteNdx=0; dwByteNdx < MacAddressSize; dwByteNdx++)
    {
        rgbMac[dwByteNdx] = (BYTE) strtol(pszMac, &pszMac, 16);

        if(*pszMac == '-')
        {
            pszMac++;
        }
    }

    // Get required buffer size

    if((dwRet = GetAdaptersInfo(NULL, &ulAiBufferSize)) !=
        ERROR_BUFFER_OVERFLOW)
    {
        hr = E_FAIL;
        goto lDone;
    }

    // Allocate buffer in the stack

    PIP_ADAPTER_INFO pAi;

    __try
    {
        pAi = (PIP_ADAPTER_INFO)_alloca(ulAiBufferSize);
    }
    __except( GetExceptionCode() == STATUS_STACK_OVERFLOW )
    {
        _resetstkoflw();
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    // Get adapter info structures

    if((dwRet = GetAdaptersInfo(pAi, &ulAiBufferSize)) != ERROR_SUCCESS)
    {
        hr = E_FAIL;
        goto lDone;
    }

    // Find the adapter that matches the Mac address

    while(pAi != NULL)
    {
        if( pAi->AddressLength == MacAddressSize &&
            memcmp(pAi->Address, rgbMac, MacAddressSize) == 0)
        {
            pIp->s_addr = inet_addr(pAi->IpAddressList.IpAddress.String);
            break;
        }

        pAi = pAi->Next;
    }

    if(pAi == NULL)
    {
        // Could not find the Mac address

        hr = E_FAIL;
        goto lDone;
    }

lDone:

    return hr;
}

// Figures out from the config file on which addresses xmgmtsrv should listen
// for the admin connections.
void CXMgmtSrv::GetAdminListenAddresses(
    sockaddr_in* psa1, // Address1
    sockaddr_in* psa2  // Address2 - optional. sin_addr.s_addr == 0 if it should
                       // not be used
)
{
    HRESULT hr = S_OK;

    ZeroMemory(psa1, sizeof(sockaddr_in));
    psa1->sin_family = AF_INET;
    psa1->sin_port = htons(XMGMTSRV_ADMIN_PORT);

    ZeroMemory(psa2, sizeof(sockaddr_in));
    psa2->sin_family = AF_INET;
    psa2->sin_port = htons(XMGMTSRV_ADMIN_PORT);

    // Primary address

    if(g_oSettingFilterIP1.GetStr()[0] != '\0')
    {
        psa1->sin_addr.s_addr = inet_addr(g_oSettingFilterIP1.GetStr());

        if( psa1->sin_addr.s_addr == 0 ||
            psa1->sin_addr.s_addr == INADDR_NONE)
        {
            XomNtEvent(XEVENT_MGMT_CONFIG_17,
                "The setting FilterIP1 is invalid. ");

            hr = E_FAIL;

            goto lDone;
        }
    }
    else if(g_oSettingFilterMAC1.GetStr()[0] != '\0')
    {
        hr = ConvertMACtoIP((char*) g_oSettingFilterMAC1.GetStr(), &(psa1->sin_addr));

        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_MGMT_CONFIG_18,
                "The setting FilterMAC1 is either malformed or the service could "
                "not find the adapter with the matching address. Please fix your "
                "xmgmtsrv.ini file and try again. ");
            goto lDone;
        }
    }

     // Secondary address

    if(g_oSettingFilterIP2.GetStr()[0] != '\0')
    {
        psa2->sin_addr.s_addr = inet_addr(g_oSettingFilterIP2.GetStr());

        if( psa2->sin_addr.s_addr == 0 ||
            psa2->sin_addr.s_addr == INADDR_NONE)
        {
            XomNtEvent(XEVENT_MGMT_CONFIG_19,
                "The setting FilterIP2 is invalid. ");

            hr = E_FAIL;

            goto lDone;
        }
    }
    else if(g_oSettingFilterMAC2.GetStr()[0] != '\0')
    {
        hr = ConvertMACtoIP((char*) g_oSettingFilterMAC2.GetStr(), &(psa2->sin_addr));

        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_MGMT_CONFIG_20,
                "The setting FilterMAC2 is either malformed or the service could "
                "not find the adapter with the matching address. Please fix your "
                "xmgmtsrv.ini file and try again. ");
            goto lDone;
        }
    }

lDone:

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_HACK_0,
            "Failed to get the filter options from xmgmtsrv.ini. The service "
            "will try to listen on whatever NIC it finds but that may pose as "
            "a security hole. Please check your xmgmtsrv.ini. ");
    }

    return;
}

HRESULT CXMgmtSrv::Init()
{
    HRESULT hr = S_OK;

    sockaddr_in sa1;
    sockaddr_in sa2;

    // We need settings. We need logging. But we can't fully initialize the management framework
    // yet so we're going to manually initialize just the components we need.

    CXomLoggingControl oLogging;
    oLogging.InitNTLogTarget("xmgmtsrv");

    // We need the priviledge to mess with the security attributes of
    // objects.

    EnableMessingWithSecurity();

    hr = CCompletionPort::CreateInstance(
        0, 0, THREAD_PRIORITY_NORMAL, &m_pIOCP);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_11,
            "Failed to create completion port, hr = 0x%08x", hr);

        goto lDone;
    }

    m_pServiceList = new CClientServiceList;

    if(NULL == m_pServiceList)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    m_pAdminList = new CClientAdminList;

    if(NULL == m_pAdminList)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    hr = m_pServiceList->Init(m_pAdminList);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_12,
            "Failed to init service list, hr = 0x%08x", hr);
        goto lDone;
    }

    hr = m_pAdminList->Init(m_pServiceList);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_13,
            "Failed to init admin list, hr = 0x%08x", hr);
        goto lDone;
    }

    m_pServerPipe = new CServerPipeServer;

    if(NULL == m_pServerPipe)
    {
        hr = E_OUTOFMEMORY;
        goto lDone;
    }

    hr = InitializeServerPipe();

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_14,
            "Failed to init server pipe, hr = 0x%08x", hr);
        goto lDone;
    }

    // Get the addresses of the NICs to be used to listen for admin commands
    // (xmgmtc)

    GetAdminListenAddresses(&sa1,&sa2);

    if(sa1.sin_addr.s_addr == 0 && sa2.sin_addr.s_addr == 0)
    {
        //should not happen in production environment, only specific NIC should be bind
        XomNtEvent(XEVENT_MGMT_HACK_1,
            "Failed to get the filter options from xmgmtsrv.ini. The service "
            "will try to listen on all the NIC it finds but that may pose as "
            "a security hole. Please check your xmgmtsrv.ini. ");
    }

    if ( sa1.sin_addr.s_addr == 0 && sa2.sin_addr.s_addr != 0 )
    {
        //swap between the 2, otherwise the first one will create sockets for all the existing NIC
        sa1.sin_addr.s_addr = sa2.sin_addr.s_addr;
        sa2.sin_addr.s_addr = 0;
    }

    // Admin listen socket 1
    hr = CServerSocket::CreateInstance(&m_pSocket1,
        m_pIOCP, m_pIOCP);

    if(FAILED(hr))
    {
        goto lDone;
    }

    hr = m_pSocket1->Init(IPPROTO_TCP, &sa1, FALSE);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_15,
            "Failed to init socket, hr = 0x%08x", hr);
        goto lDone;
    }

    hr = m_pSocket1->Listen(SOMAXCONN);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_16,
            "Failed to listen on socket, hr = 0x%08x", hr);
        goto lDone;
    }

    // Admin listen socket 2

    if(sa2.sin_addr.s_addr != 0)
    {
        hr = CServerSocket::CreateInstance(&m_pSocket2,
            m_pIOCP, m_pIOCP);

        if(FAILED(hr))
        {
            goto lDone;
        }

        hr = m_pSocket2->Init(IPPROTO_TCP, &sa2, FALSE);

        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_MGMT_INIT_FAILURE_17,
                "Failed to init socket, hr = 0x%08x", hr);
            goto lDone;
        }

        hr = m_pSocket2->Listen(SOMAXCONN);

        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_MGMT_INIT_FAILURE_18,
                "Failed to listen on socket, hr = 0x%08x", hr);
            goto lDone;
        }
    }

    if ( sa1.sin_addr.s_addr == 0 && sa2.sin_addr.s_addr == 0 )
    {
        goto lDone;
    }

    static const int ciLocalHostAddress = 0x0100007f;
    // if localhost is not specified in .ini file, open a separate socket to allow
    // local clients to connect without specifing a NIC address
    if(sa1.sin_addr.s_addr != ciLocalHostAddress && sa2.sin_addr.s_addr != ciLocalHostAddress)
    {
        sockaddr_in saLocalHost;
        ZeroMemory(&saLocalHost, sizeof(sockaddr_in));
        saLocalHost.sin_family = AF_INET;
        saLocalHost.sin_port = htons(XMGMTSRV_ADMIN_PORT);
        saLocalHost.sin_addr.s_addr = ciLocalHostAddress;

        hr = CServerSocket::CreateInstance(&m_pLocalHostSocket,
            m_pIOCP, m_pIOCP);

        if(FAILED(hr))
        {
            goto lDone;
        }

        hr = m_pLocalHostSocket->Init(IPPROTO_TCP, &saLocalHost, FALSE);

        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_MGMT_INIT_FAILURE_19,
                "Failed to init socket, hr = 0x%08x", hr);
            goto lDone;
        }

        hr = m_pLocalHostSocket->Listen(SOMAXCONN);

        if(FAILED(hr))
        {
            XomNtEvent(XEVENT_MGMT_INIT_FAILURE_20,
                "Failed to listen on socket, hr = 0x%08x", hr);
            goto lDone;
        }
    }




lDone:

    return hr;
}

void CXMgmtSrv::Shutdown()
{

    SetEvent(m_hevtShutdown);
    WaitForSingleObject(m_hPingThread, 15000);

    if(m_pSocket1 != NULL)
    {
        m_pSocket1->Close();
    }

    if(m_pSocket2 != NULL)
    {
        m_pSocket2->Close();
    }

    if(m_pLocalHostSocket != NULL)
    {
        m_pLocalHostSocket ->Close();
    }

    if(m_pAdminList != NULL)
    {
        m_pAdminList->Term();
    }

    if(m_pServiceList != NULL)
    {
        m_pServiceList->Term();
    }

    if(m_pIOCP != NULL)
    {
        m_pIOCP->Shutdown();
    }

    SAFE_RELEASE(m_pServerPipe);
    SAFE_RELEASE(m_pSocket1);
    SAFE_RELEASE(m_pSocket2);
    SAFE_RELEASE(m_pLocalHostSocket);
    SAFE_RELEASE(m_pAdminList);
    SAFE_RELEASE(m_pServiceList);
    SAFE_RELEASE(m_pIOCP);

    SAFE_CLOSEHANDLE(m_hevtShutdown);
    SAFE_CLOSEHANDLE(m_hPingThread);



    g_xomcentral.Term();
}

HRESULT CXMgmtSrv::Go()
{
    HRESULT hr = S_OK;

    hr = m_pServerPipe->Connect(this, 0);

    if(FAILED(hr))
    {
        goto lDone;
    }

    hr = m_pSocket1->Accept(this, 0);

    if(FAILED(hr))
    {
        goto lDone;
    }

    if(m_pSocket2 != NULL)
    {
        m_pSocket2->Accept(this, 0);

        if(FAILED(hr))
        {
            goto lDone;
        }
    }

    if(m_pLocalHostSocket != NULL)
    {
        m_pLocalHostSocket->Accept(this, 0);

        if(FAILED(hr))
        {
            goto lDone;
        }
    }

    // Now we can initialize the management framework

    g_xomcentral.Init("xmgmtsrv");


    //
    // start the ping thread
    //
    m_hevtShutdown = CreateEvent( NULL, FALSE, FALSE, NULL );
    if (m_hevtShutdown == NULL)
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }
    m_hPingThread = CreateThread(NULL, 0, CXMgmtSrv::PingThreadProc, this, 0, NULL);
    if (m_hPingThread == NULL)
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        goto lDone;
    }

lDone:

    return hr;
}

HRESULT CXMgmtSrv::OnPipeConnect(
    CServerPipeServer* pServerPipe,
    CServerPipe* pAcceptedPipe,
    HRESULT hrResult,
    ULONGLONG qwCallbackArg )
{
    HRESULT hr = S_OK;

    if(HRESULT_FROM_WIN32(ERROR_OPERATION_ABORTED) == hrResult)
    {
        // Shutting down

        goto lDone;
    }

    //
    // Did the connect happened or not?
    //

    ASSERT( SUCCEEDED(hrResult) || pAcceptedPipe == NULL );
    if( pAcceptedPipe == NULL )
    {
        goto lDone;
    }

    //
    // Add this client to the list
    //

    hr = m_pServiceList->CreateInstance(pAcceptedPipe, NULL);

    if(FAILED(hr))
    {
        goto lDone;
    }

    //
    // Allow more clients to connect
    //
    hr = m_pServerPipe->Connect(this, 0);

    if(FAILED(hr))
    {
        // Attempt to create a new named pipe failed for some reason, so
        // no new clients can connect to xmgmt in order to receive client
        // requests.  Flag an error in this case.
        XomNtEvent(XEVENT_MGMT_INIT_CONNECT_PIPE_FAILURE,
            "Unable to accept new connections from service components, hr = 0x%08x", hr);
        goto lDone;
        
    }

lDone:

    return hr;
}

void CXMgmtSrv::OnSocketAccept(
                    CServerSocket *pListenSocket,
                    CServerSocket *pAcceptedSocket,
                    sockaddr_in *pLocalAddr,
                    sockaddr_in *pRemoteAddr,
                    HRESULT hrCallback,
                    QWORD qwCallbackArg )
{
    HRESULT hr = S_OK;

    if(HRESULT_FROM_WIN32(ERROR_OPERATION_ABORTED) == hrCallback)
    {
        // Most likely case is that we're shutting down

        goto lDone;
    }

    if(FAILED(hrCallback))
    {
        goto lDone;
    }

    hr = m_pAdminList->CreateInstance(pAcceptedSocket, NULL);

    if(FAILED(hr))
    {
        goto lDone;
    }

    // Schedule another pending accept on the listen socket
    hr = pListenSocket->Accept(this, 0);

    if(FAILED(hr))
    {
        XomNtEvent(XEVENT_MGMT_INIT_ACCEPT_FAILURE,
            "Unable to accept new network client connections, hr = 0x%08x", hr);
        goto lDone;
    }

lDone:
    return;
}

DWORD CXMgmtSrv::PingThreadProc(LPVOID lpParam)
{
    ((CXMgmtSrv*)lpParam)->DoPings();
    return 0;
}

void CXMgmtSrv::DoPings()
{
    HINTERNET hSession = NULL;
    HINTERNET hConnect = NULL;
    HINTERNET hRequest = NULL;
    WCHAR wszUA[255];
    URL_COMPONENTS* pUrlComponents = NULL;
    DWORD dwNumUrls = 0;
    DWORD i = 0;
    DWORD n = 0;
    DWORD dwRes = 0;
    DWORD dwStatus = 0;
    DWORD dwRead = 0;
    DWORD dwLen = 0;
    LPWSTR pwszBuf;
    char szRespBuf[2048];
    HRESULT hr;
    // automatically use whatever credentials the service is currently running under
    DWORD dwOpt = WINHTTP_AUTOLOGON_SECURITY_LEVEL_LOW;


    if (FAILED(CrackUrls(g_oSettingPingUrls.GetStr(), &pwszBuf, &dwNumUrls, &pUrlComponents)))
    {
        goto Done;
    }

    if (dwNumUrls == 0)
    {
        // nothing to do
        goto Done;
    }

    //
    // initialize WinHttp
    //

    _snwprintf(wszUA, 255, L"xon/%s", VER_PRODUCTVERSION_STR);
    hSession = WinHttpOpen(wszUA,
                           WINHTTP_ACCESS_TYPE_DEFAULT_PROXY,
                           WINHTTP_NO_PROXY_NAME,
                           WINHTTP_NO_PROXY_BYPASS, 0);
    if (!hSession)
    {
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_21, "WinHttpOpen() failed, hr = 0x%08x",
                    HRESULT_FROM_WIN32(GetLastError()));
        goto Done;
    }



    while (true)
    {
        for (i = 0; i < dwNumUrls; i++)
        {

            // check to see if we should be shutting down
            dwRes = WaitForSingleObject(m_hevtShutdown, 0);
            if (dwRes == WAIT_OBJECT_0)
            {
                // shutting down
                goto Done;
            }

            hConnect = WinHttpConnect(hSession,
                                      pUrlComponents[i].lpszHostName,
                                      pUrlComponents[i].nPort,
                                      0);
            if (hConnect == NULL)
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_PING_ERROR,
                            "Failed to connect to %S:%d, hr = 0x%08x",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            hr);
                goto Next;
            }

            hRequest = WinHttpOpenRequest(hConnect, L"GET",
                                          pUrlComponents[i].lpszUrlPath,
                                          NULL, WINHTTP_NO_REFERER,
                                          WINHTTP_DEFAULT_ACCEPT_TYPES,
                                          WINHTTP_FLAG_REFRESH);
            if (hRequest == NULL)
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_PING_ERROR_1,
                            "Failed to open request to %S:%d%S, hr = 0x%08x",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            pUrlComponents[i].lpszUrlPath,
                            hr);
                goto Next;
            }


            if (!WinHttpSetOption(hRequest, WINHTTP_OPTION_AUTOLOGON_POLICY, &dwOpt, sizeof(dwOpt)))
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_PING_ERROR_2,
                            "Failed to set security option for %S:%d%S, hr = 0x%08x",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            pUrlComponents[i].lpszUrlPath,
                            hr);
                goto Next;
            }

            if (!WinHttpSendRequest(hRequest,
                                    WINHTTP_NO_ADDITIONAL_HEADERS, 0,
                                    WINHTTP_NO_REQUEST_DATA, 0, 0, 0))
            {

                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_PING_ERROR_3,
                            "Failed to send request to %S:%d%S, hr = 0x%08x",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            pUrlComponents[i].lpszUrlPath,
                            hr);
                goto Next;
            }

            if (!WinHttpReceiveResponse(hRequest, 0))
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_PING_ERROR_4,
                            "Failed to receive response to %S:%d%S, hr = 0x%08x",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            pUrlComponents[i].lpszUrlPath,
                            hr);
                goto Next;
            }

            //
            // check the status
            //
            dwStatus = 0;
            dwLen = sizeof(dwStatus);
            if (!WinHttpQueryHeaders(hRequest,
                                     WINHTTP_QUERY_STATUS_CODE | WINHTTP_QUERY_FLAG_NUMBER,
                                     WINHTTP_HEADER_NAME_BY_INDEX,
                                     &dwStatus, &dwLen,
                                     WINHTTP_NO_HEADER_INDEX))

            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_PING_ERROR_5,
                            "Failed to query for status code from %S:%d%S, hr = 0x%08x",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            pUrlComponents[i].lpszUrlPath,
                            hr);
                goto Next;
            }

            if (dwStatus != HTTP_STATUS_OK)
            {
                XomNtEvent(XEVENT_MGMT_PING_ERROR_6,
                            "URL %S:%d%S returned status code %d!",
                            pUrlComponents[i].lpszHostName,
                            pUrlComponents[i].nPort,
                            pUrlComponents[i].lpszUrlPath,
                            dwStatus);
            }


            //
            // log whever text came back
            //
            n = 0;
            do
            {
                ZeroMemory(szRespBuf, sizeof(szRespBuf));
                if (!WinHttpReadData(hRequest, szRespBuf, sizeof(szRespBuf), &dwRead))
                {
                    hr = HRESULT_FROM_WIN32(GetLastError());
                    XomNtEvent(XEVENT_MGMT_PING_ERROR_7,
                                "Failed to read response from %S:%d%S! hr=0x%08x",
                                pUrlComponents[i].lpszHostName,
                                pUrlComponents[i].nPort,
                                pUrlComponents[i].lpszUrlPath,
                                hr);
                    goto Next;
                }

                if (dwRead > 0)
                {
                    XomTrace(PingLog, (dwStatus == HTTP_STATUS_OK ? L_LOW : L_ERROR), "PNG|%08x|%S:%d%S|%d|%d|%s",
                           hr,
                           pUrlComponents[i].lpszHostName,
                           pUrlComponents[i].nPort,
                           pUrlComponents[i].lpszUrlPath,
                           dwStatus, n++, szRespBuf);
                }
            }
            while(dwRead > 0);

Next:
            if (hRequest)  WinHttpCloseHandle(hRequest);
            if (hConnect)  WinHttpCloseHandle(hConnect);
        }

        // wait the ping interval, or for a shutdown
        dwRes = WaitForSingleObject(m_hevtShutdown, g_oSettingPingIntervalSecs.GetDw() * 1000);
        if (dwRes == WAIT_OBJECT_0)
        {
            // shutting down
            goto Done;
        }
    }


Done:

    if (hSession != NULL)
    {
        WinHttpCloseHandle(hSession);
    }

    if (pwszBuf != NULL)
    {
        delete[] pwszBuf;
    }

    if (pUrlComponents != NULL)
    {
        delete[] pUrlComponents;
    }
}

HRESULT CXMgmtSrv::CrackUrls(LPCSTR pszUrlList, LPWSTR* ppszBuf, DWORD *pdwNumUrls, URL_COMPONENTS** ppUrlComponents)
{
    LPSTR *ppszUrls = NULL;
    LPWSTR pch = NULL;
    LPWSTR pwsz = NULL;
    LPWSTR pchBuf = NULL;
    DWORD dwLen = 0;
    LPWSTR pwszUrlList = NULL;
    LPWSTR pwszBuf = NULL;
    HRESULT hr = S_OK;
    URL_COMPONENTS* pUrlCmpnts = NULL;
    DWORD dwUrls = 0;

    ASSERT(ppszBuf != NULL);
    ASSERT(pdwNumUrls != NULL);
    ASSERT(ppUrlComponents != NULL);

    *ppUrlComponents = NULL;
    *pdwNumUrls = 0;

    if (pszUrlList == NULL || pszUrlList[0] == NULL)
    {
        // no urls specified, nothing to do.
        hr = S_FALSE;
        goto Done;
    }

    //
    // convert url list to wide char
    //

    dwLen = MultiByteToWideChar(CP_ACP, 0, pszUrlList, -1, NULL, 0);
    if (dwLen == 0)
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_22, "MultiByteToWideChar(%s) failed, hr = 0x%08x", pszUrlList, hr);
        goto Done;
    }

    dwLen++;
    if(dwLen == 0)
    {
        hr = E_INVALIDARG;
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_26, "URL list is too large to process.");
        goto Done;
    }

    pwszUrlList = new WCHAR[dwLen+1];
    if(pwszUrlList == NULL)
    {
        hr = E_OUTOFMEMORY;
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_27, "Out of memory allocating buffer for URLs.");
        goto Done;
    }

    dwLen = MultiByteToWideChar(CP_ACP, 0, pszUrlList, -1, pwszUrlList, dwLen);
    if (dwLen == 0)
    {
        hr = HRESULT_FROM_WIN32(GetLastError());
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_23, "MultiByteToWideChar(%s,%d) failed, hr = 0x%08x", pszUrlList, dwLen, hr);
        goto Done;
    }
    pwszUrlList[dwLen] = NULL;

    //
    // figure out the number of urls specified.
    //

    dwUrls = 1;
    for (pch = pwszUrlList; *pch != NULL; pch++)
    {
        if (*pch == ';')
        {
            dwUrls++;
        }
    }
    if (*(pch - 1) == ';')
    {
        // setting ended with a semicolon, don't count it.
        dwUrls--;
    }
    if (dwUrls == 0)
    {
        // setting was specified as ";".  nothing to do.
        goto Done;
    }



    //
    // crack each url
    //

    // 49494 - Check for integer overflow
    if(dwLen > (dwLen + (dwUrls*3)))
    {
        hr = E_INVALIDARG;
        XomNtEvent(XEVENT_MGMT_INIT_FAILURE_28, "URL list is too large to process.");
        goto Done;
    }

    // buffer for url strings plus null for the 3 parts we care about
    pwszBuf = new WCHAR[dwLen + (dwUrls*3)];
    pUrlCmpnts = new URL_COMPONENTS[dwUrls];

    ZeroMemory(pUrlCmpnts, sizeof(URL_COMPONENTS) * dwUrls);
    ZeroMemory(pwszBuf, sizeof(WCHAR) * (dwLen + (dwUrls*3)));

    dwUrls = 0;
    pchBuf = pwszBuf;
    pch = pwsz = pwszUrlList;
    for (DWORD i = 0; i < dwLen; i++)
    {
        pch = pwszUrlList + i;
        if (*pch == ';' || *pch == NULL)
        {
            *pch = NULL;

            pUrlCmpnts[dwUrls].dwStructSize = sizeof(URL_COMPONENTS);
            pUrlCmpnts[dwUrls].dwHostNameLength = -1;
            pUrlCmpnts[dwUrls].dwUrlPathLength = -1;
            pUrlCmpnts[dwUrls].dwExtraInfoLength = -1;

            if (!WinHttpCrackUrl(pwsz, 0, 0, &pUrlCmpnts[dwUrls]))
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_INIT_FAILURE_24, "WinHttpCrackUrl(%S) failed, hr = 0x%08x", pwsz, hr);
                goto Done;
            }

            pUrlCmpnts[dwUrls].lpszHostName = pchBuf;
            pchBuf += pUrlCmpnts[dwUrls].dwHostNameLength + 1;

            if (pUrlCmpnts[dwUrls].dwUrlPathLength != -1)
            {
                pUrlCmpnts[dwUrls].lpszUrlPath = pchBuf;
                pchBuf += pUrlCmpnts[dwUrls].dwUrlPathLength + 1;
            }
            else
            {
                pUrlCmpnts[dwUrls].lpszUrlPath = NULL;
                pUrlCmpnts[dwUrls].dwUrlPathLength = 0;
            }

            if (pUrlCmpnts[dwUrls].dwExtraInfoLength != -1)
            {
                pUrlCmpnts[dwUrls].lpszExtraInfo = pchBuf;
                pchBuf += pUrlCmpnts[dwUrls].dwExtraInfoLength + 1;
            }
            else
            {
                pUrlCmpnts[dwUrls].lpszExtraInfo = NULL;
                pUrlCmpnts[dwUrls].dwExtraInfoLength = 0;
            }


            if (!WinHttpCrackUrl(pwsz, 0, 0, &pUrlCmpnts[dwUrls]))
            {
                hr = HRESULT_FROM_WIN32(GetLastError());
                XomNtEvent(XEVENT_MGMT_INIT_FAILURE_25, "second call to WinHttpCrackUrl(%S) failed, hr = 0x%08x", pwsz, hr);
                goto Done;
            }


            dwUrls++;
            pwsz = pch + 1;
        }

    }

    // make sure we didn't overwrite the allocated buffer.
    ASSERT(pchBuf - pwszBuf <= (int)(dwLen + (dwUrls*3)));

Done:
    if (pwszUrlList != NULL)
    {
        delete[] pwszUrlList;
    }

    if (FAILED(hr))
    {
        delete[] pwszBuf;
        delete[] pUrlCmpnts;
    }
    else
    {
        *ppszBuf = pwszBuf;
        *ppUrlComponents = pUrlCmpnts;
        *pdwNumUrls = dwUrls;
    }

    return hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\mgmt\xmgmtsrv\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_xmgmtsrv_none_12.4.56.0_none_f3fa9e10c8873f52
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xmgmtsrv
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.manifest
XP_MANIFEST_PATH=manifests\x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.cat
XP_CATALOG_PATH=manifests\x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4.cat
XP_PAYLOAD_PATH=x86_xmgmtsrv_no-public-key_12.4.56.0_x-ww_5b75e6f4
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xmgmtsrv,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\DataContractV1.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;


namespace xonline.mix.betamanagement.contract
{
    [DataContract(Name = "Group", Namespace = "http://xonline.mix.betamanagement.contracts/V1")]
    public class GroupV1
    {

        [DataMember(Name = "Summary", IsRequired = true)]
        public GroupSummaryV1 Summary {get; set;}

        [DataMember(Name = "RelInfos", IsRequired = true)]
        public IEnumerable<ReleaseInfoV1> RelInfos {get; set;}

        [DataMember(Name = "Titles", IsRequired = true)]
        public IEnumerable<UpgradePathV1> Titles {get; set;}
    }

    [DataContract(Name = "GroupSummary", Namespace = "http://xonline.mix.betamanagement.contracts/V1")]
    public class GroupSummaryV1
    {

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name {get; set;}

        [DataMember(Name = "GroupGuid", IsRequired = true)]
        public Guid GroupGuid {get; set;}

        [DataMember(Name = "Creator", IsRequired = true)]
        public string Creator {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion {get; set;}

        [DataMember(Name = "Created", IsRequired = true)]
        public DateTime Created {get; set;}
    }


    [DataContract(Name = "ReleaseInfo", Namespace = "http://xonline.mix.betamanagement.contracts/V1")]
    public class ReleaseInfoV1
    {

        [DataMember(Name = "SMRevision", IsRequired = true)]
        public string SMRevision {get; set;}

        [DataMember(Name = "SOMRevision", IsRequired = true)]
        public string SOMRevision {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public short FlashVersion {get; set;}

        [DataMember(Name = "FlashQfe", IsRequired = true)]
        public short FlashQfe {get; set;}
    }

    [DataContract(Name = "UpgradePath", Namespace = "http://xonline.mix.betamanagement.contracts/V1")]
    public class UpgradePathV1
    {

        [DataMember(Name = "TitleId", IsRequired = true)]
        public uint TitleId {get; set;}

        [DataMember(Name = "ConsoleType", IsRequired = true)]
        public PlatformTypeV1 ConsoleType { get; set; }

        [DataMember(Name = "BaseVersion", IsRequired = true)]
        public uint BaseVersion {get; set;}

        [DataMember(Name = "UpgradeVersion", IsRequired = true)]
        public uint UpgradeVersion {get; set;}
    }

    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.betamanagement.contracts/V1")]
    public enum PlatformTypeV1 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\ServiceContractV3.cs ===
using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.betamanagement.contract.v3
{
    // NOTE: If you change the interface name "IMixBetaManagementV3" here, you must also update the reference to "IMixBetaManagementV3" in Web.config.
    [ServiceContract(Name = "MixBetaManagementV3", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public interface IMixBetaManagementV3
    {
        [OperationContract(Name = "AssignReleaseToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths, ReleaseAppV3[] apps);

        [OperationContract(Name = "AssignTitleUpdateToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, Guid group);

        [OperationContract(Name = "AssignTitleUpdateToGroups")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, Guid[] groups, bool noReload);

        [OperationContract(Name = "IsTitleVersionPropped")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        bool IsTitleVersionPropped(uint titleID, uint version);

        [OperationContract(Name = "GetGroups")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupSummaryV3> GetGroups();

        [OperationContract(Name = "GetGroupDetails")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        GroupV3 GetGroupDetails(Guid groupGuid);

        [OperationContract(Name = "AddConsoleIDsToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV3> AddConsoleIDsToGroup(string[] consoleIDs, Guid groupGuid);

        [OperationContract(Name = "RemoveConsoleIDsFromGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV3> RemoveConsoleIDsFromGroup(string[] consoleIDs, Guid groupGuid);

        // A console is valid for a group iff:
        //   The flash it most recently logged in with is the beta groups flash, or
        //   The flash it most recently logged in with has an upgrade path in n t_title_versions that lets the console reach the expected flash version
        [OperationContract(Name = "ValidateBetaGroupConsoles")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        InvalidConsoleV3[] ValidateBetaGroupConsoles(Guid betaGroup);

        [OperationContract(Name = "CreateGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        Guid CreateGroup(string name, string creator);

        [OperationContract(Name = "GetConsoleIDsInGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<string> GetConsoleIDsInGroup(Guid group);

        [OperationContract(Name = "GetGroupsForConsoleIDs")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupSummaryForConsoleV3> GetGroupsForConsoleIDs(string []consoleIDs);

        [OperationContract(Name = "RemoveGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void RemoveGroup(Guid group);

        [OperationContract(Name = "UpdateGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void UpdateGroup(Guid group, GroupUpdateV3 updates);

        [OperationContract(Name = "MigrateConsoleIDsToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV3> MigrateConsoleIDsToGroup (string[] consoleIDs, Guid fromGroup, Guid toGroup);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\DataContractV2.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;


namespace xonline.mix.betamanagement.contract.v2
{
    [DataContract(Name = "Group", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public class GroupV2
    {

        [DataMember(Name = "Summary", IsRequired = true)]
        public GroupSummaryV2 Summary {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion {get; set;}

        [DataMember(Name = "RelInfos", IsRequired = true)]
        public IEnumerable<ReleaseInfoV2> RelInfos {get; set;}

        [DataMember(Name = "Titles", IsRequired = true)]
        public IEnumerable<UpgradePathV2> Titles {get; set;}
    }

    [DataContract(Name = "GroupSummary", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public class GroupSummaryV2
    {

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name {get; set;}

        [DataMember(Name = "GroupGuid", IsRequired = true)]
        public Guid GroupGuid {get; set;}

        [DataMember(Name = "Creator", IsRequired = true)]
        public string Creator {get; set;}

        [DataMember(Name = "Created", IsRequired = true)]
        public DateTime Created {get; set;}
    }


    [DataContract(Name = "ReleaseInfo", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public class ReleaseInfoV2
    {

        [DataMember(Name = "SMRevision", IsRequired = true)]
        public string SMRevision {get; set;}

        [DataMember(Name = "SOMRevision", IsRequired = true)]
        public string SOMRevision {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public short FlashVersion {get; set;}

        [DataMember(Name = "FlashQfe", IsRequired = true)]
        public short FlashQfe {get; set;}
    }

    [DataContract(Name = "UpgradePath", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public class UpgradePathV2
    {

        [DataMember(Name = "TitleId", IsRequired = true)]
        public uint TitleId {get; set;}

        [DataMember(Name = "ConsoleType", IsRequired = true)]
        public PlatformTypeV2 ConsoleType { get; set; }

        [DataMember(Name = "BaseVersion", IsRequired = true)]
        public uint BaseVersion {get; set;}

        [DataMember(Name = "UpgradeVersion", IsRequired = true)]
        public uint UpgradeVersion {get; set;}
    }

    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public enum PlatformTypeV2 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "InvalidConsole", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public class InvalidConsoleV2
    {
        [DataMember(Name = "ConsoleId", IsRequired = true)]
        public string ConsoleId {get; set;}     // The string representation of the console id, which is (I think) what
                                                // we take in other APIs and tools (like xblcfg).

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion{get; set;}     // The current flash version the console is at (the last thing it logged
                                                // in with). This does not have a an upgrade path to the flash version
                                                // the group is set up for.
    }

    [DataContract(Name = "GroupMembershipChangeResult", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public class GroupMembershipChangeResultV2
    {
        [DataMember(Name = "ConsoleID", IsRequired = true)]
        public string ConsoleID {get; set;}

        [DataMember(Name = "Outcome", IsRequired = true)]
        public GroupMembershipChangeOutcomeV2 Outcome {get; set;}

        [DataMember(Name = "ConflictingGroups", IsRequired = true)]
        public IEnumerable<Guid> ConflictingGroups {get; set;}
    }

    [DataContract(Name = "GroupMembershipChangeOutcome", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public enum GroupMembershipChangeOutcomeV2 : byte
    {
        [EnumMember]
        Success = 0,
        [EnumMember]
        MemberInOtherGroup = 1,
        [EnumMember]
        MachineAccountNotExist = 2,
        [EnumMember]
        MachineNotInGroup = 3,
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\DataContractV3.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;


namespace xonline.mix.betamanagement.contract.v3
{
    [DataContract(Name = "Group", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class GroupV3
    {

        [DataMember(Name = "Summary", IsRequired = true)]
        public GroupSummaryV3 Summary {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion {get; set;}

        [DataMember(Name = "RelInfos", IsRequired = true)]
        public IEnumerable<ReleaseInfoV3> RelInfos {get; set;}

        [DataMember(Name = "Titles", IsRequired = true)]
        public IEnumerable<UpgradePathV3> Titles {get; set;}
    }

    [DataContract(Name = "GroupSummary", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class GroupSummaryV3
    {

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name {get; set;}

        [DataMember(Name = "GroupGuid", IsRequired = true)]
        public Guid GroupGuid {get; set;}

        [DataMember(Name = "Creator", IsRequired = true)]
        public string Creator {get; set;}

        [DataMember(Name = "Created", IsRequired = true)]
        public DateTime Created {get; set;}
    }

    [DataContract(Name = "GroupSummaryForConsole", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class GroupSummaryForConsoleV3
    {
        [DataMember(Name = "ConsoleID", IsRequired = true)]
        public string ConsoleID {get; set;}

        [DataMember(Name = "Outcome", IsRequired = true)]
        public GroupMembershipChangeOutcomeV3 Outcome {get; set;}

        [DataMember(Name = "Groups", IsRequired = true)]
        public IEnumerable<GroupSummaryV3> Groups {get; set;}
    }

    [DataContract(Name = "ReleaseInfo", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class ReleaseInfoV3
    {

        [DataMember(Name = "SMRevision", IsRequired = true)]
        public string SMRevision {get; set;}

        [DataMember(Name = "SOMRevision", IsRequired = true)]
        public string SOMRevision {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public short FlashVersion {get; set;}

        [DataMember(Name = "FlashQfe", IsRequired = true)]
        public short FlashQfe {get; set;}
    }

    [DataContract(Name = "UpgradePath", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class UpgradePathV3
    {

        [DataMember(Name = "TitleId", IsRequired = true)]
        public uint TitleId {get; set;}

        [DataMember(Name = "ConsoleType", IsRequired = true)]
        public PlatformTypeV3 ConsoleType { get; set; }

        [DataMember(Name = "BaseVersion", IsRequired = true)]
        public uint BaseVersion {get; set;}

        [DataMember(Name = "UpgradeVersion", IsRequired = true)]
        public uint UpgradeVersion {get; set;}
    }

    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public enum PlatformTypeV3 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "InvalidConsole", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class InvalidConsoleV3
    {
        [DataMember(Name = "ConsoleId", IsRequired = true)]
        public string ConsoleId {get; set;}     // The string representation of the console id, which is (I think) what
                                                // we take in other APIs and tools (like xblcfg).

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion{get; set;}     // The current flash version the console is at (the last thing it logged
                                                // in with). This does not have a an upgrade path to the flash version
                                                // the group is set up for.
    }

    [DataContract(Name = "GroupMembershipChangeResult", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class GroupMembershipChangeResultV3
    {
        [DataMember(Name = "ConsoleID", IsRequired = true)]
        public string ConsoleID {get; set;}

        [DataMember(Name = "Outcome", IsRequired = true)]
        public GroupMembershipChangeOutcomeV3 Outcome {get; set;}

        [DataMember(Name = "ConflictingGroups", IsRequired = true)]
        public IEnumerable<Guid> ConflictingGroups {get; set;}
    }

    [DataContract(Name = "GroupMembershipChangeOutcome", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public enum GroupMembershipChangeOutcomeV3 : byte
    {
        [EnumMember]
        Success = 0,
        [EnumMember]
        MemberInOtherGroup = 1,
        [EnumMember]
        MachineAccountNotExist = 2,
        [EnumMember]
        MachineNotInGroup = 3,
        [EnumMember]
        MemberAlreadyInGroup = 4,
    }



    [DataContract(Name = "GroupUpdate", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class GroupUpdateV3
    {
        [DataMember(Name = "GroupName", IsRequired = true)]
        public string GroupName {get; set;}
    }

    [DataContract(Name = "ReleaseApp", Namespace = "http://xonline.mix.betamanagement.contracts/V3")]
    public class ReleaseAppV3
    {
        [DataMember(Name = "FileName", IsRequired = true)]
        public string FileName { get; set; }

        [DataMember(Name = "FriendlyName", IsRequired = true)]
        public string FriendlyName { get; set; }

        [DataMember(Name = "Online", IsRequired = true)]
        public bool Online { get; set; }

        [DataMember(Name = "Version", IsRequired = true)]
        public string Version { get; set; }

        [DataMember(Name = "Manifest", IsRequired = true)]
        public string Manifest { get; set; }

        public override string ToString()
        {
            return FriendlyName;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\ServiceContractV1.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.betamanagement.contract
{
    // NOTE: If you change the interface name "IMixBetaManagementV1" here, you must also update the reference to "IMixBetaManagementV1" in Web.config.
    [ServiceContract(Name = "MixBetaManagement", Namespace = "http://xonline.mix.betamanagement.contracts/V1")]
    public interface IMixBetaManagementV1
    {
        [OperationContract(Name = "AssignReleaseToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths);

        [OperationContract(Name = "IsTitleVersionPropped")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        bool IsTitleVersionPropped(uint titleID, uint version);

        [OperationContract(Name = "GetGroups")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupSummaryV1> GetGroups();

        [OperationContract(Name = "GetGroupDetails")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        GroupV1 GetGroupDetails(Guid groupGuid);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\ServiceContractV2.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.betamanagement.contract.v2
{
    // NOTE: If you change the interface name "IMixBetaManagementV2" here, you must also update the reference to "IMixBetaManagementV2" in Web.config.
    [ServiceContract(Name = "MixBetaManagementV2", Namespace = "http://xonline.mix.betamanagement.contracts/V2")]
    public interface IMixBetaManagementV2
    {
        [OperationContract(Name = "AssignReleaseToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths);


        [OperationContract(Name = "AssignTitleUpdateToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, Guid group);

        [OperationContract(Name = "IsTitleVersionPropped")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        bool IsTitleVersionPropped(uint titleID, uint version);

        [OperationContract(Name = "GetGroups")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupSummaryV2> GetGroups();

        [OperationContract(Name = "GetGroupDetails")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        GroupV2 GetGroupDetails(Guid groupGuid);

        [OperationContract(Name = "AddConsoleIDsToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV2> AddConsoleIDsToGroup(string[] consoleIDs, Guid groupGuid);

        [OperationContract(Name = "RemoveConsoleIDsFromGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV2> RemoveConsoleIDsFromGroup(string[] consoleIDs, Guid groupGuid);

        // A console is valid for a group iff:
        //   The flash it most recently logged in with is the beta groups flash, or
        //   The flash it most recently logged in with has an upgrade path in n t_title_versions that lets the console reach the expected flash version
        [OperationContract(Name = "ValidateBetaGroupConsoles")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        InvalidConsoleV2[] ValidateBetaGroupConsoles(Guid betaGroup);

        [OperationContract(Name = "CreateGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        Guid CreateGroup(string name, string creator);

        [OperationContract(Name = "GetConsoleIDsInGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<string> GetConsoleIDsInGroup(Guid group);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\DataContractV4.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;


namespace xonline.mix.betamanagement.contract.v4
{
    [DataContract(Name = "Group", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class GroupV4
    {

        [DataMember(Name = "Summary", IsRequired = true)]
        public GroupSummaryV4 Summary {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion {get; set;}

        [DataMember(Name = "RelInfos", IsRequired = true)]
        public IEnumerable<ReleaseInfoV4> RelInfos {get; set;}

        [DataMember(Name = "Titles", IsRequired = true)]
        public IEnumerable<UpgradePathV4> Titles {get; set;}
    }

    [DataContract(Name = "ConsoleInfo", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class ConsoleInfoV4
    {
        [DataMember(Name = "ConsoleID", IsRequired = true)]
        public string ConsoleID {get; set;}

        [DataMember(Name = "SCode", IsRequired = true)]
        public string SCode {get; set;}

        public override string ToString()
        {
            return ConsoleID+":"+SCode;
        }
    }

    [DataContract(Name = "GroupSummary", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class GroupSummaryV4
    {

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name {get; set;}

        [DataMember(Name = "GroupGuid", IsRequired = true)]
        public Guid GroupGuid {get; set;}

        [DataMember(Name = "Creator", IsRequired = true)]
        public string Creator {get; set;}

        [DataMember(Name = "Created", IsRequired = true)]
        public DateTime Created {get; set;}
    }

    [DataContract(Name = "GroupSummaryForConsole", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class GroupSummaryForConsoleV4
    {
        [DataMember(Name = "ConsoleIDWithSCode", IsRequired = true)]
        public ConsoleInfoV4 ConsoleIDWithSCode {get; set;}

        [DataMember(Name = "Outcome", IsRequired = true)]
        public GroupMembershipChangeOutcomeV4 Outcome {get; set;}

        [DataMember(Name = "Groups", IsRequired = true)]
        public IEnumerable<GroupSummaryV4> Groups {get; set;}
    }

    [DataContract(Name = "ReleaseInfo", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class ReleaseInfoV4
    {

        [DataMember(Name = "SMRevision", IsRequired = true)]
        public string SMRevision {get; set;}

        [DataMember(Name = "SOMRevision", IsRequired = true)]
        public string SOMRevision {get; set;}

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public short FlashVersion {get; set;}

        [DataMember(Name = "FlashQfe", IsRequired = true)]
        public short FlashQfe {get; set;}
    }

    [DataContract(Name = "UpgradePath", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class UpgradePathV4
    {

        [DataMember(Name = "TitleId", IsRequired = true)]
        public uint TitleId {get; set;}

        [DataMember(Name = "ConsoleType", IsRequired = true)]
        public PlatformTypeV4 ConsoleType { get; set; }

        [DataMember(Name = "BaseVersion", IsRequired = true)]
        public uint BaseVersion {get; set;}

        [DataMember(Name = "UpgradeVersion", IsRequired = true)]
        public uint UpgradeVersion {get; set;}
    }

    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public enum PlatformTypeV4 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "InvalidConsole", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class InvalidConsoleV4
    {
        [DataMember(Name = "ConsoleIDWithSCode", IsRequired = true)]
        public ConsoleInfoV4 ConsoleIDWithSCode {get; set;} 

        [DataMember(Name = "FlashVersion", IsRequired = true)]
        public uint FlashVersion{get; set;}     // The current flash version the console is at (the last thing it logged
                                                // in with). This does not have a an upgrade path to the flash version
                                                // the group is set up for.
    }

    [DataContract(Name = "GroupMembershipChangeResult", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class GroupMembershipChangeResultV4
    {
        [DataMember(Name = "ConsoleIDWithSCode", IsRequired = true)]
        public ConsoleInfoV4 ConsoleIDWithSCode {get; set;}

        [DataMember(Name = "Outcome", IsRequired = true)]
        public GroupMembershipChangeOutcomeV4 Outcome {get; set;}

        [DataMember(Name = "ConflictingGroups", IsRequired = true)]
        public IEnumerable<Guid> ConflictingGroups {get; set;}
    }

    [DataContract(Name = "GroupMembershipChangeOutcome", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public enum GroupMembershipChangeOutcomeV4 : byte
    {
        [EnumMember]
        Success = 0,
        [EnumMember]
        MemberInOtherGroup = 1,
        [EnumMember]
        MachineAccountNotExist = 2,
        [EnumMember]
        MachineNotInGroup = 3,
        [EnumMember]
        MemberAlreadyInGroup = 4,
        [EnumMember]
        MachineDuplicate = 5

    }



    [DataContract(Name = "GroupUpdate", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class GroupUpdateV4
    {
        [DataMember(Name = "GroupName", IsRequired = true)]
        public string GroupName {get; set;}
    }

    [DataContract(Name = "ReleaseApp", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public class ReleaseAppV4
    {
        [DataMember(Name = "FileName", IsRequired = true)]
        public string FileName { get; set; }

        [DataMember(Name = "FriendlyName", IsRequired = true)]
        public string FriendlyName { get; set; }

        [DataMember(Name = "Online", IsRequired = true)]
        public bool Online { get; set; }

        [DataMember(Name = "Version", IsRequired = true)]
        public string Version { get; set; }

        [DataMember(Name = "Manifest", IsRequired = true)]
        public string Manifest { get; set; }

        public override string ToString()
        {
            return FriendlyName;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\DataLayer.cs ===
/*--------------------------------------------------------------------------------------------------
 * Generally speaking, this file should contain the data layer for beta group management MIX apis,
 * and not the business logic layer.
 * 
 * That said, it's sometimes hard to really seperate those because we have a lot of business
 * logic directly in the database. This is a best effort and nothing more.
 *------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Xml;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.exceptions;
using xonline.common.machine;
using xonline.common.service;
using xonline.common.sql.sqlclient;
using xonline.common.sql.webstore;

using xonline.server.xmachine.fd.soap;

namespace xonline.mix.betamanagement.service
{
    public class LiveRegistrySetting
    {
        public short? Build { get; set; }
        public short? Qfe { get; set; }
        public string Setting { get; set; }
        public string Value { get; set; }
    }

    public interface IBetaManagementDatabase
    {
        // Group management...
        void CreateGroup(Guid betaId, string name, string creator);
        IEnumerable<GroupSummary> GetGroupSummaries();
        GroupSummary GetGroupSummary(Guid groupId);
        bool DoesGroupDefinitionExist(Guid groupId);
        IEnumerable<UpgradePath> GetFlashUpgradePaths(Guid groupId);
        IEnumerable<LiveRegistrySetting> GetLiveRegistrySettings(Guid groupId);
        void RemoveLiveRegistrySettingsForGroup(Guid groupId);
        IEnumerable<InvalidConsole> GetConsoleFlashVersionsForBetaGroup(Guid groupId);
        IEnumerable<string> GetAllGroupNames();
        void RemoveGroupDefinition(Guid groupId);
        void UpdateGroupName(Guid group, string name);
        void AssignReleaseToGroup(Guid group, string systemOnlineManifestRevision, string systemManifestRevision, uint version);
        void AddRelease(ReleaseApp app);
        void RemoveReleasesForGroup(Guid groupId);

        // Machine management...
        IEnumerable<Guid> GetMachineMembership(ulong machinePuid);
        void AddMachinePuidToGroup(ulong machinePuid, Guid groupId);
        void RemoveMachinePuidFromGroup(ulong machinePuid, Guid groupId);
        GroupMembershipChangeOutcome TryLookupMachinePuid(string consoleId, out Puid machinePuid);
        GroupMembershipChangeOutcome TryLookupMachinePuid(string consoleId, string scode, out Puid machinePuid);
        GroupMembershipChangeOutcome TryLookupMachinePuid(ConsoleInfo consoleInfo, out Puid machinePuid);
        GroupMembershipChangeOutcome TryLookupMachinePuids(string consoleId, out Puid[] machinePuids);
        GroupMembershipChangeOutcome TryLookupMachinePuids(ConsoleInfo consoleInfo, out ConsoleInfoDetailed[] consoleInfosDetailed);
        IEnumerable<String> GetConsoleIDsInGroup(Guid groupId);
        IEnumerable<ConsoleInfo> GetConsoleInfosInGroup(Guid groupId);
        bool MoveMachinePuidBetweenGroups (ulong machinePuid, Guid fromGroup, Guid toGroup);

        // Title management...
        void AddTitleVersionInfo(uint minVersion, uint currentFlashVersion, Guid group, uint titleID);
        bool GetIsFlashVersionPropped(uint flashVersion);
        void RemoveTitleVersionForGroup(Guid groupId);


    }

    public class UodbBetaManagementDatabase : IBetaManagementDatabase
    {
        public void AddTitleVersionInfo(uint minVersion, uint currentFlashVersion, Guid group, uint titleID)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_svc_insert_title_versions";

                    ws.AddParameter(ParamType.INPUT, "@i_title_id", titleID);
                    ws.AddParameter(ParamType.INPUT, "@i_base_version", minVersion);
                    ws.AddParameter(ParamType.INPUT, "@i_new_version", currentFlashVersion);
                    ws.AddParameter(ParamType.INPUT, "@i_version_flag", 0);
                    ws.AddParameter(ParamType.INPUT, "@ti_console_type_id", (byte)ConsoleTypeEnum.Xenon);
                    ws.AddParameter(ParamType.INPUT, "@uid_beta_group_id", group);

                    ws.ExecuteNonQuery();
                }
            }
        }

        public void RemoveTitleVersionForGroup(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_svc_delete_title_versions_for_group";

                    ws.AddParameter(ParamType.INPUT, "@uid_beta_group_id", groupId);

                    ws.ExecuteNonQuery();
                }
            }
        }


        public void RemoveReleasesForGroup(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {

                int hashBucket = ws.SetHashVal(groupId);
                ws.StoredProc = "p_beta_group_remove_releases";

                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);
                ws.ExecuteNonQuery();
            }
        }

        public void AddRelease(ReleaseApp app)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;

                    ws.StoredProc = "p_releases_insert_app";

                    ws.AddParameter(ParamType.INPUT, "@vc_app_name", app.FileName);
                    ws.AddParameter(ParamType.INPUT, "@vc_friendly_name", app.FriendlyName);
                    ws.AddParameter(ParamType.INPUT, "@b_online", app.Online ? 1 : 0);
                    ws.AddParameter(ParamType.INPUT, "@vc_version", app.Version);
                    ws.AddParameter(ParamType.INPUT, "@vc_manifest_revision", app.Manifest);
                    ws.ExecuteNonQuery();
                }
            }
        }

        public void AssignReleaseToGroup(Guid group, string systemOnlineManifestRevision, string systemManifestRevision, uint version)
        {
            if (!DoesGroupDefinitionExist(group) && group != Guid.Empty) // We allow the Global group
            {
                throw new XRLException(HResult.XONLINE_E_MIX_GROUP_DOES_NOT_EXIST, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID, String.Format("The group '{0}' does not exist.", group));
            }

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {

                int hashBucket = ws.SetHashVal(group);
                ws.StoredProc = "p_beta_group_assign_release";

                ws.AddParameter(ParamType.INPUT, "@uid_group_id", group);
                ws.AddParameter(ParamType.INPUT, "@vc_som_revision", systemOnlineManifestRevision);
                ws.AddParameter(ParamType.INPUT, "@vc_sm_revision", systemManifestRevision);
                ws.AddParameter(ParamType.INPUT, "@i_flash_version", version);
                ws.AddParameter(ParamType.INPUT, "@si_hash_bucket", hashBucket);
                ws.ExecuteNonQuery();
            }
        }

        public void UpdateGroupName(Guid g, string name)
        {
            if (!DoesGroupDefinitionExist(g))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_GROUP_DOES_NOT_EXIST, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID, String.Format("The group '{0}' does not exist.", g));
            }

            if (IsGroupNameInUse(name))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_DUPLICATE_GROUP_NAME_NOT_ALLOWED, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID, String.Format("The group '{0}' already exists.", name));
            }

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.SetHashVal(g);
                ws.StoredProc = "p_beta_group_rename";

                ws.AddParameter(ParamType.INPUT, "@uid_group_id", g);
                ws.AddParameter(ParamType.INPUT, "@vc_group_name", name);
                ws.ExecuteNonQuery();
            }
        }

        public IEnumerable<GroupSummary> GetGroupSummaries()
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_beta_group_list";

                    using (WstDataReader reader = ws.Execute())
                    {
                        while (reader.Read())
                        {
                            GroupSummary groupSummary = new GroupSummary();
                            groupSummary.GroupGuid = (Guid)reader["uid_group_id"];
                            groupSummary.Name = (string)reader["vc_group_name"];
                            groupSummary.Creator = (string)reader["vc_created_by"];
                            groupSummary.Created = (DateTime)reader["dt_created"];
                            groupSummary.FlashVersion = 0;

                            yield return groupSummary;
                        }
                    }
                }
            }
        }

        public GroupSummary GetGroupSummary(Guid groupId)
        {
            if (groupId == Guid.Empty) // Special handling for the empty guid
            {
                GroupSummary groupSummary = new GroupSummary();
                groupSummary.GroupGuid = groupId;
                groupSummary.Name = "Global";
                groupSummary.Creator = "N/A";
                groupSummary.Created = DateTime.FromBinary(0);
                groupSummary.FlashVersion = 0;
                return groupSummary;
            }

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.SetHashVal(groupId);
                ws.StoredProc = "p_beta_group_query";
                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);

                using (WstDataReader reader = ws.Execute())
                {
                    while (reader.Read())
                    {
                        GroupSummary groupSummary = new GroupSummary();
                        groupSummary.GroupGuid = (Guid)reader["uid_group_id"];
                        groupSummary.Name = (string)reader["vc_group_name"];
                        groupSummary.Creator = (string)reader["vc_created_by"];
                        groupSummary.Created = (DateTime)reader["dt_created"];
                        groupSummary.FlashVersion = 0;

                        return groupSummary;
                    }

                    GroupSummary blank = new GroupSummary();
                    blank.GroupGuid = groupId;
                    blank.Name = "";
                    blank.Creator = "";
                    blank.Created = System.DateTime.MinValue;
                    return blank;
                }
            }
        }

        public bool DoesGroupDefinitionExist(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.SetHashVal(groupId);
                ws.StoredProc = "p_beta_group_query";
                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);

                using (WstDataReader reader = ws.Execute())
                {
                    while (reader.Read())
                    {
                        return true;
                    }

                    return false;
                }
            }
        }

        public IEnumerable<UpgradePath> GetFlashUpgradePaths(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.Partition = WstCommand.AnyPartition;
                ws.StoredProc = "p_beta_group_get_title_versions";
                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);
                ws.AddParameter(ParamType.INPUT, "@i_title_id", FLASH_TITLE);
                ws.AddParameter(ParamType.INPUT, "@ti_console_type_id", (byte)ConsoleTypeEnum.Xenon);

                using (WstDataReader reader = ws.Execute())
                {
                    while (reader.Read())
                    {
                        UpgradePath upgradePath = new UpgradePath();
                        upgradePath.BaseVersion = (uint)(int)reader["i_base_version"];
                        upgradePath.UpgradeVersion = (uint)(int)reader["i_update_version"];
                        upgradePath.TitleId = FLASH_TITLE;
                        upgradePath.ConsoleType = PlatformType.Xenon;

                        yield return upgradePath;
                    }
                }
            }
        }

        public bool IsGroupNameInUse(string name)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_beta_group_name_exists";
                    ws.AddParameter(ParamType.INPUT, "@vc_group_name", name);

                    if ((int) ws.ExecuteScalar() > 0) return true;
                }
            }
            return false;
        }

        public IEnumerable<LiveRegistrySetting> GetLiveRegistrySettings(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.Partition = WstCommand.AnyPartition;
                ws.StoredProc = "p_live_registry_get_all_settings";
                ws.AddParameter(ParamType.INPUT, "@vc_environment", Config.Environment);

                using (WstDataReader reader = ws.Execute())
                {
                    while (reader.Read())
                    {
                        if ((Guid)reader["guid_beta_group_id"] == groupId)
                        {
                            LiveRegistrySetting setting = new LiveRegistrySetting();
                            if (reader["si_build"] == null || reader.IsDBNull(reader.GetOrdinal("si_build")))
                            {
                                setting.Build = null;
                            }
                            else
                            {
                                setting.Build = (short)reader["si_build"];
                            }

                            if (reader["si_qfe"] == null || reader.IsDBNull(reader.GetOrdinal("si_qfe")))
                            {
                                setting.Qfe = null;
                            }
                            else
                            {
                                setting.Qfe = (short)reader["si_qfe"];
                            }

                            setting.Setting = (string)reader["vc_setting"];
                            setting.Value = (string)reader["vc_value"];

                            yield return setting;
                        }
                    }
                }
            }
        }

        public void RemoveLiveRegistrySettingsForGroup(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_live_registry_remove_group";

                    ws.AddParameter(ParamType.INPUT, "@vc_environment", Config.Environment);
                    ws.AddParameter(ParamType.INPUT, "@guid_beta_group_id", groupId);

                    ws.ExecuteNonQuery();
                }
            }
        }

        public bool GetIsFlashVersionPropped(uint flashVersion)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.Partition = WstCommand.AnyPartition;
                ws.StoredProc = "p_beta_group_update_exists";
                ws.AddParameter(ParamType.INPUT, "@i_title_id", FLASH_TITLE);
                ws.AddParameter(ParamType.INPUT, "@i_version", flashVersion);

                using (WstDataReader reader = ws.Execute())
                {
                    reader.Read();
                    return (reader.GetInt32(0)==1);
                }
            }
        }

        public IEnumerable<InvalidConsole> GetConsoleFlashVersionsForBetaGroup(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_beta_group_group_get_machines";
                    ws.AddParameter("@uid_group_id", groupId);

                    using (WstDataReader reader = ws.Execute())
                    {
                        while (reader.Read())
                        {
                            Puid puid = (Puid)(long)reader["bi_machine_puid"];

                            using (XMachineSoapClient xmachine = new XMachineSoapClient())
                            {
                                MachineInfo []machineInfo = xmachine.LookupMachineInfoByMachinePuids(new ulong[]{puid});
                                if (machineInfo.Length > 0)
                                {
                                    //we're going to abuse ConsoleInfoDetailed to convert SecondaryIdentifier to SCode to fill in the InvalidConsole structure.
                                    ConsoleInfoDetailed consoleInfoDetailed = new ConsoleInfoDetailed();
                                    consoleInfoDetailed.SecondaryIdentifier = machineInfo[0].SecondaryIdentifier;

                                    InvalidConsole console = new InvalidConsole();
                                    console.ConsoleIDWithSCode = new ConsoleInfo();
                                    console.ConsoleIDWithSCode.ConsoleID = machineInfo[0].ConsoleId;
                                    console.ConsoleIDWithSCode.SCode = consoleInfoDetailed.SCode;

                                    // Get the flash version.  This is best effort, and if the console
                                    // has updated the flash offline (like via a gamedisc), then it will
                                    // be incorrect until they sign in.
                                    //
                                    // If a machine has never logged in, we don't have a flash version, so
                                    // we pass back 0 to show that.
                                    if(machineInfo[0].FlashVersion == null || machineInfo[0].FlashVersion == String.Empty)
                                    {
                                        console.FlashVersion = 0;
                                    }
                                    else
                                    {
                                        console.FlashVersion = XboxClientVersionStringtoUInt(machineInfo[0].FlashVersion);
                                    }

                                    yield return console;
                                }
                            }
                        }
                    }
                }
            }
        }

        public IEnumerable<string> GetAllGroupNames()
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {

                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_beta_group_list";

                    using (WstDataReader reader = ws.Execute())
                    {
                        while (reader.Read())
                        {
                            yield return (string)reader["vc_group_name"];
                        }
                    }
                }
            }
        }

        public void CreateGroup(Guid betaId, string name, string creator)
        {

            if (IsGroupNameInUse(name))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_DUPLICATE_GROUP_NAME_NOT_ALLOWED, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID, String.Format("The group '{0}' already exists.", name));
            }

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.SetHashVal(betaId);
                ws.StoredProc = "p_beta_group_create";
                ws.AddParameter(ParamType.INPUT, "@uid_group_id", betaId);
                ws.AddParameter(ParamType.INPUT, "@vc_group_name", name);
                ws.AddParameter(ParamType.INPUT, "@vc_created_by", creator);
                ws.AddParameter(ParamType.INPUT, "@si_hash_bucket", ws.Partition);

                using (WstDataReader reader = ws.Execute())
                {
                    // Don't use the results at all--we just want to create the group.
                }
            }
        }

        public void RemoveGroupDefinition(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.SetHashVal(groupId);
                ws.StoredProc = "p_beta_group_delete";

                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);

                ws.ExecuteNonQuery();
            }
        }

        // --------------------------------------------------------------------------------------
        // XboxClientVersionBSTRToDword - converts a string like "2.0.7363.0" or 
        // "15.15.65535.255" to its corresponding uint representation.
        // --------------------------------------------------------------------------------------
        private uint XboxClientVersionStringtoUInt(string versionString)
        {
            int[] MASK = new int[] { 0xF, 0xF, 0xFFFF, 0xFF };
            int[] BITS_TO_SHIFT = new int[] { 28, 24, 8, 0 };

            string[] versionParts = versionString.Split('.');
            if (versionParts.Length != 4)
            {
                throw new ArgumentException("versionString must be four parts delimited by '.'.", "versionString");
            }

            int idx = 0;
            uint version = 0;
            for (; idx < versionParts.Length; ++idx)
            {
                uint val = uint.Parse(versionParts[idx]);
                version |= (uint)((val & MASK[idx]) << BITS_TO_SHIFT[idx]);
            }

            return version;
        }

        public GroupMembershipChangeOutcome TryLookupMachinePuid(string consoleId, out Puid machinePuid)
        {
            GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

            try
            {
                machinePuid = MachinePuidUtil.GetMachineIdFromConsoleId( consoleId );
            }
            catch (Exception e)
            {
                HResult hr = XblException.GetHResult(e);
                if (hr == HResult.XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID)
                {
                    outcome = GroupMembershipChangeOutcome.MachineDuplicate;
                }
                else
                {
                    outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                }
                machinePuid = 0;
            }
            return outcome;
        }

        public GroupMembershipChangeOutcome TryLookupMachinePuid(string consoleId, string scode, out Puid machinePuid)
        {
            GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

            try
            {
                machinePuid = MachinePuidUtil.GetXbox360MachineIdFromConsoleIdAndSCode( consoleId, scode );
            }
            catch (Exception e)
            {
                HResult hr = XblException.GetHResult(e);
                if (hr == HResult.XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID)
                {
                    outcome = GroupMembershipChangeOutcome.MachineDuplicate;
                }
                else
                {
                    outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                }
                machinePuid = 0;
            }
            return outcome;
        }

        public GroupMembershipChangeOutcome TryLookupMachinePuid(ConsoleInfo consoleInfo, out Puid machinePuid)
        {
            return TryLookupMachinePuid( consoleInfo.ConsoleID, consoleInfo.SCode, out machinePuid );
        }

        public GroupMembershipChangeOutcome TryLookupMachinePuids(string consoleId, out Puid[] machinePuids)
        {
            GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

            try
            {
                machinePuids = MachinePuidUtil.GetMachineIdsFromConsoleId( consoleId );
            }
            catch (Exception)
            {
                outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                machinePuids = null;
            }
            return outcome;
        }

        public GroupMembershipChangeOutcome TryLookupMachinePuids(ConsoleInfo consoleInfo, out ConsoleInfoDetailed[] consoleInfosDetailed)
        {
            GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

            try
            {
                //
                // Do we have an SCode?
                // 
                if (String.IsNullOrEmpty(consoleInfo.SCode) == false)
                {
                    //
                    // Yes, then we can try to lookup this machine puid specifically
                    // 
                    Puid machinePuid = MachinePuidUtil.GetXbox360MachineIdFromConsoleIdAndSCode( 
                        consoleInfo.ConsoleID,
                        consoleInfo.SCode
                        );

                    consoleInfosDetailed = new ConsoleInfoDetailed[1];
                    consoleInfosDetailed[0] = (ConsoleInfoDetailed) consoleInfo;
                    consoleInfosDetailed[0].MachinePuid = machinePuid;
                }
                else
                {
                    using (XMachineSoapClient connection = new XMachineSoapClient())
                    {
                        ConsoleIdInfo[]    consoleIdInfo = null;
                        string[]           requestedIds = new string[1];
    
                        //
                        // Grab all the records for this consoleId
                        // 
                        requestedIds[0] = consoleInfo.ConsoleID;
                        consoleIdInfo = connection.LookupMachinePuidsByConsoleIds(requestedIds);
    
                        if (consoleIdInfo == null || consoleIdInfo.Length == 0)
                        {
                            //
                            // If we got back no results, that is an error
                            // 
                            outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                            consoleInfosDetailed = null;
                        }
                        else
                        {
                            //
                            // Build a detailed report for each console id
                            // 
                            consoleInfosDetailed = new ConsoleInfoDetailed[ consoleIdInfo.Length ];
                            for (int i = 0; i < consoleIdInfo.Length; ++i)
                            {
                                ConsoleInfoDetailed cid = new ConsoleInfoDetailed();
    
                                cid.ConsoleID           = consoleInfo.ConsoleID;
                                cid.MachinePuid         = consoleIdInfo[i].MachinePuid;
                                cid.SecondaryIdentifier = consoleIdInfo[i].SecondaryIdentifier;

                                consoleInfosDetailed[i] = cid;
    
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                HResult hr = XblException.GetHResult(e);
                if (hr == HResult.XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID)
                {
                    outcome = GroupMembershipChangeOutcome.MachineDuplicate;
                }
                else
                {
                    outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                }
                consoleInfosDetailed = null;
            }
            return outcome;
        }

        public IEnumerable<Guid> GetMachineMembership(ulong machinePuid)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.SetHashVal(machinePuid);
                ws.StoredProc = "p_beta_group_machine_get_groups";
                ws.AddParameter(ParamType.INPUT, "@bi_machine_puid", machinePuid);

                using (WstDataReader reader = ws.Execute())
                {
                    while (reader.Read())
                    {
                        yield return (Guid)reader["uid_group_id"];
                    }
                }
            }
        }

        public void AddMachinePuidToGroup(ulong machinePuid, Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.SetHashVal(machinePuid);
                ws.StoredProc = "p_beta_group_machine_add";
                ws.AddParameter(ParamType.INPUT, "@bi_machine_puid", machinePuid);
                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);
                ws.AddParameter(ParamType.INPUT, "@si_hash_bucket", ws.Partition);

                ws.ExecuteNonQuery();
            }
        }

        public void RemoveMachinePuidFromGroup(ulong machinePuid, Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.SetHashVal(machinePuid);
                ws.StoredProc = "p_beta_group_machine_remove";
                ws.AddParameter(ParamType.INPUT, "@bi_machine_puid", machinePuid);
                ws.AddParameter(ParamType.INPUT, "@uid_group_id", groupId);

                ws.ExecuteNonQuery();
            }
        }

        public IEnumerable<String> GetConsoleIDsInGroup(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_get_console_ids_for_beta_group";
                    ws.AddParameter("@uid_group_id", groupId);

                    using (WstDataReader reader = ws.Execute())
                    {
                        while (reader.Read())
                        {
                            yield return (string)reader["vc_serial_num"];
                        }
                    }
                }
            }
        }

        public IEnumerable<ConsoleInfo> GetConsoleInfosInGroup(Guid groupId)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                for (int partition = 0; partition < ws.PhysicalPartitions; ++partition)
                {
                    ws.ClearParameters();
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "p_beta_group_group_get_machines";
                    ws.AddParameter("@uid_group_id", groupId);

                    using (WstDataReader reader = ws.Execute())
                    {
                        while (reader.Read())
                        {
                            Puid puid = (Puid)(long)reader["bi_machine_puid"];

                            using (XMachineSoapClient xmachine = new XMachineSoapClient())
                            {
                                MachineInfo []machineInfo = xmachine.LookupMachineInfoByMachinePuids(new ulong[]{puid});
                                if (machineInfo.Length > 0)
                                {
                                    ConsoleInfoDetailed consoleInfoDetailed = new ConsoleInfoDetailed();
                                    consoleInfoDetailed.MachinePuid = puid;
                                    consoleInfoDetailed.ConsoleID = machineInfo[0].ConsoleId;
                                    consoleInfoDetailed.SecondaryIdentifier = machineInfo[0].SecondaryIdentifier;

                                    yield return (ConsoleInfo)consoleInfoDetailed;
                                }
                            }
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Moves a machine from one group to another, only if it is in the first group.
        /// </summary>
        /// <param name="machinePuid">The machine to move.</param>
        /// <param name="fromGroup">The group to move from.</param>
        /// <param name="toGroup">The group to move to.</param>
        /// <returns>True if the machine was moved; false if it was not.</returns>
        public bool MoveMachinePuidBetweenGroups (ulong machinePuid, Guid fromGroup, Guid toGroup)
        {
            HResult hr = 0;

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.SetHashVal(machinePuid);
                ws.StoredProc = "p_beta_group_machine_update";
                ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                ws.AddParameter(ParamType.INPUT, "@bi_machine_puid", machinePuid);
                ws.AddParameter(ParamType.INPUT, "@uid_from_group_id", fromGroup);
                ws.AddParameter(ParamType.INPUT, "@uid_to_group_id", toGroup);

                ws.ExecuteNonQuery();

                hr = (uint)ws.GetIntParameter("@RETVAL");
            }

            return (hr != HResult.XONLINE_E_MIX_MACHINE_NOT_IN_GROUP);
        }

        private const uint FLASH_TITLE = 0xFFFE07D1;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\ServiceContractV4.cs ===
using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.betamanagement.contract.v4
{
    // NOTE: If you change the interface name "IMixBetaManagementV4" here, you must also update the reference to "IMixBetaManagementV4" in Web.config.
    [ServiceContract(Name = "MixBetaManagementV4", Namespace = "http://xonline.mix.betamanagement.contracts/V4")]
    public interface IMixBetaManagementV4
    {
        [OperationContract(Name = "AssignReleaseToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths, ReleaseAppV4[] apps);

        [OperationContract(Name = "AssignTitleUpdateToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, Guid group);

        [OperationContract(Name = "AssignTitleUpdateToGroups")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, Guid[] groups, bool noReload);

        [OperationContract(Name = "IsTitleVersionPropped")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        bool IsTitleVersionPropped(uint titleID, uint version);

        [OperationContract(Name = "GetGroups")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupSummaryV4> GetGroups();

        [OperationContract(Name = "GetGroupDetails")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        GroupV4 GetGroupDetails(Guid groupGuid);

        [OperationContract(Name = "AddConsoleInfosToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV4> AddConsoleInfosToGroup(ConsoleInfoV4[] consoleInfos, Guid groupGuid);

        [OperationContract(Name = "RemoveConsoleInfosFromGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV4> RemoveConsoleInfosFromGroup(ConsoleInfoV4[] consoleInfos, Guid groupGuid);

        // A console is valid for a group iff:
        //   The flash it most recently logged in with is the beta groups flash, or
        //   The flash it most recently logged in with has an upgrade path in n t_title_versions that lets the console reach the expected flash version
        [OperationContract(Name = "ValidateBetaGroupConsoles")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        InvalidConsoleV4[] ValidateBetaGroupConsoles(Guid betaGroup);

        [OperationContract(Name = "CreateGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        Guid CreateGroup(string name, string creator);

        [OperationContract(Name = "GetConsoleInfosInGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<ConsoleInfoV4> GetConsoleInfosInGroup(Guid group);

        [OperationContract(Name = "GetGroupsForConsoleInfos")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupSummaryForConsoleV4> GetGroupsForConsoleInfos(ConsoleInfoV4[] consoleInfos);

        [OperationContract(Name = "RemoveGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void RemoveGroup(Guid group);

        [OperationContract(Name = "UpdateGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void UpdateGroup(Guid group, GroupUpdateV4 updates);

        [OperationContract(Name = "MigrateConsoleInfosToGroup")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<GroupMembershipChangeResultV4> MigrateConsoleInfosToGroup (ConsoleInfoV4[] consoleInfos, Guid fromGroup, Guid toGroup);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\Global.asax.cs ===
using System;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.mix.common;

namespace xonline.mix.betamanagement.service
{
    public class MixBetaManagementApp : SoapFrontEndApp
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MixBetaManagementApp()
            : base()
        {

        }

        public override void Application_Start(object sender, EventArgs eventArgs)
        {
            //Call the base 
            base.Application_Start(sender, eventArgs);

            EventBuilder.ShowSGInfo = false;
            // Custom start code
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(OnXomControlRequest);

        }
        /// <summary>
        /// Event handler for the Xmgmt control request event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public void OnXomControlRequest(object sender, ControlRequestEventArgs args)
        {
            //TODO add xmgmt control command parsing logic and code
            //Is there any thing to reload, cancel? 
        }
        /// <summary>
        /// Error handling for Mix will happen using MixError handler
        /// On Error is not capable of catching FaultExceptions
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ea"></param>
        public override void Application_OnError(object sender, EventArgs ea)
        {
            //We handle errors in the MixErrorHandler
        }

        public override void Application_EndRequest(object sender, EventArgs ea)
        {
            //We dont need to reformat any response
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\MixBetaManagement.cs ===
﻿using System;

using xonline.common.config;
using xonline.common.content;
using xonline.common.installer;
using xonline.common.mgmt;

[assembly: XomIisInstallerAttribute(Interface.mixbetamanagement)]
[assembly: ConfigAttribute(Component.mixbetamanagement)]
[assembly: XomAreaDefinition(XomAreaName.log)]

namespace xonline.mix.betamanagement.service
{
    public class MixBetaManagement : PackageInstaller
    {
        public static readonly string AssignReleaseToGroupApiName = "MixBetaManagement.AssignReleaseToGroup";
        public static readonly string AssignTitleUpdateToGroupApiName = "MixBetaManagement.AssignTitleUpdateToGroup";
        public static readonly string AssignTitleUpdateToGroupsApiName = "MixBetaManagement.AssignTitleUpdateToGroups";
        public static readonly string IsTitleVersionProppedApiName = "MixBetaManagement.IsTitleVersionPropped";
        public static readonly string GetGroupsApiName = "MixBetaManagement.GetGroups";
        public static readonly string GetGroupDetailsApiName = "MixBetaManagement.GetGroupDetails";
        public static readonly string AddConsoleIDsToGroupApiName = "MixBetaManagement.AddConsoleIDsToGroup";
        public static readonly string AddConsoleInfosToGroupApiName = "MixBetaManagement.AddConsoleInfosToGroup";
        public static readonly string RemoveConsoleIDsFromGroupApiName = "MixBetaManagement.RemoveConsoleIDsFromGroup";
        public static readonly string RemoveConsoleInfosFromGroupApiName = "MixBetaManagement.RemoveConsoleInfosFromGroup";
        public static readonly string ValidateBetaGroupConsolesName = "MixBetaManagement.ValidateBetaGroupConsoles";
        public static readonly string CreateGroupName = "MixBetaManagement.CreateGroup";
        public static readonly string GetConsoleIDsInGroupName = "MixBetaManagement.GetConsoleIDsInGroup";
        public static readonly string GetConsoleInfosInGroupName = "MixBetaManagement.GetConsoleInfosInGroup";
        public static readonly string GetGroupsForConsoleIDsName = "MixBetaManagement.GetGroupsForConsoleIDs";
        public static readonly string GetGroupsForConsoleInfosName = "MixBetaManagement.GetGroupsForConsoleInfos";
        public static readonly string RemoveGroupName = "MixBetaManagement.RemoveGroup";
        public static readonly string UpdateGroupName = "MixBetaManagement.UpdateGroup";
        public static readonly string MigrateConsoleIDsToGroupName = "MixBetaManagement.MigrateConsoleIDsToGroup";
        public static readonly string MigrateConsoleInfosToGroupName = "MixBetaManagement.MigrateConsoleInfosToGroup";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\BetaManager.cs ===
/*--------------------------------------------------------------------------------------------------
 * Generally speaking, this file should contain the business logic surrounding group management,
 * and not the data layer.
 * 
 * That said, it's sometimes hard to really seperate those because we have a lot of business
 * logic directly in the database. This is a best effort and nothing more.
 *------------------------------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Data.SqlTypes;
using System.Linq;
using xonline.common.config;
using xonline.mix.common;
using xonline.common.service;
using xonline.common.mgmt;

namespace xonline.mix.betamanagement.service
{
    /// <summary>
    /// Implementation class for the MIX apis related to beta group management. In general, there should be
    /// a one-to-one mapping between public methods of this class and the service contract for BetaManagement.
    /// </summary>
    public class BetaManager
    {
        /// <summary>
        /// We will use this to access our data layer. Realistically in production, we will only
        /// ever use the one that talks to UODB. But this allows us to vary that for unit
        /// testing and I suppose it's theoretically possible that we will want to change
        /// the database in the future.
        /// </summary>
        private IBetaManagementDatabase _gmd;

        /// <summary>
        /// Constructs a BetaManager object, using whatever database object you want. Seems a little odd
        /// to make it private, but it feels right because it will make it easier to turn this into a singleton
        /// or something later on.
        /// </summary>
        /// <param name="gmd">The IBetaManagementDatabase object to use to talk to the database.</param>
        private BetaManager(IBetaManagementDatabase gmd)
        {
            _gmd = gmd;
        }

        /// <summary>
        /// Provides an instance of BetaManager. This is not guaranteed, semantically, to be a new instance.
        /// </summary>
        /// <param name="gmd">The IBetaManagementDatabase object to use to talk to the database.</param>
        /// <returns>A BetaManager object that will use gmd.</returns>
        public static BetaManager GetInstance(IBetaManagementDatabase gmd)
        {
            return new BetaManager(gmd);
        }

        /// <summary>
        /// Provides an instance of BetaManager that uses a UodbBetaManagementDatabase. This is not guaranteed, semantically, to be a new instance.
        /// In most real code, you should use version of GetInstance.
        /// </summary>
        /// <returns>A BetaManager object that talks to UODB.</returns>
        public static BetaManager GetInstance()
        {
            return GetInstance(new UodbBetaManagementDatabase());
        }

        public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifestRevision, string systemManifestRevision, Guid group, uint titleID, bool addUpgradePaths)
        {
            AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifestRevision, systemManifestRevision, group, titleID, addUpgradePaths, null);
        }


        public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifestRevision, string systemManifestRevision, Guid group, uint titleID, bool addUpgradePaths, IEnumerable<ReleaseApp> apps)
        {
            if (0 == currentFlashVersion)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_VERSION, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_FLASH_VERSION, "Flash version 0 cannot be assigned to a group.");
            }

            if (String.IsNullOrEmpty(systemManifestRevision) || String.IsNullOrEmpty(systemOnlineManifestRevision))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "SOMRevision or SMRevision parameter was null.");
            }

            if (0 == titleID)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "TitleID 0 is invalid.");
            }

            ValidateApps(apps);

            IInterfaceInfo npdbInterface = Config.GetInterface(Config.GetServerListByInterface(Interface.npdb)[0], Interface.npdb);
            using (SqlConnection conn = new SqlConnection(npdbInterface.SqlConnectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand("dbo.p_betagroup_assign_release");
                cmd.Connection = conn;
                cmd.CommandType = CommandType.StoredProcedure;

                cmd.Parameters.Add("@guid_beta_group_id", SqlDbType.UniqueIdentifier).Value = group;
                cmd.Parameters.Add("@si_flash_build", SqlDbType.SmallInt).Value = (short)((currentFlashVersion & 0x00FFFF00) / 0x100); // Just get the major version
                cmd.Parameters.Add("@SOMRevision", SqlDbType.NVarChar).Value = systemOnlineManifestRevision;
                cmd.Parameters.Add("@SMRevision", SqlDbType.NVarChar).Value = systemManifestRevision;

                cmd.ExecuteNonQuery();
            }

            if (!addUpgradePaths) // We don't want to add upgrade paths
            {
                baseVersion = currentFlashVersion;
            }
            
            _gmd.AssignReleaseToGroup(group, systemOnlineManifestRevision, systemManifestRevision, currentFlashVersion);

            if (null != apps) // If one's not null, the other isn't as well (as per the earlier check/exception)
            {
                foreach (ReleaseApp app in apps)
                {
                    _gmd.AddRelease(app);
                }
            }

            _gmd.AddTitleVersionInfo(baseVersion, currentFlashVersion, group, titleID);

            MixUtilities.ResetFrontDoor(Interface.kdcsvc, "", "xkdc", "reload", Config.GetIntSetting(Setting.mix_titleMgmt_kdcReloadTimeout));
        }

        private void ValidateApps(IEnumerable<ReleaseApp> apps)
        {
            if (apps == null) return;
            
            List<string> appRecord = new List<string>();

            foreach (ReleaseApp app in apps)
            {
                ValidateApp(app, appRecord);
            }
        }

        private void ValidateApp(ReleaseApp app, List<string> appRecord)
        {
            if (app == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "Application was null");
            }

            if (app.FileName == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "Application had a null filename.");
            }
            if (app.FriendlyName == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "Application had a null friendly name.");
            }
            if (app.Version == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "Application had a null version.");
            }
            if (app.Manifest == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "Application had a null manifest revision.");
            }

            if (app.FileName == "")
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_EMPTY, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Application had an empty filename.");
            }
            if (app.FriendlyName == "")
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_EMPTY, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Application had an empty friendly name.");
            }
            if (app.Version == "")
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_EMPTY, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Application had an empty version.");
            }
            if (app.Manifest == "")
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_EMPTY, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Application had an empty manifest revision.");
            }

            string[] versionParts = app.Version.Split('.');
            if (versionParts.Length != 4)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_VERSION, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Version string must be four parts delimited by '.'.", "versionString");
            }

            if (app.FileName.Length > 100)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "File name was too long.");
            }
            if (app.FriendlyName.Length > 100)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Friendly name was too long.");
            }
            if (app.Version.Length > 100)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Version was too long.");
            }
            if (app.Manifest.Length > 100)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "Manifest revision was too long.");
            }

            // According to PAM PMs, there cannot be a duplicate application in a given release, even with a different manifest
            if (appRecord.Contains(app.FileName))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_DUPLICATE_APP_NOT_ALLOWED, XEvent.Id.MIX_BETA_MANAGEMENT_DUPLICATE_APP_ERROR, "A duplicate application ({0}) was found in the application list.", app.FileName);
            }

            appRecord.Add(app.FileName);

        }


        public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, Guid group)
        {
            AssignTitleUpdateToGroups(titleID, baseVersion, currentVersion, new Guid[] { group }, false);
        }

        public void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, Guid[] groups, bool noReload)
        {
            if (0 == currentVersion)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_VERSION, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_TITLE_VERSION, "Version 0 cannot be assigned to a group.");
            }

            if (baseVersion > currentVersion)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_VERSION, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_TITLE_VERSION, "The base version must be below the update version.");
            }

            if (0 == titleID)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_TITLE_ID, "TitleID 0 is invalid.");
            }

            if (XOn.XENON_DASH_TITLE_ID == titleID)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_TITLE_ID, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_TITLE_ID, "You cannot assign Dash Title updates to a group using this API.  Use AssignReleaseToGroup for this.");
            }

            foreach (Guid group in groups)
            {
                _gmd.AddTitleVersionInfo(baseVersion, currentVersion, group, titleID);
            }

            // If this API is called multiple times back to back, noReload will be true for all but the last one to minimize kdc reloads
            if (!noReload)
            {
                MixUtilities.ResetFrontDoor(Interface.kdcsvc, "", "xkdc", "reload", Config.GetIntSetting(Setting.mix_titleMgmt_kdcReloadTimeout));
            }
        }

        public bool IsTitleVersionPropped(uint titleID, uint version)
        {
            if (0 == version)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_VERSION, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_FLASH_VERSION, "0 is not a valid titleID.");
            }
            return _gmd.GetIsFlashVersionPropped(version);
        }

        /// <summary>
        /// Gets a summary of all beta groups in the environment.
        /// </summary>
        /// <returns>List of GroupSummary in the environment.</returns>
        public IEnumerable<GroupSummary> GetGroups(bool getFlashInfo)
        {
            IEnumerable<GroupSummary> initialGroupSummaries = _gmd.GetGroupSummaries();

            if (getFlashInfo)
            {
                return initialGroupSummaries.Select(x => 
                    {
                        x.FlashVersion = GetExpectedFlashVersion(_gmd.GetFlashUpgradePaths(x.GroupGuid));
                        return x;
                    }
                );
            }
            else
            {
                return initialGroupSummaries;
            }
        }

        public Group GetGroupDetails(Guid groupId)
        {
            Group group = new Group();

            group.Summary = _gmd.GetGroupSummary(groupId);
            group.Titles = new List<UpgradePath>(_gmd.GetFlashUpgradePaths(groupId));
            group.Summary.FlashVersion = GetExpectedFlashVersion(group.Titles);
            group.FlashVersion = group.Summary.FlashVersion;

            Dictionary<SettingKey, ReleaseInfo> settingMap = new Dictionary<SettingKey, ReleaseInfo>();
            foreach (LiveRegistrySetting setting in _gmd.GetLiveRegistrySettings(groupId))
            {
                // We only care about two settings
                if (setting.Setting == "SMRevision" || setting.Setting == "SOMRevision")
                {
                    SettingKey key = new SettingKey();
                    if (setting.Build.HasValue)
                        key.Build = setting.Build.Value;
                    else
                        key.Build = 0;

                    if (setting.Qfe.HasValue)
                        key.Qfe = setting.Qfe.Value;
                    else
                        key.Qfe = 0;

                    if (!settingMap.ContainsKey(key))
                    {
                        ReleaseInfo releaseInfo = new ReleaseInfo();
                        if (setting.Build.HasValue)
                            releaseInfo.FlashVersion = setting.Build.Value;
                        else
                            releaseInfo.FlashVersion = 0;

                        if (setting.Qfe.HasValue)
                            releaseInfo.FlashQfe = setting.Qfe.Value;
                        else
                            releaseInfo.FlashQfe = 0;

                        settingMap[key] = releaseInfo;
                    }

                    if (setting.Setting == "SMRevision")
                    {
                        settingMap[key].SMRevision = setting.Value;
                    }
                    else
                    {
                        settingMap[key].SOMRevision = setting.Value;
                    }
                }
            }

            group.RelInfos = new List<ReleaseInfo>(settingMap.Values);

            return group;
        }

        public IEnumerable<Group> GetGroupsDetails(IEnumerable<Guid> groupIds)
        {
            return groupIds.Select( g => GetGroupDetails(g));
        }


        public void UpdateGroup(Guid group, GroupUpdate updates)
        {
            if (group == Guid.Empty)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ZERO_GUID_NOT_ALLOWED, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID, "The empty Guid is invalid.");
            }

            if (updates == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "The GroupUpdate object parameter was null.");
            }

            if (updates.GroupName == null)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL, XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT, "The GroupUpdate field 'GroupName' was null.");
            }

            if (updates.GroupName.Length > 100)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "The maximum length of a beta group name is 100 characters.");
            }

            if (updates.GroupName.Length == 0)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_EMPTY, XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT, "The group name cannot be the empty string.");
            }

            _gmd.UpdateGroupName(group, updates.GroupName);
        }

        public InvalidConsole[] ValidateBetaGroupConsoles(Guid betaGroup)
        {
            IEnumerable<UpgradePath> paths = _gmd.GetFlashUpgradePaths(betaGroup);
            uint expectedFlashVersion = GetExpectedFlashVersion(paths);
            UpdateVersionPathValidator validator = new UpdateVersionPathValidator(expectedFlashVersion, betaGroup, paths);

            return (from invalidConsole in _gmd.GetConsoleFlashVersionsForBetaGroup(betaGroup)
                    where invalidConsole.FlashVersion != expectedFlashVersion && !validator.VersionPathExists(invalidConsole.FlashVersion)
                    select invalidConsole).ToArray();
        }

        public const uint c_maxGroupNameLength = 100;
        public const uint c_maxGroupCreatorLength = 100;

        public Guid CreateGroup(string name, string creator)
        {
            // Error handling...
            if (name == null)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                        XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                        "Group name was null.");
            }

            if(name == String.Empty || name.Length > c_maxGroupNameLength)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_INVALID_GROUP_NAME,
                        XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT,
                        "The name provided [{0}], is invalid.  Names must be between 1 and {1} characters long.",
                        name,
                        c_maxGroupNameLength);
            }

            if (creator == null)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                        XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                        "Creator was null.");
            }

            if(creator == String.Empty || creator.Length > c_maxGroupCreatorLength)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_INVALID_GROUP_CREATOR,
                        XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT,
                        "The creator provided [{0}], is invalid.  Names must be between 1 and {1} characters long.",
                        name,
                        c_maxGroupCreatorLength);
            }

            if (_gmd.GetAllGroupNames().Contains(name))
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_DUPLICATE_GROUP_NAME_NOT_ALLOWED,
                        XEvent.Id.MIX_BETAMANAGEMENT_INVALID_ARGUMENT,
                        "A group already exists with that name.");
            }

            Guid betaId = Guid.NewGuid();
            _gmd.CreateGroup(betaId, name, creator);
            return betaId;
        }

        private class UpdateVersionPathValidator
        {
            public UpdateVersionPathValidator(uint finalFlashVersion, Guid groupId, IEnumerable<UpgradePath> pathsRaw)
            {
                _finalFlashVersion = finalFlashVersion;
                _pathsRaw = pathsRaw;
                _groupId = groupId;
            }

            public bool VersionPathExists(uint flashVersion)
            {
                // Short-circuit if the flash version is already correct:
                if (flashVersion == _finalFlashVersion)
                {
                    return true;
                }

                uint fvCur = flashVersion;
                uint fvNext;

                while (true)
                {
                    if (!Paths.ContainsKey(fvCur))
                    {
                        break;
                    }

                    fvNext = Paths[fvCur];

                    if (fvCur == fvNext)
                    {
                        break;
                    }

                    fvCur = fvNext;
                }

                return fvCur == _finalFlashVersion;
            }

            private Dictionary<uint, uint> Paths
            {
                get
                {
                    if (_paths == null)
                    {
                        _paths = _pathsRaw.ToDictionary(path => path.BaseVersion, path => path.UpgradeVersion);
                    }
                    return _paths;
                }
            }

            private readonly uint _finalFlashVersion;
            private readonly Guid _groupId;
            private IEnumerable<UpgradePath> _pathsRaw;
            private Dictionary<uint, uint> _paths;
        }

        private uint GetExpectedFlashVersion(IEnumerable<UpgradePath> upgradePaths)
        {
            // The flash version is the highest-numbered baseversion that has a real upgrade path (not just a base-enabled path).
            // If there are only base-enabled paths, we will choose the highest-numbered one.
            // We have one advantage: we can't get multiple identical UpgradePaths. That means that if we have two with
            // ugradeversion is the same between two of them, then baseversion must be different. This further means that if
            // we have multiple upgrade paths for a given upgrade version, and that version has a base-version, then it is a potential
            // final flash version, and we need to take the highest such potential.
            HashCount<uint> upgradeCount = new HashCount<uint>();
            HashSet<uint> baseEnabled = new HashSet<uint>();
            foreach (UpgradePath upgradePath in upgradePaths)
            {
                upgradeCount.Add(upgradePath.UpgradeVersion);
                if (upgradePath.BaseVersion == upgradePath.UpgradeVersion)
                {
                    baseEnabled.Add(upgradePath.UpgradeVersion);
                }
            }

            // We now have a list the counts for each upgrade version, and a table of versions that are base-enabled.
            // Go through and find the highest base-enabled version that has multiple paths.
            uint highestVersion = 0;
            IEnumerable<uint> onlyUpgrades = baseEnabled.Where(x => upgradeCount[x] > 1);
            if (onlyUpgrades.Count() != 0)
            {
                highestVersion = onlyUpgrades.Max();
            }

            // If we still don't have a highestVersion, that we try to find it by using the highest-numbered
            // base-enabled version, regardless of upgrade paths.
            if (highestVersion == 0 && baseEnabled.Count() != 0)
            {
                highestVersion = baseEnabled.Max();
            }

            return highestVersion;
        }

        public IEnumerable<GroupMembershipChangeResult> AddConsoleIDsToGroup(string[] consoleIDs, Guid groupId)
        {
            VerifyConsoleIDList(consoleIDs);

            List<ConsoleInfo> consoleInfos = new List<ConsoleInfo>();
            foreach (string consoleID in consoleIDs )
            {
                ConsoleInfo consoleInfo = new ConsoleInfo();
                consoleInfo.ConsoleID = consoleID;
                consoleInfo.SCode     = null;

                consoleInfos.Add( consoleInfo );
            }
            return AddConsoleIDsToGroup( consoleInfos.ToArray(), groupId, true );
        }

        public IEnumerable<GroupMembershipChangeResult> AddConsoleIDsToGroup(IEnumerable<ConsoleInfo> consoleInfos, Guid groupId)
        {
            return AddConsoleIDsToGroup( consoleInfos, groupId, false );
        }

        private IEnumerable<GroupMembershipChangeResult> AddConsoleIDsToGroup(IEnumerable<ConsoleInfo> consoleInfos, Guid groupId, bool allowDupes)
        {
            VerifyGroup(groupId);
            VerifyConsoleInfoList(consoleInfos);

            List<GroupMembershipChangeResult> results = new List<GroupMembershipChangeResult>();

            foreach (ConsoleInfo consoleInfo in consoleInfos)
            {
                ConsoleInfoDetailed[] consoleInfosDetailed = new ConsoleInfoDetailed[0];
                GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

                //
                // Do a lookup
                // 
                outcome = _gmd.TryLookupMachinePuids( consoleInfo, out consoleInfosDetailed );

                //
                // If the call didn't work, then let the caller know
                // 
                if (outcome != GroupMembershipChangeOutcome.Success)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = consoleInfo;
                    result.Outcome = outcome;
                    results.Add(result);
                    continue;
                }

                //
                // If we didn't find anything, then build that record
                // 
                if (consoleInfosDetailed == null || consoleInfosDetailed.Length == 0)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = consoleInfo;
                    result.Outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                    results.Add(result);
                    continue;
                }

                //
                // If we don't allow duplicates and we have some, then let the caller know.
                // 
                // Also, if we don't allow duplicates, but the only possible xenon machine doesn't 
                // have an S-Code, then fail it. It is impossible for a machine to have a duplicate
                // but no S-Code
                // 
                if (allowDupes == false &&
                    (consoleInfosDetailed.Length != 1 || 
                    (XOn.XboxId.IsXenonMachinePuid(consoleInfosDetailed[0].MachinePuid) == true && consoleInfosDetailed[0].SCode == null) ) )
                {
                    foreach (ConsoleInfoDetailed cid in consoleInfosDetailed)
                    {
                        GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                        result.ConsoleIDWithSCode = (ConsoleInfo) cid;
                        result.Outcome = GroupMembershipChangeOutcome.MachineDuplicate;
                        results.Add(result);
                    }
                    continue;
                }

                foreach (ConsoleInfoDetailed cid in consoleInfosDetailed)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = (ConsoleInfo) cid;
                    result.Outcome = outcome;

                    // Check for any conflicts...
                    //
                    List<Guid> groups = new List<Guid>(_gmd.GetMachineMembership(cid.MachinePuid));

                    if(groups.Contains(groupId))
                    {
                        result.Outcome = GroupMembershipChangeOutcome.MemberAlreadyInGroup;
                        result.ConflictingGroups = groups.ToList();
                    }

                    if(result.Outcome == GroupMembershipChangeOutcome.Success &&
                       groups.Count != 0)
                    {
                        // Any group is a conflict!
                        result.Outcome = GroupMembershipChangeOutcome.MemberInOtherGroup;
                        result.ConflictingGroups = groups.ToList();
                    }

                    if(result.Outcome == GroupMembershipChangeOutcome.Success)
                    {
                        // If everything is okay, do the stuff.
                        _gmd.AddMachinePuidToGroup(cid.MachinePuid, groupId);
                    }
                    results.Add(result);
                }
            }

            return results;
        }

        public IEnumerable<GroupMembershipChangeResult> RemoveConsoleIDsFromGroup(string[] consoleIDs, Guid groupId)
        {
            VerifyGroup(groupId);
            VerifyConsoleIDList(consoleIDs);

            List<ConsoleInfo> consoleInfos = new List<ConsoleInfo>();
            foreach (string consoleID in consoleIDs )
            {
                ConsoleInfo consoleInfo = new ConsoleInfo();
                consoleInfo.ConsoleID = consoleID;
                consoleInfo.SCode     = null;

                consoleInfos.Add( consoleInfo );
            }
            return RemoveConsoleIDsFromGroup( consoleInfos.ToArray(), groupId );
        }

        public IEnumerable<GroupMembershipChangeResult> RemoveConsoleIDsFromGroup(IEnumerable<ConsoleInfo> consoleInfos, Guid groupId)
        {
            VerifyGroup(groupId);
            VerifyConsoleInfoList(consoleInfos);

            List<GroupMembershipChangeResult> results = new List<GroupMembershipChangeResult>();

            foreach(ConsoleInfo consoleInfo in consoleInfos)
            {
                ConsoleInfoDetailed[] consoleInfosDetailed = new ConsoleInfoDetailed[0];
                GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

                //
                // Do a lookup
                // 
                outcome = _gmd.TryLookupMachinePuids( consoleInfo, out consoleInfosDetailed );

                //
                // If the call didn't work, then let the caller know
                // 
                if (outcome != GroupMembershipChangeOutcome.Success)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = consoleInfo;
                    result.Outcome = outcome;
                    results.Add(result);
                    continue;
                }

                //
                // If we didn't find anything, then build that record
                // 
                if (consoleInfosDetailed == null)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = consoleInfo;
                    result.Outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                    results.Add(result);
                    continue;
                }

                foreach (ConsoleInfoDetailed cid in consoleInfosDetailed)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = (ConsoleInfo) cid;
                    result.Outcome = GroupMembershipChangeOutcome.MachineNotInGroup;

                    if (_gmd.GetMachineMembership(cid.MachinePuid).Contains(groupId))
                    {
                        _gmd.RemoveMachinePuidFromGroup(cid.MachinePuid, groupId);
                        result.Outcome = GroupMembershipChangeOutcome.Success;
                    }
                    results.Add(result);
                }
            }

            return results;
        }

        public IEnumerable<String> GetConsoleIDsInGroup(Guid groupId)
        {
            VerifyGroup(groupId);
            return _gmd.GetConsoleIDsInGroup(groupId);
        }

        public IEnumerable<ConsoleInfo> GetConsoleInfosInGroup(Guid groupId)
        {
            VerifyGroup(groupId);
            return _gmd.GetConsoleInfosInGroup(groupId);
        }

        public IEnumerable<GroupSummaryForConsole> GetGroupsForConsoleIDs(string []consoleIDs)
        {
            VerifyConsoleIDList(consoleIDs);

            List<ConsoleInfo> consoleInfos = new List<ConsoleInfo>();
            foreach (string consoleID in consoleIDs )
            {
                ConsoleInfo consoleInfo = new ConsoleInfo();
                consoleInfo.ConsoleID = consoleID;
                consoleInfo.SCode     = null;

                consoleInfos.Add( consoleInfo );
            }
            return GetGroupsForConsoleIDs( consoleInfos.ToArray() );
        }

        public IEnumerable<GroupSummaryForConsole> GetGroupsForConsoleIDs(IEnumerable<ConsoleInfo> consoleInfos)
        {
            VerifyConsoleInfoList(consoleInfos);

            Dictionary<Guid, GroupSummary> cachedGroupSummaries=new Dictionary<Guid, GroupSummary>();

            List<GroupSummaryForConsole> results=new List<GroupSummaryForConsole>();
            foreach (ConsoleInfo consoleInfo in consoleInfos)
            {
                ConsoleInfoDetailed[] consoleInfosDetailed = new ConsoleInfoDetailed[0];
                GroupSummaryForConsole currentResult = null;
                GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;


                //
                // Do a lookup
                // 
                outcome = _gmd.TryLookupMachinePuids( consoleInfo, out consoleInfosDetailed );

                //
                // If the call didn't work, then let the caller know
                // 
                if (outcome != GroupMembershipChangeOutcome.Success)
                {
                    currentResult=new GroupSummaryForConsole();

                    currentResult.ConsoleIDWithSCode = consoleInfo;
                    currentResult.Outcome=outcome;
                    currentResult.Groups=new GroupSummary[0];

                    results.Add(currentResult); //adds a reference to currentResult
                    continue;
                }

                //
                // If we didn't find anything, then build that record
                // 
                if (consoleInfosDetailed == null)
                {
                    currentResult=new GroupSummaryForConsole();

                    currentResult.ConsoleIDWithSCode = consoleInfo;
                    currentResult.Outcome=outcome;
                    currentResult.Groups=new GroupSummary[0];

                    results.Add(currentResult); //adds a reference to currentResult
                    continue;
                }

                // If we got here, we have one or more machine puid for this console id
                foreach (ConsoleInfoDetailed cid in consoleInfosDetailed)
                {
                    currentResult=new GroupSummaryForConsole();

                    currentResult.ConsoleIDWithSCode = (ConsoleInfo) cid;
                    currentResult.Outcome = GroupMembershipChangeOutcome.Success;
                    currentResult.Groups = new GroupSummary[0];
                    results.Add(currentResult);

                    //gets the group guids for the machine
                    IEnumerable<Guid> groupsForMachine=_gmd.GetMachineMembership(cid.MachinePuid);
                    if (!groupsForMachine.Any())
                    {
                        currentResult.Outcome=GroupMembershipChangeOutcome.MachineNotInGroup;
                        continue;
                    }

                    //fill in the group list
                    List<GroupSummary> summaries=new List<GroupSummary>();
                    foreach (Guid g in groupsForMachine)
                    {
                        if (!cachedGroupSummaries.ContainsKey(g))
                        {
                            cachedGroupSummaries.Add(g, _gmd.GetGroupSummary(g));
                        }
                        summaries.Add(cachedGroupSummaries[g]);
                    }
                    currentResult.Groups=summaries;
                }
            }

            return results;
        }

        public void RemoveGroup(Guid groupId)
        {
            VerifyGroup(groupId);

            //verify that there are no members of this group
            IEnumerable<string> consolesInGroup=GetConsoleIDsInGroup(groupId);
            if (consolesInGroup.Any())
            {
                throw new XRLException(HResult.XONLINE_E_MIX_GROUP_MUST_BE_EMPTY, XEvent.Id.MIX_BETAMANAGEMENT_GROUP_MUST_BE_EMPTY, "Group {0:B} cannot be removed because there are still machines in it.", groupId);
            }

            //remove livehive settings for the group
            _gmd.RemoveLiveRegistrySettingsForGroup(groupId);

            //remove title versions for the group
            _gmd.RemoveTitleVersionForGroup(groupId);

            //remove releases for the group
            _gmd.RemoveReleasesForGroup(groupId);

            //remove the group itself
            _gmd.RemoveGroupDefinition(groupId);

            //reload xkdc and livehive.  While this should not fail (as long as all the KDCs and liveinfo servers are running), if it does it's not critical since it won't affect anything (as there are no machines in the group).
            try
            {
                MixUtilities.ResetFrontDoor(Interface.kdcsvc, "", "xkdc", "reload", Config.GetIntSetting(Setting.mix_titleMgmt_kdcReloadTimeout));
            }
            catch (System.Exception e)
            {
                Xom.NtEvent(XEvent.Id.MIX_BETAMANAGEMENT_XKDC_RELOAD_FAILED, e, "Xkdc reload failed after deleting a group.  While this should be harmless, it is unexpected.");
            }

            try
            {
                MixUtilities.ResetFrontDoor(Interface.liveinfo, "", "liveinfo", "ReloadLiveHive", Config.GetIntSetting(Setting.mix_titleMgmt_kdcReloadTimeout));
            }
            catch (System.Exception e)
            {
                Xom.NtEvent(XEvent.Id.MIX_BETAMANAGEMENT_HIVE_RELOAD_FAILED, e, "LiveInfo reload failed after deleting a group.  While this should be harmless, it is unexpected.");
            }
        }

        public IEnumerable<GroupMembershipChangeResult> MigrateConsoleIDsToGroup (string[] consoleIDs, Guid fromGroup, Guid toGroup)
        {
            VerifyConsoleIDList(consoleIDs);

            List<ConsoleInfo> consoleInfos = new List<ConsoleInfo>();
            foreach (string consoleID in consoleIDs )
            {
                ConsoleInfo consoleInfo = new ConsoleInfo();
                consoleInfo.ConsoleID = consoleID;
                consoleInfo.SCode     = null;

                consoleInfos.Add( consoleInfo );
            }
            return MigrateConsoleIDsToGroup( consoleInfos.ToArray(), fromGroup, toGroup, true );
        }

        public IEnumerable<GroupMembershipChangeResult> MigrateConsoleIDsToGroup (IEnumerable<ConsoleInfo> consoleInfos, Guid fromGroup, Guid toGroup)
        {
            return MigrateConsoleIDsToGroup( consoleInfos, fromGroup, toGroup, false );
        }

        private IEnumerable<GroupMembershipChangeResult> MigrateConsoleIDsToGroup (IEnumerable<ConsoleInfo> consoleInfos, Guid fromGroup, Guid toGroup, bool allowDupes)
        {
            // intentionally not fully checking fromGroup to allow for cleanup
            if (fromGroup == Guid.Empty)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_ZERO_GUID_NOT_ALLOWED,
                        XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID,
                        "fromGroup was the empty guid, which is invalid.");
            }

            if (fromGroup.Equals(toGroup))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_CANNOT_MIGRATE_TO_SELF,
                    XEvent.Id.MIX_BETAMANAGEMENT_CANNOT_MIGRATE_TO_SELF,
                    "Cannot migrate from a group to itself ({0:B}).", fromGroup);
            }

            VerifyGroup(toGroup);
            VerifyConsoleInfoList(consoleInfos);

            List<GroupMembershipChangeResult> results = new List<GroupMembershipChangeResult>();
            foreach (ConsoleInfo consoleInfo in consoleInfos)
            {
                ConsoleInfoDetailed[] consoleInfosDetailed = new ConsoleInfoDetailed[0];
                GroupMembershipChangeOutcome outcome = GroupMembershipChangeOutcome.Success;

                //
                // Do a lookup
                // 
                outcome = _gmd.TryLookupMachinePuids( consoleInfo, out consoleInfosDetailed );

                //
                // If the call didn't work, then let the caller know
                //
                if (outcome != GroupMembershipChangeOutcome.Success)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = consoleInfo;
                    result.Outcome = outcome;
                    results.Add(result);
                    continue;
                }

                //
                // If we didn't find anything, then build that record
                // 
                if (consoleInfosDetailed == null || consoleInfosDetailed.Length == 0)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = consoleInfo;
                    result.Outcome = GroupMembershipChangeOutcome.MachineAccountNotExist;
                    results.Add(result);
                    continue;
                }

                //
                // If we don't allow duplicates and we have some, then let the caller know.
                // 
                // Also, if we don't allow duplicates, but the only possible machine doesn't have
                // an S-Code, then fail it. It is impossible for a machine to have a duplicate
                // but no S-Code
                // 
                if (allowDupes == false &&
                    (consoleInfosDetailed.Length != 1 || 
                     (XOn.XboxId.IsXenonMachinePuid(consoleInfosDetailed[0].MachinePuid) == true && consoleInfosDetailed[0].SCode == null) ) )
                {
                    foreach (ConsoleInfoDetailed cid in consoleInfosDetailed)
                    {
                        GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                        result.ConsoleIDWithSCode = (ConsoleInfo) cid;
                        result.Outcome = GroupMembershipChangeOutcome.MachineDuplicate;
                        results.Add(result);
                    }
                    continue;
                }

                foreach (ConsoleInfoDetailed cid in consoleInfosDetailed)
                {
                    GroupMembershipChangeResult result = new GroupMembershipChangeResult();

                    result.ConsoleIDWithSCode = (ConsoleInfo) cid;
                    result.Outcome = outcome;

                    // Move the machine
                    if (!_gmd.MoveMachinePuidBetweenGroups(cid.MachinePuid, fromGroup, toGroup))
                    {
                        // machine wasn't in fromGroup, so we will be helpful and return
                        // the groups that it is in
                        result.Outcome = GroupMembershipChangeOutcome.MachineNotInGroup;
                        result.ConflictingGroups = _gmd.GetMachineMembership(cid.MachinePuid).ToList();
                    }
                    results.Add(result);
                }
            }

            return results;
        }

        // Make sure that this group exists and isn't the empty guid.
        private void VerifyGroup(Guid groupId)
        {
            if(groupId == Guid.Empty)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_ZERO_GUID_NOT_ALLOWED,
                        XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID,
                        "Group was the empty guid, which is invalid.");
            }

            if(!GroupExists(groupId))
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_GROUP_DOES_NOT_EXIST,
                        XEvent.Id.MIX_BETAMANAGEMENT_INVALID_GUID,
                        "Group {0:B} doesn't exist.",
                        groupId);
            }
        }

        private void VerifyConsoleID(string consoleID)
        {
            if(consoleID == null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                    "Console ID list has a null entry.");
            }
        }

        private void VerifyConsoleInfo(ConsoleInfo consoleInfo)
        {
            if(consoleInfo == null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                    "Console Info list has a null entry.");
            }
            VerifyConsoleID( consoleInfo.ConsoleID );
        }

        private void VerifyConsoleIDList(string[] consoleIDs)
        {
            if(consoleIDs == null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                    "Console ID list is null.");
            }

            if(consoleIDs.Length == 0)
            {
                throw new XRLException(
                    // johnmcp: why not HResult.XONLINE_E_MIX_ARGUMENT_EMPTY?
                    HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                    "Console ID list is empty.");
            }

            foreach(string consoleID in consoleIDs)
            {
                VerifyConsoleID(consoleID);
            }
        }

        private void VerifyConsoleInfoList(IEnumerable<ConsoleInfo> consoleInfos)
        {
            if(consoleInfos == null)
            {
                throw new XRLException(
                    HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                    "Console Info list is null.");
            }

            if(consoleInfos.Count() == 0)
            {
                throw new XRLException(
                    // johnmcp: why not HResult.XONLINE_E_MIX_ARGUMENT_EMPTY?
                    HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_BETAMANAGEMENT_NULL_ARGUMENT,
                    "Console Info list is empty.");
            }

            foreach(ConsoleInfo consoleInfo in consoleInfos)
            {
                VerifyConsoleInfo(consoleInfo);
            }
        }

        private bool GroupExists(Guid groupId)
        {
            return _gmd.DoesGroupDefinitionExist(groupId);
        }


        private class SettingKey : IEquatable<SettingKey>
        {
            public short Build { get; set; }
            public short Qfe { get; set; }

            public override int GetHashCode()
            {
                return String.Format("{0}{1}", Build, Qfe).GetHashCode();
            }

            public bool Equals(SettingKey other)
            {
                return Build == other.Build && Qfe == other.Qfe;
            }

            public override bool Equals(object o)
            {
                return Equals((SettingKey)o);
            }
        }

        private GroupSummary CloneGroupSummary(GroupSummary orig)
        {
            GroupSummary groupSummary = new GroupSummary();
            groupSummary.GroupGuid = orig.GroupGuid;
            groupSummary.Name = orig.Name;
            groupSummary.Creator = orig.Creator;
            groupSummary.Created = orig.Created;
            groupSummary.FlashVersion = orig.FlashVersion;
            return groupSummary;
        }

        private class HashCount<TKey>
        {
            private Dictionary<TKey, uint> _dict = new Dictionary<TKey, uint>();

            public void Add(TKey key)
            {
                if (!_dict.ContainsKey(key))
                {
                    _dict[key] = 0;
                }
                _dict[key] = _dict[key] + 1;
            }

            public uint this[TKey key]
            {
                get
                {
                    if (!_dict.ContainsKey(key))
                    {
                        return 0;
                    }
                    else
                    {
                        return _dict[key];
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\MixBetaManagementSvcUtil.cs ===
using System;
using System.Collections.Generic;

using xonline.common.service;
using xonline.server.webcache.common;

namespace xonline.mix.betamanagement.service
{
    public static class MixBetaManagementSvcUtil
    {
        public static void CheckAPI(string apiName)
        {
            try
            {
                Utilities.Instance.CheckAPI(apiName);
            }
            catch (XboxWebInternalException ex)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERINVALID, string.Format("Partner Validation did not pass, WebSG header information missing {0}", ex.Message), false);
            }
            catch (XboxWebException ex)
            {
                //catches incorrect IP information
                throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERINVALID, string.Format("Partner Validation did not pass, WebSG header information missing {0}", ex.Message), false);
            }
            catch (KeyNotFoundException ex)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERMISSING, string.Format("Partner Validation did not pass, WebSG header information invalid {0}", ex.Message), false);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\MixBetaManagementV2.svc.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;

using xonline.mix.common;
using xonline.server.webcache.common;
using xonline.mix.betamanagement.contract.v2;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.mix.betamanagement.service.v2
{
    // NOTE: If you change the class name "MixBetaManagement" here, you must also update the reference to "MixBetaManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixBetaManagementV2 : IMixBetaManagementV2
    {
        public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignReleaseToGroupApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"BaseVersion", "FlashVersion", "SOM", "SM", "Group", "TitleID", "UpgradePaths"});
                logHelper.SetHexField("BaseVersion", baseVersion);
                logHelper.SetHexField("FlashVersion", currentFlashVersion);
                logHelper.SetField("SOM", systemOnlineManifest);
                logHelper.SetField("SM", SystemManifest);
                logHelper.SetField("Group", group);
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetField("UpgradePaths", addUpgradePaths);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignReleaseToGroupApiName);
                BetaManager.GetInstance().AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths);
            });
        }

        public void AssignTitleUpdateToGroup(uint titleID, uint minVersion, uint currentVersion, Guid group)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignTitleUpdateToGroupApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "MinVersion", "CurrentVersion", "Group"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("MinVersion", minVersion);
                logHelper.SetHexField("CurrentVersion", currentVersion);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignTitleUpdateToGroupApiName);
                BetaManager.GetInstance().AssignTitleUpdateToGroup(titleID, minVersion, currentVersion, group);
            });
        }

        public bool IsTitleVersionPropped(uint titleID, uint version)
        {
            bool result=true;

            LogHelper logHelper=new LogHelper(MixBetaManagement.IsTitleVersionProppedApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "Version", "IsPropped"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("Version", version);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.IsTitleVersionProppedApiName);
                result=BetaManager.GetInstance().IsTitleVersionPropped(titleID, version);

                logHelper.SetField("IsPropped", result);
            });

            return result;
        }

        public IEnumerable<GroupSummaryV2> GetGroups()
        {
            IEnumerable<GroupSummaryV2> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupsApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Count"});

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupsApiName);
                ret=BetaManager.GetInstance().GetGroups(false /*getFlashInfo*/).Select(x => (GroupSummaryV2)x);

                logHelper.SetCountField("Count", ret);
            });

            return ret;
        }

        public GroupV2 GetGroupDetails(Guid group)
        {
            GroupV2 result=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupDetailsApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupDetailsApiName);
                result=BetaManager.GetInstance().GetGroupDetails(group);
            });

            return result;
        }

        public IEnumerable<GroupMembershipChangeResultV2> AddConsoleIDsToGroup(string[] consoleIDs, Guid group)
        {
            IEnumerable<GroupMembershipChangeResultV2> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.AddConsoleIDsToGroupApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleIDs", "Group"});
                logHelper.SetListField("ConsoleIDs", consoleIDs, 10);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AddConsoleIDsToGroupApiName);
                ret=BetaManager.GetInstance().AddConsoleIDsToGroup(consoleIDs, group).Select(x => (GroupMembershipChangeResultV2)x);
            });

            return ret;
        }

        public IEnumerable<GroupMembershipChangeResultV2> RemoveConsoleIDsFromGroup(string[] consoleIDs, Guid group)
        {
            IEnumerable<GroupMembershipChangeResultV2> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.RemoveConsoleIDsFromGroupApiName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleIDs", "Group"});
                logHelper.SetListField("ConsoleIDs", consoleIDs, 10);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.RemoveConsoleIDsFromGroupApiName);
                ret=BetaManager.GetInstance().RemoveConsoleIDsFromGroup(consoleIDs, group).Select( x => (GroupMembershipChangeResultV2)x);
            });

            return ret;
        }

        public InvalidConsoleV2[] ValidateBetaGroupConsoles(Guid betaGroup)
        {
            InvalidConsoleV2[] results=new InvalidConsoleV2[0];

            LogHelper logHelper=new LogHelper(MixBetaManagement.ValidateBetaGroupConsolesName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group", "InvalidCount"});
                logHelper.SetField("Group", betaGroup);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.ValidateBetaGroupConsolesName);
                results=Array.ConvertAll(BetaManager.GetInstance().ValidateBetaGroupConsoles(betaGroup), ic => (InvalidConsoleV2)ic);

                logHelper.SetField("InvalidCount", results.Length);
            });

            return results;
        }

        public Guid CreateGroup(string name, string creator)
        {
            Guid result=Guid.Empty;

            LogHelper logHelper=new LogHelper(MixBetaManagement.CreateGroupName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Name", "Creator", "Group"});
                logHelper.SetField("Name", name);
                logHelper.SetField("Creator", creator);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.CreateGroupName);
                result=BetaManager.GetInstance().CreateGroup(name, creator);

                logHelper.SetField("Group", result);
            });

            return result;
        }

        public IEnumerable<string> GetConsoleIDsInGroup(Guid group)
        {
            IEnumerable<string> result=new List<string>();

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetConsoleIDsInGroupName, "V2");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group", "Count"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetConsoleIDsInGroupName);
                result=BetaManager.GetInstance().GetConsoleIDsInGroup(group);

                logHelper.SetCountField("Count", result);
            });

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\obj\i386\MixBetaManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V1", ClrNamespace="xonline.mix.betamanagement.contracts.V1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V2", ClrNamespace="xonline.mix.betamanagement.contracts.V2")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V3", ClrNamespace="xonline.mix.betamanagement.contracts.V3")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V4", ClrNamespace="xonline.mix.betamanagement.contracts.V4")]

namespace xonline.mix.betamanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private uint FlashVersionField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.betamanagement.contracts.V1.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V1.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V1.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V1.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V1", ConfigurationName="MixBetaManagement")]
public interface MixBetaManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roup", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "opped", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "oppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "oppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "oppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupsRespons" +
        "e")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupsValidat" +
        "ionFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupsMixClie" +
        "ntFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V1.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetails", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetailsR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetailsM" +
        "ixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetailsV" +
        "alidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V1.Group GetGroupDetails(System.Guid groupGuid);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementChannel : MixBetaManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementClient : System.ServiceModel.ClientBase<MixBetaManagement>, MixBetaManagement
{
    
    public MixBetaManagementClient()
    {
    }
    
    public MixBetaManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V1.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V1.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V2", ConfigurationName="MixBetaManagementV2")]
public interface MixBetaManagementV2
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "Propped", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "ProppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "ProppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "ProppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupsRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupsMixCl" +
        "ientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupsValid" +
        "ationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "s", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "sValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "sMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.Group GetGroupDetails(System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsoles", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsolesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsolesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsolesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    System.Guid CreateGroup(string name, string creator);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetConsoleIDsInGroup(System.Guid group);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementV2Channel : MixBetaManagementV2, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementV2Client : System.ServiceModel.ClientBase<MixBetaManagementV2>, MixBetaManagementV2
{
    
    public MixBetaManagementV2Client()
    {
    }
    
    public MixBetaManagementV2Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementV2Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths);
    }
    
    public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group)
    {
        base.Channel.AssignTitleUpdateToGroup(titleID, baseVersion, currentVersion, group);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V2.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V2.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.AddConsoleIDsToGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.RemoveConsoleIDsFromGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V2.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup)
    {
        return base.Channel.ValidateBetaGroupConsoles(betaGroup);
    }
    
    public System.Guid CreateGroup(string name, string creator)
    {
        return base.Channel.CreateGroup(name, creator);
    }
    
    public string[] GetConsoleIDsInGroup(System.Guid group)
    {
        return base.Channel.GetConsoleIDsInGroup(group);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V3", ConfigurationName="MixBetaManagementV3")]
public interface MixBetaManagementV3
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V3.ReleaseApp[] apps);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "Propped", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "ProppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "ProppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "ProppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsValid" +
        "ationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsMixCl" +
        "ientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "s", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "sMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "sValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.Group GetGroupDetails(System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsoles", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsolesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsolesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsolesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    System.Guid CreateGroup(string name, string creator);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetConsoleIDsInGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDs", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupSummaryForConsole[] GetGroupsForConsoleIDs(string[] consoleIDs);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V3.GroupUpdate updates);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] MigrateConsoleIDsToGroup(string[] consoleIDs, System.Guid fromGroup, System.Guid toGroup);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementV3Channel : MixBetaManagementV3, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementV3Client : System.ServiceModel.ClientBase<MixBetaManagementV3>, MixBetaManagementV3
{
    
    public MixBetaManagementV3Client()
    {
    }
    
    public MixBetaManagementV3Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementV3Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV3Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV3Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V3.ReleaseApp[] apps)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths, apps);
    }
    
    public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group)
    {
        base.Channel.AssignTitleUpdateToGroup(titleID, baseVersion, currentVersion, group);
    }
    
    public void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload)
    {
        base.Channel.AssignTitleUpdateToGroups(titleID, baseVersion, currentVersion, groups, noReload);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V3.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.AddConsoleIDsToGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.RemoveConsoleIDsFromGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V3.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup)
    {
        return base.Channel.ValidateBetaGroupConsoles(betaGroup);
    }
    
    public System.Guid CreateGroup(string name, string creator)
    {
        return base.Channel.CreateGroup(name, creator);
    }
    
    public string[] GetConsoleIDsInGroup(System.Guid group)
    {
        return base.Channel.GetConsoleIDsInGroup(group);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupSummaryForConsole[] GetGroupsForConsoleIDs(string[] consoleIDs)
    {
        return base.Channel.GetGroupsForConsoleIDs(consoleIDs);
    }
    
    public void RemoveGroup(System.Guid group)
    {
        base.Channel.RemoveGroup(group);
    }
    
    public void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V3.GroupUpdate updates)
    {
        base.Channel.UpdateGroup(group, updates);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] MigrateConsoleIDsToGroup(string[] consoleIDs, System.Guid fromGroup, System.Guid toGroup)
    {
        return base.Channel.MigrateConsoleIDsToGroup(consoleIDs, fromGroup, toGroup);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V4", ConfigurationName="MixBetaManagementV4")]
public interface MixBetaManagementV4
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V4.ReleaseApp[] apps);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "Propped", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "ProppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "ProppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "ProppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsMixCl" +
        "ientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsValid" +
        "ationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "s", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "sMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "sValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.Group GetGroupDetails(System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] AddConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] RemoveConsoleInfosFromGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsoles", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsolesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsolesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsolesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    System.Guid CreateGroup(string name, string creator);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] GetConsoleInfosInGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfos", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfosResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfosMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfosValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupSummaryForConsole[] GetGroupsForConsoleInfos(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V4.GroupUpdate updates);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] MigrateConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid fromGroup, System.Guid toGroup);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementV4Channel : MixBetaManagementV4, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementV4Client : System.ServiceModel.ClientBase<MixBetaManagementV4>, MixBetaManagementV4
{
    
    public MixBetaManagementV4Client()
    {
    }
    
    public MixBetaManagementV4Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementV4Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV4Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV4Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V4.ReleaseApp[] apps)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths, apps);
    }
    
    public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group)
    {
        base.Channel.AssignTitleUpdateToGroup(titleID, baseVersion, currentVersion, group);
    }
    
    public void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload)
    {
        base.Channel.AssignTitleUpdateToGroups(titleID, baseVersion, currentVersion, groups, noReload);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V4.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] AddConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid)
    {
        return base.Channel.AddConsoleInfosToGroup(consoleInfos, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] RemoveConsoleInfosFromGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid)
    {
        return base.Channel.RemoveConsoleInfosFromGroup(consoleInfos, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V4.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup)
    {
        return base.Channel.ValidateBetaGroupConsoles(betaGroup);
    }
    
    public System.Guid CreateGroup(string name, string creator)
    {
        return base.Channel.CreateGroup(name, creator);
    }
    
    public xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] GetConsoleInfosInGroup(System.Guid group)
    {
        return base.Channel.GetConsoleInfosInGroup(group);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupSummaryForConsole[] GetGroupsForConsoleInfos(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos)
    {
        return base.Channel.GetGroupsForConsoleInfos(consoleInfos);
    }
    
    public void RemoveGroup(System.Guid group)
    {
        base.Channel.RemoveGroup(group);
    }
    
    public void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V4.GroupUpdate updates)
    {
        base.Channel.UpdateGroup(group, updates);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] MigrateConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid fromGroup, System.Guid toGroup)
    {
        return base.Channel.MigrateConsoleInfosToGroup(consoleInfos, fromGroup, toGroup);
    }
}
namespace xonline.mix.betamanagement.contracts.V2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint FlashVersionField;
        
        private xonline.mix.betamanagement.contracts.V2.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V2.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V2.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V2.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeResult", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class GroupMembershipChangeResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid[] ConflictingGroupsField;
        
        private string ConsoleIDField;
        
        private xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ConflictingGroups
        {
            get
            {
                return this.ConflictingGroupsField;
            }
            set
            {
                this.ConflictingGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeOutcome", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public enum GroupMembershipChangeOutcome : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberInOtherGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineAccountNotExist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineNotInGroup = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidConsole", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class InvalidConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIdField;
        
        private uint FlashVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleId
        {
            get
            {
                return this.ConsoleIdField;
            }
            set
            {
                this.ConsoleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
    }
}
namespace xonline.mix.betamanagement.contracts.V3
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseApp", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class ReleaseApp : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FileNameField;
        
        private string FriendlyNameField;
        
        private string ManifestField;
        
        private bool OnlineField;
        
        private string VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Manifest
        {
            get
            {
                return this.ManifestField;
            }
            set
            {
                this.ManifestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Online
        {
            get
            {
                return this.OnlineField;
            }
            set
            {
                this.OnlineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint FlashVersionField;
        
        private xonline.mix.betamanagement.contracts.V3.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V3.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V3.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeResult", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupMembershipChangeResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid[] ConflictingGroupsField;
        
        private string ConsoleIDField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ConflictingGroups
        {
            get
            {
                return this.ConflictingGroupsField;
            }
            set
            {
                this.ConflictingGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeOutcome", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public enum GroupMembershipChangeOutcome : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberInOtherGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineAccountNotExist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineNotInGroup = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberAlreadyInGroup = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidConsole", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class InvalidConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIdField;
        
        private uint FlashVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleId
        {
            get
            {
                return this.ConsoleIdField;
            }
            set
            {
                this.ConsoleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummaryForConsole", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupSummaryForConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIDField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupSummary[] GroupsField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupSummary[] Groups
        {
            get
            {
                return this.GroupsField;
            }
            set
            {
                this.GroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUpdate", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupUpdate : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
    }
}
namespace xonline.mix.betamanagement.contracts.V4
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseApp", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class ReleaseApp : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FileNameField;
        
        private string FriendlyNameField;
        
        private string ManifestField;
        
        private bool OnlineField;
        
        private string VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Manifest
        {
            get
            {
                return this.ManifestField;
            }
            set
            {
                this.ManifestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Online
        {
            get
            {
                return this.OnlineField;
            }
            set
            {
                this.OnlineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint FlashVersionField;
        
        private xonline.mix.betamanagement.contracts.V4.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V4.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V4.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConsoleInfo", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class ConsoleInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIDField;
        
        private string SCodeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SCode
        {
            get
            {
                return this.SCodeField;
            }
            set
            {
                this.SCodeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeResult", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupMembershipChangeResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid[] ConflictingGroupsField;
        
        private xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCodeField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ConflictingGroups
        {
            get
            {
                return this.ConflictingGroupsField;
            }
            set
            {
                this.ConflictingGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCode
        {
            get
            {
                return this.ConsoleIDWithSCodeField;
            }
            set
            {
                this.ConsoleIDWithSCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeOutcome", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public enum GroupMembershipChangeOutcome : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberInOtherGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineAccountNotExist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineNotInGroup = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberAlreadyInGroup = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineDuplicate = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidConsole", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class InvalidConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCodeField;
        
        private uint FlashVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCode
        {
            get
            {
                return this.ConsoleIDWithSCodeField;
            }
            set
            {
                this.ConsoleIDWithSCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummaryForConsole", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupSummaryForConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCodeField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupSummary[] GroupsField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCode
        {
            get
            {
                return this.ConsoleIDWithSCodeField;
            }
            set
            {
                this.ConsoleIDWithSCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupSummary[] Groups
        {
            get
            {
                return this.GroupsField;
            }
            set
            {
                this.GroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUpdate", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupUpdate : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Contracts\objd\i386\MixBetaManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V1", ClrNamespace="xonline.mix.betamanagement.contracts.V1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V2", ClrNamespace="xonline.mix.betamanagement.contracts.V2")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V3", ClrNamespace="xonline.mix.betamanagement.contracts.V3")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.betamanagement.contracts/V4", ClrNamespace="xonline.mix.betamanagement.contracts.V4")]

namespace xonline.mix.betamanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private uint FlashVersionField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.betamanagement.contracts.V1.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V1.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V1.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V1.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V1.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V1")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V1", ConfigurationName="MixBetaManagement")]
public interface MixBetaManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roup", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/AssignReleaseToG" +
        "roupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "opped", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "oppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "oppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/IsTitleVersionPr" +
        "oppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupsRespons" +
        "e")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupsValidat" +
        "ionFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupsMixClie" +
        "ntFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V1.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetails", ReplyAction="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetailsR" +
        "esponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetailsV" +
        "alidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V1/MixBetaManagement/GetGroupDetailsM" +
        "ixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V1.Group GetGroupDetails(System.Guid groupGuid);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementChannel : MixBetaManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementClient : System.ServiceModel.ClientBase<MixBetaManagement>, MixBetaManagement
{
    
    public MixBetaManagementClient()
    {
    }
    
    public MixBetaManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V1.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V1.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V2", ConfigurationName="MixBetaManagementV2")]
public interface MixBetaManagementV2
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignReleaseT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AssignTitleUpd" +
        "ateToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "Propped", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "ProppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "ProppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/IsTitleVersion" +
        "ProppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupsRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupsMixCl" +
        "ientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupsValid" +
        "ationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "s", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "sMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetGroupDetail" +
        "sValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.Group GetGroupDetails(System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/AddConsoleIDsT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/RemoveConsoleI" +
        "DsFromGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsoles", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsolesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsolesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/ValidateBetaGr" +
        "oupConsolesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V2.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/CreateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    System.Guid CreateGroup(string name, string creator);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V2/MixBetaManagementV2/GetConsoleIDsI" +
        "nGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetConsoleIDsInGroup(System.Guid group);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementV2Channel : MixBetaManagementV2, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementV2Client : System.ServiceModel.ClientBase<MixBetaManagementV2>, MixBetaManagementV2
{
    
    public MixBetaManagementV2Client()
    {
    }
    
    public MixBetaManagementV2Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementV2Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths);
    }
    
    public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group)
    {
        base.Channel.AssignTitleUpdateToGroup(titleID, baseVersion, currentVersion, group);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V2.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V2.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.AddConsoleIDsToGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.RemoveConsoleIDsFromGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V2.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup)
    {
        return base.Channel.ValidateBetaGroupConsoles(betaGroup);
    }
    
    public System.Guid CreateGroup(string name, string creator)
    {
        return base.Channel.CreateGroup(name, creator);
    }
    
    public string[] GetConsoleIDsInGroup(System.Guid group)
    {
        return base.Channel.GetConsoleIDsInGroup(group);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V3", ConfigurationName="MixBetaManagementV3")]
public interface MixBetaManagementV3
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignReleaseT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V3.ReleaseApp[] apps);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AssignTitleUpd" +
        "ateToGroupsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "Propped", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "ProppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "ProppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/IsTitleVersion" +
        "ProppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsMixCl" +
        "ientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsValid" +
        "ationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "s", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "sValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupDetail" +
        "sMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.Group GetGroupDetails(System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/AddConsoleIDsT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveConsoleI" +
        "DsFromGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsoles", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsolesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsolesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/ValidateBetaGr" +
        "oupConsolesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/CreateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    System.Guid CreateGroup(string name, string creator);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetConsoleIDsI" +
        "nGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetConsoleIDsInGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDs", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/GetGroupsForCo" +
        "nsoleIDsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupSummaryForConsole[] GetGroupsForConsoleIDs(string[] consoleIDs);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/RemoveGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/UpdateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V3.GroupUpdate updates);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V3/MixBetaManagementV3/MigrateConsole" +
        "IDsToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] MigrateConsoleIDsToGroup(string[] consoleIDs, System.Guid fromGroup, System.Guid toGroup);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementV3Channel : MixBetaManagementV3, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementV3Client : System.ServiceModel.ClientBase<MixBetaManagementV3>, MixBetaManagementV3
{
    
    public MixBetaManagementV3Client()
    {
    }
    
    public MixBetaManagementV3Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementV3Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV3Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV3Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V3.ReleaseApp[] apps)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths, apps);
    }
    
    public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group)
    {
        base.Channel.AssignTitleUpdateToGroup(titleID, baseVersion, currentVersion, group);
    }
    
    public void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload)
    {
        base.Channel.AssignTitleUpdateToGroups(titleID, baseVersion, currentVersion, groups, noReload);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V3.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] AddConsoleIDsToGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.AddConsoleIDsToGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] RemoveConsoleIDsFromGroup(string[] consoleIDs, System.Guid groupGuid)
    {
        return base.Channel.RemoveConsoleIDsFromGroup(consoleIDs, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V3.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup)
    {
        return base.Channel.ValidateBetaGroupConsoles(betaGroup);
    }
    
    public System.Guid CreateGroup(string name, string creator)
    {
        return base.Channel.CreateGroup(name, creator);
    }
    
    public string[] GetConsoleIDsInGroup(System.Guid group)
    {
        return base.Channel.GetConsoleIDsInGroup(group);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupSummaryForConsole[] GetGroupsForConsoleIDs(string[] consoleIDs)
    {
        return base.Channel.GetGroupsForConsoleIDs(consoleIDs);
    }
    
    public void RemoveGroup(System.Guid group)
    {
        base.Channel.RemoveGroup(group);
    }
    
    public void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V3.GroupUpdate updates)
    {
        base.Channel.UpdateGroup(group, updates);
    }
    
    public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeResult[] MigrateConsoleIDsToGroup(string[] consoleIDs, System.Guid fromGroup, System.Guid toGroup)
    {
        return base.Channel.MigrateConsoleIDsToGroup(consoleIDs, fromGroup, toGroup);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.betamanagement.contracts/V4", ConfigurationName="MixBetaManagementV4")]
public interface MixBetaManagementV4
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignReleaseT" +
        "oGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V4.ReleaseApp[] apps);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AssignTitleUpd" +
        "ateToGroupsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "Propped", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "ProppedResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "ProppedValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/IsTitleVersion" +
        "ProppedMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    bool IsTitleVersionPropped(uint titleID, uint version);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroups", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsRespo" +
        "nse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsMixCl" +
        "ientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsValid" +
        "ationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupSummary[] GetGroups();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "s", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "sResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "sValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupDetail" +
        "sMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.Group GetGroupDetails(System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/AddConsoleInfo" +
        "sToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] AddConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveConsoleI" +
        "nfosFromGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] RemoveConsoleInfosFromGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsoles", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsolesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsolesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/ValidateBetaGr" +
        "oupConsolesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/CreateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    System.Guid CreateGroup(string name, string creator);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetConsoleInfo" +
        "sInGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] GetConsoleInfosInGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfos", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfosResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfosMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/GetGroupsForCo" +
        "nsoleInfosValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupSummaryForConsole[] GetGroupsForConsoleInfos(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/RemoveGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveGroup(System.Guid group);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroupRes" +
        "ponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroupVal" +
        "idationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/UpdateGroupMix" +
        "ClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V4.GroupUpdate updates);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroup", ReplyAction="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroupResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroupMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.betamanagement.contracts/V4/MixBetaManagementV4/MigrateConsole" +
        "InfosToGroupValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] MigrateConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid fromGroup, System.Guid toGroup);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixBetaManagementV4Channel : MixBetaManagementV4, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixBetaManagementV4Client : System.ServiceModel.ClientBase<MixBetaManagementV4>, MixBetaManagementV4
{
    
    public MixBetaManagementV4Client()
    {
    }
    
    public MixBetaManagementV4Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixBetaManagementV4Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV4Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixBetaManagementV4Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, System.Guid group, uint titleID, bool addUpgradePaths, xonline.mix.betamanagement.contracts.V4.ReleaseApp[] apps)
    {
        base.Channel.AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths, apps);
    }
    
    public void AssignTitleUpdateToGroup(uint titleID, uint baseVersion, uint currentVersion, System.Guid group)
    {
        base.Channel.AssignTitleUpdateToGroup(titleID, baseVersion, currentVersion, group);
    }
    
    public void AssignTitleUpdateToGroups(uint titleID, uint baseVersion, uint currentVersion, System.Guid[] groups, bool noReload)
    {
        base.Channel.AssignTitleUpdateToGroups(titleID, baseVersion, currentVersion, groups, noReload);
    }
    
    public bool IsTitleVersionPropped(uint titleID, uint version)
    {
        return base.Channel.IsTitleVersionPropped(titleID, version);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupSummary[] GetGroups()
    {
        return base.Channel.GetGroups();
    }
    
    public xonline.mix.betamanagement.contracts.V4.Group GetGroupDetails(System.Guid groupGuid)
    {
        return base.Channel.GetGroupDetails(groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] AddConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid)
    {
        return base.Channel.AddConsoleInfosToGroup(consoleInfos, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] RemoveConsoleInfosFromGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid groupGuid)
    {
        return base.Channel.RemoveConsoleInfosFromGroup(consoleInfos, groupGuid);
    }
    
    public xonline.mix.betamanagement.contracts.V4.InvalidConsole[] ValidateBetaGroupConsoles(System.Guid betaGroup)
    {
        return base.Channel.ValidateBetaGroupConsoles(betaGroup);
    }
    
    public System.Guid CreateGroup(string name, string creator)
    {
        return base.Channel.CreateGroup(name, creator);
    }
    
    public xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] GetConsoleInfosInGroup(System.Guid group)
    {
        return base.Channel.GetConsoleInfosInGroup(group);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupSummaryForConsole[] GetGroupsForConsoleInfos(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos)
    {
        return base.Channel.GetGroupsForConsoleInfos(consoleInfos);
    }
    
    public void RemoveGroup(System.Guid group)
    {
        base.Channel.RemoveGroup(group);
    }
    
    public void UpdateGroup(System.Guid group, xonline.mix.betamanagement.contracts.V4.GroupUpdate updates)
    {
        base.Channel.UpdateGroup(group, updates);
    }
    
    public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeResult[] MigrateConsoleInfosToGroup(xonline.mix.betamanagement.contracts.V4.ConsoleInfo[] consoleInfos, System.Guid fromGroup, System.Guid toGroup)
    {
        return base.Channel.MigrateConsoleInfosToGroup(consoleInfos, fromGroup, toGroup);
    }
}
namespace xonline.mix.betamanagement.contracts.V2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint FlashVersionField;
        
        private xonline.mix.betamanagement.contracts.V2.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V2.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V2.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V2.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeResult", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class GroupMembershipChangeResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid[] ConflictingGroupsField;
        
        private string ConsoleIDField;
        
        private xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ConflictingGroups
        {
            get
            {
                return this.ConflictingGroupsField;
            }
            set
            {
                this.ConflictingGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V2.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeOutcome", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public enum GroupMembershipChangeOutcome : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberInOtherGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineAccountNotExist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineNotInGroup = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidConsole", Namespace="http://xonline.mix.betamanagement.contracts/V2")]
    public partial class InvalidConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIdField;
        
        private uint FlashVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleId
        {
            get
            {
                return this.ConsoleIdField;
            }
            set
            {
                this.ConsoleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
    }
}
namespace xonline.mix.betamanagement.contracts.V3
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseApp", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class ReleaseApp : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FileNameField;
        
        private string FriendlyNameField;
        
        private string ManifestField;
        
        private bool OnlineField;
        
        private string VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Manifest
        {
            get
            {
                return this.ManifestField;
            }
            set
            {
                this.ManifestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Online
        {
            get
            {
                return this.OnlineField;
            }
            set
            {
                this.OnlineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint FlashVersionField;
        
        private xonline.mix.betamanagement.contracts.V3.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V3.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V3.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeResult", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupMembershipChangeResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid[] ConflictingGroupsField;
        
        private string ConsoleIDField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ConflictingGroups
        {
            get
            {
                return this.ConflictingGroupsField;
            }
            set
            {
                this.ConflictingGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeOutcome", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public enum GroupMembershipChangeOutcome : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberInOtherGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineAccountNotExist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineNotInGroup = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberAlreadyInGroup = 4,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidConsole", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class InvalidConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIdField;
        
        private uint FlashVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleId
        {
            get
            {
                return this.ConsoleIdField;
            }
            set
            {
                this.ConsoleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummaryForConsole", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupSummaryForConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIDField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupSummary[] GroupsField;
        
        private xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupSummary[] Groups
        {
            get
            {
                return this.GroupsField;
            }
            set
            {
                this.GroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V3.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUpdate", Namespace="http://xonline.mix.betamanagement.contracts/V3")]
    public partial class GroupUpdate : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
    }
}
namespace xonline.mix.betamanagement.contracts.V4
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseApp", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class ReleaseApp : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FileNameField;
        
        private string FriendlyNameField;
        
        private string ManifestField;
        
        private bool OnlineField;
        
        private string VersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileName
        {
            get
            {
                return this.FileNameField;
            }
            set
            {
                this.FileNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Manifest
        {
            get
            {
                return this.ManifestField;
            }
            set
            {
                this.ManifestField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Online
        {
            get
            {
                return this.OnlineField;
            }
            set
            {
                this.OnlineField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Version
        {
            get
            {
                return this.VersionField;
            }
            set
            {
                this.VersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummary", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupSummary : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.DateTime CreatedField;
        
        private string CreatorField;
        
        private System.Guid GroupGuidField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime Created
        {
            get
            {
                return this.CreatedField;
            }
            set
            {
                this.CreatedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Creator
        {
            get
            {
                return this.CreatorField;
            }
            set
            {
                this.CreatorField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GroupGuid
        {
            get
            {
                return this.GroupGuidField;
            }
            set
            {
                this.GroupGuidField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Group", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class Group : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint FlashVersionField;
        
        private xonline.mix.betamanagement.contracts.V4.ReleaseInfo[] RelInfosField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupSummary SummaryField;
        
        private xonline.mix.betamanagement.contracts.V4.UpgradePath[] TitlesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ReleaseInfo[] RelInfos
        {
            get
            {
                return this.RelInfosField;
            }
            set
            {
                this.RelInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupSummary Summary
        {
            get
            {
                return this.SummaryField;
            }
            set
            {
                this.SummaryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.UpgradePath[] Titles
        {
            get
            {
                return this.TitlesField;
            }
            set
            {
                this.TitlesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReleaseInfo", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class ReleaseInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private short FlashQfeField;
        
        private short FlashVersionField;
        
        private string SMRevisionField;
        
        private string SOMRevisionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashQfe
        {
            get
            {
                return this.FlashQfeField;
            }
            set
            {
                this.FlashQfeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public short FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SMRevision
        {
            get
            {
                return this.SMRevisionField;
            }
            set
            {
                this.SMRevisionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SOMRevision
        {
            get
            {
                return this.SOMRevisionField;
            }
            set
            {
                this.SOMRevisionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UpgradePath", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class UpgradePath : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private uint BaseVersionField;
        
        private xonline.mix.betamanagement.contracts.V4.PlatformType ConsoleTypeField;
        
        private uint TitleIdField;
        
        private uint UpgradeVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint BaseVersion
        {
            get
            {
                return this.BaseVersionField;
            }
            set
            {
                this.BaseVersionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.PlatformType ConsoleType
        {
            get
            {
                return this.ConsoleTypeField;
            }
            set
            {
                this.ConsoleTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint UpgradeVersion
        {
            get
            {
                return this.UpgradeVersionField;
            }
            set
            {
                this.UpgradeVersionField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConsoleInfo", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class ConsoleInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ConsoleIDField;
        
        private string SCodeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ConsoleID
        {
            get
            {
                return this.ConsoleIDField;
            }
            set
            {
                this.ConsoleIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string SCode
        {
            get
            {
                return this.SCodeField;
            }
            set
            {
                this.SCodeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeResult", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupMembershipChangeResult : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid[] ConflictingGroupsField;
        
        private xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCodeField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ConflictingGroups
        {
            get
            {
                return this.ConflictingGroupsField;
            }
            set
            {
                this.ConflictingGroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCode
        {
            get
            {
                return this.ConsoleIDWithSCodeField;
            }
            set
            {
                this.ConsoleIDWithSCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupMembershipChangeOutcome", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public enum GroupMembershipChangeOutcome : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberInOtherGroup = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineAccountNotExist = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineNotInGroup = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MemberAlreadyInGroup = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        MachineDuplicate = 5,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InvalidConsole", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class InvalidConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCodeField;
        
        private uint FlashVersionField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCode
        {
            get
            {
                return this.ConsoleIDWithSCodeField;
            }
            set
            {
                this.ConsoleIDWithSCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint FlashVersion
        {
            get
            {
                return this.FlashVersionField;
            }
            set
            {
                this.FlashVersionField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupSummaryForConsole", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupSummaryForConsole : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCodeField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupSummary[] GroupsField;
        
        private xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome OutcomeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.ConsoleInfo ConsoleIDWithSCode
        {
            get
            {
                return this.ConsoleIDWithSCodeField;
            }
            set
            {
                this.ConsoleIDWithSCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupSummary[] Groups
        {
            get
            {
                return this.GroupsField;
            }
            set
            {
                this.GroupsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.betamanagement.contracts.V4.GroupMembershipChangeOutcome Outcome
        {
            get
            {
                return this.OutcomeField;
            }
            set
            {
                this.OutcomeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GroupUpdate", Namespace="http://xonline.mix.betamanagement.contracts/V4")]
    public partial class GroupUpdate : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string GroupNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string GroupName
        {
            get
            {
                return this.GroupNameField;
            }
            set
            {
                this.GroupNameField = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\MixBetaManagementV1.svc.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;

using xonline.mix.common;
using xonline.server.webcache.common;
using xonline.mix.betamanagement.contract;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.mix.betamanagement.service
{
    // NOTE: If you change the class name "MixBetaManagement" here, you must also update the reference to "MixBetaManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixBetaManagementV1 : IMixBetaManagementV1
    {
        public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignReleaseToGroupApiName, "V1");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"BaseVersion", "FlashVersion", "SOM", "SM", "Group", "TitleID", "UpgradePaths"});
                logHelper.SetHexField("BaseVersion", baseVersion);
                logHelper.SetHexField("FlashVersion", currentFlashVersion);
                logHelper.SetField("SOM", systemOnlineManifest);
                logHelper.SetField("SM", SystemManifest);
                logHelper.SetField("Group", group);
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetField("UpgradePaths", addUpgradePaths);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignReleaseToGroupApiName);
                BetaManager.GetInstance().AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths);
            });
        }

        public bool IsTitleVersionPropped(uint titleID, uint version)
        {
            bool result=true;

            LogHelper logHelper=new LogHelper(MixBetaManagement.IsTitleVersionProppedApiName, "V1");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "Version", "IsPropped"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("Version", version);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.IsTitleVersionProppedApiName);
                result=BetaManager.GetInstance().IsTitleVersionPropped(titleID, version);

                logHelper.SetField("IsPropped", result);
            });

            return result;
        }

        public IEnumerable<GroupSummaryV1> GetGroups()
        {
            IEnumerable<GroupSummaryV1> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupsApiName, "V1");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Count"});

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupsApiName);
                ret=BetaManager.GetInstance().GetGroups(true /*getFlashInfo*/).Select(x => (GroupSummaryV1)x);

                logHelper.SetCountField("Count", ret);
            });

            return ret;
        }

        public GroupV1 GetGroupDetails(Guid group)
        {
            GroupV1 result=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupDetailsApiName, "V1");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupDetailsApiName);
                result=BetaManager.GetInstance().GetGroupDetails(group);
            });

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\MixBetaManagementV3.svc.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;

using xonline.mix.common;
using xonline.server.webcache.common;
using xonline.mix.betamanagement.contract.v3;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.mix.betamanagement.service.v3
{
    // NOTE: If you change the class name "MixBetaManagement" here, you must also update the reference to "MixBetaManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixBetaManagementV3 : IMixBetaManagementV3
    {
        public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths, ReleaseAppV3[] apps)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignReleaseToGroupApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"BaseVersion", "FlashVersion", "SOM", "SM", "Group", "TitleID", "UpgradePaths", "Apps"});
                logHelper.SetHexField("BaseVersion", baseVersion);
                logHelper.SetHexField("FlashVersion", currentFlashVersion);
                logHelper.SetField("SOM", systemOnlineManifest);
                logHelper.SetField("SM", SystemManifest);
                logHelper.SetField("Group", group);
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetField("UpgradePaths", addUpgradePaths);
                logHelper.SetListField("Apps", apps, 10);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignReleaseToGroupApiName);
                BetaManager.GetInstance().AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths, (apps == null) ? null : ReleaseApp.ConvertAllFromV3((IEnumerable<ReleaseAppV3>)apps));
            });
        }

        public void AssignTitleUpdateToGroup(uint titleID, uint minVersion, uint currentVersion, Guid group)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignTitleUpdateToGroupApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "MinVersion", "CurrentVersion", "Group"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("MinVersion", minVersion);
                logHelper.SetHexField("CurrentVersion", currentVersion);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignTitleUpdateToGroupApiName);
                BetaManager.GetInstance().AssignTitleUpdateToGroup(titleID, minVersion, currentVersion, group);
            });
        }

        public void AssignTitleUpdateToGroups(uint titleID, uint minVersion, uint currentVersion, Guid[] groups, bool noReload)
        {
            LogHelper logHelper = new LogHelper(MixBetaManagement.AssignTitleUpdateToGroupsApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[] { "TitleID", "MinVersion", "CurrentVersion", "Groups", "NoReload" });
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("MinVersion", minVersion);
                logHelper.SetHexField("CurrentVersion", currentVersion);
                logHelper.SetListField("Groups", groups, 10);
                logHelper.SetField("NoReload", noReload);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignTitleUpdateToGroupsApiName);
                BetaManager.GetInstance().AssignTitleUpdateToGroups(titleID, minVersion, currentVersion, groups, noReload);
            });
        }

        public bool IsTitleVersionPropped(uint titleID, uint version)
        {
            bool result=true;

            LogHelper logHelper=new LogHelper(MixBetaManagement.IsTitleVersionProppedApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "Version", "IsPropped"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("Version", version);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.IsTitleVersionProppedApiName);
                result=BetaManager.GetInstance().IsTitleVersionPropped(titleID, version);

                logHelper.SetField("IsPropped", result);
            });

            return result;
        }

        public IEnumerable<GroupSummaryV3> GetGroups()
        {
            IEnumerable<GroupSummaryV3> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupsApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Count"});

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupsApiName);
                ret=BetaManager.GetInstance().GetGroups(false /*getFlashInfo*/).Select(x => (GroupSummaryV3) x);

                logHelper.SetCountField("Count", ret);
            });

            return ret;
        }

        public GroupV3 GetGroupDetails(Guid group)
        {
            GroupV3 result=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupDetailsApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupDetailsApiName);
                result=BetaManager.GetInstance().GetGroupDetails(group);
            });

            return result;
        }

        public IEnumerable<GroupMembershipChangeResultV3> AddConsoleIDsToGroup(string[] consoleIDs, Guid group)
        {
            IEnumerable<GroupMembershipChangeResultV3> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.AddConsoleIDsToGroupApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleIDs", "Group"});
                logHelper.SetListField("ConsoleIDs", consoleIDs, 10);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AddConsoleIDsToGroupApiName);
                ret=BetaManager.GetInstance().AddConsoleIDsToGroup(consoleIDs, group).Select(x => (GroupMembershipChangeResultV3)x);
            });

            return ret;
        }

        public IEnumerable<GroupMembershipChangeResultV3> RemoveConsoleIDsFromGroup(string[] consoleIDs, Guid group)
        {
            IEnumerable<GroupMembershipChangeResultV3> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.RemoveConsoleIDsFromGroupApiName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleIDs", "Group"});
                logHelper.SetListField("ConsoleIDs", consoleIDs, 10);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.RemoveConsoleIDsFromGroupApiName);
                ret=BetaManager.GetInstance().RemoveConsoleIDsFromGroup(consoleIDs, group).Select(x => (GroupMembershipChangeResultV3)x);
            });

            return ret;
        }

        public InvalidConsoleV3[] ValidateBetaGroupConsoles(Guid betaGroup)
        {
            InvalidConsoleV3[] results=new InvalidConsoleV3[0];

            LogHelper logHelper=new LogHelper(MixBetaManagement.ValidateBetaGroupConsolesName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group", "InvalidCount"});
                logHelper.SetField("Group", betaGroup);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.ValidateBetaGroupConsolesName);
                results=Array.ConvertAll(BetaManager.GetInstance().ValidateBetaGroupConsoles(betaGroup), ic => (InvalidConsoleV3)ic);

                logHelper.SetField("InvalidCount", results.Length);
            });

            return results;
        }

        public Guid CreateGroup(string name, string creator)
        {
            Guid result=Guid.Empty;

            LogHelper logHelper=new LogHelper(MixBetaManagement.CreateGroupName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Name", "Creator", "Group"});
                logHelper.SetField("Name", name);
                logHelper.SetField("Creator", creator);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.CreateGroupName);
                result=BetaManager.GetInstance().CreateGroup(name, creator);

                logHelper.SetField("Group", result);
            });

            return result;
        }

        public IEnumerable<string> GetConsoleIDsInGroup(Guid group)
        {
            IEnumerable<string> result=new List<string>();

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetConsoleIDsInGroupName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group", "Count"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetConsoleIDsInGroupName);
                result=BetaManager.GetInstance().GetConsoleIDsInGroup(group);

                logHelper.SetCountField("Count", result);
            });

            return result;
        }

        public IEnumerable<GroupSummaryForConsoleV3> GetGroupsForConsoleIDs(string []consoleIDs)
        {
            IEnumerable<GroupSummaryForConsoleV3> result=new List<GroupSummaryForConsoleV3>();

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupsForConsoleIDsName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleIDs"});
                logHelper.SetListField("ConsoleIDs", consoleIDs, 10);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupsForConsoleIDsName);
                result=GroupSummaryForConsole.ConvertAllV3(BetaManager.GetInstance().GetGroupsForConsoleIDs(consoleIDs));
            });

            return result;
        }

        public void RemoveGroup(Guid group)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.RemoveGroupName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.RemoveGroupName);
                BetaManager.GetInstance().RemoveGroup(group);
            });
        }

        public void UpdateGroup(Guid group, GroupUpdateV3 updates)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.UpdateGroupName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.UpdateGroupName);
                BetaManager.GetInstance().UpdateGroup(group, updates);
            });
        }

        public IEnumerable<GroupMembershipChangeResultV3> MigrateConsoleIDsToGroup (string[] consoleIDs, Guid fromGroup, Guid toGroup)
        {
            IEnumerable<GroupMembershipChangeResultV3> result=new GroupMembershipChangeResultV3[0];

            LogHelper logHelper=new LogHelper(MixBetaManagement.MigrateConsoleIDsToGroupName, "V3");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleIDs", "FromGroup", "ToGroup"});
                logHelper.SetListField("ConsoleIDs", consoleIDs, 10);
                logHelper.SetField("FromGroup", fromGroup);
                logHelper.SetField("ToGroup", toGroup);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.MigrateConsoleIDsToGroupName);
                IEnumerable<GroupMembershipChangeResult> intermediate=BetaManager.GetInstance().MigrateConsoleIDsToGroup(consoleIDs, fromGroup, toGroup);

                if (intermediate!=null)
                {
                    result=GroupMembershipChangeResult.ConvertAllV3(intermediate);
                }
            });

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\Compression.cs ===
using System;
using System.IO;
using System.IO.Compression;
using System.Text;

namespace xonline.mix.common
{
    public class Gzip
    {
        /// <summary>
        /// Gzip compresses the given string and returns the compressed bytes
        /// </summary>
        /// <param name="uncompressedString">Uncompressed string to be compressed</param>
        /// <returns>Gzip compressed byte array</returns>
        public static byte[] Compress(string uncompressedString)
        {
            //
            // This UnicodeEncoding is used because it's the same one
            // the SPA compiler uses to compress the XLAST and append
            // it into a SPA section.  It's proven to accurately serialize
            // and deserialize correctly in that context, so we'll steal it.
            //
            byte[] bytes = new UnicodeEncoding(
                    false,                  // bigEndian
                    true,                   // byteOrderMark
                    true).                  // throwOnInvalidBytes
                    GetBytes(uncompressedString);

            MemoryStream memoryStream = new MemoryStream();

            GZipStream gzipStream = new GZipStream(memoryStream, CompressionMode.Compress, true);
            gzipStream.Write(bytes, 0, bytes.Length);
            gzipStream.Close();
            
            byte[] compressedBytes = new byte[memoryStream.Length];
            memoryStream.Position = 0;
            memoryStream.Read(compressedBytes, 0, (int)memoryStream.Length);

            return compressedBytes;
        }

        /// <summary>
        /// Gzip decompresses the given bytes and returns the result as a string
        /// </summary>
        /// <param name="compressedBytes">Gzip compressed bytes</param>
        /// <returns>Gzip decompressed string</returns>
        public static string Decompress(byte[] compressedBytes)
        {
            MemoryStream memoryStream = new MemoryStream(compressedBytes);

            const int bufferSize = 4096;
            byte[] xmlBytes = new byte[bufferSize];
            int bytesRead = 0;

            StringBuilder builder = new StringBuilder();

            using (GZipStream gzipStream = new GZipStream(memoryStream, CompressionMode.Decompress))
           {
                while (true)
                {
                    bytesRead = gzipStream.Read(xmlBytes, 0, bufferSize);

                    if (bytesRead == 0)
                    {
                        break;
                    }

                    builder.Append(new UnicodeEncoding(
                        false,                  // bigEndian
                        true,                   // byteOrderMark
                        true).                  // throwOnInvalidBytes
                        GetString(xmlBytes, 0, bytesRead));
                }
            }

            return builder.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\Database.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.mix.common
{
    public class MixUtilities
    {
        public static void ResetFrontDoor(string serverInterface, string process, string component, string command, int timeout)
        {
            ResetFrontDoor(serverInterface, process, component, command, timeout, true);
        }

        /// <summary>
        /// Reset the front doors after done propping
        /// </summary>
        /// <param name="serverInterface">check xonline.common.config.Interface</param>
        /// <param name="process"></param>
        /// <param name="component">name of the process. xkdc, xpnf etc.</param>
        /// <param name="command">"reload or some other.</param>
        /// <param name="timeout">time out period</param>
        /// <param name="waitForCompletion">wait for completion or fire and forget</param>
        public static void ResetFrontDoor(string serverInterface, string process, string component, string command, int timeout, bool waitForCompletion)
        {
            bool success = true;

            //need to loop through each of the servers in the Virtual Interface...
            string[] serverList = Config.GetServerListByInterface(serverInterface);
            ManualResetEvent[] rgEvents = new ManualResetEvent[serverList.Length];
            for (int iServer = 0; iServer < serverList.Length; iServer++)
            {
                rgEvents[iServer] = new ManualResetEvent(false);
                ThreadPool.QueueUserWorkItem(delegate(Object o) 
                {
                    int index = (int)o;
                    
                    string server = serverList[index];
                    string[] responses = null;
                    int result = 0;
                    
                    try
                    {
                        // Since we are executing XMGMT commands, rather than use the caller's Interface spec,
                        // we will retrieve the IP for the xmgmtsrv Interface.  If,
                        IInterfaceInfo svrIFaceInfo = Config.GetInterface(server, Interface.xmgmtsrv);

                        XomAdminSession xmgmt = new XomAdminSession(svrIFaceInfo.IPAddress);
                        xmgmt.SendCommand(process, component, command, timeout, out responses, out result);
                        if (result != 0)
                        {
                            success = false;
                            Xom.NtEvent(XEvent.Id.MGMT_ADMIN_COMMAND, "Fail to reload frontdoor. Server: {0} Component: {1} with hr = {2}", server, component, (HResult) (uint) result);
                        }
                    }
                    catch (Exception e)
                    {
                        success = false;
                        Xom.NtEvent(XEvent.Id.MGMT_ADMIN_COMMAND, e, "Fail to reload frontdoor. Server: {0} Component: {1}", server, component);
                    }

                    rgEvents[index].Set();
                },
                iServer);
            }

            if (waitForCompletion)
            {
                for (int iServer = 0; iServer < serverList.Length; iServer++)
                {
                    rgEvents[iServer].WaitOne();
                }
            }
            
            if (success == false)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_FRONT_DOOR_RESET_ERROR, XEvent.Id.MIX_COMMON_FRONT_DOOR_RESET_ERROR, "Front Door Reset failure occurred.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\MixBetaManagementV4.svc.cs ===
using System;
using System.Collections.Generic;
using System.Linq;
using System.ServiceModel;
using System.ServiceModel.Activation;

using xonline.mix.common;
using xonline.server.webcache.common;
using xonline.mix.betamanagement.contract.v4;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.mix.betamanagement.service.v4
{
    // NOTE: If you change the class name "MixBetaManagement" here, you must also update the reference to "MixBetaManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixBetaManagementV4 : IMixBetaManagementV4
    {
        public void AssignReleaseToGroup(uint baseVersion, uint currentFlashVersion, string systemOnlineManifest, string SystemManifest, Guid group, uint titleID, bool addUpgradePaths, ReleaseAppV4[] apps)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignReleaseToGroupApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"BaseVersion", "FlashVersion", "SOM", "SM", "Group", "TitleID", "UpgradePaths", "Apps"});
                logHelper.SetHexField("BaseVersion", baseVersion);
                logHelper.SetHexField("FlashVersion", currentFlashVersion);
                logHelper.SetField("SOM", systemOnlineManifest);
                logHelper.SetField("SM", SystemManifest);
                logHelper.SetField("Group", group);
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetField("UpgradePaths", addUpgradePaths);
                logHelper.SetListField("Apps", apps, 10);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignReleaseToGroupApiName);
                BetaManager.GetInstance().AssignReleaseToGroup(baseVersion, currentFlashVersion, systemOnlineManifest, SystemManifest, group, titleID, addUpgradePaths, (apps == null) ? null : ReleaseApp.ConvertAllFromV4((IEnumerable<ReleaseAppV4>)apps));
            });
        }

        public void AssignTitleUpdateToGroup(uint titleID, uint minVersion, uint currentVersion, Guid group)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.AssignTitleUpdateToGroupApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "MinVersion", "CurrentVersion", "Group"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("MinVersion", minVersion);
                logHelper.SetHexField("CurrentVersion", currentVersion);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignTitleUpdateToGroupApiName);
                BetaManager.GetInstance().AssignTitleUpdateToGroup(titleID, minVersion, currentVersion, group);
            });
        }

        public void AssignTitleUpdateToGroups(uint titleID, uint minVersion, uint currentVersion, Guid[] groups, bool noReload)
        {
            LogHelper logHelper = new LogHelper(MixBetaManagement.AssignTitleUpdateToGroupsApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[] { "TitleID", "MinVersion", "CurrentVersion", "Groups", "NoReload" });
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("MinVersion", minVersion);
                logHelper.SetHexField("CurrentVersion", currentVersion);
                logHelper.SetListField("Groups", groups, 10);
                logHelper.SetField("NoReload", noReload);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AssignTitleUpdateToGroupsApiName);
                BetaManager.GetInstance().AssignTitleUpdateToGroups(titleID, minVersion, currentVersion, groups, noReload);
            });
        }

        public bool IsTitleVersionPropped(uint titleID, uint version)
        {
            bool result=true;

            LogHelper logHelper=new LogHelper(MixBetaManagement.IsTitleVersionProppedApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"TitleID", "Version", "IsPropped"});
                logHelper.SetHexField("TitleID", titleID);
                logHelper.SetHexField("Version", version);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.IsTitleVersionProppedApiName);
                result=BetaManager.GetInstance().IsTitleVersionPropped(titleID, version);

                logHelper.SetField("IsPropped", result);
            });

            return result;
        }

        public IEnumerable<GroupSummaryV4> GetGroups()
        {
            IEnumerable<GroupSummaryV4> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupsApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Count"});

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupsApiName);
                ret=BetaManager.GetInstance().GetGroups(false /*getFlashInfo*/).Select(x => (GroupSummaryV4) x);

                logHelper.SetCountField("Count", ret);
            });

            return ret;
        }

        public GroupV4 GetGroupDetails(Guid group)
        {
            GroupV4 result=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupDetailsApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupDetailsApiName);
                result=BetaManager.GetInstance().GetGroupDetails(group);
            });

            return result;
        }

        public IEnumerable<GroupMembershipChangeResultV4> AddConsoleInfosToGroup(ConsoleInfoV4[] consoleInfos, Guid group)
        {
            IEnumerable<GroupMembershipChangeResultV4> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.AddConsoleInfosToGroupApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleInfos", "Group"});
                logHelper.SetListField("ConsoleInfos", consoleInfos, 10);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.AddConsoleInfosToGroupApiName);
                ret=BetaManager.GetInstance().AddConsoleIDsToGroup( 
                    ((consoleInfos == null) ? null : ConsoleInfo.ConvertAllFromV4((IEnumerable<ConsoleInfoV4>) consoleInfos)),
                    group).Select(x => (GroupMembershipChangeResultV4)x);
            });

            return ret;
        }

        public IEnumerable<GroupMembershipChangeResultV4> RemoveConsoleInfosFromGroup(ConsoleInfoV4[] consoleInfos, Guid group)
        {
            IEnumerable<GroupMembershipChangeResultV4> ret=null;

            LogHelper logHelper=new LogHelper(MixBetaManagement.RemoveConsoleInfosFromGroupApiName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleInfos", "Group"});
                logHelper.SetListField("ConsoleInfos", consoleInfos, 10);
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.RemoveConsoleInfosFromGroupApiName);
                ret=BetaManager.GetInstance().RemoveConsoleIDsFromGroup(
                    ((consoleInfos == null) ? null : ConsoleInfo.ConvertAllFromV4((IEnumerable<ConsoleInfoV4>) consoleInfos)),
                    group).Select(x => (GroupMembershipChangeResultV4)x);
            });

            return ret;
        }

        public InvalidConsoleV4[] ValidateBetaGroupConsoles(Guid betaGroup)
        {
            InvalidConsoleV4[] results=new InvalidConsoleV4[0];

            LogHelper logHelper=new LogHelper(MixBetaManagement.ValidateBetaGroupConsolesName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group", "InvalidCount"});
                logHelper.SetField("Group", betaGroup);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.ValidateBetaGroupConsolesName);
                results=Array.ConvertAll(BetaManager.GetInstance().ValidateBetaGroupConsoles(betaGroup), ic => (InvalidConsoleV4)ic);

                logHelper.SetField("InvalidCount", results.Length);
            });

            return results;
        }

        public Guid CreateGroup(string name, string creator)
        {
            Guid result=Guid.Empty;

            LogHelper logHelper=new LogHelper(MixBetaManagement.CreateGroupName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Name", "Creator", "Group"});
                logHelper.SetField("Name", name);
                logHelper.SetField("Creator", creator);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.CreateGroupName);
                result=BetaManager.GetInstance().CreateGroup(name, creator);

                logHelper.SetField("Group", result);
            });

            return result;
        }

        public IEnumerable<ConsoleInfoV4> GetConsoleInfosInGroup(Guid group)
        {
            IEnumerable<ConsoleInfoV4> result=new List<ConsoleInfoV4>();

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetConsoleInfosInGroupName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group", "Count"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetConsoleInfosInGroupName);
                result=ConsoleInfo.ConvertAllToV4( BetaManager.GetInstance().GetConsoleInfosInGroup(group) );

                logHelper.SetCountField("Count", result);
            });

            return result;
        }

        public IEnumerable<GroupSummaryForConsoleV4> GetGroupsForConsoleInfos(ConsoleInfoV4[] consoleInfos)
        {
            IEnumerable<GroupSummaryForConsoleV4> result=new List<GroupSummaryForConsoleV4>();

            LogHelper logHelper=new LogHelper(MixBetaManagement.GetGroupsForConsoleInfosName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleInfos"});
                logHelper.SetListField("ConsoleInfos", consoleInfos, 10);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.GetGroupsForConsoleInfosName);
                result=GroupSummaryForConsole.ConvertAllV4(BetaManager.GetInstance().GetGroupsForConsoleIDs(
                    (consoleInfos == null) ? null : ConsoleInfo.ConvertAllFromV4((IEnumerable<ConsoleInfoV4>) consoleInfos)
                    ));
            });

            return result;
        }

        public void RemoveGroup(Guid group)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.RemoveGroupName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.RemoveGroupName);
                BetaManager.GetInstance().RemoveGroup(group);
            });
        }

        public void UpdateGroup(Guid group, GroupUpdateV4 updates)
        {
            LogHelper logHelper=new LogHelper(MixBetaManagement.UpdateGroupName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"Group"});
                logHelper.SetField("Group", group);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.UpdateGroupName);
                BetaManager.GetInstance().UpdateGroup(group, updates);
            });
        }

        public IEnumerable<GroupMembershipChangeResultV4> MigrateConsoleInfosToGroup (ConsoleInfoV4[] consoleInfos, Guid fromGroup, Guid toGroup)
        {
            IEnumerable<GroupMembershipChangeResultV4> result=new GroupMembershipChangeResultV4[0];

            LogHelper logHelper=new LogHelper(MixBetaManagement.MigrateConsoleInfosToGroupName, "V4");
            logHelper.ExecuteAndLog(delegate()
            {
                logHelper.SetFieldOrder(new string[]{"ConsoleInfos", "FromGroup", "ToGroup"});
                logHelper.SetListField("ConsoleInfos", consoleInfos, 10);
                logHelper.SetField("FromGroup", fromGroup);
                logHelper.SetField("ToGroup", toGroup);

                MixBetaManagementSvcUtil.CheckAPI(MixBetaManagement.MigrateConsoleInfosToGroupName);
                IEnumerable<GroupMembershipChangeResult> intermediate=BetaManager.GetInstance().MigrateConsoleIDsToGroup(
                    ((consoleInfos == null) ? null : ConsoleInfo.ConvertAllFromV4((IEnumerable<ConsoleInfoV4>) consoleInfos)),
                    fromGroup, 
                    toGroup
                    );

                if (intermediate!=null)
                {
                    result=GroupMembershipChangeResult.ConvertAllV4(intermediate);
                }
            });

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\ApiValidation.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using xonline.common.service;
using xonline.server.webcache.common;

namespace xonline.mix.common
{
	public class ApiValidation
	{
        /// <summary>
        /// Checks that the HTTP Headers added by WebSG for Partner Information are valid for this API
        /// </summary>
        public static void Validate(string apiName)
        {
            try
            {
                Utilities.Instance.CheckAPI(apiName);
            }
            catch (XboxWebInternalException ex)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERINVALID, string.Format("Partner Validation did not pass, WebSG header information missing {0}", ex.Message), false);
            }
            catch (XboxWebException ex)
            {
                //catches incorrect IP information
                throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERINVALID, string.Format("Partner Validation did not pass, WebSG header information missing {0}", ex.Message), false);
            }
            catch (KeyNotFoundException ex)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERMISSING, string.Format("Partner Validation did not pass, WebSG header information invalid {0}", ex.Message), false);
            }
        }

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\BetaManagement\Service\VersionNeutralDataContract.cs ===
/*--------------------------------------------------------------------------
    This file provides a version neutral data contract for the mix
    beta management APIs. This any versioned data contracts should have
    a corresponding entry here. The point is this is so that our
    implementations don't rely on a specific data contract--they
    can all share a common implementation and then convert them
    only at the very end of the call.

    NOTE: There is an obvious potential performance issue here. We
    will need to monitor and measure that.
--------------------------------------------------------------------------*/

using System;
using System.Collections.Generic;
using System.Linq;

using xonline.mix.betamanagement.contract;
using xonline.mix.betamanagement.contract.v2;
using xonline.mix.betamanagement.contract.v3;
using xonline.mix.betamanagement.contract.v4;


namespace xonline.mix.betamanagement.service
{
    public class Group
    {
        public GroupSummary Summary {get; set;}
        public uint FlashVersion {get; set;}
        public IEnumerable<ReleaseInfo> RelInfos {get; set;}
        public IEnumerable<UpgradePath> Titles {get; set;}

        // Sigh. Sometimes I really miss templates.
        public static implicit operator GroupV1(Group g)
        {
            GroupV1 v1 = new GroupV1();
            v1.Summary = g.Summary;
            v1.RelInfos = ReleaseInfo.ConvertAllV1(g.RelInfos);
            v1.Titles = UpgradePath.ConvertAllV1(g.Titles);
            return v1;
        }

        public static implicit operator GroupV2(Group g)
        {
            GroupV2 v2 = new GroupV2();
            v2.Summary = g.Summary;
            v2.FlashVersion = g.FlashVersion;
            v2.RelInfos = ReleaseInfo.ConvertAllV2(g.RelInfos);
            v2.Titles = UpgradePath.ConvertAllV2(g.Titles);
            return v2;
        }

        public static implicit operator GroupV3(Group g)
        {
            GroupV3 v3 = new GroupV3();
            v3.Summary = g.Summary;
            v3.FlashVersion = g.FlashVersion;
            v3.RelInfos = ReleaseInfo.ConvertAllV3(g.RelInfos);
            v3.Titles = UpgradePath.ConvertAllV3(g.Titles);
            return v3;
        }

        public static implicit operator GroupV4(Group g)
        {
            GroupV4 v4 = new GroupV4();
            v4.Summary = g.Summary;
            v4.FlashVersion = g.FlashVersion;
            v4.RelInfos = ReleaseInfo.ConvertAllV4(g.RelInfos);
            v4.Titles = UpgradePath.ConvertAllV4(g.Titles);
            return v4;
        }
    }


    public class GroupSummary
    {
        public string Name {get; set;}
        public Guid GroupGuid {get; set;}
        public string Creator {get; set;}
        public uint FlashVersion {get; set;}
        public DateTime Created {get; set;}

        // Sigh. Sometimes I really miss templates.
        public static implicit operator GroupSummaryV1(GroupSummary gs)
        {
            GroupSummaryV1 v1 = new GroupSummaryV1();
            v1.Name = gs.Name;
            v1.GroupGuid = gs.GroupGuid;
            v1.Creator = gs.Creator;
            v1.FlashVersion = gs.FlashVersion;
            v1.Created = gs.Created;
            return v1;
        }

        public static implicit operator GroupSummaryV2(GroupSummary gs)
        {
            GroupSummaryV2 v2 = new GroupSummaryV2();
            v2.Name = gs.Name;
            v2.GroupGuid = gs.GroupGuid;
            v2.Creator = gs.Creator;
            v2.Created = gs.Created;
            return v2;
        }

        public static implicit operator GroupSummaryV3(GroupSummary gs)
        {
            GroupSummaryV3 v3 = new GroupSummaryV3();
            v3.Name = gs.Name;
            v3.GroupGuid = gs.GroupGuid;
            v3.Creator = gs.Creator;
            v3.Created = gs.Created;
            return v3;
        }

        public static implicit operator GroupSummaryV4(GroupSummary gs)
        {
            GroupSummaryV4 v4 = new GroupSummaryV4();
            v4.Name = gs.Name;
            v4.GroupGuid = gs.GroupGuid;
            v4.Creator = gs.Creator;
            v4.Created = gs.Created;
            return v4;
        }

        public static IEnumerable<GroupSummaryV1> ConvertAllV1(IEnumerable<GroupSummary> source)
        {
            List<GroupSummaryV1> list = new List<GroupSummaryV1>();
            foreach (GroupSummary g in source)
            {
                list.Add((GroupSummaryV1) g);
            }
            return list;
        }

        public static IEnumerable<GroupSummaryV2> ConvertAllV2(IEnumerable<GroupSummary> source)
        {
            List<GroupSummaryV2> list = new List<GroupSummaryV2>();
            foreach (GroupSummary g in source)
            {
                list.Add((GroupSummaryV2) g);
            }
            return list;
        }

        public static IEnumerable<GroupSummaryV3> ConvertAllV3(IEnumerable<GroupSummary> source)
        {
            List<GroupSummaryV3> list = new List<GroupSummaryV3>();
            foreach (GroupSummary g in source)
            {
                list.Add((GroupSummaryV3) g);
            }
            return list;
        }

        public static IEnumerable<GroupSummaryV4> ConvertAllV4(IEnumerable<GroupSummary> source)
        {
            List<GroupSummaryV4> list = new List<GroupSummaryV4>();
            foreach (GroupSummary g in source)
            {
                list.Add((GroupSummaryV4) g);
            }
            return list;
        }
    }

    public class GroupSummaryForConsole
    {
        public ConsoleInfo ConsoleIDWithSCode {get; set;}
        public GroupMembershipChangeOutcome Outcome {get; set;}
        public IEnumerable<GroupSummary> Groups {get; set;}

        // Sigh. Sometimes I really miss templates.
        public static implicit operator GroupSummaryForConsoleV3(GroupSummaryForConsole gsfc)
        {
            GroupSummaryForConsoleV3 v3 = new GroupSummaryForConsoleV3();
            v3.ConsoleID = gsfc.ConsoleIDWithSCode.ConsoleID;
            if (gsfc.Outcome == GroupMembershipChangeOutcome.MachineDuplicate)
            {
                v3.Outcome = GroupMembershipChangeOutcomeV3.MachineAccountNotExist;
            }
            else
            {
                v3.Outcome = (GroupMembershipChangeOutcomeV3)gsfc.Outcome;
            }
            v3.Groups = GroupSummary.ConvertAllV3(gsfc.Groups);

            return v3;
        }

        public static IEnumerable<GroupSummaryForConsoleV3> ConvertAllV3(IEnumerable<GroupSummaryForConsole> source)
        {
            List<GroupSummaryForConsoleV3> list = new List<GroupSummaryForConsoleV3>();
            foreach (GroupSummaryForConsole g in source)
            {
                list.Add((GroupSummaryForConsoleV3)g);
            }
            return list;
        }

        public static implicit operator GroupSummaryForConsoleV4(GroupSummaryForConsole gsfc)
        {
            GroupSummaryForConsoleV4 v4 = new GroupSummaryForConsoleV4();

            v4.ConsoleIDWithSCode = new ConsoleInfoV4();
            v4.ConsoleIDWithSCode.ConsoleID = gsfc.ConsoleIDWithSCode.ConsoleID;
            v4.ConsoleIDWithSCode.SCode = gsfc.ConsoleIDWithSCode.SCode;
            v4.Outcome = (GroupMembershipChangeOutcomeV4)gsfc.Outcome;
            v4.Groups = GroupSummary.ConvertAllV4(gsfc.Groups);

            return v4;
        }

        public static IEnumerable<GroupSummaryForConsoleV4> ConvertAllV4(IEnumerable<GroupSummaryForConsole> source)
        {
            List<GroupSummaryForConsoleV4> list = new List<GroupSummaryForConsoleV4>();
            foreach (GroupSummaryForConsole g in source)
            {
                list.Add((GroupSummaryForConsoleV4)g);
            }
            return list;
        }
    }

    public class ReleaseApp
    {
        public string FileName { get; set; }
        public string FriendlyName { get; set; }
        public bool Online { get; set; }
        public string Version { get; set; }
        public string Manifest { get; set; }


        public static implicit operator ReleaseApp(ReleaseAppV3 v3)
        {
            if (v3 == null)
            {
                return null;
            }

            ReleaseApp app = new ReleaseApp();
            app.FileName = v3.FileName;
            app.FriendlyName = v3.FriendlyName;
            app.Online = v3.Online;
            app.Version = v3.Version;
            app.Manifest = v3.Manifest;

            return app;
        }

        public static IEnumerable<ReleaseApp> ConvertAllFromV3(IEnumerable<ReleaseAppV3> source)
        {
            foreach (ReleaseAppV3 app in source)
            {
                yield return (ReleaseApp)app;
            }
        }

        public static implicit operator ReleaseApp(ReleaseAppV4 v4)
        {
            if (v4 == null)
            {
                return null;
            }

            ReleaseApp app = new ReleaseApp();
            app.FileName = v4.FileName;
            app.FriendlyName = v4.FriendlyName;
            app.Online = v4.Online;
            app.Version = v4.Version;
            app.Manifest = v4.Manifest;

            return app;
        }

        public static IEnumerable<ReleaseApp> ConvertAllFromV4(IEnumerable<ReleaseAppV4> source)
        {
            foreach (ReleaseAppV4 app in source)
            {
                yield return (ReleaseApp)app;
            }
        }
    }

    public class ReleaseInfo
    {
        public string SMRevision {get; set;}
        public string SOMRevision {get; set;}
        public short FlashVersion {get; set;}
        public short FlashQfe {get; set;}



        // Sigh. Sometimes I really miss templates.
        public static implicit operator ReleaseInfoV1(ReleaseInfo ri)
        {
            ReleaseInfoV1 v1 = new ReleaseInfoV1();
            v1.SMRevision = ri.SMRevision;
            v1.SOMRevision = ri.SOMRevision;
            v1.FlashVersion = ri.FlashVersion;
            v1.FlashQfe = ri.FlashQfe;
            return v1;
        }

        public static implicit operator ReleaseInfoV2(ReleaseInfo ri)
        {
            ReleaseInfoV2 v2 = new ReleaseInfoV2();
            v2.SMRevision = ri.SMRevision;
            v2.SOMRevision = ri.SOMRevision;
            v2.FlashVersion = ri.FlashVersion;
            v2.FlashQfe = ri.FlashQfe;
            return v2;
        }

        public static implicit operator ReleaseInfoV3(ReleaseInfo ri)
        {
            ReleaseInfoV3 v3 = new ReleaseInfoV3();
            v3.SMRevision = ri.SMRevision;
            v3.SOMRevision = ri.SOMRevision;
            v3.FlashVersion = ri.FlashVersion;
            v3.FlashQfe = ri.FlashQfe;
            return v3;
        }

        public static implicit operator ReleaseInfoV4(ReleaseInfo ri)
        {
            ReleaseInfoV4 v4 = new ReleaseInfoV4();
            v4.SMRevision = ri.SMRevision;
            v4.SOMRevision = ri.SOMRevision;
            v4.FlashVersion = ri.FlashVersion;
            v4.FlashQfe = ri.FlashQfe;
            return v4;
        }

        public static IEnumerable<ReleaseInfoV1> ConvertAllV1(IEnumerable<ReleaseInfo> source)
        {
            List<ReleaseInfoV1> list = new List<ReleaseInfoV1>();
            foreach (ReleaseInfo ri in source)
            {
                list.Add((ReleaseInfoV1) ri);
            }
            return list;
        }

        public static IEnumerable<ReleaseInfoV2> ConvertAllV2(IEnumerable<ReleaseInfo> source)
        {
            List<ReleaseInfoV2> list = new List<ReleaseInfoV2>();
            foreach (ReleaseInfo ri in source)
            {
                list.Add((ReleaseInfoV2) ri);
            }
            return list;
        }

        public static IEnumerable<ReleaseInfoV3> ConvertAllV3(IEnumerable<ReleaseInfo> source)
        {
            List<ReleaseInfoV3> list = new List<ReleaseInfoV3>();
            foreach (ReleaseInfo ri in source)
            {
                list.Add((ReleaseInfoV3) ri);
            }
            return list;
        }

        public static IEnumerable<ReleaseInfoV4> ConvertAllV4(IEnumerable<ReleaseInfo> source)
        {
            List<ReleaseInfoV4> list = new List<ReleaseInfoV4>();
            foreach (ReleaseInfo ri in source)
            {
                list.Add((ReleaseInfoV4) ri);
            }
            return list;
        }
    }


    public class UpgradePath
    {
        public uint TitleId {get; set;}
        public PlatformType ConsoleType { get; set; }
        public uint BaseVersion {get; set;}
        public uint UpgradeVersion {get; set;}

        // Sigh. Sometimes I really miss templates.
        public static implicit operator UpgradePathV1(UpgradePath up)
        {
            UpgradePathV1 v1 = new UpgradePathV1();
            v1.TitleId = up.TitleId;
            v1.ConsoleType = (PlatformTypeV1) up.ConsoleType;
            v1.BaseVersion = up.BaseVersion;
            v1.UpgradeVersion = up.UpgradeVersion;
            return v1;
        }

        public static implicit operator UpgradePathV2(UpgradePath up)
        {
            UpgradePathV2 v2 = new UpgradePathV2();
            v2.TitleId = up.TitleId;
            v2.ConsoleType = (PlatformTypeV2) up.ConsoleType;
            v2.BaseVersion = up.BaseVersion;
            v2.UpgradeVersion = up.UpgradeVersion;
            return v2;
        }

        public static implicit operator UpgradePathV3(UpgradePath up)
        {
            UpgradePathV3 v3 = new UpgradePathV3();
            v3.TitleId = up.TitleId;
            v3.ConsoleType = (PlatformTypeV3) up.ConsoleType;
            v3.BaseVersion = up.BaseVersion;
            v3.UpgradeVersion = up.UpgradeVersion;
            return v3;
        }

        public static implicit operator UpgradePathV4(UpgradePath up)
        {
            UpgradePathV4 v4 = new UpgradePathV4();
            v4.TitleId = up.TitleId;
            v4.ConsoleType = (PlatformTypeV4) up.ConsoleType;
            v4.BaseVersion = up.BaseVersion;
            v4.UpgradeVersion = up.UpgradeVersion;
            return v4;
        }

        public static IEnumerable<UpgradePathV1> ConvertAllV1(IEnumerable<UpgradePath> source)
        {
            List<UpgradePathV1> list = new List<UpgradePathV1>();
            foreach (UpgradePath up in source)
            {
                list.Add((UpgradePathV1) up);
            }
            return list;
        }

        public static IEnumerable<UpgradePathV2> ConvertAllV2(IEnumerable<UpgradePath> source)
        {
            List<UpgradePathV2> list = new List<UpgradePathV2>();
            foreach (UpgradePath up in source)
            {
                list.Add((UpgradePathV2) up);
            }
            return list;
        }

        public static IEnumerable<UpgradePathV3> ConvertAllV3(IEnumerable<UpgradePath> source)
        {
            List<UpgradePathV3> list = new List<UpgradePathV3>();
            foreach (UpgradePath up in source)
            {
                list.Add((UpgradePathV3) up);
            }
            return list;
        }

        public static IEnumerable<UpgradePathV4> ConvertAllV4(IEnumerable<UpgradePath> source)
        {
            List<UpgradePathV4> list = new List<UpgradePathV4>();
            foreach (UpgradePath up in source)
            {
                list.Add((UpgradePathV4) up);
            }
            return list;
        }
    }


    public enum PlatformType : byte
    {
        Xbox1 = 0,
        XboxCom = 1,
        Xenon = 2,
        Marketplace = 3,
        PC = 4,
        Mobile = 5,
        WebGames = 6,
    }


    public class InvalidConsole
    {
        public ConsoleInfo ConsoleIDWithSCode {get; set;}
        public uint FlashVersion{get; set;}

        public static implicit operator InvalidConsoleV2(InvalidConsole ic)
        {
            InvalidConsoleV2 v2 = new InvalidConsoleV2();
            v2.ConsoleId = ic.ConsoleIDWithSCode.ConsoleID;
            v2.FlashVersion = ic.FlashVersion;
            return v2;
        }

        public static implicit operator InvalidConsoleV3(InvalidConsole ic)
        {
            InvalidConsoleV3 v3 = new InvalidConsoleV3();
            v3.ConsoleId = ic.ConsoleIDWithSCode.ConsoleID;
            v3.FlashVersion = ic.FlashVersion;
            return v3;
        }

        public static implicit operator InvalidConsoleV4(InvalidConsole ic)
        {
            InvalidConsoleV4 v4 = new InvalidConsoleV4();
            v4.ConsoleIDWithSCode = ic.ConsoleIDWithSCode;
            v4.FlashVersion = ic.FlashVersion;
            return v4;
        }
    }


    public class GroupMembershipChangeResult
    {
        public ConsoleInfo ConsoleIDWithSCode {get; set;}
        public GroupMembershipChangeOutcome Outcome {get; set;}
        public IEnumerable<Guid> ConflictingGroups {get; set;}

        public static implicit operator GroupMembershipChangeResultV2(GroupMembershipChangeResult gcr)
        {
            GroupMembershipChangeResultV2 v2 = new GroupMembershipChangeResultV2();
            v2.ConsoleID = gcr.ConsoleIDWithSCode.ConsoleID;

            // This is a backward compatibility thing.  We didn't have this code then.
            if(gcr.Outcome == GroupMembershipChangeOutcome.MemberAlreadyInGroup)
            {
                v2.Outcome = GroupMembershipChangeOutcomeV2.MemberInOtherGroup;
            }
            else if(gcr.Outcome == GroupMembershipChangeOutcome.MachineDuplicate)
            {
                v2.Outcome = GroupMembershipChangeOutcomeV2.MachineAccountNotExist;
            }
            else
            {
                v2.Outcome = (GroupMembershipChangeOutcomeV2) gcr.Outcome;
            }

            v2.ConflictingGroups = gcr.ConflictingGroups;
            return v2;
        }

        public static implicit operator GroupMembershipChangeResultV3(GroupMembershipChangeResult gcr)
        {
            GroupMembershipChangeResultV3 v3 = new GroupMembershipChangeResultV3();
            v3.ConsoleID = gcr.ConsoleIDWithSCode.ConsoleID;

            if(gcr.Outcome == GroupMembershipChangeOutcome.MachineDuplicate)
            {
                v3.Outcome = GroupMembershipChangeOutcomeV3.MachineAccountNotExist;
            }
            else
            {
                v3.Outcome = (GroupMembershipChangeOutcomeV3) gcr.Outcome;
            }
            v3.ConflictingGroups = gcr.ConflictingGroups;
            return v3;
        }

        public static implicit operator GroupMembershipChangeResultV4(GroupMembershipChangeResult gcr)
        {
            GroupMembershipChangeResultV4 v4 = new GroupMembershipChangeResultV4();
            v4.ConsoleIDWithSCode = new ConsoleInfoV4();
            v4.ConsoleIDWithSCode.ConsoleID = gcr.ConsoleIDWithSCode.ConsoleID;
            v4.ConsoleIDWithSCode.SCode = gcr.ConsoleIDWithSCode.SCode;
            v4.Outcome = (GroupMembershipChangeOutcomeV4) gcr.Outcome;
            v4.ConflictingGroups = gcr.ConflictingGroups;
            return v4;
        }

        public static IEnumerable<GroupMembershipChangeResultV2> ConvertAllV2(IEnumerable<GroupMembershipChangeResult> source)
        {
            List<GroupMembershipChangeResultV2> list = new List<GroupMembershipChangeResultV2>();
            foreach (GroupMembershipChangeResult gmcr in source)
            {
                list.Add((GroupMembershipChangeResultV2) gmcr);
            }
            return list;
        }

        public static IEnumerable<GroupMembershipChangeResultV3> ConvertAllV3(IEnumerable<GroupMembershipChangeResult> source)
        {
            List<GroupMembershipChangeResultV3> list = new List<GroupMembershipChangeResultV3>();
            foreach (GroupMembershipChangeResult gmcr in source)
            {
                list.Add((GroupMembershipChangeResultV3) gmcr);
            }
            return list;
        }

        public static IEnumerable<GroupMembershipChangeResultV4> ConvertAllV4(IEnumerable<GroupMembershipChangeResult> source)
        {
            List<GroupMembershipChangeResultV4> list = new List<GroupMembershipChangeResultV4>();
            foreach (GroupMembershipChangeResult gmcr in source)
            {
                list.Add((GroupMembershipChangeResultV4) gmcr);
            }
            return list;
        }
    }


    public enum GroupMembershipChangeOutcome : byte
    {
        Success = 0,
        MemberInOtherGroup = 1,
        MachineAccountNotExist = 2,
        MachineNotInGroup = 3,
        MemberAlreadyInGroup = 4,
        MachineDuplicate = 5
    }

    public class GroupUpdate
    {
        public string GroupName { get; set; }

        public static implicit operator GroupUpdate(GroupUpdateV3 v3)
        {
            if (v3 == null) return (GroupUpdate) null;

            GroupUpdate gu = new GroupUpdate();
            gu.GroupName = v3.GroupName;
            return gu;
        }

        public static implicit operator GroupUpdate(GroupUpdateV4 v4)
        {
            if (v4 == null) return (GroupUpdate) null;

            GroupUpdate gu = new GroupUpdate();
            gu.GroupName = v4.GroupName;
            return gu;
        }
    }

    public class ConsoleInfo
    {
        public string ConsoleID {get; set;}
        public string SCode {get; set;}

        public static implicit operator ConsoleInfoV4(ConsoleInfo ci)
        {
            if (ci == null) return (ConsoleInfoV4) null;

            ConsoleInfoV4 v4 = new ConsoleInfoV4();
            v4.ConsoleID = ci.ConsoleID;
            v4.SCode = ci.SCode;
            return v4;
        }

        public static IEnumerable<ConsoleInfoV4> ConvertAllToV4(IEnumerable<ConsoleInfo> source)
        {
            foreach (ConsoleInfo ci in source)
            {
                yield return (ConsoleInfoV4)ci;
            }
        }


        public static implicit operator ConsoleInfo(ConsoleInfoV4 v4)
        {
            if (v4 == null) return (ConsoleInfo) null;

            ConsoleInfo ci = new ConsoleInfo();
            ci.ConsoleID = v4.ConsoleID;
            ci.SCode = v4.SCode;
            return ci;
        }

        public static IEnumerable<ConsoleInfo> ConvertAllFromV4(IEnumerable<ConsoleInfoV4> source)
        {
            foreach (ConsoleInfoV4 ci in source)
            {
                yield return (ConsoleInfo)ci;
            }
        }
    }

    public class ConsoleInfoDetailed
    {
        public string  ConsoleID   { get; set; }
        public string  SCode       { get; set; }
        public ulong   MachinePuid { get; set; }

        private byte[] secondaryIdentifier = null;
        public byte[]  SecondaryIdentifier { 
            get { return secondaryIdentifier; }
            set 
            {
                secondaryIdentifier = value;
                if (secondaryIdentifier == null || secondaryIdentifier.Length != 20)
                {
                    SCode = null;
                    return;
                }

                bool bIsNull = true;
                for (int i = 0; i < secondaryIdentifier.Length; ++i)
                {
                    // If the current SecondaryIdentifier byte isn't 00, then by definition
                    // it must be an S-Code
                    if (secondaryIdentifier[i] != 0)
                    {
                        bIsNull = false;
                        break;
                    }
                }

                if (bIsNull == true)
                {
                    SCode = null;
                    return;
                }

                SCode = String.Empty;
                byte bCheckLow = 0;
                byte bCheckHigh = 0;

                for (int i = 0; i < 7; ++i)
                {
                    SCode  += string.Format("{0:X02}", secondaryIdentifier[i]);
                    bCheckLow  += (byte) ( (secondaryIdentifier[i] & 0x0F)     );
                    bCheckHigh += (byte) ( (secondaryIdentifier[i] & 0xF0) >> 4);
                    if (i == 1 || i == 3 || i == 5)
                    {
                        SCode += "-";
                    }

                }
                SCode += string.Format("{0:X02}", ( ((bCheckHigh << 4) & 0xF0) | (bCheckLow & 0x0F) ) ); 
            }
        }

        public static implicit operator ConsoleInfo(ConsoleInfoDetailed cid)
        {
            if (cid == null) return (ConsoleInfo) null;

            ConsoleInfo ci = new ConsoleInfo();

            ci.ConsoleID = cid.ConsoleID;
            ci.SCode     = cid.SCode;

            return ci;
        }

        public static IEnumerable<ConsoleInfo> ConvertAllToConsoleInfo(IEnumerable<ConsoleInfoDetailed> source)
        {
            foreach (ConsoleInfoDetailed cid in source)
            {
                yield return (ConsoleInfo) cid;
            }
        }

        public static implicit operator ConsoleInfoDetailed(ConsoleInfo ci)
        {
            if (ci == null) return (ConsoleInfoDetailed) null;

            ConsoleInfoDetailed cid = new ConsoleInfoDetailed();

            cid.ConsoleID = ci.ConsoleID;
            cid.SCode     = ci.SCode;

            return cid;
        }

        public static IEnumerable<ConsoleInfoDetailed> ConvertAllFromConsoleInfo(IEnumerable<ConsoleInfo> source)
        {
            foreach (ConsoleInfo ci in source)
            {
                yield return (ConsoleInfoDetailed) ci;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\LogHelper.cs ===
using System.Collections;
using System.Collections.Generic;

using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.exceptions;

namespace xonline.mix.common
{
    /// <summary> Helper class for making all MIX API loglines consistant. </summary>
    /// <example>
    /// LogHelper logHelper=new LogHelper("CreateRandomFood", "V3");
    /// logHelper.ExecuteAndLog(delegate()
    /// {
    ///     logHelper.SetFieldOrder(new string[]{"Creator", "ResultingFood"});
    ///     logHelper.SetField("Creator", creator);
    ///
    ///     resultingFood=CreateRandomFood(creator);
    ///
    ///     logHelper.SetField("ResultingFood", resultingFood);
    /// });
    /// </example>
    public class LogHelper
    {
        //Fields common to all requests
        private string apiName;
        private string apiVersion;
        private System.Nullable<HResult> resultCode;

        private System.DateTime timeStart; //used to compute execution time

        //Fields specific to the request
        private string []fieldOrder=new string[0];
        private Dictionary<string, string> fieldData=new Dictionary<string, string>();

        // --

        public LogHelper(string nameOfApi, string versionOfApi)
        {
            apiName=nameOfApi;
            apiVersion=versionOfApi;
            timeStart=System.DateTime.UtcNow;
        }

        /// <summary> Logs an event and returns false if a field that was not in the set field order is passed to it.  Else returns true. </summary>
        private bool EventIfFieldDoesNotExist(string field)
        {
            if (!fieldData.ContainsKey(field))
            {
                Xom.NtEvent(XEvent.Id.MIX_COMMON_INVALID_LOGGING_FIELD, "A MIX API tried to set log data for field "+field+" which is not in the field order list.");
                return false;
            }

            return true;
        }

        /// <summary> Sets the list of fields that should appear in a logline and what order they will appear in.  Any field name not passed to this will not be logged. </summary>
        public void SetFieldOrder(string []fieldList)
        {
            fieldOrder=(string[])fieldList.Clone();
            fieldData.Clear();
            foreach (string s in fieldList)
            {
                fieldData[s]=null;
            }
        }

        /// <summary> Sets a generic piece of data into a logline field. </summary>
        public void SetField(string field, object data)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            fieldData[field]=FormatString(data, int.MaxValue);
        }

        /// <summary> Sets a numeric piece of data formatted as hex into a logline field. </summary>
        public void SetHexField(string field, ulong number)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            fieldData[field]=FormatHex(number, 8);
        }

        /// <summary> Sets a numeric piece of data formatted as hex into a logline field. </summary>
        public void SetHexField(string field, long number)
        {
            SetHexField(field, unchecked((ulong)number));
        }

        /// <summary> Sets a numeric piece of data formatted as hex into a logline field. </summary>
        public void SetHexField(string field, byte []data, int maxBytesToLog)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            fieldData[field]=FormatHex(data, maxBytesToLog);
        }

        /// <summary> Sets the number of entries in the array into a logline field. </summary>
        public void SetCountField(string field, System.Array arr)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            if (arr==null)
            {
                fieldData[field]=null;
                return;
            }

            fieldData[field]=arr.Length.ToString();
        }

        /// <summary> Sets the number of entries in the ienumerable into a logline field. </summary>
        public void SetCountField(string field, IEnumerable ie)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            if (ie==null)
            {
                fieldData[field]=null;
                return;
            }

            int count=0;
            foreach (object o in ie)
            {
                ++count;
            }

            fieldData[field]=count.ToString();
        }

        /// <summary> Sets a list of data to a logline field.  All entries in the list will be converted to a string and separated by a comma.  Entries beyond maxEntriesToLog will be truncated but the number truncated will be logged. </summary>
        public void SetListField(string field, IEnumerable list, int maxEntriesToLog)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            fieldData[field]=FormatList(list, maxEntriesToLog, FormatString, int.MaxValue);
        }

        /// <summary> Sets a list of data to a logline field.  All entries in the list will be converted to a string formatted as hex is possible and separated by a comma.  Entries beyond maxEntriesToLog will be truncated but the number truncated will be logged. </summary>
        public void SetHexListField(string field, IEnumerable list, int maxEntriesToLog, int maxBytesPerEntry)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            fieldData[field]=FormatList(list, maxEntriesToLog, FormatHex, maxBytesPerEntry);
        }

        /// <summary> Sets a string into a logline field, limited it to a specific length. </summary>
        public void SetStringField(string field, string value, int maxBytesToLog)
        {
            if (!EventIfFieldDoesNotExist(field))
            {
                return;
            }

            fieldData[field]=FormatString(value, maxBytesToLog);
        }

        /// <summary> Sets the result code that was returned to the client. </summary>
        public void SetHR(HResult result)
        {
            resultCode=result;
        }

        public delegate void AppCodeDelegate();

        /// <summary> Executes the specified delegate then writes a logline.  This will write a logline even if an exception in thrown by the delegate.  If no exception is thrown the HR logged will be 0 unless the delegate explicitly sets it.  If an XRLException is thrown the HR logged will be taken from that exception.  If any other exception is thrown a ? will be logged for the HR.</summary>
        public void ExecuteAndLog(AppCodeDelegate appCodeToExecute)
        {
            try
            {
                appCodeToExecute();

                if (resultCode==null)
                {
                    SetHR(0);
                }
            }
            catch (System.Exception e)
            {
                SetHR(XblException.GetHResult(e));
                throw;
            }
            finally
            {
                DoLog();
            }
        }

        /// <summary> Formats an object directly as a string. </summary>
        private string FormatString(object o, int maxBytesToLog)
        {
            if (o==null)
            {
                return null;
            }
            else
            {
                string origString=o.ToString();
                if (origString==null)
                {
                    return null;
                }
                else if (origString.Length>maxBytesToLog)
                {
                    string s=origString.Substring(0, maxBytesToLog);
                    s+="...(";
                    s+=(origString.Length-maxBytesToLog).ToString();
                    s+=" bytes truncated)...";
                    return s;
                }
                return origString;
            }
        }

        /// <summary> Formats an object as hex if possible, else as a string. </summary>
        private string FormatHex(object o, int maxBytesToLog)
        {
            if (o==null)
            {
                return null;
            }
            else if (o is byte || o is sbyte || o is ushort || o is short || o is uint || o is int || o is ulong || o is long)
            {
                return string.Format("0x{0:X}", o);
            }
            else if (o is byte[])
            {
                byte []data=(byte[])o;

                System.Text.StringBuilder sb=new System.Text.StringBuilder(maxBytesToLog*2+2);
                sb.Append("0x");

                for(int i=0; i<data.Length && i<maxBytesToLog; ++i)
                {
                    sb.Append(data[i].ToString("x2"));
                }

                if (data.Length>maxBytesToLog)
                {
                    sb.Append("...(");
                    sb.Append((data.Length-maxBytesToLog).ToString());
                    sb.Append(" bytes truncated)...");
                }

                return sb.ToString();
            }
            else
            {
                return FormatString(o, maxBytesToLog);
            }
        }

        private delegate string StringFormatter(object o, int maxBytesToLog);

        /// <summary> Formats a list of objects. </summary>
        private string FormatList(IEnumerable list, int maxEntriesToLog, StringFormatter formatter, int maxBytesPerEntry)
        {
            if (list==null)
            {
                return null;
            }

            System.Text.StringBuilder sb=new System.Text.StringBuilder();

            int countAdded=0;
            int countTruncated=0;
            foreach (object item in list)
            {
                if (countAdded<maxEntriesToLog)
                {
                    if (countAdded>0)
                    {
                        sb.Append(",");
                    }

                    if (item!=null)
                    {
                        sb.Append(formatter(item, maxBytesPerEntry));
                    }

                    ++countAdded;
                }
                else
                {
                    ++countTruncated;
                }
            }

            if (countTruncated>0)
            {
                sb.Append(",...(");
                sb.Append(countTruncated.ToString());
                sb.Append(" more truncated)...");
            }

            return sb.ToString();
        }

        /// <summary> Logs all current field data. </summary>
        private void DoLog()
        {
            int executionTimeInMs=(int)(System.DateTime.UtcNow-timeStart).TotalMilliseconds;
            string hrString=(resultCode==null?"?":resultCode.ToString());

            string appLogCommon=string.Join(MixConstants.AppLogSeparator, new string[]{apiName, apiVersion, hrString, executionTimeInMs.ToString()+"ms"});
            string appLogCustom=FormatCustomFields();
            string appLog=string.Join(MixConstants.AppLogSeparator, new string[]{appLogCommon, appLogCustom});

            Xom.Log(XomAreaName.log, appLog);
        }

        /// <summary> Builds a string from all the currently set custom data fields. </summary>
        private string FormatCustomFields()
        {
            System.Text.StringBuilder sb=new System.Text.StringBuilder();

            bool isFirst=true;
            foreach (string field in fieldOrder)
            {
                if (!isFirst)
                {
                    sb.Append(MixConstants.AppLogSeparator);
                }

                string data=fieldData[field];
                if (data!=null)
                {
                    sb.Append(data);
                }

                isFirst=false;
            }

            return sb.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\AppLogValues.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using xonline.common.service;

namespace xonline.mix.common
{
    public class AppLogValues
    {

        /// <summary>
        /// Pull out the most inner exception 
        /// </summary>
        private static Exception GetExceptionInformation(Exception ex)
        {
            if(ex.GetType() == typeof(XRLException) || ex.GetType() == typeof(XRLExceptionWithoutEvent))
            {
                return ex;
            }

            if (ex.InnerException != null)
            {
                return GetExceptionInformation(ex.InnerException);
            }

            return ex;
 
        }

        /// <summary>
        /// Pull out the most the most useful exception message
        /// </summary>
        public static string GetExceptionMessage(Exception ex)
        {
            Exception innerException = GetExceptionInformation(ex);

            return innerException.Message;
        }

                /// <summary>
        /// Pull out the most the most useful exception message
        /// </summary>
        public static string GetHResult(Exception ex)
        {
            Exception innerException = GetExceptionInformation(ex);


            ExceptionWithHResult exceptionWithHresult = innerException as ExceptionWithHResult;

            if (exceptionWithHresult != null)
            {
                return ((ExceptionWithHResult)innerException).HResult.ToString();
            }

            return null;
        }

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\MixConstants.cs ===
﻿using System;

namespace xonline.mix.common
{
    /// <summary>
    /// Constants to be used with Mix Services
    /// </summary>
    public static class MixConstants
    {
        /// <summary>
        /// Separator between different values being logged in a single AppLog line
        /// </summary>
        public const string AppLogSeparator = "|";

        /// <summary>
        /// Success or Failure text used for App Logs
        /// </summary>
        public static class AppLogResults
        {
            public const string Fail = "Fail";
            public const string Success = "Success";
        }

        /// <summary>
        /// Static class which defines string lengths to be used in validators
        /// </summary>
        public static class StringLengths
        {
            public const int AttributeNameMin = 1;
            public const int AttributeNameMax = 50;
            public const int AttributeValueMin = 1;
            public const int AttributeValueMax = 50;
            public const int CountryMin = 2;
            public const int CountryMax = 2;
            public const int CurrencyCodeMin = 3;
            public const int CurrencyCodeMax = 3;
            public const int CustomGenreMin = 0;
            public const int CustomGenreMax = 80;
            public const int DeveloperMin = 1;
            public const int DeveloperMax = 80;
            public const int DescriptionMin = 1;
            public const int DescriptionMax = 4000;
            public const int DescriptionReducedMin = 1;
            public const int DescriptionReducedMax = 500;
            public const int ExternalOfferInstanceIdMin = 1;
            public const int ExternalOfferInstanceIdMax = 50;
            public const int FileUrlMin = 1;
            public const int FileUrlMax = 512;
            public const int TermsMin = 1;
            public const int TermsMax = 255;
            public const int LocaleMin = 1;
            public const int LocaleMax = 10;
            public const int OfferNameMin = 1;
            public const int OfferNameMax = 255;
            public const int PublisherMin = 1;
            public const int PublisherMax = 255;
            public const int SkuMin = 1;
            public const int SkuMax = 50;
            public const int SubscriptionNameMin = 1;
            public const int SubscriptionNameMax = 50;
            public const int SubscriptionFamilyNameMin = 1;
            public const int SubscriptionFamilyNameMax = 50;
            public const int TitleMin = 1;
            public const int TitleMax = 255;
            public const int TitleReducedMin = 1;
            public const int TitleReducedMax = 50;
            public const int TitleSortMin = 0;
            public const int TitleSortMax = 255;
            public const int VoiceDisplayTitleMin = 1;
            public const int VoiceDisplayTitleMax = 25;
            
        }

        /// <summary>
        /// Static class which defines the Template Messages in the validators
        /// </summary>
        public static class TemplateMessages
        {
            public const string InvalidString = "The value ({0}) at key ({2})/({1}) is not within the lower bound {3}({4}) and upper bound {5}({6})";
            public const string NullObjectString = "The value at key ({2})/({1}) is null";
            public const string InvalidDomainString = "The value ({0}) at key ({2})/({1}) is not within the allowed list";
            public const string InvalidRangeString = "The value ({0}) at key ({2})/({1}) is not within the lower bound {3}({4}) and upper bound {5}({6})";
            public const string ArrayValidatorNegatedString = "The count of items in the collection ({2})/({1}) must not fall within the range {3}({4}) - {5}({6})";
            public const string ArrayValidatorNonNegatedString = "The count of items in the collection ({2})/({1}) must fall within the range {3}({4}) - {5}({6})";
            public const string InvalidRegEx = "The value ({0}) at key ({2})/({1}) does not match the RegularExpression {3}";
            public const string InvalidUri = "The value ({0}) at key ({2})/({1}) is not a well formed Uri string/exceeds maximum allowed length/null";
            public const string InvalidExtOfferInstanceCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound {3}({4}) and upper bound {5}({6})";
            public const string InvalidServiceComponentIdString = "Service componentId ({0}) at key ({2})/({1}) is not a guid";
            public const string InvalidDurationIdString = "Duration ({0}) at key ({2})/({1}) is should be null/valid positive integer value";

            // NOTE: ValidatorComposition MessageTemplate only supports tokens {0}, {1}, and {2}, and must be a constant value
            public const string InvalidVoiceDisplayTitleCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound 1(Inclusive) and upper bound 25(Inclusive)"; 
            public const string InvalidSKUCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound 1(Inclusive) and upper bound 50(Inclusive)";
            public const string InvalidCustomGenreCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound 0(Inclusive) and upper bound 80(Inclusive)";
            public const string InvalidDeveloperCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound 1(Inclusive) and upper bound 80(Inclusive)";
            public const string InvalidPublisherCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound 1(Inclusive) and upper bound 255(Inclusive)";
            public const string InvalidKeywordsCompositeString = "The value ({0}) at key ({2})/({1}) should either be null or within the lower bound 1(Inclusive) and upper bound 4000(Inclusive)";
        }
        /// <summary>
        /// Static class which defines the Tags in the validators
        /// </summary>
        public static class Tags
        {
            public const string LocalizedDataTag = "LocalizedData";
            public const string GameRatingDescriptorTag = "GameRatingDescriptor";
            public const string GameRatingTag = "GameRating";
            public const string GameAttributeTag = "GameAttribute";
            public const string EncryptionTag = "Encryption";
            public const string FileTag = "File";
            public const string LocalizedFileTag = "LocalizedFile";
            public const string GameRelationshipTag = "GameRelationship";
            public const string ProductRelationshipTag = "ProductRelationship";
            public const string PackageTag = "Package";
            public const string ProductPackageTag = "ProductPackage";
            public const string GameExecutableTag = "GameExecutable";
            public const string ProductTag = "Product";
            public const string MediaBaseTag = "MediaBase";
            public const string ImageTag = "Image";
            public const string LocalizedImageFileTag = "LocalizedImageFile";
            public const string ProductBaseTag = "ProductBase";
            public const string GameTag = "Game";
            public const string PreviewPackageTag = "PreviewPackage";
            public const string VideoPreviewTag = "VideoPreview";
            public const string GameLocalizedDataTag = "GameLocalizedData";
            public const string GameContentTag = "GameContent";
            public const string GameConsumableTag = "GameConsumable";
            public const string AvatarItemTag = "AvatarItem";
            public const string BundleTag = "Bundle";
            public const string BundleLocalizedDataTag = "BundleLocalizedData";
            public const string OfferTag = "Offer";
            public const string OfferInstanceTag = "OfferInstance";
            public const string OfferPackageTag = "OfferPackage";
            public const string OfferProductTag = "OfferProduct";
            public const string PointsBundleTag = "PointsBundle";
            public const string SubscriptionTag = "Subscription";
            public const string SubscriptionFamilyTag = "SubscriptionFamily";
            public const string AttributeTag = "Attribute";
            public const string AppPackageTag = "AppPackage";
            public const string AppLocalizedDataTag = "AppLocalizedData";
            public const string AppTag = "App";
            public const string ProductAttributeTag = "ProductAttribute";
            public const string SearchInformationDataTag = "SearchInformationData";
        }
        /// <summary>
        /// Static class which defines the RegularExpressions to be used in validators
        /// </summary>
        public static class RegExExpressions
        {
            public const string CountryCodeRegEx = "^[a-zA-Z]{2}$";
            public const string CurrencyCodeRegEx = "^[a-zA-Z]{3}$";
        }
        /// <summary>
        /// Defines bounds for array
        /// </summary>
        public static class ArrayBounds
        {
            public const int ContentIdLength = 20;
            public const int SymKeyLength = 16; // The console expects a symmetric key of this length
            public const int PublicKeyLength = 284; // The console expects a public key of this length
            public const int GameLocalizedDataMin = 1;
            public const int GameLocalizedDataMax = int.MaxValue;
            public const int LocalizedDataMin = 1;
            public const int LocalizedDataMax = int.MaxValue;
            public const int AppLocalizedDataMin = 1;
            public const int AppLocalizedDataMax = int.MaxValue;
            public const int BundleLocalizedDataMin = 1;
            public const int BundleLocalizedDataMax = int.MaxValue;            
            public const int AppTypesDataMin = 1;
            public const int AppTypesDataMax = int.MaxValue;

        }

        /// <summary>
        /// Inner Message for Circular Reference Exception thrown by Entity Framework 
        /// when trying to update the Object Context and is not successful
        /// 
        /// Used to swallow a exception in the case of a Game creating a MediaRelationship to itself
        /// during ProductManagement Configure API
        /// Object Context will not be used after the save
        /// </summary>
        public const string CircularReferenceExceptionMessage = "The changes to the database were committed successfully, but an error occurred while updating the object context. The ObjectContext might be in an inconsistent state. Inner exception message: A circular relationship path has been detected while enforcing a referential integrity constraints. Referential integrity cannot be enforced on circular relationships.";

        public static readonly  Guid DashTitleProductId = new Guid("66ACD000-77FE-1000-9115-D802FFFE07D1");
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\Validators\ArraySizeValidator.cs ===
using System;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Validation.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Validation.Properties;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

namespace xonline.mix.common.validators
{

    [ConfigurationElementType(typeof(ArrayCountValidatorData))]
    public class ArrayCountValidator : ValueValidator<Array>
    {

        private RangeValidator<int> rangeValidator;
        private int lowerBound;
        private RangeBoundaryType lowerBoundType;
        private int upperBound;
        private RangeBoundaryType upperBoundType;


        public ArrayCountValidator(int upperBound)
            : this(0, RangeBoundaryType.Ignore, upperBound, RangeBoundaryType.Inclusive)
        { }


        public ArrayCountValidator(int upperBound, bool negated)
            : this(0, RangeBoundaryType.Ignore, upperBound, RangeBoundaryType.Inclusive, negated)
        { }


        public ArrayCountValidator(int lowerBound, int upperBound)
            : this(lowerBound, RangeBoundaryType.Inclusive, upperBound, RangeBoundaryType.Inclusive)
        { }


        public ArrayCountValidator(int lowerBound, int upperBound, bool negated)
            : this(lowerBound, RangeBoundaryType.Inclusive, upperBound, RangeBoundaryType.Inclusive, negated)
        { }


        public ArrayCountValidator(int lowerBound, RangeBoundaryType lowerBoundType,
            int upperBound, RangeBoundaryType upperBoundType)
            : this(lowerBound, lowerBoundType, upperBound, upperBoundType, null)
        { }


        public ArrayCountValidator(int lowerBound, RangeBoundaryType lowerBoundType,
            int upperBound, RangeBoundaryType upperBoundType, bool negated)
            : this(lowerBound, lowerBoundType, upperBound, upperBoundType, null, negated)
        { }


        public ArrayCountValidator(int lowerBound, RangeBoundaryType lowerBoundType,
            int upperBound, RangeBoundaryType upperBoundType,
            string messageTemplate)
            : this(lowerBound, lowerBoundType, upperBound, upperBoundType, messageTemplate, false)
        {
            //            this.rangeChecker = new RangeChecker<int>(lowerBound, lowerBoundType, upperBound, upperBoundType);
            this.rangeValidator = new RangeValidator<int>(lowerBound, lowerBoundType, upperBound, upperBoundType, messageTemplate, false);
            this.lowerBound = lowerBound;
            this.lowerBoundType = lowerBoundType;
            this.upperBound = upperBound;
            this.upperBoundType = upperBoundType;
        }


        public ArrayCountValidator(int lowerBound, RangeBoundaryType lowerBoundType,
            int upperBound, RangeBoundaryType upperBoundType,
            string messageTemplate,
            bool negated)
            : base(messageTemplate, null, negated)
        {
            //            this.rangeChecker = new RangeChecker<int>(lowerBound, lowerBoundType, upperBound, upperBoundType);
            this.rangeValidator = new RangeValidator<int>(lowerBound, lowerBoundType, upperBound, upperBoundType, messageTemplate, negated);
            this.lowerBound = lowerBound;
            this.lowerBoundType = lowerBoundType;
            this.upperBound = upperBound;
            this.upperBoundType = upperBoundType;
        }


        protected override void DoValidate(Array objectToValidate,
            object currentTarget,
            string key,
            ValidationResults validationResults)
        {
            if (objectToValidate != null)
            {
                if (!this.rangeValidator.Validate(objectToValidate.Length).IsValid)
                {
                    LogValidationResult(validationResults, GetMessage(objectToValidate, key), currentTarget, key);
                }
            }
            else
            {
                LogValidationResult(validationResults, GetMessage(objectToValidate, key), currentTarget, key);
            }
        }

        protected override string GetMessage(object objectToValidate, string key)
        {
            return string.Format(CultureInfo.CurrentUICulture,
                this.MessageTemplate,
                objectToValidate,
                key,
                this.Tag,
                this.lowerBound,
                this.lowerBoundType,
                this.upperBound,
                this.upperBoundType);
        }

        /// <summary>
        /// Gets the Default Message Template when the validator is non negated.
        /// </summary>
        protected override string DefaultNonNegatedMessageTemplate
        {
            get { return MixConstants.TemplateMessages.ArrayValidatorNonNegatedString; }
        }

        /// <summary>
        /// Gets the Default Message Template when the validator is negated.
        /// </summary>
        protected override string DefaultNegatedMessageTemplate
        {
            get { return MixConstants.TemplateMessages.ArrayValidatorNegatedString; }
        }

        #region test only properties

        internal int LowerBound
        {
            get { return this.lowerBound; }
        }

        internal int UpperBound
        {
            get { return this.upperBound; }
        }

        internal RangeBoundaryType LowerBoundType
        {
            get { return this.lowerBoundType; }
        }

        internal RangeBoundaryType UpperBoundType
        {
            get { return this.upperBoundType; }
        }

        #endregion

    }
    [AttributeUsage(AttributeTargets.Property
| AttributeTargets.Field
| AttributeTargets.Method
| AttributeTargets.Parameter,
AllowMultiple = true,
Inherited = false)]
    public sealed class ArrayCountValidatorAttribute : ValueValidatorAttribute
    {
        private int lowerBound;
        private RangeBoundaryType lowerBoundType;
        private int upperBound;
        private RangeBoundaryType upperBoundType;


        public ArrayCountValidatorAttribute(int upperBound)
            : this(0, RangeBoundaryType.Ignore, upperBound, RangeBoundaryType.Inclusive)
        { }


        public ArrayCountValidatorAttribute(int lowerBound, int upperBound)
            : this(lowerBound, RangeBoundaryType.Inclusive, upperBound, RangeBoundaryType.Inclusive)
        { }


        public ArrayCountValidatorAttribute(int lowerBound,
            RangeBoundaryType lowerBoundType,
            int upperBound,
            RangeBoundaryType upperBoundType)
        {
            this.lowerBound = lowerBound;
            this.lowerBoundType = lowerBoundType;
            this.upperBound = upperBound;
            this.upperBoundType = upperBoundType;
        }


        protected override Validator DoCreateValidator(Type targetType)
        {
            return new ArrayCountValidator(this.lowerBound,
                this.lowerBoundType,
                this.upperBound,
                this.upperBoundType,
                Negated);
        }
    }

    public class ArrayCountValidatorData : RangeValidatorData<int>
    {

        public ArrayCountValidatorData()
        { }


        public ArrayCountValidatorData(string name)
            : base(name, typeof(ArrayCountValidator))
        { }

        protected override Validator DoCreateValidator(Type targetType)
        {
            return new ArrayCountValidator(this.LowerBound,
                this.LowerBoundType,
                this.UpperBound,
                this.UpperBoundType,
                Negated);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Exceptions\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\MixErrorHandler.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.ServiceModel.Dispatcher;
using System.Web;
using System.ServiceModel;
using xonline.common.service;
using xonline.common.mgmt;
using System.ServiceModel.Description;
using System.ServiceModel.Configuration;
using System.ServiceModel.Channels;
using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;


namespace xonline.mix.common
{
    class MixErrorHandler : IErrorHandler, IServiceBehavior
    {
        #region IErrorHandler Members


        /// <summary>
        /// Handle the errors and do logging.
        /// We make use of FEAPP to get all the rich dynamic logging functionality
        /// </summary>
        /// <param name="error"></param>
        /// <returns></returns>
        public bool HandleError(Exception error)
        {
            //We allow FaultExceptions to pass by.Avoid event log spamming.
            if ((error is FaultException<ValidationFault>))
            {
                return true;
            }
            HttpContext Context = HttpContext.Current;
            if (Context != null)
            {
                FrontEndApp.LogException(Context, error, false);
            }
            return true;
        }


        /// <summary>
        /// Converts the Exceptions to appropriate fault messages
        /// </summary>
        /// <param name="error"></param>
        /// <param name="version"></param>
        /// <param name="fault"></param>
        public void ProvideFault(Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault)
        {
            //We allow FaultExceptions to pass by
            if ((error is FaultException<ValidationFault>))
            {
                return;
            }
            XEvent.Id eventId = XEvent.Id.MIX_COMMON_UNKNOWN_ERROR;

            HResult hresult = HResult.XONLINE_E_MIX_UNKNOWNERROR;

            bool isRetryable = false;

            if (error is ExceptionWithHResult)
            {
                hresult = ((ExceptionWithHResult)error).HResult;
            }
            if (error is ExceptionWithEvent)
            {
                eventId = ((ExceptionWithEvent)error).EventId;
            }
            //Check if the exception implements IRetryable , if yes then store the value in the variable for creation of faultException
            if (error is IRetryableException)
            {
                isRetryable = ((IRetryableException)error).IsRetryable;
            }
            //we raise client fault withoutevent but with hresult
            FaultException<MixClientFault> clientFaultWithoutEvent = new FaultException<MixClientFault>(new MixClientFault((uint)hresult, error.Message, isRetryable), error.Message);
            MessageFault messageFault = clientFaultWithoutEvent.CreateMessageFault();
            fault = Message.CreateMessage(
              version,
              messageFault,
              clientFaultWithoutEvent.Action
            );
        }
        #endregion

        #region IServiceBehavior Members

        /// <summary>
        /// Empty implementation.not needed
        /// </summary>
        /// <param name="serviceDescription"></param>
        /// <param name="serviceHostBase"></param>
        /// <param name="endpoints"></param>
        /// <param name="bindingParameters"></param>
        public void AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection<ServiceEndpoint> endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters)
        {
        }


        /// <summary>
        /// Add the error handler behaviour to the channel dispatcher
        /// </summary>
        /// <param name="serviceDescription"></param>
        /// <param name="serviceHostBase"></param>
        public void ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
            IErrorHandler errorHandler = new MixErrorHandler();

            foreach (ChannelDispatcherBase channelDispatcherBase in serviceHostBase.ChannelDispatchers)
            {
                ChannelDispatcher channelDispatcher = channelDispatcherBase as ChannelDispatcher;

                if (channelDispatcher != null)
                {
                    channelDispatcher.ErrorHandlers.Add(errorHandler);
                }
            }
        }


        /// <summary>
        /// Empty implementation.Not needed as of now
        /// </summary>
        /// <param name="serviceDescription"></param>
        /// <param name="serviceHostBase"></param>
        public void Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
        }

        #endregion
    }


    /// <summary>
    /// Extension element for use in web.config
    /// </summary>
    public class MixErrorHandlerElement : BehaviorExtensionElement
    {
        protected override object CreateBehavior()
        {
            return new MixErrorHandler();
        }
        /// <summary>
        /// Return the right behaviour type
        /// </summary>
        public override Type BehaviorType
        {
            get
            {
                return typeof(MixErrorHandler);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\Validations.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace xonline.mix.common
{
	/// <summary>
	/// Static class with Validation methods which can be re-used
	/// </summary>
    public class MixValidations
	{
        /// <summary>
        /// Matches the country code with RegEx pattern
        /// </summary>
        /// <param name="countryCode"></param>
        /// <returns></returns>
        public static bool IsCountryCodeValid(string countryCode)
        {
            return Regex.IsMatch(countryCode, MixConstants.RegExExpressions.CountryCodeRegEx);
        }
        /// <summary>
        /// checks the Locale
        /// </summary>
        /// <param name="locale"></param>
        /// <returns></returns>
        public static bool IsLocaleLengthValid(string locale)
        {
            return !(locale.Length < MixConstants.StringLengths.LocaleMin || locale.Length > MixConstants.StringLengths.LocaleMax);
        }


        /// <summary>
        /// checks the Term
        /// </summary>
        /// <param name="term"></param>
        /// <returns></returns>
        public static bool IsTermLengthValid(string term)
        {
            return !(term.Length < MixConstants.StringLengths.TermsMin || term.Length > MixConstants.StringLengths.TermsMax);
        }
        /// <summary>
        /// matches the currency code with RegEx pattern
        /// </summary>
        /// <param name="currencyCode"></param>
        /// <returns></returns>
        public static bool IsCurrencyCodeValid(string currencyCode)
        {
            return Regex.IsMatch(currencyCode, MixConstants.RegExExpressions.CurrencyCodeRegEx);
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Exceptions\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Exceptions\MixClientFaults.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Runtime.Serialization;
using System.ServiceModel;
using xonline.common.service;

namespace xonline.mix.common
{

    /// <summary>
    /// Base client fault
    /// </summary>
    [DataContract(Name = "MixClientFaultBase", Namespace = "http://xonline.mix.common.contracts")]
    public abstract class MixClientFaultBase
    {
        public MixClientFaultBase(string message, bool isRetryable)
        {
            this.Message = message;
            this.IsRetryable = isRetryable;
        }
        [DataMember(Name = "Message")]
        public string Message;

        [DataMember(Name = "IsRetryable")]
        public bool IsRetryable;
    }
    /// <summary>
    /// Only MixClientFault is what we want to send to client
    /// </summary>
    [DataContract(Name = "MixClientFault", Namespace = "http://xonline.mix.common.contracts")]
    public class MixClientFault : MixClientFaultBase
    {
        public MixClientFault(uint hresult, string message, bool isRetryable)
            : base(message, isRetryable)
        {
            this.HResult = hresult;
        }


        [DataMember(Name = "HResult")]
        public uint HResult
        {
            get;
            set;
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ContentIngestion\Service\mixcontentingestion.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using xonline.mix.contentingestion.contract;
using xonline.mix.common;
using xonline.common.service;
using System.ServiceModel;
using xonline.common.marketplace.catalog;

namespace xonline.mix.contentingestion.service
{
    public class MixContentIngestion
    {
        public static readonly string ConfigureProductApiName = "ProductManagement.ConfigureProduct";
        public static readonly string GetProductApiName = "ProductManagement.GetProduct";

        #region GetProduct

        /// <summary>
        /// Called into from Content Ingestion Mix API
        /// Returns a Data Contract object 
        /// </summary>
        /// <param name="id">Guid</param>
        static public ProductV1 GetProduct(Guid id)
        {
              RawCatalogDBEntities catalog =null;

              try
              {
                  catalog = new RawCatalogDBEntities(CatalogDatabase.RawCatalogDBConnectionString);
              }
              catch (Exception ex)
              {
                  throw new XRLException(HResult.XONLINE_E_MIX_CONNECTIONERROR, XEvent.Id.MIX_COMMON_SQL_CONNECTION_ERROR, string.Format("Exception generating entities from SQL {0}", ex.Message),true);
              }

                //finding the instance of the media
                Media catMedia = catalog.Media.Where(m => m.mediaId == id).FirstOrDefault();
                if (catMedia == null)
                {
                    //media not found
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GETPRODUCT, "Product " + id.ToString() + " not found",false);
                }

                if (!catMedia.MediaTypeReference.IsLoaded)
                {
                    catMedia.MediaTypeReference.Load();
                }
                switch (catMedia.MediaType.mediaTypeId)
                {
                    // Game
                    case (int)CatalogConstants.MediaTypeEnum.Game:
                    case (int)CatalogConstants.MediaTypeEnum.GameTrial:
                    case (int)CatalogConstants.MediaTypeEnum.GameDemo:
                    case (int)CatalogConstants.MediaTypeEnum.XboxOriginalGame:
                    case (int)CatalogConstants.MediaTypeEnum.ArcadeGame:
                    case (int)CatalogConstants.MediaTypeEnum.XNACommunityGame:
                    case (int)CatalogConstants.MediaTypeEnum.FullGame:
                    case (int)CatalogConstants.MediaTypeEnum.GamePackagedVideo:
                    case (int)CatalogConstants.MediaTypeEnum.LegacyXbox1Game:
                    case (int)CatalogConstants.MediaTypeEnum.PCGame:
                    case (int)CatalogConstants.MediaTypeEnum.ServerBackedGames:
                        GameV1 mixGame = new GameV1();
                        LoadProductInfo(catalog, mixGame, catMedia);
                        LoadMediaBaseInfo(catalog, mixGame, catMedia);
                        LoadProductBaseInfo(catalog, mixGame, catMedia);
                        LoadProductPackageInfo(catalog, mixGame);
                    LoadGame(catalog, mixGame, catMedia);
                    LoadGameRating(catalog, mixGame, catMedia);
                    LoadGameLocalizedData(catalog, mixGame, catMedia);
                        LoadVideoPreviewInfo(catalog, mixGame);
                        return mixGame;

                    //	Game Content
                    case (int)CatalogConstants.MediaTypeEnum.GameContent:
                    case (int)CatalogConstants.MediaTypeEnum.Theme:
                        GameContentV1 mixGameContent = new GameContentV1();
                        LoadProductInfo(catalog, mixGameContent, catMedia);
                        LoadMediaBaseInfo(catalog, mixGameContent, catMedia);
                        LoadProductPackageInfo(catalog, mixGameContent);
                        return mixGameContent;

                    //	Game Consumable
                    case (int)24:
                        GameConsumableV1 mixGameConsumable = new GameConsumableV1();
                        LoadProductInfo(catalog, mixGameConsumable, catMedia);
                        LoadMediaBaseInfo(catalog, mixGameConsumable, catMedia);
                        return mixGameConsumable;
                    //image
                    case (int)CatalogConstants.MediaTypeEnum.Poster:
                    case (int)CatalogConstants.MediaTypeEnum.Image:
                    case (int)CatalogConstants.MediaTypeEnum.BoxArt:
                    case (int)CatalogConstants.MediaTypeEnum.ArtistPicture:
                    case (int)CatalogConstants.MediaTypeEnum.ScreenShot:
                    case (int)CatalogConstants.MediaTypeEnum.AlbumArt:
                    case (int)CatalogConstants.MediaTypeEnum.BackgroundArt:
                    case (int)CatalogConstants.MediaTypeEnum.SlideshowPreviewImage:
                        ImageV1 mixImage = new ImageV1();
                        LoadProductInfo(catalog, mixImage, catMedia);
                        LoadMediaBaseInfo(catalog, mixImage, catMedia);
                        LoadImageInfo(catalog, mixImage);
                        return mixImage;

                    //	Avatar Item               
                    case (int)CatalogConstants.MediaTypeEnum.AvatarItem:
                        AvatarItemV1 mixAvatarItem = new AvatarItemV1();
                        LoadProductInfo(catalog, mixAvatarItem, catMedia);
                        LoadMediaBaseInfo(catalog, mixAvatarItem, catMedia);
                        return mixAvatarItem;

                    //  Bundles
                    case (int)CatalogConstants.MediaTypeEnum.Bundle:
                        BundleV1 mixBundle = new BundleV1();
                        LoadProductInfo(catalog, mixBundle, catMedia);
                        LoadMediaBaseInfo(catalog, mixBundle, catMedia);
                        LoadBundleInfo(catalog, mixBundle, catMedia);
                        return mixBundle;
                }//end switch

                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GETPRODUCT, "Product " + id.ToString() + " is not of valid Data Contract type",false);
            }//end GetProduct

        /// <summary>
        /// Sets the ProductItem information from the retrieved RawCatalogDB values
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixProduct">ProductItemV1</param>
        /// <param name="catMedia">Media</param>
        static private void LoadProductInfo(RawCatalogDBEntities catalog, ProductV1 mixProduct, Media catMedia)
        {
            mixProduct.ProductId = catMedia.mediaId;
        }//end LoadProductInfo

        /// <summary>
        /// Sets the MediaBase information from the retrieved RawCatalogDB values
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixMediaBase">MediaBaseV1</param>
        /// <param name="catMedia">Media</param>
        static private void LoadMediaBaseInfo(RawCatalogDBEntities catalog, MediaBaseV1 mixMediaBase, Media catMedia)
        {
            mixMediaBase.ProductId = catMedia.mediaId;
            mixMediaBase.VisibilityDate = catMedia.visibilityDate;
            if (!catMedia.VisibilityStatusReference.IsLoaded)
                catMedia.VisibilityStatusReference.Load();
            mixMediaBase.VisibilityStatus = catMedia.VisibilityStatus.visibilityStatusId;
        }//end LoadMediaBaseInfo

        /// <summary>
        /// Sets the ProductBase information from the retrieved RawCatalogDB values
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixProductBase">ProductBaseV1</param>
        /// <param name="catMedia">Media</param>
        static private void LoadProductBaseInfo(RawCatalogDBEntities catalog, ProductBaseV1 mixProductBase, Media catMedia)
        {
            mixProductBase.ReleaseDate = catMedia.originalReleaseDate;
            mixProductBase.GeoCheckPolicy = true;
            if (catMedia.geoCheckPolicy == 0)
            {
                mixProductBase.GeoCheckPolicy = false;
            }
        }//end LoadProductBaseInfo

    
        /// <summary>
        /// Sets the Game information from the retrieved RawCatalogDB values
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixGame">GameV1</param>
        /// <param name="catMedia">Media</param>
        static private void LoadGame(RawCatalogDBEntities catalog, GameV1 mixGame, Media catMedia)
        {
            catMedia.GameReference.Load();
            if(!catMedia.MediaTypeReference.IsLoaded)
            {
                catMedia.MediaTypeReference.Load();
            }
            Game catGame = catMedia.Game;
            mixGame.LiveTitleId = (uint)catGame.liveTitleId;

            mixGame.GameTypeId = catMedia.MediaType.mediaTypeId;
        
            List<int> catMediaCategories = new List<int>();
            foreach (MediaCategory catMediaCategory in catalog.MediaCategory.Where(mc => mc.mediaId == catMedia.mediaId))
            {
                catMediaCategories.Add(catMediaCategory.categoryId);
            }
            mixGame.Categories = catMediaCategories.ToArray();
        }//end LoadGame

        /// <summary>
        /// Sets the GameRating( information from the retrieved RawCatalogDB values
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixGame">GameV1</param>
        /// <param name="catMedia">Media</param>
        static private void LoadGameRating(RawCatalogDBEntities catalog, GameV1 mixGame, Media catMedia)
        {
            List<GameRatingV1> mixGameRatings = new List<GameRatingV1>();
            foreach (MediaRating catMediarating in catalog.MediaRating.Where(mr => mr.mediaId == catMedia.mediaId))
            {
                GameRatingV1 mixGameRating = new GameRatingV1();
                mixGameRating.Id = catMediarating.ratingValueId;

                List<GameRatingDescriptorV1> mixGameRatingDescriptors = new List<GameRatingDescriptorV1>();

                var q = (from rv in catalog.RatingValue
                         join rd in catalog.RatingDescriptor on rv.RatingSystem.ratingSystemId equals rd.RatingSystem.ratingSystemId
                         join mrd in catalog.MediaRatingDescriptor on rd.ratingDescriptorId equals mrd.ratingDescriptorId
                         where catMediarating.ratingValueId == rv.ratingValueId
                         && catMedia.mediaId == mrd.mediaId
                         select new { mrd.ratingDescriptorId, mrd.level }).Distinct();
                foreach (var qElem in q)
                {
                    GameRatingDescriptorV1 mixRatingDescriptor = new GameRatingDescriptorV1();
                    mixRatingDescriptor.Level = (float)qElem.level;
                    mixRatingDescriptor.Id = qElem.ratingDescriptorId;
                    mixGameRatingDescriptors.Add(mixRatingDescriptor);
                }

                mixGameRating.RatingDescriptors = mixGameRatingDescriptors.ToArray();
                mixGameRatings.Add(mixGameRating);
            }
            mixGame.Ratings = mixGameRatings.ToArray();
        }//end LoadGameRating


        /// <summary>
        /// Sets the LocalizedData information from the retrieved RawCatalogDB values
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixGame">GameV1</param>
        /// <param name="catMedia">Media</param>
        static private void LoadGameLocalizedData(RawCatalogDBEntities catalog, GameV1 mixGame, Media catMedia)
        {
            List<GameLocalizedDataV1> mixGameLocalizedDataList = new List<GameLocalizedDataV1>();

            foreach (MediaLocale catMediaLocale in
                catalog.MediaLocale.Where(ml => ml.mediaId == catMedia.mediaId))
            {
                GameLocalizedDataV1 mixGameLocalizedData = new GameLocalizedDataV1();
                catMediaLocale.LocaleReference.Load();
                mixGameLocalizedData.Locale = catMediaLocale.Locale.locale1;
                mixGameLocalizedData.Title = catMediaLocale.title;
                mixGameLocalizedData.TitleSort = catMediaLocale.titleSort;
                mixGameLocalizedData.TitleReduced = catMediaLocale.reducedTitle;
                mixGameLocalizedData.Description = catMediaLocale.description;
                mixGameLocalizedData.DescriptionReduced = catMediaLocale.reducedDescription;
                mixGameLocalizedData.Copyright = catMediaLocale.copyright;

                List<string> equivalentLocales = new List<string>();
                foreach (MediaLocaleMap catMediaLocaleMap in catalog.MediaLocaleMap.Where
                    (mlm => mlm.mediaId == catMedia.mediaId
                    && mlm.Locale1.lcid == catMediaLocale.lcid)) //MediaLocaleMap.lcidMap
                {
                    catMediaLocaleMap.LocaleReference.Load();
                    equivalentLocales.Add(catMediaLocaleMap.Locale.locale1);
                }

                mixGameLocalizedData.EquivalentLocales = equivalentLocales.ToArray();

                GameLocale catGameLocale = catalog.GameLocale.Where
                    (gl => gl.gameMediaId == catMedia.mediaId
                    && gl.lcid == catMediaLocale.lcid).FirstOrDefault();
                if (catGameLocale != null)
                {
                    mixGameLocalizedData.CustomGenre = catGameLocale.customGenre;
                    mixGameLocalizedData.Developer = catGameLocale.developer;
                    mixGameLocalizedData.Publisher = catGameLocale.publisher;
                }//end if
       
                mixGameLocalizedDataList.Add(mixGameLocalizedData);
            }//end foreach MediaLocale

            mixGame.GameLocalizedData = mixGameLocalizedDataList.ToArray();
        }//end LoadGameLocalizedData

        /// <summary>
        /// Loads the product package into Game Contract
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="game"></param>
        static private void LoadProductPackageInfo(RawCatalogDBEntities catalog, GameV1 game)
        {
            MediaInstance[] mediaInstances = TableOperations.GetPrimitiveMediaInstances(catalog, game.ProductId, (byte)CatalogConstants.IsPreview.False);

            game.Executables = new GameExecutableV1[mediaInstances.Length];

            for (int i = 0; i < mediaInstances.Length; i++)
            {
                game.Executables[i] = new GameExecutableV1();
                LoadProductPackageInfo(catalog, game.Executables[i], mediaInstances[i].mediaInstanceId);
            }
        }

        /// <summary>
        /// Loads the product package into GameContent
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameContent"></param>
        static private void LoadProductPackageInfo(RawCatalogDBEntities catalog, GameContentV1 gameContent)
        {
            MediaInstance[] mediaInstances = TableOperations.GetPrimitiveMediaInstances(catalog, gameContent.ProductId, (byte)CatalogConstants.IsPreview.False);

            gameContent.Packages = new GameContentPackageV1[mediaInstances.Length];

            for (int i = 0; i < mediaInstances.Length; i++)
            {
                gameContent.Packages[i] = new GameContentPackageV1();
                LoadProductPackageInfo(catalog, gameContent.Packages[i], mediaInstances[i].mediaInstanceId);
            }
        }

        /// <summary>
        /// Loads the ProductPackageInfo into ProductPackage COntract.Look up happens based on MediaInstanceId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="mediaInstanceId"></param>
        static private void LoadProductPackageInfo(RawCatalogDBEntities catalog, ProductPackageV1 productPackage, Guid mediaInstanceId)
        {

            LoadProductPackageClientTypes(catalog, productPackage, mediaInstanceId);

            GameContentInstance gameContentInstance = TableOperations.GetPrimitiveGameContentInstance(catalog, mediaInstanceId);

            if (gameContentInstance != null)
            {
                if (!gameContentInstance.PackageTypeReference.IsLoaded)
                {
                    gameContentInstance.PackageTypeReference.Load();
                }


                if (!gameContentInstance.GameRegionMaskReference.IsLoaded)
                {
                    gameContentInstance.GameRegionMaskReference.Load();
                }

                productPackage.PackageId = gameContentInstance.gameContentInstanceId;
                productPackage.InstallSize = (ulong)gameContentInstance.installSize;
                productPackage.PackageSize = (ulong)gameContentInstance.packageSize;
                productPackage.PackageType = gameContentInstance.PackageType.packageTypeId;
                productPackage.ContentId = gameContentInstance.liveContentId;
                productPackage.SupportedGameRegionMask = gameContentInstance.GameRegionMask.gameRegionMaskId;

                LoadProductPackageFiles(catalog, productPackage, mediaInstanceId);

                LoadProductPackageEncryptedKey(catalog, productPackage, mediaInstanceId);
            }

        }
        /// <summary>
        /// Loads the ProductPackage Files into ProductPackageContract.
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="mediaInstanceId"></param>
        static private void LoadProductPackageFiles(RawCatalogDBEntities catalog, ProductPackageV1 productPackage, Guid mediaInstanceId)
        {
            GameContentInstanceFile[] gameContentInstanceFiles = TableOperations.GetPrimitiveGameContentInstanceFiles(catalog, mediaInstanceId);

            productPackage.Files = new FileV1[gameContentInstanceFiles.Length];

            for (int i = 0; i < gameContentInstanceFiles.Length; i++)
            {
                FileV1 file = new FileV1();
                file.FileUrl = gameContentInstanceFiles[i].fileUrl;
                file.SortOrder = gameContentInstanceFiles[i].sortOrder;
                productPackage.Files[i] = file;
            }

        }

        /// <summary>
        /// Loads the MediaInstance clienttypes into ProductPackage
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="mediaInstanceId"></param>
        static private void LoadProductPackageClientTypes(RawCatalogDBEntities catalog, ProductPackageV1 productPackage, Guid mediaInstanceId)
        {
            MediaInstanceClientType[] mediaInstanceClientTypes = TableOperations.GetPrimitiveMediaInstanceClientTypes(catalog, mediaInstanceId);

            productPackage.ClientTypes = new int[mediaInstanceClientTypes.Length];

            for (int i = 0; i < mediaInstanceClientTypes.Length; i++)
            {
                productPackage.ClientTypes[i] = mediaInstanceClientTypes[i].clientTypeId;
            }
        }

        /// <summary>
        /// Loads the Encryption Public and Private Key Info into ProductPackage
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="mediaInstanceId"></param>
        static private void LoadProductPackageEncryptedKey(RawCatalogDBEntities catalog, ProductPackageV1 productPackage, Guid mediaInstanceId)
        {
            GameContentInstanceEncryptedKey[] gameContentEncryptedKey = TableOperations.GetPrimitiveGameContentInstanceEncryptedKeys(catalog, mediaInstanceId);

            if (gameContentEncryptedKey.Length > 0)
            {
                EncryptionV1 encryptedKey = new EncryptionV1();
                encryptedKey.PublicKey = gameContentEncryptedKey[0].encryptedPublicKey;
                encryptedKey.SymKey = gameContentEncryptedKey[0].encryptedSymKey;
                productPackage.Encryption = encryptedKey;
            }
        }

        /// <summary>
        /// Loads the videoPreview into Game
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="game"></param>
        static private void LoadVideoPreviewInfo(RawCatalogDBEntities catalog, GameV1 game)
        {
            // For Games, POR has been since Stockholm that the only Preview-Instances present are For Video-Previews
            MediaInstance[] mediaInstances = TableOperations.GetPrimitiveMediaInstances(catalog, game.ProductId, (byte)CatalogConstants.IsPreview.True);

            game.VideoPreviews = new VideoPreviewV1[mediaInstances.Length];

            for (int i = 0; i < mediaInstances.Length; i++)
            {
                game.VideoPreviews[i] = new VideoPreviewV1();
                LoadVideoPreviewInfo(catalog, game.VideoPreviews[i], mediaInstances[i].mediaInstanceId);
            }
        }

        /// <summary>
        /// Loads the videoPreview into Game
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="game"></param>
        static private void LoadVideoPreviewInfo(RawCatalogDBEntities catalog, VideoPreviewV1 videoPreview, Guid mediaInstanceId)
        {
            PreviewMediaInstance previewMediaInstance = TableOperations.GetPrimitivePreviewMediaInstance(catalog, mediaInstanceId);

            // 1 PreviewMediaInstance per MediaInstance
            if (previewMediaInstance != null)
            {
                if (!previewMediaInstance.CountryReference.IsLoaded)
                {
                    previewMediaInstance.CountryReference.Load();
                }

                VideoInstance videoInstance = TableOperations.GetPrimitiveVideoInstance(catalog, mediaInstanceId);

                // 1 VideoInstance per MediaInstance
                if (videoInstance != null)
                {
                    VideoFile[] videoFiles = TableOperations.GetPrimitiveVideoFiles(catalog, videoInstance.videoMediaInstanceId);

                    // N VideoFiles per VideoInstance in DB, even though only 1 VideoPreview File/URL is allowed to be ingested for Previews of Games
                    if (videoFiles != null && videoFiles.Length > 0)
                    {
                        videoPreview.PackageId = previewMediaInstance.previewMediaInstanceId;
                        videoPreview.Country = previewMediaInstance.Country.countryCode;
                        videoPreview.FileUrl = videoFiles[0].fileUrl;  
                    }
                }
            }
        }

        /// <summary>
        /// Loads the data relevant to the Bundle object from the database.
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixBundle">Bundle object</param>
        /// <param name="catalogMedia">Object holding the Media datarow info</param>
        private static void LoadBundleInfo(RawCatalogDBEntities catalog, BundleV1 mixBundle, Media catalogMedia)
        {
            // load localized data
            mixBundle.LocalizedData = GetLocalizedData(catalog, catalogMedia);

            // load ProductIds for this bundle
            mixBundle.ProductIds = TableOperations.GetPrimitiveRelatedMediaIds(catalog, mixBundle.ProductId, CatalogConstants.BundleToAssociatedMediaRelationshipTypeId);
        }

        /// <summary>
        /// Gets data from MediaLocale and MediaLocaleMap into the MIx LocalizedData Data Contract
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <returns></returns>
        static private LocalizedDataV1[] GetLocalizedData(RawCatalogDBEntities catalog, Media catalogMedia)
        {
            List<LocalizedDataV1> mixLocalizedDataList = new List<LocalizedDataV1>();

            foreach (MediaLocale catalogMediaLocale in
                catalog.MediaLocale.Where(ml => ml.mediaId == catalogMedia.mediaId))
            {
                LocalizedDataV1 mixLocalizedData = new LocalizedDataV1();
                catalogMediaLocale.LocaleReference.Load();
                mixLocalizedData.Locale = catalogMediaLocale.Locale.locale1;
                mixLocalizedData.Title = catalogMediaLocale.title;
                mixLocalizedData.TitleSort = catalogMediaLocale.titleSort;
                mixLocalizedData.TitleReduced = catalogMediaLocale.reducedTitle;
                mixLocalizedData.Description = catalogMediaLocale.description;
                mixLocalizedData.DescriptionReduced = catalogMediaLocale.reducedDescription;
                mixLocalizedData.Copyright = catalogMediaLocale.copyright;

                List<string> equivalentLocales = new List<string>();
                foreach (MediaLocaleMap catalogMediaLocaleMap in catalog.MediaLocaleMap.Where
                    (mlm => mlm.mediaId == catalogMedia.mediaId
                    && mlm.Locale1.lcid == catalogMediaLocale.lcid))
                {
                    catalogMediaLocaleMap.LocaleReference.Load();
                    equivalentLocales.Add(catalogMediaLocaleMap.Locale.locale1);
                }

                mixLocalizedData.EquivalentLocales = equivalentLocales.ToArray();

                mixLocalizedDataList.Add(mixLocalizedData);
            }

            return mixLocalizedDataList.ToArray();
        }

        #endregion

        #region ConfigureProduct
        /// <summary>
        /// Called into from Content Ingestion Mix API
        /// Props a Data Contract object 
        /// </summary>
        /// <param name="mixProduct">ProductV1</param>
        static public void ConfigureProduct(ProductV1 mixProduct)
        {
            RawCatalogDBEntities catalog = null;
            try
            {
                catalog = new RawCatalogDBEntities(CatalogDatabase.RawCatalogDBConnectionString);
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_CONNECTIONERROR,XEvent.Id.MIX_COMMON_SQL_CONNECTION_ERROR, string.Format("Exception generating entities from SQL {0}", ex.Message),true);
            }
           
            Media catMedia = TableOperations.GetPrimitiveMedia(catalog, mixProduct.ProductId);

            if (mixProduct.GetType() == typeof(GameV1))
            {
                GameV1 mixGame = (GameV1)mixProduct;
                SaveProductBaseInfo(catalog, mixGame, catMedia, 1); //mediaTypeId to be updated when Game is implimented
                SaveGame(catalog, mixGame, catMedia);
                SaveProductPackages(catalog, mixGame, catMedia);
                SaveGameRatings(catalog, catMedia, mixGame.Ratings);
                SaveVideoPreviews(catalog, mixGame, catMedia);

                catalog.SaveChanges();
                return;
            }

            if (mixProduct.GetType() == typeof(GameContentV1))
            {
                GameContentV1 mixGameContent = (GameContentV1)mixProduct;
                SaveProductBaseInfo(catalog, mixGameContent, catMedia, 18); //mediaTypeId to be updated when GameContent is implimented
                SaveProductPackages(catalog, mixGameContent, catMedia);
                catalog.SaveChanges();
                return;
            }

            if (mixProduct.GetType() == typeof(GameConsumableV1))
            {
                GameConsumableV1 mixGameConsumable = (GameConsumableV1)mixProduct;
                SaveProductBaseInfo(catalog, mixGameConsumable, catMedia, 24);
                catalog.SaveChanges();
                return;
            }

            if (mixProduct.GetType() == typeof(AvatarItemV1))
            {
                AvatarItemV1 mixAvatarItem = (AvatarItemV1)mixProduct;
                SaveMediaBaseInfo(catalog, mixAvatarItem, catMedia, 47);
                catalog.SaveChanges();
                return;
            }

            if (mixProduct.GetType() == typeof(ImageV1))
            {
                ImageV1 mixImage = (ImageV1)mixProduct;
                SaveMediaBaseInfo(catalog, mixImage, catMedia, 14);
                SaveImageInfo(catalog, mixImage, catMedia);
                catalog.SaveChanges();
                return;
            }

            if (mixProduct.GetType() == typeof(BundleV1))
            {
                BundleV1 mixBundle = (BundleV1)mixProduct;
                SaveMediaBaseInfo(catalog, mixBundle, catMedia, (int)CatalogConstants.MediaTypeEnum.Bundle);
                SaveBundleInfo(catalog, mixBundle, catMedia);
                catalog.SaveChanges();
                return;
            }

            throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_CONFIGUREPRODUCT, "Incorrect Product Type " + mixProduct.GetType().FullName + " for mixProduct " + mixProduct.ProductId.ToString(),false);

        }//end ConfigureProduct

        /// <summary>
        /// Sets and updates the ProductBase information for RawCatalogDB
        /// Uses for Game and GameContent
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixMediaBase">MediaBaseV1</param>
        /// <param name="catMedia">Media</param>
        static private void SaveProductBaseInfo(RawCatalogDBEntities catalog, ProductBaseV1 mixProductBase, Media catMedia, int mediaType)
        {
            byte geoCheckPolicyByte = 0;
            if (mixProductBase.GeoCheckPolicy)
            {
                geoCheckPolicyByte = 1;
            }

            TableOperations.SavePrimitiveMedia(catalog, catMedia, mixProductBase.ProductId, mediaType, 123, (DateTime)mixProductBase.ReleaseDate, mixProductBase.ReleaseDate.ToString(), (DateTime)mixProductBase.VisibilityDate, mixProductBase.VisibilityStatus, geoCheckPolicyByte);
        }//end SaveProductBaseInfo

        /// <summary>
        /// /// Sets and updates the MediaBase information for RawCatalogDB
        /// Uses for Images and Video
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixMediaBase">MediaBaseV1</param>
        /// <param name="catMedia">Media</param>
        static private void SaveMediaBaseInfo(RawCatalogDBEntities catalog, MediaBaseV1 mixMediaBase, Media catMedia, int mediaType)
        {
            TableOperations.SavePrimitiveMedia(catalog, catMedia, mixMediaBase.ProductId, mediaType, 123, DateTime.Now, string.Empty, (DateTime)mixMediaBase.VisibilityDate, mixMediaBase.VisibilityStatus, 0);
        }//end SaveProductBaseInfo

        /// <summary>
        /// Saves the Executables from Game
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="media"></param>
        static private void SaveProductPackages(RawCatalogDBEntities catalog, GameV1 game, Media catMedia)
        {
            if (game.Executables != null)
            {
                foreach (GameExecutableV1 executable in game.Executables)
                {
                    SaveProductPackageInfo(catalog, executable, catMedia);
                }
            }
        }

        /// <summary>
        /// Saves the VideoPreviews from Game
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="game"></param>
        /// <param name="media"></param>
        static private void SaveVideoPreviews(RawCatalogDBEntities catalog, GameV1 game, Media catalogMedia)
        {
            MediaInstance[] mediaInstances = TableOperations.GetPrimitiveMediaInstances(catalog, game.ProductId, (byte)CatalogConstants.IsPreview.True);
            Guid[] videoPreviewIds = null;

            if (game.VideoPreviews != null)
            {
                videoPreviewIds = new Guid[game.VideoPreviews.Length];

                // Save current videoPreviews
                for (int i = 0; i < game.VideoPreviews.Length; i++)
                {
                    SaveVideoPreviewInfo(catalog, game.VideoPreviews[i], catalogMedia);
                    videoPreviewIds[i] = game.VideoPreviews[i].PackageId;
                }
            }

            // For Games, POR has been since Stockholm that the only Preview-Instances present are For Video-Previews
            // Need to remove any instances not in the Contract
            if (mediaInstances != null)
            {
                TableOperations.DeletePrimitiveVideoFiles(catalog, videoPreviewIds, mediaInstances);
                TableOperations.DeletePrimitiveVideoInstances(catalog, videoPreviewIds, mediaInstances);
                TableOperations.DeletePrimitivePreviewMediaInstances(catalog, videoPreviewIds, mediaInstances);
                TableOperations.DeletePrimitiveMediaInstances(catalog, videoPreviewIds, mediaInstances);
            }

        }
        /// <summary>
        /// Saves the gamecontentPackages from Game
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="media"></param>
        static private void SaveProductPackages(RawCatalogDBEntities catalog, GameContentV1 gameContent, Media catMedia)
        {
            if (gameContent.Packages != null)
            {
                foreach (GameContentPackageV1 contentPackage in gameContent.Packages)
                {
                    SaveProductPackageInfo(catalog, contentPackage, catMedia);
                }
            }
        }
        /// <summary>
        /// Saves productpackages to Database. 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="media"></param>
        static private void SaveProductPackageInfo(RawCatalogDBEntities catalog, ProductPackageV1 productPackage, Media catMedia)
        {
            MediaInstance catMediaInstance = null;

            //Save the mediaInstance
            TableOperations.SavePrimitiveMediaInstance(catalog, catMedia, productPackage.PackageId, (byte)CatalogConstants.IsAcquirable.True, CatalogConstants.IsAdSupported, (byte)CatalogConstants.IsPreview.False, out catMediaInstance);

            //Delete the Primitive MediaInstanceClientTypes which are in the database and not in the contract
            TableOperations.DeletePrimitiveMediaInstanceClientTypes(catalog, productPackage.ClientTypes, catMediaInstance);

            //Save the client types
            if (productPackage.ClientTypes != null)
            {
                foreach (int clientType in productPackage.ClientTypes)
                {
                    TableOperations.SavePrimitiveMediaInstanceClientType(catalog, clientType, catMediaInstance);
                }
            }

            GameContentInstance gameContentInstance = null;
            //Save the GameContentInstance
            TableOperations.SavePrimitiveGameContentInstance(catalog, productPackage.PackageId, catMediaInstance, (long)productPackage.InstallSize, (long)productPackage.PackageSize, productPackage.ContentId, productPackage.PackageType, productPackage.SupportedGameRegionMask, out gameContentInstance);

            //Save the GameContentInstanceEncryptedKey
            TableOperations.SavePrimitiveGameContentInstanceEncryptedKey(catalog, productPackage.Encryption.SymKey, productPackage.Encryption.PublicKey, gameContentInstance);

            //Save the GameContentInstanceFile
            if (productPackage.Files != null)
            {
                foreach (FileV1 file in productPackage.Files)
                {
                    TableOperations.SavePrimitiveGameContentInstanceFile(catalog, Guid.NewGuid(), gameContentInstance, file.FileUrl, file.SortOrder);
                }
            }
        }

        /// <summary>
        /// Saves videoPreviews to Database. 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="catalog"></param>
        /// <param name="productPackage"></param>
        /// <param name="media"></param>
        static private void SaveVideoPreviewInfo(RawCatalogDBEntities catalog, VideoPreviewV1 mixVideoPreview, Media catalogMedia)
        {
            MediaInstance catalogMediaInstance = null;
            VideoInstance catalogVideoInstance = null;

            //Save the mediaInstance
            TableOperations.SavePrimitiveMediaInstance(catalog, catalogMedia, mixVideoPreview.PackageId, (byte)CatalogConstants.IsAcquirable.False, CatalogConstants.IsAdSupported, (byte)CatalogConstants.IsPreview.True, out catalogMediaInstance);

            //Save the PreviewMediaInstance
            TableOperations.SavePrimitivePreviewMediaInstance(catalog, CatalogConstants.VideoPreviewPreviewMediaInstanceTypeId, mixVideoPreview.Country, CatalogConstants.VideoPreviewProviderId, CatalogConstants.VideoPreviewExternalLicenseContentId, CatalogConstants.VideoPreviewDRMLicenseIssuerId, catalogMediaInstance);

            //Save the VideoInstance
            TableOperations.SavePrimitiveVideoInstance(catalog, catalogMediaInstance, CatalogConstants.IsDRM, CatalogConstants.VideoPreviewAudioEncodingId, CatalogConstants.VideoPreviewVideoDefinitionId, CatalogConstants.VideoPreviewAspectRatio, CatalogConstants.VideoPreviewResolution, CatalogConstants.VideoPreviewEncodingId, CatalogConstants.VideoPreviewBitRate, out catalogVideoInstance);

            //Save the VideoFile -- only 1 allowed for Video Previes for Games, which is only scenario supported by MIX
            TableOperations.SavePrimitiveVideoFile(catalog, catalogVideoInstance, mixVideoPreview.FileUrl, CatalogConstants.VideoPreviewFileSize, CatalogConstants.VideoPreviewFileIndex);
        }

        /// <summary>
        /// Saves the GameExecutables to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameExecutable"></param>
        /// <param name="media"></param>
        static private void SaveGameExecutableInfo(RawCatalogDBEntities catalog, GameExecutableV1 gameExecutable, Media catMedia)
        {
            SaveProductPackageInfo(catalog, gameExecutable, catMedia);
        }

        /// <summary>
        /// Saves the GameContentPackage to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameExecutable"></param>
        /// <param name="media"></param>
        static private void SaveGameContentPackageInfo(RawCatalogDBEntities catalog, GameContentPackageV1 gameContentPackage, Media catMedia)
        {
            SaveProductPackageInfo(catalog, gameContentPackage, catMedia);
        }

        /// <summary>
        /// Saves the images into the Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="image"></param>
        /// <param name="catMedia"></param>
        static private void SaveImageInfo(RawCatalogDBEntities catalog, ImageV1 image, Media catMedia)
        {
            TableOperations.SavePrimitiveImage(catalog, catMedia, image.ProductId, null, null);
            //save the imageInstances
            if (image.LocalizedImageFiles != null)
            {
                foreach (LocalizedImageFileV1 file in image.LocalizedImageFiles)
                {
                    MediaInstance imageMediaInstance = null;
                    TableOperations.SavePrimitiveMediaInstance(catalog, catMedia, file.LocalizedFileId, (byte)1, (byte)0, (byte)0, out imageMediaInstance);
                    TableOperations.SavePrimitiveImageInstance(catalog, imageMediaInstance, file.Locale, file.FileUrl, file.FormatId, file.SizeId, file.FileSize);
                }
            }
            //Save the mediarelationships
            if (image.ProductRelationships != null)
            {
                foreach (ProductRelationshipV1 item in image.ProductRelationships)
                {
                    Media catalogParentProduct = null;
                    try
                    {
                        catalogParentProduct = catalog.Media.Where(m => m.mediaId == item.ProductId).First();
                    }
                    catch (InvalidOperationException ex)
                    {
                        // exception thrown if mediaId is not found
                        // TODO (create new HResult part of 47924 story)
                        throw new XRLExceptionWithoutEvent(
                            HResult.XONLINE_E_MIX_CONFIGUREPRODUCT,
                            ex,
                            "mediaId=" + item.ProductId + " not found in the Catalog.", false);
                    }

                    TableOperations.SavePrimitiveMediaRelationShip(
                        catalog,
                        catalogParentProduct, 
                        catMedia, 
                        item.RelationshipTypeId, 
                        item.SortOrder);
                }
            }
        }
        /// <summary>
        /// Loads the Image from Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="image"></param>
        static private void LoadImageInfo(RawCatalogDBEntities catalog, ImageV1 image)
        {
            Image catImg = TableOperations.GetPrimitiveImage(catalog, image.ProductId);
            image.ProductId = catImg.imageMediaId;

            ImageInstance[] catImageInstance = TableOperations.GetPrimitiveImageInstances(catalog, image.ProductId);
            LocalizedImageFileV1[] localizedFiles = new LocalizedImageFileV1[catImageInstance.Length];

            MediaRelationship[] catMediaRelationShip = TableOperations.GetPrimitiveMediaRelationShip(catalog, image.ProductId);
            ProductRelationshipV1[] productRelationShips = new ProductRelationshipV1[catMediaRelationShip.Length];

            //Populate the LocalizedFiles
            for (int i = 0; i < catImageInstance.Length; i++)
            {
                if (!catImageInstance[i].ImageSizeReference.IsLoaded)
                {
                    catImageInstance[i].ImageSizeReference.Load();
                }
                if (!catImageInstance[i].ImageFormatReference.IsLoaded)
                {
                    catImageInstance[i].ImageFormatReference.Load();
                }
                if (!catImageInstance[i].LocaleReference.IsLoaded)
                {
                    catImageInstance[i].LocaleReference.Load();
                }

                localizedFiles[i] = new LocalizedImageFileV1();
                localizedFiles[i].LocalizedFileId = catImageInstance[i].imageMediaInstanceId;
                localizedFiles[i].FileUrl = catImageInstance[i].fileUrl;
                localizedFiles[i].FormatId = catImageInstance[i].ImageFormat.imageFormatId;
                localizedFiles[i].SizeId = catImageInstance[i].ImageSize.imageSizeId;
                if (catImageInstance[i].fileSize.HasValue)
                {
                    localizedFiles[i].FileSize = catImageInstance[i].fileSize.Value;
                }
                ImageInstance catImageInstanceItem = catImageInstance[i];
                Locale catLocale = catalog.Locale.Where(locale => locale.locale1 == catImageInstanceItem.Locale.locale1).First();
                localizedFiles[i].Locale = catLocale.locale1;
            }

            image.LocalizedImageFiles = localizedFiles;

            //Populate the ProductRelationShips
            for (int i = 0; i < catMediaRelationShip.Length; i++)
            {
                if (!catMediaRelationShip[i].MediaRelationshipTypeReference.IsLoaded)
                {
                    catMediaRelationShip[i].MediaRelationshipTypeReference.Load();
                }
                productRelationShips[i] = new ProductRelationshipV1();
                productRelationShips[i].RelationshipTypeId = catMediaRelationShip[i].MediaRelationshipType.mediaRelationshipTypeId;
                productRelationShips[i].ProductId = catMediaRelationShip[i].mediaId;
                productRelationShips[i].SortOrder = catMediaRelationShip[i].sortOrder;
            }

            image.ProductRelationships = productRelationShips;
        }
        /// <summary>
        /// Saves the game to Database
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixGame">GameV1</param>
        /// <param name="catMedia">Media</param>
        static private void SaveGame(RawCatalogDBEntities catalog, GameV1 mixGame, Media catMedia)
        {
            Game catGame = null;

            //updating Media's TypeId to matching Game TypeID
            TableOperations.SavePrimitiveMedia(catalog, catMedia, catMedia.mediaId, mixGame.GameTypeId, catMedia.metadataProviderId,
                catMedia.originalReleaseDate, catMedia.displayOriginalReleaseDate, catMedia.visibilityDate,
                catMedia.VisibilityStatus.visibilityStatusId, catMedia.geoCheckPolicy);
            
            TableOperations.SavePrimitiveGame(catalog, mixGame.ProductId, mixGame.LiveTitleId, catMedia, out catGame);

            SaveLocalizationDataInfo(catalog, mixGame.GameLocalizedData, catMedia);
            SaveGameLocalizationDataInfo(catalog, mixGame.GameLocalizedData, catGame);


            //Adding, Updating and deleting Categories
            TableOperations.DeletePrimitiveMediaCategories(catalog, catMedia, mixGame.Categories);

            //for each category that does not already exist
            if (mixGame.Categories != null)
            {
                foreach (int mixMediaCategory in mixGame.Categories)
                {
                    TableOperations.SavePrimitiveMediaCategory(catalog, catMedia, catMedia.mediaId, mixMediaCategory);
                }
            }
        }//end SaveGame

        /// <summary>
        /// /// Sets and updates the LocalizationData information for RawCatalogDB
        /// Uses for Game and GameContent
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixLocalizedData">LocalizedDataV1[]</param>
        /// <param name="catMedia">Media</param>
        static private void SaveLocalizationDataInfo(RawCatalogDBEntities catalog, LocalizedDataV1[] mixLocalizedData, Media catMedia)
        {
            //generating a list of current mixLocales
            List<string> localeList = new List<string>();
            foreach (LocalizedDataV1 ld in mixLocalizedData)
            {
                localeList.Add(ld.Locale);
            }

            TableOperations.DeletePrimitiveMediaLocale(catalog, catMedia, localeList.ToArray());

            //insert or update medialocale that exist
            foreach (LocalizedDataV1 localizedData in mixLocalizedData)
            {
                int lcid;

                try
                {
                    lcid = catalog.Locale.Where(l => l.locale1 == localizedData.Locale).First().lcid;
                }
                catch (Exception)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_CONFIGUREPRODUCT, "Unknown Locale " + localizedData.Locale, false);
                }

                TableOperations.SavePrimitiveMediaLocale(catalog, catMedia, catMedia.mediaId, lcid, localizedData.Title, localizedData.TitleSort,
                    localizedData.TitleReduced, localizedData.Description, localizedData.DescriptionReduced, localizedData.Copyright,
                    localizedData.EquivalentLocales);
            }//end foreach LocalizedDataV1
        }//end SaveLocalizationDataInfo

        /// <summary>
        /// /// Sets and updates the GameLocalizationData information for RawCatalogDB
        /// Uses for Game
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixGameLocalizedDatas">GameLocalizedDataV1[]</param>
        /// <param name="catGame">Game</param>
        static private void SaveGameLocalizationDataInfo(RawCatalogDBEntities catalog, GameLocalizedDataV1[] mixGameLocalizedDatas, Game catGame)
        {
            //generating a list of current mixLocales
            List<string> localeList = new List<string>();
            foreach (GameLocalizedDataV1 ld in mixGameLocalizedDatas)
            {
                localeList.Add(ld.Locale);
            }

            TableOperations.DeletePrimitiveGameLocale(catalog, catGame, localeList.ToArray());

            //insert or update medialocale that exist
            foreach (GameLocalizedDataV1 mixGameLocalizedData in mixGameLocalizedDatas)
            {
                int lcid;

                try
                {
                    lcid = catalog.Locale.Where(l => l.locale1 == mixGameLocalizedData.Locale).First().lcid;
                }
                catch (Exception)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_CONFIGUREPRODUCT, "Unknown Locale " + mixGameLocalizedData.Locale, false);
                }
                TableOperations.SavePrimitiveGameLocale(catalog, catGame, catGame.gameMediaId, lcid,
                    mixGameLocalizedData.CustomGenre, mixGameLocalizedData.Developer, mixGameLocalizedData.Publisher);
            }//end foreach LocalizedDataV1
        }//end SaveGameLocalizationDataInfo


        /// <summary>
        /// /// Sets and updates the GameRatings information for RawCatalogDB
        /// Uses for Game
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catMedia">Media</param>
        /// <param name="mixRatings">GameRatingV1[]</param>
        static private void SaveGameRatings(RawCatalogDBEntities catalog, Media catMedia, GameRatingV1[] mixRatings)
        {
            //generating a list of current mixLocales
            List<int> ratingList = new List<int>();
            List<int> ratingDescriptorList = new List<int>();
            if (mixRatings != null)
            {
                foreach (GameRatingV1 mixRating in mixRatings)
                {
                    ratingList.Add(mixRating.Id);
                    if (mixRating.RatingDescriptors != null)
                    {
                        foreach (GameRatingDescriptorV1 mixRatingDescriptor in mixRating.RatingDescriptors)
                        {
                            ratingDescriptorList.Add(mixRatingDescriptor.Id);
                        }
                    }
                }
            }

            TableOperations.DeletePrimitiveMediaRatings(catalog, catMedia, ratingList.ToArray());
            TableOperations.DeletePrimitiveMediaRatingDescriptor(catalog, catMedia,ratingDescriptorList.ToArray());

            //insert or update medialocale that exist
            if (mixRatings != null)
            {
                foreach (GameRatingV1 mixRating in mixRatings)
                {
                    TableOperations.SavePrimitiveMediaRating(catalog, catMedia, catMedia.mediaId, mixRating.Id);

                    if (mixRating.RatingDescriptors != null)
                    {
                        foreach (GameRatingDescriptorV1 mixRatingDescriptor in mixRating.RatingDescriptors)
        {
                            TableOperations.SavePrimitiveMediaRatingDescriptor(catalog, catMedia, catMedia.mediaId, mixRatingDescriptor.Id, mixRatingDescriptor.Level);
                        }
                    }
                }//end foreach mixRatings
        }
        }//end SaveGameRatings
        
        /// <summary>
        /// Saves a bundle product to database
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="mixBundle">Mix Bundle Data Contract</param>
        /// <param name="catalogMedia"></param>
        static private void SaveBundleInfo(RawCatalogDBEntities catalog, BundleV1 mixBundle, Media catalogMedia)
        {
            // save localized data
            SaveLocalizationDataInfo(catalog, mixBundle.LocalizedData, catalogMedia);

            // delete any existing MediaRelationship that we are not updating
            TableOperations.DeletePrimitiveMediaRelationships(
                catalog, 
                mixBundle.ProductId, 
                CatalogConstants.BundleToAssociatedMediaRelationshipTypeId,
                mixBundle.ProductIds);

            //Save the ProductIds as MediaRelationships
            if (mixBundle.ProductIds != null)
            {
                // add/update Media Relationships
                int sortOrder = 1;
                foreach (Guid relatedProductId in mixBundle.ProductIds)
                {
                    Media relatedMedia = null;
                    try
                    {
                        relatedMedia = catalog.Media.Where(m => m.mediaId == relatedProductId).First();
                    }
                    catch (InvalidOperationException ex)
                    {
                        // exception thrown if mediaId is not found
                        // TODO (create new HResult part of 47924 story)
                        throw new XRLExceptionWithoutEvent(
                            HResult.XONLINE_E_MIX_CONFIGUREPRODUCT,
                            ex,
                            "Product Id=" + relatedProductId + " not found in the Catalog and cannot be made part of a bundle.", false);
                    }

                    TableOperations.SavePrimitiveMediaRelationShip(
                        catalog,
                        catalogMedia,
                        relatedMedia, 
                        CatalogConstants.BundleToAssociatedMediaRelationshipTypeId, 
                        sortOrder++);
                }
            }
        }
        
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Contracts\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Exceptions\objd\i386\MixExceptionsProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace xonline.mix.common
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MixClientFaultBase", Namespace="http://xonline.mix.common.contracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.common.MixClientFault))]
    public partial class MixClientFaultBase : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsRetryableField;
        
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRetryable
        {
            get
            {
                return this.IsRetryableField;
            }
            set
            {
                this.IsRetryableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    public partial class MixClientFault : xonline.mix.common.MixClientFaultBase
    {
        
        private uint HResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint HResult
        {
            get
            {
                return this.HResultField;
            }
            set
            {
                this.HResultField = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Exceptions\obj\i386\MixExceptionsProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace xonline.mix.common
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MixClientFaultBase", Namespace="http://xonline.mix.common.contracts")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.common.MixClientFault))]
    public partial class MixClientFaultBase : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private bool IsRetryableField;
        
        private string MessageField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRetryable
        {
            get
            {
                return this.IsRetryableField;
            }
            set
            {
                this.IsRetryableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message
        {
            get
            {
                return this.MessageField;
            }
            set
            {
                this.MessageField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    public partial class MixClientFault : xonline.mix.common.MixClientFaultBase
    {
        
        private uint HResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public uint HResult
        {
            get
            {
                return this.HResultField;
            }
            set
            {
                this.HResultField = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Common\Validators\UriValidator.cs ===
﻿using System;
using System.Globalization;
using Microsoft.Practices.EnterpriseLibrary.Common.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Validation.Configuration;
using Microsoft.Practices.EnterpriseLibrary.Validation.Properties;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;

namespace xonline.mix.common.validators
{
    /// <summary>
    /// Urivalidator. No design time support / config support included.
    /// </summary>
    public class UriValidator : ValueValidator<string>
    {

        private int maxLength = 0;
        /// <summary>
        /// overloaded constructor which takes maxlength for file url
        /// </summary>
        /// <param name="maxLength"></param>
        public UriValidator(int maxLength)
            : base(null, null, false)
        {

            this.maxLength = maxLength;
        }
        /// <summary>
        /// Do validate validates the Uri
        /// </summary>
        /// <param name="objectToValidate"></param>
        /// <param name="currentTarget"></param>
        /// <param name="key"></param>
        /// <param name="validationResults"></param>
        protected override void DoValidate(string objectToValidate,
            object currentTarget,
            string key,
            ValidationResults validationResults)
        {
            if (objectToValidate != null)
            {
                if ((!Uri.IsWellFormedUriString(objectToValidate, UriKind.Absolute)) || (objectToValidate.Length > this.maxLength))
                {
                    LogValidationResult(validationResults, GetMessage(objectToValidate, key), currentTarget, key);
                }
            }
            else
            {
                LogValidationResult(validationResults, GetMessage(objectToValidate, key), currentTarget, key);
            }
        }

        /// <summary>
        /// Get the default message
        /// </summary>
        /// <param name="objectToValidate"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        protected override string GetMessage(object objectToValidate, string key)
        {
            return string.Format(CultureInfo.CurrentUICulture,
                this.MessageTemplate,
                objectToValidate,
                key,
                this.Tag
                );
        }

        /// <summary>
        /// Gets the Default Message Template when the validator is non negated.
        /// </summary>
        protected override string DefaultNonNegatedMessageTemplate
        {
            get { return MixConstants.TemplateMessages.InvalidUri; }
        }

        /// <summary>
        /// Gets the Default Message Template when the validator is  negated. This is just for implementation , there is no way this validator can be called with negated true
        /// </summary>
        protected override string DefaultNegatedMessageTemplate
        {
            get { return string.Empty; }
        }
    }
    [AttributeUsage(AttributeTargets.Property
    | AttributeTargets.Field
    | AttributeTargets.Method
    | AttributeTargets.Parameter,
    AllowMultiple = true,
    Inherited = false)]
    public sealed class UriValidatorAttribute : ValueValidatorAttribute
    {
        private int maxLength;

        /// <summary>
        /// Cosntructor which takes in the uri to validate
        /// </summary>
        /// <param name="uri"></param>
        public UriValidatorAttribute(int maxLength)
        {
            this.maxLength = maxLength;
        }

        /// <summary>
        /// Creates Instance of Urivalidator
        /// </summary>
        /// <param name="targetType"></param>
        /// <returns></returns>
        protected override Validator DoCreateValidator(Type targetType)
        {
            return new UriValidator(this.maxLength);
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Contracts\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Contracts\ServiceContractV1.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;

namespace xonline.mix.match.contract
{
    // NOTE: If you change the interface name "IMixOfferManagementV1" here, you must also update the reference to "IMixOfferManagementV1" in Web.config.
    [ServiceContract(Name = "MixMatch", Namespace = "http://xonline.mix.match.contracts/V1")]
    public interface IMixMatchV1
    {
        [OperationContract(Name = "ConfigureMatchmaking")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        ConfigureMatchResultV1 ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Contracts\DataContractV1.cs ===
﻿using System;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;

namespace xonline.mix.match.contract
{
    [DataContract(Name = "ConfigureMatchResult", Namespace = "http://xonline.mix.match.contracts/V1")]
    public enum ConfigureMatchResultV1
    {
        [EnumMember]
        Success = 0,
        [EnumMember]
        Failure = 1
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Service\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Service\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Contracts\obj\i386\MixMatchProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.match.contracts/V1", ClrNamespace="xonline.mix.match.contracts.V1")]

namespace xonline.mix.match.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigureMatchResult", Namespace="http://xonline.mix.match.contracts/V1")]
    public enum ConfigureMatchResult : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 1,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.match.contracts/V1", ConfigurationName="MixMatch")]
public interface MixMatch
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmaking", ReplyAction="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmakingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmakingValidationFaul" +
        "t", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmakingMixClientFault" +
        "Fault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.match.contracts.V1.ConfigureMatchResult ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixMatchChannel : MixMatch, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixMatchClient : System.ServiceModel.ClientBase<MixMatch>, MixMatch
{
    
    public MixMatchClient()
    {
    }
    
    public MixMatchClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixMatchClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixMatchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixMatchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.match.contracts.V1.ConfigureMatchResult ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets)
    {
        return base.Channel.ConfigureMatchmaking(titleId, removeMode, dropTable, noReload, overrideBuckets);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Service\global.asax.cs ===
using System;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.mix.common;

namespace xonline.mix.match.service
{
    public class MixMatchApp : SoapFrontEndApp
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MixMatchApp()
            : base()
        {

        }

        public override void Application_Start(object sender, EventArgs eventArgs)
        {
            //Call the base 
            base.Application_Start(sender, eventArgs);

            EventBuilder.ShowSGInfo = false;
            // Custom start code
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(OnXomControlRequest);
        }
        /// <summary>
        /// Event handler for the Xmgmt control request event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public void OnXomControlRequest(object sender, ControlRequestEventArgs args)
        {
            //TODO add xmgmt control command parsing logic and code
            //Is there any thing to reload, cancel? 
        }
        /// <summary>
        /// Error handling for Mix will happen using MixError handler
        /// On Error is not capable of catching FaultExceptions
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ea"></param>
        public override void Application_OnError(object sender, EventArgs ea)
        {
            //We handle errors in the MixErrorHandler
        }

        public override void Application_EndRequest(object sender, EventArgs ea)
        {
            //We dont need to reformat any response
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Service\MixMatchV1.svc.cs ===
﻿using System.Collections.Generic;
using System.ServiceModel.Activation;

using xonline.mix.match.contract;
using xonline.common.service;
using xonline.common.config;
using xonline.common.installer;
using xonline.common.mgmt;
using xonline.server.webcache.common;

[assembly: XomIisInstallerAttribute(Interface.mixmatch)]
[assembly: ConfigAttribute(Component.mixmatch)]
[assembly: XomAreaDefinition(XomAreaName.log)]

namespace xonline.mix.match.service
{
    // NOTE: If you change the class name "MixOfferManagement" here, you must also update the reference to "MixOfferManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixMatchV1 : IMixMatchV1
    {
        public ConfigureMatchResultV1 ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets)
        {
            ConfigureMatchResultV1 result = ConfigureMatchResultV1.Success;

            try
            {
                try
                {
                    Utilities.Instance.CheckAPI(MixMatch.ConfigureMatchmakingApiName);
                }
                catch (XboxWebInternalException ex)
                {
                    throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERINVALID, string.Format("Partner Validation did not pass, WebSG header information missing {0}", ex.Message), false);
                }
                catch (XboxWebException ex)
                {
                    //catches incorrect IP information
                    throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERINVALID, string.Format("Partner Validation did not pass, WebSG header information missing {0}", ex.Message), false);
                }
                catch (KeyNotFoundException ex)
                {
                    throw new XRLException(HResult.XONLINE_E_MIX_WEBSGVALIDATIONERROR, XEvent.Id.MIX_WEBSGVALIDATION_HEADERMISSING, string.Format("Partner Validation did not pass, WebSG header information invalid {0}", ex.Message), false);
                }

                result = MixMatch.ConfigureMatchmaking(titleId, removeMode, dropTable, noReload, overrideBuckets);
            }
            finally
            {
                // Logging API name and input parameters
                string appLog = string.Join(xonline.mix.common.MixConstants.AppLogSeparator, new string[]
                {
                    // API name
                    MixMatch.ConfigureMatchmakingApiName,
                    // Input params
                    titleId.ToString(),
                    removeMode.ToString(),
                    dropTable.ToString(),
                    noReload.ToString(),
                    overrideBuckets.ToString()
                });

                Xom.Log(XomAreaName.log, appLog);
            }

            return result;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Contracts\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Contracts\objd\i386\MixMatchProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.match.contracts/V1", ClrNamespace="xonline.mix.match.contracts.V1")]

namespace xonline.mix.match.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ConfigureMatchResult", Namespace="http://xonline.mix.match.contracts/V1")]
    public enum ConfigureMatchResult : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Success = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Failure = 1,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.match.contracts/V1", ConfigurationName="MixMatch")]
public interface MixMatch
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmaking", ReplyAction="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmakingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmakingValidationFaul" +
        "t", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.match.contracts/V1/MixMatch/ConfigureMatchmakingMixClientFault" +
        "Fault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.match.contracts.V1.ConfigureMatchResult ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixMatchChannel : MixMatch, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixMatchClient : System.ServiceModel.ClientBase<MixMatch>, MixMatch
{
    
    public MixMatchClient()
    {
    }
    
    public MixMatchClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixMatchClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixMatchClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixMatchClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.match.contracts.V1.ConfigureMatchResult ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets)
    {
        return base.Channel.ConfigureMatchmaking(titleId, removeMode, dropTable, noReload, overrideBuckets);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Contracts\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Contracts\DataContractV1.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using Microsoft.Practices.EnterpriseLibrary.Validation;

namespace xonline.mix.offermanagement.contract
{
    /// <summary>
    /// Game offer for a product.
    /// None of the Contracts under go inheritence, hence we dont need to use self validation here
    /// </summary>
    [DataContract(Name = "Offer", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public class OfferV1
    {
        /// <summary>
        /// Id of product offer is for.  
        /// NOTE: Product was formerly referred to as media.
        /// </summary>
        [DataMember(Name = "ProductId", IsRequired = true)]
        public Guid ProductId { get; set; }

        /// <summary>
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "OfferId", IsRequired = true)]
        public Guid OfferId { get; set; }

        /// <summary>
        /// Legacy 64-bit offer id for in-game API support
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "LiveOfferId", IsRequired = true)]
        public long LiveOfferId { get; set; }

        [DataMember(Name = "Name", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.OfferNameMin, MixConstants.StringLengths.OfferNameMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.OfferTag)]
        public string Name { get; set; }

        /// <summary>
        /// Array of offer instances
        /// </summary>
        [DataMember(Name = "Instances", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.OfferTag)]
        [ObjectCollectionValidator(typeof(OfferInstanceV1))]
        public OfferInstanceV1[] Instances { get; set; }

        /// <summary>
        /// Array of store ids.  Ids could be for Xbox, Zune, etc.
        /// </summary>
        [DataMember(Name = "StoreIds", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.OfferTag)]
        public int[] StoreIds { get; set; }

        /// <summary>
        /// Type of the Offer.Subscription/One time purchase
        /// </summary>
        [DataMember(Name = "OfferType", IsRequired = true)]
        public int offerType { get; set; }

        /// <summary>
        /// Relationships for Offers.Only subscription Offer will have relationships
        /// </summary>
        [DataMember(Name = "OfferRelationShips", IsRequired = false)]
        public OfferRelationShipV1[] OfferRelationShips { get; set; }
    }

    /// <summary>
    /// Instance of an offer
    /// </summary>
    [DataContract(Name = "OfferInstance", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public class OfferInstanceV1
    {
        /// <summary>
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "OfferInstanceId", IsRequired = true)]
        public Guid OfferInstanceId { get; set; }

        /// <summary>
        /// E.g. "US", "FR"
        /// </summary>
        [DataMember(Name = "CountryCode", IsRequired = true)]
        [RegexValidator(MixConstants.RegExExpressions.CountryCodeRegEx, Tag = MixConstants.Tags.OfferInstanceTag, MessageTemplate = MixConstants.TemplateMessages.InvalidRegEx)]
        public string CountryCode { get; set; }

        [DataMember(Name = "PaymentPrice", IsRequired = true)]
        public decimal PaymentPrice { get; set; }

        [DataMember(Name = "WholeSalePrice", IsRequired = true)]
        public decimal WholeSalePrice { get; set; }

        [DataMember(Name = "SuggestedRetailPrice", IsRequired = true)]
        public decimal SuggestedRetailPrice { get; set; }

        [DataMember(Name = "PaymentPriceCurrencyCode", IsRequired = true)]
        [RegexValidator(MixConstants.RegExExpressions.CurrencyCodeRegEx, Tag = MixConstants.Tags.OfferInstanceTag, MessageTemplate = MixConstants.TemplateMessages.InvalidRegEx)]
        public string PaymentPriceCurrencyCode { get; set; }

        /// <summary>
        /// Id for points, token, credit card, etc.
        /// </summary>
        [DataMember(Name = "PaymentTypeId", IsRequired = true)]
        public int PaymentTypeId { get; set; }

        [DataMember(Name = "StartDate", IsRequired = true)]
        public DateTime StartDate { get; set; }

        [DataMember(Name = "EndDate", IsRequired = true)]
        public DateTime EndDate { get; set; }

        /// <summary>
        /// Array of packages (product/media instances)
        /// </summary>
        [DataMember(Name = "Packages", IsRequired = false)]
        [ObjectCollectionValidator(typeof(OfferPackageV1))]
        public OfferPackageV1[] Packages { get; set; }

        [DataMember(Name = "ExternalOfferInstanceId", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.OfferInstanceTag, MessageTemplate = MixConstants.TemplateMessages.InvalidExtOfferInstanceCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.ExternalOfferInstanceIdMin, MixConstants.StringLengths.ExternalOfferInstanceIdMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.OfferInstanceTag)]
        public string ExternalOfferInstanceId { get; set; }

        /// <summary>
        /// OfferProducts will have an array of Products that have no Packages/Instances that are part of this offer, 
        /// like a PointsBundle offer or a Subscription
        /// </summary>
        [DataMember(Name = "OfferProducts", IsRequired = false)]
        [ObjectCollectionValidator(typeof(OfferProductV1))]
        public OfferProductV1[] OfferProducts { get; set; }

        [DataMember(Name = "UserTypeIds", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.OfferInstanceTag)]
        public int[] UserTypeIds { get; set; }

        /// <summary>
        /// E.g. Default, NoEnumerateInPartnernet, NeverEnumerate
        /// </summary>
        [DataMember(Name = "VisibilityLevelId", IsRequired = true)]
        [DomainValidator(1, 2, 3, MessageTemplate = MixConstants.TemplateMessages.InvalidDomainString, Tag = MixConstants.Tags.OfferInstanceTag)]
        public int VisibilityLevelId { get; set; }
    }

    [DataContract(Name = "OfferPackage", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public class OfferPackageV1
    {
        /// <summary>
        /// Id corresponds to product/media instance
        /// </summary>
        [DataMember(Name = "PackageId", IsRequired = true)]
        public Guid PackageId { get; set; }

        [DataMember(Name = "ProviderId", IsRequired = true)]
        public int ProviderId { get; set; }

        [DataMember(Name = "LicenseExtensionBits", IsRequired = true)]
        public int LicenseExtensionBits { get; set; }

        [DataMember(Name = "LicenseTypeId", IsRequired = true)]
        public int LicenseTypeId { get; set; }

        /// <summary>
        /// NOTE: Only used for consumables
        /// </summary>
        [DataMember(Name = "Quantity", IsRequired = false)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, int.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.OfferPackageTag)]
        public int Quantity { get; set; }

        /// <summary>
        /// E.g. Unpublished, Staging, Live, Withdrawn, Deleted
        /// </summary>
        [DataMember(Name = "VisibilityStatusId", IsRequired = true)]
        public int VisibilityStatusId { get; set; }

        /// <summary>
        /// Required for an Offer of a Bundle
        /// </summary>
        [DataMember(Name = "BundleFinancial", IsRequired = false)]
        public BundleFinancialV1 BundleFinancial { get; set; }

        
    }

    [DataContract(Name = "OfferProduct", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public class OfferProductV1
    {
        /// <summary>
        /// Id corresponds to product id
        /// </summary>
        [DataMember(Name = "ProductId", IsRequired = true)]
        public Guid ProductId { get; set; }

        //TODO:Add custom domain data validator here
        [DataMember(Name = "ProviderId", IsRequired = true)]
        public int ProviderId { get; set; }

        [DataMember(Name = "LicenseTypeId", IsRequired = true)]
        public int LicenseTypeId { get; set; }

        /// <summary>
        /// E.g. Unpublished, Staging, Live, Withdrawn, Deleted
        /// </summary>
        [DataMember(Name = "VisibilityStatusId", IsRequired = true)]
        public int VisibilityStatusId { get; set; }
    }

    [DataContract(Name = "OfferRelationShip", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public class OfferRelationShipV1
    {
        /// <summary>
        /// RelatedOfferId
        /// </summary>
        [DataMember(Name = "RelatedOfferId", IsRequired = true)]
        public Guid RelatedOfferId { get; set; }

        /// <summary>
        /// Type of Relation.Ex: Convert+prorate,Convert+timeextend,Renew,Default
        /// </summary>
        [DataMember(Name = "RelationShipType", IsRequired = true)]
        public int RelationShipType { get; set; }
    }

    /// <summary>
    /// Financial information for Bundle Offer
    /// </summary>
    [DataContract(Name = "BundleFinancial", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public class BundleFinancialV1
    {
        /// <summary>
        /// Id of product for the package  
        /// NOTE: Product was formerly referred to as media.
        /// </summary>
        [DataMember(Name = "ProductId", IsRequired = true)]
        public Guid ProductId { get; set; }

        [DataMember(Name = "PaymentPrice", IsRequired = true)]
        public decimal PaymentPrice { get; set; }

        [DataMember(Name = "WholeSalePrice", IsRequired = true)]
        public decimal WholeSalePrice { get; set; }

        [DataMember(Name = "SuggestedRetailPrice", IsRequired = true)]
        public decimal SuggestedRetailPrice { get; set; }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\Match\Service\mixmatch.cs ===
﻿using System;
using System.Data.SqlClient;
using xonline.common.config;
using xonline.common.match;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.mix.match.contract;

namespace xonline.mix.match.service
{
    public class MixMatch
    {
        public static readonly string ConfigureMatchmakingApiName = "MixMatch.ConfigureMatchmaking";

        #region ConfigureMatchmaking

        /// <summary>
        /// 
        /// </summary>
        /// <param name="titleId"></param>
        /// <param name="removeMode"></param>
        /// <param name="dropTable"></param>
        /// <param name="noReload"></param>
        /// <param name="overrideBuckets"></param>
        /// <returns></returns>
        static public ConfigureMatchResultV1 ConfigureMatchmaking(uint titleId, bool removeMode, bool dropTable, bool noReload, bool overrideBuckets)
        {
            // Verify titleid is not 0
            if (titleId == 0)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_INVALID_TITLE_ID, XEvent.Id.MIX_TITLEMANAGEMENT_INVALID_TITLE_ID, "TitleId of 0 is not supported.");
            }

            MatchGameConfig matchGameConfig = null;
            MatchLtcConfig matchLtcConfig = null;

            MatchAdmin.PrepLiveTitleConfig(titleId, out matchLtcConfig, false /*fRequireBuckets*/);
            MatchAdmin.PrepGameConfig(titleId, out matchGameConfig);

            ConfigureMatchResultV1 returnCode = ConfigureMatchResultV1.Success;

            try
            {
                string newModeServer = null;
                if (Config.Environment.ToLower() != "prodnet")
                {
                    newModeServer = Config.GetSetting("mix_default_MatchServer"); 
                }

                MatchAdmin.ConfigureTitle(
                        matchGameConfig,
                        matchLtcConfig,
                        newModeServer,
                        removeMode,
                        dropTable,
                        !noReload, // ConfigureTitle takes the parameter "reload", while we use the opposite "noReload"
                        overrideBuckets,
                        null);
            }
            catch (ExceptionWithEventId e)
            {
                if (e.EventId == XEvent.Id.COMMON_CONFIG_MATCH_UNEXPECTED_MODE_IN_XLAST)
                {
                    // Log our event so that it can trigger an xladmin to step in and do this manually
                    throw new XRLException(HResult.XONLINE_E_MIX_MATCH_NEW_MODE_FOUND, XEvent.Id.MIX_MATCH_NEW_MODE_FOUND,
                        "ConfigureMatchmaking detected an XLAST was updated for title 0x" + matchGameConfig.TitleId.ToString("X") + " to add a new game mode. Matchmaking must be configured manually.");
                }
                else if (e.EventId == XEvent.Id.COMMON_CONFIG_MATCH_MISSING_MODE_IN_XLAST)
                {
                    throw new XRLException(HResult.XONLINE_E_MIX_MATCH_MISSING_REMOVE_MODE, XEvent.Id.MIX_MATCH_MISSING_REMOVE_MODE,
                        "ConfigureMatchmaking attemped to remove a mode with removeMode set to false. To successfully configure matchmaking for this title you must set removeMode to true.");
                }
                else
                {
                    throw;
                }
            }
            catch (SqlException /*e*/)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_MATCH_SQL_EXCEPTION, XEvent.Id.MIX_MATCH_SQL_EXCEPTION,
                    "ConfigureMatchmaking encountered a SqlException during execution. This may be caused by dropTable being set to false when true is required."); 
            }
            catch
            {
                throw;
            }

            if (returnCode == ConfigureMatchResultV1.Success)
                Xom.NtEvent(XEvent.Id.MIX_MATCH_SUCCESS, "Matchmaking successfully propped for titleID 0x{0:X}.", titleId);

            return returnCode;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Service\global.asax.cs ===
using System;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.mix.common;


namespace xonline.mix.offermanagement.service
{
    public class MixOfferManagementApp : SoapFrontEndApp
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MixOfferManagementApp()
            : base()
        {

        }

        public override void Application_Start(object sender, EventArgs eventArgs)
        {
            //Call the base 
            base.Application_Start(sender, eventArgs);

            EventBuilder.ShowSGInfo = false;
            // Custom start code
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(OnXomControlRequest);

        }
        /// <summary>
        /// Event handler for the Xmgmt control request event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public void OnXomControlRequest(object sender, ControlRequestEventArgs args)
        {
            //TODO add xmgmt control command parsing logic and code
            //Is there any thing to reload, cancel? 
        }
        /// <summary>
        /// Error handling for Mix will happen using MixError handler
        /// On Error is not capable of catching FaultExceptions
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ea"></param>
        public override void Application_OnError(object sender, EventArgs ea)
        {
            //We handle errors in the MixErrorHandler
        }

        public override void Application_EndRequest(object sender, EventArgs ea)
        {
            //We dont need to reformat any response
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Contracts\ServiceContractV1.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using xonline.mix.common;
using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;


namespace xonline.mix.offermanagement.contract
{
    // NOTE: If you change the interface name "IMixOfferManagementV1" here, you must also update the reference to "IMixOfferManagementV1" in Web.config.
    [ServiceContract(Name = "MixOfferManagement", Namespace = "http://xonline.mix.offermanagement.contracts/V1")]
    public interface IMixOfferManagementV1
    {
        [OperationContract(Name="ConfigureOffer")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void ConfigureOffer(OfferV1 offer);

        [OperationContract(Name="GetOffer")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        OfferV1 GetOffer(Guid offerId);

        [OperationContract(Name="GetSignedHeader")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        byte[] GetSignedHeader(uint fileSize, uint fileType, byte[] fileHash);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Contracts\objd\i386\MixOfferManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.offermanagement.contracts/V1", ClrNamespace="xonline.mix.offermanagement.contracts.V1")]

namespace xonline.mix.offermanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Offer", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class Offer : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferInstance[] InstancesField;
        
        private long LiveOfferIdField;
        
        private string NameField;
        
        private System.Guid OfferIdField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferRelationShip[] OfferRelationShipsField;
        
        private int OfferTypeField;
        
        private System.Guid ProductIdField;
        
        private int[] StoreIdsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.offermanagement.contracts.V1.OfferInstance[] Instances
        {
            get
            {
                return this.InstancesField;
            }
            set
            {
                this.InstancesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long LiveOfferId
        {
            get
            {
                return this.LiveOfferIdField;
            }
            set
            {
                this.LiveOfferIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid OfferId
        {
            get
            {
                return this.OfferIdField;
            }
            set
            {
                this.OfferIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.OfferRelationShip[] OfferRelationShips
        {
            get
            {
                return this.OfferRelationShipsField;
            }
            set
            {
                this.OfferRelationShipsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int OfferType
        {
            get
            {
                return this.OfferTypeField;
            }
            set
            {
                this.OfferTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] StoreIds
        {
            get
            {
                return this.StoreIdsField;
            }
            set
            {
                this.StoreIdsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferInstance", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferInstance : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CountryCodeField;
        
        private System.DateTime EndDateField;
        
        private string ExternalOfferInstanceIdField;
        
        private System.Guid OfferInstanceIdField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferProduct[] OfferProductsField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferPackage[] PackagesField;
        
        private decimal PaymentPriceField;
        
        private string PaymentPriceCurrencyCodeField;
        
        private int PaymentTypeIdField;
        
        private System.DateTime StartDateField;
        
        private decimal SuggestedRetailPriceField;
        
        private int[] UserTypeIdsField;
        
        private int VisibilityLevelIdField;
        
        private decimal WholeSalePriceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CountryCode
        {
            get
            {
                return this.CountryCodeField;
            }
            set
            {
                this.CountryCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime EndDate
        {
            get
            {
                return this.EndDateField;
            }
            set
            {
                this.EndDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalOfferInstanceId
        {
            get
            {
                return this.ExternalOfferInstanceIdField;
            }
            set
            {
                this.ExternalOfferInstanceIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid OfferInstanceId
        {
            get
            {
                return this.OfferInstanceIdField;
            }
            set
            {
                this.OfferInstanceIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.OfferProduct[] OfferProducts
        {
            get
            {
                return this.OfferProductsField;
            }
            set
            {
                this.OfferProductsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.OfferPackage[] Packages
        {
            get
            {
                return this.PackagesField;
            }
            set
            {
                this.PackagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal PaymentPrice
        {
            get
            {
                return this.PaymentPriceField;
            }
            set
            {
                this.PaymentPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string PaymentPriceCurrencyCode
        {
            get
            {
                return this.PaymentPriceCurrencyCodeField;
            }
            set
            {
                this.PaymentPriceCurrencyCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PaymentTypeId
        {
            get
            {
                return this.PaymentTypeIdField;
            }
            set
            {
                this.PaymentTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime StartDate
        {
            get
            {
                return this.StartDateField;
            }
            set
            {
                this.StartDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal SuggestedRetailPrice
        {
            get
            {
                return this.SuggestedRetailPriceField;
            }
            set
            {
                this.SuggestedRetailPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] UserTypeIds
        {
            get
            {
                return this.UserTypeIdsField;
            }
            set
            {
                this.UserTypeIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityLevelId
        {
            get
            {
                return this.VisibilityLevelIdField;
            }
            set
            {
                this.VisibilityLevelIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal WholeSalePrice
        {
            get
            {
                return this.WholeSalePriceField;
            }
            set
            {
                this.WholeSalePriceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferRelationShip", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferRelationShip : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid RelatedOfferIdField;
        
        private int RelationShipTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid RelatedOfferId
        {
            get
            {
                return this.RelatedOfferIdField;
            }
            set
            {
                this.RelatedOfferIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RelationShipType
        {
            get
            {
                return this.RelationShipTypeField;
            }
            set
            {
                this.RelationShipTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferProduct", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferProduct : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int LicenseTypeIdField;
        
        private System.Guid ProductIdField;
        
        private int ProviderIdField;
        
        private int VisibilityStatusIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LicenseTypeId
        {
            get
            {
                return this.LicenseTypeIdField;
            }
            set
            {
                this.LicenseTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ProviderId
        {
            get
            {
                return this.ProviderIdField;
            }
            set
            {
                this.ProviderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityStatusId
        {
            get
            {
                return this.VisibilityStatusIdField;
            }
            set
            {
                this.VisibilityStatusIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferPackage", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferPackage : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.offermanagement.contracts.V1.BundleFinancial BundleFinancialField;
        
        private int LicenseExtensionBitsField;
        
        private int LicenseTypeIdField;
        
        private System.Guid PackageIdField;
        
        private int ProviderIdField;
        
        private int QuantityField;
        
        private int VisibilityStatusIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.BundleFinancial BundleFinancial
        {
            get
            {
                return this.BundleFinancialField;
            }
            set
            {
                this.BundleFinancialField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LicenseExtensionBits
        {
            get
            {
                return this.LicenseExtensionBitsField;
            }
            set
            {
                this.LicenseExtensionBitsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LicenseTypeId
        {
            get
            {
                return this.LicenseTypeIdField;
            }
            set
            {
                this.LicenseTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid PackageId
        {
            get
            {
                return this.PackageIdField;
            }
            set
            {
                this.PackageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ProviderId
        {
            get
            {
                return this.ProviderIdField;
            }
            set
            {
                this.ProviderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity
        {
            get
            {
                return this.QuantityField;
            }
            set
            {
                this.QuantityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityStatusId
        {
            get
            {
                return this.VisibilityStatusIdField;
            }
            set
            {
                this.VisibilityStatusIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BundleFinancial", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class BundleFinancial : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private decimal PaymentPriceField;
        
        private System.Guid ProductIdField;
        
        private decimal SuggestedRetailPriceField;
        
        private decimal WholeSalePriceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal PaymentPrice
        {
            get
            {
                return this.PaymentPriceField;
            }
            set
            {
                this.PaymentPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal SuggestedRetailPrice
        {
            get
            {
                return this.SuggestedRetailPriceField;
            }
            set
            {
                this.SuggestedRetailPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal WholeSalePrice
        {
            get
            {
                return this.WholeSalePriceField;
            }
            set
            {
                this.WholeSalePriceField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.offermanagement.contracts/V1", ConfigurationName="MixOfferManagement")]
public interface MixOfferManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "", ReplyAction="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "MixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "ValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void ConfigureOffer(xonline.mix.offermanagement.contracts.V1.Offer offer);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOffer", ReplyAction="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOfferRespon" +
        "se")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOfferValida" +
        "tionFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOfferMixCli" +
        "entFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.offermanagement.contracts.V1.Offer GetOffer(System.Guid offerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "r", ReplyAction="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "rResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "rValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "rMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    byte[] GetSignedHeader(uint fileSize, uint fileType, byte[] fileHash);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixOfferManagementChannel : MixOfferManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixOfferManagementClient : System.ServiceModel.ClientBase<MixOfferManagement>, MixOfferManagement
{
    
    public MixOfferManagementClient()
    {
    }
    
    public MixOfferManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixOfferManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixOfferManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixOfferManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void ConfigureOffer(xonline.mix.offermanagement.contracts.V1.Offer offer)
    {
        base.Channel.ConfigureOffer(offer);
    }
    
    public xonline.mix.offermanagement.contracts.V1.Offer GetOffer(System.Guid offerId)
    {
        return base.Channel.GetOffer(offerId);
    }
    
    public byte[] GetSignedHeader(uint fileSize, uint fileType, byte[] fileHash)
    {
        return base.Channel.GetSignedHeader(fileSize, fileType, fileHash);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Contracts\obj\i386\MixOfferManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.offermanagement.contracts/V1", ClrNamespace="xonline.mix.offermanagement.contracts.V1")]

namespace xonline.mix.offermanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Offer", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class Offer : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferInstance[] InstancesField;
        
        private long LiveOfferIdField;
        
        private string NameField;
        
        private System.Guid OfferIdField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferRelationShip[] OfferRelationShipsField;
        
        private int OfferTypeField;
        
        private System.Guid ProductIdField;
        
        private int[] StoreIdsField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.offermanagement.contracts.V1.OfferInstance[] Instances
        {
            get
            {
                return this.InstancesField;
            }
            set
            {
                this.InstancesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long LiveOfferId
        {
            get
            {
                return this.LiveOfferIdField;
            }
            set
            {
                this.LiveOfferIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid OfferId
        {
            get
            {
                return this.OfferIdField;
            }
            set
            {
                this.OfferIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.OfferRelationShip[] OfferRelationShips
        {
            get
            {
                return this.OfferRelationShipsField;
            }
            set
            {
                this.OfferRelationShipsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int OfferType
        {
            get
            {
                return this.OfferTypeField;
            }
            set
            {
                this.OfferTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] StoreIds
        {
            get
            {
                return this.StoreIdsField;
            }
            set
            {
                this.StoreIdsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferInstance", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferInstance : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string CountryCodeField;
        
        private System.DateTime EndDateField;
        
        private string ExternalOfferInstanceIdField;
        
        private System.Guid OfferInstanceIdField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferProduct[] OfferProductsField;
        
        private xonline.mix.offermanagement.contracts.V1.OfferPackage[] PackagesField;
        
        private decimal PaymentPriceField;
        
        private string PaymentPriceCurrencyCodeField;
        
        private int PaymentTypeIdField;
        
        private System.DateTime StartDateField;
        
        private decimal SuggestedRetailPriceField;
        
        private int[] UserTypeIdsField;
        
        private int VisibilityLevelIdField;
        
        private decimal WholeSalePriceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string CountryCode
        {
            get
            {
                return this.CountryCodeField;
            }
            set
            {
                this.CountryCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime EndDate
        {
            get
            {
                return this.EndDateField;
            }
            set
            {
                this.EndDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExternalOfferInstanceId
        {
            get
            {
                return this.ExternalOfferInstanceIdField;
            }
            set
            {
                this.ExternalOfferInstanceIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid OfferInstanceId
        {
            get
            {
                return this.OfferInstanceIdField;
            }
            set
            {
                this.OfferInstanceIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.OfferProduct[] OfferProducts
        {
            get
            {
                return this.OfferProductsField;
            }
            set
            {
                this.OfferProductsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.OfferPackage[] Packages
        {
            get
            {
                return this.PackagesField;
            }
            set
            {
                this.PackagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal PaymentPrice
        {
            get
            {
                return this.PaymentPriceField;
            }
            set
            {
                this.PaymentPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string PaymentPriceCurrencyCode
        {
            get
            {
                return this.PaymentPriceCurrencyCodeField;
            }
            set
            {
                this.PaymentPriceCurrencyCodeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PaymentTypeId
        {
            get
            {
                return this.PaymentTypeIdField;
            }
            set
            {
                this.PaymentTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime StartDate
        {
            get
            {
                return this.StartDateField;
            }
            set
            {
                this.StartDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal SuggestedRetailPrice
        {
            get
            {
                return this.SuggestedRetailPriceField;
            }
            set
            {
                this.SuggestedRetailPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] UserTypeIds
        {
            get
            {
                return this.UserTypeIdsField;
            }
            set
            {
                this.UserTypeIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityLevelId
        {
            get
            {
                return this.VisibilityLevelIdField;
            }
            set
            {
                this.VisibilityLevelIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal WholeSalePrice
        {
            get
            {
                return this.WholeSalePriceField;
            }
            set
            {
                this.WholeSalePriceField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferRelationShip", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferRelationShip : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid RelatedOfferIdField;
        
        private int RelationShipTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid RelatedOfferId
        {
            get
            {
                return this.RelatedOfferIdField;
            }
            set
            {
                this.RelatedOfferIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RelationShipType
        {
            get
            {
                return this.RelationShipTypeField;
            }
            set
            {
                this.RelationShipTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferProduct", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferProduct : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private int LicenseTypeIdField;
        
        private System.Guid ProductIdField;
        
        private int ProviderIdField;
        
        private int VisibilityStatusIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LicenseTypeId
        {
            get
            {
                return this.LicenseTypeIdField;
            }
            set
            {
                this.LicenseTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ProviderId
        {
            get
            {
                return this.ProviderIdField;
            }
            set
            {
                this.ProviderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityStatusId
        {
            get
            {
                return this.VisibilityStatusIdField;
            }
            set
            {
                this.VisibilityStatusIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="OfferPackage", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class OfferPackage : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.offermanagement.contracts.V1.BundleFinancial BundleFinancialField;
        
        private int LicenseExtensionBitsField;
        
        private int LicenseTypeIdField;
        
        private System.Guid PackageIdField;
        
        private int ProviderIdField;
        
        private int QuantityField;
        
        private int VisibilityStatusIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.offermanagement.contracts.V1.BundleFinancial BundleFinancial
        {
            get
            {
                return this.BundleFinancialField;
            }
            set
            {
                this.BundleFinancialField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LicenseExtensionBits
        {
            get
            {
                return this.LicenseExtensionBitsField;
            }
            set
            {
                this.LicenseExtensionBitsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int LicenseTypeId
        {
            get
            {
                return this.LicenseTypeIdField;
            }
            set
            {
                this.LicenseTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid PackageId
        {
            get
            {
                return this.PackageIdField;
            }
            set
            {
                this.PackageIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int ProviderId
        {
            get
            {
                return this.ProviderIdField;
            }
            set
            {
                this.ProviderIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Quantity
        {
            get
            {
                return this.QuantityField;
            }
            set
            {
                this.QuantityField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityStatusId
        {
            get
            {
                return this.VisibilityStatusIdField;
            }
            set
            {
                this.VisibilityStatusIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BundleFinancial", Namespace="http://xonline.mix.offermanagement.contracts/V1")]
    public partial class BundleFinancial : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private decimal PaymentPriceField;
        
        private System.Guid ProductIdField;
        
        private decimal SuggestedRetailPriceField;
        
        private decimal WholeSalePriceField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal PaymentPrice
        {
            get
            {
                return this.PaymentPriceField;
            }
            set
            {
                this.PaymentPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal SuggestedRetailPrice
        {
            get
            {
                return this.SuggestedRetailPriceField;
            }
            set
            {
                this.SuggestedRetailPriceField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public decimal WholeSalePrice
        {
            get
            {
                return this.WholeSalePriceField;
            }
            set
            {
                this.WholeSalePriceField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.offermanagement.contracts/V1", ConfigurationName="MixOfferManagement")]
public interface MixOfferManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "", ReplyAction="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "MixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/ConfigureOffer" +
        "ValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void ConfigureOffer(xonline.mix.offermanagement.contracts.V1.Offer offer);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOffer", ReplyAction="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOfferRespon" +
        "se")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOfferMixCli" +
        "entFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetOfferValida" +
        "tionFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.offermanagement.contracts.V1.Offer GetOffer(System.Guid offerId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "r", ReplyAction="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "rResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "rValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.offermanagement.contracts/V1/MixOfferManagement/GetSignedHeade" +
        "rMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    byte[] GetSignedHeader(uint fileSize, uint fileType, byte[] fileHash);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixOfferManagementChannel : MixOfferManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixOfferManagementClient : System.ServiceModel.ClientBase<MixOfferManagement>, MixOfferManagement
{
    
    public MixOfferManagementClient()
    {
    }
    
    public MixOfferManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixOfferManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixOfferManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixOfferManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void ConfigureOffer(xonline.mix.offermanagement.contracts.V1.Offer offer)
    {
        base.Channel.ConfigureOffer(offer);
    }
    
    public xonline.mix.offermanagement.contracts.V1.Offer GetOffer(System.Guid offerId)
    {
        return base.Channel.GetOffer(offerId);
    }
    
    public byte[] GetSignedHeader(uint fileSize, uint fileType, byte[] fileHash)
    {
        return base.Channel.GetSignedHeader(fileSize, fileType, fileHash);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Contracts\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Contracts\ServiceContractV1.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.ServiceModel;
using System.ServiceModel.Activation;
using xonline.mix.common;
using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;

namespace xonline.mix.productmanagement.contract
{
    [ServiceContract(Name = "MixProductManagement", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public interface IMixProductManagementV1
    {
        
        [OperationContract(Name="ConfigureProduct")]
        [FaultContract(typeof(MixClientFault))]
        //Setting the namespace to be same as that of MixClientFault
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void ConfigureProduct(ProductV1 product);

        [OperationContract(Name="GetProduct")]
        [FaultContract(typeof(MixClientFault))]
        //Setting the namespace to be same as that of MixClientFault
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        ProductV1 GetProduct(Guid id);
        
        //[OperationContract]
        //HealthCheckInfo GetProductHealth(Guid id);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Contracts\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Service\mixoffermanagement.cs ===
﻿//------------------------------------------------------------
// Copyright (c) Microsoft Corporation. All rights reserved.
//------------------------------------------------------------ 

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.ServiceModel;
using System.Text;
using Microsoft.Webstore.WstClient;
using xonline.common.config;
using xonline.common.marketplace.catalog;
using xonline.common.offerutil;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.utilities;
using xonline.mix.offermanagement.contract;


namespace xonline.mix.offermanagement.service
{
    public class MixOfferManagement
    {
        public static readonly string ConfigureOfferApiName = "OfferManagement.ConfigureOffer";
        public static readonly string GetOfferApiName = "OfferManagement.GetOffer";
        public static readonly string GetSignedHeaderApiName = "OfferManagement.GetSignedHeader";

        // disallow creating of offer for these media types, can be empty if there is no setting yet
        // DO NOT CALL THIS DIRECTLY, use the InternalNonOfferTypes accessor
        volatile static HashSet<int> nonOfferTypes;

        static bool initialized = false;
        static readonly object syncObj = new object();

        /// <summary>
        /// Enumerator of a set of MediaTypes that do not allow offers to be created for
        /// </summary>
        public static IEnumerator<int> NonOfferTypes { get { return InternalNonOfferTypes.GetEnumerator(); } }
        static HashSet<int> InternalNonOfferTypes
        {
            get
            {
                if (initialized == false)
                {
                    lock (syncObj)
                    {
                        if (initialized == false)
                        {
                            nonOfferTypes = ReadNonOfferTypes(Config.GetMultiSetting(MultiSetting.mix_offerMgmt_nonOfferType));

                            Config.MultiSettingChange += new MultiSettingChangeEventHandler(MultiSettingsChanged);
                            initialized = true;
                        }
                    }
                }
                return nonOfferTypes;
            }
        }

        #region Init helpers
        public static void MultiSettingsChanged(object sender, MultiSettingChangeEventArgs eventArgs)
        {
            switch (eventArgs.MultiSetting)
            {
                case MultiSetting.mix_offerMgmt_nonOfferType:
                    // Swap out real quick like
                    nonOfferTypes = ReadNonOfferTypes(eventArgs.ValueNew);
                    break;
            }
        }

        static HashSet<int> ReadNonOfferTypes(string[] types)
        {

            HashSet<int> numTypes = new HashSet<int>();

            foreach (string type in types)
            {
                numTypes.Add(Int32.Parse(type));
            }

            return numTypes;
        }
        #endregion

        #region GetOffer

        /// <summary>
        /// Return an offer
        /// </summary>
        /// <param name="offerId"></param>
        /// <returns></returns>
        static public OfferV1 GetOffer(Guid offerId)
        {

            OfferV1 mixOffer = new OfferV1();

            RawCatalogDBEntities catalog = null;

            try
            {
                catalog = new RawCatalogDBEntities(CatalogDatabase.RawCatalogDBConnectionString);

                Offer catalogOffer = catalog.GetPrimitiveOfferOrThrow(offerId);

                if (catalogOffer.Media == null && !catalogOffer.MediaReference.IsLoaded)
                {
                    catalogOffer.MediaReference.Load();
                }

                if (catalogOffer.OfferType == null && !catalogOffer.OfferTypeReference.IsLoaded)
                {
                    catalogOffer.OfferTypeReference.Load();
                }

                mixOffer.ProductId = catalogOffer.Media.mediaId;
                mixOffer.OfferId = offerId;
                mixOffer.Name = catalogOffer.name;
                mixOffer.offerType = catalogOffer.OfferType.offerTypeId;

                LegacyOfferMapping catalogLegacyOfferMapping = catalog.GetPrimitiveLegacyOfferMappingOrThrow(offerId);
                mixOffer.LiveOfferId = catalogLegacyOfferMapping.liveOfferId;

                LoadOfferInstances(catalog, mixOffer);

                LoadStoreIds(catalog, mixOffer);

                LoadOfferRelationShips(catalog, mixOffer);
            }
            catch (System.Data.EntityException ex)
            {
                if (ex.InnerException != null)
                {
                    throw new XRLException(HResult.XONLINE_E_MIX_ENTITYFRAMEWORK_CONNECTION_ERROR, XEvent.Id.MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR, string.Format("Entity Framework Model does not match up to the current catalog schema.  Exception generating entities from SQL {0}", ex.InnerException.Message), true);
                }

                throw new XRLException(HResult.XONLINE_E_MIX_ENTITYFRAMEWORK_CONNECTION_ERROR, XEvent.Id.MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR, string.Format("Entity Framework Model does not match up to the current catalog schema.  Exception generating entities from SQL {0}", ex.Message), true);
            }

            return mixOffer;
        }

        /// <summary>
        /// Load the offer instances for an offer
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOffer"></param>
        static void LoadOfferInstances(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            List<OfferInstanceV1> mixOfferInstances = new List<OfferInstanceV1>();

            MediaType catalogMediaType = catalog.GetPrimitiveMediaTypeOrThrow(mixOffer.ProductId);

            foreach (OfferInstance catalogOfferInstance in catalog.OfferInstance.Where(oi => oi.Offer.offerId == mixOffer.OfferId))
            {
                OfferInstanceV1 mixOfferInstance = new OfferInstanceV1();

                // Load references from database if not written locally, and not already loaded
                if (catalogOfferInstance.Country == null && !catalogOfferInstance.CountryReference.IsLoaded)
                {
                    catalogOfferInstance.CountryReference.Load();
                }
                if (catalogOfferInstance.Currency == null && !catalogOfferInstance.CurrencyReference.IsLoaded)
                {
                    catalogOfferInstance.CurrencyReference.Load();
                }
                if (catalogOfferInstance.PaymentType == null && !catalogOfferInstance.PaymentTypeReference.IsLoaded)
                {
                    catalogOfferInstance.PaymentTypeReference.Load();
                }

                mixOfferInstance.OfferInstanceId = catalogOfferInstance.offerInstanceId;
                mixOfferInstance.CountryCode = catalogOfferInstance.Country.countryCode;
                mixOfferInstance.PaymentPrice = catalogOfferInstance.price;
                mixOfferInstance.WholeSalePrice = catalogOfferInstance.wholesalePrice;
                mixOfferInstance.SuggestedRetailPrice = catalogOfferInstance.suggestedRetailPrice;
                mixOfferInstance.PaymentPriceCurrencyCode = catalogOfferInstance.Currency.currencyCode;
                mixOfferInstance.PaymentTypeId = catalogOfferInstance.PaymentType.paymentTypeId;
                mixOfferInstance.StartDate = catalogOfferInstance.startDateTime;
                mixOfferInstance.EndDate = catalogOfferInstance.endDateTime;
                mixOfferInstance.ExternalOfferInstanceId = catalogOfferInstance.externalOfferInstanceId;

                LoadPackages(catalog, mixOfferInstance, catalogMediaType);

                LoadOfferProducts(catalog, mixOfferInstance);

                LoadUserTypeIds(catalog, mixOfferInstance);

                if (!catalogOfferInstance.VisibilityLevelReference.IsLoaded)
                {
                    catalogOfferInstance.VisibilityLevelReference.Load();
                }
                mixOfferInstance.VisibilityLevelId = catalogOfferInstance.VisibilityLevel.visibilityLevelId;

                mixOfferInstances.Add(mixOfferInstance);
            }

            mixOffer.Instances = mixOfferInstances.ToArray<OfferInstanceV1>();
        }

        /// <summary>
        /// Load the offer packages for an offer instance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferInstance"></param>
        /// <param name="catalogMediaType"></param>
        static void LoadPackages(RawCatalogDBEntities catalog, OfferInstanceV1 mixOfferInstance, MediaType catalogMediaType)
        {

            List<OfferPackageV1> mixOfferPackages = new List<OfferPackageV1>();

            var q = (from o in catalog.Offer
                     join oi in catalog.OfferInstance on o.offerId equals oi.Offer.offerId
                     join oimi in catalog.OfferInstanceMediaInstance on oi.offerInstanceId equals oimi.offerInstanceId
                     join gci in catalog.GameContentInstance on oimi.mediaInstanceId equals gci.gameContentInstanceId
                     join oigci in catalog.OfferInstanceGameContentInstance on oimi.mediaInstanceId equals oigci.gameContentInstanceId
                     where mixOfferInstance.OfferInstanceId == oi.offerInstanceId
                     && oi.offerInstanceId == oigci.offerInstanceId
                     select new { oi.offerInstanceId, gci.gameContentInstanceId, oimi.Provider.providerId, oigci.licenseExtensionBits, oimi.LicenseType.licenseTypeId, oimi.VisibilityStatus.visibilityStatusId }).Distinct();

            if (catalogMediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.App)
            {
                q = (from o in catalog.Offer
                     join oi in catalog.OfferInstance on o.offerId equals oi.Offer.offerId
                     join oimi in catalog.OfferInstanceMediaInstance on oi.offerInstanceId equals oimi.offerInstanceId
                     where mixOfferInstance.OfferInstanceId == oi.offerInstanceId
                     select new
                     {
                         oi.offerInstanceId,
                         gameContentInstanceId = oimi.mediaInstanceId,
                         oimi.Provider.providerId,
                         licenseExtensionBits = 0,
                         oimi.LicenseType.licenseTypeId,
                         oimi.VisibilityStatus.visibilityStatusId
                     }).Distinct();
            }

            foreach (var qElem in q)
            {
                OfferPackageV1 mixOfferPackage = new OfferPackageV1();

                mixOfferPackage.PackageId = qElem.gameContentInstanceId;
                mixOfferPackage.ProviderId = qElem.providerId;
                mixOfferPackage.LicenseExtensionBits = qElem.licenseExtensionBits; 
                mixOfferPackage.LicenseTypeId = qElem.licenseTypeId;
                mixOfferPackage.VisibilityStatusId = qElem.visibilityStatusId;

                // Lookup quantity if consumable
                if (catalogMediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.GameConsumable ||
                    catalogMediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.MobileConsumable)
                {
                    OfferInstanceGameContentInstanceAsset offerInstanceGameContentInstanceAsset = catalog.GetPrimitiveOfferInstanceGameContentInstanceAssetOrThrow(qElem.offerInstanceId, qElem.gameContentInstanceId);
                    mixOfferPackage.Quantity = offerInstanceGameContentInstanceAsset.quantity;
                }
                else
                {
                    mixOfferPackage.Quantity = 0;
                }

                mixOfferPackages.Add(mixOfferPackage);
            }

            mixOfferInstance.Packages = mixOfferPackages.ToArray<OfferPackageV1>();
        }

        /// <summary>
        /// Load the offer packages for an offer instance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferInstance"></param>
        static void LoadOfferProducts(RawCatalogDBEntities catalog, OfferInstanceV1 mixOfferInstance)
        {
            List<OfferProductV1> mixOfferProducts = new List<OfferProductV1>();

            var q = (from o in catalog.Offer
                     join oi in catalog.OfferInstance on o.offerId equals oi.Offer.offerId
                     join oim in catalog.OfferInstanceMedia on oi.offerInstanceId equals oim.offerInstanceId
                     where mixOfferInstance.OfferInstanceId == oi.offerInstanceId
                     select new { oim.mediaId, oim.Provider.providerId, oim.LicenseType.licenseTypeId, oim.VisibilityStatus.visibilityStatusId }).Distinct();
            foreach (var qElem in q)
            {
                OfferProductV1 mixOfferProduct = new OfferProductV1();

                mixOfferProduct.ProductId = qElem.mediaId;
                mixOfferProduct.ProviderId = qElem.providerId;
                mixOfferProduct.LicenseTypeId = qElem.licenseTypeId;
                mixOfferProduct.VisibilityStatusId = qElem.visibilityStatusId;

                mixOfferProducts.Add(mixOfferProduct);
            }
            mixOfferInstance.OfferProducts = mixOfferProducts.ToArray<OfferProductV1>();
        }


        static void LoadStoreIds(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            IEnumerable<int> catalogOfferStores = catalog.OfferStore.Where(os => os.offerId == mixOffer.OfferId).Select(os => os.storeId);
            mixOffer.StoreIds = catalogOfferStores.ToArray<int>();
        }

        static void LoadUserTypeIds(RawCatalogDBEntities catalog, OfferInstanceV1 mixOfferInstance)
        {

            IEnumerable<int> catalogUserTypeIds = catalog.OfferInstanceUserType.Where(oiut => oiut.offerInstanceId == mixOfferInstance.OfferInstanceId).Select(oiut => oiut.userTypeId);
            mixOfferInstance.UserTypeIds = catalogUserTypeIds.ToArray<int>();
        }

        /// <summary>
        /// Retrieves the Offer relationships from database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOffer"></param>
        static void LoadOfferRelationShips(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            OfferRelationShip[] catalogOfferRelationShips = catalog.GetPrimitiveOfferRelationShip(mixOffer.OfferId);
            OfferRelationShipV1[] offerRelationShips = new OfferRelationShipV1[catalogOfferRelationShips.Length];

            for (int i = 0; i < catalogOfferRelationShips.Length; i++)
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogOfferRelationShips[i].Offer == null && !catalogOfferRelationShips[i].OfferReference.IsLoaded)
                {
                    catalogOfferRelationShips[i].OfferReference.Load();
                }
                if (catalogOfferRelationShips[i].Offer1 == null && !catalogOfferRelationShips[i].Offer1Reference.IsLoaded)
                {
                    catalogOfferRelationShips[i].Offer1Reference.Load();
                }
                if (catalogOfferRelationShips[i].OfferRelationShipType == null && !catalogOfferRelationShips[i].OfferRelationShipTypeReference.IsLoaded)
                {
                    catalogOfferRelationShips[i].OfferRelationShipTypeReference.Load();
                }

                offerRelationShips[i] = new OfferRelationShipV1();
                offerRelationShips[i].RelatedOfferId = catalogOfferRelationShips[i].relatedOfferId;
                offerRelationShips[i].RelationShipType = catalogOfferRelationShips[i].relationshipTypeId;
            }
            mixOffer.OfferRelationShips = offerRelationShips;
        }
        #endregion

        #region ConfigureOffer

        /// <summary>
        /// Add/Update an offer
        /// </summary>
        /// <param name="mixOffer"></param>
        static public void ConfigureOffer(OfferV1 mixOffer)
        {

            RawCatalogDBEntities catalog = null;
            try
            {
                catalog = new RawCatalogDBEntities(CatalogDatabase.RawCatalogDBConnectionString);
                // Validate the Offers
                ValidateOffer(catalog, mixOffer);

                // Validate the OfferRelationships
                ValidateOfferRelationShip(catalog, mixOffer);

                Offer catalogOffer = catalog.SavePrimitiveOffer(mixOffer.OfferId, mixOffer.ProductId, mixOffer.Name, mixOffer.offerType, mixOffer.LiveOfferId);

                SaveSubscriptionOfferInstanceProductFamilyMapping(catalog, mixOffer);

                SaveOfferInstances(catalog, catalogOffer, mixOffer.Instances);

                SaveOfferStores(catalog, catalogOffer, mixOffer.StoreIds);

                SaveOfferRelationShips(catalog, mixOffer, catalogOffer);

                SaveSubscriptionsInUODB(catalog, mixOffer, catalogOffer);

                catalog.Save(catalogOffer);
            }
            catch (System.Data.OptimisticConcurrencyException ex)
            {
                //setting IsRetryable to true
                throw new XRLException(HResult.XONLINE_E_MIX_CONCURRENCY_ERROR, XEvent.Id.MIX_CONCURRENCY_ERROR, string.Format("Concurrency issue occured while saving to the Database {0}", ex.Message), true);
            }
            catch (System.Data.EntityException ex)
            {
                string msg = ex.Message;
                if (ex.InnerException != null)
                {
                    msg = ex.InnerException.Message;
                }
                throw new XRLException(HResult.XONLINE_E_MIX_ENTITYFRAMEWORK_CONNECTION_ERROR, XEvent.Id.MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR, string.Format("Entity Framework Model does not match up to the current catalog schema.  Exception generating entities from SQL {0}", msg), true);
            }
            catch (System.Data.SqlClient.SqlException ex)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_UNKNOWNERROR, XEvent.Id.MIX_COMMON_ENTITYFRAMEWORK_CONNECTION_ERROR, string.Format("Entity Framework Model does not match up to the current catalog schema.  Exception generating entities from SQL {0}", ex.Message), true);
            }
            /* Catching CatalogDB's Sql Triggers and Constraints to send out more specific messages
             * catching these based on expected exception message's text because the ExceptionType and HResult 
             * are not granular enough to pick out what kind of error this is
             * These exceptions can not occur anywhere else in mix, thus the need of public constant is not nessesary
             * */
            catch (System.Data.UpdateException ex)
            {
                if (ex.InnerException != null)
                {
                    // For catalogdb constraint CK_OfferInstance_VisibilityLevelOfPaymentType
                    if (ex.InnerException.Message.Contains("CK_OfferInstance_VisibilityLevelOfPaymentType"))
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_CATALOG_CONSTRAINT_ERROR, "Payment Type and Visibility Level combination is invalid", false);
                    }
                    else
                        // For catalogdb triggers TR_OfferInstance_UniqueOfferCountryUserType and TR_OfferInstanceUserType_UniqueOfferCountryUserType
                        // The string is the start of the exception message thrown out by both these two triggers
                        if (ex.InnerException.Message.Contains("OfferInstance for same offer, country,"))
                        {
                            throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_CATALOG_CONSTRAINT_ERROR, ex.InnerException.Message, false);
                        }
                }
                throw;
            }
        }

        /// <summary>
        /// Configure a subscription Offer
        /// </summary>
        /// <param name="mixSubscriptionOffer"></param>
        static void SaveOfferRelationShips(RawCatalogDBEntities catalog, OfferV1 mixOffer, Offer catalogOffer)
        {

            Guid[] relatedOfferIds = null;

            // Find related offer ids for deletion
            if (mixOffer.OfferRelationShips != null && mixOffer.OfferRelationShips.Length > 0)
            {
                relatedOfferIds = new Guid[mixOffer.OfferRelationShips.Length];
                for (int i = 0; i < mixOffer.OfferRelationShips.Length; i++)
                {
                    relatedOfferIds[i] = mixOffer.OfferRelationShips[i].RelatedOfferId;
                }
            }

            // Delete the relationships before we repopulate
            catalog.DeletePrimitiveOfferRelationShips(mixOffer.OfferId, (int)CatalogConstants.OfferRelationShipTypeEnum.ConvertPlusProRate, relatedOfferIds);
            catalog.DeletePrimitiveOfferRelationShips(mixOffer.OfferId, (int)CatalogConstants.OfferRelationShipTypeEnum.ConvertPlusTimeExtend, relatedOfferIds);
            catalog.DeletePrimitiveOfferRelationShips(mixOffer.OfferId, (int)CatalogConstants.OfferRelationShipTypeEnum.Renew, relatedOfferIds);
            catalog.DeletePrimitiveOfferRelationShips(mixOffer.OfferId, (int)CatalogConstants.OfferRelationShipTypeEnum.DefaultRenew, relatedOfferIds);

            // Save the OfferRelationships
            if (mixOffer.OfferRelationShips != null && mixOffer.OfferRelationShips.Length > 0)
            {
                Media media = catalog.GetPrimitiveMediaOrThrow(mixOffer.ProductId);
                if (media.MediaType == null || !media.MediaTypeReference.IsLoaded)
                {
                    media.MediaTypeReference.Load();
                }

                if (media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.AddonSubscription
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.LiveSubscription
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.GameSubscription)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_OFFER_RELATIONSHIP_TYPE, "Relationships can be setup only for Subscription Product Offers", false);
                }

                foreach (OfferRelationShipV1 offerRelationShip in mixOffer.OfferRelationShips)
                {
                    catalog.SavePrimitiveOfferRelationShip(offerRelationShip.RelatedOfferId, offerRelationShip.RelationShipType, catalogOffer);
                }
            }
        }

        /// <summary>
        /// Validates the Offer RelationShips
        /// </summary>
        static void ValidateOfferRelationShip(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            if (mixOffer.OfferRelationShips != null && mixOffer.OfferRelationShips.Length > 0)
            {
                Media offerMedia = catalog.GetPrimitiveMediaOrThrow(mixOffer.ProductId);
                if (!offerMedia.MediaTypeReference.IsLoaded)
                {
                    offerMedia.MediaTypeReference.Load();
                }
                StringBuilder errorMessage = new StringBuilder();
                foreach (OfferRelationShipV1 item in mixOffer.OfferRelationShips)
                {
                    Offer catalogOffer = catalog.Offer.Where(o => o.offerId == item.RelatedOfferId).FirstOrDefault();
                    if (catalogOffer == null)
                    {
                        errorMessage.AppendLine(string.Format("relatedOffer not found {0}", item.RelatedOfferId.ToString()));
                        // If offer is not found then we proceed to next element
                        continue;
                    }
                    else
                    {
                        if (!catalogOffer.MediaReference.IsLoaded)
                        {
                            catalogOffer.MediaReference.Load();
                        }
                    }
                    Media relatedOfferMedia = catalog.GetPrimitiveMediaOrThrow(catalogOffer.Media.mediaId);

                    if (!relatedOfferMedia.MediaTypeReference.IsLoaded)
                    {
                        relatedOfferMedia.MediaTypeReference.Load();
                    }
                    if (relatedOfferMedia.MediaType.mediaTypeId != offerMedia.MediaType.mediaTypeId)
                    {
                        errorMessage.AppendLine(string.Format("product associated with related offers are of different types.Offer mediatype is {0} and related Offer mediatype is {1}", offerMedia.MediaType.mediaTypeId.ToString(), relatedOfferMedia.MediaType.mediaTypeId.ToString()));
                    }
                }
                if (errorMessage.Length > 0)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_OFFER_RELATIONSHIP_MEDIA, errorMessage.ToString(), false);
                }
            }
        }

        /// <summary>
        /// Validates the Offer
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOffer"></param>
        static void ValidateOffer(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            Media offerMedia = catalog.GetPrimitiveMediaOrThrow(mixOffer.ProductId);

            if (!offerMedia.MediaTypeReference.IsLoaded)
            {
                offerMedia.MediaTypeReference.Load();
            }
            if (((mixOffer.offerType == (int)CatalogConstants.OfferType.Subscription)
                || (mixOffer.offerType == (int)CatalogConstants.OfferType.SubscriptionTrial))
                &&
                (
                    offerMedia.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.LiveSubscription
                    && offerMedia.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.GameSubscription
                    && offerMedia.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.AddonSubscription
                ))
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_OFFERTYPE_MEDIA, "offerType {0} cannot be configured for product type {1}", mixOffer.offerType, offerMedia.MediaType.mediaTypeId, false);
            }
            else if (((mixOffer.offerType != (int)CatalogConstants.OfferType.Subscription)
                      && (mixOffer.offerType != (int)CatalogConstants.OfferType.SubscriptionTrial))
                &&
                (
                    offerMedia.MediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.LiveSubscription
                    || offerMedia.MediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.GameSubscription
                    || offerMedia.MediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.AddonSubscription
                ))
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_OFFERTYPE_MEDIA, "offerType {0} cannot be configured for product type {1}", mixOffer.offerType, offerMedia.MediaType.mediaTypeId, false);
            }
            // prevent non-offer media type offers from being made here to enforce business logic on the backend as well
            else if (InternalNonOfferTypes.Contains(offerMedia.MediaType.mediaTypeId))
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_OFFERTYPE_MEDIA, "offer is not allowed to be configured for product type {0}", offerMedia.MediaType.mediaTypeId, false);
            }
        }

        /// <summary>
        /// Add/Update offer instances
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOffer"></param>
        /// <param name="mixInstances"></param>
        static void SaveOfferInstances(RawCatalogDBEntities catalog, Offer catalogOffer, OfferInstanceV1[] mixInstances)
        {

            OfferInstance[] catalogOfferInstances = catalog.GetPrimitiveOfferInstances(catalogOffer.offerId);
            Guid[] mixOfferInstanceIds = null;

            if (mixInstances != null)
            {
                // Used to save offer packages for consumables
                if (catalogOffer.Media == null && !catalogOffer.MediaReference.IsLoaded)
                {
                    catalogOffer.MediaReference.Load();
                }
                MediaType catalogMediaType = catalog.GetPrimitiveMediaTypeOrThrow(catalogOffer.Media.mediaId);

                mixOfferInstanceIds = new Guid[mixInstances.Length];

                // Add offer instances
                for (int i = 0; i < mixInstances.Length; i++)
                {
                    OfferInstanceV1 mixOfferInstance = mixInstances[i];
                    OfferInstance catalogOfferInstance = null;

                    SaveOfferInstanceInfo(catalog, catalogOffer, mixOfferInstance, out catalogOfferInstance);

                    SaveOfferInstanceUserTypes(catalog, mixOfferInstance.UserTypeIds, catalogOfferInstance);

                    SaveOfferInstancePackages(catalog, mixOfferInstance.Packages, catalogOfferInstance, catalogMediaType);

                    SaveOfferInstanceOfferProducts(catalog, mixOfferInstance.OfferProducts, catalogOfferInstance);

                    mixOfferInstanceIds[i] = mixOfferInstance.OfferInstanceId;
                }
            }

            // Remove existing offer instances only in the catalog
            if (catalogOfferInstances != null)
            {
                catalog.DeletePrimitiveOfferInstances(mixOfferInstanceIds, catalogOfferInstances);
            }
        }

        /// <summary>
        /// Save OfferInstance to database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOffer"></param>
        /// <param name="mixOfferInstance"></param>
        /// <param name="catalogOfferInstance"></param>
        static void SaveOfferInstanceInfo(RawCatalogDBEntities catalog, Offer catalogOffer, OfferInstanceV1 mixOfferInstance, out OfferInstance catalogOfferInstance)
        {

            //checking if localization text is available for this country  
            if (mixOfferInstance.OfferProducts != null)
            {
                foreach (OfferProductV1 mixOfferProduct in mixOfferInstance.OfferProducts)
                {
                    //skipping check if of type Subscription since they do not require localization text
                    Subscription catalogSubscription = catalog.GetPrimitiveSubscription(mixOfferProduct.ProductId);
                    if (catalogSubscription == null)
                    {
                        xonline.common.marketplace.catalog.Locale[] catalogLocales = catalog.GetPrimitiveLocaleByCountry(mixOfferInstance.CountryCode);  // includes country code validation
                        foreach (xonline.common.marketplace.catalog.Locale catalogLocale in catalogLocales)
                        {
                            MediaLocaleMap catalogMediaLocaleMap = catalog.GetPrimitiveMediaLocaleMap(mixOfferProduct.ProductId, catalogLocale);
                            if (catalogMediaLocaleMap == null)
                            {
                                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_PRODUCT_LOCALIZATION_NOT_FOUND,
                                                                   String.Format("Localization information not found in the catalog for product {0} for country {1} locale {2}",
                                                                   mixOfferProduct.ProductId, mixOfferInstance.CountryCode, catalogLocale.locale1), false);
                            }
                        }
                    }
                }
            }

            if (mixOfferInstance.Packages != null)
            {
                foreach (OfferPackageV1 mixOfferPackage in mixOfferInstance.Packages)
                {
                    //skipping check if of type Subscription since they do not require localization text
                    MediaInstance catalogMediaInstance = catalog.GetPrimitiveMediaInstanceOrThrow(mixOfferPackage.PackageId);
                    if (catalogMediaInstance.Media == null && !catalogMediaInstance.MediaReference.IsLoaded)
                    {
                        catalogMediaInstance.MediaReference.Load();
                    }

                    Subscription catalogSubscription = catalog.GetPrimitiveSubscription(catalogMediaInstance.Media.mediaId);
                    if (catalogSubscription == null)
                    {
                        xonline.common.marketplace.catalog.Locale[] catalogLocales = catalog.GetPrimitiveLocaleByCountry(mixOfferInstance.CountryCode);  // includes country code validation
                        foreach (xonline.common.marketplace.catalog.Locale catalogLocale in catalogLocales)
                        {
                            MediaLocaleMap catalogMediaLocaleMap = catalog.GetPrimitiveMediaLocaleMap(catalogMediaInstance.Media.mediaId, catalogLocale);
                            if (catalogMediaLocaleMap == null)
                            {
                                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_PRODUCT_LOCALIZATION_NOT_FOUND,
                                                                   String.Format("Localization information not found in the catalog for package {0} for country {1} locale {2}",
                                                                   catalogMediaInstance.Media.mediaId, mixOfferInstance.CountryCode, catalogLocale.locale1), false);
                            }
                        }
                    }
                }
            }

            catalogOfferInstance = catalog.SavePrimitiveOfferInstance(catalogOffer, catalogOffer.offerId,
            mixOfferInstance.OfferInstanceId, mixOfferInstance.CountryCode,
            mixOfferInstance.PaymentPrice, mixOfferInstance.SuggestedRetailPrice, mixOfferInstance.WholeSalePrice,
            mixOfferInstance.PaymentPriceCurrencyCode, mixOfferInstance.PaymentTypeId, mixOfferInstance.StartDate,
            mixOfferInstance.EndDate, mixOfferInstance.VisibilityLevelId, mixOfferInstance.ExternalOfferInstanceId);
        }

        /// <summary>
        /// Save OfferProducts to database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferProducts"></param>
        /// <param name="catalogOfferInstance"></param>
        static void SaveOfferInstanceOfferProducts(RawCatalogDBEntities catalog, OfferProductV1[] mixOfferProducts,
            OfferInstance catalogOfferInstance)
        {
            List<Guid> catalogMediaIds = new List<Guid>();

            if (mixOfferProducts != null)
            {
                foreach (OfferProductV1 mixOfferProduct in mixOfferProducts)
                {
                    // Save the OfferInstanceMediaEntries
                    catalog.SavePrimitiveOfferInstanceMedia(catalogOfferInstance, mixOfferProduct.ProductId,
                        mixOfferProduct.LicenseTypeId, mixOfferProduct.ProviderId, mixOfferProduct.VisibilityStatusId);

                    catalogMediaIds.Add(mixOfferProduct.ProductId);
                }
            }

            // Remove extra OfferInstanceMedias
            catalog.DeletePrimitiveOfferInstanceMedias(catalogMediaIds.ToArray<Guid>(), catalogOfferInstance.offerInstanceId, true);
        }

        /// <summary>
        /// Save OfferPackages to database
        /// NOTE: packageid == mediainstanceid
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferPackages"></param>
        /// <param name="catalogOfferInstance"></param>
        /// <param name="catalogMediaType"></param>
        static void SaveOfferInstancePackages(RawCatalogDBEntities catalog, OfferPackageV1[] mixOfferPackages,
            OfferInstance catalogOfferInstance, MediaType catalogMediaType)
        {

            List<Guid> catalogMediaInstanceIds = new List<Guid>();

            if (mixOfferPackages != null)
            {
                foreach (OfferPackageV1 mixOfferPackage in mixOfferPackages)
                {
                    catalog.SavePrimitiveOfferInstanceMediaInstance(catalogOfferInstance, mixOfferPackage.PackageId,
                        mixOfferPackage.LicenseTypeId, mixOfferPackage.ProviderId, mixOfferPackage.VisibilityStatusId);

                    // Only in the cases that are not App since App products can not be saved to these tables
                    if (catalogMediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.App)
                    {
                        OfferInstanceGameContentInstance catalogOfferInstanceGameContentInstance =
                            catalog.SavePrimitiveOfferInstanceGameContentInstance(catalogOfferInstance, mixOfferPackage.PackageId,
                            mixOfferPackage.LicenseExtensionBits);


                        // Save quantity if product type is GameConsumable
                        if (catalogMediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.GameConsumable ||
                            catalogMediaType.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.MobileConsumable)
                        {
                            if (mixOfferPackage.Quantity > 0)
                            {
                                catalog.SavePrimitiveOfferInstanceGameContentInstanceAsset(catalogOfferInstance,
                                    catalogOfferInstanceGameContentInstance, mixOfferPackage.Quantity);
                            }
                            else
                            {
                                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_CONSUMABLE_QUANTITY, string.Format("Quantity {0} invalid for package id {1}", mixOfferPackage.Quantity.ToString(), mixOfferPackage.PackageId.ToString()), false);
                            }
                        }
                    }

                    catalogMediaInstanceIds.Add(mixOfferPackage.PackageId);
                }
            }

            // Remove extra OfferInstanceMediaInstances
            catalog.DeletePrimitiveOfferInstanceMediaInstances(catalogMediaInstanceIds.ToArray<Guid>(), catalogOfferInstance.offerInstanceId, true);
        }

        /// <summary>
        /// Save offerInstanceUserTypes to database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferUserTypes"></param>
        /// <param name="catalogOfferInstance"></param>
        static void SaveOfferInstanceUserTypes(RawCatalogDBEntities catalog, int[] mixOfferUserTypeIds, OfferInstance catalogOfferInstance)
        {

            if (mixOfferUserTypeIds != null)
            {
                foreach (int mixUserTypeId in mixOfferUserTypeIds)
                {
                    catalog.SavePrimitiveOfferInstanceUserType(catalogOfferInstance, mixUserTypeId);
                }
            }

            // Remove extra user types
            catalog.DeletePrimitiveOfferInstanceUserTypes(mixOfferUserTypeIds, catalogOfferInstance.offerInstanceId);
        }

        /// <summary>
        /// Add/Remove offer stores
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOffer"></param>
        /// <param name="mixStoreIds"></param>
        static void SaveOfferStores(RawCatalogDBEntities catalog, Offer catalogOffer, int[] mixStoreIds)
        {

            if (mixStoreIds != null)
            {
                // Add new offer stores
                foreach (int mixStoreId in mixStoreIds)
                {
                    catalog.SavePrimitiveOfferStore(catalogOffer, mixStoreId);
                }
            }

            // Remove old offer stores
            catalog.DeletePrimitiveOfferStores(mixStoreIds, catalogOffer.offerId);
        }

        /// <summary>
        /// Create a mapping of OfferInstance and ProductFamily
        /// </summary>
        static void SaveSubscriptionOfferInstanceProductFamilyMapping(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            if ((mixOffer.offerType == (int)CatalogConstants.OfferType.Subscription))
            {
                foreach (OfferInstanceV1 item in mixOffer.Instances)
                {
                    SaveSubscriptionOfferInstanceProductFamilyMapping(catalog, item.OfferInstanceId, mixOffer.ProductId);
                }
            }
        }
        /// <summary>
        /// Saves the offerInstance to product family mapping in t_subscription_family_mapping
        /// </summary>
        /// <param name="offerInstanceId">OfferInstanceId which is being configured</param>
        /// <param name="productFamilyId">ProductFamily associated to the OfferInstnace</param>
        static void SaveSubscriptionOfferInstanceProductFamilyMapping(RawCatalogDBEntities catalog, Guid offerInstanceId, Guid productId)
        {

            var query = (
                          from
                          sub in catalog.Subscription
                          join m in catalog.Media on sub.subscriptionId equals m.mediaId
                          where m.mediaId == productId
                          select new { sub.SubscriptionFamily.subscriptionFamilyId, offerInstanceId, m.MediaType.mediaTypeId }
                      );

            using (WstConnection connection = new WstConnection(ConfigUtil.UodbWebstoreApp))
            {
                connection.Open();

                for (int i = 0; i < connection.SqlPartitions.Count; i++)
                {
                    foreach (var item in query)
                    {
                        if (
                            //Execute this only for Livesubscription types for now.
                            item.mediaTypeId == (int)CatalogConstants.MediaTypeEnum.LiveSubscription
                            )
                        {
                            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                            {
                                ws.StoredProc = "p_subscription_family_offer_instance_configure";

                                ws.PhysicalPartition = i;

                                ws.AddParameter("@guid_subscription_family", item.subscriptionFamilyId);

                                ws.AddParameter("@guid_offer_instance", item.offerInstanceId);

                                ws.AddParameter(ParamType.RETVAL, "@hr", 0);

                                using (WstDataReader reader = ws.Execute())
                                {
                                    HResult hr = (uint)ws.GetIntParameter("@hr");
                                    if (hr.IsSuccess()) continue;
                                    switch (hr)
                                    {
                                        case HResult.XONLINE_E_MIX_INVALID_PRODUCTFAMILY:
                                            throw new XRLExceptionWithoutEvent(hr, string.Format("subscriptionfamily {0} has not service privilege set associated", item.subscriptionFamilyId.ToString()));

                                    }
                                }

                            }
                        }
                    }

                }


            }

        }
        #endregion


        static GameSubscription GetGameSubscription(RawCatalogDBEntities catalog, OfferV1 mixOffer, Offer offer)
        {

            var subscriptionResults = (
                     from
                     sub in catalog.Subscription
                     join sbi in catalog.SubscriptionBillingInformation on sub.subscriptionId equals sbi.subscriptionId
                     where sub.subscriptionId == mixOffer.ProductId
                     select new
                     {
                         sub.DurationType.durationTypeId,
                         sub.subscriptionDuration,
                         sub.isCancelable,
                         sub.BillingFrequency,
                         sbi.billingsvcComponentId
                     }
                 );

            var gameSubFamilyResults = (
                      from
                      sub in catalog.Subscription
                      join sf in catalog.SubscriptionFamily on sub.SubscriptionFamily.subscriptionFamilyId equals sf.subscriptionFamilyId
                      where sub.subscriptionId == mixOffer.ProductId
                      select new
                      {
                          sf.titleId
                      }
                  );

            if (gameSubFamilyResults.Count() != 1)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTIONFAMILY_CONFIG, "Invalid GameSubscriptionFamily configuration for subscription product {0}.None/more than one gamesubscriptionFamily returned", mixOffer.ProductId.ToString());
            }

            if (subscriptionResults.Count() != 1)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTION_CONFIG, "Invalid Game subscription configuration in subscription/SubscriptionBillingInformation for subscription product {0}.None/more than one gameSubscription records returned", mixOffer.ProductId.ToString());
            }

            var gameSubFamilyResult = gameSubFamilyResults.First();

            var subscriptionResult = subscriptionResults.First();

            GameSubscription gameSubscription = new GameSubscription();

            gameSubscription.offerRelationInfoCollection = null;

            gameSubscription.liveServiceProvided = 0;

            //get the the subscription basic info
            gameSubscription.subscriptionBasicInfo = GetSubscriptionBasicInfo
                (
                      (subscriptionResult.billingsvcComponentId.HasValue) ? subscriptionResult.billingsvcComponentId.Value.ToString() : string.Empty
                    , subscriptionResult.isCancelable
                    , subscriptionResult.subscriptionDuration.Value
                    , mixOffer.Name
                    , String.Format("0x{0:X}", gameSubFamilyResult.titleId)
                    , subscriptionResult.BillingFrequency.billingFrequencyId
                    , (ulong)mixOffer.LiveOfferId
                    , mixOffer.Instances[0].VisibilityLevelId
                );


            //get the subscription type info
            gameSubscription.subscriptionTypeInfo = GetSubscriptionTypeInfo
                                                (
                                                  catalog
                                                , mixOffer
                                                , null
                                                );

            //get offer region collection
            gameSubscription.subscriptionBasicInfo.offerRegionInfoCollection = GetOfferRegionInfoCollection
                                                                                                (
                                                                                                   catalog
                                                                                                  , offer
                                                                                                  , mixOffer
                                                                                                  );
            //get the offer relations
            gameSubscription.offerRelationInfoCollection = GetOfferRelations
                                                                    (
                                                                         catalog
                                                                        , mixOffer
                                                                    );


            //Localized data as of now is built from subscription family
            gameSubscription.subscriptionBasicInfo.offerCultureDetailsCollection = GetOfferCultureCollection
                                                                                    (
                                                                                         catalog
                                                                                        , mixOffer
                                                                                    );

            return gameSubscription;

        }

        static LiveSubscription GetLiveSubscription(RawCatalogDBEntities catalog, OfferV1 mixOffer, Offer offer)
        {

            LiveSubscription liveSubscription = new LiveSubscription();

            var liveSubFamilyResults = (
                       from
                       sub in catalog.Subscription
                       join sf in catalog.SubscriptionFamily on sub.SubscriptionFamily.subscriptionFamilyId equals sf.subscriptionFamilyId
                       join lsf in catalog.LiveSubscriptionFamily on sf.subscriptionFamilyId equals lsf.subscriptionFamilyId
                       where sub.subscriptionId == mixOffer.ProductId
                       select new
                       {
                           lsf.Tier.tierId,
                           sf.titleId
                       }
                   );



            var subscriptionResults = (
                       from
                       sub in catalog.Subscription
                       join sbi in catalog.SubscriptionBillingInformation on sub.subscriptionId equals sbi.subscriptionId
                       where sub.subscriptionId == mixOffer.ProductId
                       select new
                       {
                           sub.DurationType.durationTypeId,
                           sub.subscriptionDuration,
                           sub.isCancelable,
                           sub.BillingFrequency,
                           sbi.billingsvcComponentId
                       }
                   );

            if (liveSubFamilyResults.Count() != 1)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTIONFAMILY_CONFIG, "Invalid LiveSubscriptionFamily for subscription product {0}.None/more than one livesubscriptionFamily records returned", mixOffer.ProductId.ToString());
            }

            if (subscriptionResults.Count() != 1)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTION_CONFIG, "Invalid Live subscription configuration in subscription/SubscriptionBillingInformation for subscription product {0}.None/more than one Subscription records returned", mixOffer.ProductId.ToString());
            }

            var liveSubFamilyResult = liveSubFamilyResults.First();

            var subscriptionResult = subscriptionResults.First();

            liveSubscription.allowsXbox1Play = false;

            liveSubscription.isTrial = (offer.OfferType.offerTypeId == (int)CatalogConstants.OfferType.SubscriptionTrial) ? true : false;

            liveSubscription.liveTierProvided = GetLiveTierFromTierId(liveSubFamilyResult.tierId);

            //populate the basic subscription info
            liveSubscription.subscriptionBasicInfo = GetSubscriptionBasicInfo
                                                                     (
                //if there is no billign service componentid then we want to send empty string
                                                                          (subscriptionResult.billingsvcComponentId.HasValue) ? subscriptionResult.billingsvcComponentId.Value.ToString() : string.Empty
                                                                         , subscriptionResult.isCancelable
                                                                         , subscriptionResult.subscriptionDuration.Value
                                                                         , mixOffer.Name
                                                                         , String.Format("0x{0:X}", liveSubFamilyResult.titleId)
                                                                         , subscriptionResult.BillingFrequency.billingFrequencyId
                                                                         , (ulong)mixOffer.LiveOfferId
                                                                         , mixOffer.Instances[0].VisibilityLevelId
                //default to the first offerInstance visibility level
                                                                      );


            //populate the region info 
            liveSubscription.subscriptionBasicInfo.offerRegionInfoCollection = GetOfferRegionInfoCollection
                                                                                (
                                                                                     catalog
                                                                                    , offer
                                                                                    , mixOffer
                                                                                );

            //do not populate the renewal matrix.We dont need it .
            //old world this was used by enumeration and renewal path validation. All of that is moving to catalog
            liveSubscription.offerRelationInfoCollection = GetOfferRelations
                                                                                 (
                                                                                     catalog
                                                                                    , mixOffer
                                                                                 );

            //Lot of utility functions calls sprocs which lookinto this t_subscription_info table
            liveSubscription.subscriptionTypeInfo = GetSubscriptionTypeInfo
                                                        (
                                                             catalog
                                                            , mixOffer
                                                            , liveSubFamilyResult.tierId
                                                         );

            //Localized data as of now is built from subscription family
            liveSubscription.subscriptionBasicInfo.offerCultureDetailsCollection = GetOfferCultureCollection
                                                                                    (
                                                                                         catalog
                                                                                        , mixOffer
                                                                                    );

            return liveSubscription;
        }

        static SubscriptionBasicInfo GetSubscriptionBasicInfo
            (
                  string billingServiceComponentId
                , int isCancelable
                , int duration
                , string offerName
                , string titleId
                , int frequencyId
                , ulong liveOfferId
                , int visibilityLevel
            )
        {

            SubscriptionBasicInfo subscriptionBasicInfo = new SubscriptionBasicInfo();

            subscriptionBasicInfo.billingComponentID = billingServiceComponentId;

            subscriptionBasicInfo.cancelable = Convert.ToBoolean(isCancelable);

            subscriptionBasicInfo.consoleType = ConsoleType.Xbox360;

            subscriptionBasicInfo.duration = Convert.ToByte(duration);

            subscriptionBasicInfo.friendlyName = offerName;

            subscriptionBasicInfo.titleIDCollection.Add(titleId);

            subscriptionBasicInfo.subscriptionFrequency = GetSubscriptionFrequency(frequencyId);

            subscriptionBasicInfo.offerID = String.Format("0x{0:X}", liveOfferId);

            subscriptionBasicInfo.offerEnumerationType = GetOfferEnumerationType(visibilityLevel);

            subscriptionBasicInfo.bitFilter = "0x00000001";

            return subscriptionBasicInfo;

        }

        static OfferRegionInfoCollection GetOfferRegionInfoCollection(RawCatalogDBEntities catalog, Offer catalogOffer, OfferV1 mixOffer)
        {

            OfferRegionInfoCollection offerRegionCollection = new OfferRegionInfoCollection();

            foreach (OfferInstanceV1 offerInstance in mixOffer.Instances)
            {
                foreach (int userType in offerInstance.UserTypeIds)
                {
                    OfferRegionInfo offerRegionInfo = new OfferRegionInfo();

                    offerRegionInfo.liveTier = GetLiveTierFromUserTypeId(userType);

                    offerRegionInfo.startDate = offerInstance.StartDate;

                    offerRegionInfo.endDate = offerRegionInfo.endDate;

                    offerRegionInfo.countryID = CountryDictionary.CountryId(offerInstance.CountryCode);

                    offerRegionInfo.providerId = 0;

                    offerRegionInfo.startDateUtc = offerInstance.StartDate;

                    offerRegionInfo.endDateUtc = offerInstance.EndDate;

                    offerRegionInfo.paymentTypeXboxToken = false;

                    offerRegionInfo.paymentTypeWholesaleCollection = null;

                    switch (offerInstance.PaymentTypeId)
                    {
                        case (int)CatalogConstants.PaymentType.Points:
                            offerRegionInfo.paymentTypePoints = GetPointsPaymentType(offerInstance);
                            break;

                        case (int)CatalogConstants.PaymentType.Token:
                            offerRegionInfo.paymentTypeSCGToken = GetSCGTokenPaymentType(offerInstance);
                            break;

                        case (int)CatalogConstants.PaymentType.Card:
                            offerRegionInfo.paymentTypeSCG = GetSCGCCPaymentType(offerInstance);
                            break;
                    }
                    offerRegionCollection.Add(offerRegionInfo);
                }
            }
            return offerRegionCollection;
        }

        static PaymentTypeSCG GetSCGCCPaymentType(OfferInstanceV1 offerInstance)
        {

            PaymentTypeSCG paymentTypeSCG = new PaymentTypeSCG();

            paymentTypeSCG.boid = offerInstance.ExternalOfferInstanceId;

            paymentTypeSCG.priceWhole = (uint)Math.Truncate(offerInstance.PaymentPrice);

            paymentTypeSCG.priceFractional = (uint)(offerInstance.PaymentPrice - Math.Truncate(offerInstance.PaymentPrice));

            //tax type is default
            paymentTypeSCG.taxType = TaxType.DefaultTax;

            return paymentTypeSCG;
        }

        static PaymentTypeSCGToken GetSCGTokenPaymentType(OfferInstanceV1 offerInstance)
        {

            PaymentTypeSCGToken paymentTypeSCGToken = new PaymentTypeSCGToken();

            paymentTypeSCGToken.boid = offerInstance.ExternalOfferInstanceId;

            return paymentTypeSCGToken;
        }

        static PaymentTypePoints GetPointsPaymentType(OfferInstanceV1 offerInstance)
        {

            PaymentTypePoints paymentTypePoints = new PaymentTypePoints();

            paymentTypePoints.priceInPoints = Convert.ToUInt32(offerInstance.PaymentPrice);

            return paymentTypePoints;
        }

        static LiveTier GetLiveTierFromTierId(int? tierId)
        {

            if (tierId.HasValue)
            {
                switch (tierId.Value)
                {
                    case (int)CatalogConstants.UserTier.Silver:
                        return LiveTier.Silver;

                    case (int)CatalogConstants.UserTier.Gold:
                        return LiveTier.Gold;

                    case (int)CatalogConstants.UserTier.Family:
                        return LiveTier.FamilyGold;

                    default:
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_NO_TIER_FOUND, "No tier for tierid {0}", tierId.ToString());
                }
            }
            else
            {
                return LiveTier.Silver;
            }
        }

        static LiveTier GetLiveTierFromUserTypeId(int userTypeId)
        {

            switch (userTypeId)
            {
                case (int)CatalogConstants.UserType.Silver:
                    return LiveTier.Silver;

                case (int)CatalogConstants.UserType.Gold:
                    return LiveTier.Gold;

                case (int)CatalogConstants.UserType.Family:
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_ERROR_FAMILY_INGESTION, "Ingestion of offers with FamilyTier not supported");

                default:
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_NO_TIER_FOUND, "No tier for usertypeId {0}", userTypeId.ToString());
            }
        }

        static SubscriptionFrequency GetSubscriptionFrequency(int freqeuncyId)
        {

            switch (freqeuncyId)
            {
                case (int)CatalogConstants.SubscriptionFrequency.Annually:
                    return SubscriptionFrequency.Annually;

                case (int)CatalogConstants.SubscriptionFrequency.BiAnnually:
                    return SubscriptionFrequency.BiAnnually;

                case (int)CatalogConstants.SubscriptionFrequency.Monthly:
                    return SubscriptionFrequency.Monthly;

                case (int)CatalogConstants.SubscriptionFrequency.OneTimeCharge:
                    return SubscriptionFrequency.OneTimeCharge;

                case (int)CatalogConstants.SubscriptionFrequency.Quarterly:
                    return SubscriptionFrequency.Quarterly;

                default:
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_NO_FREQUENCY_FOUND, "No frequency found for frequencyId {0}", freqeuncyId.ToString());
            }
        }

        static SubscriptionTypeInfo GetSubscriptionTypeInfo(RawCatalogDBEntities catalog, OfferV1 mixOffer, int? tierId)
        {

            var query = (
                         from
                         sub in catalog.Subscription
                         join m in catalog.Media on sub.subscriptionId equals m.mediaId
                         where m.mediaId == mixOffer.ProductId
                         select new { m.MediaType.mediaTypeId }
                     );


            if (query.Count() != 1)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTION_CONFIG, "Wrong mediatype configuration for subscription {0}", mixOffer.ProductId.ToString());
            }

            SubscriptionTypeInfo subscriptionType = new SubscriptionTypeInfo();

            subscriptionType.isBase = (query.First().mediaTypeId == (int)CatalogConstants.MediaTypeEnum.LiveSubscription) ? true : false;

            if (query.First().mediaTypeId == (int)CatalogConstants.MediaTypeEnum.LiveSubscription)
            {
                subscriptionType.subscriptionType = 1;
            }
            else if (query.First().mediaTypeId == (int)CatalogConstants.MediaTypeEnum.GameSubscription)
            {
                subscriptionType.subscriptionType = 3;
            }

            subscriptionType.tierProvided = GetLiveTierFromTierId(tierId);

            return subscriptionType;
        }

        static OfferCultureDetailsCollection GetOfferCultureCollection(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            var subLocalizedData = (
                         from
                         sub in catalog.Subscription
                         join mlm in catalog.MediaLocaleMap on sub.subscriptionId equals mlm.mediaId
                         join ml in catalog.MediaLocale on new { sub.subscriptionId, mlm.Locale1.lcid } equals new { subscriptionId = ml.mediaId, lcid = ml.lcid }
                         where sub.subscriptionId == mixOffer.ProductId
                         select new { ml.reducedTitle, ml.reducedDescription, mlm.lcid }
                     );

            OfferCultureDetailsCollection offerCultureDetailsCollection = new OfferCultureDetailsCollection();

            foreach (var item in subLocalizedData)
            {
                OfferCultureDetails offerCultureDetails = new OfferCultureDetails();
                offerCultureDetails.imageFilePath = string.Empty;
                offerCultureDetails.name = item.reducedTitle;
                offerCultureDetails.sellText = item.reducedDescription;
                offerCultureDetails.culture = (uint)item.lcid;

                offerCultureDetailsCollection.Add(offerCultureDetails);
            }
            return offerCultureDetailsCollection;
        }

        static LiveSubscriptionRelationCollection GetOfferRelations(RawCatalogDBEntities catalog, OfferV1 mixOffer)
        {

            LiveSubscriptionRelationCollection liveSubscriptionRelationCollection = new LiveSubscriptionRelationCollection();

            if (mixOffer.OfferRelationShips != null)
            {
                foreach (OfferRelationShipV1 item in mixOffer.OfferRelationShips)
                {
                    var offerRelationShips = (
                       from
                       lom in catalog.LegacyOfferMapping
                       where lom.offerId == item.RelatedOfferId
                       select new { lom.liveOfferId }
                   );

                    if (offerRelationShips.Count() != 1)
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_ERROR_LEGACY_OFFER, "No Legacy offer mapping defined for offer {0}", item.RelatedOfferId.ToString());
                    }
                    LiveSubscriptionRelation liveSubscriptionRelation = new LiveSubscriptionRelation();

                    liveSubscriptionRelation.offerIDFrom = "0x" + offerRelationShips.First().liveOfferId.ToString("X");

                    liveSubscriptionRelation.convertMode = GetOfferConvertMode(item.RelationShipType);

                    if (mixOffer.offerType == (int)CatalogConstants.OfferType.SubscriptionTrial)
                    {
                        liveSubscriptionRelation.relationType = OfferRelationType.Trial;
                    }
                    else
                    {
                        liveSubscriptionRelation.relationType = OfferRelationType.Renewal;
                    }

                    liveSubscriptionRelationCollection.Add(liveSubscriptionRelation);
                }
            }

            return liveSubscriptionRelationCollection;
        }
        static OfferConvertMode GetOfferConvertMode(int relationshipType)
        {

            switch (relationshipType)
            {
                case (int)CatalogConstants.OfferRelationShipTypeEnum.ConvertPlusProRate:
                case (int)CatalogConstants.OfferRelationShipTypeEnum.ConvertPlusTimeExtend:
                    return OfferConvertMode.Convert;
                default:
                    return OfferConvertMode.Renew;

            }
        }
        static void SaveSubscriptionsInUODB
            (
                 RawCatalogDBEntities catalog
                , OfferV1 mixOffer
                , Offer catalogOffer
            )
        {

            if (mixOffer.offerType == (int)CatalogConstants.OfferType.Subscription
                || mixOffer.offerType == (int)CatalogConstants.OfferType.SubscriptionTrial)
            {
                var mediaTypeResults = (
                   from
                   m in catalog.Media
                   where m.mediaId == mixOffer.ProductId
                   select new { m.MediaType.mediaTypeId }
               );
                if (mediaTypeResults.Count() != 1)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_OFFER_INVALID_SUBSCRIPTION_CONFIG, "Wrong mediatype configuration for subscription {0}", mixOffer.ProductId.ToString());
                }
                if (mediaTypeResults.First().mediaTypeId == (int)CatalogConstants.MediaTypeEnum.LiveSubscription)
                {
                    LiveSubscription liveSubscription = GetLiveSubscription(catalog, mixOffer, catalogOffer);
                    OfferManager.PropLiveSubscription(liveSubscription);
                }
                else if (mediaTypeResults.First().mediaTypeId == (int)CatalogConstants.MediaTypeEnum.GameSubscription)
                {
                    GameSubscription gameSubscription = GetGameSubscription(catalog, mixOffer, catalogOffer);
                    OfferManager.PropGameSubscription(gameSubscription);
                }
            }
        }


        static OfferEnumerationType GetOfferEnumerationType(int visibilityLevel)
        {

            switch (visibilityLevel)
            {
                case (int)CatalogConstants.VisiblityLevel.Default:
                    return OfferEnumerationType.AlwaysEnumerate;
                case (int)CatalogConstants.VisiblityLevel.NeverEnumerate:
                    return OfferEnumerationType.NeverEnumerate;
                case (int)CatalogConstants.VisiblityLevel.NoEnumerateInPartnernet:
                    return OfferEnumerationType.AlwaysEnumerateExceptInPartnerNetDash;
                default:
                    return OfferEnumerationType.AlwaysEnumerate;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\OfferManagement\Service\MixOfferManagementV1.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using System.Diagnostics;
using xonline.mix.offermanagement.contract;
using xonline.common.service;
using xonline.common.mgmt;
using System.ServiceModel.Activation;
using xonline.common.config;
using xonline.common.installer;
using xonline.mix.common;
using xonline.server.webcache.common;
using System.Xml;
using System.IO;
using xonline.common.proxy;

[assembly: XomAreaDefinition(XomAreaName.log)]
[assembly: XomIisInstallerAttribute(Interface.mixoffermanagement)]
[assembly: ConfigAttribute(Component.mixoffermanagement)]

namespace xonline.mix.offermanagement.service
{
    // NOTE: If you change the class name "MixOfferManagement" here, you must also update the reference to "MixOfferManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixOfferManagementV1 : IMixOfferManagementV1
    {

        // properties used to pass exception information to the applog
        private string exceptionMessage = string.Empty;
        private string hresult = string.Empty;
        
        /// <summary>
        /// Add/Update offer in game catalog
        /// </summary>
        /// <param name="offer"></param>
        public void ConfigureOffer(OfferV1 offer)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            try
            {
                ApiValidation.Validate(MixOfferManagement.ConfigureOfferApiName);

                MixOfferManagement.ConfigureOffer(offer);
            }
            catch (Exception ex)
            {
                hresult = AppLogValues.GetHResult(ex);

                exceptionMessage = AppLogValues.GetExceptionMessage(ex);
                throw;
            }
            finally
            {
                string result = exceptionMessage == string.Empty ?
                    MixConstants.AppLogResults.Success : MixConstants.AppLogResults.Fail;

                // Logging API name and input parameters
                string appLog = string.Join(xonline.mix.common.MixConstants.AppLogSeparator, new string[]
            {                
                MixOfferManagement.ConfigureOfferApiName,  // API name                 
                offer.OfferId.ToString(),  // OfferId                             
                result,  // success or failure result,                
                hresult,  // HResult                
                timeElapsed.MillisecondsElapsed.ToString(),  // Duration  
                exceptionMessage,  // Exception if occured                
                SerializeProduct(offer)  // Input Param
            });

                Xom.Log(XomAreaName.log, appLog);
            }
        }

        /// <summary>
        /// Get offer from game catalog
        /// </summary>
        /// <param name="offerId"></param>
        /// <returns></returns>
        public OfferV1 GetOffer(Guid offerId)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            OfferV1 offer = null;
            try
            {
                ApiValidation.Validate(MixOfferManagement.GetOfferApiName);
                offer = MixOfferManagement.GetOffer(offerId);
            }
            catch (Exception ex)
            {
                hresult = AppLogValues.GetHResult(ex);

                exceptionMessage = AppLogValues.GetExceptionMessage(ex);
                throw;
            }
            finally
            {
                string result = exceptionMessage == string.Empty ?
                    MixConstants.AppLogResults.Success : MixConstants.AppLogResults.Fail;

                string appLog = string.Join(xonline.mix.common.MixConstants.AppLogSeparator, new string[]
            {                
                MixOfferManagement.GetOfferApiName,  // API name                 
                offerId.ToString(),  // OfferId                           
                result,  // success or failure result,                
                hresult,  // HResult                
                timeElapsed.MillisecondsElapsed.ToString(),  // Duration  
                exceptionMessage,  // Exception if occured
            });
                Xom.Log(XomAreaName.log, appLog);
            }

            return offer;
        }


        /// <summary>
        /// Serializing Offer for logging
        /// </summary>
        /// <param name="offer">OfferV1</param>
        private string SerializeProduct(OfferV1 offer)
        {
            string a = string.Empty;

            MemoryStream memoryStream = new MemoryStream();
            DataContractSerializer dcSerializer = new DataContractSerializer(typeof(OfferV1));
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.Encoding = new UTF8Encoding(false);
            xmlWriterSettings.ConformanceLevel = ConformanceLevel.Document;
            xmlWriterSettings.Indent = true;

            using (XmlWriter xWriter = XmlWriter.Create(memoryStream, xmlWriterSettings))
            {
                dcSerializer.WriteObject(xWriter, offer);
                xWriter.Flush();

                memoryStream.Position = 0;

                XmlDocument xDoc = new XmlDocument();
                xDoc.Load(memoryStream);
                a = xDoc.OuterXml;
            }

            return a;
        }

        /// <summary>
        /// Generates a signed header for the file specified.
        /// </summary>
        /// <param name="fileSize">The length of the file specified.</param>
        /// <param name="fileType">The file type (must be 0x52475459).</param>
        /// <param name="fileHash">The SHA1 hash of the file.</param>
        public byte[] GetSignedHeader(uint fileSize, uint fileType, byte[] fileHash)
        {
            try
            {
                ApiValidation.Validate(MixOfferManagement.GetSignedHeaderApiName);

                return XSigProxy.GetSignedHeader(fileSize, fileType, fileHash);
            }
            catch (Exception ex)
            {
                hresult = AppLogValues.GetHResult(ex);

                exceptionMessage = AppLogValues.GetExceptionMessage(ex);
                throw;
            }
            finally
            {
                string appLog = string.Join(xonline.mix.common.MixConstants.AppLogSeparator, new string[]
                {
                    MixOfferManagement.GetSignedHeaderApiName,
                    fileSize.ToString(),
                    fileType.ToString("X"),
                });
                Xom.Log(XomAreaName.log, appLog);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Contracts\DataContractV1.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Runtime.Serialization;

using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using Microsoft.Practices.EnterpriseLibrary.Validation;
using xonline.mix.common;
using xonline.mix.common.validators;

namespace xonline.mix.productmanagement.contract
{
    /// <summary>
    /// Localization Information about the Product for a single Locale
    /// </summary>
    [DataContract(Name = "LocalizedData", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    // Mark the class with HasSelfValidation attribute. This will trigger the Validate method defined in the class.
    [HasSelfValidation]
    public class LocalizedDataV1
    {
        /// <summary>
        /// Locale in which this data will be displayed for
        /// E.g.  "en-US", "fr-FR"
        /// </summary>
        [DataMember(Name = "Locale", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.LocaleMin, MixConstants.StringLengths.LocaleMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string Locale { get; set; }

        /// <summary>
        /// Product Title
        /// </summary>
        [DataMember(Name = "Title", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.TitleMin, MixConstants.StringLengths.TitleMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string Title { get; set; }

        /// <summary>
        /// Title used for sorting
        /// E.g.  "The" is usually removed
        /// </summary>
        [DataMember(Name = "TitleSort", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.TitleSortMin, MixConstants.StringLengths.TitleSortMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string TitleSort { get; set; }

        /// <summary>
        /// Shortened name
        /// </summary>
        [DataMember(Name = "TitleReduced", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.TitleReducedMin, MixConstants.StringLengths.TitleReducedMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string TitleReduced { get; set; }

        /// <summary>
        /// name used for voice title for display
        /// </summary>
        [DataMember(Name = "VoiceDisplayTitle", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.LocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidVoiceDisplayTitleCompositeString)]        
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.VoiceDisplayTitleMin, MixConstants.StringLengths.VoiceDisplayTitleMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string VoiceDisplayTitle { get; set; }

        /// <summary>
        /// Product Description
        /// </summary>
        [DataMember(Name = "Description", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.DescriptionMin, MixConstants.StringLengths.DescriptionMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string Description { get; set; }

        /// <summary>
        /// Shortened Description
        /// </summary>
        [DataMember(Name = "DescriptionReduced", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.DescriptionReducedMin, MixConstants.StringLengths.DescriptionReducedMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedDataTag)]
        public string DescriptionReduced { get; set; }

        /// <summary>
        /// Other Locales that will use the same Localization Data
        /// E.g. "US", "FR"
        /// </summary>
        [DataMember(Name = "EquivalentLocales", IsRequired = false)]
        public string[] EquivalentLocales { get; set; }

        /// <summary>
        /// This validation method will take care that all the classes inheriting from this class has all it's validators executed.
        /// Absence of such a mechanism will result in only the base class validators being executed. 
        /// There is a similar pattern at lot of places in the code
        /// </summary>
        /// <param name="results"></param>
        [SelfValidation]
        public virtual void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(LocalizedDataV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType()); results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Back of the Box information about a game
    /// E.g. onlineVoice, offlineSaveStorageAmount
    /// </summary>     
    [DataContract(Name = "GameAttribute", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class GameAttributeV1
    {
        /// <summary>
        /// Collection of Game Attributes 
        /// back of the box information
        /// </summary>    
        [DataMember(Name = "Attributes", IsRequired = true)]
        [ObjectCollectionValidator(typeof(AttributeV1))]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.GameAttributeTag)]
        public AttributeV1[] Attributes { get; set; }


        /// <summary>
        /// Country for which these values are applicable
        /// E.g. "US", "FR"
        /// </summary>       
        [DataMember(Name = "Country", IsRequired = true)]
        [RegexValidator(MixConstants.RegExExpressions.CountryCodeRegEx, Tag = MixConstants.Tags.GameAttributeTag, MessageTemplate = MixConstants.TemplateMessages.InvalidRegEx)]
        public string Country { get; set; }

        /// <summary>
        /// Other countries that will use the same GameAttribute information
        /// E.g. "US", "FR"
        /// </summary>    
        [DataMember(Name = "EquivalentCountries", IsRequired = false)]
        public string[] EquivalentCountries { get; set; }

        /// <summary>
        /// Equivalent countries has to be validated separately and this method does that job
        /// </summary>
        /// <param name="results"></param>
        [SelfValidation]
        public void Validate(ValidationResults results)
        {
            if (this.EquivalentCountries != null)
            {
                foreach (string country in this.EquivalentCountries)
                {
                    if (!MixValidations.IsCountryCodeValid(country))
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidRegEx, country, "EquivalentCountries", "GameAttribute", MixConstants.RegExExpressions.CountryCodeRegEx), typeof(string), "EquivalentCountries", "GameAttribute", null));
                    }
                }
            }
        }
    }

    /// <summary>
    /// Back of the 'Box' information about a product
    /// E.g. onlineVoice, offlineSaveStorageAmount
    /// </summary>     
    [DataContract(Name = "ProductAttribute", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class ProductAttributeV1
    {
        /// <summary>
        /// Collection of Attributes 
        /// back of the box information
        /// </summary>    
        [DataMember(Name = "Attributes", IsRequired = true)]
        [ObjectCollectionValidator(typeof(AttributeV1))]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.ProductAttributeTag)]
        public AttributeV1[] Attributes { get; set; }


        /// <summary>
        /// Country for which these values are applicable
        /// E.g. "US", "FR"
        /// </summary>       
        [DataMember(Name = "Country", IsRequired = true)]
        [RegexValidator(MixConstants.RegExExpressions.CountryCodeRegEx, Tag = MixConstants.Tags.ProductAttributeTag, MessageTemplate = MixConstants.TemplateMessages.InvalidRegEx)]
        public string Country { get; set; }
    }

    /// <summary>
    /// Back of the Box information about a game
    /// E.g. onlineVoice, offlineSaveStorageAmount
    /// </summary>     
    [DataContract(Name = "Attribute", Namespace = "http://xonline.mix.contentingestion.contracts/V1")]
    [HasSelfValidation]
    public class AttributeV1
    {
        /// <summary>
        /// E.g. onlineVoice, offlineSaveStorageAmount
        /// </summary>  
        [DataMember(Name = "AttributeName", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.AttributeNameMin, MixConstants.StringLengths.AttributeNameMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.AttributeTag)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.AttributeTag)]
        public string AttributeName { get; set; }

        /// <summary>
        /// Attribute value
        /// </summary>
        [DataMember(Name = "Value", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.AttributeValueMin, MixConstants.StringLengths.AttributeValueMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.AttributeTag)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.AttributeTag)]
        public String Value { get; set; }

        /// <summary>
        /// Attribute Unit value
        /// </summary>
        [DataMember(Name = "AttributeUnitType", IsRequired = false)]
        public int? AttributeUnitType { get; set; }
    }


    /// <summary>
    /// Decryption information about a Game & Content
    /// </summary> 
    [DataContract(Name = "Encryption", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class EncryptionV1
    {
        /// <summary>
        /// Symmetric Key
        /// </summary> 
        [DataMember(Name = "SymKey", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.SymKeyLength, MixConstants.ArrayBounds.SymKeyLength, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.EncryptionTag)]
        public byte[] SymKey { get; set; }

        /// <summary>
        /// Public Key
        /// </summary> 
        [DataMember(Name = "PublicKey", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.PublicKeyLength, MixConstants.ArrayBounds.PublicKeyLength, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.EncryptionTag)]
        public byte[] PublicKey { get; set; }
    }

    /// <summary>
    /// Information about a file holding either the game, part of the game or game content 
    /// </summary> 
    [DataContract(Name = "File", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class FileV1
    {
        /// <summary>
        /// Url Location of the File
        /// </summary> 
        [DataMember(Name = "FileUrl", IsRequired = true)]
        [UriValidator(MixConstants.StringLengths.FileUrlMax, Tag = MixConstants.Tags.FileTag)]
        public string FileUrl { get; set; }

        /// <summary>
        /// When a package of downloadable bits is split across multiple files,
        /// this index indicates the ordering of the files
        /// </summary> 
        [DataMember(Name = "SortOrder", IsRequired = true)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, int.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.FileTag)]
        public int SortOrder { get; set; }
    }

    /// <summary>
    /// Represents a downloadable file where the contents of the file are localized
    /// Used by Video & Images
    /// </summary> 
    [DataContract(Name = "LocalizedFile", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class LocalizedFileV1
    {
        /// <summary>
        /// A unique identifier for the product
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "LocalizedFileId", IsRequired = true)]
        public Guid LocalizedFileId { get; set; }

        /// <summary>
        /// The locale for which this file is applicable
        /// E.g.  "en-US", "fr-FR"
        /// </summary>
        [DataMember(Name = "Locale", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.LocaleMin, MixConstants.StringLengths.LocaleMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedFileTag)]
        public string Locale { get; set; }

        /// <summary>
        /// Url Location of the File
        /// </summary> 
        [DataMember(Name = "FileUrl", IsRequired = true)]
        [UriValidator(MixConstants.StringLengths.FileUrlMax, Tag = MixConstants.Tags.LocalizedFileTag)]
        public string FileUrl { get; set; }

        /// <summary>
        /// Other Locales that will use the same Localization Data
        /// E.g. "US", "FR"
        /// </summary>
        [DataMember(Name = "EquivalentLocales", IsRequired = false)]
        public string[] EquivalentLocales { get; set; }

        [SelfValidation]
        public virtual void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(LocalizedFileV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Identifiers and sort order (if applicable) of related games
    /// </summary>
    [DataContract(Name = "GameRelationship", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class GameRelationshipV1
    {
        /// <summary>
        /// A unique identifier for the related product 
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "GameId", IsRequired = true)]
        public Guid GameId { get; set; }

        /// <summary>
        /// Indicates the ordering of related media when the relationship is of the same type. 
        /// If not ordering is required then the sort order can be set to zero
        /// </summary>
        [DataMember(Name = "SortOrder", IsRequired = true)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, int.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.GameRelationshipTag)]
        public int SortOrder { get; set; }
    }

    /// <summary>
    /// Related Product Information
    /// </summary>
    [DataContract(Name = "ProductRelationship", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class ProductRelationshipV1
    {
        /// <summary>
        /// A unique identifier for the related product 
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "ProductId", IsRequired = true)]
        public Guid ProductId { get; set; }

        /// <summary>
        /// E.g. MediaToBoxArt, MediaToBackground
        /// </summary>
        [DataMember(Name = "RelationshipTypeId", IsRequired = true)]
        public int RelationshipTypeId { get; set; }

        /// <summary>
        /// Indicates the ordering of related media when the relationship is of the same type. 
        /// If not ordering is required then the sort order can be set to zero
        /// </summary>
        [DataMember(Name = "SortOrder", IsRequired = true)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, int.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.ProductRelationshipTag)]
        public int SortOrder { get; set; }
    }

    /// <summary>
    /// Package Information about a Product
    /// </summary>
    [DataContract(Name = "Package", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public abstract class PackageV1
    {
        /// <summary>
        /// A unique identifier for the product
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "PackageId", IsRequired = true)]
        public Guid PackageId { get; set; }

        [SelfValidation]
        public virtual void Validate(ValidationResults results)
        {

            if (this.GetType() != typeof(PackageV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Product Package Information
    /// </summary>
    [DataContract(Name = "ProductPackage", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class ProductPackageV1 : PackageV1
    {
        /// <summary>
        /// Generated upstream in the ingestion pipeline
        /// Hash of the package that is used for validation on the console
        /// </summary>
        [DataMember(Name = "ContentId", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.ContentIdLength, MixConstants.ArrayBounds.ContentIdLength, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.ProductPackageTag)]
        public byte[] ContentId { get; set; }

        /// <summary>
        /// Size (in Xbox Console clusters) on the console after installed
        /// One Xbox Console cluster = 16 KB
        /// </summary>
        [DataMember(Name = "InstallSize", IsRequired = true)]
        public UInt64 InstallSize { get; set; }

        /// <summary>
        /// Size (in bytes) of package file
        /// </summary>
        [DataMember(Name = "PackageSize", IsRequired = true)]
        public UInt64 PackageSize { get; set; }

        /// <summary>
        /// E.g. CAB, SVOD uncompressed, SVOD compressed
        /// </summary>
        [DataMember(Name = "PackageType", IsRequired = true)]
        public int PackageType { get; set; }

        /// <summary>
        /// Regions in which the content package can be played
        /// E.g. North America, Europe and Asia
        /// </summary>
        [DataMember(Name = "SupportedGameRegionMask", IsRequired = true)]
        public long SupportedGameRegionMask { get; set; }

        /// <summary>
        /// Encrpytion information
        /// </summary>
        [DataMember(Name = "Encryption", IsRequired = false)]
        [ObjectValidator]
        public EncryptionV1 Encryption { get; set; }

        /// <summary>
        /// Collection of information about the packages constituent files
        /// </summary>
        [DataMember(Name = "Files", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.ProductPackageTag)]
        [ObjectCollectionValidator(typeof(FileV1))]
        public FileV1[] Files { get; set; }

        /// <summary>
        /// Collection of client types for which this package is applicable
        /// E.g. XBox360, XBox1, PC
        /// </summary>
        [DataMember(Name = "ClientTypes", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.ProductPackageTag)]
        public int[] ClientTypes { get; set; }

        /// <summary>
        /// This validation method will take care that all the classes inheriting from this class has all it's validators executed.
        /// Absence of such a mechanism will result in only the base class validators being executed. 
        /// </summary>
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(ProductPackageV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// App Product Package Information
    /// </summary>
    [DataContract(Name = "AppPackage", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class AppPackageV1 : PackageV1
    {
        /// <summary>
        /// Generated upstream in the ingestion pipeline
        /// Hash of the package that is used for validation on the console
        /// </summary>
        [DataMember(Name = "ContentId", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.ContentIdLength, MixConstants.ArrayBounds.ContentIdLength, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.AppPackageTag)]
        public byte[] ContentId { get; set; }

        /// <summary>
        /// Size (in Xbox Console clusters) on the console after installed
        /// One Xbox Console cluster = 16 KB
        /// </summary>
        [DataMember(Name = "InstallSize", IsRequired = true)]
        public UInt64 InstallSize { get; set; }

        /// <summary>
        /// Size (in bytes) of package file
        /// </summary>
        [DataMember(Name = "PackageSize", IsRequired = true)]
        public UInt64 PackageSize { get; set; }

        /// <summary>
        /// E.g. CAB, SVOD uncompressed, SVOD compressed
        /// </summary>
        [DataMember(Name = "PackageType", IsRequired = true)]
        public int PackageType { get; set; }

        /// <summary>
        /// Encrpytion information
        /// </summary>
        [DataMember(Name = "Encryption", IsRequired = false)]
        [ObjectValidator]
        public EncryptionV1 Encryption { get; set; }

        /// <summary>
        /// Collection of information about the packages constituent files
        /// </summary>
        [DataMember(Name = "Files", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.AppPackageTag)]
        [ObjectCollectionValidator(typeof(FileV1))]
        public FileV1[] Files { get; set; }

        /// <summary>
        /// Collection of client types for which this package is applicable
        /// E.g. XBox360, XBox1, PC
        /// </summary>
        [DataMember(Name = "ClientTypes", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.AppPackageTag)]
        public int[] ClientTypes { get; set; }

        /// <summary>
        /// This validation method will take care that all the classes inheriting from this class has all it's validators executed.
        /// Absence of such a mechanism will result in only the base class validators being executed. 
        /// </summary>
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(AppPackageV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    [KnownType(typeof(AppV1))]
    [KnownType(typeof(GameV1))]
    [KnownType(typeof(GameContentV1))]
    [KnownType(typeof(GameConsumableV1))]
    [KnownType(typeof(AvatarItemV1))]
    [KnownType(typeof(ImageV1))]
    [KnownType(typeof(BundleV1))]
    [KnownType(typeof(PointsBundleV1))]
    [KnownType(typeof(LiveSubscriptionFamilyV1))]
    [KnownType(typeof(GameSubscriptionFamilyV1))]
    [KnownType(typeof(AddonSubscriptionFamilyV1))]
    [KnownType(typeof(GameSubscriptionV1))]
    [KnownType(typeof(AddonSubscriptionV1))]
    [KnownType(typeof(LiveSubscriptionV1))]
    /// <summary>
    /// Product Information
    /// </summary>
    [DataContract(Name = "Product", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public abstract class ProductV1
    {
        /// <summary>
        /// A unique identifier for the product
        /// Generated upstream in the ingestion pipeline
        /// </summary>
        [DataMember(Name = "ProductId", IsRequired = true)]
        public Guid ProductId { get; set; }

        [SelfValidation]
        public virtual void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(ProductV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Media Product Information
    /// </summary>
    [DataContract(Name = "MediaBase", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public abstract class MediaBaseV1 : ProductV1
    {
        /// <summary>
        /// First point in time at which the product information should be visible to customers
        /// </summary>
        [DataMember(Name = "VisibilityDate", IsRequired = true)]
        public DateTime VisibilityDate { get; set; }

        /// <summary>
        /// The visibility status of the product media
        /// E.g. Unpublished, Staging, Live, Withdrawn, Deleted
        /// Visibility status will not change and hence the domain validator is hard coded here.
        /// </summary>
        [DataMember(Name = "VisibilityStatus", IsRequired = true)]
        public int VisibilityStatus { get; set; }

        /// <summary>
        /// Stock keeping unit
        /// </summary> 
        [DataMember(Name = "Sku", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.MediaBaseTag, MessageTemplate = MixConstants.TemplateMessages.InvalidSKUCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.SkuMin, MixConstants.StringLengths.SkuMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.MediaBaseTag)]
        public string Sku { get; set; }

        /// <summary>
        /// This validation method will take care that all the classes inheriting from this class has all it's validators executed.
        /// Absence of such a mechanism will result in only the base class validators being executed. 
        /// </summary>
        /// <param name="results"></param>
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(MediaBaseV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Image Information
    /// </summary>
    [DataContract(Name = "Image", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class ImageV1 : MediaBaseV1
    {
        /// <summary>
        /// Collection of files
        /// </summary>
        [DataMember(Name = "LocalizedImageFiles", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.ImageTag)]
        [ObjectCollectionValidator(typeof(LocalizedImageFileV1))]
        public LocalizedImageFileV1[] LocalizedImageFiles { get; set; }

        /// <summary>
        /// Collection of relationship information to other products
        /// </summary>
        [DataMember(Name = "ProductRelationships", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.ImageTag)]
        [ObjectCollectionValidator(typeof(ProductRelationshipV1))]
        public ProductRelationshipV1[] ProductRelationships { get; set; }
    }

    /// <summary>
    /// Locale Specific Image Information
    /// </summary>    
    [DataContract(Name = "LocalizedImageFile", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class LocalizedImageFileV1 : LocalizedFileV1
    {
        /// <summary>
        /// E.g. JPG, PNG
        /// </summary>
        [DataMember(Name = "FormatId", IsRequired = true)]
        public int FormatId { get; set; }

        /// <summary>
        /// Identifier used to indicate the dimensions of the image
        /// E.g. Medium Thumbnail(128x128), Xbox.com TV Poster(100x100)
        /// </summary>
        [DataMember(Name = "SizeId", IsRequired = true)]
        public int SizeId { get; set; }
    }

    /// <summary>
    /// ProductBase information for Game and GameContent Products
    /// </summary>
    [DataContract(Name = "ProductBase", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public abstract class ProductBaseV1 : MediaBaseV1
    {
        /// <summary>
        /// Street Date the product is released
        /// This is a world wide date, not specific to a country of locale
        /// </summary>
        [DataMember(Name = "ReleaseDate", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.ProductBaseTag)]
        public DateTime? ReleaseDate { get; set; }

        /// <summary>
        /// Indicate if we should perform a geofence check at purchase time & license acquisition time
        /// Geofencing is where we do a reverse lookup on your ip and determine from this which country we are in
        /// </summary> 
        [DataMember(Name = "GeoCheckPolicy", IsRequired = false)]
        public bool GeoCheckPolicy { get; set; }

        /// <summary>
        /// Collection of Rating Value Ids for the Product
        /// </summary>
        [DataMember(Name = "Ratings", IsRequired = false)]
        public int[] Ratings { get; set; }

        /// <summary>
        /// Collection of Rating Descriptor Ids for the Product
        /// </summary>
        [DataMember(Name = "RatingDescriptors", IsRequired = false)]
        public int[] RatingDescriptors { get; set; }

        /// <summary>
        /// This validation method will take care that all the classes inheriting from this class has all it's validators executed.
        // Absence of such a mechanism will result in only the base class validators being executed. 
        /// </summary>
        /// <param name="results"></param>
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {

            if (this.Ratings != null)
            {
                foreach (int rating in this.Ratings)
                {
                    if (rating < 0)
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidRangeString, rating, "Ratings", MixConstants.Tags.ProductBaseTag, 0, "Inclusive", int.MaxValue, "Inclusive"), typeof(int), "Ratings", MixConstants.Tags.ProductBaseTag, null));
                    }
                }
            }

            if (this.RatingDescriptors != null)
            {
                foreach (int ratingDescriptor in this.RatingDescriptors)
                {
                    if (ratingDescriptor < 0)
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidRangeString, ratingDescriptor, "RatingDescriptors", MixConstants.Tags.ProductBaseTag, 0, "Inclusive", int.MaxValue, "Inclusive"), typeof(int), "RatingDescriptors", MixConstants.Tags.ProductBaseTag, null));
                    }
                }
            }


            if (this.GetType() != typeof(ProductBaseV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                validator.Tag = this.GetType().Name;
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Game Information
    /// </summary> 
    [DataContract(Name = "Game", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class GameV1 : ProductBaseV1
    {
        /// <summary>
        /// LiveTitleId that is used as the title id on the xbox console
        /// </summary>
        [DataMember(Name = "LiveTitleId", IsRequired = true)]
        public uint LiveTitleId { get; set; }

        /// <summary>
        /// Game Media Type
        /// E.g. Game Trial, Game Demo
        /// </summary>    
        [DataMember(Name = "GameTypeId", IsRequired = true)]
        public int GameTypeId { get; set; }

        /// <summary>
        /// Collection of Categories
        /// E.g. Action, Comedy
        /// </summary>    
        [DataMember(Name = "Categories", IsRequired = false)]
        public int[] Categories { get; set; }

        /// <summary>
        /// Collection of Game Attributes 
        /// back of the box information
        /// </summary>    
        [DataMember(Name = "GameAttributes", IsRequired = false)]
        [ObjectCollectionValidator(typeof(GameAttributeV1))]
        public GameAttributeV1[] GameAttributes { get; set; }

        /// <summary>
        /// Collection of Executable files
        /// </summary>    
        [DataMember(Name = "Executables", IsRequired = false)]
        [ObjectCollectionValidator(typeof(ProductPackageV1))]
        public ProductPackageV1[] Executables { get; set; }

        /// <summary>
        /// Collection of Localization Data about the Game
        /// </summary>    
        [DataMember(Name = "GameLocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.GameLocalizedDataMin, MixConstants.ArrayBounds.GameLocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.GameTag)]
        [ObjectCollectionValidator(typeof(GameLocalizedDataV1))]
        public GameLocalizedDataV1[] GameLocalizedData { get; set; }

        /// <summary>
        /// Collection of Video Previews
        /// </summary>  
        [DataMember(Name = "VideoPreviews", IsRequired = false)]
        [ObjectCollectionValidator(typeof(VideoPreviewV1))]
        public VideoPreviewV1[] VideoPreviews { get; set; }
        
        [DataMember(Name = "SearchInformation", IsRequired = false)]
        [ObjectCollectionValidator(typeof(SearchInformationV1))]
        public SearchInformationV1[] SearchInformation { get; set; }
    }

    /// <summary>
    /// Preview Package Information
    /// </summary>
    [DataContract(Name = "PreviewPackage", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class PreviewPackageV1 : PackageV1
    {
        /// <summary>
        /// Country for which tis preview can be viewed
        /// E.g. "US", "FR"
        /// </summary>  
        [DataMember(Name = "Country", IsRequired = true)]
        [RegexValidator(MixConstants.RegExExpressions.CountryCodeRegEx, Tag = MixConstants.Tags.PreviewPackageTag, MessageTemplate = MixConstants.TemplateMessages.InvalidRegEx)]
        public string Country { get; set; }

        /// <summary>
        /// This validation method will take care that all the classes inheriting from this class has all it's validators executed.
        /// Absence of such a mechanism will result in only the base class validators being executed. 
        /// </summary>
        /// <param name="results"></param>
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.GetType() != typeof(PreviewPackageV1))
            {
                Validator validator = ValidationFactory.CreateValidator(this.GetType());
                results.AddAllResults(validator.Validate(this));
            }
        }
    }

    /// <summary>
    /// Video Preview Information
    /// only used within Game
    /// </summary>
    [DataContract(Name = "VideoPreview", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class VideoPreviewV1 : PreviewPackageV1
    {
        /// <summary>
        /// Url Location of the File
        /// </summary> 
        [DataMember(Name = "FileUrl", IsRequired = true)]
        [UriValidator(MixConstants.StringLengths.FileUrlMax, Tag = MixConstants.Tags.VideoPreviewTag)]
        public string FileUrl { get; set; }
    }

    /// <summary>
    /// SearchInformationInformation
    /// </summary> 
    [DataContract(Name = "SearchInformation", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class SearchInformationV1
    {
        /// <summary>
        /// Keywords used for search terms
        /// </summary>   
        [DataMember(Name = "Keywords", IsRequired = false)]
        public string[] Keywords { get; set; }

        /// <summary>
        /// AlternateTitles used for search terms
        /// </summary>   
        [DataMember(Name = "AlternateTitles", IsRequired = false)]
        public string[] AlternateTitles { get; set; }

        /// <summary>
        /// The locale for which this file is applicable
        /// E.g.  "en-US", "fr-FR"
        /// </summary>
        [DataMember(Name = "Locale", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.LocaleMin, MixConstants.StringLengths.LocaleMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.LocalizedFileTag)]
        public string Locale { get; set; }


        /// <summary>
        /// Validating the string lengths in the arrays
        /// </summary>
        /// <param name="results"></param>
        [SelfValidation]
        public virtual void Validate(ValidationResults results)
        {
            if (this.Keywords != null)
            {
                foreach (string keyword in this.Keywords)
                {

                    if (keyword != null)
                    {
                        if (!MixValidations.IsTermLengthValid(keyword))
                        {
                            results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, keyword, "Keywords", MixConstants.Tags.SearchInformationDataTag, MixConstants.StringLengths.TermsMin, "Inclusive", MixConstants.StringLengths.TermsMax, "Inclusive"), typeof(string), "Keywords", MixConstants.Tags.SearchInformationDataTag, null));
                        }
                    }
                    else
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, keyword, "Keywords", MixConstants.Tags.SearchInformationDataTag, MixConstants.StringLengths.TermsMin, "Inclusive", MixConstants.StringLengths.TermsMax, "Inclusive"), typeof(string), "Keywords", MixConstants.Tags.SearchInformationDataTag, null));
                    }
                }
            }

            if (this.AlternateTitles != null)
            {
                foreach (string alternateTitle in this.AlternateTitles)
                {

                    if (alternateTitle != null)
                    {
                        if (!MixValidations.IsTermLengthValid(alternateTitle))
                        {
                            results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, alternateTitle, "AlternateTitles", MixConstants.Tags.SearchInformationDataTag, MixConstants.StringLengths.TermsMin, "Inclusive", MixConstants.StringLengths.TermsMax, "Inclusive"), typeof(string), "AlternateTitles", MixConstants.Tags.SearchInformationDataTag, null));
                        }
                    }
                    else
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, alternateTitle, "AlternateTitles", MixConstants.Tags.SearchInformationDataTag, MixConstants.StringLengths.TermsMin, "Inclusive", MixConstants.StringLengths.TermsMax, "Inclusive"), typeof(string), "AlternateTitles", MixConstants.Tags.SearchInformationDataTag, null));
                    }
                }
            }

        }

    }


    /// <summary>
    /// Game Localization Information
    /// </summary> 
    [DataContract(Name = "GameLocalizedData", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class GameLocalizedDataV1 : LocalizedDataV1
    {
        /// <summary>
        /// Customized Genre name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "CustomGenre", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.GameLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidCustomGenreCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.CustomGenreMin, MixConstants.StringLengths.CustomGenreMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.GameLocalizedDataTag)]
        public string CustomGenre { get; set; }

        /// <summary>
        /// Developer Name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "Developer", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.GameLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidDeveloperCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.DeveloperMin, MixConstants.StringLengths.DeveloperMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.GameLocalizedDataTag)]
        public string Developer { get; set; }

        /// <summary>
        /// Publisher Name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "Publisher", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.GameLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidPublisherCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.PublisherMin, MixConstants.StringLengths.PublisherMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.GameLocalizedDataTag)]
        public string Publisher { get; set; }

        // Validate the Locale lengths since this cannot happen using attributes
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.EquivalentLocales != null)
            {
                foreach (string locale in this.EquivalentLocales)
                {
                    if (locale != null)
                    {
                        if (!MixValidations.IsLocaleLengthValid(locale))
                        {
                            results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, locale, "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, MixConstants.StringLengths.LocaleMin, "Inclusive", MixConstants.StringLengths.LocaleMax, "Inclusive"), typeof(string), "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, null));
                        }
                    }
                    else
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.NullObjectString, locale, "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, MixConstants.StringLengths.LocaleMin, "Inclusive", MixConstants.StringLengths.LocaleMax, "Inclusive"), typeof(string), "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, null));
                    }
                }
            }
        }
    }


    /// <summary>
    /// App Localization Information
    /// </summary> 
    [DataContract(Name = "AppLocalizedData", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class AppLocalizedDataV1 : LocalizedDataV1
    {
        /// <summary>
        /// Developer Name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "Developer", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.AppLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidDeveloperCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.DeveloperMin, MixConstants.StringLengths.DeveloperMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.AppLocalizedDataTag)]
        public string Developer { get; set; }

        /// <summary>
        /// Publisher Name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "Publisher", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.AppLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidPublisherCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.PublisherMin, MixConstants.StringLengths.PublisherMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.AppLocalizedDataTag)]
        public string Publisher { get; set; }

        // Validate the Locale lengths since this cannot happen using attributes
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.EquivalentLocales != null)
            {
                foreach (string locale in this.EquivalentLocales)
                {
                    if (locale != null)
                    {
                        if (!MixValidations.IsLocaleLengthValid(locale))
                        {
                            results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, locale, "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, MixConstants.StringLengths.LocaleMin, "Inclusive", MixConstants.StringLengths.LocaleMax, "Inclusive"), typeof(string), "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, null));
                        }
                    }
                    else
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.NullObjectString, locale, "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, MixConstants.StringLengths.LocaleMin, "Inclusive", MixConstants.StringLengths.LocaleMax, "Inclusive"), typeof(string), "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, null));
                    }
                }
            }
        }
    }


    /// <summary>
    /// Bundle Localization Information
    /// </summary> 
    [DataContract(Name = "BundleLocalizedData", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    [HasSelfValidation]
    public class BundleLocalizedDataV1 : LocalizedDataV1
    {
        /// <summary>
        /// Developer Name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "Developer", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.BundleLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidDeveloperCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.DeveloperMin, MixConstants.StringLengths.DeveloperMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.BundleLocalizedDataTag)]
        public string Developer { get; set; }

        /// <summary>
        /// Publisher Name that will be displayed on the console
        /// </summary>   
        [DataMember(Name = "Publisher", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.BundleLocalizedDataTag, MessageTemplate = MixConstants.TemplateMessages.InvalidPublisherCompositeString)]
        [NotNullValidator(Negated = true)]
        [StringLengthValidator(MixConstants.StringLengths.PublisherMin, MixConstants.StringLengths.PublisherMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.BundleLocalizedDataTag)]
        public string Publisher { get; set; }

        // Validate the Locale lengths since this cannot happen using attributes
        [SelfValidation]
        public override void Validate(ValidationResults results)
        {
            if (this.EquivalentLocales != null)
            {
                foreach (string locale in this.EquivalentLocales)
                {
                    if (locale != null)
                    {
                        if (!MixValidations.IsLocaleLengthValid(locale))
                        {
                            results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.InvalidString, locale, "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, MixConstants.StringLengths.LocaleMin, "Inclusive", MixConstants.StringLengths.LocaleMax, "Inclusive"), typeof(string), "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, null));
                        }
                    }
                    else
                    {
                        results.AddResult(new ValidationResult(string.Format(MixConstants.TemplateMessages.NullObjectString, locale, "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, MixConstants.StringLengths.LocaleMin, "Inclusive", MixConstants.StringLengths.LocaleMax, "Inclusive"), typeof(string), "EquivalentLocales", MixConstants.Tags.LocalizedDataTag, null));
                    }
                }
            }
        }
    }

    /// <summary>
    /// Game Content Information
    /// </summary>  
    [DataContract(Name = "GameContent", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class GameContentV1 : ProductBaseV1
    {
        /// <summary>
        /// E.g. Game Content, Theme,
        /// </summary> 
        [DataMember(Name = "GameContentTypeId", IsRequired = true)]
        public int GameContentTypeId { get; set; }

        /// <summary>                
        /// The titleId the game
        /// This field is not required for Xbox Originals or XNA games 
        /// and will internally be set to 'XNA Game Launcher' or 'Fusion'
        /// </summary>    
        [DataMember(Name = "EffectiveLiveTitle", IsRequired = true)]
        public int EffectiveLiveTitle { get; set; }

        /// <summary>
        /// Collection of Categories
        /// E.g. Action, Comedy
        /// </summary>    
        [DataMember(Name = "Categories", IsRequired = false)]
        public int[] Categories { get; set; }

        /// <summary>
        ///  Must this gamecontent product inherit the rating from the game product
        ///  Ratings are inherited from the game with the smallest 'sortOrder' value
        ///  in the GameRelationship's linking the games to this product
        /// </summary>    
        [DataMember(Name = "InheritRating", IsRequired = true)]
        public bool InheritRating { get; set; }

        /// <summary>
        /// Collection of package files
        /// </summary>    
        [DataMember(Name = "Packages", IsRequired = false)]
        [ObjectCollectionValidator(typeof(ProductPackageV1))]
        public ProductPackageV1[] Packages { get; set; }


        /// <summary>
        /// Collection of relationships to the game
        /// </summary>    
        [DataMember(Name = "GameRelationships", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.GameContentTag)]
        [ObjectCollectionValidator(typeof(GameRelationshipV1))]
        public GameRelationshipV1[] GameRelationships { get; set; }

        /// <summary>
        /// Collection of Localization Data about the Game Content
        /// </summary>    
        [DataMember(Name = "LocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.LocalizedDataMin, MixConstants.ArrayBounds.LocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.GameContentTag)]
        [ObjectCollectionValidator(typeof(LocalizedDataV1))]
        public LocalizedDataV1[] LocalizedData { get; set; }
        
        [DataMember(Name = "SearchInformation", IsRequired = false)]
        [ObjectCollectionValidator(typeof(SearchInformationV1))]
        public SearchInformationV1[] SearchInformation { get; set; }
    }

    /// <summary>
    /// Game Consumable Information
    /// </summary>
    [DataContract(Name = "GameConsumable", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class GameConsumableV1 : GameContentV1
    {
        /// <summary>
        /// Publisher specific unique ID for consumables
        /// </summary> 
        [DataMember(Name = "AssetId", IsRequired = true)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, int.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.GameConsumableTag)]
        public int AssetId { get; set; }
    }

    /// <summary>
    /// Avatar Item Information
    /// </summary>
    [DataContract(Name = "AvatarItem", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class AvatarItemV1 : GameContentV1
    {
        /// <summary>
        /// Descriptor of which body type this avatar item supports
        /// E.g. Unknown, Male, Female, All
        /// </summary> 
        [DataMember(Name = "BodyType", IsRequired = true)]
        public int BodyType { get; set; }

        /// <summary>
        /// Avatar Item Asset ID is the Avatar ID used by the Avatar 
        /// editor to identify Avatar Assets. The ID contains item type, 
        /// avatar gender and other identifying characteristics in the ID
        /// </summary> 
        [DataMember(Name = "AssetId", IsRequired = true)]
        public Guid AssetId { get; set; }
    }

    /// <summary>
    /// App Information
    /// </summary> 
    [DataContract(Name = "App", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class AppV1 : ProductBaseV1
    {
        /// <summary>
        /// LiveTitleId that is used as the title id on the xbox console
        /// </summary>
        [DataMember(Name = "LiveTitleId", IsRequired = true)]
        public uint LiveTitleId { get; set; }

        /// <summary>
        /// Media Type
        /// E.g. 62 for Apps
        /// </summary>    
        [DataMember(Name = "TypeId", IsRequired = true)]
        public int TypeId { get; set; }

        /// <summary>
        /// Collection of Categories
        /// E.g. Sports, Movies
        /// </summary>    
        [DataMember(Name = "Categories", IsRequired = false)]
        public int[] Categories { get; set; }

        /// <summary>
        /// Collection of Attributes 
        /// back of the box information
        /// </summary>    
        [DataMember(Name = "ProductAttributes", IsRequired = false)]
        [ObjectCollectionValidator(typeof(ProductAttributeV1))]
        public ProductAttributeV1[] ProductAttributes { get; set; }

        /// <summary>
        /// Collection of AppTypes
        /// E.g. LinearTv, Video On Demand
        /// </summary>    
        [DataMember(Name = "AppTypes", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.AppTypesDataMin, MixConstants.ArrayBounds.AppTypesDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.AppTag)]
        public int[] AppTypes { get; set; }

        /// <summary>
        /// Collection of package files
        /// </summary>    
        [DataMember(Name = "Packages", IsRequired = false)]
        [ObjectCollectionValidator(typeof(AppPackageV1))]
        public AppPackageV1[] Packages { get; set; }

        /// <summary>
        /// Collection of Localization Data about the App
        /// </summary>    
        [DataMember(Name = "AppLocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.AppLocalizedDataMin, MixConstants.ArrayBounds.AppLocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.AppTag)]
        [ObjectCollectionValidator(typeof(AppLocalizedDataV1))]
        public AppLocalizedDataV1[] AppLocalizedData { get; set; }

        [DataMember(Name = "SearchInformation", IsRequired = false)]
        [ObjectCollectionValidator(typeof(SearchInformationV1))]
        public SearchInformationV1[] SearchInformation { get; set; }
    }


    /// <summary>
    /// Bundle Information
    /// </summary>
    [DataContract(Name = "Bundle", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class BundleV1 : MediaBaseV1
    {
        /// <summary>
        /// Collection of Localization Data about the Bundle
        /// </summary> 
        [DataMember(Name = "BundleLocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.BundleLocalizedDataMin, MixConstants.ArrayBounds.BundleLocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.BundleTag)]
        [ObjectCollectionValidator(typeof(BundleLocalizedDataV1))]
        public BundleLocalizedDataV1[] BundleLocalizedData { get; set; }

        /// <summary>
        /// collection of Products in this Bundle
        /// </summary>
        [DataMember(Name = "ProductIds", IsRequired = true)]
        [NotNullValidator(MessageTemplate = MixConstants.TemplateMessages.NullObjectString, Tag = MixConstants.Tags.BundleTag)]
        public Guid[] ProductIds { get; set; }
        
        [DataMember(Name = "SearchInformation", IsRequired = false)]
        [ObjectCollectionValidator(typeof(SearchInformationV1))]
        public SearchInformationV1[] SearchInformation { get; set; }
    }

    /// <summary>
    /// Points Bundle Product information. This product represents the bundles of points which a user can acquire 
    /// using credit card / tokens.
    /// </summary>
    [DataContract(Name = "PointsBundle", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class PointsBundleV1 : ProductBaseV1
    {
        /// <summary>
        /// Number of points which can be purchased.
        /// </summary>
        [DataMember(Name = "Points", IsRequired = true)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, Int32.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.PointsBundleTag)]
        public int Points { get; set; }

        /// <summary>
        /// Localized Data for Points bundle
        /// </summary>
        [DataMember(Name = "LocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.LocalizedDataMin, MixConstants.ArrayBounds.LocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.PointsBundleTag)]
        [ObjectCollectionValidator(typeof(LocalizedDataV1))]
        public LocalizedDataV1[] LocalizedData { get; set; }
    }

    /// <summary>
    /// Subscription product information
    /// This product represents any subscription product which can be a Live subscription,content subscription/Game subscription
    /// </summary>
    [DataContract(Name = "Subscription", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public abstract class SubscriptionBaseV1 : ProductBaseV1
    {
        /// <summary>
        /// Internal name for subscription
        /// </summary>
        [DataMember(Name = "Name", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.SubscriptionNameMin, MixConstants.StringLengths.SubscriptionNameMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.SubscriptionTag)]
        public string InternalName { get; set; }

        /// <summary>
        /// Subscription FamilyId. This can be Gold/Silver/Elite/Family
        /// </summary>
        [DataMember(Name = "SubscriptionFamily", IsRequired = true)]
        public Guid SubscriptionFamilyId { get; set; }

        /// <summary>
        /// Billing Frequency associated with subscription.Ex: Monthly,Quarterly,Yearly
        /// </summary>
        [DataMember(Name = "BillingFrequency", IsRequired = true)]
        public int BillingFrequencyId { get; set; }

        /// <summary>
        /// Duration information for Subscription.Ex: 3 months,12 months etc
        /// </summary>
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.SubscriptionTag, MessageTemplate = MixConstants.TemplateMessages.InvalidDurationIdString)]
        [NotNullValidator(Negated = true)]
        [RangeValidator(0, RangeBoundaryType.Inclusive, int.MaxValue, RangeBoundaryType.Inclusive, MessageTemplate = MixConstants.TemplateMessages.InvalidRangeString, Tag = MixConstants.Tags.SubscriptionTag)]
        [DataMember(Name = "SubscriptionDuration", IsRequired = false)]
        public int? SubscriptionDuration { get; set; }

        /// <summary>
        /// DurationType for a subscription product.Ex: Months,Days,Years
        /// </summary>
        [DataMember(Name = "SubscriptionDurationType", IsRequired = true)]
        public int SubscriptionDurationTypeId { get; set; }

        /// <summary>
        /// IsCancelable property for subscription product.
        /// </summary>
        [DataMember(Name = "IsCancelable", IsRequired = true)]
        public bool IsCancelable { get; set; }

        /// <summary>
        /// Service component Id associated to a Subscription
        /// </summary>
        [DataMember(Name = "ServiceComponentId", IsRequired = false)]
        [ValidatorComposition(CompositionType.Or, Tag = MixConstants.Tags.SubscriptionTag, MessageTemplate = MixConstants.TemplateMessages.InvalidServiceComponentIdString)]
        [NotNullValidator(Negated = true)]
        [TypeConversionValidator(typeof(Guid), Tag = MixConstants.Tags.SubscriptionTag)]
        public string ServiceComponentId { get; set; }

        /// <summary>
        /// Sell typeId associated to a subscription.Ex:Online/Prepaid
        /// </summary>
        [DataMember(Name = "SellType", IsRequired = true)]
        public int SellTypeId { get; set; }

        /// <summary>
        /// Localized Data for subscription.
        /// </summary>
        [DataMember(Name = "LocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.LocalizedDataMin, MixConstants.ArrayBounds.LocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.SubscriptionTag)]
        [ObjectCollectionValidator(typeof(LocalizedDataV1))]
        public LocalizedDataV1[] LocalizedData { get; set; }


    }
    /// <summary>
    /// Data contract for Live subscription
    /// </summary>
    [DataContract(Name = "LiveSubscription", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class LiveSubscriptionV1 : SubscriptionBaseV1
    {


    }
    /// <summary>
    /// Data contract for AddonSubscription
    /// </summary>
    [DataContract(Name = "ContentSubscription", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class AddonSubscriptionV1 : SubscriptionBaseV1
    {


    }
    /// <summary>
    /// Datacontract for GameSubscription
    /// </summary>
    [DataContract(Name = "GameSubscription", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class GameSubscriptionV1 : SubscriptionBaseV1
    {


    }

    /// <summary>
    /// Base class for subscription family.
    /// Defined the relationships,services and localized data for family
    /// </summary>
    [DataContract(Name = "SubscriptionFamily", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public abstract class SubscriptionFamilyV1 : ProductBaseV1
    {
        /// <summary>
        /// Internal name for the subscription family
        /// </summary>
        [DataMember(Name = "Name", IsRequired = true)]
        [StringLengthValidator(MixConstants.StringLengths.SubscriptionFamilyNameMin, MixConstants.StringLengths.SubscriptionFamilyNameMax, MessageTemplate = MixConstants.TemplateMessages.InvalidString, Tag = MixConstants.Tags.SubscriptionFamilyTag)]
        public string InternalName { get; set; }

        /// <summary>
        /// Array of serviceIds associated to the subscriptionFamily
        /// </summary>
        [DataMember(Name = "Services", IsRequired = false)]
        public int[] Services { get; set; }

        /// <summary>
        /// Localized Data for subscription family.
        /// </summary>
        [DataMember(Name = "LocalizedData", IsRequired = true)]
        [ArrayCountValidator(MixConstants.ArrayBounds.LocalizedDataMin, MixConstants.ArrayBounds.LocalizedDataMax, MessageTemplate = MixConstants.TemplateMessages.ArrayValidatorNonNegatedString, Tag = MixConstants.Tags.SubscriptionFamilyTag)]
        [ObjectCollectionValidator(typeof(LocalizedDataV1))]
        public LocalizedDataV1[] LocalizedData { get; set; }

        /// <summary>
        /// Upgrade/DownGrade relationships for subscription family. 
        /// </summary>
        [DataMember(Name = "ProductRelationships", IsRequired = false)]
        [ObjectCollectionValidator(typeof(ProductRelationshipV1))]
        public ProductRelationshipV1[] ProductRelationships { get; set; }

        /// <summary>
        /// TitleId linked to a subscription family
        /// </summary>
        [DataMember(Name = "TitleId", IsRequired = true)]
        public uint TitleId { get; set; }

    }
    /// <summary>
    /// Specialized subscription family contract representing Live subscriptions
    /// </summary>
    [DataContract(Name = "LiveSubscriptionFamily", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class LiveSubscriptionFamilyV1 : SubscriptionFamilyV1
    {
        /// <summary>
        /// Tier associated to a subscriptionFamily
        /// </summary>
        [DataMember(Name = "Tier", IsRequired = true)]
        public int Tier { get; set; }
    }
    /// <summary>
    /// Specialized subscription family contract representing Game subscriptions
    /// </summary>
    [DataContract(Name = "GameSubscriptionFamily", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class GameSubscriptionFamilyV1 : SubscriptionFamilyV1
    {

    }
    /// <summary>
    /// Specialized subscription family contract representing Content subscriptions
    /// </summary>
    [DataContract(Name = "ContentSubscriptionFamily", Namespace = "http://xonline.mix.productmanagement.contracts/V1")]
    public class AddonSubscriptionFamilyV1 : SubscriptionFamilyV1
    {

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Contracts\objd\i386\MixProductManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.productmanagement.contracts/V1", ClrNamespace="xonline.mix.productmanagement.contracts.V1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.contentingestion.contracts/V1", ClrNamespace="xonline.mix.contentingestion.contracts.V1")]

namespace xonline.mix.productmanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.MediaBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ProductBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.App))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PointsBundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.SubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Subscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameContent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Bundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Image))]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid ProductIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaBase", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ProductBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.App))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PointsBundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.SubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Subscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameContent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Bundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Image))]
    public partial class MediaBase : xonline.mix.productmanagement.contracts.V1.Product
    {
        
        private string SkuField;
        
        private System.DateTime VisibilityDateField;
        
        private int VisibilityStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sku
        {
            get
            {
                return this.SkuField;
            }
            set
            {
                this.SkuField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime VisibilityDate
        {
            get
            {
                return this.VisibilityDateField;
            }
            set
            {
                this.VisibilityDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityStatus
        {
            get
            {
                return this.VisibilityStatusField;
            }
            set
            {
                this.VisibilityStatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductBase", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.App))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PointsBundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.SubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Subscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameContent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    public partial class ProductBase : xonline.mix.productmanagement.contracts.V1.MediaBase
    {
        
        private bool GeoCheckPolicyField;
        
        private int[] RatingDescriptorsField;
        
        private int[] RatingsField;
        
        private System.Nullable<System.DateTime> ReleaseDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GeoCheckPolicy
        {
            get
            {
                return this.GeoCheckPolicyField;
            }
            set
            {
                this.GeoCheckPolicyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] RatingDescriptors
        {
            get
            {
                return this.RatingDescriptorsField;
            }
            set
            {
                this.RatingDescriptorsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Ratings
        {
            get
            {
                return this.RatingsField;
            }
            set
            {
                this.RatingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> ReleaseDate
        {
            get
            {
                return this.ReleaseDateField;
            }
            set
            {
                this.ReleaseDateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="App", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class App : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.AppLocalizedData[] AppLocalizedDataField;
        
        private int[] AppTypesField;
        
        private int[] CategoriesField;
        
        private uint LiveTitleIdField;
        
        private xonline.mix.productmanagement.contracts.V1.AppPackage[] PackagesField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductAttribute[] ProductAttributesField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        private int TypeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.AppLocalizedData[] AppLocalizedData
        {
            get
            {
                return this.AppLocalizedDataField;
            }
            set
            {
                this.AppLocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] AppTypes
        {
            get
            {
                return this.AppTypesField;
            }
            set
            {
                this.AppTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint LiveTitleId
        {
            get
            {
                return this.LiveTitleIdField;
            }
            set
            {
                this.LiveTitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.AppPackage[] Packages
        {
            get
            {
                return this.PackagesField;
            }
            set
            {
                this.PackagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductAttribute[] ProductAttributes
        {
            get
            {
                return this.ProductAttributesField;
            }
            set
            {
                this.ProductAttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TypeId
        {
            get
            {
                return this.TypeIdField;
            }
            set
            {
                this.TypeIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointsBundle", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class PointsBundle : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private int PointsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Points
        {
            get
            {
                return this.PointsField;
            }
            set
            {
                this.PointsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    public partial class SubscriptionFamily : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private string NameField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationshipsField;
        
        private int[] ServicesField;
        
        private uint TitleIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationships
        {
            get
            {
                return this.ProductRelationshipsField;
            }
            set
            {
                this.ProductRelationshipsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Services
        {
            get
            {
                return this.ServicesField;
            }
            set
            {
                this.ServicesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveSubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class LiveSubscriptionFamily : xonline.mix.productmanagement.contracts.V1.SubscriptionFamily
    {
        
        private int TierField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Tier
        {
            get
            {
                return this.TierField;
            }
            set
            {
                this.TierField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameSubscriptionFamily : xonline.mix.productmanagement.contracts.V1.SubscriptionFamily
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentSubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ContentSubscriptionFamily : xonline.mix.productmanagement.contracts.V1.SubscriptionFamily
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Subscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    public partial class Subscription : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private int BillingFrequencyField;
        
        private bool IsCancelableField;
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private string NameField;
        
        private int SellTypeField;
        
        private string ServiceComponentIdField;
        
        private System.Nullable<int> SubscriptionDurationField;
        
        private int SubscriptionDurationTypeField;
        
        private System.Guid SubscriptionFamilyField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int BillingFrequency
        {
            get
            {
                return this.BillingFrequencyField;
            }
            set
            {
                this.BillingFrequencyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsCancelable
        {
            get
            {
                return this.IsCancelableField;
            }
            set
            {
                this.IsCancelableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SellType
        {
            get
            {
                return this.SellTypeField;
            }
            set
            {
                this.SellTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceComponentId
        {
            get
            {
                return this.ServiceComponentIdField;
            }
            set
            {
                this.ServiceComponentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubscriptionDuration
        {
            get
            {
                return this.SubscriptionDurationField;
            }
            set
            {
                this.SubscriptionDurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SubscriptionDurationType
        {
            get
            {
                return this.SubscriptionDurationTypeField;
            }
            set
            {
                this.SubscriptionDurationTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid SubscriptionFamily
        {
            get
            {
                return this.SubscriptionFamilyField;
            }
            set
            {
                this.SubscriptionFamilyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSubscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameSubscription : xonline.mix.productmanagement.contracts.V1.Subscription
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentSubscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ContentSubscription : xonline.mix.productmanagement.contracts.V1.Subscription
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveSubscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class LiveSubscription : xonline.mix.productmanagement.contracts.V1.Subscription
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Game : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private int[] CategoriesField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductPackage[] ExecutablesField;
        
        private xonline.mix.productmanagement.contracts.V1.GameAttribute[] GameAttributesField;
        
        private xonline.mix.productmanagement.contracts.V1.GameLocalizedData[] GameLocalizedDataField;
        
        private int GameTypeIdField;
        
        private uint LiveTitleIdField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        private xonline.mix.productmanagement.contracts.V1.VideoPreview[] VideoPreviewsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductPackage[] Executables
        {
            get
            {
                return this.ExecutablesField;
            }
            set
            {
                this.ExecutablesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.GameAttribute[] GameAttributes
        {
            get
            {
                return this.GameAttributesField;
            }
            set
            {
                this.GameAttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.GameLocalizedData[] GameLocalizedData
        {
            get
            {
                return this.GameLocalizedDataField;
            }
            set
            {
                this.GameLocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int GameTypeId
        {
            get
            {
                return this.GameTypeIdField;
            }
            set
            {
                this.GameTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint LiveTitleId
        {
            get
            {
                return this.LiveTitleIdField;
            }
            set
            {
                this.LiveTitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.VideoPreview[] VideoPreviews
        {
            get
            {
                return this.VideoPreviewsField;
            }
            set
            {
                this.VideoPreviewsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameContent", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    public partial class GameContent : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private int[] CategoriesField;
        
        private int EffectiveLiveTitleField;
        
        private int GameContentTypeIdField;
        
        private xonline.mix.productmanagement.contracts.V1.GameRelationship[] GameRelationshipsField;
        
        private bool InheritRatingField;
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductPackage[] PackagesField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int EffectiveLiveTitle
        {
            get
            {
                return this.EffectiveLiveTitleField;
            }
            set
            {
                this.EffectiveLiveTitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int GameContentTypeId
        {
            get
            {
                return this.GameContentTypeIdField;
            }
            set
            {
                this.GameContentTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.GameRelationship[] GameRelationships
        {
            get
            {
                return this.GameRelationshipsField;
            }
            set
            {
                this.GameRelationshipsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool InheritRating
        {
            get
            {
                return this.InheritRatingField;
            }
            set
            {
                this.InheritRatingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductPackage[] Packages
        {
            get
            {
                return this.PackagesField;
            }
            set
            {
                this.PackagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameConsumable", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameConsumable : xonline.mix.productmanagement.contracts.V1.GameContent
    {
        
        private int AssetIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int AssetId
        {
            get
            {
                return this.AssetIdField;
            }
            set
            {
                this.AssetIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvatarItem", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class AvatarItem : xonline.mix.productmanagement.contracts.V1.GameContent
    {
        
        private System.Guid AssetIdField;
        
        private int BodyTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid AssetId
        {
            get
            {
                return this.AssetIdField;
            }
            set
            {
                this.AssetIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int BodyType
        {
            get
            {
                return this.BodyTypeField;
            }
            set
            {
                this.BodyTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bundle", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Bundle : xonline.mix.productmanagement.contracts.V1.MediaBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.BundleLocalizedData[] BundleLocalizedDataField;
        
        private System.Guid[] ProductIdsField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.BundleLocalizedData[] BundleLocalizedData
        {
            get
            {
                return this.BundleLocalizedDataField;
            }
            set
            {
                this.BundleLocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ProductIds
        {
            get
            {
                return this.ProductIdsField;
            }
            set
            {
                this.ProductIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Image : xonline.mix.productmanagement.contracts.V1.MediaBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedImageFile[] LocalizedImageFilesField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationshipsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedImageFile[] LocalizedImageFiles
        {
            get
            {
                return this.LocalizedImageFilesField;
            }
            set
            {
                this.LocalizedImageFilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationships
        {
            get
            {
                return this.ProductRelationshipsField;
            }
            set
            {
                this.ProductRelationshipsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppLocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class AppLocalizedData : xonline.mix.productmanagement.contracts.V1.LocalizedData
    {
        
        private string DeveloperField;
        
        private string PublisherField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Developer
        {
            get
            {
                return this.DeveloperField;
            }
            set
            {
                this.DeveloperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                return this.PublisherField;
            }
            set
            {
                this.PublisherField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppPackage", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class AppPackage : xonline.mix.productmanagement.contracts.V1.Package
    {
        
        private int[] ClientTypesField;
        
        private byte[] ContentIdField;
        
        private xonline.mix.productmanagement.contracts.V1.Encryption EncryptionField;
        
        private xonline.mix.productmanagement.contracts.V1.File[] FilesField;
        
        private ulong InstallSizeField;
        
        private ulong PackageSizeField;
        
        private int PackageTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] ClientTypes
        {
            get
            {
                return this.ClientTypesField;
            }
            set
            {
                this.ClientTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] ContentId
        {
            get
            {
                return this.ContentIdField;
            }
            set
            {
                this.ContentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.Encryption Encryption
        {
            get
            {
                return this.EncryptionField;
            }
            set
            {
                this.EncryptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.File[] Files
        {
            get
            {
                return this.FilesField;
            }
            set
            {
                this.FilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong InstallSize
        {
            get
            {
                return this.InstallSizeField;
            }
            set
            {
                this.InstallSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong PackageSize
        {
            get
            {
                return this.PackageSizeField;
            }
            set
            {
                this.PackageSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PackageType
        {
            get
            {
                return this.PackageTypeField;
            }
            set
            {
                this.PackageTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductAttribute", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ProductAttribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.contentingestion.contracts.V1.Attribute[] AttributesField;
        
        private string CountryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.contentingestion.contracts.V1.Attribute[] Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchInformation", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class SearchInformation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AlternateTitlesField;
        
        private string[] KeywordsField;
        
        private string LocaleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AlternateTitles
        {
            get
            {
                return this.AlternateTitlesField;
            }
            set
            {
                this.AlternateTitlesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Keywords
        {
            get
            {
                return this.KeywordsField;
            }
            set
            {
                this.KeywordsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Locale
        {
            get
            {
                return this.LocaleField;
            }
            set
            {
                this.LocaleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.BundleLocalizedData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameLocalizedData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AppLocalizedData))]
    public partial class LocalizedData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DescriptionField;
        
        private string DescriptionReducedField;
        
        private string[] EquivalentLocalesField;
        
        private string LocaleField;
        
        private string TitleField;
        
        private string TitleReducedField;
        
        private string TitleSortField;
        
        private string VoiceDisplayTitleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DescriptionReduced
        {
            get
            {
                return this.DescriptionReducedField;
            }
            set
            {
                this.DescriptionReducedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EquivalentLocales
        {
            get
            {
                return this.EquivalentLocalesField;
            }
            set
            {
                this.EquivalentLocalesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Locale
        {
            get
            {
                return this.LocaleField;
            }
            set
            {
                this.LocaleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TitleReduced
        {
            get
            {
                return this.TitleReducedField;
            }
            set
            {
                this.TitleReducedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TitleSort
        {
            get
            {
                return this.TitleSortField;
            }
            set
            {
                this.TitleSortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VoiceDisplayTitle
        {
            get
            {
                return this.VoiceDisplayTitleField;
            }
            set
            {
                this.VoiceDisplayTitleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BundleLocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class BundleLocalizedData : xonline.mix.productmanagement.contracts.V1.LocalizedData
    {
        
        private string DeveloperField;
        
        private string PublisherField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Developer
        {
            get
            {
                return this.DeveloperField;
            }
            set
            {
                this.DeveloperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                return this.PublisherField;
            }
            set
            {
                this.PublisherField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameLocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameLocalizedData : xonline.mix.productmanagement.contracts.V1.LocalizedData
    {
        
        private string CustomGenreField;
        
        private string DeveloperField;
        
        private string PublisherField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomGenre
        {
            get
            {
                return this.CustomGenreField;
            }
            set
            {
                this.CustomGenreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Developer
        {
            get
            {
                return this.DeveloperField;
            }
            set
            {
                this.DeveloperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                return this.PublisherField;
            }
            set
            {
                this.PublisherField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Package", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ProductPackage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PreviewPackage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.VideoPreview))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AppPackage))]
    public partial class Package : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid PackageIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid PackageId
        {
            get
            {
                return this.PackageIdField;
            }
            set
            {
                this.PackageIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductPackage", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ProductPackage : xonline.mix.productmanagement.contracts.V1.Package
    {
        
        private int[] ClientTypesField;
        
        private byte[] ContentIdField;
        
        private xonline.mix.productmanagement.contracts.V1.Encryption EncryptionField;
        
        private xonline.mix.productmanagement.contracts.V1.File[] FilesField;
        
        private ulong InstallSizeField;
        
        private ulong PackageSizeField;
        
        private int PackageTypeField;
        
        private long SupportedGameRegionMaskField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] ClientTypes
        {
            get
            {
                return this.ClientTypesField;
            }
            set
            {
                this.ClientTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] ContentId
        {
            get
            {
                return this.ContentIdField;
            }
            set
            {
                this.ContentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.Encryption Encryption
        {
            get
            {
                return this.EncryptionField;
            }
            set
            {
                this.EncryptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.File[] Files
        {
            get
            {
                return this.FilesField;
            }
            set
            {
                this.FilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong InstallSize
        {
            get
            {
                return this.InstallSizeField;
            }
            set
            {
                this.InstallSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong PackageSize
        {
            get
            {
                return this.PackageSizeField;
            }
            set
            {
                this.PackageSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PackageType
        {
            get
            {
                return this.PackageTypeField;
            }
            set
            {
                this.PackageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long SupportedGameRegionMask
        {
            get
            {
                return this.SupportedGameRegionMaskField;
            }
            set
            {
                this.SupportedGameRegionMaskField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreviewPackage", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.VideoPreview))]
    public partial class PreviewPackage : xonline.mix.productmanagement.contracts.V1.Package
    {
        
        private string CountryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VideoPreview", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class VideoPreview : xonline.mix.productmanagement.contracts.V1.PreviewPackage
    {
        
        private string FileUrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileUrl
        {
            get
            {
                return this.FileUrlField;
            }
            set
            {
                this.FileUrlField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Encryption", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Encryption : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private byte[] PublicKeyField;
        
        private byte[] SymKeyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] PublicKey
        {
            get
            {
                return this.PublicKeyField;
            }
            set
            {
                this.PublicKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] SymKey
        {
            get
            {
                return this.SymKeyField;
            }
            set
            {
                this.SymKeyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class File : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FileUrlField;
        
        private int SortOrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileUrl
        {
            get
            {
                return this.FileUrlField;
            }
            set
            {
                this.FileUrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SortOrder
        {
            get
            {
                return this.SortOrderField;
            }
            set
            {
                this.SortOrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductRelationship", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ProductRelationship : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid ProductIdField;
        
        private int RelationshipTypeIdField;
        
        private int SortOrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RelationshipTypeId
        {
            get
            {
                return this.RelationshipTypeIdField;
            }
            set
            {
                this.RelationshipTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SortOrder
        {
            get
            {
                return this.SortOrderField;
            }
            set
            {
                this.SortOrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameAttribute", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameAttribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.contentingestion.contracts.V1.Attribute[] AttributesField;
        
        private string CountryField;
        
        private string[] EquivalentCountriesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.contentingestion.contracts.V1.Attribute[] Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EquivalentCountries
        {
            get
            {
                return this.EquivalentCountriesField;
            }
            set
            {
                this.EquivalentCountriesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRelationship", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameRelationship : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid GameIdField;
        
        private int SortOrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GameId
        {
            get
            {
                return this.GameIdField;
            }
            set
            {
                this.GameIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SortOrder
        {
            get
            {
                return this.SortOrderField;
            }
            set
            {
                this.SortOrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedImageFile", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class LocalizedImageFile : xonline.mix.productmanagement.contracts.V1.LocalizedFile
    {
        
        private int FormatIdField;
        
        private int SizeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int FormatId
        {
            get
            {
                return this.FormatIdField;
            }
            set
            {
                this.FormatIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SizeId
        {
            get
            {
                return this.SizeIdField;
            }
            set
            {
                this.SizeIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedFile", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LocalizedImageFile))]
    public partial class LocalizedFile : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] EquivalentLocalesField;
        
        private string FileUrlField;
        
        private string LocaleField;
        
        private System.Guid LocalizedFileIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EquivalentLocales
        {
            get
            {
                return this.EquivalentLocalesField;
            }
            set
            {
                this.EquivalentLocalesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileUrl
        {
            get
            {
                return this.FileUrlField;
            }
            set
            {
                this.FileUrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Locale
        {
            get
            {
                return this.LocaleField;
            }
            set
            {
                this.LocaleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid LocalizedFileId
        {
            get
            {
                return this.LocalizedFileIdField;
            }
            set
            {
                this.LocalizedFileIdField = value;
            }
        }
    }
}
namespace xonline.mix.contentingestion.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attribute", Namespace="http://xonline.mix.contentingestion.contracts/V1")]
    public partial class Attribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AttributeNameField;
        
        private System.Nullable<int> AttributeUnitTypeField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AttributeName
        {
            get
            {
                return this.AttributeNameField;
            }
            set
            {
                this.AttributeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttributeUnitType
        {
            get
            {
                return this.AttributeUnitTypeField;
            }
            set
            {
                this.AttributeUnitTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.productmanagement.contracts/V1", ConfigurationName="MixProductManagement")]
public interface MixProductManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roduct", ReplyAction="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roductResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roductValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roductMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void ConfigureProduct(xonline.mix.productmanagement.contracts.V1.Product product);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "", ReplyAction="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "MixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "ValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.productmanagement.contracts.V1.Product GetProduct(System.Guid id);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixProductManagementChannel : MixProductManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixProductManagementClient : System.ServiceModel.ClientBase<MixProductManagement>, MixProductManagement
{
    
    public MixProductManagementClient()
    {
    }
    
    public MixProductManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixProductManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixProductManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixProductManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void ConfigureProduct(xonline.mix.productmanagement.contracts.V1.Product product)
    {
        base.Channel.ConfigureProduct(product);
    }
    
    public xonline.mix.productmanagement.contracts.V1.Product GetProduct(System.Guid id)
    {
        return base.Channel.GetProduct(id);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Service\global.asax.cs ===
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using System;
using xonline.mix.common;

namespace xonline.mix.productmanagement.service
{
    public class MixProductManagementApp : SoapFrontEndApp
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MixProductManagementApp()
            : base()
        {

        }
        public override void Application_Start(object sender, EventArgs eventArgs)
        {
            //Call the base 
            base.Application_Start(sender, eventArgs);

            EventBuilder.ShowSGInfo = false;
            // Custom start code
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(OnXomControlRequest);
        }
        /// <summary>
        /// Event handler for the Xmgmt control request event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public void OnXomControlRequest(object sender, ControlRequestEventArgs args)
        {
            //TODO add xmgmt control command parsing logic and code
            //Is there any thing to reload, cancel? 
        }
        /// <summary>
        /// Error handling for Mix will happen using MixError handler
        /// On Error is not capable of catching FaultExceptions
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ea"></param>
        public override void Application_OnError(object sender, EventArgs ea)
        {
            //We handle errors in the MixErrorHandler
        }

        public override void Application_EndRequest(object sender, EventArgs ea)
        {
            //We dont need to reformat any response
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Contracts\obj\i386\MixProductManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.productmanagement.contracts/V1", ClrNamespace="xonline.mix.productmanagement.contracts.V1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.contentingestion.contracts/V1", ClrNamespace="xonline.mix.contentingestion.contracts.V1")]

namespace xonline.mix.productmanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Product", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.MediaBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ProductBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameContent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PointsBundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.App))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.SubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Subscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Image))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Bundle))]
    public partial class Product : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid ProductIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MediaBase", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ProductBase))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameContent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PointsBundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.App))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.SubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Subscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Image))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Bundle))]
    public partial class MediaBase : xonline.mix.productmanagement.contracts.V1.Product
    {
        
        private string SkuField;
        
        private System.DateTime VisibilityDateField;
        
        private int VisibilityStatusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Sku
        {
            get
            {
                return this.SkuField;
            }
            set
            {
                this.SkuField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.DateTime VisibilityDate
        {
            get
            {
                return this.VisibilityDateField;
            }
            set
            {
                this.VisibilityDateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int VisibilityStatus
        {
            get
            {
                return this.VisibilityStatusField;
            }
            set
            {
                this.VisibilityStatusField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductBase", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameContent))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PointsBundle))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.App))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Game))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.SubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.Subscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    public partial class ProductBase : xonline.mix.productmanagement.contracts.V1.MediaBase
    {
        
        private bool GeoCheckPolicyField;
        
        private int[] RatingDescriptorsField;
        
        private int[] RatingsField;
        
        private System.Nullable<System.DateTime> ReleaseDateField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool GeoCheckPolicy
        {
            get
            {
                return this.GeoCheckPolicyField;
            }
            set
            {
                this.GeoCheckPolicyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] RatingDescriptors
        {
            get
            {
                return this.RatingDescriptorsField;
            }
            set
            {
                this.RatingDescriptorsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Ratings
        {
            get
            {
                return this.RatingsField;
            }
            set
            {
                this.RatingsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Nullable<System.DateTime> ReleaseDate
        {
            get
            {
                return this.ReleaseDateField;
            }
            set
            {
                this.ReleaseDateField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameContent", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameConsumable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AvatarItem))]
    public partial class GameContent : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private int[] CategoriesField;
        
        private int EffectiveLiveTitleField;
        
        private int GameContentTypeIdField;
        
        private xonline.mix.productmanagement.contracts.V1.GameRelationship[] GameRelationshipsField;
        
        private bool InheritRatingField;
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductPackage[] PackagesField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int EffectiveLiveTitle
        {
            get
            {
                return this.EffectiveLiveTitleField;
            }
            set
            {
                this.EffectiveLiveTitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int GameContentTypeId
        {
            get
            {
                return this.GameContentTypeIdField;
            }
            set
            {
                this.GameContentTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.GameRelationship[] GameRelationships
        {
            get
            {
                return this.GameRelationshipsField;
            }
            set
            {
                this.GameRelationshipsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool InheritRating
        {
            get
            {
                return this.InheritRatingField;
            }
            set
            {
                this.InheritRatingField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductPackage[] Packages
        {
            get
            {
                return this.PackagesField;
            }
            set
            {
                this.PackagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameConsumable", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameConsumable : xonline.mix.productmanagement.contracts.V1.GameContent
    {
        
        private int AssetIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int AssetId
        {
            get
            {
                return this.AssetIdField;
            }
            set
            {
                this.AssetIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AvatarItem", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class AvatarItem : xonline.mix.productmanagement.contracts.V1.GameContent
    {
        
        private System.Guid AssetIdField;
        
        private int BodyTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid AssetId
        {
            get
            {
                return this.AssetIdField;
            }
            set
            {
                this.AssetIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int BodyType
        {
            get
            {
                return this.BodyTypeField;
            }
            set
            {
                this.BodyTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PointsBundle", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class PointsBundle : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private int PointsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Points
        {
            get
            {
                return this.PointsField;
            }
            set
            {
                this.PointsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="App", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class App : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.AppLocalizedData[] AppLocalizedDataField;
        
        private int[] AppTypesField;
        
        private int[] CategoriesField;
        
        private uint LiveTitleIdField;
        
        private xonline.mix.productmanagement.contracts.V1.AppPackage[] PackagesField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductAttribute[] ProductAttributesField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        private int TypeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.AppLocalizedData[] AppLocalizedData
        {
            get
            {
                return this.AppLocalizedDataField;
            }
            set
            {
                this.AppLocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] AppTypes
        {
            get
            {
                return this.AppTypesField;
            }
            set
            {
                this.AppTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint LiveTitleId
        {
            get
            {
                return this.LiveTitleIdField;
            }
            set
            {
                this.LiveTitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.AppPackage[] Packages
        {
            get
            {
                return this.PackagesField;
            }
            set
            {
                this.PackagesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductAttribute[] ProductAttributes
        {
            get
            {
                return this.ProductAttributesField;
            }
            set
            {
                this.ProductAttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int TypeId
        {
            get
            {
                return this.TypeIdField;
            }
            set
            {
                this.TypeIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Game", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Game : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private int[] CategoriesField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductPackage[] ExecutablesField;
        
        private xonline.mix.productmanagement.contracts.V1.GameAttribute[] GameAttributesField;
        
        private xonline.mix.productmanagement.contracts.V1.GameLocalizedData[] GameLocalizedDataField;
        
        private int GameTypeIdField;
        
        private uint LiveTitleIdField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        private xonline.mix.productmanagement.contracts.V1.VideoPreview[] VideoPreviewsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Categories
        {
            get
            {
                return this.CategoriesField;
            }
            set
            {
                this.CategoriesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductPackage[] Executables
        {
            get
            {
                return this.ExecutablesField;
            }
            set
            {
                this.ExecutablesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.GameAttribute[] GameAttributes
        {
            get
            {
                return this.GameAttributesField;
            }
            set
            {
                this.GameAttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.GameLocalizedData[] GameLocalizedData
        {
            get
            {
                return this.GameLocalizedDataField;
            }
            set
            {
                this.GameLocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int GameTypeId
        {
            get
            {
                return this.GameTypeIdField;
            }
            set
            {
                this.GameTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint LiveTitleId
        {
            get
            {
                return this.LiveTitleIdField;
            }
            set
            {
                this.LiveTitleIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.VideoPreview[] VideoPreviews
        {
            get
            {
                return this.VideoPreviewsField;
            }
            set
            {
                this.VideoPreviewsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscriptionFamily))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscriptionFamily))]
    public partial class SubscriptionFamily : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private string NameField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationshipsField;
        
        private int[] ServicesField;
        
        private uint TitleIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationships
        {
            get
            {
                return this.ProductRelationshipsField;
            }
            set
            {
                this.ProductRelationshipsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int[] Services
        {
            get
            {
                return this.ServicesField;
            }
            set
            {
                this.ServicesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public uint TitleId
        {
            get
            {
                return this.TitleIdField;
            }
            set
            {
                this.TitleIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveSubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class LiveSubscriptionFamily : xonline.mix.productmanagement.contracts.V1.SubscriptionFamily
    {
        
        private int TierField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int Tier
        {
            get
            {
                return this.TierField;
            }
            set
            {
                this.TierField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameSubscriptionFamily : xonline.mix.productmanagement.contracts.V1.SubscriptionFamily
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentSubscriptionFamily", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ContentSubscriptionFamily : xonline.mix.productmanagement.contracts.V1.SubscriptionFamily
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Subscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ContentSubscription))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LiveSubscription))]
    public partial class Subscription : xonline.mix.productmanagement.contracts.V1.ProductBase
    {
        
        private int BillingFrequencyField;
        
        private bool IsCancelableField;
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedDataField;
        
        private string NameField;
        
        private int SellTypeField;
        
        private string ServiceComponentIdField;
        
        private System.Nullable<int> SubscriptionDurationField;
        
        private int SubscriptionDurationTypeField;
        
        private System.Guid SubscriptionFamilyField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int BillingFrequency
        {
            get
            {
                return this.BillingFrequencyField;
            }
            set
            {
                this.BillingFrequencyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool IsCancelable
        {
            get
            {
                return this.IsCancelableField;
            }
            set
            {
                this.IsCancelableField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedData[] LocalizedData
        {
            get
            {
                return this.LocalizedDataField;
            }
            set
            {
                this.LocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SellType
        {
            get
            {
                return this.SellTypeField;
            }
            set
            {
                this.SellTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceComponentId
        {
            get
            {
                return this.ServiceComponentIdField;
            }
            set
            {
                this.ServiceComponentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> SubscriptionDuration
        {
            get
            {
                return this.SubscriptionDurationField;
            }
            set
            {
                this.SubscriptionDurationField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SubscriptionDurationType
        {
            get
            {
                return this.SubscriptionDurationTypeField;
            }
            set
            {
                this.SubscriptionDurationTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid SubscriptionFamily
        {
            get
            {
                return this.SubscriptionFamilyField;
            }
            set
            {
                this.SubscriptionFamilyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameSubscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameSubscription : xonline.mix.productmanagement.contracts.V1.Subscription
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ContentSubscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ContentSubscription : xonline.mix.productmanagement.contracts.V1.Subscription
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveSubscription", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class LiveSubscription : xonline.mix.productmanagement.contracts.V1.Subscription
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Image", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Image : xonline.mix.productmanagement.contracts.V1.MediaBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.LocalizedImageFile[] LocalizedImageFilesField;
        
        private xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationshipsField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.LocalizedImageFile[] LocalizedImageFiles
        {
            get
            {
                return this.LocalizedImageFilesField;
            }
            set
            {
                this.LocalizedImageFilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.ProductRelationship[] ProductRelationships
        {
            get
            {
                return this.ProductRelationshipsField;
            }
            set
            {
                this.ProductRelationshipsField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Bundle", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Bundle : xonline.mix.productmanagement.contracts.V1.MediaBase
    {
        
        private xonline.mix.productmanagement.contracts.V1.BundleLocalizedData[] BundleLocalizedDataField;
        
        private System.Guid[] ProductIdsField;
        
        private xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformationField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.BundleLocalizedData[] BundleLocalizedData
        {
            get
            {
                return this.BundleLocalizedDataField;
            }
            set
            {
                this.BundleLocalizedDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid[] ProductIds
        {
            get
            {
                return this.ProductIdsField;
            }
            set
            {
                this.ProductIdsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.SearchInformation[] SearchInformation
        {
            get
            {
                return this.SearchInformationField;
            }
            set
            {
                this.SearchInformationField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameRelationship", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameRelationship : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid GameIdField;
        
        private int SortOrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid GameId
        {
            get
            {
                return this.GameIdField;
            }
            set
            {
                this.GameIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SortOrder
        {
            get
            {
                return this.SortOrderField;
            }
            set
            {
                this.SortOrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.BundleLocalizedData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AppLocalizedData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.GameLocalizedData))]
    public partial class LocalizedData : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DescriptionField;
        
        private string DescriptionReducedField;
        
        private string[] EquivalentLocalesField;
        
        private string LocaleField;
        
        private string TitleField;
        
        private string TitleReducedField;
        
        private string TitleSortField;
        
        private string VoiceDisplayTitleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string DescriptionReduced
        {
            get
            {
                return this.DescriptionReducedField;
            }
            set
            {
                this.DescriptionReducedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EquivalentLocales
        {
            get
            {
                return this.EquivalentLocalesField;
            }
            set
            {
                this.EquivalentLocalesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Locale
        {
            get
            {
                return this.LocaleField;
            }
            set
            {
                this.LocaleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TitleReduced
        {
            get
            {
                return this.TitleReducedField;
            }
            set
            {
                this.TitleReducedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TitleSort
        {
            get
            {
                return this.TitleSortField;
            }
            set
            {
                this.TitleSortField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VoiceDisplayTitle
        {
            get
            {
                return this.VoiceDisplayTitleField;
            }
            set
            {
                this.VoiceDisplayTitleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductPackage", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ProductPackage : xonline.mix.productmanagement.contracts.V1.Package
    {
        
        private int[] ClientTypesField;
        
        private byte[] ContentIdField;
        
        private xonline.mix.productmanagement.contracts.V1.Encryption EncryptionField;
        
        private xonline.mix.productmanagement.contracts.V1.File[] FilesField;
        
        private ulong InstallSizeField;
        
        private ulong PackageSizeField;
        
        private int PackageTypeField;
        
        private long SupportedGameRegionMaskField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] ClientTypes
        {
            get
            {
                return this.ClientTypesField;
            }
            set
            {
                this.ClientTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] ContentId
        {
            get
            {
                return this.ContentIdField;
            }
            set
            {
                this.ContentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.Encryption Encryption
        {
            get
            {
                return this.EncryptionField;
            }
            set
            {
                this.EncryptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.File[] Files
        {
            get
            {
                return this.FilesField;
            }
            set
            {
                this.FilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong InstallSize
        {
            get
            {
                return this.InstallSizeField;
            }
            set
            {
                this.InstallSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong PackageSize
        {
            get
            {
                return this.PackageSizeField;
            }
            set
            {
                this.PackageSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PackageType
        {
            get
            {
                return this.PackageTypeField;
            }
            set
            {
                this.PackageTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public long SupportedGameRegionMask
        {
            get
            {
                return this.SupportedGameRegionMaskField;
            }
            set
            {
                this.SupportedGameRegionMaskField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SearchInformation", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class SearchInformation : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] AlternateTitlesField;
        
        private string[] KeywordsField;
        
        private string LocaleField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] AlternateTitles
        {
            get
            {
                return this.AlternateTitlesField;
            }
            set
            {
                this.AlternateTitlesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] Keywords
        {
            get
            {
                return this.KeywordsField;
            }
            set
            {
                this.KeywordsField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Locale
        {
            get
            {
                return this.LocaleField;
            }
            set
            {
                this.LocaleField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BundleLocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class BundleLocalizedData : xonline.mix.productmanagement.contracts.V1.LocalizedData
    {
        
        private string DeveloperField;
        
        private string PublisherField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Developer
        {
            get
            {
                return this.DeveloperField;
            }
            set
            {
                this.DeveloperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                return this.PublisherField;
            }
            set
            {
                this.PublisherField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppLocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class AppLocalizedData : xonline.mix.productmanagement.contracts.V1.LocalizedData
    {
        
        private string DeveloperField;
        
        private string PublisherField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Developer
        {
            get
            {
                return this.DeveloperField;
            }
            set
            {
                this.DeveloperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                return this.PublisherField;
            }
            set
            {
                this.PublisherField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameLocalizedData", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameLocalizedData : xonline.mix.productmanagement.contracts.V1.LocalizedData
    {
        
        private string CustomGenreField;
        
        private string DeveloperField;
        
        private string PublisherField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CustomGenre
        {
            get
            {
                return this.CustomGenreField;
            }
            set
            {
                this.CustomGenreField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Developer
        {
            get
            {
                return this.DeveloperField;
            }
            set
            {
                this.DeveloperField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Publisher
        {
            get
            {
                return this.PublisherField;
            }
            set
            {
                this.PublisherField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Package", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.AppPackage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.PreviewPackage))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.VideoPreview))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.ProductPackage))]
    public partial class Package : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid PackageIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid PackageId
        {
            get
            {
                return this.PackageIdField;
            }
            set
            {
                this.PackageIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AppPackage", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class AppPackage : xonline.mix.productmanagement.contracts.V1.Package
    {
        
        private int[] ClientTypesField;
        
        private byte[] ContentIdField;
        
        private xonline.mix.productmanagement.contracts.V1.Encryption EncryptionField;
        
        private xonline.mix.productmanagement.contracts.V1.File[] FilesField;
        
        private ulong InstallSizeField;
        
        private ulong PackageSizeField;
        
        private int PackageTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int[] ClientTypes
        {
            get
            {
                return this.ClientTypesField;
            }
            set
            {
                this.ClientTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] ContentId
        {
            get
            {
                return this.ContentIdField;
            }
            set
            {
                this.ContentIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.productmanagement.contracts.V1.Encryption Encryption
        {
            get
            {
                return this.EncryptionField;
            }
            set
            {
                this.EncryptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.productmanagement.contracts.V1.File[] Files
        {
            get
            {
                return this.FilesField;
            }
            set
            {
                this.FilesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong InstallSize
        {
            get
            {
                return this.InstallSizeField;
            }
            set
            {
                this.InstallSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public ulong PackageSize
        {
            get
            {
                return this.PackageSizeField;
            }
            set
            {
                this.PackageSizeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int PackageType
        {
            get
            {
                return this.PackageTypeField;
            }
            set
            {
                this.PackageTypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PreviewPackage", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.VideoPreview))]
    public partial class PreviewPackage : xonline.mix.productmanagement.contracts.V1.Package
    {
        
        private string CountryField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VideoPreview", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class VideoPreview : xonline.mix.productmanagement.contracts.V1.PreviewPackage
    {
        
        private string FileUrlField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileUrl
        {
            get
            {
                return this.FileUrlField;
            }
            set
            {
                this.FileUrlField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Encryption", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class Encryption : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private byte[] PublicKeyField;
        
        private byte[] SymKeyField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] PublicKey
        {
            get
            {
                return this.PublicKeyField;
            }
            set
            {
                this.PublicKeyField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public byte[] SymKey
        {
            get
            {
                return this.SymKeyField;
            }
            set
            {
                this.SymKeyField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="File", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class File : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string FileUrlField;
        
        private int SortOrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileUrl
        {
            get
            {
                return this.FileUrlField;
            }
            set
            {
                this.FileUrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SortOrder
        {
            get
            {
                return this.SortOrderField;
            }
            set
            {
                this.SortOrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductAttribute", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ProductAttribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.contentingestion.contracts.V1.Attribute[] AttributesField;
        
        private string CountryField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.contentingestion.contracts.V1.Attribute[] Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameAttribute", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class GameAttribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.contentingestion.contracts.V1.Attribute[] AttributesField;
        
        private string CountryField;
        
        private string[] EquivalentCountriesField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.contentingestion.contracts.V1.Attribute[] Attributes
        {
            get
            {
                return this.AttributesField;
            }
            set
            {
                this.AttributesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Country
        {
            get
            {
                return this.CountryField;
            }
            set
            {
                this.CountryField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EquivalentCountries
        {
            get
            {
                return this.EquivalentCountriesField;
            }
            set
            {
                this.EquivalentCountriesField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductRelationship", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class ProductRelationship : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid ProductIdField;
        
        private int RelationshipTypeIdField;
        
        private int SortOrderField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid ProductId
        {
            get
            {
                return this.ProductIdField;
            }
            set
            {
                this.ProductIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int RelationshipTypeId
        {
            get
            {
                return this.RelationshipTypeIdField;
            }
            set
            {
                this.RelationshipTypeIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SortOrder
        {
            get
            {
                return this.SortOrderField;
            }
            set
            {
                this.SortOrderField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedImageFile", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    public partial class LocalizedImageFile : xonline.mix.productmanagement.contracts.V1.LocalizedFile
    {
        
        private int FormatIdField;
        
        private int SizeIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int FormatId
        {
            get
            {
                return this.FormatIdField;
            }
            set
            {
                this.FormatIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public int SizeId
        {
            get
            {
                return this.SizeIdField;
            }
            set
            {
                this.SizeIdField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalizedFile", Namespace="http://xonline.mix.productmanagement.contracts/V1")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(xonline.mix.productmanagement.contracts.V1.LocalizedImageFile))]
    public partial class LocalizedFile : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string[] EquivalentLocalesField;
        
        private string FileUrlField;
        
        private string LocaleField;
        
        private System.Guid LocalizedFileIdField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] EquivalentLocales
        {
            get
            {
                return this.EquivalentLocalesField;
            }
            set
            {
                this.EquivalentLocalesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FileUrl
        {
            get
            {
                return this.FileUrlField;
            }
            set
            {
                this.FileUrlField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Locale
        {
            get
            {
                return this.LocaleField;
            }
            set
            {
                this.LocaleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid LocalizedFileId
        {
            get
            {
                return this.LocalizedFileIdField;
            }
            set
            {
                this.LocalizedFileIdField = value;
            }
        }
    }
}
namespace xonline.mix.contentingestion.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Attribute", Namespace="http://xonline.mix.contentingestion.contracts/V1")]
    public partial class Attribute : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AttributeNameField;
        
        private System.Nullable<int> AttributeUnitTypeField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AttributeName
        {
            get
            {
                return this.AttributeNameField;
            }
            set
            {
                this.AttributeNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AttributeUnitType
        {
            get
            {
                return this.AttributeUnitTypeField;
            }
            set
            {
                this.AttributeUnitTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.productmanagement.contracts/V1", ConfigurationName="MixProductManagement")]
public interface MixProductManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roduct", ReplyAction="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roductResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roductMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/ConfigureP" +
        "roductValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void ConfigureProduct(xonline.mix.productmanagement.contracts.V1.Product product);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "", ReplyAction="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "Response")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "MixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.productmanagement.contracts/V1/MixProductManagement/GetProduct" +
        "ValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.productmanagement.contracts.V1.Product GetProduct(System.Guid id);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixProductManagementChannel : MixProductManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixProductManagementClient : System.ServiceModel.ClientBase<MixProductManagement>, MixProductManagement
{
    
    public MixProductManagementClient()
    {
    }
    
    public MixProductManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixProductManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixProductManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixProductManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public void ConfigureProduct(xonline.mix.productmanagement.contracts.V1.Product product)
    {
        base.Channel.ConfigureProduct(product);
    }
    
    public xonline.mix.productmanagement.contracts.V1.Product GetProduct(System.Guid id)
    {
        return base.Channel.GetProduct(id);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\DataContractV1.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;

namespace xonline.mix.settingsmanagement.contract
{
    // This is taken from beta management.  We don't really have a good story for this yet, but just
    // to unblock us, here we go.  If you update it here, update it there, and visa versa.
    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.settingsmanagement.contracts/V1")]
    public enum PlatformTypeV1 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "LiveHiveConfig", Namespace = "http://xonline.mix.settingsmanagement.contracts/V1")]
    public class LiveHiveConfigV1
    {
        [DataMember(Name = "Build", IsRequired = false)]
        public ushort? Build;

        [DataMember(Name = "Qfe", IsRequired = false)]
        public ushort? Qfe;

        [DataMember(Name = "BetaGroupId", IsRequired = true)]
        public Guid BetaGroupId;

        [DataMember(Name = "PlatformType", IsRequired = true)]
        public PlatformTypeV1 Platform;
    }

    [DataContract(Name = "LiveHiveSetting", Namespace = "http://xonline.mix.settingsmanagement.contracts/V1")]
    public class LiveHiveSettingV1
    {
        [DataMember(Name = "Config", IsRequired = true)]
        public LiveHiveConfigV1 Config;

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name;

        [DataMember(Name = "Value", IsRequired = false)]
        public string Value;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\ServiceContractV1.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.settingsmanagement.contract
{
    // NOTE: If you change the interface name "IMixSettingsManagementV1" here, you must also update the reference to "IMixSettingsManagementV1" in Web.config.
    [ServiceContract(Name = "MixSettingsManagement", Namespace = "http://xonline.mix.settingsmanagement.contracts/V1")]
    public interface IMixSettingsManagementV1
    {
        [OperationContract(Name = "GetSettings")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<LiveHiveSettingV1> GetSettings(LiveHiveConfigV1 config);

        [OperationContract(Name = "SetSetting")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetSetting(LiveHiveConfigV1 config, LiveHiveSettingV1 setting);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\DataContractV3.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;

using System.Security.Cryptography.X509Certificates;


namespace xonline.mix.settingsmanagement.contract
{
    // This is taken from beta management.  We don't really have a good story for this yet, but just
    // to unblock us, here we go.  If you update it here, update it there, and visa versa.
    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public enum PlatformTypeV3 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "LiveHiveConfig", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class LiveHiveConfigV3
    {
        [DataMember(Name = "Build", IsRequired = false)]
        public ushort? Build;

        [DataMember(Name = "Qfe", IsRequired = false)]
        public ushort? Qfe;

        [DataMember(Name = "BetaGroupId", IsRequired = true)]
        public Guid BetaGroupId;

        [DataMember(Name = "PlatformType", IsRequired = true)]
        public PlatformTypeV3 Platform;
    }

    [DataContract(Name = "LiveHiveSetting", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class LiveHiveSettingV3
    {
        [DataMember(Name = "Config", IsRequired = true)]
        public LiveHiveConfigV3 Config;

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name;

        [DataMember(Name = "Value", IsRequired = false)]
        public string Value;
    }

    [DataContract(Name = "BusinessPartner", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class BusinessPartnerV3
    {
        [DataMember(Name = "BusinessPartnerID", IsRequired = true)]
        public Guid BusinessPartnerID;

        [DataMember(Name = "FriendlyName", IsRequired = true)]
        public string FriendlyName;

        [DataMember(Name = "ConnectionInfos", IsRequired = false)]
        public BusinessPartnerConnectionInfoV3[] ConnectionInfos;
    }


    [DataContract(Name = "BusinessPartnerConnectionInfo", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class BusinessPartnerConnectionInfoV3
    {
        [DataMember(Name = "FriendlyName", IsRequired = true)]
        public string FriendlyName;

        [DataMember(Name = "BusinessPartnerSGCertificate", IsRequired = true)]
        public string SGCertificate;
    }

    [DataContract(Name = "STSAppliesTo", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class STSAppliesToV3
    {
        [DataMember(Name = "BusinessPartnerID", IsRequired = true)]
        public Guid BusinessPartnerID;

        [DataMember(Name = "AppliesToUri", IsRequired = true)]
        public string AppliesToUri;

        [DataMember(Name = "ValidityInterval", IsRequired = true)]
        public TimeSpan ValidityInterval;

        [DataMember(Name = "TokenType", IsRequired = true)]
        public string TokenType;

        [DataMember(Name = "ClaimTypes", IsRequired = true)]
        public STSAppliesToClaimTypeV3[] ClaimTypes;

        [DataMember(Name = "AppliesToCertificate", IsRequired = false)]
        public string AppliesToCertificate;
    }

    [DataContract(Name = "STSAppliesToClaimType", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class STSAppliesToClaimTypeV3
    {
        [DataMember(Name = "ClaimTypeUri", IsRequired = true)]
        public string ClaimTypeUri;

        [DataMember(Name = "Required", IsRequired = true)]
        public bool Required;
    }

    [DataContract(Name = "STSClaimTypeInfo", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public class STSClaimTypeInfoV3
    {
        [DataMember(Name = "ClaimTypeUri", IsRequired = true)]
        public string ClaimTypeUri;

        [DataMember(Name = "Encrypted", IsRequired = true)]
        public bool Encrypted;

        [DataMember(Name = "Title", IsRequired = true)]
        public string Title;

        [DataMember(Name = "Description", IsRequired = true)]
        public string Description;

        [DataMember(Name = "ValueType", IsRequired = true)]
        public string ValueType;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\DataContractV4.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;

using System.Security.Cryptography.X509Certificates;


namespace xonline.mix.settingsmanagement.contract
{
    // This is taken from beta management.  We don't really have a good story for this yet, but just
    // to unblock us, here we go.  If you update it here, update it there, and visa versa.
    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public enum PlatformTypeV4 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "LiveHiveConfig", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class LiveHiveConfigV4
    {
        [DataMember(Name = "Build", IsRequired = false)]
        public ushort? Build;

        [DataMember(Name = "Qfe", IsRequired = false)]
        public ushort? Qfe;

        [DataMember(Name = "BetaGroupId", IsRequired = true)]
        public Guid BetaGroupId;

        [DataMember(Name = "PlatformType", IsRequired = true)]
        public PlatformTypeV4 Platform;
    }

    [DataContract(Name = "LiveHiveSetting", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class LiveHiveSettingV4
    {
        [DataMember(Name = "Config", IsRequired = true)]
        public LiveHiveConfigV4 Config;

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name;

        [DataMember(Name = "Value", IsRequired = false)]
        public string Value;
    }

    [DataContract(Name = "BusinessPartner", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class BusinessPartnerV4
    {
        [DataMember(Name = "BusinessPartnerID", IsRequired = true)]
        public Guid BusinessPartnerID;

        [DataMember(Name = "FriendlyName", IsRequired = true)]
        public string FriendlyName;

        [DataMember(Name = "Type", IsRequired = false)]
        public string Type;

        [DataMember(Name = "ConnectionInfos", IsRequired = false)]
        public BusinessPartnerConnectionInfoV4[] ConnectionInfos;
    }

    [DataContract(Name = "BusinessPartnerConnectionInfo", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class BusinessPartnerConnectionInfoV4
    {
        [DataMember(Name = "FriendlyName", IsRequired = true)]
        public string FriendlyName;

        [DataMember(Name = "BusinessPartnerSGCertificate", IsRequired = true)]
        public string SGCertificate;
    }

    [DataContract(Name = "STSAppliesTo", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class STSAppliesToV4
    {
        [DataMember(Name = "BusinessPartnerID", IsRequired = true)]
        public Guid BusinessPartnerID;

        [DataMember(Name = "AppliesToUri", IsRequired = true)]
        public string AppliesToUri;

        [DataMember(Name = "ValidityInterval", IsRequired = true)]
        public TimeSpan ValidityInterval;

        [DataMember(Name = "TokenType", IsRequired = true)]
        public string TokenType;

        [DataMember(Name = "ClaimTypes", IsRequired = true)]
        public STSAppliesToClaimTypeV4[] ClaimTypes;

        [DataMember(Name = "AppliesToCertificate", IsRequired = false)]
        public string AppliesToCertificate;
    }

    [DataContract(Name = "STSAppliesToClaimType", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class STSAppliesToClaimTypeV4
    {
        [DataMember(Name = "ClaimTypeUri", IsRequired = true)]
        public string ClaimTypeUri;

        [DataMember(Name = "Required", IsRequired = true)]
        public bool Required;
    }

    [DataContract(Name = "STSClaimTypeInfo", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public class STSClaimTypeInfoV4
    {
        [DataMember(Name = "ClaimTypeUri", IsRequired = true)]
        public string ClaimTypeUri;

        [DataMember(Name = "Encrypted", IsRequired = true)]
        public bool Encrypted;

        [DataMember(Name = "Title", IsRequired = true)]
        public string Title;

        [DataMember(Name = "Description", IsRequired = true)]
        public string Description;

        [DataMember(Name = "ValueType", IsRequired = true)]
        public string ValueType;
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Service\GameAttributeHelper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.ServiceModel;
using System.Text;
using System.Data.Objects.DataClasses;
using xonline.mix.productmanagement.contract;
using xonline.mix.common;
using xonline.common.service;
using xonline.common.marketplace.catalog;

namespace xonline.mix.productmanagement.service
{
    /// <summary>
    /// Class for loading and saving game attributes to the catalog
    /// Relies on static list of non-FK and FK GameCapabilityCountry property names to determine
    /// if a given game attribute is supported by the catalog:
    ///     CatalogConstants.NonFKGameCapabilityCountryPropertyNames
    ///     CatalogConstants.FKGameCapabilityCountryPropertyNameMap
    /// Using static property lists and reflection minimizes the amount and code necessary to update
    /// similar properties, and the impact of supported new game attributes in the future.
    ///
    /// NOTE: Supporting new EntityReference property types (e.g. HDTVMode, StorageUnit) will require
    /// a code change to this class in addition to updating the static property lists.
    /// </summary>
    public static class GameAttributeHelper
    {
        #region DeleteMethods

        /// <summary>
        /// Delete all existing game capabilities associated with a Game and not in the keep list
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="catalogGameCapabilityCountriesToKeep"></param>
        public static void Delete(RawCatalogDBEntities catalog, Game catalogGame, GameCapabilityCountry[] catalogGameCapabilityCountriesToKeep)
        {
            // Load media reference if necessary
            if (catalogGame.Media == null && !catalogGame.MediaReference.IsLoaded)
            {
                catalogGame.MediaReference.Load();
            }

            GameCapabilityCountry[] catalogGameCapabilityCountries = catalog.GetPrimitiveGameCapabilityCountries(catalogGame.Media.mediaId);
            foreach (GameCapabilityCountry gameCapabilityCountry in catalogGameCapabilityCountries)
            {
                if (catalogGameCapabilityCountriesToKeep == null || !catalogGameCapabilityCountriesToKeep.Contains(gameCapabilityCountry))
                {
                    catalog.DeleteObject(gameCapabilityCountry);

                    // Delete all associated equivalent countries
                    DeleteEquivalentCountries(catalog, catalogGame, gameCapabilityCountry.countryCode, null);
                }
            }
        }

        /// <summary>
        /// Delete attributes not passed to Mix for given GameCapabilityCountry
        /// </summary>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="mixAttributeNames"></param>
        private static void Delete(GameCapabilityCountry catalogGameCapabilityCountry, string[] mixAttributeNames)
        {
            foreach (string propertyName in CatalogConstants.NonFKGameCapabilityCountryPropertyNames)
            {
                if (mixAttributeNames == null || !mixAttributeNames.Contains(propertyName))
                {
                    SetPropertyNull(catalogGameCapabilityCountry, propertyName);
                }
            }
            foreach (KeyValuePair<string, string> kvp in CatalogConstants.FKGameCapabilityCountryPropertyNameMap)
            {
                if (mixAttributeNames == null || !mixAttributeNames.Contains(kvp.Key))
                {
                    SetPropertyNull(catalogGameCapabilityCountry, kvp.Value);
                }
            }
        }

        /// <summary>
        /// Delete extra equivalent countries for given game and country
        /// NOTE: Country1 == GameCapabilityCountryMap.countryCodeMap catalog column
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="countryCode"></param>
        /// <param name="equivalentCountriesToKeep"></param>
        private static void DeleteEquivalentCountries(RawCatalogDBEntities catalog, Game catalogGame, string countryCode, string[] equivalentCountriesToKeep)
        {
            // Load media reference if necessary
            if (catalogGame.Media == null && !catalogGame.MediaReference.IsLoaded)
            {
                catalogGame.MediaReference.Load();
            }

            IEnumerable<GameCapabilityCountryMap> gameCapabilityCountryMaps = catalog.GameCapabilityCountryMap.Where(gccm =>
                gccm.gameMediaId == catalogGame.Media.mediaId && gccm.Country1.countryCode == countryCode);

            foreach (GameCapabilityCountryMap gameCapabilityCountryMap in gameCapabilityCountryMaps)
            {
                if (gameCapabilityCountryMap.Country == null && !gameCapabilityCountryMap.CountryReference.IsLoaded)
                {
                    gameCapabilityCountryMap.CountryReference.Load();
                }

                if (equivalentCountriesToKeep == null || !equivalentCountriesToKeep.Contains(gameCapabilityCountryMap.Country.countryCode))
                {
                    catalog.DeleteObject(gameCapabilityCountryMap);
                }
            }
        }

        /// <summary>
        /// Set GameCapabilityCountry property to null
        /// </summary>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="propertyName"></param>
        private static void SetPropertyNull(GameCapabilityCountry catalogGameCapabilityCountry, string propertyName)
        {
            PropertyInfo catalogGameCapabilityCountryPropertyInfo = catalogGameCapabilityCountry.GetType().GetProperty(propertyName);
            if (catalogGameCapabilityCountryPropertyInfo == null)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY,
                    String.Format("GameCapabilityCountry property {0} not found", propertyName), false);
            }

            catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, null, null);
        }

        #endregion

        #region LoadMethods

        /// <summary>
        /// Load a Mix GameAttributeV1 from a given catalog GameCapabilityCountry
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <returns></returns>
        public static GameAttributeV1 Load(RawCatalogDBEntities catalog, GameCapabilityCountry catalogGameCapabilityCountry)
        {
            GameAttributeV1 mixGameAttribute = new GameAttributeV1();
            mixGameAttribute.Attributes = LoadAttributes(catalog, catalogGameCapabilityCountry);
            mixGameAttribute.Country = catalogGameCapabilityCountry.countryCode;
            mixGameAttribute.EquivalentCountries = LoadEquivalentCountries(catalog, catalogGameCapabilityCountry);

            return mixGameAttribute;
        }

        /// <summary>
        /// Returns array of Mix attributes based on GameCapabilityCountry object
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <returns></returns>
        private static AttributeV1[] LoadAttributes(RawCatalogDBEntities catalog, GameCapabilityCountry catalogGameCapabilityCountry)
        {
            List<AttributeV1> mixAttributes = new List<AttributeV1>();
            foreach (PropertyInfo catalogGameCapabilityCountryPropertyInfo in catalogGameCapabilityCountry.GetType().GetProperties())
            {
                if (CatalogConstants.NonFKGameCapabilityCountryPropertyNames.Contains(catalogGameCapabilityCountryPropertyInfo.Name))
                {
                    LoadAttribute(catalogGameCapabilityCountry, mixAttributes, catalogGameCapabilityCountryPropertyInfo);
                }
                else if (CatalogConstants.FKGameCapabilityCountryPropertyNameMap.ContainsValue(catalogGameCapabilityCountryPropertyInfo.Name))
                {
                    LoadAttributeEntityReference(catalogGameCapabilityCountry, mixAttributes, catalogGameCapabilityCountryPropertyInfo);
                }
                // Else, this property is not a supported game attributes property
            }

            return mixAttributes.ToArray();
        }

        /// <summary>
        /// Returns equivalent countries for GameCapabilityCountry
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <returns></returns>
        private static string[] LoadEquivalentCountries(RawCatalogDBEntities catalog, GameCapabilityCountry catalogGameCapabilityCountry)
        {
            // Load references if necessary
            if (catalogGameCapabilityCountry.Game == null && !catalogGameCapabilityCountry.GameReference.IsLoaded)
            {
                catalogGameCapabilityCountry.GameReference.Load();
            }
            if (catalogGameCapabilityCountry.Game.Media == null && !catalogGameCapabilityCountry.Game.MediaReference.IsLoaded)
            {
                catalogGameCapabilityCountry.Game.MediaReference.Load();
            }

            List<string> catalogEquivalentCountries = new List<string>();

            GameCapabilityCountryMap[] gameCapabilityCountryMaps = catalog.GetPrimitiveGameCapabilityCountryMaps(
                catalogGameCapabilityCountry.Game.Media.mediaId, catalogGameCapabilityCountry.countryCode);

            foreach (GameCapabilityCountryMap gccm in gameCapabilityCountryMaps)
            {
                if (gccm.Country == null && !gccm.CountryReference.IsLoaded)
                {
                    gccm.CountryReference.Load();
                }
                catalogEquivalentCountries.Add(gccm.Country.countryCode);
            }

            return catalogEquivalentCountries.ToArray();
        }

        /// <summary>
        /// Load an existing game attribute if not null
        /// </summary>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="mixAttributes"></param>
        /// <param name="catalogGameCapabilityCountryPropertyInfo"></param>
        private static void LoadAttribute(GameCapabilityCountry catalogGameCapabilityCountry, List<AttributeV1> mixAttributes,
            PropertyInfo catalogGameCapabilityCountryPropertyInfo)
        {
            object val = catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
            if (val != null)
            {
                AttributeV1 mixAttribute = new AttributeV1();
                mixAttribute.AttributeName = catalogGameCapabilityCountryPropertyInfo.Name;
                mixAttribute.Value = val.ToString();

                mixAttributes.Add(mixAttribute);
            }
        }

        /// <summary>
        /// Load an existing game attribute via EntityReference if not null
        /// </summary>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="mixAttributes"></param>
        /// <param name="catalogGameCapabilityCountryPropertyInfo"></param>
        private static void LoadAttributeEntityReference(GameCapabilityCountry catalogGameCapabilityCountry, List<AttributeV1> mixAttributes,
            PropertyInfo catalogGameCapabilityCountryPropertyInfo)
        {
            if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(HDTVMode))
            {
                HDTVMode catalogValue = (HDTVMode)GetEntityObjectValue(catalogGameCapabilityCountry, catalogGameCapabilityCountryPropertyInfo);
                if (catalogValue != null)
                {
                    AttributeV1 mixAttribute = new AttributeV1();
                    mixAttribute.AttributeName = GetGameCapabilityCountryPropertyName(catalogGameCapabilityCountryPropertyInfo.Name);
                    mixAttribute.Value = catalogValue.hdtvModeId.ToString();
                    mixAttributes.Add(mixAttribute);
                }
            }
            else if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(StorageUnit))
            {
                StorageUnit catalogValue = (StorageUnit)GetEntityObjectValue(catalogGameCapabilityCountry, catalogGameCapabilityCountryPropertyInfo);
                if (catalogValue != null)
                {
                    AttributeV1 mixAttribute = new AttributeV1();
                    mixAttribute.AttributeName = GetGameCapabilityCountryPropertyName(catalogGameCapabilityCountryPropertyInfo.Name);
                    mixAttribute.Value = catalogValue.storageUnitId.ToString();
                    mixAttributes.Add(mixAttribute);
                }
            }
            else // Unknown GameCapabilityCountry entity object property type 
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_TYPE,
                    String.Format("Unknown GameCapabilityCountry entity object property type {0} encountered for property {1}",
                    catalogGameCapabilityCountryPropertyInfo.PropertyType.Name, catalogGameCapabilityCountryPropertyInfo.Name), false);
            }
        }

        /// <summary>
        /// Return entity object, loading reference if necessary
        /// </summary>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="entityReferencePropertyInfo"></param>
        /// <returns></returns>
        private static object GetEntityObjectValue(GameCapabilityCountry catalogGameCapabilityCountry, PropertyInfo entityReferencePropertyInfo)
        {
            object catalogValue = entityReferencePropertyInfo.GetValue(catalogGameCapabilityCountry, null);
            if (catalogValue == null)
            {
                string referencePropertyName = entityReferencePropertyInfo.Name + "Reference";
                PropertyInfo propertyReference = catalogGameCapabilityCountry.GetType().GetProperty(referencePropertyName);
                if (propertyReference != null)
                {
                    EntityReference reference = (EntityReference)propertyReference.GetValue(catalogGameCapabilityCountry, null);
                    if (reference != null)
                    {
                        if (!reference.IsLoaded)
                        {
                            reference.Load();
                            catalogValue = entityReferencePropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                        }
                    }
                    else
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL,
                            String.Format("GameCapabilityCountry EntityReference property {0} value null", referencePropertyName), false);
                    }
                }
                else
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY,
                        String.Format("GameCapabilityCountry EntityReference property {0} not found", referencePropertyName), false);
                }
            }

            return catalogValue;
        }

        /// <summary>
        /// Return property name of GameCapabilityCountry entity object
        /// </summary>
        /// <param name="entityObjectPropertyName"></param>
        /// <returns></returns>
        private static string GetGameCapabilityCountryPropertyName(string entityObjectPropertyName)
        {
            try
            {
                return CatalogConstants.FKGameCapabilityCountryPropertyNameMap.First(kvp => kvp.Value == entityObjectPropertyName).Key;
            }
            catch (InvalidOperationException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY, ex,
                    String.Format("GameCapabilityCountry property {0} not found", entityObjectPropertyName), false);
            }
        }

        #endregion

        #region SaveMethods

        /// <summary>
        /// Save a given Mix GameAttributeV1 to the catalog
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="mixGameAttribute"></param>
        /// <returns></returns>
        public static GameCapabilityCountry Save(RawCatalogDBEntities catalog, Game catalogGame, GameAttributeV1 mixGameAttribute)
        {
            GameCapabilityCountry gameCapabilityCountry = Save(catalog, catalogGame, mixGameAttribute.Country, mixGameAttribute.Attributes);
            SaveEquivalentCountries(catalog, catalogGame, mixGameAttribute.Country, mixGameAttribute.EquivalentCountries);

            return gameCapabilityCountry;
        }

        /// <summary>
        /// Save mix attributes
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="countryCode"></param>
        /// <param name="mixGameAttributes"></param>
        /// <returns></returns>
        private static GameCapabilityCountry Save(RawCatalogDBEntities catalog, Game catalogGame, string countryCode, AttributeV1[] mixGameAttributes)
        {
            // Load media reference if necessary
            if (catalogGame.Media == null && !catalogGame.MediaReference.IsLoaded)
            {
                catalogGame.MediaReference.Load();
            }

            // Lookup GameCapabilityCountry
            GameCapabilityCountry catalogGameCapabilityCountry = catalog.GameCapabilityCountry.Where(gcc =>
                gcc.countryCode == countryCode && gcc.gameMediaId == catalogGame.Media.mediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogGameCapabilityCountry == null)
            {
                catalogGameCapabilityCountry = new GameCapabilityCountry();
                catalogGameCapabilityCountry.Country = catalog.GetPrimitiveCountryOrThrow(countryCode);
                catalogGameCapabilityCountry.Game = catalogGame;
                catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load all for now, although reflection could probably be used to do so as needed
                if (catalogGameCapabilityCountry.Country == null && !catalogGameCapabilityCountry.CountryReference.IsLoaded)
                {
                    catalogGameCapabilityCountry.CountryReference.Load();
                }
                if (catalogGameCapabilityCountry.Game == null && !catalogGameCapabilityCountry.GameReference.IsLoaded)
                {
                    catalogGameCapabilityCountry.GameReference.Load();
                }
                if (catalogGameCapabilityCountry.HDTVMode == null && !catalogGameCapabilityCountry.HDTVModeReference.IsLoaded)
                {
                    catalogGameCapabilityCountry.HDTVModeReference.Load();
                }
                if (catalogGameCapabilityCountry.StorageUnit == null && !catalogGameCapabilityCountry.StorageUnitReference.IsLoaded)
                {
                    catalogGameCapabilityCountry.StorageUnitReference.Load();
                }
                if (catalogGameCapabilityCountry.StorageUnit2 == null && !catalogGameCapabilityCountry.StorageUnit1Reference.IsLoaded)
                {
                    catalogGameCapabilityCountry.StorageUnit2Reference.Load();
                }
                if (catalogGameCapabilityCountry.StorageUnit3 == null && !catalogGameCapabilityCountry.StorageUnit3Reference.IsLoaded)
                {
                    catalogGameCapabilityCountry.StorageUnit3Reference.Load();
                }
                if (catalogGameCapabilityCountry.StorageUnit4 == null && !catalogGameCapabilityCountry.StorageUnit4Reference.IsLoaded)
                {
                    catalogGameCapabilityCountry.StorageUnit4Reference.Load();
                }
                if (catalogGameCapabilityCountry.StorageUnit5 == null && !catalogGameCapabilityCountry.StorageUnit5Reference.IsLoaded)
                {
                    catalogGameCapabilityCountry.StorageUnit5Reference.Load();
                }
                if (catalogGameCapabilityCountry.StorageUnit6 == null && !catalogGameCapabilityCountry.StorageUnit6Reference.IsLoaded)
                {
                    catalogGameCapabilityCountry.StorageUnit6Reference.Load();
                }
            }

            // Save mix attribute names for cleanup/deletion of existing
            List<string> mixAttributeNames = new List<string>();

            // If not set or different, set it
            foreach (AttributeV1 mixAttribute in mixGameAttributes)
            {
                if (CatalogConstants.NonFKGameCapabilityCountryPropertyNames.Contains(mixAttribute.AttributeName))
                {
                    SaveGameAttribute(catalogGameCapabilityCountry, mixAttribute.AttributeName, mixAttribute.Value);
                }
                else if (CatalogConstants.FKGameCapabilityCountryPropertyNameMap.ContainsKey(mixAttribute.AttributeName))
                {
                    SaveGameAttributeEntityObject(catalog, catalogGameCapabilityCountry, mixAttribute.AttributeName, mixAttribute.Value,
                        CatalogConstants.FKGameCapabilityCountryPropertyNameMap[mixAttribute.AttributeName]);
                }
                else // Unknown mix attribute
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY,
                        String.Format("Mix attribute {0} not found", mixAttribute.AttributeName), false);
                }

                //Validate that no duplicate attribute exist
                if(mixAttributeNames.Contains(mixAttribute.AttributeName))
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY,
                        String.Format("Duplicate of Mix attribute {0} found", mixAttribute.AttributeName), false);
                }

                mixAttributeNames.Add(mixAttribute.AttributeName);
            }

            // Delete existing attributes that were not passed to Mix
            Delete(catalogGameCapabilityCountry, mixAttributeNames.ToArray());

            return catalogGameCapabilityCountry;
        }

        /// <summary>
        /// Save list of equivalent countries for give game
        /// Delete existing equivalent countries not specified to Mix
        /// Each equivalent country will map to the current country (countryCode)
        /// NOTE: Country1 == GameCapabilityCountryMap.countryCodeMap catalog column
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="countryCode"></param>
        /// <param name="mixEquivalentCountries"></param>
        private static void SaveEquivalentCountries(RawCatalogDBEntities catalog, Game catalogGame, string countryCode, string[] mixEquivalentCountries)
        {
            // Build full equivalent countries list, including map to source country
            List<string> equivalentCountries = new List<string>();
            equivalentCountries.Add(countryCode);
            if (mixEquivalentCountries != null)
            {
                foreach (string country in mixEquivalentCountries)
                {
                    if (!equivalentCountries.Contains(country))
                    {
                        equivalentCountries.Add(country);
                    }
                }
            }

            // Load media reference if necessary
            if (catalogGame.Media == null && !catalogGame.MediaReference.IsLoaded)
            {
                catalogGame.MediaReference.Load();
            }

            // If equivalent country mappings are missing for current country, add them
            Country currentCountry = catalog.GetPrimitiveCountryOrThrow(countryCode);
            foreach (string mixEquivalentCountry in equivalentCountries)
            {
                GameCapabilityCountryMap gameCapabilityCountryMap = catalog.GameCapabilityCountryMap.Where(gccm =>
                    gccm.gameMediaId == catalogGame.Media.mediaId
                    && gccm.Country.countryCode == mixEquivalentCountry
                    && gccm.Country1.countryCode == countryCode).FirstOrDefault();
                if (gameCapabilityCountryMap == null)
                {
                    gameCapabilityCountryMap = new GameCapabilityCountryMap();
                    gameCapabilityCountryMap.Game = catalogGame;
                    gameCapabilityCountryMap.Country = catalog.GetPrimitiveCountryOrThrow(mixEquivalentCountry);
                    gameCapabilityCountryMap.Country1 = currentCountry;
                    gameCapabilityCountryMap.modifiedDate = DateTime.UtcNow;
                }
            }

            // Delete existing equivalent countries which were not passed into Mix
            DeleteEquivalentCountries(catalog, catalogGame, countryCode, equivalentCountries.ToArray());
        }

        /// <summary>
        /// Save game attribute to catalogGameCapabilityCountry
        /// If catalog and mix values are equal, no updates are made
        /// Known types for non-FK GameCapabilityCountry are: bool?, double?, int?, long?
        /// </summary>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="mixAttributeName"></param>
        /// <param name="mixAttributeValue"></param>
        private static void SaveGameAttribute(GameCapabilityCountry catalogGameCapabilityCountry, string mixAttributeName, string mixAttributeValue)
        {
            PropertyInfo catalogGameCapabilityCountryPropertyInfo = catalogGameCapabilityCountry.GetType().GetProperty(mixAttributeName);
            if (catalogGameCapabilityCountryPropertyInfo == null)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY,
                    String.Format("GameCapabilityCountry property {0} not found", mixAttributeName), false);
            }

            if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(Nullable<bool>))
            {
                Nullable<bool> catalogValue = (Nullable<bool>)catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                Nullable<bool> mixValue = ParseBool(mixAttributeName, mixAttributeValue);
                if (!catalogValue.Equals(mixValue))
                {
                    catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, mixValue, null);
                    catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
                }
            }
            else if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(Nullable<double>))
            {
                Nullable<double> catalogValue = (Nullable<double>)catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                Nullable<double> mixValue = ParseDouble(mixAttributeName, mixAttributeValue);
                if (!catalogValue.Equals(mixValue))
                {
                    catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, mixValue, null);
                    catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
                }
            }
            else if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(Nullable<int>))
            {
                Nullable<int> catalogValue = (Nullable<int>)catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                Nullable<int> mixValue = ParseInt(mixAttributeName, mixAttributeValue);
                if (!catalogValue.Equals(mixValue))
                {
                    catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, mixValue, null);
                    catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
                }
            }
            else if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(Nullable<long>))
            {
                Nullable<long> catalogValue = (Nullable<long>)catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                Nullable<long> mixValue = ParseLong(mixAttributeName, mixAttributeValue);
                if (!catalogValue.Equals(mixValue))
                {
                    catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, mixValue, null);
                    catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
                }
            }
            else // Unknown GameCapabilityCountry property type
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_TYPE,
                    String.Format("Unknown GameCapabilityCountry property type {0} encountered for property {1}",
                    catalogGameCapabilityCountryPropertyInfo.PropertyType.Name, mixAttributeName), false);
            }
        }

        /// <summary>
        /// Save game attribute via entity object property on catalogGameCapabilityCountry
        /// If catalog and mix values are equal, no updates are made.
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGameCapabilityCountry"></param>
        /// <param name="mixAttributeName"></param>
        /// <param name="mixAttributeValue"></param>
        /// <param name="catalogPropertyName"></param>
        private static void SaveGameAttributeEntityObject(RawCatalogDBEntities catalog, GameCapabilityCountry catalogGameCapabilityCountry, 
            string mixAttributeName, string mixAttributeValue, string catalogPropertyName)
        {
            PropertyInfo catalogGameCapabilityCountryPropertyInfo = catalogGameCapabilityCountry.GetType().GetProperty(catalogPropertyName);
            if (catalogGameCapabilityCountryPropertyInfo == null)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY,
                    String.Format("GameCapabilityCountry entity object property {0} not found", catalogPropertyName), false);
            }

            // Mix value for an entity object must be an integer id
            int mixValue = ParseInt(mixAttributeName, mixAttributeValue);

            if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(HDTVMode))
            {
                HDTVMode catalogValue = (HDTVMode)catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                if (catalogValue == null || catalogValue.hdtvModeId != mixValue)
                {
                    HDTVMode catalogHDTVMode = catalog.GetPrimitiveHDTVModeOrThrow(mixValue);
                    catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, catalogHDTVMode, null);
                    catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
                }
            }
            else if (catalogGameCapabilityCountryPropertyInfo.PropertyType == typeof(StorageUnit))
            {
                StorageUnit catalogValue = (StorageUnit)catalogGameCapabilityCountryPropertyInfo.GetValue(catalogGameCapabilityCountry, null);
                if (catalogValue == null || catalogValue.storageUnitId != mixValue)
                {
                    StorageUnit catalogStorageUnit = catalog.GetPrimitiveStorageUnitOrThrow(mixValue);
                    catalogGameCapabilityCountryPropertyInfo.SetValue(catalogGameCapabilityCountry, catalogStorageUnit, null);
                    catalogGameCapabilityCountry.modifiedDate = DateTime.UtcNow;
                }
            }
            else // Unknown GameCapabilityCountry entity object property type
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_TYPE,
                    String.Format("Unknown GameCapabilityCountry entity object property type {0} encountered for property {1}",
                    catalogGameCapabilityCountryPropertyInfo.PropertyType.Name, catalogGameCapabilityCountryPropertyInfo.Name), false);
            }
        }

        #endregion

        #region ParseMethods

        // Can probably consolidate/generalize these parsing methods

        static private bool ParseBool(string attributeName, string value)
        {
            try
            {
                return bool.Parse(value);
            }
            catch (ArgumentNullException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL, ex,
                    String.Format("Could not parse null value for game attribute {0}", attributeName), false);
            }
            catch (FormatException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Format exception for game attribute {0} value {1}", attributeName, value), false);
            }
            catch (OverflowException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Overflow exception for game attribute {0} value {1}", attributeName, value), false);
            }
        }

        static private double ParseDouble(string attributeName, string value)
        {
            try
            {
                return double.Parse(value);
            }
            catch (ArgumentNullException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL, ex,
                    String.Format("Could not parse null value for game attribute {0}", attributeName), false);
            }
            catch (FormatException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Format exception for game attribute {0} value {1}", attributeName, value), false);
            }
            catch (OverflowException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Overflow exception for game attribute {0} value {1}", attributeName, value), false);
            }
        }

        static private int ParseInt(string attributeName, string value)
        {
            try
            {
                return int.Parse(value);
            }
            catch (ArgumentNullException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL, ex,
                    String.Format("Could not parse null value for game attribute {0}", attributeName), false);
            }
            catch (FormatException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Format exception for game attribute {0} value {1}", attributeName, value), false);
            }
            catch (OverflowException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Overflow exception for game attribute {0} value {1}", attributeName, value), false);
            }
        }

        static private long ParseLong(string attributeName, string value)
        {
            try
            {
                return long.Parse(value);
            }
            catch (ArgumentNullException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL, ex,
                    String.Format("Could not parse null value for game attribute {0}", attributeName), false);
            }
            catch (FormatException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Format exception for game attribute {0} value {1}", attributeName, value), false);
            }
            catch (OverflowException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Overflow exception for game attribute {0} value {1}", attributeName, value), false);
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\DataContractV2.cs ===
﻿using System.Runtime.Serialization;
using Microsoft.Practices.EnterpriseLibrary.Validation.Validators;
using xonline.mix.common;
using System;
using System.Collections.Generic;

namespace xonline.mix.settingsmanagement.contract
{
    // This is taken from beta management.  We don't really have a good story for this yet, but just
    // to unblock us, here we go.  If you update it here, update it there, and visa versa.
    [DataContract(Name = "PlatformType", Namespace = "http://xonline.mix.settingsmanagement.contracts/V2")]
    public enum PlatformTypeV2 : byte
    {
        [EnumMember]
        Xbox1 = 0,
        [EnumMember]
        XboxCom = 1,
        [EnumMember]
        Xenon = 2,
        [EnumMember]
        Marketplace = 3,
        [EnumMember]
        PC = 4,
        [EnumMember]
        Mobile = 5,
        [EnumMember]
        WebGames = 6,
    }

    [DataContract(Name = "LiveHiveConfig", Namespace = "http://xonline.mix.settingsmanagement.contracts/V2")]
    public class LiveHiveConfigV2
    {
        [DataMember(Name = "Build", IsRequired = false)]
        public ushort? Build;

        [DataMember(Name = "Qfe", IsRequired = false)]
        public ushort? Qfe;

        [DataMember(Name = "BetaGroupId", IsRequired = true)]
        public Guid BetaGroupId;

        [DataMember(Name = "PlatformType", IsRequired = true)]
        public PlatformTypeV2 Platform;
    }

    [DataContract(Name = "LiveHiveSetting", Namespace = "http://xonline.mix.settingsmanagement.contracts/V2")]
    public class LiveHiveSettingV2
    {
        [DataMember(Name = "Config", IsRequired = true)]
        public LiveHiveConfigV2 Config;

        [DataMember(Name = "Name", IsRequired = true)]
        public string Name;

        [DataMember(Name = "Value", IsRequired = false)]
        public string Value;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\ProductManagement\Service\MixProductManagementV1.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.Text;
using xonline.mix.productmanagement.contract;
using xonline.common.service;
using xonline.common.mgmt;
using System.ServiceModel.Activation;
using xonline.common.config;
using xonline.common.installer;
using xonline.mix.common;
using xonline.server.webcache.common;
using System.Xml;
using System.IO;
using System.Web;

[assembly: XomAreaDefinition(XomAreaName.log)]
[assembly: XomIisInstallerAttribute(Interface.mixproductmanagement)]
[assembly: ConfigAttribute(Component.mixproductmanagement)]

namespace xonline.mix.productmanagement.service
{    
    // NOTE: If you change the class name "MixProductManagement" here, you must also update the reference to "MixProductManagement" in Web.config and in the associated .svc file.
    //Set the compat mode to allow the WCF application mimic the ASPNET lifecycle. This will ensure that the current components like FEAPP will continue to work with our service
    [AspNetCompatibilityRequirements(RequirementsMode = AspNetCompatibilityRequirementsMode.Required)]
    public class MixProductManagementV1 : IMixProductManagementV1
    {
        // properties used to pass exception information to the applog
        private string exceptionMessage = string.Empty;
        private string hresult = string.Empty;

        /// <summary>
        /// Props a Product to the Games Catalog
        /// </summary>
        /// <param name="product">ProductV1</param>
        public void ConfigureProduct(ProductV1 product)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            try
            {
                ApiValidation.Validate(MixProductManagement.ConfigureProductApiName);

                // Will only apply to Test Enviornments
                RequestHeaderBehaviorInjectionMgr.AddBehaviorInjections(HttpContext.Current.Request.Headers);

                MixProductManagement.ConfigureProduct(product);
            }
            catch (Exception ex)
            {
                hresult = AppLogValues.GetHResult(ex);
                exceptionMessage = AppLogValues.GetExceptionMessage(ex);
                throw;
            }
            finally
            {
                string result = exceptionMessage == string.Empty ?
                    MixConstants.AppLogResults.Success : MixConstants.AppLogResults.Fail;

                // Logging API name and input parameters
                string appLog = string.Join(MixConstants.AppLogSeparator, new string[]
                {                    
                    MixProductManagement.ConfigureProductApiName,  // API name                   
                    product.ProductId.ToString(),  // ProductId                                  
                    result,  // success or failure result,                    
                    hresult,  // HResult                    
                    timeElapsed.MillisecondsElapsed.ToString(),  // Duration       
                    exceptionMessage,  // Exception if occured
                    SerializeProduct(product)  // Exception if occured
                });

                Xom.Log(XomAreaName.log, appLog);

                // clear Bahavior Injection
                RequestHeaderBehaviorInjectionMgr.ClearBehaviorInjections();
            }


        }

        /// <summary>
        /// Gets a Product from the Games Catalog
        /// </summary>
        /// <param name="id">Guid</param>
        public ProductV1 GetProduct(Guid id)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            ProductV1 product = null;

            try
            {
                ApiValidation.Validate(MixProductManagement.GetProductApiName);

                // Will only apply to Test Enviornments
                RequestHeaderBehaviorInjectionMgr.AddBehaviorInjections(HttpContext.Current.Request.Headers);

                product = MixProductManagement.GetProduct(id);

            }
            catch (Exception ex)
            {
                hresult = AppLogValues.GetHResult(ex);
                exceptionMessage = AppLogValues.GetExceptionMessage(ex);
                throw;
            }
            finally
            {
                string result = exceptionMessage == string.Empty ?
                    MixConstants.AppLogResults.Success : MixConstants.AppLogResults.Fail;

                string appLog = string.Join(MixConstants.AppLogSeparator, new string[]
                {                
                    MixProductManagement.GetProductApiName,  // API name                 
                    id.ToString(),  // Product Id                          
                    result,  // success or failure result,                
                    hresult,  // HResult                
                    timeElapsed.MillisecondsElapsed.ToString(),  // Duration     
                    exceptionMessage,  // Exception if occured
                });
                    Xom.Log(XomAreaName.log, appLog);

                // clear Bahavior Injection
                RequestHeaderBehaviorInjectionMgr.ClearBehaviorInjections();
            }

            return product;
        }


        /// <summary>
        /// Serializing Product for logging
        /// </summary>
        /// <param name="product">ProductV1</param>
        private string SerializeProduct(ProductV1 product)
        {
            string a = string.Empty;

            MemoryStream memoryStream = new MemoryStream();
            DataContractSerializer dcSerializer = new DataContractSerializer(typeof(ProductV1));
            XmlWriterSettings xmlWriterSettings = new XmlWriterSettings();
            xmlWriterSettings.Encoding = new UTF8Encoding(false);
            xmlWriterSettings.ConformanceLevel = ConformanceLevel.Document;
            xmlWriterSettings.Indent = true;

            using (XmlWriter xWriter = XmlWriter.Create(memoryStream, xmlWriterSettings))
            {
                dcSerializer.WriteObject(xWriter, product);
                xWriter.Flush();

                memoryStream.Position = 0;

                XmlDocument xDoc = new XmlDocument();
                xDoc.Load(memoryStream);
                a = xDoc.OuterXml;
            }

            return a;
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\ServiceContractV2.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.settingsmanagement.contract
{
    // NOTE: If you change the interface name "IMixSettingsManagementV2" here, you must also update the reference to "IMixSettingsManagementV2" in Web.config.
    [ServiceContract(Name = "MixSettingsManagementV2", Namespace = "http://xonline.mix.settingsmanagement.contracts/V2")]
    public interface IMixSettingsManagementV2
    {
        [OperationContract(Name = "GetSettings")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<LiveHiveSettingV2> GetSettings(LiveHiveConfigV2 config);

        [OperationContract(Name = "SetSetting")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetSetting(LiveHiveConfigV2 config, LiveHiveSettingV2 setting);

        [OperationContract(Name = "IngestEtxManifest")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        string IngestEtxManifest(string xmlManifest);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\ServiceContractV3.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.settingsmanagement.contract
{
    // NOTE: If you change the interface name "IMixSettingsManagementV3" here, you must also update the reference to "IMixSettingsManagementV3" in Web.config.
    [ServiceContract(Name = "MixSettingsManagementV3", Namespace = "http://xonline.mix.settingsmanagement.contracts/V3")]
    public interface IMixSettingsManagementV3
    {
        [OperationContract(Name = "GetSettings")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<LiveHiveSettingV3> GetSettings(LiveHiveConfigV3 config);

        [OperationContract(Name = "SetSetting")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetSetting(LiveHiveConfigV3 config, LiveHiveSettingV3 setting);

        [OperationContract(Name = "IngestEtxManifest")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        string IngestEtxManifest(string xmlManifest);

        [OperationContract(Name = "SetBusinessPartner")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetBusinessPartner(BusinessPartnerV3 bp);

        [OperationContract(Name = "SetAppliesToInfo")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetAppliesToInfo(STSAppliesToV3 at);

        [OperationContract(Name = "RemoveAppliesToInfo")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void RemoveAppliesToInfo(string appliesToUri);

        [OperationContract(Name = "GetAppliesToInfo")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        STSAppliesToV3 GetAppliesToInfo(string appliesToUri);

        [OperationContract(Name = "GetClaimTypes")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        STSClaimTypeInfoV3[] GetClaimTypes();

        [OperationContract(Name = "GetTokenTypes")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        string[] GetTokenTypes();

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Service\Global.asax.cs ===
using System;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.mix.common;

namespace xonline.mix.settingsmanagement.service
{
    public class MixSettingsManagementApp : SoapFrontEndApp
    {
        /// <summary>
        /// Default constructor
        /// </summary>
        public MixSettingsManagementApp()
            : base()
        {

        }

        public override void Application_Start(object sender, EventArgs eventArgs)
        {
            //Call the base 
            base.Application_Start(sender, eventArgs);

            EventBuilder.ShowSGInfo = false;
            // Custom start code
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(OnXomControlRequest);

        }

        /// <summary>
        /// Event handler for the Xmgmt control request event
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="args"></param>
        public void OnXomControlRequest(object sender, ControlRequestEventArgs args)
        {
            //TODO add xmgmt control command parsing logic and code
            //Is there any thing to reload, cancel? 
        }

        /// <summary>
        /// Error handling for Mix will happen using MixError handler
        /// On Error is not capable of catching FaultExceptions
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="ea"></param>
        public override void Application_OnError(object sender, EventArgs ea)
        {
            //We handle errors in the MixErrorHandler
        }

        public override void Application_EndRequest(object sender, EventArgs ea)
        {
            //We dont need to reformat any response
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\ServiceContractV4.cs ===
﻿using System.ServiceModel;

using xonline.mix.common;

using Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF;
using System;
using System.Collections.Generic;

namespace xonline.mix.settingsmanagement.contract
{
    // NOTE: If you change the interface name "IMixSettingsManagementV4" here, you must also update the reference to "IMixSettingsManagementV4" in Web.config.
    [ServiceContract(Name = "MixSettingsManagementV4", Namespace = "http://xonline.mix.settingsmanagement.contracts/V4")]
    public interface IMixSettingsManagementV4
    {
        [OperationContract(Name = "GetSettings")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        IEnumerable<LiveHiveSettingV4> GetSettings(LiveHiveConfigV4 config);

        [OperationContract(Name = "SetSetting")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetSetting(LiveHiveConfigV4 config, LiveHiveSettingV4 setting);

        [OperationContract(Name = "IngestEtxManifest")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        string IngestEtxManifest(string xmlManifest);

        [OperationContract(Name = "SetBusinessPartner")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetBusinessPartner(BusinessPartnerV4 bp);

        [OperationContract(Name = "SetAppliesToInfo")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void SetAppliesToInfo(STSAppliesToV4 at);

        [OperationContract(Name = "RemoveAppliesToInfo")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        void RemoveAppliesToInfo(string appliesToUri);

        [OperationContract(Name = "GetAppliesToInfo")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        STSAppliesToV4 GetAppliesToInfo(string appliesToUri);

        [OperationContract(Name = "GetClaimTypes")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        STSClaimTypeInfoV4[] GetClaimTypes(string businessPartnerType);

        [OperationContract(Name = "GetTokenTypes")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        string[] GetTokenTypes();

        [OperationContract(Name = "GetBusinessPartnerTypes")]
        [FaultContract(typeof(MixClientFault))]
        [FaultContract(typeof(ValidationFault), Name = "ValidationFault", Namespace = "http://xonline.mix.common.contracts")]
        string[] GetBusinessPartnerTypes();

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\obj\i386\MixSettingsManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V1", ClrNamespace="xonline.mix.settingsmanagement.contracts.V1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V2", ClrNamespace="xonline.mix.settingsmanagement.contracts.V2")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V3", ClrNamespace="xonline.mix.settingsmanagement.contracts.V3")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V4", ClrNamespace="xonline.mix.settingsmanagement.contracts.V4")]

namespace xonline.mix.settingsmanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V1")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V1.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V1.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V1")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V1")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V1", ConfigurationName="MixSettingsManagement")]
public interface MixSettingsManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngs", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ng", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ngResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ngMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ngValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting setting);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementChannel : MixSettingsManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementClient : System.ServiceModel.ClientBase<MixSettingsManagement>, MixSettingsManagement
{
    
    public MixSettingsManagementClient()
    {
    }
    
    public MixSettingsManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V2", ConfigurationName="MixSettingsManagementV2")]
public interface MixSettingsManagementV2
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tings", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tingsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tingsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "ting", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "tingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "tingMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "tingValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting setting);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifest", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifestResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifestValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifestMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string IngestEtxManifest(string xmlManifest);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementV2Channel : MixSettingsManagementV2, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementV2Client : System.ServiceModel.ClientBase<MixSettingsManagementV2>, MixSettingsManagementV2
{
    
    public MixSettingsManagementV2Client()
    {
    }
    
    public MixSettingsManagementV2Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementV2Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
    
    public string IngestEtxManifest(string xmlManifest)
    {
        return base.Channel.IngestEtxManifest(xmlManifest);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V3", ConfigurationName="MixSettingsManagementV3")]
public interface MixSettingsManagementV3
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tings", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tingsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tingsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "ting", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "tingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "tingMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "tingValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting setting);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifest", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifestResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifestValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifestMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string IngestEtxManifest(string xmlManifest);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartner", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartnerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartnerValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartnerMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V3.BusinessPartner bp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo at);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo GetAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V3.STSClaimTypeInfo[] GetClaimTypes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetTokenTypes();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementV3Channel : MixSettingsManagementV3, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementV3Client : System.ServiceModel.ClientBase<MixSettingsManagementV3>, MixSettingsManagementV3
{
    
    public MixSettingsManagementV3Client()
    {
    }
    
    public MixSettingsManagementV3Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementV3Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV3Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV3Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
    
    public string IngestEtxManifest(string xmlManifest)
    {
        return base.Channel.IngestEtxManifest(xmlManifest);
    }
    
    public void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V3.BusinessPartner bp)
    {
        base.Channel.SetBusinessPartner(bp);
    }
    
    public void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo at)
    {
        base.Channel.SetAppliesToInfo(at);
    }
    
    public void RemoveAppliesToInfo(string appliesToUri)
    {
        base.Channel.RemoveAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo GetAppliesToInfo(string appliesToUri)
    {
        return base.Channel.GetAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V3.STSClaimTypeInfo[] GetClaimTypes()
    {
        return base.Channel.GetClaimTypes();
    }
    
    public string[] GetTokenTypes()
    {
        return base.Channel.GetTokenTypes();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V4", ConfigurationName="MixSettingsManagementV4")]
public interface MixSettingsManagementV4
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tings", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tingsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tingsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "ting", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "tingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "tingValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "tingMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting setting);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifest", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifestResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifestValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifestMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string IngestEtxManifest(string xmlManifest);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartner", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartnerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartnerValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartnerMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V4.BusinessPartner bp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo at);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo GetAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V4.STSClaimTypeInfo[] GetClaimTypes(string businessPartnerType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetTokenTypes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetBusinessPartnerTypes();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementV4Channel : MixSettingsManagementV4, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementV4Client : System.ServiceModel.ClientBase<MixSettingsManagementV4>, MixSettingsManagementV4
{
    
    public MixSettingsManagementV4Client()
    {
    }
    
    public MixSettingsManagementV4Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementV4Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV4Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV4Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
    
    public string IngestEtxManifest(string xmlManifest)
    {
        return base.Channel.IngestEtxManifest(xmlManifest);
    }
    
    public void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V4.BusinessPartner bp)
    {
        base.Channel.SetBusinessPartner(bp);
    }
    
    public void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo at)
    {
        base.Channel.SetAppliesToInfo(at);
    }
    
    public void RemoveAppliesToInfo(string appliesToUri)
    {
        base.Channel.RemoveAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo GetAppliesToInfo(string appliesToUri)
    {
        return base.Channel.GetAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V4.STSClaimTypeInfo[] GetClaimTypes(string businessPartnerType)
    {
        return base.Channel.GetClaimTypes(businessPartnerType);
    }
    
    public string[] GetTokenTypes()
    {
        return base.Channel.GetTokenTypes();
    }
    
    public string[] GetBusinessPartnerTypes()
    {
        return base.Channel.GetBusinessPartnerTypes();
    }
}
namespace xonline.mix.settingsmanagement.contracts.V2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V2")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V2.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V2.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V2")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V2")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}
namespace xonline.mix.settingsmanagement.contracts.V3
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V3.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V3.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartner", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class BusinessPartner : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V3.BusinessPartnerConnectionInfo[] ConnectionInfosField;
        
        private string FriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.settingsmanagement.contracts.V3.BusinessPartnerConnectionInfo[] ConnectionInfos
        {
            get
            {
                return this.ConnectionInfosField;
            }
            set
            {
                this.ConnectionInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartnerConnectionInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class BusinessPartnerConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string BusinessPartnerSGCertificateField;
        
        private string FriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string BusinessPartnerSGCertificate
        {
            get
            {
                return this.BusinessPartnerSGCertificateField;
            }
            set
            {
                this.BusinessPartnerSGCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesTo", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class STSAppliesTo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AppliesToCertificateField;
        
        private string AppliesToUriField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V3.STSAppliesToClaimType[] ClaimTypesField;
        
        private string TokenTypeField;
        
        private System.TimeSpan ValidityIntervalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppliesToCertificate
        {
            get
            {
                return this.AppliesToCertificateField;
            }
            set
            {
                this.AppliesToCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AppliesToUri
        {
            get
            {
                return this.AppliesToUriField;
            }
            set
            {
                this.AppliesToUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V3.STSAppliesToClaimType[] ClaimTypes
        {
            get
            {
                return this.ClaimTypesField;
            }
            set
            {
                this.ClaimTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TokenType
        {
            get
            {
                return this.TokenTypeField;
            }
            set
            {
                this.TokenTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.TimeSpan ValidityInterval
        {
            get
            {
                return this.ValidityIntervalField;
            }
            set
            {
                this.ValidityIntervalField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesToClaimType", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class STSAppliesToClaimType : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private bool RequiredField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Required
        {
            get
            {
                return this.RequiredField;
            }
            set
            {
                this.RequiredField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSClaimTypeInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class STSClaimTypeInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private string DescriptionField;
        
        private bool EncryptedField;
        
        private string TitleField;
        
        private string ValueTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Encrypted
        {
            get
            {
                return this.EncryptedField;
            }
            set
            {
                this.EncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ValueType
        {
            get
            {
                return this.ValueTypeField;
            }
            set
            {
                this.ValueTypeField = value;
            }
        }
    }
}
namespace xonline.mix.settingsmanagement.contracts.V4
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V4.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V4.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartner", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class BusinessPartner : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V4.BusinessPartnerConnectionInfo[] ConnectionInfosField;
        
        private string FriendlyNameField;
        
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.settingsmanagement.contracts.V4.BusinessPartnerConnectionInfo[] ConnectionInfos
        {
            get
            {
                return this.ConnectionInfosField;
            }
            set
            {
                this.ConnectionInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartnerConnectionInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class BusinessPartnerConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string BusinessPartnerSGCertificateField;
        
        private string FriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string BusinessPartnerSGCertificate
        {
            get
            {
                return this.BusinessPartnerSGCertificateField;
            }
            set
            {
                this.BusinessPartnerSGCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesTo", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class STSAppliesTo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AppliesToCertificateField;
        
        private string AppliesToUriField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V4.STSAppliesToClaimType[] ClaimTypesField;
        
        private string TokenTypeField;
        
        private System.TimeSpan ValidityIntervalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppliesToCertificate
        {
            get
            {
                return this.AppliesToCertificateField;
            }
            set
            {
                this.AppliesToCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AppliesToUri
        {
            get
            {
                return this.AppliesToUriField;
            }
            set
            {
                this.AppliesToUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V4.STSAppliesToClaimType[] ClaimTypes
        {
            get
            {
                return this.ClaimTypesField;
            }
            set
            {
                this.ClaimTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TokenType
        {
            get
            {
                return this.TokenTypeField;
            }
            set
            {
                this.TokenTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.TimeSpan ValidityInterval
        {
            get
            {
                return this.ValidityIntervalField;
            }
            set
            {
                this.ValidityIntervalField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesToClaimType", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class STSAppliesToClaimType : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private bool RequiredField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Required
        {
            get
            {
                return this.RequiredField;
            }
            set
            {
                this.RequiredField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSClaimTypeInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class STSClaimTypeInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private string DescriptionField;
        
        private bool EncryptedField;
        
        private string TitleField;
        
        private string ValueTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Encrypted
        {
            get
            {
                return this.EncryptedField;
            }
            set
            {
                this.EncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ValueType
        {
            get
            {
                return this.ValueTypeField;
            }
            set
            {
                this.ValueTypeField = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Service\MixSettingsDataTypeFactory.cs ===
﻿
using System;
using xonline.mix.settingsmanagement.contract;
using System.Data;
using xonline.common.service;
using System.Collections.Generic;
using System.Linq;
using xonline.common.content;
using System.Collections;
using System.Text;

using xonline.server.liveinfo.client;

namespace xonline.mix.settingsmanagement.service
{
    public static partial class MixSettingsDataTypeFactory
    {
        public static LiveInfoSetting Convert(LiveHiveSettingV1 lisv1)
        {
            if(lisv1 == null)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "LiveHiveSetting was null.");
            }

            LiveInfoSetting set = new LiveInfoSetting();

            if(lisv1.Config != null) // This could be null for a call to SetSetting
            {
                set.Config = Convert(lisv1.Config);
            }

            set.Name = lisv1.Name;
            set.Value = lisv1.Value;

            return set;
        }

        public static LiveInfoConfig Convert(LiveHiveConfigV1 lhcv1)
        {
            if(lhcv1 == null)
            {
                throw new XRLException(
                        HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "LiveInfoConfig was null.");
            }

            LiveInfoConfig lic = new LiveInfoConfig();

            lic.Platform = Convert(lhcv1.Platform);
            lic.Build = lhcv1.Build;
            lic.Qfe = lhcv1.Qfe;
            lic.BetaGroupId = lhcv1.BetaGroupId;

            return lic;
        }

        public static LiveInfoConfig.PlatformType Convert(PlatformTypeV1 plat)
        {
            switch(plat)
            {
                case PlatformTypeV1.Xenon:
                    return LiveInfoConfig.PlatformType.xenon;
                default:
                    string exceptionString = String.Format(
                            "Call had an invalid parameter for this version. {0} is not supported",
                            Enum.GetName(typeof(PlatformTypeV1), plat));

                    throw new XRLException(
                            HResult.XONLINE_E_MIX_INVALID_PLATFORM,
                            XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                            exceptionString);
            }
        }

        public static LiveHiveSettingV1 ConvertV1(LiveInfoSetting lis)
        {
            LiveHiveSettingV1 lhs = new LiveHiveSettingV1();
            lhs.Config = ConvertV1(lis.Config);
            lhs.Name = lis.Name;
            lhs.Value = lis.Value;

            return lhs;
        }

        public static LiveHiveConfigV1 ConvertV1(LiveInfoConfig lic)
        {
            LiveHiveConfigV1 lvc = new LiveHiveConfigV1();

            lvc.Platform = ConvertV1(lic.Platform);
            lvc.Build = lic.Build;
            lvc.Qfe = lic.Qfe;
            lvc.BetaGroupId = lic.BetaGroupId;

            return lvc;
        }

        public static PlatformTypeV1 ConvertV1(LiveInfoConfig.PlatformType plat)
        {
            // We only support Xenon for now.
            //
            switch(plat)
            {
                case LiveInfoConfig.PlatformType.xenon:
                    return PlatformTypeV1.Xenon;
                default:
                    string exceptionString = String.Format(
                            "Call had an invalid parameter for this version. {0} is not supported",
                            Enum.GetName(typeof(PlatformTypeV1), plat));

                    throw new XRLException(
                            HResult.XONLINE_E_MIX_INVALID_PLATFORM,
                            XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                            exceptionString);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Contracts\objd\i386\MixSettingsManagementProxy.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4971
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V1", ClrNamespace="xonline.mix.settingsmanagement.contracts.V1")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V2", ClrNamespace="xonline.mix.settingsmanagement.contracts.V2")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V3", ClrNamespace="xonline.mix.settingsmanagement.contracts.V3")]
[assembly: System.Runtime.Serialization.ContractNamespaceAttribute("http://xonline.mix.settingsmanagement.contracts/V4", ClrNamespace="xonline.mix.settingsmanagement.contracts.V4")]

namespace xonline.mix.settingsmanagement.contracts.V1
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V1")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V1.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V1.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V1")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V1")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V1", ConfigurationName="MixSettingsManagement")]
public interface MixSettingsManagement
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngs", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/GetSetti" +
        "ngsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ng", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ngResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ngMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V1/MixSettingsManagement/SetSetti" +
        "ngValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting setting);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementChannel : MixSettingsManagement, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementClient : System.ServiceModel.ClientBase<MixSettingsManagement>, MixSettingsManagement
{
    
    public MixSettingsManagementClient()
    {
    }
    
    public MixSettingsManagementClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V1.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V1.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V2", ConfigurationName="MixSettingsManagementV2")]
public interface MixSettingsManagementV2
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tings", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tingsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/GetSet" +
        "tingsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "ting", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "tingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "tingMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/SetSet" +
        "tingValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting setting);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifest", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifestResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifestValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V2/MixSettingsManagementV2/Ingest" +
        "EtxManifestMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string IngestEtxManifest(string xmlManifest);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementV2Channel : MixSettingsManagementV2, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementV2Client : System.ServiceModel.ClientBase<MixSettingsManagementV2>, MixSettingsManagementV2
{
    
    public MixSettingsManagementV2Client()
    {
    }
    
    public MixSettingsManagementV2Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementV2Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV2Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV2Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V2.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
    
    public string IngestEtxManifest(string xmlManifest)
    {
        return base.Channel.IngestEtxManifest(xmlManifest);
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V3", ConfigurationName="MixSettingsManagementV3")]
public interface MixSettingsManagementV3
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tings", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tingsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetSet" +
        "tingsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "ting", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "tingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "tingValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetSet" +
        "tingMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting setting);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifest", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifestResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifestMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Ingest" +
        "EtxManifestValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string IngestEtxManifest(string xmlManifest);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartner", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartnerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartnerValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetBus" +
        "inessPartnerMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V3.BusinessPartner bp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/SetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo at);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/Remove" +
        "AppliesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo GetAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetCla" +
        "imTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V3.STSClaimTypeInfo[] GetClaimTypes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V3/MixSettingsManagementV3/GetTok" +
        "enTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetTokenTypes();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementV3Channel : MixSettingsManagementV3, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementV3Client : System.ServiceModel.ClientBase<MixSettingsManagementV3>, MixSettingsManagementV3
{
    
    public MixSettingsManagementV3Client()
    {
    }
    
    public MixSettingsManagementV3Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementV3Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV3Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV3Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V3.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
    
    public string IngestEtxManifest(string xmlManifest)
    {
        return base.Channel.IngestEtxManifest(xmlManifest);
    }
    
    public void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V3.BusinessPartner bp)
    {
        base.Channel.SetBusinessPartner(bp);
    }
    
    public void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo at)
    {
        base.Channel.SetAppliesToInfo(at);
    }
    
    public void RemoveAppliesToInfo(string appliesToUri)
    {
        base.Channel.RemoveAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V3.STSAppliesTo GetAppliesToInfo(string appliesToUri)
    {
        return base.Channel.GetAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V3.STSClaimTypeInfo[] GetClaimTypes()
    {
        return base.Channel.GetClaimTypes();
    }
    
    public string[] GetTokenTypes()
    {
        return base.Channel.GetTokenTypes();
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://xonline.mix.settingsmanagement.contracts/V4", ConfigurationName="MixSettingsManagementV4")]
public interface MixSettingsManagementV4
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tings", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tingsResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tingsMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetSet" +
        "tingsValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "ting", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "tingResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "tingMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetSet" +
        "tingValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetSetting(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting setting);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifest", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifestResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifestMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Ingest" +
        "EtxManifestValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string IngestEtxManifest(string xmlManifest);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartner", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartnerResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartnerMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetBus" +
        "inessPartnerValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V4.BusinessPartner bp);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/SetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo at);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/Remove" +
        "AppliesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    void RemoveAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfo", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfoResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfoMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetApp" +
        "liesToInfoValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo GetAppliesToInfo(string appliesToUri);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetCla" +
        "imTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    xonline.mix.settingsmanagement.contracts.V4.STSClaimTypeInfo[] GetClaimTypes(string businessPartnerType);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetTok" +
        "enTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetTokenTypes();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypes", ReplyAction="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypesResponse")]
    [System.ServiceModel.FaultContractAttribute(typeof(xonline.mix.common.MixClientFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypesMixClientFaultFault", Name="MixClientFault", Namespace="http://xonline.mix.common.contracts")]
    [System.ServiceModel.FaultContractAttribute(typeof(Microsoft.Practices.EnterpriseLibrary.Validation.Integration.WCF.ValidationFault), Action="http://xonline.mix.settingsmanagement.contracts/V4/MixSettingsManagementV4/GetBus" +
        "inessPartnerTypesValidationFault", Name="ValidationFault", Namespace="http://xonline.mix.common.contracts")]
    string[] GetBusinessPartnerTypes();
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface MixSettingsManagementV4Channel : MixSettingsManagementV4, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class MixSettingsManagementV4Client : System.ServiceModel.ClientBase<MixSettingsManagementV4>, MixSettingsManagementV4
{
    
    public MixSettingsManagementV4Client()
    {
    }
    
    public MixSettingsManagementV4Client(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public MixSettingsManagementV4Client(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV4Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public MixSettingsManagementV4Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting[] GetSettings(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config)
    {
        return base.Channel.GetSettings(config);
    }
    
    public void SetSetting(xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig config, xonline.mix.settingsmanagement.contracts.V4.LiveHiveSetting setting)
    {
        base.Channel.SetSetting(config, setting);
    }
    
    public string IngestEtxManifest(string xmlManifest)
    {
        return base.Channel.IngestEtxManifest(xmlManifest);
    }
    
    public void SetBusinessPartner(xonline.mix.settingsmanagement.contracts.V4.BusinessPartner bp)
    {
        base.Channel.SetBusinessPartner(bp);
    }
    
    public void SetAppliesToInfo(xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo at)
    {
        base.Channel.SetAppliesToInfo(at);
    }
    
    public void RemoveAppliesToInfo(string appliesToUri)
    {
        base.Channel.RemoveAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V4.STSAppliesTo GetAppliesToInfo(string appliesToUri)
    {
        return base.Channel.GetAppliesToInfo(appliesToUri);
    }
    
    public xonline.mix.settingsmanagement.contracts.V4.STSClaimTypeInfo[] GetClaimTypes(string businessPartnerType)
    {
        return base.Channel.GetClaimTypes(businessPartnerType);
    }
    
    public string[] GetTokenTypes()
    {
        return base.Channel.GetTokenTypes();
    }
    
    public string[] GetBusinessPartnerTypes()
    {
        return base.Channel.GetBusinessPartnerTypes();
    }
}
namespace xonline.mix.settingsmanagement.contracts.V2
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V2")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V2.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V2.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V2")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V2")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V2.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
}
namespace xonline.mix.settingsmanagement.contracts.V3
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V3.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V3.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V3.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartner", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class BusinessPartner : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V3.BusinessPartnerConnectionInfo[] ConnectionInfosField;
        
        private string FriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.settingsmanagement.contracts.V3.BusinessPartnerConnectionInfo[] ConnectionInfos
        {
            get
            {
                return this.ConnectionInfosField;
            }
            set
            {
                this.ConnectionInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartnerConnectionInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class BusinessPartnerConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string BusinessPartnerSGCertificateField;
        
        private string FriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string BusinessPartnerSGCertificate
        {
            get
            {
                return this.BusinessPartnerSGCertificateField;
            }
            set
            {
                this.BusinessPartnerSGCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesTo", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class STSAppliesTo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AppliesToCertificateField;
        
        private string AppliesToUriField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V3.STSAppliesToClaimType[] ClaimTypesField;
        
        private string TokenTypeField;
        
        private System.TimeSpan ValidityIntervalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppliesToCertificate
        {
            get
            {
                return this.AppliesToCertificateField;
            }
            set
            {
                this.AppliesToCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AppliesToUri
        {
            get
            {
                return this.AppliesToUriField;
            }
            set
            {
                this.AppliesToUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V3.STSAppliesToClaimType[] ClaimTypes
        {
            get
            {
                return this.ClaimTypesField;
            }
            set
            {
                this.ClaimTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TokenType
        {
            get
            {
                return this.TokenTypeField;
            }
            set
            {
                this.TokenTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.TimeSpan ValidityInterval
        {
            get
            {
                return this.ValidityIntervalField;
            }
            set
            {
                this.ValidityIntervalField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesToClaimType", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class STSAppliesToClaimType : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private bool RequiredField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Required
        {
            get
            {
                return this.RequiredField;
            }
            set
            {
                this.RequiredField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSClaimTypeInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V3")]
    public partial class STSClaimTypeInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private string DescriptionField;
        
        private bool EncryptedField;
        
        private string TitleField;
        
        private string ValueTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Encrypted
        {
            get
            {
                return this.EncryptedField;
            }
            set
            {
                this.EncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ValueType
        {
            get
            {
                return this.ValueTypeField;
            }
            set
            {
                this.ValueTypeField = value;
            }
        }
    }
}
namespace xonline.mix.settingsmanagement.contracts.V4
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveConfig", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class LiveHiveConfig : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BetaGroupIdField;
        
        private System.Nullable<ushort> BuildField;
        
        private xonline.mix.settingsmanagement.contracts.V4.PlatformType PlatformTypeField;
        
        private System.Nullable<ushort> QfeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BetaGroupId
        {
            get
            {
                return this.BetaGroupIdField;
            }
            set
            {
                this.BetaGroupIdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Build
        {
            get
            {
                return this.BuildField;
            }
            set
            {
                this.BuildField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V4.PlatformType PlatformType
        {
            get
            {
                return this.PlatformTypeField;
            }
            set
            {
                this.PlatformTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<ushort> Qfe
        {
            get
            {
                return this.QfeField;
            }
            set
            {
                this.QfeField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlatformType", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public enum PlatformType : byte
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xbox1 = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        XboxCom = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Xenon = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Marketplace = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        PC = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Mobile = 5,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        WebGames = 6,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LiveHiveSetting", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class LiveHiveSetting : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig ConfigField;
        
        private string NameField;
        
        private string ValueField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V4.LiveHiveConfig Config
        {
            get
            {
                return this.ConfigField;
            }
            set
            {
                this.ConfigField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Value
        {
            get
            {
                return this.ValueField;
            }
            set
            {
                this.ValueField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartner", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class BusinessPartner : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V4.BusinessPartnerConnectionInfo[] ConnectionInfosField;
        
        private string FriendlyNameField;
        
        private string TypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public xonline.mix.settingsmanagement.contracts.V4.BusinessPartnerConnectionInfo[] ConnectionInfos
        {
            get
            {
                return this.ConnectionInfosField;
            }
            set
            {
                this.ConnectionInfosField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type
        {
            get
            {
                return this.TypeField;
            }
            set
            {
                this.TypeField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BusinessPartnerConnectionInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class BusinessPartnerConnectionInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string BusinessPartnerSGCertificateField;
        
        private string FriendlyNameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string BusinessPartnerSGCertificate
        {
            get
            {
                return this.BusinessPartnerSGCertificateField;
            }
            set
            {
                this.BusinessPartnerSGCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string FriendlyName
        {
            get
            {
                return this.FriendlyNameField;
            }
            set
            {
                this.FriendlyNameField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesTo", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class STSAppliesTo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string AppliesToCertificateField;
        
        private string AppliesToUriField;
        
        private System.Guid BusinessPartnerIDField;
        
        private xonline.mix.settingsmanagement.contracts.V4.STSAppliesToClaimType[] ClaimTypesField;
        
        private string TokenTypeField;
        
        private System.TimeSpan ValidityIntervalField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AppliesToCertificate
        {
            get
            {
                return this.AppliesToCertificateField;
            }
            set
            {
                this.AppliesToCertificateField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string AppliesToUri
        {
            get
            {
                return this.AppliesToUriField;
            }
            set
            {
                this.AppliesToUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.Guid BusinessPartnerID
        {
            get
            {
                return this.BusinessPartnerIDField;
            }
            set
            {
                this.BusinessPartnerIDField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public xonline.mix.settingsmanagement.contracts.V4.STSAppliesToClaimType[] ClaimTypes
        {
            get
            {
                return this.ClaimTypesField;
            }
            set
            {
                this.ClaimTypesField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string TokenType
        {
            get
            {
                return this.TokenTypeField;
            }
            set
            {
                this.TokenTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public System.TimeSpan ValidityInterval
        {
            get
            {
                return this.ValidityIntervalField;
            }
            set
            {
                this.ValidityIntervalField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSAppliesToClaimType", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class STSAppliesToClaimType : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private bool RequiredField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Required
        {
            get
            {
                return this.RequiredField;
            }
            set
            {
                this.RequiredField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="STSClaimTypeInfo", Namespace="http://xonline.mix.settingsmanagement.contracts/V4")]
    public partial class STSClaimTypeInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string ClaimTypeUriField;
        
        private string DescriptionField;
        
        private bool EncryptedField;
        
        private string TitleField;
        
        private string ValueTypeField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ClaimTypeUri
        {
            get
            {
                return this.ClaimTypeUriField;
            }
            set
            {
                this.ClaimTypeUriField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public bool Encrypted
        {
            get
            {
                return this.EncryptedField;
            }
            set
            {
                this.EncryptedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string Title
        {
            get
            {
                return this.TitleField;
            }
            set
            {
                this.TitleField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired=true)]
        public string ValueType
        {
            get
            {
                return this.ValueTypeField;
            }
            set
            {
                this.ValueTypeField = value;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\Mix\SettingsManagement\Service\MixSettingsDataTypeFactoryV3.cs ===
﻿
using System;
using xonline.mix.settingsmanagement.contract;
using System.Data;
using xonline.common.service;
using System.Collections.Generic;
using System.Linq;
using xonline.common.content;
using System.Collections;
using System.Text;

using xonline.server.liveinfo.client;

namespace xonline.mix.settingsmanagement.service
{
    public class BusinessPartner
    {
        public Guid BusinessPartnerID;
        public string FriendlyName;
        public string Type;
        public BusinessPartnerConnectionInfo[] ConnectionInfos;

        public void Verify()
        {
            if(string.IsNullOrEmpty(FriendlyName))
            {
                throw new XRLException(HResult.XONLINE_E_MIX_ARGUMENT_NULL,
                    XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                    "Friendly name is null or empty.");
            }

            if(FriendlyName.Length > 255)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "Friendly name is too long.  Friendly name has a maximum of 255 characters.");
            }
        }
    }

    public class BusinessPartnerConnectionInfo
    {
        public string FriendlyName;
        public string SGCertificate;

        public void Verify()
        {
            if(FriendlyName.Length > 255)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "Friendly name is too long.  Friendly name has a maximum of 255 characters.");
            }

            if(SGCertificate.Length > 2048)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "SGCertificate is too long.  Certificates are limited to a base 64 string of 2048 characters.");
            }
        }
    }

    public class STSAppliesTo
    {
        public Guid BusinessPartnerID;
        public string AppliesToUri;
        public TimeSpan ValidityInterval;
        public string TokenType;
        public STSAppliesToClaimType[] ClaimTypes;
        public string AppliesToCertificate;

        public void Verify()
        {
            if(AppliesToUri.Length > 255)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "Friendly name is too long.  Friendly name has a maximum of 255 characters.");
            }

            if(AppliesToCertificate != null && AppliesToCertificate.Length > 2048)
            {
                throw new XRLException(HResult.XONLINE_E_MIX_STRING_TOO_LONG,
                        XEvent.Id.MIX_SETTINGS_INVALID_ARGUMENT,
                        "SGCertificate is too long.  Certificates are limited to a base 64 str