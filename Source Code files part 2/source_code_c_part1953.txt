_ASSEMBLY_IDENTITY_DEF_W                                                     L"_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_DEF_S                                                     S"_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("_reportssisuodb_3,version=12.4.56.0,culture=neutral")
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_REF                                                         _reportssisuodb_3,version=12.4.56.0,culture=neutral
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_REF_A                                                      "_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_REF_W                                                     L"_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_REF_S                                                     S"_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("_reportssisuodb_3,version=12.4.56.0,culture=neutral")
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_EXACT_REF                                                   _reportssisuodb_3,version=12.4.56.0,culture=neutral
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"_reportssisuodb_3,version=12.4.56.0,culture=neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("_reportssisuodb_3,version=12.4.56.0,culture=neutral")
#define _REPORTSSISUODB_3_ASSEMBLY_NAME                                                                 _reportssisuodb_3
#define _REPORTSSISUODB_3_ASSEMBLY_NAME_A                                                              "_reportssisuodb_3"
#define _REPORTSSISUODB_3_ASSEMBLY_NAME_W                                                             L"_reportssisuodb_3"
#define _REPORTSSISUODB_3_ASSEMBLY_NAME_S                                                             S"_reportssisuodb_3"
#define _REPORTSSISUODB_3_ASSEMBLY_NAME_T                                                         TEXT("_reportssisuodb_3")
#define _REPORTSSISUODB_3_ASSEMBLY_VERSION                                                              12.4.56.0
#define _REPORTSSISUODB_3_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define _REPORTSSISUODB_3_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define _REPORTSSISUODB_3_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define _REPORTSSISUODB_3_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define _REPORTSSISUODB_3_ASSEMBLY_CULTURE                                                              neutral
#define _REPORTSSISUODB_3_ASSEMBLY_CULTURE_A                                                           "neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define _REPORTSSISUODB_3_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_DEF                                                              _xblmetadb_4,version=12.4.56.0,culture=neutral
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_DEF_A                                                           "_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_DEF_W                                                          L"_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_DEF_S                                                          S"_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("_xblmetadb_4,version=12.4.56.0,culture=neutral")
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_REF                                                              _xblmetadb_4,version=12.4.56.0,culture=neutral
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_REF_A                                                           "_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_REF_W                                                          L"_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_REF_S                                                          S"_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("_xblmetadb_4,version=12.4.56.0,culture=neutral")
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_EXACT_REF                                                        _xblmetadb_4,version=12.4.56.0,culture=neutral
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"_xblmetadb_4,version=12.4.56.0,culture=neutral"
#define _XBLMETADB_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("_xblmetadb_4,version=12.4.56.0,culture=neutral")
#define _XBLMETADB_4_ASSEMBLY_NAME                                                                      _xblmetadb_4
#define _XBLMETADB_4_ASSEMBLY_NAME_A                                                                   "_xblmetadb_4"
#define _XBLMETADB_4_ASSEMBLY_NAME_W                                                                  L"_xblmetadb_4"
#define _XBLMETADB_4_ASSEMBLY_NAME_S                                                                  S"_xblmetadb_4"
#define _XBLMETADB_4_ASSEMBLY_NAME_T                                                              TEXT("_xblmetadb_4")
#define _XBLMETADB_4_ASSEMBLY_VERSION                                                                   12.4.56.0
#define _XBLMETADB_4_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define _XBLMETADB_4_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define _XBLMETADB_4_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define _XBLMETADB_4_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define _XBLMETADB_4_ASSEMBLY_CULTURE                                                                   neutral
#define _XBLMETADB_4_ASSEMBLY_CULTURE_A                                                                "neutral"
#define _XBLMETADB_4_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define _XBLMETADB_4_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define _XBLMETADB_4_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define _GENEALOGY_ASSEMBLY_IDENTITY_DEF                                                                _genealogy,version=12.4.56.0,culture=neutral
#define _GENEALOGY_ASSEMBLY_IDENTITY_DEF_A                                                             "_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_DEF_W                                                            L"_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_DEF_S                                                            S"_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_genealogy,version=12.4.56.0,culture=neutral")
#define _GENEALOGY_ASSEMBLY_IDENTITY_REF                                                                _genealogy,version=12.4.56.0,culture=neutral
#define _GENEALOGY_ASSEMBLY_IDENTITY_REF_A                                                             "_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_REF_W                                                            L"_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_REF_S                                                            S"_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_genealogy,version=12.4.56.0,culture=neutral")
#define _GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF                                                          _genealogy,version=12.4.56.0,culture=neutral
#define _GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_genealogy,version=12.4.56.0,culture=neutral"
#define _GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_genealogy,version=12.4.56.0,culture=neutral")
#define _GENEALOGY_ASSEMBLY_NAME                                                                        _genealogy
#define _GENEALOGY_ASSEMBLY_NAME_A                                                                     "_genealogy"
#define _GENEALOGY_ASSEMBLY_NAME_W                                                                    L"_genealogy"
#define _GENEALOGY_ASSEMBLY_NAME_S                                                                    S"_genealogy"
#define _GENEALOGY_ASSEMBLY_NAME_T                                                                TEXT("_genealogy")
#define _GENEALOGY_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _GENEALOGY_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _GENEALOGY_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _GENEALOGY_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _GENEALOGY_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _GENEALOGY_ASSEMBLY_CULTURE                                                                     neutral
#define _GENEALOGY_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _GENEALOGY_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _GENEALOGY_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _GENEALOGY_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_DEF                                                            _npdb_template,version=12.4.56.0,culture=neutral
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_DEF_A                                                         "_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_DEF_W                                                        L"_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_DEF_S                                                        S"_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_npdb_template,version=12.4.56.0,culture=neutral")
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_REF                                                            _npdb_template,version=12.4.56.0,culture=neutral
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_REF_A                                                         "_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_REF_W                                                        L"_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_REF_S                                                        S"_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_npdb_template,version=12.4.56.0,culture=neutral")
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_EXACT_REF                                                      _npdb_template,version=12.4.56.0,culture=neutral
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_npdb_template,version=12.4.56.0,culture=neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_npdb_template,version=12.4.56.0,culture=neutral")
#define _NPDB_TEMPLATE_ASSEMBLY_NAME                                                                    _npdb_template
#define _NPDB_TEMPLATE_ASSEMBLY_NAME_A                                                                 "_npdb_template"
#define _NPDB_TEMPLATE_ASSEMBLY_NAME_W                                                                L"_npdb_template"
#define _NPDB_TEMPLATE_ASSEMBLY_NAME_S                                                                S"_npdb_template"
#define _NPDB_TEMPLATE_ASSEMBLY_NAME_T                                                            TEXT("_npdb_template")
#define _NPDB_TEMPLATE_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _NPDB_TEMPLATE_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _NPDB_TEMPLATE_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _NPDB_TEMPLATE_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _NPDB_TEMPLATE_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _NPDB_TEMPLATE_ASSEMBLY_CULTURE                                                                 neutral
#define _NPDB_TEMPLATE_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _NPDB_TEMPLATE_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define XKEYMGR_ASSEMBLY_IDENTITY_DEF                                                                   xkeymgr,version=12.4.56.0,culture=neutral
#define XKEYMGR_ASSEMBLY_IDENTITY_DEF_A                                                                "xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_DEF_W                                                               L"xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_DEF_S                                                               S"xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("xkeymgr,version=12.4.56.0,culture=neutral")
#define XKEYMGR_ASSEMBLY_IDENTITY_REF                                                                   xkeymgr,version=12.4.56.0,culture=neutral
#define XKEYMGR_ASSEMBLY_IDENTITY_REF_A                                                                "xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_REF_W                                                               L"xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_REF_S                                                               S"xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("xkeymgr,version=12.4.56.0,culture=neutral")
#define XKEYMGR_ASSEMBLY_IDENTITY_EXACT_REF                                                             xkeymgr,version=12.4.56.0,culture=neutral
#define XKEYMGR_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"xkeymgr,version=12.4.56.0,culture=neutral"
#define XKEYMGR_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("xkeymgr,version=12.4.56.0,culture=neutral")
#define XKEYMGR_ASSEMBLY_NAME                                                                           xkeymgr
#define XKEYMGR_ASSEMBLY_NAME_A                                                                        "xkeymgr"
#define XKEYMGR_ASSEMBLY_NAME_W                                                                       L"xkeymgr"
#define XKEYMGR_ASSEMBLY_NAME_S                                                                       S"xkeymgr"
#define XKEYMGR_ASSEMBLY_NAME_T                                                                   TEXT("xkeymgr")
#define XKEYMGR_ASSEMBLY_VERSION                                                                        12.4.56.0
#define XKEYMGR_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define XKEYMGR_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define XKEYMGR_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define XKEYMGR_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define XKEYMGR_ASSEMBLY_CULTURE                                                                        neutral
#define XKEYMGR_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define XKEYMGR_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define XKEYMGR_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define XKEYMGR_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_DEF                                                               xkeymgrtest,version=12.4.56.0,culture=neutral
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_DEF_A                                                            "xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_DEF_W                                                           L"xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_DEF_S                                                           S"xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("xkeymgrtest,version=12.4.56.0,culture=neutral")
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_REF                                                               xkeymgrtest,version=12.4.56.0,culture=neutral
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_REF_A                                                            "xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_REF_W                                                           L"xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_REF_S                                                           S"xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("xkeymgrtest,version=12.4.56.0,culture=neutral")
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                         xkeymgrtest,version=12.4.56.0,culture=neutral
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"xkeymgrtest,version=12.4.56.0,culture=neutral"
#define XKEYMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("xkeymgrtest,version=12.4.56.0,culture=neutral")
#define XKEYMGRTEST_ASSEMBLY_NAME                                                                       xkeymgrtest
#define XKEYMGRTEST_ASSEMBLY_NAME_A                                                                    "xkeymgrtest"
#define XKEYMGRTEST_ASSEMBLY_NAME_W                                                                   L"xkeymgrtest"
#define XKEYMGRTEST_ASSEMBLY_NAME_S                                                                   S"xkeymgrtest"
#define XKEYMGRTEST_ASSEMBLY_NAME_T                                                               TEXT("xkeymgrtest")
#define XKEYMGRTEST_ASSEMBLY_VERSION                                                                    12.4.56.0
#define XKEYMGRTEST_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define XKEYMGRTEST_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define XKEYMGRTEST_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define XKEYMGRTEST_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define XKEYMGRTEST_ASSEMBLY_CULTURE                                                                    neutral
#define XKEYMGRTEST_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define XKEYMGRTEST_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define XKEYMGRTEST_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define XKEYMGRTEST_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_DEF                                                               errorlookup,version=12.4.56.0,culture=neutral
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_DEF_A                                                            "errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_DEF_W                                                           L"errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_DEF_S                                                           S"errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("errorlookup,version=12.4.56.0,culture=neutral")
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_REF                                                               errorlookup,version=12.4.56.0,culture=neutral
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_REF_A                                                            "errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_REF_W                                                           L"errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_REF_S                                                           S"errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("errorlookup,version=12.4.56.0,culture=neutral")
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF                                                         errorlookup,version=12.4.56.0,culture=neutral
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"errorlookup,version=12.4.56.0,culture=neutral"
#define ERRORLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("errorlookup,version=12.4.56.0,culture=neutral")
#define ERRORLOOKUP_ASSEMBLY_NAME                                                                       errorlookup
#define ERRORLOOKUP_ASSEMBLY_NAME_A                                                                    "errorlookup"
#define ERRORLOOKUP_ASSEMBLY_NAME_W                                                                   L"errorlookup"
#define ERRORLOOKUP_ASSEMBLY_NAME_S                                                                   S"errorlookup"
#define ERRORLOOKUP_ASSEMBLY_NAME_T                                                               TEXT("errorlookup")
#define ERRORLOOKUP_ASSEMBLY_VERSION                                                                    12.4.56.0
#define ERRORLOOKUP_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define ERRORLOOKUP_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define ERRORLOOKUP_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define ERRORLOOKUP_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define ERRORLOOKUP_ASSEMBLY_CULTURE                                                                    neutral
#define ERRORLOOKUP_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define ERRORLOOKUP_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define ERRORLOOKUP_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define ERRORLOOKUP_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define SETUSERMSG_ASSEMBLY_IDENTITY_DEF                                                                setusermsg,version=12.4.56.0,culture=neutral
#define SETUSERMSG_ASSEMBLY_IDENTITY_DEF_A                                                             "setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_DEF_W                                                            L"setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_DEF_S                                                            S"setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("setusermsg,version=12.4.56.0,culture=neutral")
#define SETUSERMSG_ASSEMBLY_IDENTITY_REF                                                                setusermsg,version=12.4.56.0,culture=neutral
#define SETUSERMSG_ASSEMBLY_IDENTITY_REF_A                                                             "setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_REF_W                                                            L"setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_REF_S                                                            S"setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("setusermsg,version=12.4.56.0,culture=neutral")
#define SETUSERMSG_ASSEMBLY_IDENTITY_EXACT_REF                                                          setusermsg,version=12.4.56.0,culture=neutral
#define SETUSERMSG_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"setusermsg,version=12.4.56.0,culture=neutral"
#define SETUSERMSG_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("setusermsg,version=12.4.56.0,culture=neutral")
#define SETUSERMSG_ASSEMBLY_NAME                                                                        setusermsg
#define SETUSERMSG_ASSEMBLY_NAME_A                                                                     "setusermsg"
#define SETUSERMSG_ASSEMBLY_NAME_W                                                                    L"setusermsg"
#define SETUSERMSG_ASSEMBLY_NAME_S                                                                    S"setusermsg"
#define SETUSERMSG_ASSEMBLY_NAME_T                                                                TEXT("setusermsg")
#define SETUSERMSG_ASSEMBLY_VERSION                                                                     12.4.56.0
#define SETUSERMSG_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define SETUSERMSG_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define SETUSERMSG_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define SETUSERMSG_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define SETUSERMSG_ASSEMBLY_CULTURE                                                                     neutral
#define SETUSERMSG_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define SETUSERMSG_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define SETUSERMSG_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define SETUSERMSG_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_DEF                                                           _webrefsupapi_2,version=12.4.56.0,culture=neutral
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_DEF_A                                                        "_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_DEF_W                                                       L"_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_DEF_S                                                       S"_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("_webrefsupapi_2,version=12.4.56.0,culture=neutral")
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_REF                                                           _webrefsupapi_2,version=12.4.56.0,culture=neutral
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_REF_A                                                        "_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_REF_W                                                       L"_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_REF_S                                                       S"_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("_webrefsupapi_2,version=12.4.56.0,culture=neutral")
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_EXACT_REF                                                     _webrefsupapi_2,version=12.4.56.0,culture=neutral
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"_webrefsupapi_2,version=12.4.56.0,culture=neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("_webrefsupapi_2,version=12.4.56.0,culture=neutral")
#define _WEBREFSUPAPI_2_ASSEMBLY_NAME                                                                   _webrefsupapi_2
#define _WEBREFSUPAPI_2_ASSEMBLY_NAME_A                                                                "_webrefsupapi_2"
#define _WEBREFSUPAPI_2_ASSEMBLY_NAME_W                                                               L"_webrefsupapi_2"
#define _WEBREFSUPAPI_2_ASSEMBLY_NAME_S                                                               S"_webrefsupapi_2"
#define _WEBREFSUPAPI_2_ASSEMBLY_NAME_T                                                           TEXT("_webrefsupapi_2")
#define _WEBREFSUPAPI_2_ASSEMBLY_VERSION                                                                12.4.56.0
#define _WEBREFSUPAPI_2_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define _WEBREFSUPAPI_2_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define _WEBREFSUPAPI_2_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define _WEBREFSUPAPI_2_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define _WEBREFSUPAPI_2_ASSEMBLY_CULTURE                                                                neutral
#define _WEBREFSUPAPI_2_ASSEMBLY_CULTURE_A                                                             "neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define _WEBREFSUPAPI_2_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define CLIENTBIN_ASSEMBLY_IDENTITY_DEF                                                                 clientbin,version=12.4.56.0,culture=neutral
#define CLIENTBIN_ASSEMBLY_IDENTITY_DEF_A                                                              "clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_DEF_W                                                             L"clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_DEF_S                                                             S"clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("clientbin,version=12.4.56.0,culture=neutral")
#define CLIENTBIN_ASSEMBLY_IDENTITY_REF                                                                 clientbin,version=12.4.56.0,culture=neutral
#define CLIENTBIN_ASSEMBLY_IDENTITY_REF_A                                                              "clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_REF_W                                                             L"clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_REF_S                                                             S"clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("clientbin,version=12.4.56.0,culture=neutral")
#define CLIENTBIN_ASSEMBLY_IDENTITY_EXACT_REF                                                           clientbin,version=12.4.56.0,culture=neutral
#define CLIENTBIN_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"clientbin,version=12.4.56.0,culture=neutral"
#define CLIENTBIN_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("clientbin,version=12.4.56.0,culture=neutral")
#define CLIENTBIN_ASSEMBLY_NAME                                                                         clientbin
#define CLIENTBIN_ASSEMBLY_NAME_A                                                                      "clientbin"
#define CLIENTBIN_ASSEMBLY_NAME_W                                                                     L"clientbin"
#define CLIENTBIN_ASSEMBLY_NAME_S                                                                     S"clientbin"
#define CLIENTBIN_ASSEMBLY_NAME_T                                                                 TEXT("clientbin")
#define CLIENTBIN_ASSEMBLY_VERSION                                                                      12.4.56.0
#define CLIENTBIN_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define CLIENTBIN_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define CLIENTBIN_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define CLIENTBIN_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define CLIENTBIN_ASSEMBLY_CULTURE                                                                      neutral
#define CLIENTBIN_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define CLIENTBIN_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define CLIENTBIN_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define CLIENTBIN_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define AASMANAGER_ASSEMBLY_IDENTITY_DEF                                                                aasmanager,version=12.4.56.0,culture=neutral
#define AASMANAGER_ASSEMBLY_IDENTITY_DEF_A                                                             "aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_DEF_W                                                            L"aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_DEF_S                                                            S"aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("aasmanager,version=12.4.56.0,culture=neutral")
#define AASMANAGER_ASSEMBLY_IDENTITY_REF                                                                aasmanager,version=12.4.56.0,culture=neutral
#define AASMANAGER_ASSEMBLY_IDENTITY_REF_A                                                             "aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_REF_W                                                            L"aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_REF_S                                                            S"aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("aasmanager,version=12.4.56.0,culture=neutral")
#define AASMANAGER_ASSEMBLY_IDENTITY_EXACT_REF                                                          aasmanager,version=12.4.56.0,culture=neutral
#define AASMANAGER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"aasmanager,version=12.4.56.0,culture=neutral"
#define AASMANAGER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("aasmanager,version=12.4.56.0,culture=neutral")
#define AASMANAGER_ASSEMBLY_NAME                                                                        aasmanager
#define AASMANAGER_ASSEMBLY_NAME_A                                                                     "aasmanager"
#define AASMANAGER_ASSEMBLY_NAME_W                                                                    L"aasmanager"
#define AASMANAGER_ASSEMBLY_NAME_S                                                                    S"aasmanager"
#define AASMANAGER_ASSEMBLY_NAME_T                                                                TEXT("aasmanager")
#define AASMANAGER_ASSEMBLY_VERSION                                                                     12.4.56.0
#define AASMANAGER_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define AASMANAGER_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define AASMANAGER_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define AASMANAGER_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define AASMANAGER_ASSEMBLY_CULTURE                                                                     neutral
#define AASMANAGER_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define AASMANAGER_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define AASMANAGER_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define AASMANAGER_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define GENEALOGY_ASSEMBLY_IDENTITY_DEF                                                                 genealogy,version=12.4.56.0,culture=neutral
#define GENEALOGY_ASSEMBLY_IDENTITY_DEF_A                                                              "genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_DEF_W                                                             L"genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_DEF_S                                                             S"genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("genealogy,version=12.4.56.0,culture=neutral")
#define GENEALOGY_ASSEMBLY_IDENTITY_REF                                                                 genealogy,version=12.4.56.0,culture=neutral
#define GENEALOGY_ASSEMBLY_IDENTITY_REF_A                                                              "genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_REF_W                                                             L"genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_REF_S                                                             S"genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("genealogy,version=12.4.56.0,culture=neutral")
#define GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF                                                           genealogy,version=12.4.56.0,culture=neutral
#define GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"genealogy,version=12.4.56.0,culture=neutral"
#define GENEALOGY_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("genealogy,version=12.4.56.0,culture=neutral")
#define GENEALOGY_ASSEMBLY_NAME                                                                         genealogy
#define GENEALOGY_ASSEMBLY_NAME_A                                                                      "genealogy"
#define GENEALOGY_ASSEMBLY_NAME_W                                                                     L"genealogy"
#define GENEALOGY_ASSEMBLY_NAME_S                                                                     S"genealogy"
#define GENEALOGY_ASSEMBLY_NAME_T                                                                 TEXT("genealogy")
#define GENEALOGY_ASSEMBLY_VERSION                                                                      12.4.56.0
#define GENEALOGY_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define GENEALOGY_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define GENEALOGY_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define GENEALOGY_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define GENEALOGY_ASSEMBLY_CULTURE                                                                      neutral
#define GENEALOGY_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define GENEALOGY_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define GENEALOGY_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define GENEALOGY_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define GENESVC_ASSEMBLY_IDENTITY_DEF                                                                   genesvc,version=12.4.56.0,culture=neutral
#define GENESVC_ASSEMBLY_IDENTITY_DEF_A                                                                "genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_DEF_W                                                               L"genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_DEF_S                                                               S"genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("genesvc,version=12.4.56.0,culture=neutral")
#define GENESVC_ASSEMBLY_IDENTITY_REF                                                                   genesvc,version=12.4.56.0,culture=neutral
#define GENESVC_ASSEMBLY_IDENTITY_REF_A                                                                "genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_REF_W                                                               L"genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_REF_S                                                               S"genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("genesvc,version=12.4.56.0,culture=neutral")
#define GENESVC_ASSEMBLY_IDENTITY_EXACT_REF                                                             genesvc,version=12.4.56.0,culture=neutral
#define GENESVC_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"genesvc,version=12.4.56.0,culture=neutral"
#define GENESVC_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("genesvc,version=12.4.56.0,culture=neutral")
#define GENESVC_ASSEMBLY_NAME                                                                           genesvc
#define GENESVC_ASSEMBLY_NAME_A                                                                        "genesvc"
#define GENESVC_ASSEMBLY_NAME_W                                                                       L"genesvc"
#define GENESVC_ASSEMBLY_NAME_S                                                                       S"genesvc"
#define GENESVC_ASSEMBLY_NAME_T                                                                   TEXT("genesvc")
#define GENESVC_ASSEMBLY_VERSION                                                                        12.4.56.0
#define GENESVC_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define GENESVC_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define GENESVC_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define GENESVC_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define GENESVC_ASSEMBLY_CULTURE                                                                        neutral
#define GENESVC_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define GENESVC_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define GENESVC_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define GENESVC_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define _SQL_4_ASSEMBLY_IDENTITY_DEF                                                                    _sql_4,version=12.4.56.0,culture=neutral
#define _SQL_4_ASSEMBLY_IDENTITY_DEF_A                                                                 "_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_DEF_W                                                                L"_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_DEF_S                                                                S"_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_DEF_T                                                            TEXT("_sql_4,version=12.4.56.0,culture=neutral")
#define _SQL_4_ASSEMBLY_IDENTITY_REF                                                                    _sql_4,version=12.4.56.0,culture=neutral
#define _SQL_4_ASSEMBLY_IDENTITY_REF_A                                                                 "_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_REF_W                                                                L"_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_REF_S                                                                S"_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_REF_T                                                            TEXT("_sql_4,version=12.4.56.0,culture=neutral")
#define _SQL_4_ASSEMBLY_IDENTITY_EXACT_REF                                                              _sql_4,version=12.4.56.0,culture=neutral
#define _SQL_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                           "_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                          L"_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                          S"_sql_4,version=12.4.56.0,culture=neutral"
#define _SQL_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                      TEXT("_sql_4,version=12.4.56.0,culture=neutral")
#define _SQL_4_ASSEMBLY_NAME                                                                            _sql_4
#define _SQL_4_ASSEMBLY_NAME_A                                                                         "_sql_4"
#define _SQL_4_ASSEMBLY_NAME_W                                                                        L"_sql_4"
#define _SQL_4_ASSEMBLY_NAME_S                                                                        S"_sql_4"
#define _SQL_4_ASSEMBLY_NAME_T                                                                    TEXT("_sql_4")
#define _SQL_4_ASSEMBLY_VERSION                                                                         12.4.56.0
#define _SQL_4_ASSEMBLY_VERSION_A                                                                      "12.4.56.0"
#define _SQL_4_ASSEMBLY_VERSION_W                                                                     L"12.4.56.0"
#define _SQL_4_ASSEMBLY_VERSION_S                                                                     S"12.4.56.0"
#define _SQL_4_ASSEMBLY_VERSION_T                                                                 TEXT("12.4.56.0")
#define _SQL_4_ASSEMBLY_CULTURE                                                                         neutral
#define _SQL_4_ASSEMBLY_CULTURE_A                                                                      "neutral"
#define _SQL_4_ASSEMBLY_CULTURE_W                                                                     L"neutral"
#define _SQL_4_ASSEMBLY_CULTURE_S                                                                     S"neutral"
#define _SQL_4_ASSEMBLY_CULTURE_T                                                                 TEXT("neutral")
#define _PARSER_0_ASSEMBLY_IDENTITY_DEF                                                                 _parser_0,version=12.4.56.0,culture=neutral
#define _PARSER_0_ASSEMBLY_IDENTITY_DEF_A                                                              "_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_DEF_W                                                             L"_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_DEF_S                                                             S"_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("_parser_0,version=12.4.56.0,culture=neutral")
#define _PARSER_0_ASSEMBLY_IDENTITY_REF                                                                 _parser_0,version=12.4.56.0,culture=neutral
#define _PARSER_0_ASSEMBLY_IDENTITY_REF_A                                                              "_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_REF_W                                                             L"_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_REF_S                                                             S"_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("_parser_0,version=12.4.56.0,culture=neutral")
#define _PARSER_0_ASSEMBLY_IDENTITY_EXACT_REF                                                           _parser_0,version=12.4.56.0,culture=neutral
#define _PARSER_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"_parser_0,version=12.4.56.0,culture=neutral"
#define _PARSER_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("_parser_0,version=12.4.56.0,culture=neutral")
#define _PARSER_0_ASSEMBLY_NAME                                                                         _parser_0
#define _PARSER_0_ASSEMBLY_NAME_A                                                                      "_parser_0"
#define _PARSER_0_ASSEMBLY_NAME_W                                                                     L"_parser_0"
#define _PARSER_0_ASSEMBLY_NAME_S                                                                     S"_parser_0"
#define _PARSER_0_ASSEMBLY_NAME_T                                                                 TEXT("_parser_0")
#define _PARSER_0_ASSEMBLY_VERSION                                                                      12.4.56.0
#define _PARSER_0_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define _PARSER_0_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define _PARSER_0_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define _PARSER_0_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define _PARSER_0_ASSEMBLY_CULTURE                                                                      neutral
#define _PARSER_0_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define _PARSER_0_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define _PARSER_0_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define _PARSER_0_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define _WEB_0_ASSEMBLY_IDENTITY_DEF                                                                    _web_0,version=12.4.56.0,culture=neutral
#define _WEB_0_ASSEMBLY_IDENTITY_DEF_A                                                                 "_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_DEF_W                                                                L"_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_DEF_S                                                                S"_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_DEF_T                                                            TEXT("_web_0,version=12.4.56.0,culture=neutral")
#define _WEB_0_ASSEMBLY_IDENTITY_REF                                                                    _web_0,version=12.4.56.0,culture=neutral
#define _WEB_0_ASSEMBLY_IDENTITY_REF_A                                                                 "_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_REF_W                                                                L"_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_REF_S                                                                S"_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_REF_T                                                            TEXT("_web_0,version=12.4.56.0,culture=neutral")
#define _WEB_0_ASSEMBLY_IDENTITY_EXACT_REF                                                              _web_0,version=12.4.56.0,culture=neutral
#define _WEB_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                           "_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                          L"_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                          S"_web_0,version=12.4.56.0,culture=neutral"
#define _WEB_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                                      TEXT("_web_0,version=12.4.56.0,culture=neutral")
#define _WEB_0_ASSEMBLY_NAME                                                                            _web_0
#define _WEB_0_ASSEMBLY_NAME_A                                                                         "_web_0"
#define _WEB_0_ASSEMBLY_NAME_W                                                                        L"_web_0"
#define _WEB_0_ASSEMBLY_NAME_S                                                                        S"_web_0"
#define _WEB_0_ASSEMBLY_NAME_T                                                                    TEXT("_web_0")
#define _WEB_0_ASSEMBLY_VERSION                                                                         12.4.56.0
#define _WEB_0_ASSEMBLY_VERSION_A                                                                      "12.4.56.0"
#define _WEB_0_ASSEMBLY_VERSION_W                                                                     L"12.4.56.0"
#define _WEB_0_ASSEMBLY_VERSION_S                                                                     S"12.4.56.0"
#define _WEB_0_ASSEMBLY_VERSION_T                                                                 TEXT("12.4.56.0")
#define _WEB_0_ASSEMBLY_CULTURE                                                                         neutral
#define _WEB_0_ASSEMBLY_CULTURE_A                                                                      "neutral"
#define _WEB_0_ASSEMBLY_CULTURE_W                                                                     L"neutral"
#define _WEB_0_ASSEMBLY_CULTURE_S                                                                     S"neutral"
#define _WEB_0_ASSEMBLY_CULTURE_T                                                                 TEXT("neutral")
#define _PSSTATS_0_ASSEMBLY_IDENTITY_DEF                                                                _psstats_0,version=12.4.56.0,culture=neutral
#define _PSSTATS_0_ASSEMBLY_IDENTITY_DEF_A                                                             "_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_DEF_W                                                            L"_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_DEF_S                                                            S"_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_psstats_0,version=12.4.56.0,culture=neutral")
#define _PSSTATS_0_ASSEMBLY_IDENTITY_REF                                                                _psstats_0,version=12.4.56.0,culture=neutral
#define _PSSTATS_0_ASSEMBLY_IDENTITY_REF_A                                                             "_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_REF_W                                                            L"_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_REF_S                                                            S"_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_psstats_0,version=12.4.56.0,culture=neutral")
#define _PSSTATS_0_ASSEMBLY_IDENTITY_EXACT_REF                                                          _psstats_0,version=12.4.56.0,culture=neutral
#define _PSSTATS_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_psstats_0,version=12.4.56.0,culture=neutral"
#define _PSSTATS_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_psstats_0,version=12.4.56.0,culture=neutral")
#define _PSSTATS_0_ASSEMBLY_NAME                                                                        _psstats_0
#define _PSSTATS_0_ASSEMBLY_NAME_A                                                                     "_psstats_0"
#define _PSSTATS_0_ASSEMBLY_NAME_W                                                                    L"_psstats_0"
#define _PSSTATS_0_ASSEMBLY_NAME_S                                                                    S"_psstats_0"
#define _PSSTATS_0_ASSEMBLY_NAME_T                                                                TEXT("_psstats_0")
#define _PSSTATS_0_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _PSSTATS_0_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _PSSTATS_0_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _PSSTATS_0_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _PSSTATS_0_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _PSSTATS_0_ASSEMBLY_CULTURE                                                                     neutral
#define _PSSTATS_0_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _PSSTATS_0_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _PSSTATS_0_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _PSSTATS_0_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define GENECOMMON_ASSEMBLY_IDENTITY_DEF                                                                genecommon,version=12.4.56.0,culture=neutral
#define GENECOMMON_ASSEMBLY_IDENTITY_DEF_A                                                             "genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_DEF_W                                                            L"genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_DEF_S                                                            S"genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("genecommon,version=12.4.56.0,culture=neutral")
#define GENECOMMON_ASSEMBLY_IDENTITY_REF                                                                genecommon,version=12.4.56.0,culture=neutral
#define GENECOMMON_ASSEMBLY_IDENTITY_REF_A                                                             "genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_REF_W                                                            L"genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_REF_S                                                            S"genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("genecommon,version=12.4.56.0,culture=neutral")
#define GENECOMMON_ASSEMBLY_IDENTITY_EXACT_REF                                                          genecommon,version=12.4.56.0,culture=neutral
#define GENECOMMON_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"genecommon,version=12.4.56.0,culture=neutral"
#define GENECOMMON_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("genecommon,version=12.4.56.0,culture=neutral")
#define GENECOMMON_ASSEMBLY_NAME                                                                        genecommon
#define GENECOMMON_ASSEMBLY_NAME_A                                                                     "genecommon"
#define GENECOMMON_ASSEMBLY_NAME_W                                                                    L"genecommon"
#define GENECOMMON_ASSEMBLY_NAME_S                                                                    S"genecommon"
#define GENECOMMON_ASSEMBLY_NAME_T                                                                TEXT("genecommon")
#define GENECOMMON_ASSEMBLY_VERSION                                                                     12.4.56.0
#define GENECOMMON_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define GENECOMMON_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define GENECOMMON_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define GENECOMMON_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define GENECOMMON_ASSEMBLY_CULTURE                                                                     neutral
#define GENECOMMON_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define GENECOMMON_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define GENECOMMON_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define GENECOMMON_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define DBACCESSOR_ASSEMBLY_IDENTITY_DEF                                                                dbaccessor,version=12.4.56.0,culture=neutral
#define DBACCESSOR_ASSEMBLY_IDENTITY_DEF_A                                                             "dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_DEF_W                                                            L"dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_DEF_S                                                            S"dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("dbaccessor,version=12.4.56.0,culture=neutral")
#define DBACCESSOR_ASSEMBLY_IDENTITY_REF                                                                dbaccessor,version=12.4.56.0,culture=neutral
#define DBACCESSOR_ASSEMBLY_IDENTITY_REF_A                                                             "dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_REF_W                                                            L"dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_REF_S                                                            S"dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("dbaccessor,version=12.4.56.0,culture=neutral")
#define DBACCESSOR_ASSEMBLY_IDENTITY_EXACT_REF                                                          dbaccessor,version=12.4.56.0,culture=neutral
#define DBACCESSOR_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"dbaccessor,version=12.4.56.0,culture=neutral"
#define DBACCESSOR_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("dbaccessor,version=12.4.56.0,culture=neutral")
#define DBACCESSOR_ASSEMBLY_NAME                                                                        dbaccessor
#define DBACCESSOR_ASSEMBLY_NAME_A                                                                     "dbaccessor"
#define DBACCESSOR_ASSEMBLY_NAME_W                                                                    L"dbaccessor"
#define DBACCESSOR_ASSEMBLY_NAME_S                                                                    S"dbaccessor"
#define DBACCESSOR_ASSEMBLY_NAME_T                                                                TEXT("dbaccessor")
#define DBACCESSOR_ASSEMBLY_VERSION                                                                     12.4.56.0
#define DBACCESSOR_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define DBACCESSOR_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define DBACCESSOR_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define DBACCESSOR_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define DBACCESSOR_ASSEMBLY_CULTURE                                                                     neutral
#define DBACCESSOR_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define DBACCESSOR_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define DBACCESSOR_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define DBACCESSOR_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define GENEADMIN_ASSEMBLY_IDENTITY_DEF                                                                 geneadmin,version=12.4.56.0,culture=neutral
#define GENEADMIN_ASSEMBLY_IDENTITY_DEF_A                                                              "geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_DEF_W                                                             L"geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_DEF_S                                                             S"geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("geneadmin,version=12.4.56.0,culture=neutral")
#define GENEADMIN_ASSEMBLY_IDENTITY_REF                                                                 geneadmin,version=12.4.56.0,culture=neutral
#define GENEADMIN_ASSEMBLY_IDENTITY_REF_A                                                              "geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_REF_W                                                             L"geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_REF_S                                                             S"geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("geneadmin,version=12.4.56.0,culture=neutral")
#define GENEADMIN_ASSEMBLY_IDENTITY_EXACT_REF                                                           geneadmin,version=12.4.56.0,culture=neutral
#define GENEADMIN_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"geneadmin,version=12.4.56.0,culture=neutral"
#define GENEADMIN_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("geneadmin,version=12.4.56.0,culture=neutral")
#define GENEADMIN_ASSEMBLY_NAME                                                                         geneadmin
#define GENEADMIN_ASSEMBLY_NAME_A                                                                      "geneadmin"
#define GENEADMIN_ASSEMBLY_NAME_W                                                                     L"geneadmin"
#define GENEADMIN_ASSEMBLY_NAME_S                                                                     S"geneadmin"
#define GENEADMIN_ASSEMBLY_NAME_T                                                                 TEXT("geneadmin")
#define GENEADMIN_ASSEMBLY_VERSION                                                                      12.4.56.0
#define GENEADMIN_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define GENEADMIN_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define GENEADMIN_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define GENEADMIN_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define GENEADMIN_ASSEMBLY_CULTURE                                                                      neutral
#define GENEADMIN_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define GENEADMIN_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define GENEADMIN_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define GENEADMIN_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define GENEQUERY_ASSEMBLY_IDENTITY_DEF                                                                 genequery,version=12.4.56.0,culture=neutral
#define GENEQUERY_ASSEMBLY_IDENTITY_DEF_A                                                              "genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_DEF_W                                                             L"genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_DEF_S                                                             S"genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("genequery,version=12.4.56.0,culture=neutral")
#define GENEQUERY_ASSEMBLY_IDENTITY_REF                                                                 genequery,version=12.4.56.0,culture=neutral
#define GENEQUERY_ASSEMBLY_IDENTITY_REF_A                                                              "genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_REF_W                                                             L"genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_REF_S                                                             S"genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("genequery,version=12.4.56.0,culture=neutral")
#define GENEQUERY_ASSEMBLY_IDENTITY_EXACT_REF                                                           genequery,version=12.4.56.0,culture=neutral
#define GENEQUERY_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"genequery,version=12.4.56.0,culture=neutral"
#define GENEQUERY_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("genequery,version=12.4.56.0,culture=neutral")
#define GENEQUERY_ASSEMBLY_NAME                                                                         genequery
#define GENEQUERY_ASSEMBLY_NAME_A                                                                      "genequery"
#define GENEQUERY_ASSEMBLY_NAME_W                                                                     L"genequery"
#define GENEQUERY_ASSEMBLY_NAME_S                                                                     S"genequery"
#define GENEQUERY_ASSEMBLY_NAME_T                                                                 TEXT("genequery")
#define GENEQUERY_ASSEMBLY_VERSION                                                                      12.4.56.0
#define GENEQUERY_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define GENEQUERY_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define GENEQUERY_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define GENEQUERY_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define GENEQUERY_ASSEMBLY_CULTURE                                                                      neutral
#define GENEQUERY_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define GENEQUERY_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define GENEQUERY_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define GENEQUERY_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define GENEPARSER_ASSEMBLY_IDENTITY_DEF                                                                geneparser,version=12.4.56.0,culture=neutral
#define GENEPARSER_ASSEMBLY_IDENTITY_DEF_A                                                             "geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_DEF_W                                                            L"geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_DEF_S                                                            S"geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("geneparser,version=12.4.56.0,culture=neutral")
#define GENEPARSER_ASSEMBLY_IDENTITY_REF                                                                geneparser,version=12.4.56.0,culture=neutral
#define GENEPARSER_ASSEMBLY_IDENTITY_REF_A                                                             "geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_REF_W                                                            L"geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_REF_S                                                            S"geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("geneparser,version=12.4.56.0,culture=neutral")
#define GENEPARSER_ASSEMBLY_IDENTITY_EXACT_REF                                                          geneparser,version=12.4.56.0,culture=neutral
#define GENEPARSER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"geneparser,version=12.4.56.0,culture=neutral"
#define GENEPARSER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("geneparser,version=12.4.56.0,culture=neutral")
#define GENEPARSER_ASSEMBLY_NAME                                                                        geneparser
#define GENEPARSER_ASSEMBLY_NAME_A                                                                     "geneparser"
#define GENEPARSER_ASSEMBLY_NAME_W                                                                    L"geneparser"
#define GENEPARSER_ASSEMBLY_NAME_S                                                                    S"geneparser"
#define GENEPARSER_ASSEMBLY_NAME_T                                                                TEXT("geneparser")
#define GENEPARSER_ASSEMBLY_VERSION                                                                     12.4.56.0
#define GENEPARSER_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define GENEPARSER_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define GENEPARSER_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define GENEPARSER_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define GENEPARSER_ASSEMBLY_CULTURE                                                                     neutral
#define GENEPARSER_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define GENEPARSER_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define GENEPARSER_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define GENEPARSER_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_DEF                                                             _mailscript_1,version=12.4.56.0,culture=neutral
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_DEF_A                                                          "_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_DEF_W                                                         L"_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_DEF_S                                                         S"_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("_mailscript_1,version=12.4.56.0,culture=neutral")
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_REF                                                             _mailscript_1,version=12.4.56.0,culture=neutral
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_REF_A                                                          "_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_REF_W                                                         L"_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_REF_S                                                         S"_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("_mailscript_1,version=12.4.56.0,culture=neutral")
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_EXACT_REF                                                       _mailscript_1,version=12.4.56.0,culture=neutral
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"_mailscript_1,version=12.4.56.0,culture=neutral"
#define _MAILSCRIPT_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("_mailscript_1,version=12.4.56.0,culture=neutral")
#define _MAILSCRIPT_1_ASSEMBLY_NAME                                                                     _mailscript_1
#define _MAILSCRIPT_1_ASSEMBLY_NAME_A                                                                  "_mailscript_1"
#define _MAILSCRIPT_1_ASSEMBLY_NAME_W                                                                 L"_mailscript_1"
#define _MAILSCRIPT_1_ASSEMBLY_NAME_S                                                                 S"_mailscript_1"
#define _MAILSCRIPT_1_ASSEMBLY_NAME_T                                                             TEXT("_mailscript_1")
#define _MAILSCRIPT_1_ASSEMBLY_VERSION                                                                  12.4.56.0
#define _MAILSCRIPT_1_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define _MAILSCRIPT_1_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define _MAILSCRIPT_1_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define _MAILSCRIPT_1_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define _MAILSCRIPT_1_ASSEMBLY_CULTURE                                                                  neutral
#define _MAILSCRIPT_1_ASSEMBLY_CULTURE_A                                                               "neutral"
#define _MAILSCRIPT_1_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define _MAILSCRIPT_1_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define _MAILSCRIPT_1_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_DEF                                                            machinebantest,version=12.4.56.0,culture=neutral
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_DEF_A                                                         "machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_DEF_W                                                        L"machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_DEF_S                                                        S"machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("machinebantest,version=12.4.56.0,culture=neutral")
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_REF                                                            machinebantest,version=12.4.56.0,culture=neutral
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_REF_A                                                         "machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_REF_W                                                        L"machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_REF_S                                                        S"machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("machinebantest,version=12.4.56.0,culture=neutral")
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                      machinebantest,version=12.4.56.0,culture=neutral
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"machinebantest,version=12.4.56.0,culture=neutral"
#define MACHINEBANTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("machinebantest,version=12.4.56.0,culture=neutral")
#define MACHINEBANTEST_ASSEMBLY_NAME                                                                    machinebantest
#define MACHINEBANTEST_ASSEMBLY_NAME_A                                                                 "machinebantest"
#define MACHINEBANTEST_ASSEMBLY_NAME_W                                                                L"machinebantest"
#define MACHINEBANTEST_ASSEMBLY_NAME_S                                                                S"machinebantest"
#define MACHINEBANTEST_ASSEMBLY_NAME_T                                                            TEXT("machinebantest")
#define MACHINEBANTEST_ASSEMBLY_VERSION                                                                 12.4.56.0
#define MACHINEBANTEST_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define MACHINEBANTEST_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define MACHINEBANTEST_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define MACHINEBANTEST_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define MACHINEBANTEST_ASSEMBLY_CULTURE                                                                 neutral
#define MACHINEBANTEST_ASSEMBLY_CULTURE_A                                                              "neutral"
#define MACHINEBANTEST_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define MACHINEBANTEST_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define MACHINEBANTEST_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_DEF                                                         machinehelpertest,version=12.4.56.0,culture=neutral
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_DEF_A                                                      "machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_DEF_W                                                     L"machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_DEF_S                                                     S"machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("machinehelpertest,version=12.4.56.0,culture=neutral")
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_REF                                                         machinehelpertest,version=12.4.56.0,culture=neutral
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_REF_A                                                      "machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_REF_W                                                     L"machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_REF_S                                                     S"machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("machinehelpertest,version=12.4.56.0,culture=neutral")
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                   machinehelpertest,version=12.4.56.0,culture=neutral
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"machinehelpertest,version=12.4.56.0,culture=neutral"
#define MACHINEHELPERTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("machinehelpertest,version=12.4.56.0,culture=neutral")
#define MACHINEHELPERTEST_ASSEMBLY_NAME                                                                 machinehelpertest
#define MACHINEHELPERTEST_ASSEMBLY_NAME_A                                                              "machinehelpertest"
#define MACHINEHELPERTEST_ASSEMBLY_NAME_W                                                             L"machinehelpertest"
#define MACHINEHELPERTEST_ASSEMBLY_NAME_S                                                             S"machinehelpertest"
#define MACHINEHELPERTEST_ASSEMBLY_NAME_T                                                         TEXT("machinehelpertest")
#define MACHINEHELPERTEST_ASSEMBLY_VERSION                                                              12.4.56.0
#define MACHINEHELPERTEST_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define MACHINEHELPERTEST_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define MACHINEHELPERTEST_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define MACHINEHELPERTEST_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define MACHINEHELPERTEST_ASSEMBLY_CULTURE                                                              neutral
#define MACHINEHELPERTEST_ASSEMBLY_CULTURE_A                                                           "neutral"
#define MACHINEHELPERTEST_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define MACHINEHELPERTEST_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define MACHINEHELPERTEST_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define _CORE_4_ASSEMBLY_IDENTITY_DEF                                                                   _core_4,version=12.4.56.0,culture=neutral
#define _CORE_4_ASSEMBLY_IDENTITY_DEF_A                                                                "_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_DEF_W                                                               L"_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_DEF_S                                                               S"_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("_core_4,version=12.4.56.0,culture=neutral")
#define _CORE_4_ASSEMBLY_IDENTITY_REF                                                                   _core_4,version=12.4.56.0,culture=neutral
#define _CORE_4_ASSEMBLY_IDENTITY_REF_A                                                                "_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_REF_W                                                               L"_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_REF_S                                                               S"_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("_core_4,version=12.4.56.0,culture=neutral")
#define _CORE_4_ASSEMBLY_IDENTITY_EXACT_REF                                                             _core_4,version=12.4.56.0,culture=neutral
#define _CORE_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"_core_4,version=12.4.56.0,culture=neutral"
#define _CORE_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("_core_4,version=12.4.56.0,culture=neutral")
#define _CORE_4_ASSEMBLY_NAME                                                                           _core_4
#define _CORE_4_ASSEMBLY_NAME_A                                                                        "_core_4"
#define _CORE_4_ASSEMBLY_NAME_W                                                                       L"_core_4"
#define _CORE_4_ASSEMBLY_NAME_S                                                                       S"_core_4"
#define _CORE_4_ASSEMBLY_NAME_T                                                                   TEXT("_core_4")
#define _CORE_4_ASSEMBLY_VERSION                                                                        12.4.56.0
#define _CORE_4_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define _CORE_4_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define _CORE_4_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define _CORE_4_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define _CORE_4_ASSEMBLY_CULTURE                                                                        neutral
#define _CORE_4_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define _CORE_4_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define _CORE_4_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define _CORE_4_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_DEF                                              xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_A                                           "xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_W                                          L"xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_S                                          S"xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_T                                      TEXT("xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_REF                                              xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_REF_A                                           "xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_REF_W                                          L"xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_REF_S                                          S"xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_REF_T                                      TEXT("xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF                                        xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                     "xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                    L"xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                    S"xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                TEXT("xonline.tools.sqlrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_NAME                                                      xonline.tools.sqlrunner.test
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_NAME_A                                                   "xonline.tools.sqlrunner.test"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_NAME_W                                                  L"xonline.tools.sqlrunner.test"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_NAME_S                                                  S"xonline.tools.sqlrunner.test"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_NAME_T                                              TEXT("xonline.tools.sqlrunner.test")
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_VERSION                                                   12.4.56.0
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_VERSION_A                                                "12.4.56.0"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_VERSION_W                                               L"12.4.56.0"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_VERSION_S                                               S"12.4.56.0"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_VERSION_T                                           TEXT("12.4.56.0")
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_CULTURE                                                   neutral
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_CULTURE_A                                                "neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_CULTURE_W                                               L"neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_CULTURE_S                                               S"neutral"
#define XONLINE_TOOLS_SQLRUNNER_TEST_ASSEMBLY_CULTURE_T                                           TEXT("neutral")
#define REGCLIENT_ASSEMBLY_IDENTITY_DEF                                                                 regclient,version=12.4.56.0,culture=neutral
#define REGCLIENT_ASSEMBLY_IDENTITY_DEF_A                                                              "regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_DEF_W                                                             L"regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_DEF_S                                                             S"regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("regclient,version=12.4.56.0,culture=neutral")
#define REGCLIENT_ASSEMBLY_IDENTITY_REF                                                                 regclient,version=12.4.56.0,culture=neutral
#define REGCLIENT_ASSEMBLY_IDENTITY_REF_A                                                              "regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_REF_W                                                             L"regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_REF_S                                                             S"regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("regclient,version=12.4.56.0,culture=neutral")
#define REGCLIENT_ASSEMBLY_IDENTITY_EXACT_REF                                                           regclient,version=12.4.56.0,culture=neutral
#define REGCLIENT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"regclient,version=12.4.56.0,culture=neutral"
#define REGCLIENT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("regclient,version=12.4.56.0,culture=neutral")
#define REGCLIENT_ASSEMBLY_NAME                                                                         regclient
#define REGCLIENT_ASSEMBLY_NAME_A                                                                      "regclient"
#define REGCLIENT_ASSEMBLY_NAME_W                                                                     L"regclient"
#define REGCLIENT_ASSEMBLY_NAME_S                                                                     S"regclient"
#define REGCLIENT_ASSEMBLY_NAME_T                                                                 TEXT("regclient")
#define REGCLIENT_ASSEMBLY_VERSION                                                                      12.4.56.0
#define REGCLIENT_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define REGCLIENT_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define REGCLIENT_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define REGCLIENT_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define REGCLIENT_ASSEMBLY_CULTURE                                                                      neutral
#define REGCLIENT_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define REGCLIENT_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define REGCLIENT_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define REGCLIENT_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_DEF                                                              regclientsvc,version=12.4.56.0,culture=neutral
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_DEF_A                                                           "regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_DEF_W                                                          L"regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_DEF_S                                                          S"regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("regclientsvc,version=12.4.56.0,culture=neutral")
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_REF                                                              regclientsvc,version=12.4.56.0,culture=neutral
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_REF_A                                                           "regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_REF_W                                                          L"regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_REF_S                                                          S"regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("regclientsvc,version=12.4.56.0,culture=neutral")
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_EXACT_REF                                                        regclientsvc,version=12.4.56.0,culture=neutral
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"regclientsvc,version=12.4.56.0,culture=neutral"
#define REGCLIENTSVC_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("regclientsvc,version=12.4.56.0,culture=neutral")
#define REGCLIENTSVC_ASSEMBLY_NAME                                                                      regclientsvc
#define REGCLIENTSVC_ASSEMBLY_NAME_A                                                                   "regclientsvc"
#define REGCLIENTSVC_ASSEMBLY_NAME_W                                                                  L"regclientsvc"
#define REGCLIENTSVC_ASSEMBLY_NAME_S                                                                  S"regclientsvc"
#define REGCLIENTSVC_ASSEMBLY_NAME_T                                                              TEXT("regclientsvc")
#define REGCLIENTSVC_ASSEMBLY_VERSION                                                                   12.4.56.0
#define REGCLIENTSVC_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define REGCLIENTSVC_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define REGCLIENTSVC_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define REGCLIENTSVC_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define REGCLIENTSVC_ASSEMBLY_CULTURE                                                                   neutral
#define REGCLIENTSVC_ASSEMBLY_CULTURE_A                                                                "neutral"
#define REGCLIENTSVC_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define REGCLIENTSVC_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define REGCLIENTSVC_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define SHA1_ASSEMBLY_IDENTITY_DEF                                                                      sha1,version=12.4.56.0,culture=neutral
#define SHA1_ASSEMBLY_IDENTITY_DEF_A                                                                   "sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_DEF_W                                                                  L"sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_DEF_S                                                                  S"sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_DEF_T                                                              TEXT("sha1,version=12.4.56.0,culture=neutral")
#define SHA1_ASSEMBLY_IDENTITY_REF                                                                      sha1,version=12.4.56.0,culture=neutral
#define SHA1_ASSEMBLY_IDENTITY_REF_A                                                                   "sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_REF_W                                                                  L"sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_REF_S                                                                  S"sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_REF_T                                                              TEXT("sha1,version=12.4.56.0,culture=neutral")
#define SHA1_ASSEMBLY_IDENTITY_EXACT_REF                                                                sha1,version=12.4.56.0,culture=neutral
#define SHA1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                             "sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                            L"sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                            S"sha1,version=12.4.56.0,culture=neutral"
#define SHA1_ASSEMBLY_IDENTITY_EXACT_REF_T                                                        TEXT("sha1,version=12.4.56.0,culture=neutral")
#define SHA1_ASSEMBLY_NAME                                                                              sha1
#define SHA1_ASSEMBLY_NAME_A                                                                           "sha1"
#define SHA1_ASSEMBLY_NAME_W                                                                          L"sha1"
#define SHA1_ASSEMBLY_NAME_S                                                                          S"sha1"
#define SHA1_ASSEMBLY_NAME_T                                                                      TEXT("sha1")
#define SHA1_ASSEMBLY_VERSION                                                                           12.4.56.0
#define SHA1_ASSEMBLY_VERSION_A                                                                        "12.4.56.0"
#define SHA1_ASSEMBLY_VERSION_W                                                                       L"12.4.56.0"
#define SHA1_ASSEMBLY_VERSION_S                                                                       S"12.4.56.0"
#define SHA1_ASSEMBLY_VERSION_T                                                                   TEXT("12.4.56.0")
#define SHA1_ASSEMBLY_CULTURE                                                                           neutral
#define SHA1_ASSEMBLY_CULTURE_A                                                                        "neutral"
#define SHA1_ASSEMBLY_CULTURE_W                                                                       L"neutral"
#define SHA1_ASSEMBLY_CULTURE_S                                                                       S"neutral"
#define SHA1_ASSEMBLY_CULTURE_T                                                                   TEXT("neutral")
#define _REPORTS_1_ASSEMBLY_IDENTITY_DEF                                                                _reports_1,version=12.4.56.0,culture=neutral
#define _REPORTS_1_ASSEMBLY_IDENTITY_DEF_A                                                             "_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_DEF_W                                                            L"_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_DEF_S                                                            S"_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_reports_1,version=12.4.56.0,culture=neutral")
#define _REPORTS_1_ASSEMBLY_IDENTITY_REF                                                                _reports_1,version=12.4.56.0,culture=neutral
#define _REPORTS_1_ASSEMBLY_IDENTITY_REF_A                                                             "_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_REF_W                                                            L"_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_REF_S                                                            S"_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_reports_1,version=12.4.56.0,culture=neutral")
#define _REPORTS_1_ASSEMBLY_IDENTITY_EXACT_REF                                                          _reports_1,version=12.4.56.0,culture=neutral
#define _REPORTS_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_reports_1,version=12.4.56.0,culture=neutral"
#define _REPORTS_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_reports_1,version=12.4.56.0,culture=neutral")
#define _REPORTS_1_ASSEMBLY_NAME                                                                        _reports_1
#define _REPORTS_1_ASSEMBLY_NAME_A                                                                     "_reports_1"
#define _REPORTS_1_ASSEMBLY_NAME_W                                                                    L"_reports_1"
#define _REPORTS_1_ASSEMBLY_NAME_S                                                                    S"_reports_1"
#define _REPORTS_1_ASSEMBLY_NAME_T                                                                TEXT("_reports_1")
#define _REPORTS_1_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _REPORTS_1_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _REPORTS_1_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _REPORTS_1_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _REPORTS_1_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _REPORTS_1_ASSEMBLY_CULTURE                                                                     neutral
#define _REPORTS_1_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _REPORTS_1_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _REPORTS_1_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _REPORTS_1_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define XLREPORTMGR_ASSEMBLY_IDENTITY_DEF                                                               xlreportmgr,version=12.4.56.0,culture=neutral
#define XLREPORTMGR_ASSEMBLY_IDENTITY_DEF_A                                                            "xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_DEF_W                                                           L"xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_DEF_S                                                           S"xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("xlreportmgr,version=12.4.56.0,culture=neutral")
#define XLREPORTMGR_ASSEMBLY_IDENTITY_REF                                                               xlreportmgr,version=12.4.56.0,culture=neutral
#define XLREPORTMGR_ASSEMBLY_IDENTITY_REF_A                                                            "xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_REF_W                                                           L"xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_REF_S                                                           S"xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("xlreportmgr,version=12.4.56.0,culture=neutral")
#define XLREPORTMGR_ASSEMBLY_IDENTITY_EXACT_REF                                                         xlreportmgr,version=12.4.56.0,culture=neutral
#define XLREPORTMGR_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"xlreportmgr,version=12.4.56.0,culture=neutral"
#define XLREPORTMGR_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("xlreportmgr,version=12.4.56.0,culture=neutral")
#define XLREPORTMGR_ASSEMBLY_NAME                                                                       xlreportmgr
#define XLREPORTMGR_ASSEMBLY_NAME_A                                                                    "xlreportmgr"
#define XLREPORTMGR_ASSEMBLY_NAME_W                                                                   L"xlreportmgr"
#define XLREPORTMGR_ASSEMBLY_NAME_S                                                                   S"xlreportmgr"
#define XLREPORTMGR_ASSEMBLY_NAME_T                                                               TEXT("xlreportmgr")
#define XLREPORTMGR_ASSEMBLY_VERSION                                                                    12.4.56.0
#define XLREPORTMGR_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define XLREPORTMGR_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define XLREPORTMGR_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define XLREPORTMGR_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define XLREPORTMGR_ASSEMBLY_CULTURE                                                                    neutral
#define XLREPORTMGR_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define XLREPORTMGR_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define XLREPORTMGR_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define XLREPORTMGR_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_DEF                                                         olappartitiontool,version=12.4.56.0,culture=neutral
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_DEF_A                                                      "olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_DEF_W                                                     L"olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_DEF_S                                                     S"olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("olappartitiontool,version=12.4.56.0,culture=neutral")
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_REF                                                         olappartitiontool,version=12.4.56.0,culture=neutral
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_REF_A                                                      "olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_REF_W                                                     L"olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_REF_S                                                     S"olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("olappartitiontool,version=12.4.56.0,culture=neutral")
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_EXACT_REF                                                   olappartitiontool,version=12.4.56.0,culture=neutral
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"olappartitiontool,version=12.4.56.0,culture=neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("olappartitiontool,version=12.4.56.0,culture=neutral")
#define OLAPPARTITIONTOOL_ASSEMBLY_NAME                                                                 olappartitiontool
#define OLAPPARTITIONTOOL_ASSEMBLY_NAME_A                                                              "olappartitiontool"
#define OLAPPARTITIONTOOL_ASSEMBLY_NAME_W                                                             L"olappartitiontool"
#define OLAPPARTITIONTOOL_ASSEMBLY_NAME_S                                                             S"olappartitiontool"
#define OLAPPARTITIONTOOL_ASSEMBLY_NAME_T                                                         TEXT("olappartitiontool")
#define OLAPPARTITIONTOOL_ASSEMBLY_VERSION                                                              12.4.56.0
#define OLAPPARTITIONTOOL_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define OLAPPARTITIONTOOL_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define OLAPPARTITIONTOOL_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define OLAPPARTITIONTOOL_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define OLAPPARTITIONTOOL_ASSEMBLY_CULTURE                                                              neutral
#define OLAPPARTITIONTOOL_ASSEMBLY_CULTURE_A                                                           "neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define OLAPPARTITIONTOOL_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_DEF                                                            _corpscripts_2,version=12.4.56.0,culture=neutral
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_DEF_A                                                         "_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_DEF_W                                                        L"_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_DEF_S                                                        S"_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_corpscripts_2,version=12.4.56.0,culture=neutral")
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_REF                                                            _corpscripts_2,version=12.4.56.0,culture=neutral
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_REF_A                                                         "_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_REF_W                                                        L"_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_REF_S                                                        S"_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_corpscripts_2,version=12.4.56.0,culture=neutral")
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_EXACT_REF                                                      _corpscripts_2,version=12.4.56.0,culture=neutral
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_corpscripts_2,version=12.4.56.0,culture=neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_corpscripts_2,version=12.4.56.0,culture=neutral")
#define _CORPSCRIPTS_2_ASSEMBLY_NAME                                                                    _corpscripts_2
#define _CORPSCRIPTS_2_ASSEMBLY_NAME_A                                                                 "_corpscripts_2"
#define _CORPSCRIPTS_2_ASSEMBLY_NAME_W                                                                L"_corpscripts_2"
#define _CORPSCRIPTS_2_ASSEMBLY_NAME_S                                                                S"_corpscripts_2"
#define _CORPSCRIPTS_2_ASSEMBLY_NAME_T                                                            TEXT("_corpscripts_2")
#define _CORPSCRIPTS_2_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _CORPSCRIPTS_2_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _CORPSCRIPTS_2_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _CORPSCRIPTS_2_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _CORPSCRIPTS_2_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _CORPSCRIPTS_2_ASSEMBLY_CULTURE                                                                 neutral
#define _CORPSCRIPTS_2_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _CORPSCRIPTS_2_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_DEF                                                            _prodscripts_3,version=12.4.56.0,culture=neutral
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_DEF_A                                                         "_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_DEF_W                                                        L"_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_DEF_S                                                        S"_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_prodscripts_3,version=12.4.56.0,culture=neutral")
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_REF                                                            _prodscripts_3,version=12.4.56.0,culture=neutral
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_REF_A                                                         "_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_REF_W                                                        L"_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_REF_S                                                        S"_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_prodscripts_3,version=12.4.56.0,culture=neutral")
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_EXACT_REF                                                      _prodscripts_3,version=12.4.56.0,culture=neutral
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_prodscripts_3,version=12.4.56.0,culture=neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_prodscripts_3,version=12.4.56.0,culture=neutral")
#define _PRODSCRIPTS_3_ASSEMBLY_NAME                                                                    _prodscripts_3
#define _PRODSCRIPTS_3_ASSEMBLY_NAME_A                                                                 "_prodscripts_3"
#define _PRODSCRIPTS_3_ASSEMBLY_NAME_W                                                                L"_prodscripts_3"
#define _PRODSCRIPTS_3_ASSEMBLY_NAME_S                                                                S"_prodscripts_3"
#define _PRODSCRIPTS_3_ASSEMBLY_NAME_T                                                            TEXT("_prodscripts_3")
#define _PRODSCRIPTS_3_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _PRODSCRIPTS_3_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _PRODSCRIPTS_3_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _PRODSCRIPTS_3_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _PRODSCRIPTS_3_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _PRODSCRIPTS_3_ASSEMBLY_CULTURE                                                                 neutral
#define _PRODSCRIPTS_3_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _PRODSCRIPTS_3_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define _CORE_3_ASSEMBLY_IDENTITY_DEF                                                                   _core_3,version=12.4.56.0,culture=neutral
#define _CORE_3_ASSEMBLY_IDENTITY_DEF_A                                                                "_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_DEF_W                                                               L"_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_DEF_S                                                               S"_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("_core_3,version=12.4.56.0,culture=neutral")
#define _CORE_3_ASSEMBLY_IDENTITY_REF                                                                   _core_3,version=12.4.56.0,culture=neutral
#define _CORE_3_ASSEMBLY_IDENTITY_REF_A                                                                "_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_REF_W                                                               L"_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_REF_S                                                               S"_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("_core_3,version=12.4.56.0,culture=neutral")
#define _CORE_3_ASSEMBLY_IDENTITY_EXACT_REF                                                             _core_3,version=12.4.56.0,culture=neutral
#define _CORE_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"_core_3,version=12.4.56.0,culture=neutral"
#define _CORE_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("_core_3,version=12.4.56.0,culture=neutral")
#define _CORE_3_ASSEMBLY_NAME                                                                           _core_3
#define _CORE_3_ASSEMBLY_NAME_A                                                                        "_core_3"
#define _CORE_3_ASSEMBLY_NAME_W                                                                       L"_core_3"
#define _CORE_3_ASSEMBLY_NAME_S                                                                       S"_core_3"
#define _CORE_3_ASSEMBLY_NAME_T                                                                   TEXT("_core_3")
#define _CORE_3_ASSEMBLY_VERSION                                                                        12.4.56.0
#define _CORE_3_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define _CORE_3_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define _CORE_3_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define _CORE_3_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define _CORE_3_ASSEMBLY_CULTURE                                                                        neutral
#define _CORE_3_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define _CORE_3_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define _CORE_3_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define _CORE_3_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define _CORE_1_ASSEMBLY_IDENTITY_DEF                                                                   _core_1,version=12.4.56.0,culture=neutral
#define _CORE_1_ASSEMBLY_IDENTITY_DEF_A                                                                "_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_DEF_W                                                               L"_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_DEF_S                                                               S"_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("_core_1,version=12.4.56.0,culture=neutral")
#define _CORE_1_ASSEMBLY_IDENTITY_REF                                                                   _core_1,version=12.4.56.0,culture=neutral
#define _CORE_1_ASSEMBLY_IDENTITY_REF_A                                                                "_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_REF_W                                                               L"_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_REF_S                                                               S"_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("_core_1,version=12.4.56.0,culture=neutral")
#define _CORE_1_ASSEMBLY_IDENTITY_EXACT_REF                                                             _core_1,version=12.4.56.0,culture=neutral
#define _CORE_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"_core_1,version=12.4.56.0,culture=neutral"
#define _CORE_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("_core_1,version=12.4.56.0,culture=neutral")
#define _CORE_1_ASSEMBLY_NAME                                                                           _core_1
#define _CORE_1_ASSEMBLY_NAME_A                                                                        "_core_1"
#define _CORE_1_ASSEMBLY_NAME_W                                                                       L"_core_1"
#define _CORE_1_ASSEMBLY_NAME_S                                                                       S"_core_1"
#define _CORE_1_ASSEMBLY_NAME_T                                                                   TEXT("_core_1")
#define _CORE_1_ASSEMBLY_VERSION                                                                        12.4.56.0
#define _CORE_1_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define _CORE_1_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define _CORE_1_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define _CORE_1_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define _CORE_1_ASSEMBLY_CULTURE                                                                        neutral
#define _CORE_1_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define _CORE_1_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define _CORE_1_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define _CORE_1_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_DEF                                          _video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_DEF_A                                       "_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_DEF_W                                      L"_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_DEF_S                                      S"_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_DEF_T                                  TEXT("_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral")
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_REF                                          _video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_REF_A                                       "_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_REF_W                                      L"_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_REF_S                                      S"_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_REF_T                                  TEXT("_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral")
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_EXACT_REF                                    _video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                 "_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                L"_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                S"_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_IDENTITY_EXACT_REF_T                            TEXT("_video_cube_firstload_purchase_3,version=12.4.56.0,culture=neutral")
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_NAME                                                  _video_cube_firstload_purchase_3
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_NAME_A                                               "_video_cube_firstload_purchase_3"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_NAME_W                                              L"_video_cube_firstload_purchase_3"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_NAME_S                                              S"_video_cube_firstload_purchase_3"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_NAME_T                                          TEXT("_video_cube_firstload_purchase_3")
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_VERSION                                               12.4.56.0
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_VERSION_A                                            "12.4.56.0"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_VERSION_W                                           L"12.4.56.0"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_VERSION_S                                           S"12.4.56.0"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_VERSION_T                                       TEXT("12.4.56.0")
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_CULTURE                                               neutral
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_CULTURE_A                                            "neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_CULTURE_W                                           L"neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_CULTURE_S                                           S"neutral"
#define _VIDEO_CUBE_FIRSTLOAD_PURCHASE_3_ASSEMBLY_CULTURE_T                                       TEXT("neutral")
#define _COMMON_4_ASSEMBLY_IDENTITY_DEF                                                                 _common_4,version=12.4.56.0,culture=neutral
#define _COMMON_4_ASSEMBLY_IDENTITY_DEF_A                                                              "_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_DEF_W                                                             L"_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_DEF_S                                                             S"_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("_common_4,version=12.4.56.0,culture=neutral")
#define _COMMON_4_ASSEMBLY_IDENTITY_REF                                                                 _common_4,version=12.4.56.0,culture=neutral
#define _COMMON_4_ASSEMBLY_IDENTITY_REF_A                                                              "_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_REF_W                                                             L"_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_REF_S                                                             S"_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("_common_4,version=12.4.56.0,culture=neutral")
#define _COMMON_4_ASSEMBLY_IDENTITY_EXACT_REF                                                           _common_4,version=12.4.56.0,culture=neutral
#define _COMMON_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"_common_4,version=12.4.56.0,culture=neutral"
#define _COMMON_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("_common_4,version=12.4.56.0,culture=neutral")
#define _COMMON_4_ASSEMBLY_NAME                                                                         _common_4
#define _COMMON_4_ASSEMBLY_NAME_A                                                                      "_common_4"
#define _COMMON_4_ASSEMBLY_NAME_W                                                                     L"_common_4"
#define _COMMON_4_ASSEMBLY_NAME_S                                                                     S"_common_4"
#define _COMMON_4_ASSEMBLY_NAME_T                                                                 TEXT("_common_4")
#define _COMMON_4_ASSEMBLY_VERSION                                                                      12.4.56.0
#define _COMMON_4_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define _COMMON_4_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define _COMMON_4_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define _COMMON_4_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define _COMMON_4_ASSEMBLY_CULTURE                                                                      neutral
#define _COMMON_4_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define _COMMON_4_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define _COMMON_4_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define _COMMON_4_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_DEF                                      microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_DEF_A                                   "microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_DEF_W                                  L"microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_DEF_S                                  S"microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_DEF_T                              TEXT("microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_REF                                      microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_REF_A                                   "microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_REF_W                                  L"microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_REF_S                                  S"microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_REF_T                              TEXT("microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_EXACT_REF                                microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_A                             "microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_W                            L"microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_S                            S"microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_T                        TEXT("microsoft.ems.tools.livetools.common,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_NAME                                              microsoft.ems.tools.livetools.common
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_NAME_A                                           "microsoft.ems.tools.livetools.common"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_NAME_W                                          L"microsoft.ems.tools.livetools.common"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_NAME_S                                          S"microsoft.ems.tools.livetools.common"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_NAME_T                                      TEXT("microsoft.ems.tools.livetools.common")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_VERSION                                           12.4.56.0
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_VERSION_A                                        "12.4.56.0"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_VERSION_W                                       L"12.4.56.0"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_VERSION_S                                       S"12.4.56.0"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_VERSION_T                                   TEXT("12.4.56.0")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_CULTURE                                           neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_CULTURE_A                                        "neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_CULTURE_W                                       L"neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_CULTURE_S                                       S"neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_COMMON_ASSEMBLY_CULTURE_T                                   TEXT("neutral")
#define LIVEMATCH_ASSEMBLY_IDENTITY_DEF                                                                 livematch,version=12.4.56.0,culture=neutral
#define LIVEMATCH_ASSEMBLY_IDENTITY_DEF_A                                                              "livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_DEF_W                                                             L"livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_DEF_S                                                             S"livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("livematch,version=12.4.56.0,culture=neutral")
#define LIVEMATCH_ASSEMBLY_IDENTITY_REF                                                                 livematch,version=12.4.56.0,culture=neutral
#define LIVEMATCH_ASSEMBLY_IDENTITY_REF_A                                                              "livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_REF_W                                                             L"livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_REF_S                                                             S"livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("livematch,version=12.4.56.0,culture=neutral")
#define LIVEMATCH_ASSEMBLY_IDENTITY_EXACT_REF                                                           livematch,version=12.4.56.0,culture=neutral
#define LIVEMATCH_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"livematch,version=12.4.56.0,culture=neutral"
#define LIVEMATCH_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("livematch,version=12.4.56.0,culture=neutral")
#define LIVEMATCH_ASSEMBLY_NAME                                                                         livematch
#define LIVEMATCH_ASSEMBLY_NAME_A                                                                      "livematch"
#define LIVEMATCH_ASSEMBLY_NAME_W                                                                     L"livematch"
#define LIVEMATCH_ASSEMBLY_NAME_S                                                                     S"livematch"
#define LIVEMATCH_ASSEMBLY_NAME_T                                                                 TEXT("livematch")
#define LIVEMATCH_ASSEMBLY_VERSION                                                                      12.4.56.0
#define LIVEMATCH_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define LIVEMATCH_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define LIVEMATCH_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define LIVEMATCH_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define LIVEMATCH_ASSEMBLY_CULTURE                                                                      neutral
#define LIVEMATCH_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define LIVEMATCH_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define LIVEMATCH_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define LIVEMATCH_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define LIVETITLE_ASSEMBLY_IDENTITY_DEF                                                                 livetitle,version=12.4.56.0,culture=neutral
#define LIVETITLE_ASSEMBLY_IDENTITY_DEF_A                                                              "livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_DEF_W                                                             L"livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_DEF_S                                                             S"livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("livetitle,version=12.4.56.0,culture=neutral")
#define LIVETITLE_ASSEMBLY_IDENTITY_REF                                                                 livetitle,version=12.4.56.0,culture=neutral
#define LIVETITLE_ASSEMBLY_IDENTITY_REF_A                                                              "livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_REF_W                                                             L"livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_REF_S                                                             S"livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("livetitle,version=12.4.56.0,culture=neutral")
#define LIVETITLE_ASSEMBLY_IDENTITY_EXACT_REF                                                           livetitle,version=12.4.56.0,culture=neutral
#define LIVETITLE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"livetitle,version=12.4.56.0,culture=neutral"
#define LIVETITLE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("livetitle,version=12.4.56.0,culture=neutral")
#define LIVETITLE_ASSEMBLY_NAME                                                                         livetitle
#define LIVETITLE_ASSEMBLY_NAME_A                                                                      "livetitle"
#define LIVETITLE_ASSEMBLY_NAME_W                                                                     L"livetitle"
#define LIVETITLE_ASSEMBLY_NAME_S                                                                     S"livetitle"
#define LIVETITLE_ASSEMBLY_NAME_T                                                                 TEXT("livetitle")
#define LIVETITLE_ASSEMBLY_VERSION                                                                      12.4.56.0
#define LIVETITLE_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define LIVETITLE_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define LIVETITLE_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define LIVETITLE_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define LIVETITLE_ASSEMBLY_CULTURE                                                                      neutral
#define LIVETITLE_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define LIVETITLE_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define LIVETITLE_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define LIVETITLE_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define LIVECONTENT_ASSEMBLY_IDENTITY_DEF                                                               livecontent,version=12.4.56.0,culture=neutral
#define LIVECONTENT_ASSEMBLY_IDENTITY_DEF_A                                                            "livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_DEF_W                                                           L"livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_DEF_S                                                           S"livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("livecontent,version=12.4.56.0,culture=neutral")
#define LIVECONTENT_ASSEMBLY_IDENTITY_REF                                                               livecontent,version=12.4.56.0,culture=neutral
#define LIVECONTENT_ASSEMBLY_IDENTITY_REF_A                                                            "livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_REF_W                                                           L"livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_REF_S                                                           S"livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("livecontent,version=12.4.56.0,culture=neutral")
#define LIVECONTENT_ASSEMBLY_IDENTITY_EXACT_REF                                                         livecontent,version=12.4.56.0,culture=neutral
#define LIVECONTENT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"livecontent,version=12.4.56.0,culture=neutral"
#define LIVECONTENT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("livecontent,version=12.4.56.0,culture=neutral")
#define LIVECONTENT_ASSEMBLY_NAME                                                                       livecontent
#define LIVECONTENT_ASSEMBLY_NAME_A                                                                    "livecontent"
#define LIVECONTENT_ASSEMBLY_NAME_W                                                                   L"livecontent"
#define LIVECONTENT_ASSEMBLY_NAME_S                                                                   S"livecontent"
#define LIVECONTENT_ASSEMBLY_NAME_T                                                               TEXT("livecontent")
#define LIVECONTENT_ASSEMBLY_VERSION                                                                    12.4.56.0
#define LIVECONTENT_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define LIVECONTENT_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define LIVECONTENT_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define LIVECONTENT_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define LIVECONTENT_ASSEMBLY_CULTURE                                                                    neutral
#define LIVECONTENT_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define LIVECONTENT_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define LIVECONTENT_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define LIVECONTENT_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define LIVEOFFER_ASSEMBLY_IDENTITY_DEF                                                                 liveoffer,version=12.4.56.0,culture=neutral
#define LIVEOFFER_ASSEMBLY_IDENTITY_DEF_A                                                              "liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_DEF_W                                                             L"liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_DEF_S                                                             S"liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("liveoffer,version=12.4.56.0,culture=neutral")
#define LIVEOFFER_ASSEMBLY_IDENTITY_REF                                                                 liveoffer,version=12.4.56.0,culture=neutral
#define LIVEOFFER_ASSEMBLY_IDENTITY_REF_A                                                              "liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_REF_W                                                             L"liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_REF_S                                                             S"liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("liveoffer,version=12.4.56.0,culture=neutral")
#define LIVEOFFER_ASSEMBLY_IDENTITY_EXACT_REF                                                           liveoffer,version=12.4.56.0,culture=neutral
#define LIVEOFFER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"liveoffer,version=12.4.56.0,culture=neutral"
#define LIVEOFFER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("liveoffer,version=12.4.56.0,culture=neutral")
#define LIVEOFFER_ASSEMBLY_NAME                                                                         liveoffer
#define LIVEOFFER_ASSEMBLY_NAME_A                                                                      "liveoffer"
#define LIVEOFFER_ASSEMBLY_NAME_W                                                                     L"liveoffer"
#define LIVEOFFER_ASSEMBLY_NAME_S                                                                     S"liveoffer"
#define LIVEOFFER_ASSEMBLY_NAME_T                                                                 TEXT("liveoffer")
#define LIVEOFFER_ASSEMBLY_VERSION                                                                      12.4.56.0
#define LIVEOFFER_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define LIVEOFFER_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define LIVEOFFER_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define LIVEOFFER_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define LIVEOFFER_ASSEMBLY_CULTURE                                                                      neutral
#define LIVEOFFER_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define LIVEOFFER_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define LIVEOFFER_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define LIVEOFFER_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define ERRPARSE_ASSEMBLY_IDENTITY_DEF                                                                  errparse,version=12.4.56.0,culture=neutral
#define ERRPARSE_ASSEMBLY_IDENTITY_DEF_A                                                               "errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_DEF_W                                                              L"errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_DEF_S                                                              S"errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("errparse,version=12.4.56.0,culture=neutral")
#define ERRPARSE_ASSEMBLY_IDENTITY_REF                                                                  errparse,version=12.4.56.0,culture=neutral
#define ERRPARSE_ASSEMBLY_IDENTITY_REF_A                                                               "errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_REF_W                                                              L"errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_REF_S                                                              S"errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("errparse,version=12.4.56.0,culture=neutral")
#define ERRPARSE_ASSEMBLY_IDENTITY_EXACT_REF                                                            errparse,version=12.4.56.0,culture=neutral
#define ERRPARSE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"errparse,version=12.4.56.0,culture=neutral"
#define ERRPARSE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("errparse,version=12.4.56.0,culture=neutral")
#define ERRPARSE_ASSEMBLY_NAME                                                                          errparse
#define ERRPARSE_ASSEMBLY_NAME_A                                                                       "errparse"
#define ERRPARSE_ASSEMBLY_NAME_W                                                                      L"errparse"
#define ERRPARSE_ASSEMBLY_NAME_S                                                                      S"errparse"
#define ERRPARSE_ASSEMBLY_NAME_T                                                                  TEXT("errparse")
#define ERRPARSE_ASSEMBLY_VERSION                                                                       12.4.56.0
#define ERRPARSE_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define ERRPARSE_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define ERRPARSE_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define ERRPARSE_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define ERRPARSE_ASSEMBLY_CULTURE                                                                       neutral
#define ERRPARSE_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define ERRPARSE_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define ERRPARSE_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define ERRPARSE_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define CONSOLEID_ASSEMBLY_IDENTITY_DEF                                                                 consoleid,version=12.4.56.0,culture=neutral
#define CONSOLEID_ASSEMBLY_IDENTITY_DEF_A                                                              "consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_DEF_W                                                             L"consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_DEF_S                                                             S"consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("consoleid,version=12.4.56.0,culture=neutral")
#define CONSOLEID_ASSEMBLY_IDENTITY_REF                                                                 consoleid,version=12.4.56.0,culture=neutral
#define CONSOLEID_ASSEMBLY_IDENTITY_REF_A                                                              "consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_REF_W                                                             L"consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_REF_S                                                             S"consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("consoleid,version=12.4.56.0,culture=neutral")
#define CONSOLEID_ASSEMBLY_IDENTITY_EXACT_REF                                                           consoleid,version=12.4.56.0,culture=neutral
#define CONSOLEID_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"consoleid,version=12.4.56.0,culture=neutral"
#define CONSOLEID_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("consoleid,version=12.4.56.0,culture=neutral")
#define CONSOLEID_ASSEMBLY_NAME                                                                         consoleid
#define CONSOLEID_ASSEMBLY_NAME_A                                                                      "consoleid"
#define CONSOLEID_ASSEMBLY_NAME_W                                                                     L"consoleid"
#define CONSOLEID_ASSEMBLY_NAME_S                                                                     S"consoleid"
#define CONSOLEID_ASSEMBLY_NAME_T                                                                 TEXT("consoleid")
#define CONSOLEID_ASSEMBLY_VERSION                                                                      12.4.56.0
#define CONSOLEID_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define CONSOLEID_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define CONSOLEID_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define CONSOLEID_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define CONSOLEID_ASSEMBLY_CULTURE                                                                      neutral
#define CONSOLEID_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define CONSOLEID_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define CONSOLEID_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define CONSOLEID_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_DEF                                                             xblconfigtest,version=12.4.56.0,culture=neutral
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_DEF_A                                                          "xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_DEF_W                                                         L"xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_DEF_S                                                         S"xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("xblconfigtest,version=12.4.56.0,culture=neutral")
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_REF                                                             xblconfigtest,version=12.4.56.0,culture=neutral
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_REF_A                                                          "xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_REF_W                                                         L"xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_REF_S                                                         S"xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("xblconfigtest,version=12.4.56.0,culture=neutral")
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                       xblconfigtest,version=12.4.56.0,culture=neutral
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"xblconfigtest,version=12.4.56.0,culture=neutral"
#define XBLCONFIGTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("xblconfigtest,version=12.4.56.0,culture=neutral")
#define XBLCONFIGTEST_ASSEMBLY_NAME                                                                     xblconfigtest
#define XBLCONFIGTEST_ASSEMBLY_NAME_A                                                                  "xblconfigtest"
#define XBLCONFIGTEST_ASSEMBLY_NAME_W                                                                 L"xblconfigtest"
#define XBLCONFIGTEST_ASSEMBLY_NAME_S                                                                 S"xblconfigtest"
#define XBLCONFIGTEST_ASSEMBLY_NAME_T                                                             TEXT("xblconfigtest")
#define XBLCONFIGTEST_ASSEMBLY_VERSION                                                                  12.4.56.0
#define XBLCONFIGTEST_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define XBLCONFIGTEST_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define XBLCONFIGTEST_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define XBLCONFIGTEST_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define XBLCONFIGTEST_ASSEMBLY_CULTURE                                                                  neutral
#define XBLCONFIGTEST_ASSEMBLY_CULTURE_A                                                               "neutral"
#define XBLCONFIGTEST_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define XBLCONFIGTEST_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define XBLCONFIGTEST_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define COMMON_3_ASSEMBLY_IDENTITY_DEF                                                                  common_3,version=12.4.56.0,culture=neutral
#define COMMON_3_ASSEMBLY_IDENTITY_DEF_A                                                               "common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_DEF_W                                                              L"common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_DEF_S                                                              S"common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("common_3,version=12.4.56.0,culture=neutral")
#define COMMON_3_ASSEMBLY_IDENTITY_REF                                                                  common_3,version=12.4.56.0,culture=neutral
#define COMMON_3_ASSEMBLY_IDENTITY_REF_A                                                               "common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_REF_W                                                              L"common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_REF_S                                                              S"common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("common_3,version=12.4.56.0,culture=neutral")
#define COMMON_3_ASSEMBLY_IDENTITY_EXACT_REF                                                            common_3,version=12.4.56.0,culture=neutral
#define COMMON_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"common_3,version=12.4.56.0,culture=neutral"
#define COMMON_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("common_3,version=12.4.56.0,culture=neutral")
#define COMMON_3_ASSEMBLY_NAME                                                                          common_3
#define COMMON_3_ASSEMBLY_NAME_A                                                                       "common_3"
#define COMMON_3_ASSEMBLY_NAME_W                                                                      L"common_3"
#define COMMON_3_ASSEMBLY_NAME_S                                                                      S"common_3"
#define COMMON_3_ASSEMBLY_NAME_T                                                                  TEXT("common_3")
#define COMMON_3_ASSEMBLY_VERSION                                                                       12.4.56.0
#define COMMON_3_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define COMMON_3_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define COMMON_3_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define COMMON_3_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define COMMON_3_ASSEMBLY_CULTURE                                                                       neutral
#define COMMON_3_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define COMMON_3_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define COMMON_3_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define COMMON_3_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define SFTP4_ASSEMBLY_IDENTITY_DEF                                                                     sftp4,version=12.4.56.0,culture=neutral
#define SFTP4_ASSEMBLY_IDENTITY_DEF_A                                                                  "sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_DEF_W                                                                 L"sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_DEF_S                                                                 S"sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_DEF_T                                                             TEXT("sftp4,version=12.4.56.0,culture=neutral")
#define SFTP4_ASSEMBLY_IDENTITY_REF                                                                     sftp4,version=12.4.56.0,culture=neutral
#define SFTP4_ASSEMBLY_IDENTITY_REF_A                                                                  "sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_REF_W                                                                 L"sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_REF_S                                                                 S"sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_REF_T                                                             TEXT("sftp4,version=12.4.56.0,culture=neutral")
#define SFTP4_ASSEMBLY_IDENTITY_EXACT_REF                                                               sftp4,version=12.4.56.0,culture=neutral
#define SFTP4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                            "sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                           L"sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                           S"sftp4,version=12.4.56.0,culture=neutral"
#define SFTP4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                       TEXT("sftp4,version=12.4.56.0,culture=neutral")
#define SFTP4_ASSEMBLY_NAME                                                                             sftp4
#define SFTP4_ASSEMBLY_NAME_A                                                                          "sftp4"
#define SFTP4_ASSEMBLY_NAME_W                                                                         L"sftp4"
#define SFTP4_ASSEMBLY_NAME_S                                                                         S"sftp4"
#define SFTP4_ASSEMBLY_NAME_T                                                                     TEXT("sftp4")
#define SFTP4_ASSEMBLY_VERSION                                                                          12.4.56.0
#define SFTP4_ASSEMBLY_VERSION_A                                                                       "12.4.56.0"
#define SFTP4_ASSEMBLY_VERSION_W                                                                      L"12.4.56.0"
#define SFTP4_ASSEMBLY_VERSION_S                                                                      S"12.4.56.0"
#define SFTP4_ASSEMBLY_VERSION_T                                                                  TEXT("12.4.56.0")
#define SFTP4_ASSEMBLY_CULTURE                                                                          neutral
#define SFTP4_ASSEMBLY_CULTURE_A                                                                       "neutral"
#define SFTP4_ASSEMBLY_CULTURE_W                                                                      L"neutral"
#define SFTP4_ASSEMBLY_CULTURE_S                                                                      S"neutral"
#define SFTP4_ASSEMBLY_CULTURE_T                                                                  TEXT("neutral")
#define XLTRANS_ASSEMBLY_IDENTITY_DEF                                                                   xltrans,version=12.4.56.0,culture=neutral
#define XLTRANS_ASSEMBLY_IDENTITY_DEF_A                                                                "xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_DEF_W                                                               L"xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_DEF_S                                                               S"xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("xltrans,version=12.4.56.0,culture=neutral")
#define XLTRANS_ASSEMBLY_IDENTITY_REF                                                                   xltrans,version=12.4.56.0,culture=neutral
#define XLTRANS_ASSEMBLY_IDENTITY_REF_A                                                                "xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_REF_W                                                               L"xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_REF_S                                                               S"xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("xltrans,version=12.4.56.0,culture=neutral")
#define XLTRANS_ASSEMBLY_IDENTITY_EXACT_REF                                                             xltrans,version=12.4.56.0,culture=neutral
#define XLTRANS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"xltrans,version=12.4.56.0,culture=neutral"
#define XLTRANS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("xltrans,version=12.4.56.0,culture=neutral")
#define XLTRANS_ASSEMBLY_NAME                                                                           xltrans
#define XLTRANS_ASSEMBLY_NAME_A                                                                        "xltrans"
#define XLTRANS_ASSEMBLY_NAME_W                                                                       L"xltrans"
#define XLTRANS_ASSEMBLY_NAME_S                                                                       S"xltrans"
#define XLTRANS_ASSEMBLY_NAME_T                                                                   TEXT("xltrans")
#define XLTRANS_ASSEMBLY_VERSION                                                                        12.4.56.0
#define XLTRANS_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define XLTRANS_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define XLTRANS_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define XLTRANS_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define XLTRANS_ASSEMBLY_CULTURE                                                                        neutral
#define XLTRANS_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define XLTRANS_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define XLTRANS_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define XLTRANS_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_DEF                                                        dmlscriptgenerator,version=12.4.56.0,culture=neutral
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_DEF_A                                                     "dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_DEF_W                                                    L"dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_DEF_S                                                    S"dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("dmlscriptgenerator,version=12.4.56.0,culture=neutral")
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_REF                                                        dmlscriptgenerator,version=12.4.56.0,culture=neutral
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_REF_A                                                     "dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_REF_W                                                    L"dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_REF_S                                                    S"dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_REF_T                                                TEXT("dmlscriptgenerator,version=12.4.56.0,culture=neutral")
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF                                                  dmlscriptgenerator,version=12.4.56.0,culture=neutral
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"dmlscriptgenerator,version=12.4.56.0,culture=neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("dmlscriptgenerator,version=12.4.56.0,culture=neutral")
#define DMLSCRIPTGENERATOR_ASSEMBLY_NAME                                                                dmlscriptgenerator
#define DMLSCRIPTGENERATOR_ASSEMBLY_NAME_A                                                             "dmlscriptgenerator"
#define DMLSCRIPTGENERATOR_ASSEMBLY_NAME_W                                                            L"dmlscriptgenerator"
#define DMLSCRIPTGENERATOR_ASSEMBLY_NAME_S                                                            S"dmlscriptgenerator"
#define DMLSCRIPTGENERATOR_ASSEMBLY_NAME_T                                                        TEXT("dmlscriptgenerator")
#define DMLSCRIPTGENERATOR_ASSEMBLY_VERSION                                                             12.4.56.0
#define DMLSCRIPTGENERATOR_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define DMLSCRIPTGENERATOR_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define DMLSCRIPTGENERATOR_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define DMLSCRIPTGENERATOR_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define DMLSCRIPTGENERATOR_ASSEMBLY_CULTURE                                                             neutral
#define DMLSCRIPTGENERATOR_ASSEMBLY_CULTURE_A                                                          "neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define DMLSCRIPTGENERATOR_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
#define SOAPTRACE_ASSEMBLY_IDENTITY_DEF                                                                 soaptrace,version=12.4.56.0,culture=neutral
#define SOAPTRACE_ASSEMBLY_IDENTITY_DEF_A                                                              "soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_DEF_W                                                             L"soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_DEF_S                                                             S"soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("soaptrace,version=12.4.56.0,culture=neutral")
#define SOAPTRACE_ASSEMBLY_IDENTITY_REF                                                                 soaptrace,version=12.4.56.0,culture=neutral
#define SOAPTRACE_ASSEMBLY_IDENTITY_REF_A                                                              "soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_REF_W                                                             L"soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_REF_S                                                             S"soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("soaptrace,version=12.4.56.0,culture=neutral")
#define SOAPTRACE_ASSEMBLY_IDENTITY_EXACT_REF                                                           soaptrace,version=12.4.56.0,culture=neutral
#define SOAPTRACE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"soaptrace,version=12.4.56.0,culture=neutral"
#define SOAPTRACE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("soaptrace,version=12.4.56.0,culture=neutral")
#define SOAPTRACE_ASSEMBLY_NAME                                                                         soaptrace
#define SOAPTRACE_ASSEMBLY_NAME_A                                                                      "soaptrace"
#define SOAPTRACE_ASSEMBLY_NAME_W                                                                     L"soaptrace"
#define SOAPTRACE_ASSEMBLY_NAME_S                                                                     S"soaptrace"
#define SOAPTRACE_ASSEMBLY_NAME_T                                                                 TEXT("soaptrace")
#define SOAPTRACE_ASSEMBLY_VERSION                                                                      12.4.56.0
#define SOAPTRACE_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define SOAPTRACE_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define SOAPTRACE_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define SOAPTRACE_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define SOAPTRACE_ASSEMBLY_CULTURE                                                                      neutral
#define SOAPTRACE_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define SOAPTRACE_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define SOAPTRACE_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define SOAPTRACE_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_DEF                                                refurbishfeedprocessortest,version=12.4.56.0,culture=neutral
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_DEF_A                                             "refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_DEF_W                                            L"refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_DEF_S                                            S"refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_DEF_T                                        TEXT("refurbishfeedprocessortest,version=12.4.56.0,culture=neutral")
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_REF                                                refurbishfeedprocessortest,version=12.4.56.0,culture=neutral
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_REF_A                                             "refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_REF_W                                            L"refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_REF_S                                            S"refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_REF_T                                        TEXT("refurbishfeedprocessortest,version=12.4.56.0,culture=neutral")
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_EXACT_REF                                          refurbishfeedprocessortest,version=12.4.56.0,culture=neutral
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                       "refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                      L"refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                      S"refurbishfeedprocessortest,version=12.4.56.0,culture=neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                  TEXT("refurbishfeedprocessortest,version=12.4.56.0,culture=neutral")
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_NAME                                                        refurbishfeedprocessortest
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_NAME_A                                                     "refurbishfeedprocessortest"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_NAME_W                                                    L"refurbishfeedprocessortest"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_NAME_S                                                    S"refurbishfeedprocessortest"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_NAME_T                                                TEXT("refurbishfeedprocessortest")
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_VERSION                                                     12.4.56.0
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_VERSION_A                                                  "12.4.56.0"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_VERSION_W                                                 L"12.4.56.0"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_VERSION_S                                                 S"12.4.56.0"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_VERSION_T                                             TEXT("12.4.56.0")
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_CULTURE                                                     neutral
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_CULTURE_A                                                  "neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_CULTURE_W                                                 L"neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_CULTURE_S                                                 S"neutral"
#define REFURBISHFEEDPROCESSORTEST_ASSEMBLY_CULTURE_T                                             TEXT("neutral")
#define TEST_1_ASSEMBLY_IDENTITY_DEF                                                                    test_1,version=12.4.56.0,culture=neutral
#define TEST_1_ASSEMBLY_IDENTITY_DEF_A                                                                 "test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_DEF_W                                                                L"test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_DEF_S                                                                S"test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_DEF_T                                                            TEXT("test_1,version=12.4.56.0,culture=neutral")
#define TEST_1_ASSEMBLY_IDENTITY_REF                                                                    test_1,version=12.4.56.0,culture=neutral
#define TEST_1_ASSEMBLY_IDENTITY_REF_A                                                                 "test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_REF_W                                                                L"test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_REF_S                                                                S"test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_REF_T                                                            TEXT("test_1,version=12.4.56.0,culture=neutral")
#define TEST_1_ASSEMBLY_IDENTITY_EXACT_REF                                                              test_1,version=12.4.56.0,culture=neutral
#define TEST_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                           "test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                          L"test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                          S"test_1,version=12.4.56.0,culture=neutral"
#define TEST_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                                      TEXT("test_1,version=12.4.56.0,culture=neutral")
#define TEST_1_ASSEMBLY_NAME                                                                            test_1
#define TEST_1_ASSEMBLY_NAME_A                                                                         "test_1"
#define TEST_1_ASSEMBLY_NAME_W                                                                        L"test_1"
#define TEST_1_ASSEMBLY_NAME_S                                                                        S"test_1"
#define TEST_1_ASSEMBLY_NAME_T                                                                    TEXT("test_1")
#define TEST_1_ASSEMBLY_VERSION                                                                         12.4.56.0
#define TEST_1_ASSEMBLY_VERSION_A                                                                      "12.4.56.0"
#define TEST_1_ASSEMBLY_VERSION_W                                                                     L"12.4.56.0"
#define TEST_1_ASSEMBLY_VERSION_S                                                                     S"12.4.56.0"
#define TEST_1_ASSEMBLY_VERSION_T                                                                 TEXT("12.4.56.0")
#define TEST_1_ASSEMBLY_CULTURE                                                                         neutral
#define TEST_1_ASSEMBLY_CULTURE_A                                                                      "neutral"
#define TEST_1_ASSEMBLY_CULTURE_W                                                                     L"neutral"
#define TEST_1_ASSEMBLY_CULTURE_S                                                                     S"neutral"
#define TEST_1_ASSEMBLY_CULTURE_T                                                                 TEXT("neutral")
#define XMLAPPEND_ASSEMBLY_IDENTITY_DEF                                                                 xmlappend,version=12.4.56.0,culture=neutral
#define XMLAPPEND_ASSEMBLY_IDENTITY_DEF_A                                                              "xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_DEF_W                                                             L"xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_DEF_S                                                             S"xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("xmlappend,version=12.4.56.0,culture=neutral")
#define XMLAPPEND_ASSEMBLY_IDENTITY_REF                                                                 xmlappend,version=12.4.56.0,culture=neutral
#define XMLAPPEND_ASSEMBLY_IDENTITY_REF_A                                                              "xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_REF_W                                                             L"xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_REF_S                                                             S"xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("xmlappend,version=12.4.56.0,culture=neutral")
#define XMLAPPEND_ASSEMBLY_IDENTITY_EXACT_REF                                                           xmlappend,version=12.4.56.0,culture=neutral
#define XMLAPPEND_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"xmlappend,version=12.4.56.0,culture=neutral"
#define XMLAPPEND_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("xmlappend,version=12.4.56.0,culture=neutral")
#define XMLAPPEND_ASSEMBLY_NAME                                                                         xmlappend
#define XMLAPPEND_ASSEMBLY_NAME_A                                                                      "xmlappend"
#define XMLAPPEND_ASSEMBLY_NAME_W                                                                     L"xmlappend"
#define XMLAPPEND_ASSEMBLY_NAME_S                                                                     S"xmlappend"
#define XMLAPPEND_ASSEMBLY_NAME_T                                                                 TEXT("xmlappend")
#define XMLAPPEND_ASSEMBLY_VERSION                                                                      12.4.56.0
#define XMLAPPEND_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define XMLAPPEND_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define XMLAPPEND_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define XMLAPPEND_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define XMLAPPEND_ASSEMBLY_CULTURE                                                                      neutral
#define XMLAPPEND_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define XMLAPPEND_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define XMLAPPEND_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define XMLAPPEND_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define CRLTOOL_ASSEMBLY_IDENTITY_DEF                                                                   crltool,version=12.4.56.0,culture=neutral
#define CRLTOOL_ASSEMBLY_IDENTITY_DEF_A                                                                "crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_DEF_W                                                               L"crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_DEF_S                                                               S"crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("crltool,version=12.4.56.0,culture=neutral")
#define CRLTOOL_ASSEMBLY_IDENTITY_REF                                                                   crltool,version=12.4.56.0,culture=neutral
#define CRLTOOL_ASSEMBLY_IDENTITY_REF_A                                                                "crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_REF_W                                                               L"crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_REF_S                                                               S"crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("crltool,version=12.4.56.0,culture=neutral")
#define CRLTOOL_ASSEMBLY_IDENTITY_EXACT_REF                                                             crltool,version=12.4.56.0,culture=neutral
#define CRLTOOL_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"crltool,version=12.4.56.0,culture=neutral"
#define CRLTOOL_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("crltool,version=12.4.56.0,culture=neutral")
#define CRLTOOL_ASSEMBLY_NAME                                                                           crltool
#define CRLTOOL_ASSEMBLY_NAME_A                                                                        "crltool"
#define CRLTOOL_ASSEMBLY_NAME_W                                                                       L"crltool"
#define CRLTOOL_ASSEMBLY_NAME_S                                                                       S"crltool"
#define CRLTOOL_ASSEMBLY_NAME_T                                                                   TEXT("crltool")
#define CRLTOOL_ASSEMBLY_VERSION                                                                        12.4.56.0
#define CRLTOOL_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define CRLTOOL_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define CRLTOOL_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define CRLTOOL_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define CRLTOOL_ASSEMBLY_CULTURE                                                                        neutral
#define CRLTOOL_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define CRLTOOL_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define CRLTOOL_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define CRLTOOL_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_DEF                                                             timestampprop,version=12.4.56.0,culture=neutral
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_DEF_A                                                          "timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_DEF_W                                                         L"timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_DEF_S                                                         S"timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("timestampprop,version=12.4.56.0,culture=neutral")
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_REF                                                             timestampprop,version=12.4.56.0,culture=neutral
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_REF_A                                                          "timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_REF_W                                                         L"timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_REF_S                                                         S"timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("timestampprop,version=12.4.56.0,culture=neutral")
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_EXACT_REF                                                       timestampprop,version=12.4.56.0,culture=neutral
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"timestampprop,version=12.4.56.0,culture=neutral"
#define TIMESTAMPPROP_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("timestampprop,version=12.4.56.0,culture=neutral")
#define TIMESTAMPPROP_ASSEMBLY_NAME                                                                     timestampprop
#define TIMESTAMPPROP_ASSEMBLY_NAME_A                                                                  "timestampprop"
#define TIMESTAMPPROP_ASSEMBLY_NAME_W                                                                 L"timestampprop"
#define TIMESTAMPPROP_ASSEMBLY_NAME_S                                                                 S"timestampprop"
#define TIMESTAMPPROP_ASSEMBLY_NAME_T                                                             TEXT("timestampprop")
#define TIMESTAMPPROP_ASSEMBLY_VERSION                                                                  12.4.56.0
#define TIMESTAMPPROP_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define TIMESTAMPPROP_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define TIMESTAMPPROP_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define TIMESTAMPPROP_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define TIMESTAMPPROP_ASSEMBLY_CULTURE                                                                  neutral
#define TIMESTAMPPROP_ASSEMBLY_CULTURE_A                                                               "neutral"
#define TIMESTAMPPROP_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define TIMESTAMPPROP_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define TIMESTAMPPROP_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_DEF                                              xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_A                                           "xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_W                                          L"xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_S                                          S"xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_T                                      TEXT("xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_REF                                              xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_REF_A                                           "xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_REF_W                                          L"xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_REF_S                                          S"xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_REF_T                                      TEXT("xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF                                        xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                     "xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                    L"xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                    S"xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                TEXT("xonline.tools.wstrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_NAME                                                      xonline.tools.wstrunner.test
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_NAME_A                                                   "xonline.tools.wstrunner.test"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_NAME_W                                                  L"xonline.tools.wstrunner.test"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_NAME_S                                                  S"xonline.tools.wstrunner.test"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_NAME_T                                              TEXT("xonline.tools.wstrunner.test")
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_VERSION                                                   12.4.56.0
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_VERSION_A                                                "12.4.56.0"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_VERSION_W                                               L"12.4.56.0"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_VERSION_S                                               S"12.4.56.0"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_VERSION_T                                           TEXT("12.4.56.0")
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_CULTURE                                                   neutral
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_CULTURE_A                                                "neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_CULTURE_W                                               L"neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_CULTURE_S                                               S"neutral"
#define XONLINE_TOOLS_WSTRUNNER_TEST_ASSEMBLY_CULTURE_T                                           TEXT("neutral")
#define XBLOBNUKE_ASSEMBLY_IDENTITY_DEF                                                                 xblobnuke,version=12.4.56.0,culture=neutral
#define XBLOBNUKE_ASSEMBLY_IDENTITY_DEF_A                                                              "xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_DEF_W                                                             L"xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_DEF_S                                                             S"xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("xblobnuke,version=12.4.56.0,culture=neutral")
#define XBLOBNUKE_ASSEMBLY_IDENTITY_REF                                                                 xblobnuke,version=12.4.56.0,culture=neutral
#define XBLOBNUKE_ASSEMBLY_IDENTITY_REF_A                                                              "xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_REF_W                                                             L"xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_REF_S                                                             S"xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("xblobnuke,version=12.4.56.0,culture=neutral")
#define XBLOBNUKE_ASSEMBLY_IDENTITY_EXACT_REF                                                           xblobnuke,version=12.4.56.0,culture=neutral
#define XBLOBNUKE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"xblobnuke,version=12.4.56.0,culture=neutral"
#define XBLOBNUKE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("xblobnuke,version=12.4.56.0,culture=neutral")
#define XBLOBNUKE_ASSEMBLY_NAME                                                                         xblobnuke
#define XBLOBNUKE_ASSEMBLY_NAME_A                                                                      "xblobnuke"
#define XBLOBNUKE_ASSEMBLY_NAME_W                                                                     L"xblobnuke"
#define XBLOBNUKE_ASSEMBLY_NAME_S                                                                     S"xblobnuke"
#define XBLOBNUKE_ASSEMBLY_NAME_T                                                                 TEXT("xblobnuke")
#define XBLOBNUKE_ASSEMBLY_VERSION                                                                      12.4.56.0
#define XBLOBNUKE_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define XBLOBNUKE_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define XBLOBNUKE_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define XBLOBNUKE_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define XBLOBNUKE_ASSEMBLY_CULTURE                                                                      neutral
#define XBLOBNUKE_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define XBLOBNUKE_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define XBLOBNUKE_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define XBLOBNUKE_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define XMLPREP_ASSEMBLY_IDENTITY_DEF                                                                   xmlprep,version=12.4.56.0,culture=neutral
#define XMLPREP_ASSEMBLY_IDENTITY_DEF_A                                                                "xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_DEF_W                                                               L"xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_DEF_S                                                               S"xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("xmlprep,version=12.4.56.0,culture=neutral")
#define XMLPREP_ASSEMBLY_IDENTITY_REF                                                                   xmlprep,version=12.4.56.0,culture=neutral
#define XMLPREP_ASSEMBLY_IDENTITY_REF_A                                                                "xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_REF_W                                                               L"xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_REF_S                                                               S"xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("xmlprep,version=12.4.56.0,culture=neutral")
#define XMLPREP_ASSEMBLY_IDENTITY_EXACT_REF                                                             xmlprep,version=12.4.56.0,culture=neutral
#define XMLPREP_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"xmlprep,version=12.4.56.0,culture=neutral"
#define XMLPREP_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("xmlprep,version=12.4.56.0,culture=neutral")
#define XMLPREP_ASSEMBLY_NAME                                                                           xmlprep
#define XMLPREP_ASSEMBLY_NAME_A                                                                        "xmlprep"
#define XMLPREP_ASSEMBLY_NAME_W                                                                       L"xmlprep"
#define XMLPREP_ASSEMBLY_NAME_S                                                                       S"xmlprep"
#define XMLPREP_ASSEMBLY_NAME_T                                                                   TEXT("xmlprep")
#define XMLPREP_ASSEMBLY_VERSION                                                                        12.4.56.0
#define XMLPREP_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define XMLPREP_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define XMLPREP_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define XMLPREP_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define XMLPREP_ASSEMBLY_CULTURE                                                                        neutral
#define XMLPREP_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define XMLPREP_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define XMLPREP_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define XMLPREP_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define PROPCERTTEST_ASSEMBLY_IDENTITY_DEF                                                              propcerttest,version=12.4.56.0,culture=neutral
#define PROPCERTTEST_ASSEMBLY_IDENTITY_DEF_A                                                           "propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_DEF_W                                                          L"propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_DEF_S                                                          S"propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("propcerttest,version=12.4.56.0,culture=neutral")
#define PROPCERTTEST_ASSEMBLY_IDENTITY_REF                                                              propcerttest,version=12.4.56.0,culture=neutral
#define PROPCERTTEST_ASSEMBLY_IDENTITY_REF_A                                                           "propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_REF_W                                                          L"propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_REF_S                                                          S"propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("propcerttest,version=12.4.56.0,culture=neutral")
#define PROPCERTTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                        propcerttest,version=12.4.56.0,culture=neutral
#define PROPCERTTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"propcerttest,version=12.4.56.0,culture=neutral"
#define PROPCERTTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("propcerttest,version=12.4.56.0,culture=neutral")
#define PROPCERTTEST_ASSEMBLY_NAME                                                                      propcerttest
#define PROPCERTTEST_ASSEMBLY_NAME_A                                                                   "propcerttest"
#define PROPCERTTEST_ASSEMBLY_NAME_W                                                                  L"propcerttest"
#define PROPCERTTEST_ASSEMBLY_NAME_S                                                                  S"propcerttest"
#define PROPCERTTEST_ASSEMBLY_NAME_T                                                              TEXT("propcerttest")
#define PROPCERTTEST_ASSEMBLY_VERSION                                                                   12.4.56.0
#define PROPCERTTEST_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define PROPCERTTEST_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define PROPCERTTEST_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define PROPCERTTEST_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define PROPCERTTEST_ASSEMBLY_CULTURE                                                                   neutral
#define PROPCERTTEST_ASSEMBLY_CULTURE_A                                                                "neutral"
#define PROPCERTTEST_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define PROPCERTTEST_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define PROPCERTTEST_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define XMLMERGE_ASSEMBLY_IDENTITY_DEF                                                                  xmlmerge,version=12.4.56.0,culture=neutral
#define XMLMERGE_ASSEMBLY_IDENTITY_DEF_A                                                               "xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_DEF_W                                                              L"xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_DEF_S                                                              S"xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("xmlmerge,version=12.4.56.0,culture=neutral")
#define XMLMERGE_ASSEMBLY_IDENTITY_REF                                                                  xmlmerge,version=12.4.56.0,culture=neutral
#define XMLMERGE_ASSEMBLY_IDENTITY_REF_A                                                               "xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_REF_W                                                              L"xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_REF_S                                                              S"xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("xmlmerge,version=12.4.56.0,culture=neutral")
#define XMLMERGE_ASSEMBLY_IDENTITY_EXACT_REF                                                            xmlmerge,version=12.4.56.0,culture=neutral
#define XMLMERGE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"xmlmerge,version=12.4.56.0,culture=neutral"
#define XMLMERGE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("xmlmerge,version=12.4.56.0,culture=neutral")
#define XMLMERGE_ASSEMBLY_NAME                                                                          xmlmerge
#define XMLMERGE_ASSEMBLY_NAME_A                                                                       "xmlmerge"
#define XMLMERGE_ASSEMBLY_NAME_W                                                                      L"xmlmerge"
#define XMLMERGE_ASSEMBLY_NAME_S                                                                      S"xmlmerge"
#define XMLMERGE_ASSEMBLY_NAME_T                                                                  TEXT("xmlmerge")
#define XMLMERGE_ASSEMBLY_VERSION                                                                       12.4.56.0
#define XMLMERGE_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define XMLMERGE_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define XMLMERGE_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define XMLMERGE_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define XMLMERGE_ASSEMBLY_CULTURE                                                                       neutral
#define XMLMERGE_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define XMLMERGE_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define XMLMERGE_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define XMLMERGE_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define UPDATESTF_ASSEMBLY_IDENTITY_DEF                                                                 updatestf,version=12.4.56.0,culture=neutral
#define UPDATESTF_ASSEMBLY_IDENTITY_DEF_A                                                              "updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_DEF_W                                                             L"updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_DEF_S                                                             S"updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("updatestf,version=12.4.56.0,culture=neutral")
#define UPDATESTF_ASSEMBLY_IDENTITY_REF                                                                 updatestf,version=12.4.56.0,culture=neutral
#define UPDATESTF_ASSEMBLY_IDENTITY_REF_A                                                              "updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_REF_W                                                             L"updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_REF_S                                                             S"updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("updatestf,version=12.4.56.0,culture=neutral")
#define UPDATESTF_ASSEMBLY_IDENTITY_EXACT_REF                                                           updatestf,version=12.4.56.0,culture=neutral
#define UPDATESTF_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"updatestf,version=12.4.56.0,culture=neutral"
#define UPDATESTF_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("updatestf,version=12.4.56.0,culture=neutral")
#define UPDATESTF_ASSEMBLY_NAME                                                                         updatestf
#define UPDATESTF_ASSEMBLY_NAME_A                                                                      "updatestf"
#define UPDATESTF_ASSEMBLY_NAME_W                                                                     L"updatestf"
#define UPDATESTF_ASSEMBLY_NAME_S                                                                     S"updatestf"
#define UPDATESTF_ASSEMBLY_NAME_T                                                                 TEXT("updatestf")
#define UPDATESTF_ASSEMBLY_VERSION                                                                      12.4.56.0
#define UPDATESTF_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define UPDATESTF_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define UPDATESTF_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define UPDATESTF_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define UPDATESTF_ASSEMBLY_CULTURE                                                                      neutral
#define UPDATESTF_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define UPDATESTF_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define UPDATESTF_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define UPDATESTF_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF                                                         minimaestro_tools,version=12.4.56.0,culture=neutral
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_A                                                      "minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_W                                                     L"minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_S                                                     S"minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("minimaestro_tools,version=12.4.56.0,culture=neutral")
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF                                                         minimaestro_tools,version=12.4.56.0,culture=neutral
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_A                                                      "minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_W                                                     L"minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_S                                                     S"minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("minimaestro_tools,version=12.4.56.0,culture=neutral")
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF                                                   minimaestro_tools,version=12.4.56.0,culture=neutral
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"minimaestro_tools,version=12.4.56.0,culture=neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("minimaestro_tools,version=12.4.56.0,culture=neutral")
#define MINIMAESTRO_TOOLS_ASSEMBLY_NAME                                                                 minimaestro_tools
#define MINIMAESTRO_TOOLS_ASSEMBLY_NAME_A                                                              "minimaestro_tools"
#define MINIMAESTRO_TOOLS_ASSEMBLY_NAME_W                                                             L"minimaestro_tools"
#define MINIMAESTRO_TOOLS_ASSEMBLY_NAME_S                                                             S"minimaestro_tools"
#define MINIMAESTRO_TOOLS_ASSEMBLY_NAME_T                                                         TEXT("minimaestro_tools")
#define MINIMAESTRO_TOOLS_ASSEMBLY_VERSION                                                              12.4.56.0
#define MINIMAESTRO_TOOLS_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define MINIMAESTRO_TOOLS_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define MINIMAESTRO_TOOLS_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define MINIMAESTRO_TOOLS_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define MINIMAESTRO_TOOLS_ASSEMBLY_CULTURE                                                              neutral
#define MINIMAESTRO_TOOLS_ASSEMBLY_CULTURE_A                                                           "neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define MINIMAESTRO_TOOLS_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF                                                        xblobmaestro_tools,version=12.4.56.0,culture=neutral
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_A                                                     "xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_W                                                    L"xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_S                                                    S"xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("xblobmaestro_tools,version=12.4.56.0,culture=neutral")
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF                                                        xblobmaestro_tools,version=12.4.56.0,culture=neutral
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_A                                                     "xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_W                                                    L"xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_S                                                    S"xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_REF_T                                                TEXT("xblobmaestro_tools,version=12.4.56.0,culture=neutral")
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF                                                  xblobmaestro_tools,version=12.4.56.0,culture=neutral
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"xblobmaestro_tools,version=12.4.56.0,culture=neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("xblobmaestro_tools,version=12.4.56.0,culture=neutral")
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_NAME                                                                xblobmaestro_tools
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_NAME_A                                                             "xblobmaestro_tools"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_NAME_W                                                            L"xblobmaestro_tools"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_NAME_S                                                            S"xblobmaestro_tools"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_NAME_T                                                        TEXT("xblobmaestro_tools")
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_VERSION                                                             12.4.56.0
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_CULTURE                                                             neutral
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_CULTURE_A                                                          "neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define XBLOBMAESTRO_TOOLS_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_DEF                                                   xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_DEF_A                                                "xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_DEF_W                                               L"xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_DEF_S                                               S"xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_DEF_T                                           TEXT("xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral")
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_REF                                                   xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_REF_A                                                "xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_REF_W                                               L"xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_REF_S                                               S"xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_REF_T                                           TEXT("xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral")
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_EXACT_REF                                             xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_A                                          "xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_W                                         L"xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_S                                         S"xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_T                                     TEXT("xblmaestro_fd-postimage,version=12.4.56.0,culture=neutral")
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_NAME                                                           xblmaestro_fd-postimage
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_NAME_A                                                        "xblmaestro_fd-postimage"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_NAME_W                                                       L"xblmaestro_fd-postimage"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_NAME_S                                                       S"xblmaestro_fd-postimage"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_NAME_T                                                   TEXT("xblmaestro_fd-postimage")
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_VERSION                                                        12.4.56.0
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_VERSION_A                                                     "12.4.56.0"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_VERSION_W                                                    L"12.4.56.0"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_VERSION_S                                                    S"12.4.56.0"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_VERSION_T                                                TEXT("12.4.56.0")
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_CULTURE                                                        neutral
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_CULTURE_A                                                     "neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_CULTURE_W                                                    L"neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_CULTURE_S                                                    S"neutral"
#define XBLMAESTRO_FD_POSTIMAGE_ASSEMBLY_CULTURE_T                                                TEXT("neutral")
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_DEF                                                    xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_DEF_A                                                 "xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_DEF_W                                                L"xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_DEF_S                                                S"xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_DEF_T                                            TEXT("xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral")
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_REF                                                    xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_REF_A                                                 "xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_REF_W                                                L"xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_REF_S                                                S"xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_REF_T                                            TEXT("xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral")
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_EXACT_REF                                              xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_A                                           "xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_W                                          L"xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_S                                          S"xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_IDENTITY_EXACT_REF_T                                      TEXT("xblmaestro_fd-preimage,version=12.4.56.0,culture=neutral")
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_NAME                                                            xblmaestro_fd-preimage
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_NAME_A                                                         "xblmaestro_fd-preimage"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_NAME_W                                                        L"xblmaestro_fd-preimage"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_NAME_S                                                        S"xblmaestro_fd-preimage"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_NAME_T                                                    TEXT("xblmaestro_fd-preimage")
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_VERSION                                                         12.4.56.0
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_VERSION_A                                                      "12.4.56.0"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_VERSION_W                                                     L"12.4.56.0"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_VERSION_S                                                     S"12.4.56.0"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_VERSION_T                                                 TEXT("12.4.56.0")
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_CULTURE                                                         neutral
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_CULTURE_A                                                      "neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_CULTURE_W                                                     L"neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_CULTURE_S                                                     S"neutral"
#define XBLMAESTRO_FD_PREIMAGE_ASSEMBLY_CULTURE_T                                                 TEXT("neutral")
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_DEF                                              xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_A                                           "xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_W                                          L"xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_S                                          S"xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_DEF_T                                      TEXT("xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_REF                                              xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_REF_A                                           "xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_REF_W                                          L"xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_REF_S                                          S"xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_REF_T                                      TEXT("xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF                                        xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                     "xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                    L"xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                    S"xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                TEXT("xonline.tools.iisrunner.test,version=12.4.56.0,culture=neutral")
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_NAME                                                      xonline.tools.iisrunner.test
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_NAME_A                                                   "xonline.tools.iisrunner.test"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_NAME_W                                                  L"xonline.tools.iisrunner.test"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_NAME_S                                                  S"xonline.tools.iisrunner.test"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_NAME_T                                              TEXT("xonline.tools.iisrunner.test")
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_VERSION                                                   12.4.56.0
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_VERSION_A                                                "12.4.56.0"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_VERSION_W                                               L"12.4.56.0"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_VERSION_S                                               S"12.4.56.0"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_VERSION_T                                           TEXT("12.4.56.0")
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_CULTURE                                                   neutral
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_CULTURE_A                                                "neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_CULTURE_W                                               L"neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_CULTURE_S                                               S"neutral"
#define XONLINE_TOOLS_IISRUNNER_TEST_ASSEMBLY_CULTURE_T                                           TEXT("neutral")
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_DEF                                              microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_DEF_A                                           "microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_DEF_W                                          L"microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_DEF_S                                          S"microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_DEF_T                                      TEXT("microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_REF                                              microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_REF_A                                           "microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_REF_W                                          L"microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_REF_S                                          S"microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_REF_T                                      TEXT("microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_EXACT_REF                                        microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_EXACT_REF_A                                     "microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_EXACT_REF_W                                    L"microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_EXACT_REF_S                                    S"microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_IDENTITY_EXACT_REF_T                                TEXT("microsoft.ems.tools.msitools,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_NAME                                                      microsoft.ems.tools.msitools
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_NAME_A                                                   "microsoft.ems.tools.msitools"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_NAME_W                                                  L"microsoft.ems.tools.msitools"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_NAME_S                                                  S"microsoft.ems.tools.msitools"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_NAME_T                                              TEXT("microsoft.ems.tools.msitools")
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_VERSION                                                   12.4.56.0
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_VERSION_A                                                "12.4.56.0"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_VERSION_W                                               L"12.4.56.0"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_VERSION_S                                               S"12.4.56.0"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_VERSION_T                                           TEXT("12.4.56.0")
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_CULTURE                                                   neutral
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_CULTURE_A                                                "neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_CULTURE_W                                               L"neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_CULTURE_S                                               S"neutral"
#define MICROSOFT_EMS_TOOLS_MSITOOLS_ASSEMBLY_CULTURE_T                                           TEXT("neutral")
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_DEF                                                          dspfilevalidator,version=12.4.56.0,culture=neutral
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_DEF_A                                                       "dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_DEF_W                                                      L"dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_DEF_S                                                      S"dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("dspfilevalidator,version=12.4.56.0,culture=neutral")
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_REF                                                          dspfilevalidator,version=12.4.56.0,culture=neutral
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_REF_A                                                       "dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_REF_W                                                      L"dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_REF_S                                                      S"dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("dspfilevalidator,version=12.4.56.0,culture=neutral")
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_EXACT_REF                                                    dspfilevalidator,version=12.4.56.0,culture=neutral
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"dspfilevalidator,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("dspfilevalidator,version=12.4.56.0,culture=neutral")
#define DSPFILEVALIDATOR_ASSEMBLY_NAME                                                                  dspfilevalidator
#define DSPFILEVALIDATOR_ASSEMBLY_NAME_A                                                               "dspfilevalidator"
#define DSPFILEVALIDATOR_ASSEMBLY_NAME_W                                                              L"dspfilevalidator"
#define DSPFILEVALIDATOR_ASSEMBLY_NAME_S                                                              S"dspfilevalidator"
#define DSPFILEVALIDATOR_ASSEMBLY_NAME_T                                                          TEXT("dspfilevalidator")
#define DSPFILEVALIDATOR_ASSEMBLY_VERSION                                                               12.4.56.0
#define DSPFILEVALIDATOR_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define DSPFILEVALIDATOR_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define DSPFILEVALIDATOR_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define DSPFILEVALIDATOR_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define DSPFILEVALIDATOR_ASSEMBLY_CULTURE                                                               neutral
#define DSPFILEVALIDATOR_ASSEMBLY_CULTURE_A                                                            "neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define DSPFILEVALIDATOR_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_DEF                                                             loccategories,version=12.4.56.0,culture=neutral
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_DEF_A                                                          "loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_DEF_W                                                         L"loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_DEF_S                                                         S"loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("loccategories,version=12.4.56.0,culture=neutral")
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_REF                                                             loccategories,version=12.4.56.0,culture=neutral
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_REF_A                                                          "loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_REF_W                                                         L"loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_REF_S                                                         S"loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("loccategories,version=12.4.56.0,culture=neutral")
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_EXACT_REF                                                       loccategories,version=12.4.56.0,culture=neutral
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"loccategories,version=12.4.56.0,culture=neutral"
#define LOCCATEGORIES_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("loccategories,version=12.4.56.0,culture=neutral")
#define LOCCATEGORIES_ASSEMBLY_NAME                                                                     loccategories
#define LOCCATEGORIES_ASSEMBLY_NAME_A                                                                  "loccategories"
#define LOCCATEGORIES_ASSEMBLY_NAME_W                                                                 L"loccategories"
#define LOCCATEGORIES_ASSEMBLY_NAME_S                                                                 S"loccategories"
#define LOCCATEGORIES_ASSEMBLY_NAME_T                                                             TEXT("loccategories")
#define LOCCATEGORIES_ASSEMBLY_VERSION                                                                  12.4.56.0
#define LOCCATEGORIES_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define LOCCATEGORIES_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define LOCCATEGORIES_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define LOCCATEGORIES_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define LOCCATEGORIES_ASSEMBLY_CULTURE                                                                  neutral
#define LOCCATEGORIES_ASSEMBLY_CULTURE_A                                                               "neutral"
#define LOCCATEGORIES_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define LOCCATEGORIES_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define LOCCATEGORIES_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define ADT_ASSEMBLY_IDENTITY_DEF                                                                       adt,version=12.4.56.0,culture=neutral
#define ADT_ASSEMBLY_IDENTITY_DEF_A                                                                    "adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_DEF_W                                                                   L"adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_DEF_S                                                                   S"adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_DEF_T                                                               TEXT("adt,version=12.4.56.0,culture=neutral")
#define ADT_ASSEMBLY_IDENTITY_REF                                                                       adt,version=12.4.56.0,culture=neutral
#define ADT_ASSEMBLY_IDENTITY_REF_A                                                                    "adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_REF_W                                                                   L"adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_REF_S                                                                   S"adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_REF_T                                                               TEXT("adt,version=12.4.56.0,culture=neutral")
#define ADT_ASSEMBLY_IDENTITY_EXACT_REF                                                                 adt,version=12.4.56.0,culture=neutral
#define ADT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                              "adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                             L"adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                             S"adt,version=12.4.56.0,culture=neutral"
#define ADT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                         TEXT("adt,version=12.4.56.0,culture=neutral")
#define ADT_ASSEMBLY_NAME                                                                               adt
#define ADT_ASSEMBLY_NAME_A                                                                            "adt"
#define ADT_ASSEMBLY_NAME_W                                                                           L"adt"
#define ADT_ASSEMBLY_NAME_S                                                                           S"adt"
#define ADT_ASSEMBLY_NAME_T                                                                       TEXT("adt")
#define ADT_ASSEMBLY_VERSION                                                                            12.4.56.0
#define ADT_ASSEMBLY_VERSION_A                                                                         "12.4.56.0"
#define ADT_ASSEMBLY_VERSION_W                                                                        L"12.4.56.0"
#define ADT_ASSEMBLY_VERSION_S                                                                        S"12.4.56.0"
#define ADT_ASSEMBLY_VERSION_T                                                                    TEXT("12.4.56.0")
#define ADT_ASSEMBLY_CULTURE                                                                            neutral
#define ADT_ASSEMBLY_CULTURE_A                                                                         "neutral"
#define ADT_ASSEMBLY_CULTURE_W                                                                        L"neutral"
#define ADT_ASSEMBLY_CULTURE_S                                                                        S"neutral"
#define ADT_ASSEMBLY_CULTURE_T                                                                    TEXT("neutral")
#define CONNECTION_ASSEMBLY_IDENTITY_DEF                                                                connection,version=12.4.56.0,culture=neutral
#define CONNECTION_ASSEMBLY_IDENTITY_DEF_A                                                             "connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_DEF_W                                                            L"connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_DEF_S                                                            S"connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("connection,version=12.4.56.0,culture=neutral")
#define CONNECTION_ASSEMBLY_IDENTITY_REF                                                                connection,version=12.4.56.0,culture=neutral
#define CONNECTION_ASSEMBLY_IDENTITY_REF_A                                                             "connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_REF_W                                                            L"connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_REF_S                                                            S"connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("connection,version=12.4.56.0,culture=neutral")
#define CONNECTION_ASSEMBLY_IDENTITY_EXACT_REF                                                          connection,version=12.4.56.0,culture=neutral
#define CONNECTION_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"connection,version=12.4.56.0,culture=neutral"
#define CONNECTION_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("connection,version=12.4.56.0,culture=neutral")
#define CONNECTION_ASSEMBLY_NAME                                                                        connection
#define CONNECTION_ASSEMBLY_NAME_A                                                                     "connection"
#define CONNECTION_ASSEMBLY_NAME_W                                                                    L"connection"
#define CONNECTION_ASSEMBLY_NAME_S                                                                    S"connection"
#define CONNECTION_ASSEMBLY_NAME_T                                                                TEXT("connection")
#define CONNECTION_ASSEMBLY_VERSION                                                                     12.4.56.0
#define CONNECTION_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define CONNECTION_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define CONNECTION_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define CONNECTION_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define CONNECTION_ASSEMBLY_CULTURE                                                                     neutral
#define CONNECTION_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define CONNECTION_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define CONNECTION_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define CONNECTION_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define THREADPOOL_ASSEMBLY_IDENTITY_DEF                                                                threadpool,version=12.4.56.0,culture=neutral
#define THREADPOOL_ASSEMBLY_IDENTITY_DEF_A                                                             "threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_DEF_W                                                            L"threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_DEF_S                                                            S"threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("threadpool,version=12.4.56.0,culture=neutral")
#define THREADPOOL_ASSEMBLY_IDENTITY_REF                                                                threadpool,version=12.4.56.0,culture=neutral
#define THREADPOOL_ASSEMBLY_IDENTITY_REF_A                                                             "threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_REF_W                                                            L"threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_REF_S                                                            S"threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("threadpool,version=12.4.56.0,culture=neutral")
#define THREADPOOL_ASSEMBLY_IDENTITY_EXACT_REF                                                          threadpool,version=12.4.56.0,culture=neutral
#define THREADPOOL_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"threadpool,version=12.4.56.0,culture=neutral"
#define THREADPOOL_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("threadpool,version=12.4.56.0,culture=neutral")
#define THREADPOOL_ASSEMBLY_NAME                                                                        threadpool
#define THREADPOOL_ASSEMBLY_NAME_A                                                                     "threadpool"
#define THREADPOOL_ASSEMBLY_NAME_W                                                                    L"threadpool"
#define THREADPOOL_ASSEMBLY_NAME_S                                                                    S"threadpool"
#define THREADPOOL_ASSEMBLY_NAME_T                                                                TEXT("threadpool")
#define THREADPOOL_ASSEMBLY_VERSION                                                                     12.4.56.0
#define THREADPOOL_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define THREADPOOL_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define THREADPOOL_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define THREADPOOL_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define THREADPOOL_ASSEMBLY_CULTURE                                                                     neutral
#define THREADPOOL_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define THREADPOOL_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define THREADPOOL_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define THREADPOOL_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define SERVERPOOL_ASSEMBLY_IDENTITY_DEF                                                                serverpool,version=12.4.56.0,culture=neutral
#define SERVERPOOL_ASSEMBLY_IDENTITY_DEF_A                                                             "serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_DEF_W                                                            L"serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_DEF_S                                                            S"serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("serverpool,version=12.4.56.0,culture=neutral")
#define SERVERPOOL_ASSEMBLY_IDENTITY_REF                                                                serverpool,version=12.4.56.0,culture=neutral
#define SERVERPOOL_ASSEMBLY_IDENTITY_REF_A                                                             "serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_REF_W                                                            L"serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_REF_S                                                            S"serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("serverpool,version=12.4.56.0,culture=neutral")
#define SERVERPOOL_ASSEMBLY_IDENTITY_EXACT_REF                                                          serverpool,version=12.4.56.0,culture=neutral
#define SERVERPOOL_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"serverpool,version=12.4.56.0,culture=neutral"
#define SERVERPOOL_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("serverpool,version=12.4.56.0,culture=neutral")
#define SERVERPOOL_ASSEMBLY_NAME                                                                        serverpool
#define SERVERPOOL_ASSEMBLY_NAME_A                                                                     "serverpool"
#define SERVERPOOL_ASSEMBLY_NAME_W                                                                    L"serverpool"
#define SERVERPOOL_ASSEMBLY_NAME_S                                                                    S"serverpool"
#define SERVERPOOL_ASSEMBLY_NAME_T                                                                TEXT("serverpool")
#define SERVERPOOL_ASSEMBLY_VERSION                                                                     12.4.56.0
#define SERVERPOOL_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define SERVERPOOL_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define SERVERPOOL_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define SERVERPOOL_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define SERVERPOOL_ASSEMBLY_CULTURE                                                                     neutral
#define SERVERPOOL_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define SERVERPOOL_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define SERVERPOOL_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define SERVERPOOL_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define TILIB_ASSEMBLY_IDENTITY_DEF                                                                     tilib,version=12.4.56.0,culture=neutral
#define TILIB_ASSEMBLY_IDENTITY_DEF_A                                                                  "tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_DEF_W                                                                 L"tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_DEF_S                                                                 S"tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_DEF_T                                                             TEXT("tilib,version=12.4.56.0,culture=neutral")
#define TILIB_ASSEMBLY_IDENTITY_REF                                                                     tilib,version=12.4.56.0,culture=neutral
#define TILIB_ASSEMBLY_IDENTITY_REF_A                                                                  "tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_REF_W                                                                 L"tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_REF_S                                                                 S"tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_REF_T                                                             TEXT("tilib,version=12.4.56.0,culture=neutral")
#define TILIB_ASSEMBLY_IDENTITY_EXACT_REF                                                               tilib,version=12.4.56.0,culture=neutral
#define TILIB_ASSEMBLY_IDENTITY_EXACT_REF_A                                                            "tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_EXACT_REF_W                                                           L"tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_EXACT_REF_S                                                           S"tilib,version=12.4.56.0,culture=neutral"
#define TILIB_ASSEMBLY_IDENTITY_EXACT_REF_T                                                       TEXT("tilib,version=12.4.56.0,culture=neutral")
#define TILIB_ASSEMBLY_NAME                                                                             tilib
#define TILIB_ASSEMBLY_NAME_A                                                                          "tilib"
#define TILIB_ASSEMBLY_NAME_W                                                                         L"tilib"
#define TILIB_ASSEMBLY_NAME_S                                                                         S"tilib"
#define TILIB_ASSEMBLY_NAME_T                                                                     TEXT("tilib")
#define TILIB_ASSEMBLY_VERSION                                                                          12.4.56.0
#define TILIB_ASSEMBLY_VERSION_A                                                                       "12.4.56.0"
#define TILIB_ASSEMBLY_VERSION_W                                                                      L"12.4.56.0"
#define TILIB_ASSEMBLY_VERSION_S                                                                      S"12.4.56.0"
#define TILIB_ASSEMBLY_VERSION_T                                                                  TEXT("12.4.56.0")
#define TILIB_ASSEMBLY_CULTURE                                                                          neutral
#define TILIB_ASSEMBLY_CULTURE_A                                                                       "neutral"
#define TILIB_ASSEMBLY_CULTURE_W                                                                      L"neutral"
#define TILIB_ASSEMBLY_CULTURE_S                                                                      S"neutral"
#define TILIB_ASSEMBLY_CULTURE_T                                                                  TEXT("neutral")
#define WSHELPER_ASSEMBLY_IDENTITY_DEF                                                                  wshelper,version=12.4.56.0,culture=neutral
#define WSHELPER_ASSEMBLY_IDENTITY_DEF_A                                                               "wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_DEF_W                                                              L"wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_DEF_S                                                              S"wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("wshelper,version=12.4.56.0,culture=neutral")
#define WSHELPER_ASSEMBLY_IDENTITY_REF                                                                  wshelper,version=12.4.56.0,culture=neutral
#define WSHELPER_ASSEMBLY_IDENTITY_REF_A                                                               "wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_REF_W                                                              L"wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_REF_S                                                              S"wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("wshelper,version=12.4.56.0,culture=neutral")
#define WSHELPER_ASSEMBLY_IDENTITY_EXACT_REF                                                            wshelper,version=12.4.56.0,culture=neutral
#define WSHELPER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"wshelper,version=12.4.56.0,culture=neutral"
#define WSHELPER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("wshelper,version=12.4.56.0,culture=neutral")
#define WSHELPER_ASSEMBLY_NAME                                                                          wshelper
#define WSHELPER_ASSEMBLY_NAME_A                                                                       "wshelper"
#define WSHELPER_ASSEMBLY_NAME_W                                                                      L"wshelper"
#define WSHELPER_ASSEMBLY_NAME_S                                                                      S"wshelper"
#define WSHELPER_ASSEMBLY_NAME_T                                                                  TEXT("wshelper")
#define WSHELPER_ASSEMBLY_VERSION                                                                       12.4.56.0
#define WSHELPER_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define WSHELPER_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define WSHELPER_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define WSHELPER_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define WSHELPER_ASSEMBLY_CULTURE                                                                       neutral
#define WSHELPER_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define WSHELPER_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define WSHELPER_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define WSHELPER_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define PROPTITLES_ASSEMBLY_IDENTITY_DEF                                                                proptitles,version=12.4.56.0,culture=neutral
#define PROPTITLES_ASSEMBLY_IDENTITY_DEF_A                                                             "proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_DEF_W                                                            L"proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_DEF_S                                                            S"proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("proptitles,version=12.4.56.0,culture=neutral")
#define PROPTITLES_ASSEMBLY_IDENTITY_REF                                                                proptitles,version=12.4.56.0,culture=neutral
#define PROPTITLES_ASSEMBLY_IDENTITY_REF_A                                                             "proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_REF_W                                                            L"proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_REF_S                                                            S"proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("proptitles,version=12.4.56.0,culture=neutral")
#define PROPTITLES_ASSEMBLY_IDENTITY_EXACT_REF                                                          proptitles,version=12.4.56.0,culture=neutral
#define PROPTITLES_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"proptitles,version=12.4.56.0,culture=neutral"
#define PROPTITLES_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("proptitles,version=12.4.56.0,culture=neutral")
#define PROPTITLES_ASSEMBLY_NAME                                                                        proptitles
#define PROPTITLES_ASSEMBLY_NAME_A                                                                     "proptitles"
#define PROPTITLES_ASSEMBLY_NAME_W                                                                    L"proptitles"
#define PROPTITLES_ASSEMBLY_NAME_S                                                                    S"proptitles"
#define PROPTITLES_ASSEMBLY_NAME_T                                                                TEXT("proptitles")
#define PROPTITLES_ASSEMBLY_VERSION                                                                     12.4.56.0
#define PROPTITLES_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define PROPTITLES_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define PROPTITLES_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define PROPTITLES_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define PROPTITLES_ASSEMBLY_CULTURE                                                                     neutral
#define PROPTITLES_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define PROPTITLES_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define PROPTITLES_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define PROPTITLES_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define REMOTESERVICE_ASSEMBLY_IDENTITY_DEF                                                             remoteservice,version=12.4.56.0,culture=neutral
#define REMOTESERVICE_ASSEMBLY_IDENTITY_DEF_A                                                          "remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_DEF_W                                                         L"remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_DEF_S                                                         S"remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("remoteservice,version=12.4.56.0,culture=neutral")
#define REMOTESERVICE_ASSEMBLY_IDENTITY_REF                                                             remoteservice,version=12.4.56.0,culture=neutral
#define REMOTESERVICE_ASSEMBLY_IDENTITY_REF_A                                                          "remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_REF_W                                                         L"remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_REF_S                                                         S"remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("remoteservice,version=12.4.56.0,culture=neutral")
#define REMOTESERVICE_ASSEMBLY_IDENTITY_EXACT_REF                                                       remoteservice,version=12.4.56.0,culture=neutral
#define REMOTESERVICE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"remoteservice,version=12.4.56.0,culture=neutral"
#define REMOTESERVICE_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("remoteservice,version=12.4.56.0,culture=neutral")
#define REMOTESERVICE_ASSEMBLY_NAME                                                                     remoteservice
#define REMOTESERVICE_ASSEMBLY_NAME_A                                                                  "remoteservice"
#define REMOTESERVICE_ASSEMBLY_NAME_W                                                                 L"remoteservice"
#define REMOTESERVICE_ASSEMBLY_NAME_S                                                                 S"remoteservice"
#define REMOTESERVICE_ASSEMBLY_NAME_T                                                             TEXT("remoteservice")
#define REMOTESERVICE_ASSEMBLY_VERSION                                                                  12.4.56.0
#define REMOTESERVICE_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define REMOTESERVICE_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define REMOTESERVICE_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define REMOTESERVICE_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define REMOTESERVICE_ASSEMBLY_CULTURE                                                                  neutral
#define REMOTESERVICE_ASSEMBLY_CULTURE_A                                                               "neutral"
#define REMOTESERVICE_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define REMOTESERVICE_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define REMOTESERVICE_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_DEF                                                            _integration_4,version=12.4.56.0,culture=neutral
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_DEF_A                                                         "_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_DEF_W                                                        L"_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_DEF_S                                                        S"_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_integration_4,version=12.4.56.0,culture=neutral")
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_REF                                                            _integration_4,version=12.4.56.0,culture=neutral
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_REF_A                                                         "_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_REF_W                                                        L"_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_REF_S                                                        S"_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_integration_4,version=12.4.56.0,culture=neutral")
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_EXACT_REF                                                      _integration_4,version=12.4.56.0,culture=neutral
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_integration_4,version=12.4.56.0,culture=neutral"
#define _INTEGRATION_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_integration_4,version=12.4.56.0,culture=neutral")
#define _INTEGRATION_4_ASSEMBLY_NAME                                                                    _integration_4
#define _INTEGRATION_4_ASSEMBLY_NAME_A                                                                 "_integration_4"
#define _INTEGRATION_4_ASSEMBLY_NAME_W                                                                L"_integration_4"
#define _INTEGRATION_4_ASSEMBLY_NAME_S                                                                S"_integration_4"
#define _INTEGRATION_4_ASSEMBLY_NAME_T                                                            TEXT("_integration_4")
#define _INTEGRATION_4_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _INTEGRATION_4_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _INTEGRATION_4_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _INTEGRATION_4_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _INTEGRATION_4_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _INTEGRATION_4_ASSEMBLY_CULTURE                                                                 neutral
#define _INTEGRATION_4_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _INTEGRATION_4_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _INTEGRATION_4_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _INTEGRATION_4_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define SPSMON_ASSEMBLY_IDENTITY_DEF                                                                    spsmon,version=12.4.56.0,culture=neutral
#define SPSMON_ASSEMBLY_IDENTITY_DEF_A                                                                 "spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_DEF_W                                                                L"spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_DEF_S                                                                S"spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_DEF_T                                                            TEXT("spsmon,version=12.4.56.0,culture=neutral")
#define SPSMON_ASSEMBLY_IDENTITY_REF                                                                    spsmon,version=12.4.56.0,culture=neutral
#define SPSMON_ASSEMBLY_IDENTITY_REF_A                                                                 "spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_REF_W                                                                L"spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_REF_S                                                                S"spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_REF_T                                                            TEXT("spsmon,version=12.4.56.0,culture=neutral")
#define SPSMON_ASSEMBLY_IDENTITY_EXACT_REF                                                              spsmon,version=12.4.56.0,culture=neutral
#define SPSMON_ASSEMBLY_IDENTITY_EXACT_REF_A                                                           "spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_EXACT_REF_W                                                          L"spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_EXACT_REF_S                                                          S"spsmon,version=12.4.56.0,culture=neutral"
#define SPSMON_ASSEMBLY_IDENTITY_EXACT_REF_T                                                      TEXT("spsmon,version=12.4.56.0,culture=neutral")
#define SPSMON_ASSEMBLY_NAME                                                                            spsmon
#define SPSMON_ASSEMBLY_NAME_A                                                                         "spsmon"
#define SPSMON_ASSEMBLY_NAME_W                                                                        L"spsmon"
#define SPSMON_ASSEMBLY_NAME_S                                                                        S"spsmon"
#define SPSMON_ASSEMBLY_NAME_T                                                                    TEXT("spsmon")
#define SPSMON_ASSEMBLY_VERSION                                                                         12.4.56.0
#define SPSMON_ASSEMBLY_VERSION_A                                                                      "12.4.56.0"
#define SPSMON_ASSEMBLY_VERSION_W                                                                     L"12.4.56.0"
#define SPSMON_ASSEMBLY_VERSION_S                                                                     S"12.4.56.0"
#define SPSMON_ASSEMBLY_VERSION_T                                                                 TEXT("12.4.56.0")
#define SPSMON_ASSEMBLY_CULTURE                                                                         neutral
#define SPSMON_ASSEMBLY_CULTURE_A                                                                      "neutral"
#define SPSMON_ASSEMBLY_CULTURE_W                                                                     L"neutral"
#define SPSMON_ASSEMBLY_CULTURE_S                                                                     S"neutral"
#define SPSMON_ASSEMBLY_CULTURE_T                                                                 TEXT("neutral")
#define USERINTEGRITY_ASSEMBLY_IDENTITY_DEF                                                             userintegrity,version=12.4.56.0,culture=neutral
#define USERINTEGRITY_ASSEMBLY_IDENTITY_DEF_A                                                          "userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_DEF_W                                                         L"userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_DEF_S                                                         S"userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("userintegrity,version=12.4.56.0,culture=neutral")
#define USERINTEGRITY_ASSEMBLY_IDENTITY_REF                                                             userintegrity,version=12.4.56.0,culture=neutral
#define USERINTEGRITY_ASSEMBLY_IDENTITY_REF_A                                                          "userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_REF_W                                                         L"userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_REF_S                                                         S"userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("userintegrity,version=12.4.56.0,culture=neutral")
#define USERINTEGRITY_ASSEMBLY_IDENTITY_EXACT_REF                                                       userintegrity,version=12.4.56.0,culture=neutral
#define USERINTEGRITY_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"userintegrity,version=12.4.56.0,culture=neutral"
#define USERINTEGRITY_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("userintegrity,version=12.4.56.0,culture=neutral")
#define USERINTEGRITY_ASSEMBLY_NAME                                                                     userintegrity
#define USERINTEGRITY_ASSEMBLY_NAME_A                                                                  "userintegrity"
#define USERINTEGRITY_ASSEMBLY_NAME_W                                                                 L"userintegrity"
#define USERINTEGRITY_ASSEMBLY_NAME_S                                                                 S"userintegrity"
#define USERINTEGRITY_ASSEMBLY_NAME_T                                                             TEXT("userintegrity")
#define USERINTEGRITY_ASSEMBLY_VERSION                                                                  12.4.56.0
#define USERINTEGRITY_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define USERINTEGRITY_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define USERINTEGRITY_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define USERINTEGRITY_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define USERINTEGRITY_ASSEMBLY_CULTURE                                                                  neutral
#define USERINTEGRITY_ASSEMBLY_CULTURE_A                                                               "neutral"
#define USERINTEGRITY_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define USERINTEGRITY_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define USERINTEGRITY_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define USERPROFILE_ASSEMBLY_IDENTITY_DEF                                                               userprofile,version=12.4.56.0,culture=neutral
#define USERPROFILE_ASSEMBLY_IDENTITY_DEF_A                                                            "userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_DEF_W                                                           L"userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_DEF_S                                                           S"userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("userprofile,version=12.4.56.0,culture=neutral")
#define USERPROFILE_ASSEMBLY_IDENTITY_REF                                                               userprofile,version=12.4.56.0,culture=neutral
#define USERPROFILE_ASSEMBLY_IDENTITY_REF_A                                                            "userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_REF_W                                                           L"userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_REF_S                                                           S"userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("userprofile,version=12.4.56.0,culture=neutral")
#define USERPROFILE_ASSEMBLY_IDENTITY_EXACT_REF                                                         userprofile,version=12.4.56.0,culture=neutral
#define USERPROFILE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"userprofile,version=12.4.56.0,culture=neutral"
#define USERPROFILE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("userprofile,version=12.4.56.0,culture=neutral")
#define USERPROFILE_ASSEMBLY_NAME                                                                       userprofile
#define USERPROFILE_ASSEMBLY_NAME_A                                                                    "userprofile"
#define USERPROFILE_ASSEMBLY_NAME_W                                                                   L"userprofile"
#define USERPROFILE_ASSEMBLY_NAME_S                                                                   S"userprofile"
#define USERPROFILE_ASSEMBLY_NAME_T                                                               TEXT("userprofile")
#define USERPROFILE_ASSEMBLY_VERSION                                                                    12.4.56.0
#define USERPROFILE_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define USERPROFILE_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define USERPROFILE_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define USERPROFILE_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define USERPROFILE_ASSEMBLY_CULTURE                                                                    neutral
#define USERPROFILE_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define USERPROFILE_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define USERPROFILE_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define USERPROFILE_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define LISTUSERS_ASSEMBLY_IDENTITY_DEF                                                                 listusers,version=12.4.56.0,culture=neutral
#define LISTUSERS_ASSEMBLY_IDENTITY_DEF_A                                                              "listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_DEF_W                                                             L"listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_DEF_S                                                             S"listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("listusers,version=12.4.56.0,culture=neutral")
#define LISTUSERS_ASSEMBLY_IDENTITY_REF                                                                 listusers,version=12.4.56.0,culture=neutral
#define LISTUSERS_ASSEMBLY_IDENTITY_REF_A                                                              "listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_REF_W                                                             L"listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_REF_S                                                             S"listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("listusers,version=12.4.56.0,culture=neutral")
#define LISTUSERS_ASSEMBLY_IDENTITY_EXACT_REF                                                           listusers,version=12.4.56.0,culture=neutral
#define LISTUSERS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"listusers,version=12.4.56.0,culture=neutral"
#define LISTUSERS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("listusers,version=12.4.56.0,culture=neutral")
#define LISTUSERS_ASSEMBLY_NAME                                                                         listusers
#define LISTUSERS_ASSEMBLY_NAME_A                                                                      "listusers"
#define LISTUSERS_ASSEMBLY_NAME_W                                                                     L"listusers"
#define LISTUSERS_ASSEMBLY_NAME_S                                                                     S"listusers"
#define LISTUSERS_ASSEMBLY_NAME_T                                                                 TEXT("listusers")
#define LISTUSERS_ASSEMBLY_VERSION                                                                      12.4.56.0
#define LISTUSERS_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define LISTUSERS_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define LISTUSERS_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define LISTUSERS_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define LISTUSERS_ASSEMBLY_CULTURE                                                                      neutral
#define LISTUSERS_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define LISTUSERS_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define LISTUSERS_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define LISTUSERS_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define BULKUSERS_ASSEMBLY_IDENTITY_DEF                                                                 bulkusers,version=12.4.56.0,culture=neutral
#define BULKUSERS_ASSEMBLY_IDENTITY_DEF_A                                                              "bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_DEF_W                                                             L"bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_DEF_S                                                             S"bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("bulkusers,version=12.4.56.0,culture=neutral")
#define BULKUSERS_ASSEMBLY_IDENTITY_REF                                                                 bulkusers,version=12.4.56.0,culture=neutral
#define BULKUSERS_ASSEMBLY_IDENTITY_REF_A                                                              "bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_REF_W                                                             L"bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_REF_S                                                             S"bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("bulkusers,version=12.4.56.0,culture=neutral")
#define BULKUSERS_ASSEMBLY_IDENTITY_EXACT_REF                                                           bulkusers,version=12.4.56.0,culture=neutral
#define BULKUSERS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"bulkusers,version=12.4.56.0,culture=neutral"
#define BULKUSERS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("bulkusers,version=12.4.56.0,culture=neutral")
#define BULKUSERS_ASSEMBLY_NAME                                                                         bulkusers
#define BULKUSERS_ASSEMBLY_NAME_A                                                                      "bulkusers"
#define BULKUSERS_ASSEMBLY_NAME_W                                                                     L"bulkusers"
#define BULKUSERS_ASSEMBLY_NAME_S                                                                     S"bulkusers"
#define BULKUSERS_ASSEMBLY_NAME_T                                                                 TEXT("bulkusers")
#define BULKUSERS_ASSEMBLY_VERSION                                                                      12.4.56.0
#define BULKUSERS_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define BULKUSERS_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define BULKUSERS_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define BULKUSERS_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define BULKUSERS_ASSEMBLY_CULTURE                                                                      neutral
#define BULKUSERS_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define BULKUSERS_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define BULKUSERS_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define BULKUSERS_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define BULKMACHINES_ASSEMBLY_IDENTITY_DEF                                                              bulkmachines,version=12.4.56.0,culture=neutral
#define BULKMACHINES_ASSEMBLY_IDENTITY_DEF_A                                                           "bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_DEF_W                                                          L"bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_DEF_S                                                          S"bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("bulkmachines,version=12.4.56.0,culture=neutral")
#define BULKMACHINES_ASSEMBLY_IDENTITY_REF                                                              bulkmachines,version=12.4.56.0,culture=neutral
#define BULKMACHINES_ASSEMBLY_IDENTITY_REF_A                                                           "bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_REF_W                                                          L"bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_REF_S                                                          S"bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("bulkmachines,version=12.4.56.0,culture=neutral")
#define BULKMACHINES_ASSEMBLY_IDENTITY_EXACT_REF                                                        bulkmachines,version=12.4.56.0,culture=neutral
#define BULKMACHINES_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"bulkmachines,version=12.4.56.0,culture=neutral"
#define BULKMACHINES_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("bulkmachines,version=12.4.56.0,culture=neutral")
#define BULKMACHINES_ASSEMBLY_NAME                                                                      bulkmachines
#define BULKMACHINES_ASSEMBLY_NAME_A                                                                   "bulkmachines"
#define BULKMACHINES_ASSEMBLY_NAME_W                                                                  L"bulkmachines"
#define BULKMACHINES_ASSEMBLY_NAME_S                                                                  S"bulkmachines"
#define BULKMACHINES_ASSEMBLY_NAME_T                                                              TEXT("bulkmachines")
#define BULKMACHINES_ASSEMBLY_VERSION                                                                   12.4.56.0
#define BULKMACHINES_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define BULKMACHINES_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define BULKMACHINES_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define BULKMACHINES_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define BULKMACHINES_ASSEMBLY_CULTURE                                                                   neutral
#define BULKMACHINES_ASSEMBLY_CULTURE_A                                                                "neutral"
#define BULKMACHINES_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define BULKMACHINES_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define BULKMACHINES_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define CREATEUSER_ASSEMBLY_IDENTITY_DEF                                                                createuser,version=12.4.56.0,culture=neutral
#define CREATEUSER_ASSEMBLY_IDENTITY_DEF_A                                                             "createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_DEF_W                                                            L"createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_DEF_S                                                            S"createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("createuser,version=12.4.56.0,culture=neutral")
#define CREATEUSER_ASSEMBLY_IDENTITY_REF                                                                createuser,version=12.4.56.0,culture=neutral
#define CREATEUSER_ASSEMBLY_IDENTITY_REF_A                                                             "createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_REF_W                                                            L"createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_REF_S                                                            S"createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("createuser,version=12.4.56.0,culture=neutral")
#define CREATEUSER_ASSEMBLY_IDENTITY_EXACT_REF                                                          createuser,version=12.4.56.0,culture=neutral
#define CREATEUSER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"createuser,version=12.4.56.0,culture=neutral"
#define CREATEUSER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("createuser,version=12.4.56.0,culture=neutral")
#define CREATEUSER_ASSEMBLY_NAME                                                                        createuser
#define CREATEUSER_ASSEMBLY_NAME_A                                                                     "createuser"
#define CREATEUSER_ASSEMBLY_NAME_W                                                                    L"createuser"
#define CREATEUSER_ASSEMBLY_NAME_S                                                                    S"createuser"
#define CREATEUSER_ASSEMBLY_NAME_T                                                                TEXT("createuser")
#define CREATEUSER_ASSEMBLY_VERSION                                                                     12.4.56.0
#define CREATEUSER_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define CREATEUSER_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define CREATEUSER_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define CREATEUSER_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define CREATEUSER_ASSEMBLY_CULTURE                                                                     neutral
#define CREATEUSER_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define CREATEUSER_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define CREATEUSER_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define CREATEUSER_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define IFNC_ASSEMBLY_IDENTITY_DEF                                                                      ifnc,version=12.4.56.0,culture=neutral
#define IFNC_ASSEMBLY_IDENTITY_DEF_A                                                                   "ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_DEF_W                                                                  L"ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_DEF_S                                                                  S"ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_DEF_T                                                              TEXT("ifnc,version=12.4.56.0,culture=neutral")
#define IFNC_ASSEMBLY_IDENTITY_REF                                                                      ifnc,version=12.4.56.0,culture=neutral
#define IFNC_ASSEMBLY_IDENTITY_REF_A                                                                   "ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_REF_W                                                                  L"ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_REF_S                                                                  S"ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_REF_T                                                              TEXT("ifnc,version=12.4.56.0,culture=neutral")
#define IFNC_ASSEMBLY_IDENTITY_EXACT_REF                                                                ifnc,version=12.4.56.0,culture=neutral
#define IFNC_ASSEMBLY_IDENTITY_EXACT_REF_A                                                             "ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_EXACT_REF_W                                                            L"ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_EXACT_REF_S                                                            S"ifnc,version=12.4.56.0,culture=neutral"
#define IFNC_ASSEMBLY_IDENTITY_EXACT_REF_T                                                        TEXT("ifnc,version=12.4.56.0,culture=neutral")
#define IFNC_ASSEMBLY_NAME                                                                              ifnc
#define IFNC_ASSEMBLY_NAME_A                                                                           "ifnc"
#define IFNC_ASSEMBLY_NAME_W                                                                          L"ifnc"
#define IFNC_ASSEMBLY_NAME_S                                                                          S"ifnc"
#define IFNC_ASSEMBLY_NAME_T                                                                      TEXT("ifnc")
#define IFNC_ASSEMBLY_VERSION                                                                           12.4.56.0
#define IFNC_ASSEMBLY_VERSION_A                                                                        "12.4.56.0"
#define IFNC_ASSEMBLY_VERSION_W                                                                       L"12.4.56.0"
#define IFNC_ASSEMBLY_VERSION_S                                                                       S"12.4.56.0"
#define IFNC_ASSEMBLY_VERSION_T                                                                   TEXT("12.4.56.0")
#define IFNC_ASSEMBLY_CULTURE                                                                           neutral
#define IFNC_ASSEMBLY_CULTURE_A                                                                        "neutral"
#define IFNC_ASSEMBLY_CULTURE_W                                                                       L"neutral"
#define IFNC_ASSEMBLY_CULTURE_S                                                                       S"neutral"
#define IFNC_ASSEMBLY_CULTURE_T                                                                   TEXT("neutral")
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_DEF                                                           tokenimporttest,version=12.4.56.0,culture=neutral
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_DEF_A                                                        "tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_DEF_W                                                       L"tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_DEF_S                                                       S"tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("tokenimporttest,version=12.4.56.0,culture=neutral")
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_REF                                                           tokenimporttest,version=12.4.56.0,culture=neutral
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_REF_A                                                        "tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_REF_W                                                       L"tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_REF_S                                                       S"tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("tokenimporttest,version=12.4.56.0,culture=neutral")
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                     tokenimporttest,version=12.4.56.0,culture=neutral
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"tokenimporttest,version=12.4.56.0,culture=neutral"
#define TOKENIMPORTTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("tokenimporttest,version=12.4.56.0,culture=neutral")
#define TOKENIMPORTTEST_ASSEMBLY_NAME                                                                   tokenimporttest
#define TOKENIMPORTTEST_ASSEMBLY_NAME_A                                                                "tokenimporttest"
#define TOKENIMPORTTEST_ASSEMBLY_NAME_W                                                               L"tokenimporttest"
#define TOKENIMPORTTEST_ASSEMBLY_NAME_S                                                               S"tokenimporttest"
#define TOKENIMPORTTEST_ASSEMBLY_NAME_T                                                           TEXT("tokenimporttest")
#define TOKENIMPORTTEST_ASSEMBLY_VERSION                                                                12.4.56.0
#define TOKENIMPORTTEST_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define TOKENIMPORTTEST_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define TOKENIMPORTTEST_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define TOKENIMPORTTEST_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define TOKENIMPORTTEST_ASSEMBLY_CULTURE                                                                neutral
#define TOKENIMPORTTEST_ASSEMBLY_CULTURE_A                                                             "neutral"
#define TOKENIMPORTTEST_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define TOKENIMPORTTEST_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define TOKENIMPORTTEST_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define W3WPLIST_ASSEMBLY_IDENTITY_DEF                                                                  w3wplist,version=12.4.56.0,culture=neutral
#define W3WPLIST_ASSEMBLY_IDENTITY_DEF_A                                                               "w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_DEF_W                                                              L"w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_DEF_S                                                              S"w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("w3wplist,version=12.4.56.0,culture=neutral")
#define W3WPLIST_ASSEMBLY_IDENTITY_REF                                                                  w3wplist,version=12.4.56.0,culture=neutral
#define W3WPLIST_ASSEMBLY_IDENTITY_REF_A                                                               "w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_REF_W                                                              L"w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_REF_S                                                              S"w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("w3wplist,version=12.4.56.0,culture=neutral")
#define W3WPLIST_ASSEMBLY_IDENTITY_EXACT_REF                                                            w3wplist,version=12.4.56.0,culture=neutral
#define W3WPLIST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"w3wplist,version=12.4.56.0,culture=neutral"
#define W3WPLIST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("w3wplist,version=12.4.56.0,culture=neutral")
#define W3WPLIST_ASSEMBLY_NAME                                                                          w3wplist
#define W3WPLIST_ASSEMBLY_NAME_A                                                                       "w3wplist"
#define W3WPLIST_ASSEMBLY_NAME_W                                                                      L"w3wplist"
#define W3WPLIST_ASSEMBLY_NAME_S                                                                      S"w3wplist"
#define W3WPLIST_ASSEMBLY_NAME_T                                                                  TEXT("w3wplist")
#define W3WPLIST_ASSEMBLY_VERSION                                                                       12.4.56.0
#define W3WPLIST_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define W3WPLIST_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define W3WPLIST_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define W3WPLIST_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define W3WPLIST_ASSEMBLY_CULTURE                                                                       neutral
#define W3WPLIST_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define W3WPLIST_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define W3WPLIST_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define W3WPLIST_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define DBPOSTER_ASSEMBLY_IDENTITY_DEF                                                                  dbposter,version=12.4.56.0,culture=neutral
#define DBPOSTER_ASSEMBLY_IDENTITY_DEF_A                                                               "dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_DEF_W                                                              L"dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_DEF_S                                                              S"dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("dbposter,version=12.4.56.0,culture=neutral")
#define DBPOSTER_ASSEMBLY_IDENTITY_REF                                                                  dbposter,version=12.4.56.0,culture=neutral
#define DBPOSTER_ASSEMBLY_IDENTITY_REF_A                                                               "dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_REF_W                                                              L"dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_REF_S                                                              S"dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("dbposter,version=12.4.56.0,culture=neutral")
#define DBPOSTER_ASSEMBLY_IDENTITY_EXACT_REF                                                            dbposter,version=12.4.56.0,culture=neutral
#define DBPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"dbposter,version=12.4.56.0,culture=neutral"
#define DBPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("dbposter,version=12.4.56.0,culture=neutral")
#define DBPOSTER_ASSEMBLY_NAME                                                                          dbposter
#define DBPOSTER_ASSEMBLY_NAME_A                                                                       "dbposter"
#define DBPOSTER_ASSEMBLY_NAME_W                                                                      L"dbposter"
#define DBPOSTER_ASSEMBLY_NAME_S                                                                      S"dbposter"
#define DBPOSTER_ASSEMBLY_NAME_T                                                                  TEXT("dbposter")
#define DBPOSTER_ASSEMBLY_VERSION                                                                       12.4.56.0
#define DBPOSTER_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define DBPOSTER_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define DBPOSTER_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define DBPOSTER_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define DBPOSTER_ASSEMBLY_CULTURE                                                                       neutral
#define DBPOSTER_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define DBPOSTER_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define DBPOSTER_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define DBPOSTER_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define DECRYPTKEY_ASSEMBLY_IDENTITY_DEF                                                                decryptkey,version=12.4.56.0,culture=neutral
#define DECRYPTKEY_ASSEMBLY_IDENTITY_DEF_A                                                             "decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_DEF_W                                                            L"decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_DEF_S                                                            S"decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("decryptkey,version=12.4.56.0,culture=neutral")
#define DECRYPTKEY_ASSEMBLY_IDENTITY_REF                                                                decryptkey,version=12.4.56.0,culture=neutral
#define DECRYPTKEY_ASSEMBLY_IDENTITY_REF_A                                                             "decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_REF_W                                                            L"decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_REF_S                                                            S"decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("decryptkey,version=12.4.56.0,culture=neutral")
#define DECRYPTKEY_ASSEMBLY_IDENTITY_EXACT_REF                                                          decryptkey,version=12.4.56.0,culture=neutral
#define DECRYPTKEY_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"decryptkey,version=12.4.56.0,culture=neutral"
#define DECRYPTKEY_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("decryptkey,version=12.4.56.0,culture=neutral")
#define DECRYPTKEY_ASSEMBLY_NAME                                                                        decryptkey
#define DECRYPTKEY_ASSEMBLY_NAME_A                                                                     "decryptkey"
#define DECRYPTKEY_ASSEMBLY_NAME_W                                                                    L"decryptkey"
#define DECRYPTKEY_ASSEMBLY_NAME_S                                                                    S"decryptkey"
#define DECRYPTKEY_ASSEMBLY_NAME_T                                                                TEXT("decryptkey")
#define DECRYPTKEY_ASSEMBLY_VERSION                                                                     12.4.56.0
#define DECRYPTKEY_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define DECRYPTKEY_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define DECRYPTKEY_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define DECRYPTKEY_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define DECRYPTKEY_ASSEMBLY_CULTURE                                                                     neutral
#define DECRYPTKEY_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define DECRYPTKEY_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define DECRYPTKEY_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define DECRYPTKEY_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define DBLOOKUP_ASSEMBLY_IDENTITY_DEF                                                                  dblookup,version=12.4.56.0,culture=neutral
#define DBLOOKUP_ASSEMBLY_IDENTITY_DEF_A                                                               "dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_DEF_W                                                              L"dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_DEF_S                                                              S"dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("dblookup,version=12.4.56.0,culture=neutral")
#define DBLOOKUP_ASSEMBLY_IDENTITY_REF                                                                  dblookup,version=12.4.56.0,culture=neutral
#define DBLOOKUP_ASSEMBLY_IDENTITY_REF_A                                                               "dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_REF_W                                                              L"dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_REF_S                                                              S"dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("dblookup,version=12.4.56.0,culture=neutral")
#define DBLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF                                                            dblookup,version=12.4.56.0,culture=neutral
#define DBLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"dblookup,version=12.4.56.0,culture=neutral"
#define DBLOOKUP_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("dblookup,version=12.4.56.0,culture=neutral")
#define DBLOOKUP_ASSEMBLY_NAME                                                                          dblookup
#define DBLOOKUP_ASSEMBLY_NAME_A                                                                       "dblookup"
#define DBLOOKUP_ASSEMBLY_NAME_W                                                                      L"dblookup"
#define DBLOOKUP_ASSEMBLY_NAME_S                                                                      S"dblookup"
#define DBLOOKUP_ASSEMBLY_NAME_T                                                                  TEXT("dblookup")
#define DBLOOKUP_ASSEMBLY_VERSION                                                                       12.4.56.0
#define DBLOOKUP_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define DBLOOKUP_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define DBLOOKUP_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define DBLOOKUP_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define DBLOOKUP_ASSEMBLY_CULTURE                                                                       neutral
#define DBLOOKUP_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define DBLOOKUP_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define DBLOOKUP_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define DBLOOKUP_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_DEF                                                             getlivebldver,version=12.4.56.0,culture=neutral
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_DEF_A                                                          "getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_DEF_W                                                         L"getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_DEF_S                                                         S"getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("getlivebldver,version=12.4.56.0,culture=neutral")
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_REF                                                             getlivebldver,version=12.4.56.0,culture=neutral
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_REF_A                                                          "getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_REF_W                                                         L"getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_REF_S                                                         S"getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("getlivebldver,version=12.4.56.0,culture=neutral")
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_EXACT_REF                                                       getlivebldver,version=12.4.56.0,culture=neutral
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"getlivebldver,version=12.4.56.0,culture=neutral"
#define GETLIVEBLDVER_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("getlivebldver,version=12.4.56.0,culture=neutral")
#define GETLIVEBLDVER_ASSEMBLY_NAME                                                                     getlivebldver
#define GETLIVEBLDVER_ASSEMBLY_NAME_A                                                                  "getlivebldver"
#define GETLIVEBLDVER_ASSEMBLY_NAME_W                                                                 L"getlivebldver"
#define GETLIVEBLDVER_ASSEMBLY_NAME_S                                                                 S"getlivebldver"
#define GETLIVEBLDVER_ASSEMBLY_NAME_T                                                             TEXT("getlivebldver")
#define GETLIVEBLDVER_ASSEMBLY_VERSION                                                                  12.4.56.0
#define GETLIVEBLDVER_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define GETLIVEBLDVER_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define GETLIVEBLDVER_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define GETLIVEBLDVER_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define GETLIVEBLDVER_ASSEMBLY_CULTURE                                                                  neutral
#define GETLIVEBLDVER_ASSEMBLY_CULTURE_A                                                               "neutral"
#define GETLIVEBLDVER_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define GETLIVEBLDVER_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define GETLIVEBLDVER_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define DISABLESUB_ASSEMBLY_IDENTITY_DEF                                                                disablesub,version=12.4.56.0,culture=neutral
#define DISABLESUB_ASSEMBLY_IDENTITY_DEF_A                                                             "disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_DEF_W                                                            L"disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_DEF_S                                                            S"disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("disablesub,version=12.4.56.0,culture=neutral")
#define DISABLESUB_ASSEMBLY_IDENTITY_REF                                                                disablesub,version=12.4.56.0,culture=neutral
#define DISABLESUB_ASSEMBLY_IDENTITY_REF_A                                                             "disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_REF_W                                                            L"disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_REF_S                                                            S"disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("disablesub,version=12.4.56.0,culture=neutral")
#define DISABLESUB_ASSEMBLY_IDENTITY_EXACT_REF                                                          disablesub,version=12.4.56.0,culture=neutral
#define DISABLESUB_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"disablesub,version=12.4.56.0,culture=neutral"
#define DISABLESUB_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("disablesub,version=12.4.56.0,culture=neutral")
#define DISABLESUB_ASSEMBLY_NAME                                                                        disablesub
#define DISABLESUB_ASSEMBLY_NAME_A                                                                     "disablesub"
#define DISABLESUB_ASSEMBLY_NAME_W                                                                    L"disablesub"
#define DISABLESUB_ASSEMBLY_NAME_S                                                                    S"disablesub"
#define DISABLESUB_ASSEMBLY_NAME_T                                                                TEXT("disablesub")
#define DISABLESUB_ASSEMBLY_VERSION                                                                     12.4.56.0
#define DISABLESUB_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define DISABLESUB_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define DISABLESUB_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define DISABLESUB_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define DISABLESUB_ASSEMBLY_CULTURE                                                                     neutral
#define DISABLESUB_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define DISABLESUB_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define DISABLESUB_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define DISABLESUB_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define BULKFRIENDS_ASSEMBLY_IDENTITY_DEF                                                               bulkfriends,version=12.4.56.0,culture=neutral
#define BULKFRIENDS_ASSEMBLY_IDENTITY_DEF_A                                                            "bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_DEF_W                                                           L"bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_DEF_S                                                           S"bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("bulkfriends,version=12.4.56.0,culture=neutral")
#define BULKFRIENDS_ASSEMBLY_IDENTITY_REF                                                               bulkfriends,version=12.4.56.0,culture=neutral
#define BULKFRIENDS_ASSEMBLY_IDENTITY_REF_A                                                            "bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_REF_W                                                           L"bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_REF_S                                                           S"bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("bulkfriends,version=12.4.56.0,culture=neutral")
#define BULKFRIENDS_ASSEMBLY_IDENTITY_EXACT_REF                                                         bulkfriends,version=12.4.56.0,culture=neutral
#define BULKFRIENDS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"bulkfriends,version=12.4.56.0,culture=neutral"
#define BULKFRIENDS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("bulkfriends,version=12.4.56.0,culture=neutral")
#define BULKFRIENDS_ASSEMBLY_NAME                                                                       bulkfriends
#define BULKFRIENDS_ASSEMBLY_NAME_A                                                                    "bulkfriends"
#define BULKFRIENDS_ASSEMBLY_NAME_W                                                                   L"bulkfriends"
#define BULKFRIENDS_ASSEMBLY_NAME_S                                                                   S"bulkfriends"
#define BULKFRIENDS_ASSEMBLY_NAME_T                                                               TEXT("bulkfriends")
#define BULKFRIENDS_ASSEMBLY_VERSION                                                                    12.4.56.0
#define BULKFRIENDS_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define BULKFRIENDS_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define BULKFRIENDS_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define BULKFRIENDS_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define BULKFRIENDS_ASSEMBLY_CULTURE                                                                    neutral
#define BULKFRIENDS_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define BULKFRIENDS_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define BULKFRIENDS_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define BULKFRIENDS_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define PROPTITLE_ASSEMBLY_IDENTITY_DEF                                                                 proptitle,version=12.4.56.0,culture=neutral
#define PROPTITLE_ASSEMBLY_IDENTITY_DEF_A                                                              "proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_DEF_W                                                             L"proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_DEF_S                                                             S"proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("proptitle,version=12.4.56.0,culture=neutral")
#define PROPTITLE_ASSEMBLY_IDENTITY_REF                                                                 proptitle,version=12.4.56.0,culture=neutral
#define PROPTITLE_ASSEMBLY_IDENTITY_REF_A                                                              "proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_REF_W                                                             L"proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_REF_S                                                             S"proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("proptitle,version=12.4.56.0,culture=neutral")
#define PROPTITLE_ASSEMBLY_IDENTITY_EXACT_REF                                                           proptitle,version=12.4.56.0,culture=neutral
#define PROPTITLE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"proptitle,version=12.4.56.0,culture=neutral"
#define PROPTITLE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("proptitle,version=12.4.56.0,culture=neutral")
#define PROPTITLE_ASSEMBLY_NAME                                                                         proptitle
#define PROPTITLE_ASSEMBLY_NAME_A                                                                      "proptitle"
#define PROPTITLE_ASSEMBLY_NAME_W                                                                     L"proptitle"
#define PROPTITLE_ASSEMBLY_NAME_S                                                                     S"proptitle"
#define PROPTITLE_ASSEMBLY_NAME_T                                                                 TEXT("proptitle")
#define PROPTITLE_ASSEMBLY_VERSION                                                                      12.4.56.0
#define PROPTITLE_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define PROPTITLE_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define PROPTITLE_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define PROPTITLE_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define PROPTITLE_ASSEMBLY_CULTURE                                                                      neutral
#define PROPTITLE_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define PROPTITLE_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define PROPTITLE_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define PROPTITLE_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define TCPRELAY_ASSEMBLY_IDENTITY_DEF                                                                  tcprelay,version=12.4.56.0,culture=neutral
#define TCPRELAY_ASSEMBLY_IDENTITY_DEF_A                                                               "tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_DEF_W                                                              L"tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_DEF_S                                                              S"tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("tcprelay,version=12.4.56.0,culture=neutral")
#define TCPRELAY_ASSEMBLY_IDENTITY_REF                                                                  tcprelay,version=12.4.56.0,culture=neutral
#define TCPRELAY_ASSEMBLY_IDENTITY_REF_A                                                               "tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_REF_W                                                              L"tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_REF_S                                                              S"tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("tcprelay,version=12.4.56.0,culture=neutral")
#define TCPRELAY_ASSEMBLY_IDENTITY_EXACT_REF                                                            tcprelay,version=12.4.56.0,culture=neutral
#define TCPRELAY_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"tcprelay,version=12.4.56.0,culture=neutral"
#define TCPRELAY_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("tcprelay,version=12.4.56.0,culture=neutral")
#define TCPRELAY_ASSEMBLY_NAME                                                                          tcprelay
#define TCPRELAY_ASSEMBLY_NAME_A                                                                       "tcprelay"
#define TCPRELAY_ASSEMBLY_NAME_W                                                                      L"tcprelay"
#define TCPRELAY_ASSEMBLY_NAME_S                                                                      S"tcprelay"
#define TCPRELAY_ASSEMBLY_NAME_T                                                                  TEXT("tcprelay")
#define TCPRELAY_ASSEMBLY_VERSION                                                                       12.4.56.0
#define TCPRELAY_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define TCPRELAY_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define TCPRELAY_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define TCPRELAY_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define TCPRELAY_ASSEMBLY_CULTURE                                                                       neutral
#define TCPRELAY_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define TCPRELAY_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define TCPRELAY_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define TCPRELAY_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_DEF                                                             schemadiffapi,version=12.4.56.0,culture=neutral
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_DEF_A                                                          "schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_DEF_W                                                         L"schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_DEF_S                                                         S"schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("schemadiffapi,version=12.4.56.0,culture=neutral")
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_REF                                                             schemadiffapi,version=12.4.56.0,culture=neutral
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_REF_A                                                          "schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_REF_W                                                         L"schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_REF_S                                                         S"schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("schemadiffapi,version=12.4.56.0,culture=neutral")
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_EXACT_REF                                                       schemadiffapi,version=12.4.56.0,culture=neutral
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"schemadiffapi,version=12.4.56.0,culture=neutral"
#define SCHEMADIFFAPI_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("schemadiffapi,version=12.4.56.0,culture=neutral")
#define SCHEMADIFFAPI_ASSEMBLY_NAME                                                                     schemadiffapi
#define SCHEMADIFFAPI_ASSEMBLY_NAME_A                                                                  "schemadiffapi"
#define SCHEMADIFFAPI_ASSEMBLY_NAME_W                                                                 L"schemadiffapi"
#define SCHEMADIFFAPI_ASSEMBLY_NAME_S                                                                 S"schemadiffapi"
#define SCHEMADIFFAPI_ASSEMBLY_NAME_T                                                             TEXT("schemadiffapi")
#define SCHEMADIFFAPI_ASSEMBLY_VERSION                                                                  12.4.56.0
#define SCHEMADIFFAPI_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define SCHEMADIFFAPI_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define SCHEMADIFFAPI_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define SCHEMADIFFAPI_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define SCHEMADIFFAPI_ASSEMBLY_CULTURE                                                                  neutral
#define SCHEMADIFFAPI_ASSEMBLY_CULTURE_A                                                               "neutral"
#define SCHEMADIFFAPI_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define SCHEMADIFFAPI_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define SCHEMADIFFAPI_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define SCHEMADIFF_ASSEMBLY_IDENTITY_DEF                                                                schemadiff,version=12.4.56.0,culture=neutral
#define SCHEMADIFF_ASSEMBLY_IDENTITY_DEF_A                                                             "schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_DEF_W                                                            L"schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_DEF_S                                                            S"schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("schemadiff,version=12.4.56.0,culture=neutral")
#define SCHEMADIFF_ASSEMBLY_IDENTITY_REF                                                                schemadiff,version=12.4.56.0,culture=neutral
#define SCHEMADIFF_ASSEMBLY_IDENTITY_REF_A                                                             "schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_REF_W                                                            L"schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_REF_S                                                            S"schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("schemadiff,version=12.4.56.0,culture=neutral")
#define SCHEMADIFF_ASSEMBLY_IDENTITY_EXACT_REF                                                          schemadiff,version=12.4.56.0,culture=neutral
#define SCHEMADIFF_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"schemadiff,version=12.4.56.0,culture=neutral"
#define SCHEMADIFF_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("schemadiff,version=12.4.56.0,culture=neutral")
#define SCHEMADIFF_ASSEMBLY_NAME                                                                        schemadiff
#define SCHEMADIFF_ASSEMBLY_NAME_A                                                                     "schemadiff"
#define SCHEMADIFF_ASSEMBLY_NAME_W                                                                    L"schemadiff"
#define SCHEMADIFF_ASSEMBLY_NAME_S                                                                    S"schemadiff"
#define SCHEMADIFF_ASSEMBLY_NAME_T                                                                TEXT("schemadiff")
#define SCHEMADIFF_ASSEMBLY_VERSION                                                                     12.4.56.0
#define SCHEMADIFF_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define SCHEMADIFF_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define SCHEMADIFF_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define SCHEMADIFF_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define SCHEMADIFF_ASSEMBLY_CULTURE                                                                     neutral
#define SCHEMADIFF_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define SCHEMADIFF_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define SCHEMADIFF_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define SCHEMADIFF_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_DEF                                                        codecoverageplugin,version=12.4.56.0,culture=neutral
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_DEF_A                                                     "codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_DEF_W                                                    L"codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_DEF_S                                                    S"codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("codecoverageplugin,version=12.4.56.0,culture=neutral")
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_REF                                                        codecoverageplugin,version=12.4.56.0,culture=neutral
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_REF_A                                                     "codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_REF_W                                                    L"codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_REF_S                                                    S"codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_REF_T                                                TEXT("codecoverageplugin,version=12.4.56.0,culture=neutral")
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_EXACT_REF                                                  codecoverageplugin,version=12.4.56.0,culture=neutral
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"codecoverageplugin,version=12.4.56.0,culture=neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("codecoverageplugin,version=12.4.56.0,culture=neutral")
#define CODECOVERAGEPLUGIN_ASSEMBLY_NAME                                                                codecoverageplugin
#define CODECOVERAGEPLUGIN_ASSEMBLY_NAME_A                                                             "codecoverageplugin"
#define CODECOVERAGEPLUGIN_ASSEMBLY_NAME_W                                                            L"codecoverageplugin"
#define CODECOVERAGEPLUGIN_ASSEMBLY_NAME_S                                                            S"codecoverageplugin"
#define CODECOVERAGEPLUGIN_ASSEMBLY_NAME_T                                                        TEXT("codecoverageplugin")
#define CODECOVERAGEPLUGIN_ASSEMBLY_VERSION                                                             12.4.56.0
#define CODECOVERAGEPLUGIN_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define CODECOVERAGEPLUGIN_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define CODECOVERAGEPLUGIN_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define CODECOVERAGEPLUGIN_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define CODECOVERAGEPLUGIN_ASSEMBLY_CULTURE                                                             neutral
#define CODECOVERAGEPLUGIN_ASSEMBLY_CULTURE_A                                                          "neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define CODECOVERAGEPLUGIN_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_DEF                                                              fakelogvault,version=12.4.56.0,culture=neutral
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_DEF_A                                                           "fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_DEF_W                                                          L"fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_DEF_S                                                          S"fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("fakelogvault,version=12.4.56.0,culture=neutral")
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_REF                                                              fakelogvault,version=12.4.56.0,culture=neutral
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_REF_A                                                           "fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_REF_W                                                          L"fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_REF_S                                                          S"fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("fakelogvault,version=12.4.56.0,culture=neutral")
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_EXACT_REF                                                        fakelogvault,version=12.4.56.0,culture=neutral
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"fakelogvault,version=12.4.56.0,culture=neutral"
#define FAKELOGVAULT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("fakelogvault,version=12.4.56.0,culture=neutral")
#define FAKELOGVAULT_ASSEMBLY_NAME                                                                      fakelogvault
#define FAKELOGVAULT_ASSEMBLY_NAME_A                                                                   "fakelogvault"
#define FAKELOGVAULT_ASSEMBLY_NAME_W                                                                  L"fakelogvault"
#define FAKELOGVAULT_ASSEMBLY_NAME_S                                                                  S"fakelogvault"
#define FAKELOGVAULT_ASSEMBLY_NAME_T                                                              TEXT("fakelogvault")
#define FAKELOGVAULT_ASSEMBLY_VERSION                                                                   12.4.56.0
#define FAKELOGVAULT_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define FAKELOGVAULT_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define FAKELOGVAULT_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define FAKELOGVAULT_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define FAKELOGVAULT_ASSEMBLY_CULTURE                                                                   neutral
#define FAKELOGVAULT_ASSEMBLY_CULTURE_A                                                                "neutral"
#define FAKELOGVAULT_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define FAKELOGVAULT_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define FAKELOGVAULT_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_DEF                                                 billingnotificationposter,version=12.4.56.0,culture=neutral
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_DEF_A                                              "billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_DEF_W                                             L"billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_DEF_S                                             S"billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_DEF_T                                         TEXT("billingnotificationposter,version=12.4.56.0,culture=neutral")
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_REF                                                 billingnotificationposter,version=12.4.56.0,culture=neutral
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_REF_A                                              "billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_REF_W                                             L"billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_REF_S                                             S"billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_REF_T                                         TEXT("billingnotificationposter,version=12.4.56.0,culture=neutral")
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_EXACT_REF                                           billingnotificationposter,version=12.4.56.0,culture=neutral
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_A                                        "billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_W                                       L"billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_S                                       S"billingnotificationposter,version=12.4.56.0,culture=neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_IDENTITY_EXACT_REF_T                                   TEXT("billingnotificationposter,version=12.4.56.0,culture=neutral")
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_NAME                                                         billingnotificationposter
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_NAME_A                                                      "billingnotificationposter"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_NAME_W                                                     L"billingnotificationposter"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_NAME_S                                                     S"billingnotificationposter"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_NAME_T                                                 TEXT("billingnotificationposter")
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_VERSION                                                      12.4.56.0
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_VERSION_A                                                   "12.4.56.0"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_VERSION_W                                                  L"12.4.56.0"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_VERSION_S                                                  S"12.4.56.0"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_VERSION_T                                              TEXT("12.4.56.0")
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_CULTURE                                                      neutral
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_CULTURE_A                                                   "neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_CULTURE_W                                                  L"neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_CULTURE_S                                                  S"neutral"
#define BILLINGNOTIFICATIONPOSTER_ASSEMBLY_CULTURE_T                                              TEXT("neutral")
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_DEF                                                           xlastdatafixups,version=12.4.56.0,culture=neutral
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_DEF_A                                                        "xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_DEF_W                                                       L"xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_DEF_S                                                       S"xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("xlastdatafixups,version=12.4.56.0,culture=neutral")
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_REF                                                           xlastdatafixups,version=12.4.56.0,culture=neutral
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_REF_A                                                        "xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_REF_W                                                       L"xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_REF_S                                                       S"xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("xlastdatafixups,version=12.4.56.0,culture=neutral")
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_EXACT_REF                                                     xlastdatafixups,version=12.4.56.0,culture=neutral
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"xlastdatafixups,version=12.4.56.0,culture=neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("xlastdatafixups,version=12.4.56.0,culture=neutral")
#define XLASTDATAFIXUPS_ASSEMBLY_NAME                                                                   xlastdatafixups
#define XLASTDATAFIXUPS_ASSEMBLY_NAME_A                                                                "xlastdatafixups"
#define XLASTDATAFIXUPS_ASSEMBLY_NAME_W                                                               L"xlastdatafixups"
#define XLASTDATAFIXUPS_ASSEMBLY_NAME_S                                                               S"xlastdatafixups"
#define XLASTDATAFIXUPS_ASSEMBLY_NAME_T                                                           TEXT("xlastdatafixups")
#define XLASTDATAFIXUPS_ASSEMBLY_VERSION                                                                12.4.56.0
#define XLASTDATAFIXUPS_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define XLASTDATAFIXUPS_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define XLASTDATAFIXUPS_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define XLASTDATAFIXUPS_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define XLASTDATAFIXUPS_ASSEMBLY_CULTURE                                                                neutral
#define XLASTDATAFIXUPS_ASSEMBLY_CULTURE_A                                                             "neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define XLASTDATAFIXUPS_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_DEF                                                        testgraphicscommon,version=12.4.56.0,culture=neutral
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_DEF_A                                                     "testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_DEF_W                                                    L"testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_DEF_S                                                    S"testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("testgraphicscommon,version=12.4.56.0,culture=neutral")
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_REF                                                        testgraphicscommon,version=12.4.56.0,culture=neutral
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_REF_A                                                     "testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_REF_W                                                    L"testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_REF_S                                                    S"testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_REF_T                                                TEXT("testgraphicscommon,version=12.4.56.0,culture=neutral")
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_EXACT_REF                                                  testgraphicscommon,version=12.4.56.0,culture=neutral
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"testgraphicscommon,version=12.4.56.0,culture=neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("testgraphicscommon,version=12.4.56.0,culture=neutral")
#define TESTGRAPHICSCOMMON_ASSEMBLY_NAME                                                                testgraphicscommon
#define TESTGRAPHICSCOMMON_ASSEMBLY_NAME_A                                                             "testgraphicscommon"
#define TESTGRAPHICSCOMMON_ASSEMBLY_NAME_W                                                            L"testgraphicscommon"
#define TESTGRAPHICSCOMMON_ASSEMBLY_NAME_S                                                            S"testgraphicscommon"
#define TESTGRAPHICSCOMMON_ASSEMBLY_NAME_T                                                        TEXT("testgraphicscommon")
#define TESTGRAPHICSCOMMON_ASSEMBLY_VERSION                                                             12.4.56.0
#define TESTGRAPHICSCOMMON_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define TESTGRAPHICSCOMMON_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define TESTGRAPHICSCOMMON_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define TESTGRAPHICSCOMMON_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define TESTGRAPHICSCOMMON_ASSEMBLY_CULTURE                                                             neutral
#define TESTGRAPHICSCOMMON_ASSEMBLY_CULTURE_A                                                          "neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define TESTGRAPHICSCOMMON_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_DEF                                                        eventcountdbparser,version=12.4.56.0,culture=neutral
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_DEF_A                                                     "eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_DEF_W                                                    L"eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_DEF_S                                                    S"eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("eventcountdbparser,version=12.4.56.0,culture=neutral")
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_REF                                                        eventcountdbparser,version=12.4.56.0,culture=neutral
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_REF_A                                                     "eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_REF_W                                                    L"eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_REF_S                                                    S"eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_REF_T                                                TEXT("eventcountdbparser,version=12.4.56.0,culture=neutral")
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_EXACT_REF                                                  eventcountdbparser,version=12.4.56.0,culture=neutral
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"eventcountdbparser,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("eventcountdbparser,version=12.4.56.0,culture=neutral")
#define EVENTCOUNTDBPARSER_ASSEMBLY_NAME                                                                eventcountdbparser
#define EVENTCOUNTDBPARSER_ASSEMBLY_NAME_A                                                             "eventcountdbparser"
#define EVENTCOUNTDBPARSER_ASSEMBLY_NAME_W                                                            L"eventcountdbparser"
#define EVENTCOUNTDBPARSER_ASSEMBLY_NAME_S                                                            S"eventcountdbparser"
#define EVENTCOUNTDBPARSER_ASSEMBLY_NAME_T                                                        TEXT("eventcountdbparser")
#define EVENTCOUNTDBPARSER_ASSEMBLY_VERSION                                                             12.4.56.0
#define EVENTCOUNTDBPARSER_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define EVENTCOUNTDBPARSER_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define EVENTCOUNTDBPARSER_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define EVENTCOUNTDBPARSER_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define EVENTCOUNTDBPARSER_ASSEMBLY_CULTURE                                                             neutral
#define EVENTCOUNTDBPARSER_ASSEMBLY_CULTURE_A                                                          "neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define EVENTCOUNTDBPARSER_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_DEF                                                        eventcountdbviewer,version=12.4.56.0,culture=neutral
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_DEF_A                                                     "eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_DEF_W                                                    L"eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_DEF_S                                                    S"eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("eventcountdbviewer,version=12.4.56.0,culture=neutral")
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_REF                                                        eventcountdbviewer,version=12.4.56.0,culture=neutral
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_REF_A                                                     "eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_REF_W                                                    L"eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_REF_S                                                    S"eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_REF_T                                                TEXT("eventcountdbviewer,version=12.4.56.0,culture=neutral")
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_EXACT_REF                                                  eventcountdbviewer,version=12.4.56.0,culture=neutral
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"eventcountdbviewer,version=12.4.56.0,culture=neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("eventcountdbviewer,version=12.4.56.0,culture=neutral")
#define EVENTCOUNTDBVIEWER_ASSEMBLY_NAME                                                                eventcountdbviewer
#define EVENTCOUNTDBVIEWER_ASSEMBLY_NAME_A                                                             "eventcountdbviewer"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_NAME_W                                                            L"eventcountdbviewer"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_NAME_S                                                            S"eventcountdbviewer"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_NAME_T                                                        TEXT("eventcountdbviewer")
#define EVENTCOUNTDBVIEWER_ASSEMBLY_VERSION                                                             12.4.56.0
#define EVENTCOUNTDBVIEWER_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define EVENTCOUNTDBVIEWER_ASSEMBLY_CULTURE                                                             neutral
#define EVENTCOUNTDBVIEWER_ASSEMBLY_CULTURE_A                                                          "neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define EVENTCOUNTDBVIEWER_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_DEF                                                            perftsvgrapher,version=12.4.56.0,culture=neutral
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_DEF_A                                                         "perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_DEF_W                                                        L"perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_DEF_S                                                        S"perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("perftsvgrapher,version=12.4.56.0,culture=neutral")
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_REF                                                            perftsvgrapher,version=12.4.56.0,culture=neutral
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_REF_A                                                         "perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_REF_W                                                        L"perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_REF_S                                                        S"perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("perftsvgrapher,version=12.4.56.0,culture=neutral")
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_EXACT_REF                                                      perftsvgrapher,version=12.4.56.0,culture=neutral
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"perftsvgrapher,version=12.4.56.0,culture=neutral"
#define PERFTSVGRAPHER_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("perftsvgrapher,version=12.4.56.0,culture=neutral")
#define PERFTSVGRAPHER_ASSEMBLY_NAME                                                                    perftsvgrapher
#define PERFTSVGRAPHER_ASSEMBLY_NAME_A                                                                 "perftsvgrapher"
#define PERFTSVGRAPHER_ASSEMBLY_NAME_W                                                                L"perftsvgrapher"
#define PERFTSVGRAPHER_ASSEMBLY_NAME_S                                                                S"perftsvgrapher"
#define PERFTSVGRAPHER_ASSEMBLY_NAME_T                                                            TEXT("perftsvgrapher")
#define PERFTSVGRAPHER_ASSEMBLY_VERSION                                                                 12.4.56.0
#define PERFTSVGRAPHER_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define PERFTSVGRAPHER_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define PERFTSVGRAPHER_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define PERFTSVGRAPHER_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define PERFTSVGRAPHER_ASSEMBLY_CULTURE                                                                 neutral
#define PERFTSVGRAPHER_ASSEMBLY_CULTURE_A                                                              "neutral"
#define PERFTSVGRAPHER_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define PERFTSVGRAPHER_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define PERFTSVGRAPHER_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define TLDBROUTINES_ASSEMBLY_IDENTITY_DEF                                                              tldbroutines,version=12.4.56.0,culture=neutral
#define TLDBROUTINES_ASSEMBLY_IDENTITY_DEF_A                                                           "tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_DEF_W                                                          L"tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_DEF_S                                                          S"tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("tldbroutines,version=12.4.56.0,culture=neutral")
#define TLDBROUTINES_ASSEMBLY_IDENTITY_REF                                                              tldbroutines,version=12.4.56.0,culture=neutral
#define TLDBROUTINES_ASSEMBLY_IDENTITY_REF_A                                                           "tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_REF_W                                                          L"tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_REF_S                                                          S"tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("tldbroutines,version=12.4.56.0,culture=neutral")
#define TLDBROUTINES_ASSEMBLY_IDENTITY_EXACT_REF                                                        tldbroutines,version=12.4.56.0,culture=neutral
#define TLDBROUTINES_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"tldbroutines,version=12.4.56.0,culture=neutral"
#define TLDBROUTINES_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("tldbroutines,version=12.4.56.0,culture=neutral")
#define TLDBROUTINES_ASSEMBLY_NAME                                                                      tldbroutines
#define TLDBROUTINES_ASSEMBLY_NAME_A                                                                   "tldbroutines"
#define TLDBROUTINES_ASSEMBLY_NAME_W                                                                  L"tldbroutines"
#define TLDBROUTINES_ASSEMBLY_NAME_S                                                                  S"tldbroutines"
#define TLDBROUTINES_ASSEMBLY_NAME_T                                                              TEXT("tldbroutines")
#define TLDBROUTINES_ASSEMBLY_VERSION                                                                   12.4.56.0
#define TLDBROUTINES_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define TLDBROUTINES_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define TLDBROUTINES_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define TLDBROUTINES_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define TLDBROUTINES_ASSEMBLY_CULTURE                                                                   neutral
#define TLDBROUTINES_ASSEMBLY_CULTURE_A                                                                "neutral"
#define TLDBROUTINES_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define TLDBROUTINES_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define TLDBROUTINES_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define XLINKPARSE_ASSEMBLY_IDENTITY_DEF                                                                xlinkparse,version=12.4.56.0,culture=neutral
#define XLINKPARSE_ASSEMBLY_IDENTITY_DEF_A                                                             "xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_DEF_W                                                            L"xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_DEF_S                                                            S"xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("xlinkparse,version=12.4.56.0,culture=neutral")
#define XLINKPARSE_ASSEMBLY_IDENTITY_REF                                                                xlinkparse,version=12.4.56.0,culture=neutral
#define XLINKPARSE_ASSEMBLY_IDENTITY_REF_A                                                             "xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_REF_W                                                            L"xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_REF_S                                                            S"xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("xlinkparse,version=12.4.56.0,culture=neutral")
#define XLINKPARSE_ASSEMBLY_IDENTITY_EXACT_REF                                                          xlinkparse,version=12.4.56.0,culture=neutral
#define XLINKPARSE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"xlinkparse,version=12.4.56.0,culture=neutral"
#define XLINKPARSE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("xlinkparse,version=12.4.56.0,culture=neutral")
#define XLINKPARSE_ASSEMBLY_NAME                                                                        xlinkparse
#define XLINKPARSE_ASSEMBLY_NAME_A                                                                     "xlinkparse"
#define XLINKPARSE_ASSEMBLY_NAME_W                                                                    L"xlinkparse"
#define XLINKPARSE_ASSEMBLY_NAME_S                                                                    S"xlinkparse"
#define XLINKPARSE_ASSEMBLY_NAME_T                                                                TEXT("xlinkparse")
#define XLINKPARSE_ASSEMBLY_VERSION                                                                     12.4.56.0
#define XLINKPARSE_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define XLINKPARSE_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define XLINKPARSE_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define XLINKPARSE_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define XLINKPARSE_ASSEMBLY_CULTURE                                                                     neutral
#define XLINKPARSE_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define XLINKPARSE_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define XLINKPARSE_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define XLINKPARSE_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_DEF                                                              acttest.xbos,version=12.4.56.0,culture=neutral
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_DEF_A                                                           "acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_DEF_W                                                          L"acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_DEF_S                                                          S"acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("acttest.xbos,version=12.4.56.0,culture=neutral")
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_REF                                                              acttest.xbos,version=12.4.56.0,culture=neutral
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_REF_A                                                           "acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_REF_W                                                          L"acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_REF_S                                                          S"acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("acttest.xbos,version=12.4.56.0,culture=neutral")
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_EXACT_REF                                                        acttest.xbos,version=12.4.56.0,culture=neutral
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"acttest.xbos,version=12.4.56.0,culture=neutral"
#define ACTTEST_XBOS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("acttest.xbos,version=12.4.56.0,culture=neutral")
#define ACTTEST_XBOS_ASSEMBLY_NAME                                                                      acttest.xbos
#define ACTTEST_XBOS_ASSEMBLY_NAME_A                                                                   "acttest.xbos"
#define ACTTEST_XBOS_ASSEMBLY_NAME_W                                                                  L"acttest.xbos"
#define ACTTEST_XBOS_ASSEMBLY_NAME_S                                                                  S"acttest.xbos"
#define ACTTEST_XBOS_ASSEMBLY_NAME_T                                                              TEXT("acttest.xbos")
#define ACTTEST_XBOS_ASSEMBLY_VERSION                                                                   12.4.56.0
#define ACTTEST_XBOS_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define ACTTEST_XBOS_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define ACTTEST_XBOS_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define ACTTEST_XBOS_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define ACTTEST_XBOS_ASSEMBLY_CULTURE                                                                   neutral
#define ACTTEST_XBOS_ASSEMBLY_CULTURE_A                                                                "neutral"
#define ACTTEST_XBOS_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define ACTTEST_XBOS_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define ACTTEST_XBOS_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define UACS_ACT_ASSEMBLY_IDENTITY_DEF                                                                  uacs.act,version=12.4.56.0,culture=neutral
#define UACS_ACT_ASSEMBLY_IDENTITY_DEF_A                                                               "uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_DEF_W                                                              L"uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_DEF_S                                                              S"uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("uacs.act,version=12.4.56.0,culture=neutral")
#define UACS_ACT_ASSEMBLY_IDENTITY_REF                                                                  uacs.act,version=12.4.56.0,culture=neutral
#define UACS_ACT_ASSEMBLY_IDENTITY_REF_A                                                               "uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_REF_W                                                              L"uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_REF_S                                                              S"uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("uacs.act,version=12.4.56.0,culture=neutral")
#define UACS_ACT_ASSEMBLY_IDENTITY_EXACT_REF                                                            uacs.act,version=12.4.56.0,culture=neutral
#define UACS_ACT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"uacs.act,version=12.4.56.0,culture=neutral"
#define UACS_ACT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("uacs.act,version=12.4.56.0,culture=neutral")
#define UACS_ACT_ASSEMBLY_NAME                                                                          uacs.act
#define UACS_ACT_ASSEMBLY_NAME_A                                                                       "uacs.act"
#define UACS_ACT_ASSEMBLY_NAME_W                                                                      L"uacs.act"
#define UACS_ACT_ASSEMBLY_NAME_S                                                                      S"uacs.act"
#define UACS_ACT_ASSEMBLY_NAME_T                                                                  TEXT("uacs.act")
#define UACS_ACT_ASSEMBLY_VERSION                                                                       12.4.56.0
#define UACS_ACT_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define UACS_ACT_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define UACS_ACT_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define UACS_ACT_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define UACS_ACT_ASSEMBLY_CULTURE                                                                       neutral
#define UACS_ACT_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define UACS_ACT_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define UACS_ACT_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define UACS_ACT_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_DEF                                                             wcutilwrapper,version=12.4.56.0,culture=neutral
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_DEF_A                                                          "wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_DEF_W                                                         L"wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_DEF_S                                                         S"wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("wcutilwrapper,version=12.4.56.0,culture=neutral")
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_REF                                                             wcutilwrapper,version=12.4.56.0,culture=neutral
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_REF_A                                                          "wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_REF_W                                                         L"wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_REF_S                                                         S"wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("wcutilwrapper,version=12.4.56.0,culture=neutral")
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_EXACT_REF                                                       wcutilwrapper,version=12.4.56.0,culture=neutral
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"wcutilwrapper,version=12.4.56.0,culture=neutral"
#define WCUTILWRAPPER_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("wcutilwrapper,version=12.4.56.0,culture=neutral")
#define WCUTILWRAPPER_ASSEMBLY_NAME                                                                     wcutilwrapper
#define WCUTILWRAPPER_ASSEMBLY_NAME_A                                                                  "wcutilwrapper"
#define WCUTILWRAPPER_ASSEMBLY_NAME_W                                                                 L"wcutilwrapper"
#define WCUTILWRAPPER_ASSEMBLY_NAME_S                                                                 S"wcutilwrapper"
#define WCUTILWRAPPER_ASSEMBLY_NAME_T                                                             TEXT("wcutilwrapper")
#define WCUTILWRAPPER_ASSEMBLY_VERSION                                                                  12.4.56.0
#define WCUTILWRAPPER_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define WCUTILWRAPPER_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define WCUTILWRAPPER_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define WCUTILWRAPPER_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define WCUTILWRAPPER_ASSEMBLY_CULTURE                                                                  neutral
#define WCUTILWRAPPER_ASSEMBLY_CULTURE_A                                                               "neutral"
#define WCUTILWRAPPER_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define WCUTILWRAPPER_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define WCUTILWRAPPER_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_DEF                                                             verifypartner,version=12.4.56.0,culture=neutral
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_DEF_A                                                          "verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_DEF_W                                                         L"verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_DEF_S                                                         S"verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("verifypartner,version=12.4.56.0,culture=neutral")
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_REF                                                             verifypartner,version=12.4.56.0,culture=neutral
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_REF_A                                                          "verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_REF_W                                                         L"verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_REF_S                                                         S"verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("verifypartner,version=12.4.56.0,culture=neutral")
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_EXACT_REF                                                       verifypartner,version=12.4.56.0,culture=neutral
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"verifypartner,version=12.4.56.0,culture=neutral"
#define VERIFYPARTNER_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("verifypartner,version=12.4.56.0,culture=neutral")
#define VERIFYPARTNER_ASSEMBLY_NAME                                                                     verifypartner
#define VERIFYPARTNER_ASSEMBLY_NAME_A                                                                  "verifypartner"
#define VERIFYPARTNER_ASSEMBLY_NAME_W                                                                 L"verifypartner"
#define VERIFYPARTNER_ASSEMBLY_NAME_S                                                                 S"verifypartner"
#define VERIFYPARTNER_ASSEMBLY_NAME_T                                                             TEXT("verifypartner")
#define VERIFYPARTNER_ASSEMBLY_VERSION                                                                  12.4.56.0
#define VERIFYPARTNER_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define VERIFYPARTNER_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define VERIFYPARTNER_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define VERIFYPARTNER_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define VERIFYPARTNER_ASSEMBLY_CULTURE                                                                  neutral
#define VERIFYPARTNER_ASSEMBLY_CULTURE_A                                                               "neutral"
#define VERIFYPARTNER_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define VERIFYPARTNER_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define VERIFYPARTNER_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define WSMONCOMM_ASSEMBLY_IDENTITY_DEF                                                                 wsmoncomm,version=12.4.56.0,culture=neutral
#define WSMONCOMM_ASSEMBLY_IDENTITY_DEF_A                                                              "wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_DEF_W                                                             L"wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_DEF_S                                                             S"wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("wsmoncomm,version=12.4.56.0,culture=neutral")
#define WSMONCOMM_ASSEMBLY_IDENTITY_REF                                                                 wsmoncomm,version=12.4.56.0,culture=neutral
#define WSMONCOMM_ASSEMBLY_IDENTITY_REF_A                                                              "wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_REF_W                                                             L"wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_REF_S                                                             S"wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("wsmoncomm,version=12.4.56.0,culture=neutral")
#define WSMONCOMM_ASSEMBLY_IDENTITY_EXACT_REF                                                           wsmoncomm,version=12.4.56.0,culture=neutral
#define WSMONCOMM_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"wsmoncomm,version=12.4.56.0,culture=neutral"
#define WSMONCOMM_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("wsmoncomm,version=12.4.56.0,culture=neutral")
#define WSMONCOMM_ASSEMBLY_NAME                                                                         wsmoncomm
#define WSMONCOMM_ASSEMBLY_NAME_A                                                                      "wsmoncomm"
#define WSMONCOMM_ASSEMBLY_NAME_W                                                                     L"wsmoncomm"
#define WSMONCOMM_ASSEMBLY_NAME_S                                                                     S"wsmoncomm"
#define WSMONCOMM_ASSEMBLY_NAME_T                                                                 TEXT("wsmoncomm")
#define WSMONCOMM_ASSEMBLY_VERSION                                                                      12.4.56.0
#define WSMONCOMM_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define WSMONCOMM_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define WSMONCOMM_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define WSMONCOMM_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define WSMONCOMM_ASSEMBLY_CULTURE                                                                      neutral
#define WSMONCOMM_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define WSMONCOMM_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define WSMONCOMM_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define WSMONCOMM_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define WSTESTSUITE_ASSEMBLY_IDENTITY_DEF                                                               wstestsuite,version=12.4.56.0,culture=neutral
#define WSTESTSUITE_ASSEMBLY_IDENTITY_DEF_A                                                            "wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_DEF_W                                                           L"wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_DEF_S                                                           S"wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("wstestsuite,version=12.4.56.0,culture=neutral")
#define WSTESTSUITE_ASSEMBLY_IDENTITY_REF                                                               wstestsuite,version=12.4.56.0,culture=neutral
#define WSTESTSUITE_ASSEMBLY_IDENTITY_REF_A                                                            "wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_REF_W                                                           L"wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_REF_S                                                           S"wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("wstestsuite,version=12.4.56.0,culture=neutral")
#define WSTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF                                                         wstestsuite,version=12.4.56.0,culture=neutral
#define WSTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"wstestsuite,version=12.4.56.0,culture=neutral"
#define WSTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("wstestsuite,version=12.4.56.0,culture=neutral")
#define WSTESTSUITE_ASSEMBLY_NAME                                                                       wstestsuite
#define WSTESTSUITE_ASSEMBLY_NAME_A                                                                    "wstestsuite"
#define WSTESTSUITE_ASSEMBLY_NAME_W                                                                   L"wstestsuite"
#define WSTESTSUITE_ASSEMBLY_NAME_S                                                                   S"wstestsuite"
#define WSTESTSUITE_ASSEMBLY_NAME_T                                                               TEXT("wstestsuite")
#define WSTESTSUITE_ASSEMBLY_VERSION                                                                    12.4.56.0
#define WSTESTSUITE_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define WSTESTSUITE_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define WSTESTSUITE_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define WSTESTSUITE_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define WSTESTSUITE_ASSEMBLY_CULTURE                                                                    neutral
#define WSTESTSUITE_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define WSTESTSUITE_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define WSTESTSUITE_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define WSTESTSUITE_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define WSMONITOR_ASSEMBLY_IDENTITY_DEF                                                                 wsmonitor,version=12.4.56.0,culture=neutral
#define WSMONITOR_ASSEMBLY_IDENTITY_DEF_A                                                              "wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_DEF_W                                                             L"wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_DEF_S                                                             S"wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("wsmonitor,version=12.4.56.0,culture=neutral")
#define WSMONITOR_ASSEMBLY_IDENTITY_REF                                                                 wsmonitor,version=12.4.56.0,culture=neutral
#define WSMONITOR_ASSEMBLY_IDENTITY_REF_A                                                              "wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_REF_W                                                             L"wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_REF_S                                                             S"wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("wsmonitor,version=12.4.56.0,culture=neutral")
#define WSMONITOR_ASSEMBLY_IDENTITY_EXACT_REF                                                           wsmonitor,version=12.4.56.0,culture=neutral
#define WSMONITOR_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"wsmonitor,version=12.4.56.0,culture=neutral"
#define WSMONITOR_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("wsmonitor,version=12.4.56.0,culture=neutral")
#define WSMONITOR_ASSEMBLY_NAME                                                                         wsmonitor
#define WSMONITOR_ASSEMBLY_NAME_A                                                                      "wsmonitor"
#define WSMONITOR_ASSEMBLY_NAME_W                                                                     L"wsmonitor"
#define WSMONITOR_ASSEMBLY_NAME_S                                                                     S"wsmonitor"
#define WSMONITOR_ASSEMBLY_NAME_T                                                                 TEXT("wsmonitor")
#define WSMONITOR_ASSEMBLY_VERSION                                                                      12.4.56.0
#define WSMONITOR_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define WSMONITOR_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define WSMONITOR_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define WSMONITOR_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define WSMONITOR_ASSEMBLY_CULTURE                                                                      neutral
#define WSMONITOR_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define WSMONITOR_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define WSMONITOR_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define WSMONITOR_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define WSMONVIEWER_ASSEMBLY_IDENTITY_DEF                                                               wsmonviewer,version=12.4.56.0,culture=neutral
#define WSMONVIEWER_ASSEMBLY_IDENTITY_DEF_A                                                            "wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_DEF_W                                                           L"wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_DEF_S                                                           S"wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("wsmonviewer,version=12.4.56.0,culture=neutral")
#define WSMONVIEWER_ASSEMBLY_IDENTITY_REF                                                               wsmonviewer,version=12.4.56.0,culture=neutral
#define WSMONVIEWER_ASSEMBLY_IDENTITY_REF_A                                                            "wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_REF_W                                                           L"wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_REF_S                                                           S"wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("wsmonviewer,version=12.4.56.0,culture=neutral")
#define WSMONVIEWER_ASSEMBLY_IDENTITY_EXACT_REF                                                         wsmonviewer,version=12.4.56.0,culture=neutral
#define WSMONVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"wsmonviewer,version=12.4.56.0,culture=neutral"
#define WSMONVIEWER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("wsmonviewer,version=12.4.56.0,culture=neutral")
#define WSMONVIEWER_ASSEMBLY_NAME                                                                       wsmonviewer
#define WSMONVIEWER_ASSEMBLY_NAME_A                                                                    "wsmonviewer"
#define WSMONVIEWER_ASSEMBLY_NAME_W                                                                   L"wsmonviewer"
#define WSMONVIEWER_ASSEMBLY_NAME_S                                                                   S"wsmonviewer"
#define WSMONVIEWER_ASSEMBLY_NAME_T                                                               TEXT("wsmonviewer")
#define WSMONVIEWER_ASSEMBLY_VERSION                                                                    12.4.56.0
#define WSMONVIEWER_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define WSMONVIEWER_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define WSMONVIEWER_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define WSMONVIEWER_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define WSMONVIEWER_ASSEMBLY_CULTURE                                                                    neutral
#define WSMONVIEWER_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define WSMONVIEWER_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define WSMONVIEWER_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define WSMONVIEWER_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define WEBBVT_ASSEMBLY_IDENTITY_DEF                                                                    webbvt,version=12.4.56.0,culture=neutral
#define WEBBVT_ASSEMBLY_IDENTITY_DEF_A                                                                 "webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_DEF_W                                                                L"webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_DEF_S                                                                S"webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_DEF_T                                                            TEXT("webbvt,version=12.4.56.0,culture=neutral")
#define WEBBVT_ASSEMBLY_IDENTITY_REF                                                                    webbvt,version=12.4.56.0,culture=neutral
#define WEBBVT_ASSEMBLY_IDENTITY_REF_A                                                                 "webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_REF_W                                                                L"webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_REF_S                                                                S"webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_REF_T                                                            TEXT("webbvt,version=12.4.56.0,culture=neutral")
#define WEBBVT_ASSEMBLY_IDENTITY_EXACT_REF                                                              webbvt,version=12.4.56.0,culture=neutral
#define WEBBVT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                           "webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                          L"webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                          S"webbvt,version=12.4.56.0,culture=neutral"
#define WEBBVT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                      TEXT("webbvt,version=12.4.56.0,culture=neutral")
#define WEBBVT_ASSEMBLY_NAME                                                                            webbvt
#define WEBBVT_ASSEMBLY_NAME_A                                                                         "webbvt"
#define WEBBVT_ASSEMBLY_NAME_W                                                                        L"webbvt"
#define WEBBVT_ASSEMBLY_NAME_S                                                                        S"webbvt"
#define WEBBVT_ASSEMBLY_NAME_T                                                                    TEXT("webbvt")
#define WEBBVT_ASSEMBLY_VERSION                                                                         12.4.56.0
#define WEBBVT_ASSEMBLY_VERSION_A                                                                      "12.4.56.0"
#define WEBBVT_ASSEMBLY_VERSION_W                                                                     L"12.4.56.0"
#define WEBBVT_ASSEMBLY_VERSION_S                                                                     S"12.4.56.0"
#define WEBBVT_ASSEMBLY_VERSION_T                                                                 TEXT("12.4.56.0")
#define WEBBVT_ASSEMBLY_CULTURE                                                                         neutral
#define WEBBVT_ASSEMBLY_CULTURE_A                                                                      "neutral"
#define WEBBVT_ASSEMBLY_CULTURE_W                                                                     L"neutral"
#define WEBBVT_ASSEMBLY_CULTURE_S                                                                     S"neutral"
#define WEBBVT_ASSEMBLY_CULTURE_T                                                                 TEXT("neutral")
#define WEBSCHEMA_ASSEMBLY_IDENTITY_DEF                                                                 webschema,version=12.4.56.0,culture=neutral
#define WEBSCHEMA_ASSEMBLY_IDENTITY_DEF_A                                                              "webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_DEF_W                                                             L"webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_DEF_S                                                             S"webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("webschema,version=12.4.56.0,culture=neutral")
#define WEBSCHEMA_ASSEMBLY_IDENTITY_REF                                                                 webschema,version=12.4.56.0,culture=neutral
#define WEBSCHEMA_ASSEMBLY_IDENTITY_REF_A                                                              "webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_REF_W                                                             L"webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_REF_S                                                             S"webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("webschema,version=12.4.56.0,culture=neutral")
#define WEBSCHEMA_ASSEMBLY_IDENTITY_EXACT_REF                                                           webschema,version=12.4.56.0,culture=neutral
#define WEBSCHEMA_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"webschema,version=12.4.56.0,culture=neutral"
#define WEBSCHEMA_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("webschema,version=12.4.56.0,culture=neutral")
#define WEBSCHEMA_ASSEMBLY_NAME                                                                         webschema
#define WEBSCHEMA_ASSEMBLY_NAME_A                                                                      "webschema"
#define WEBSCHEMA_ASSEMBLY_NAME_W                                                                     L"webschema"
#define WEBSCHEMA_ASSEMBLY_NAME_S                                                                     S"webschema"
#define WEBSCHEMA_ASSEMBLY_NAME_T                                                                 TEXT("webschema")
#define WEBSCHEMA_ASSEMBLY_VERSION                                                                      12.4.56.0
#define WEBSCHEMA_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define WEBSCHEMA_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define WEBSCHEMA_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define WEBSCHEMA_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define WEBSCHEMA_ASSEMBLY_CULTURE                                                                      neutral
#define WEBSCHEMA_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define WEBSCHEMA_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define WEBSCHEMA_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define WEBSCHEMA_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define CERTVALIDATE_ASSEMBLY_IDENTITY_DEF                                                              certvalidate,version=12.4.56.0,culture=neutral
#define CERTVALIDATE_ASSEMBLY_IDENTITY_DEF_A                                                           "certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_DEF_W                                                          L"certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_DEF_S                                                          S"certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("certvalidate,version=12.4.56.0,culture=neutral")
#define CERTVALIDATE_ASSEMBLY_IDENTITY_REF                                                              certvalidate,version=12.4.56.0,culture=neutral
#define CERTVALIDATE_ASSEMBLY_IDENTITY_REF_A                                                           "certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_REF_W                                                          L"certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_REF_S                                                          S"certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("certvalidate,version=12.4.56.0,culture=neutral")
#define CERTVALIDATE_ASSEMBLY_IDENTITY_EXACT_REF                                                        certvalidate,version=12.4.56.0,culture=neutral
#define CERTVALIDATE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"certvalidate,version=12.4.56.0,culture=neutral"
#define CERTVALIDATE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("certvalidate,version=12.4.56.0,culture=neutral")
#define CERTVALIDATE_ASSEMBLY_NAME                                                                      certvalidate
#define CERTVALIDATE_ASSEMBLY_NAME_A                                                                   "certvalidate"
#define CERTVALIDATE_ASSEMBLY_NAME_W                                                                  L"certvalidate"
#define CERTVALIDATE_ASSEMBLY_NAME_S                                                                  S"certvalidate"
#define CERTVALIDATE_ASSEMBLY_NAME_T                                                              TEXT("certvalidate")
#define CERTVALIDATE_ASSEMBLY_VERSION                                                                   12.4.56.0
#define CERTVALIDATE_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define CERTVALIDATE_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define CERTVALIDATE_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define CERTVALIDATE_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define CERTVALIDATE_ASSEMBLY_CULTURE                                                                   neutral
#define CERTVALIDATE_ASSEMBLY_CULTURE_A                                                                "neutral"
#define CERTVALIDATE_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define CERTVALIDATE_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define CERTVALIDATE_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_DEF                                                           certvalidatesvc,version=12.4.56.0,culture=neutral
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_DEF_A                                                        "certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_DEF_W                                                       L"certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_DEF_S                                                       S"certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("certvalidatesvc,version=12.4.56.0,culture=neutral")
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_REF                                                           certvalidatesvc,version=12.4.56.0,culture=neutral
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_REF_A                                                        "certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_REF_W                                                       L"certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_REF_S                                                       S"certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("certvalidatesvc,version=12.4.56.0,culture=neutral")
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_EXACT_REF                                                     certvalidatesvc,version=12.4.56.0,culture=neutral
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"certvalidatesvc,version=12.4.56.0,culture=neutral"
#define CERTVALIDATESVC_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("certvalidatesvc,version=12.4.56.0,culture=neutral")
#define CERTVALIDATESVC_ASSEMBLY_NAME                                                                   certvalidatesvc
#define CERTVALIDATESVC_ASSEMBLY_NAME_A                                                                "certvalidatesvc"
#define CERTVALIDATESVC_ASSEMBLY_NAME_W                                                               L"certvalidatesvc"
#define CERTVALIDATESVC_ASSEMBLY_NAME_S                                                               S"certvalidatesvc"
#define CERTVALIDATESVC_ASSEMBLY_NAME_T                                                           TEXT("certvalidatesvc")
#define CERTVALIDATESVC_ASSEMBLY_VERSION                                                                12.4.56.0
#define CERTVALIDATESVC_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define CERTVALIDATESVC_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define CERTVALIDATESVC_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define CERTVALIDATESVC_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define CERTVALIDATESVC_ASSEMBLY_CULTURE                                                                neutral
#define CERTVALIDATESVC_ASSEMBLY_CULTURE_A                                                             "neutral"
#define CERTVALIDATESVC_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define CERTVALIDATESVC_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define CERTVALIDATESVC_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_DEF                                                          xrlscantestsuite,version=12.4.56.0,culture=neutral
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_DEF_A                                                       "xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_DEF_W                                                      L"xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_DEF_S                                                      S"xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("xrlscantestsuite,version=12.4.56.0,culture=neutral")
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_REF                                                          xrlscantestsuite,version=12.4.56.0,culture=neutral
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_REF_A                                                       "xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_REF_W                                                      L"xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_REF_S                                                      S"xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("xrlscantestsuite,version=12.4.56.0,culture=neutral")
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF                                                    xrlscantestsuite,version=12.4.56.0,culture=neutral
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"xrlscantestsuite,version=12.4.56.0,culture=neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("xrlscantestsuite,version=12.4.56.0,culture=neutral")
#define XRLSCANTESTSUITE_ASSEMBLY_NAME                                                                  xrlscantestsuite
#define XRLSCANTESTSUITE_ASSEMBLY_NAME_A                                                               "xrlscantestsuite"
#define XRLSCANTESTSUITE_ASSEMBLY_NAME_W                                                              L"xrlscantestsuite"
#define XRLSCANTESTSUITE_ASSEMBLY_NAME_S                                                              S"xrlscantestsuite"
#define XRLSCANTESTSUITE_ASSEMBLY_NAME_T                                                          TEXT("xrlscantestsuite")
#define XRLSCANTESTSUITE_ASSEMBLY_VERSION                                                               12.4.56.0
#define XRLSCANTESTSUITE_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define XRLSCANTESTSUITE_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define XRLSCANTESTSUITE_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define XRLSCANTESTSUITE_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define XRLSCANTESTSUITE_ASSEMBLY_CULTURE                                                               neutral
#define XRLSCANTESTSUITE_ASSEMBLY_CULTURE_A                                                            "neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define XRLSCANTESTSUITE_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define WEBSGTEST_ASSEMBLY_IDENTITY_DEF                                                                 websgtest,version=12.4.56.0,culture=neutral
#define WEBSGTEST_ASSEMBLY_IDENTITY_DEF_A                                                              "websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_DEF_W                                                             L"websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_DEF_S                                                             S"websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("websgtest,version=12.4.56.0,culture=neutral")
#define WEBSGTEST_ASSEMBLY_IDENTITY_REF                                                                 websgtest,version=12.4.56.0,culture=neutral
#define WEBSGTEST_ASSEMBLY_IDENTITY_REF_A                                                              "websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_REF_W                                                             L"websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_REF_S                                                             S"websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("websgtest,version=12.4.56.0,culture=neutral")
#define WEBSGTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                           websgtest,version=12.4.56.0,culture=neutral
#define WEBSGTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"websgtest,version=12.4.56.0,culture=neutral"
#define WEBSGTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("websgtest,version=12.4.56.0,culture=neutral")
#define WEBSGTEST_ASSEMBLY_NAME                                                                         websgtest
#define WEBSGTEST_ASSEMBLY_NAME_A                                                                      "websgtest"
#define WEBSGTEST_ASSEMBLY_NAME_W                                                                     L"websgtest"
#define WEBSGTEST_ASSEMBLY_NAME_S                                                                     S"websgtest"
#define WEBSGTEST_ASSEMBLY_NAME_T                                                                 TEXT("websgtest")
#define WEBSGTEST_ASSEMBLY_VERSION                                                                      12.4.56.0
#define WEBSGTEST_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define WEBSGTEST_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define WEBSGTEST_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define WEBSGTEST_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define WEBSGTEST_ASSEMBLY_CULTURE                                                                      neutral
#define WEBSGTEST_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define WEBSGTEST_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define WEBSGTEST_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define WEBSGTEST_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define XMATCHTEST_ASSEMBLY_IDENTITY_DEF                                                                xmatchtest,version=12.4.56.0,culture=neutral
#define XMATCHTEST_ASSEMBLY_IDENTITY_DEF_A                                                             "xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_DEF_W                                                            L"xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_DEF_S                                                            S"xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("xmatchtest,version=12.4.56.0,culture=neutral")
#define XMATCHTEST_ASSEMBLY_IDENTITY_REF                                                                xmatchtest,version=12.4.56.0,culture=neutral
#define XMATCHTEST_ASSEMBLY_IDENTITY_REF_A                                                             "xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_REF_W                                                            L"xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_REF_S                                                            S"xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("xmatchtest,version=12.4.56.0,culture=neutral")
#define XMATCHTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                          xmatchtest,version=12.4.56.0,culture=neutral
#define XMATCHTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"xmatchtest,version=12.4.56.0,culture=neutral"
#define XMATCHTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("xmatchtest,version=12.4.56.0,culture=neutral")
#define XMATCHTEST_ASSEMBLY_NAME                                                                        xmatchtest
#define XMATCHTEST_ASSEMBLY_NAME_A                                                                     "xmatchtest"
#define XMATCHTEST_ASSEMBLY_NAME_W                                                                    L"xmatchtest"
#define XMATCHTEST_ASSEMBLY_NAME_S                                                                    S"xmatchtest"
#define XMATCHTEST_ASSEMBLY_NAME_T                                                                TEXT("xmatchtest")
#define XMATCHTEST_ASSEMBLY_VERSION                                                                     12.4.56.0
#define XMATCHTEST_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define XMATCHTEST_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define XMATCHTEST_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define XMATCHTEST_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define XMATCHTEST_ASSEMBLY_CULTURE                                                                     neutral
#define XMATCHTEST_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define XMATCHTEST_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define XMATCHTEST_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define XMATCHTEST_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define FEEDBACK_ASSEMBLY_IDENTITY_DEF                                                                  feedback,version=12.4.56.0,culture=neutral
#define FEEDBACK_ASSEMBLY_IDENTITY_DEF_A                                                               "feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_DEF_W                                                              L"feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_DEF_S                                                              S"feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("feedback,version=12.4.56.0,culture=neutral")
#define FEEDBACK_ASSEMBLY_IDENTITY_REF                                                                  feedback,version=12.4.56.0,culture=neutral
#define FEEDBACK_ASSEMBLY_IDENTITY_REF_A                                                               "feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_REF_W                                                              L"feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_REF_S                                                              S"feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("feedback,version=12.4.56.0,culture=neutral")
#define FEEDBACK_ASSEMBLY_IDENTITY_EXACT_REF                                                            feedback,version=12.4.56.0,culture=neutral
#define FEEDBACK_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"feedback,version=12.4.56.0,culture=neutral"
#define FEEDBACK_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("feedback,version=12.4.56.0,culture=neutral")
#define FEEDBACK_ASSEMBLY_NAME                                                                          feedback
#define FEEDBACK_ASSEMBLY_NAME_A                                                                       "feedback"
#define FEEDBACK_ASSEMBLY_NAME_W                                                                      L"feedback"
#define FEEDBACK_ASSEMBLY_NAME_S                                                                      S"feedback"
#define FEEDBACK_ASSEMBLY_NAME_T                                                                  TEXT("feedback")
#define FEEDBACK_ASSEMBLY_VERSION                                                                       12.4.56.0
#define FEEDBACK_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define FEEDBACK_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define FEEDBACK_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define FEEDBACK_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define FEEDBACK_ASSEMBLY_CULTURE                                                                       neutral
#define FEEDBACK_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define FEEDBACK_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define FEEDBACK_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define FEEDBACK_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define XARBTEST_ASSEMBLY_IDENTITY_DEF                                                                  xarbtest,version=12.4.56.0,culture=neutral
#define XARBTEST_ASSEMBLY_IDENTITY_DEF_A                                                               "xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_DEF_W                                                              L"xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_DEF_S                                                              S"xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("xarbtest,version=12.4.56.0,culture=neutral")
#define XARBTEST_ASSEMBLY_IDENTITY_REF                                                                  xarbtest,version=12.4.56.0,culture=neutral
#define XARBTEST_ASSEMBLY_IDENTITY_REF_A                                                               "xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_REF_W                                                              L"xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_REF_S                                                              S"xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("xarbtest,version=12.4.56.0,culture=neutral")
#define XARBTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                            xarbtest,version=12.4.56.0,culture=neutral
#define XARBTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"xarbtest,version=12.4.56.0,culture=neutral"
#define XARBTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("xarbtest,version=12.4.56.0,culture=neutral")
#define XARBTEST_ASSEMBLY_NAME                                                                          xarbtest
#define XARBTEST_ASSEMBLY_NAME_A                                                                       "xarbtest"
#define XARBTEST_ASSEMBLY_NAME_W                                                                      L"xarbtest"
#define XARBTEST_ASSEMBLY_NAME_S                                                                      S"xarbtest"
#define XARBTEST_ASSEMBLY_NAME_T                                                                  TEXT("xarbtest")
#define XARBTEST_ASSEMBLY_VERSION                                                                       12.4.56.0
#define XARBTEST_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define XARBTEST_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define XARBTEST_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define XARBTEST_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define XARBTEST_ASSEMBLY_CULTURE                                                                       neutral
#define XARBTEST_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define XARBTEST_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define XARBTEST_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define XARBTEST_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define WEBSGBVTS_ASSEMBLY_IDENTITY_DEF                                                                 websgbvts,version=12.4.56.0,culture=neutral
#define WEBSGBVTS_ASSEMBLY_IDENTITY_DEF_A                                                              "websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_DEF_W                                                             L"websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_DEF_S                                                             S"websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("websgbvts,version=12.4.56.0,culture=neutral")
#define WEBSGBVTS_ASSEMBLY_IDENTITY_REF                                                                 websgbvts,version=12.4.56.0,culture=neutral
#define WEBSGBVTS_ASSEMBLY_IDENTITY_REF_A                                                              "websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_REF_W                                                             L"websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_REF_S                                                             S"websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("websgbvts,version=12.4.56.0,culture=neutral")
#define WEBSGBVTS_ASSEMBLY_IDENTITY_EXACT_REF                                                           websgbvts,version=12.4.56.0,culture=neutral
#define WEBSGBVTS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"websgbvts,version=12.4.56.0,culture=neutral"
#define WEBSGBVTS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("websgbvts,version=12.4.56.0,culture=neutral")
#define WEBSGBVTS_ASSEMBLY_NAME                                                                         websgbvts
#define WEBSGBVTS_ASSEMBLY_NAME_A                                                                      "websgbvts"
#define WEBSGBVTS_ASSEMBLY_NAME_W                                                                     L"websgbvts"
#define WEBSGBVTS_ASSEMBLY_NAME_S                                                                     S"websgbvts"
#define WEBSGBVTS_ASSEMBLY_NAME_T                                                                 TEXT("websgbvts")
#define WEBSGBVTS_ASSEMBLY_VERSION                                                                      12.4.56.0
#define WEBSGBVTS_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define WEBSGBVTS_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define WEBSGBVTS_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define WEBSGBVTS_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define WEBSGBVTS_ASSEMBLY_CULTURE                                                                      neutral
#define WEBSGBVTS_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define WEBSGBVTS_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define WEBSGBVTS_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define WEBSGBVTS_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_DEF                                                          reporting_common,version=12.4.56.0,culture=neutral
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_DEF_A                                                       "reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_DEF_W                                                      L"reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_DEF_S                                                      S"reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("reporting_common,version=12.4.56.0,culture=neutral")
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_REF                                                          reporting_common,version=12.4.56.0,culture=neutral
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_REF_A                                                       "reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_REF_W                                                      L"reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_REF_S                                                      S"reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("reporting_common,version=12.4.56.0,culture=neutral")
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_EXACT_REF                                                    reporting_common,version=12.4.56.0,culture=neutral
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"reporting_common,version=12.4.56.0,culture=neutral"
#define REPORTING_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("reporting_common,version=12.4.56.0,culture=neutral")
#define REPORTING_COMMON_ASSEMBLY_NAME                                                                  reporting_common
#define REPORTING_COMMON_ASSEMBLY_NAME_A                                                               "reporting_common"
#define REPORTING_COMMON_ASSEMBLY_NAME_W                                                              L"reporting_common"
#define REPORTING_COMMON_ASSEMBLY_NAME_S                                                              S"reporting_common"
#define REPORTING_COMMON_ASSEMBLY_NAME_T                                                          TEXT("reporting_common")
#define REPORTING_COMMON_ASSEMBLY_VERSION                                                               12.4.56.0
#define REPORTING_COMMON_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define REPORTING_COMMON_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define REPORTING_COMMON_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define REPORTING_COMMON_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define REPORTING_COMMON_ASSEMBLY_CULTURE                                                               neutral
#define REPORTING_COMMON_ASSEMBLY_CULTURE_A                                                            "neutral"
#define REPORTING_COMMON_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define REPORTING_COMMON_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define REPORTING_COMMON_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_DEF                                                    reportingtargettestbvt,version=12.4.56.0,culture=neutral
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_DEF_A                                                 "reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_DEF_W                                                L"reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_DEF_S                                                S"reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_DEF_T                                            TEXT("reportingtargettestbvt,version=12.4.56.0,culture=neutral")
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_REF                                                    reportingtargettestbvt,version=12.4.56.0,culture=neutral
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_REF_A                                                 "reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_REF_W                                                L"reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_REF_S                                                S"reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_REF_T                                            TEXT("reportingtargettestbvt,version=12.4.56.0,culture=neutral")
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_EXACT_REF                                              reportingtargettestbvt,version=12.4.56.0,culture=neutral
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_EXACT_REF_A                                           "reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_EXACT_REF_W                                          L"reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_EXACT_REF_S                                          S"reportingtargettestbvt,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_IDENTITY_EXACT_REF_T                                      TEXT("reportingtargettestbvt,version=12.4.56.0,culture=neutral")
#define REPORTINGTARGETTESTBVT_ASSEMBLY_NAME                                                            reportingtargettestbvt
#define REPORTINGTARGETTESTBVT_ASSEMBLY_NAME_A                                                         "reportingtargettestbvt"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_NAME_W                                                        L"reportingtargettestbvt"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_NAME_S                                                        S"reportingtargettestbvt"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_NAME_T                                                    TEXT("reportingtargettestbvt")
#define REPORTINGTARGETTESTBVT_ASSEMBLY_VERSION                                                         12.4.56.0
#define REPORTINGTARGETTESTBVT_ASSEMBLY_VERSION_A                                                      "12.4.56.0"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_VERSION_W                                                     L"12.4.56.0"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_VERSION_S                                                     S"12.4.56.0"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_VERSION_T                                                 TEXT("12.4.56.0")
#define REPORTINGTARGETTESTBVT_ASSEMBLY_CULTURE                                                         neutral
#define REPORTINGTARGETTESTBVT_ASSEMBLY_CULTURE_A                                                      "neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_CULTURE_W                                                     L"neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_CULTURE_S                                                     S"neutral"
#define REPORTINGTARGETTESTBVT_ASSEMBLY_CULTURE_T                                                 TEXT("neutral")
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_DEF                                                            replicationfvt,version=12.4.56.0,culture=neutral
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_DEF_A                                                         "replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_DEF_W                                                        L"replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_DEF_S                                                        S"replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("replicationfvt,version=12.4.56.0,culture=neutral")
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_REF                                                            replicationfvt,version=12.4.56.0,culture=neutral
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_REF_A                                                         "replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_REF_W                                                        L"replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_REF_S                                                        S"replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("replicationfvt,version=12.4.56.0,culture=neutral")
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_EXACT_REF                                                      replicationfvt,version=12.4.56.0,culture=neutral
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"replicationfvt,version=12.4.56.0,culture=neutral"
#define REPLICATIONFVT_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("replicationfvt,version=12.4.56.0,culture=neutral")
#define REPLICATIONFVT_ASSEMBLY_NAME                                                                    replicationfvt
#define REPLICATIONFVT_ASSEMBLY_NAME_A                                                                 "replicationfvt"
#define REPLICATIONFVT_ASSEMBLY_NAME_W                                                                L"replicationfvt"
#define REPLICATIONFVT_ASSEMBLY_NAME_S                                                                S"replicationfvt"
#define REPLICATIONFVT_ASSEMBLY_NAME_T                                                            TEXT("replicationfvt")
#define REPLICATIONFVT_ASSEMBLY_VERSION                                                                 12.4.56.0
#define REPLICATIONFVT_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define REPLICATIONFVT_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define REPLICATIONFVT_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define REPLICATIONFVT_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define REPLICATIONFVT_ASSEMBLY_CULTURE                                                                 neutral
#define REPLICATIONFVT_ASSEMBLY_CULTURE_A                                                              "neutral"
#define REPLICATIONFVT_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define REPLICATIONFVT_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define REPLICATIONFVT_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define H2PCAPP_ASSEMBLY_IDENTITY_DEF                                                                   h2pcapp,version=12.4.56.0,culture=neutral
#define H2PCAPP_ASSEMBLY_IDENTITY_DEF_A                                                                "h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_DEF_W                                                               L"h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_DEF_S                                                               S"h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("h2pcapp,version=12.4.56.0,culture=neutral")
#define H2PCAPP_ASSEMBLY_IDENTITY_REF                                                                   h2pcapp,version=12.4.56.0,culture=neutral
#define H2PCAPP_ASSEMBLY_IDENTITY_REF_A                                                                "h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_REF_W                                                               L"h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_REF_S                                                               S"h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("h2pcapp,version=12.4.56.0,culture=neutral")
#define H2PCAPP_ASSEMBLY_IDENTITY_EXACT_REF                                                             h2pcapp,version=12.4.56.0,culture=neutral
#define H2PCAPP_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"h2pcapp,version=12.4.56.0,culture=neutral"
#define H2PCAPP_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("h2pcapp,version=12.4.56.0,culture=neutral")
#define H2PCAPP_ASSEMBLY_NAME                                                                           h2pcapp
#define H2PCAPP_ASSEMBLY_NAME_A                                                                        "h2pcapp"
#define H2PCAPP_ASSEMBLY_NAME_W                                                                       L"h2pcapp"
#define H2PCAPP_ASSEMBLY_NAME_S                                                                       S"h2pcapp"
#define H2PCAPP_ASSEMBLY_NAME_T                                                                   TEXT("h2pcapp")
#define H2PCAPP_ASSEMBLY_VERSION                                                                        12.4.56.0
#define H2PCAPP_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define H2PCAPP_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define H2PCAPP_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define H2PCAPP_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define H2PCAPP_ASSEMBLY_CULTURE                                                                        neutral
#define H2PCAPP_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define H2PCAPP_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define H2PCAPP_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define H2PCAPP_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define TESTEXTENSION_ASSEMBLY_IDENTITY_DEF                                                             testextension,version=12.4.56.0,culture=neutral
#define TESTEXTENSION_ASSEMBLY_IDENTITY_DEF_A                                                          "testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_DEF_W                                                         L"testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_DEF_S                                                         S"testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("testextension,version=12.4.56.0,culture=neutral")
#define TESTEXTENSION_ASSEMBLY_IDENTITY_REF                                                             testextension,version=12.4.56.0,culture=neutral
#define TESTEXTENSION_ASSEMBLY_IDENTITY_REF_A                                                          "testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_REF_W                                                         L"testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_REF_S                                                         S"testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("testextension,version=12.4.56.0,culture=neutral")
#define TESTEXTENSION_ASSEMBLY_IDENTITY_EXACT_REF                                                       testextension,version=12.4.56.0,culture=neutral
#define TESTEXTENSION_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"testextension,version=12.4.56.0,culture=neutral"
#define TESTEXTENSION_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("testextension,version=12.4.56.0,culture=neutral")
#define TESTEXTENSION_ASSEMBLY_NAME                                                                     testextension
#define TESTEXTENSION_ASSEMBLY_NAME_A                                                                  "testextension"
#define TESTEXTENSION_ASSEMBLY_NAME_W                                                                 L"testextension"
#define TESTEXTENSION_ASSEMBLY_NAME_S                                                                 S"testextension"
#define TESTEXTENSION_ASSEMBLY_NAME_T                                                             TEXT("testextension")
#define TESTEXTENSION_ASSEMBLY_VERSION                                                                  12.4.56.0
#define TESTEXTENSION_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define TESTEXTENSION_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define TESTEXTENSION_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define TESTEXTENSION_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define TESTEXTENSION_ASSEMBLY_CULTURE                                                                  neutral
#define TESTEXTENSION_ASSEMBLY_CULTURE_A                                                               "neutral"
#define TESTEXTENSION_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define TESTEXTENSION_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define TESTEXTENSION_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_DEF                                                           livecontenttest,version=12.4.56.0,culture=neutral
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_DEF_A                                                        "livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_DEF_W                                                       L"livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_DEF_S                                                       S"livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("livecontenttest,version=12.4.56.0,culture=neutral")
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_REF                                                           livecontenttest,version=12.4.56.0,culture=neutral
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_REF_A                                                        "livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_REF_W                                                       L"livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_REF_S                                                       S"livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("livecontenttest,version=12.4.56.0,culture=neutral")
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                     livecontenttest,version=12.4.56.0,culture=neutral
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"livecontenttest,version=12.4.56.0,culture=neutral"
#define LIVECONTENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("livecontenttest,version=12.4.56.0,culture=neutral")
#define LIVECONTENTTEST_ASSEMBLY_NAME                                                                   livecontenttest
#define LIVECONTENTTEST_ASSEMBLY_NAME_A                                                                "livecontenttest"
#define LIVECONTENTTEST_ASSEMBLY_NAME_W                                                               L"livecontenttest"
#define LIVECONTENTTEST_ASSEMBLY_NAME_S                                                               S"livecontenttest"
#define LIVECONTENTTEST_ASSEMBLY_NAME_T                                                           TEXT("livecontenttest")
#define LIVECONTENTTEST_ASSEMBLY_VERSION                                                                12.4.56.0
#define LIVECONTENTTEST_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define LIVECONTENTTEST_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define LIVECONTENTTEST_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define LIVECONTENTTEST_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define LIVECONTENTTEST_ASSEMBLY_CULTURE                                                                neutral
#define LIVECONTENTTEST_ASSEMBLY_CULTURE_A                                                             "neutral"
#define LIVECONTENTTEST_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define LIVECONTENTTEST_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define LIVECONTENTTEST_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_DEF                                                             liveoffertest,version=12.4.56.0,culture=neutral
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_DEF_A                                                          "liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_DEF_W                                                         L"liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_DEF_S                                                         S"liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("liveoffertest,version=12.4.56.0,culture=neutral")
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_REF                                                             liveoffertest,version=12.4.56.0,culture=neutral
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_REF_A                                                          "liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_REF_W                                                         L"liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_REF_S                                                         S"liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("liveoffertest,version=12.4.56.0,culture=neutral")
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                       liveoffertest,version=12.4.56.0,culture=neutral
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"liveoffertest,version=12.4.56.0,culture=neutral"
#define LIVEOFFERTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("liveoffertest,version=12.4.56.0,culture=neutral")
#define LIVEOFFERTEST_ASSEMBLY_NAME                                                                     liveoffertest
#define LIVEOFFERTEST_ASSEMBLY_NAME_A                                                                  "liveoffertest"
#define LIVEOFFERTEST_ASSEMBLY_NAME_W                                                                 L"liveoffertest"
#define LIVEOFFERTEST_ASSEMBLY_NAME_S                                                                 S"liveoffertest"
#define LIVEOFFERTEST_ASSEMBLY_NAME_T                                                             TEXT("liveoffertest")
#define LIVEOFFERTEST_ASSEMBLY_VERSION                                                                  12.4.56.0
#define LIVEOFFERTEST_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define LIVEOFFERTEST_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define LIVEOFFERTEST_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define LIVEOFFERTEST_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define LIVEOFFERTEST_ASSEMBLY_CULTURE                                                                  neutral
#define LIVEOFFERTEST_ASSEMBLY_CULTURE_A                                                               "neutral"
#define LIVEOFFERTEST_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define LIVEOFFERTEST_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define LIVEOFFERTEST_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_DEF                                                          apdispatchertest,version=12.4.56.0,culture=neutral
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_DEF_A                                                       "apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_DEF_W                                                      L"apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_DEF_S                                                      S"apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("apdispatchertest,version=12.4.56.0,culture=neutral")
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_REF                                                          apdispatchertest,version=12.4.56.0,culture=neutral
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_REF_A                                                       "apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_REF_W                                                      L"apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_REF_S                                                      S"apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("apdispatchertest,version=12.4.56.0,culture=neutral")
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                    apdispatchertest,version=12.4.56.0,culture=neutral
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"apdispatchertest,version=12.4.56.0,culture=neutral"
#define APDISPATCHERTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("apdispatchertest,version=12.4.56.0,culture=neutral")
#define APDISPATCHERTEST_ASSEMBLY_NAME                                                                  apdispatchertest
#define APDISPATCHERTEST_ASSEMBLY_NAME_A                                                               "apdispatchertest"
#define APDISPATCHERTEST_ASSEMBLY_NAME_W                                                              L"apdispatchertest"
#define APDISPATCHERTEST_ASSEMBLY_NAME_S                                                              S"apdispatchertest"
#define APDISPATCHERTEST_ASSEMBLY_NAME_T                                                          TEXT("apdispatchertest")
#define APDISPATCHERTEST_ASSEMBLY_VERSION                                                               12.4.56.0
#define APDISPATCHERTEST_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define APDISPATCHERTEST_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define APDISPATCHERTEST_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define APDISPATCHERTEST_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define APDISPATCHERTEST_ASSEMBLY_CULTURE                                                               neutral
#define APDISPATCHERTEST_ASSEMBLY_CULTURE_A                                                            "neutral"
#define APDISPATCHERTEST_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define APDISPATCHERTEST_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define APDISPATCHERTEST_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define SPACTEST_ASSEMBLY_IDENTITY_DEF                                                                  spactest,version=12.4.56.0,culture=neutral
#define SPACTEST_ASSEMBLY_IDENTITY_DEF_A                                                               "spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_DEF_W                                                              L"spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_DEF_S                                                              S"spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("spactest,version=12.4.56.0,culture=neutral")
#define SPACTEST_ASSEMBLY_IDENTITY_REF                                                                  spactest,version=12.4.56.0,culture=neutral
#define SPACTEST_ASSEMBLY_IDENTITY_REF_A                                                               "spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_REF_W                                                              L"spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_REF_S                                                              S"spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("spactest,version=12.4.56.0,culture=neutral")
#define SPACTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                            spactest,version=12.4.56.0,culture=neutral
#define SPACTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"spactest,version=12.4.56.0,culture=neutral"
#define SPACTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("spactest,version=12.4.56.0,culture=neutral")
#define SPACTEST_ASSEMBLY_NAME                                                                          spactest
#define SPACTEST_ASSEMBLY_NAME_A                                                                       "spactest"
#define SPACTEST_ASSEMBLY_NAME_W                                                                      L"spactest"
#define SPACTEST_ASSEMBLY_NAME_S                                                                      S"spactest"
#define SPACTEST_ASSEMBLY_NAME_T                                                                  TEXT("spactest")
#define SPACTEST_ASSEMBLY_VERSION                                                                       12.4.56.0
#define SPACTEST_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define SPACTEST_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define SPACTEST_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define SPACTEST_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define SPACTEST_ASSEMBLY_CULTURE                                                                       neutral
#define SPACTEST_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define SPACTEST_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define SPACTEST_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define SPACTEST_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define SPUTTEST_ASSEMBLY_IDENTITY_DEF                                                                  sputtest,version=12.4.56.0,culture=neutral
#define SPUTTEST_ASSEMBLY_IDENTITY_DEF_A                                                               "sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_DEF_W                                                              L"sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_DEF_S                                                              S"sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("sputtest,version=12.4.56.0,culture=neutral")
#define SPUTTEST_ASSEMBLY_IDENTITY_REF                                                                  sputtest,version=12.4.56.0,culture=neutral
#define SPUTTEST_ASSEMBLY_IDENTITY_REF_A                                                               "sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_REF_W                                                              L"sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_REF_S                                                              S"sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("sputtest,version=12.4.56.0,culture=neutral")
#define SPUTTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                            sputtest,version=12.4.56.0,culture=neutral
#define SPUTTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"sputtest,version=12.4.56.0,culture=neutral"
#define SPUTTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("sputtest,version=12.4.56.0,culture=neutral")
#define SPUTTEST_ASSEMBLY_NAME                                                                          sputtest
#define SPUTTEST_ASSEMBLY_NAME_A                                                                       "sputtest"
#define SPUTTEST_ASSEMBLY_NAME_W                                                                      L"sputtest"
#define SPUTTEST_ASSEMBLY_NAME_S                                                                      S"sputtest"
#define SPUTTEST_ASSEMBLY_NAME_T                                                                  TEXT("sputtest")
#define SPUTTEST_ASSEMBLY_VERSION                                                                       12.4.56.0
#define SPUTTEST_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define SPUTTEST_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define SPUTTEST_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define SPUTTEST_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define SPUTTEST_ASSEMBLY_CULTURE                                                                       neutral
#define SPUTTEST_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define SPUTTEST_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define SPUTTEST_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define SPUTTEST_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define LIVESTATS_ASSEMBLY_IDENTITY_DEF                                                                 livestats,version=12.4.56.0,culture=neutral
#define LIVESTATS_ASSEMBLY_IDENTITY_DEF_A                                                              "livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_DEF_W                                                             L"livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_DEF_S                                                             S"livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("livestats,version=12.4.56.0,culture=neutral")
#define LIVESTATS_ASSEMBLY_IDENTITY_REF                                                                 livestats,version=12.4.56.0,culture=neutral
#define LIVESTATS_ASSEMBLY_IDENTITY_REF_A                                                              "livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_REF_W                                                             L"livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_REF_S                                                             S"livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("livestats,version=12.4.56.0,culture=neutral")
#define LIVESTATS_ASSEMBLY_IDENTITY_EXACT_REF                                                           livestats,version=12.4.56.0,culture=neutral
#define LIVESTATS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"livestats,version=12.4.56.0,culture=neutral"
#define LIVESTATS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("livestats,version=12.4.56.0,culture=neutral")
#define LIVESTATS_ASSEMBLY_NAME                                                                         livestats
#define LIVESTATS_ASSEMBLY_NAME_A                                                                      "livestats"
#define LIVESTATS_ASSEMBLY_NAME_W                                                                     L"livestats"
#define LIVESTATS_ASSEMBLY_NAME_S                                                                     S"livestats"
#define LIVESTATS_ASSEMBLY_NAME_T                                                                 TEXT("livestats")
#define LIVESTATS_ASSEMBLY_VERSION                                                                      12.4.56.0
#define LIVESTATS_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define LIVESTATS_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define LIVESTATS_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define LIVESTATS_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define LIVESTATS_ASSEMBLY_CULTURE                                                                      neutral
#define LIVESTATS_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define LIVESTATS_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define LIVESTATS_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define LIVESTATS_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_DEF                                                      quickenforcementtest,version=12.4.56.0,culture=neutral
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_DEF_A                                                   "quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_DEF_W                                                  L"quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_DEF_S                                                  S"quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_DEF_T                                              TEXT("quickenforcementtest,version=12.4.56.0,culture=neutral")
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_REF                                                      quickenforcementtest,version=12.4.56.0,culture=neutral
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_REF_A                                                   "quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_REF_W                                                  L"quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_REF_S                                                  S"quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_REF_T                                              TEXT("quickenforcementtest,version=12.4.56.0,culture=neutral")
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                quickenforcementtest,version=12.4.56.0,culture=neutral
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                             "quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                            L"quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                            S"quickenforcementtest,version=12.4.56.0,culture=neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                        TEXT("quickenforcementtest,version=12.4.56.0,culture=neutral")
#define QUICKENFORCEMENTTEST_ASSEMBLY_NAME                                                              quickenforcementtest
#define QUICKENFORCEMENTTEST_ASSEMBLY_NAME_A                                                           "quickenforcementtest"
#define QUICKENFORCEMENTTEST_ASSEMBLY_NAME_W                                                          L"quickenforcementtest"
#define QUICKENFORCEMENTTEST_ASSEMBLY_NAME_S                                                          S"quickenforcementtest"
#define QUICKENFORCEMENTTEST_ASSEMBLY_NAME_T                                                      TEXT("quickenforcementtest")
#define QUICKENFORCEMENTTEST_ASSEMBLY_VERSION                                                           12.4.56.0
#define QUICKENFORCEMENTTEST_ASSEMBLY_VERSION_A                                                        "12.4.56.0"
#define QUICKENFORCEMENTTEST_ASSEMBLY_VERSION_W                                                       L"12.4.56.0"
#define QUICKENFORCEMENTTEST_ASSEMBLY_VERSION_S                                                       S"12.4.56.0"
#define QUICKENFORCEMENTTEST_ASSEMBLY_VERSION_T                                                   TEXT("12.4.56.0")
#define QUICKENFORCEMENTTEST_ASSEMBLY_CULTURE                                                           neutral
#define QUICKENFORCEMENTTEST_ASSEMBLY_CULTURE_A                                                        "neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_CULTURE_W                                                       L"neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_CULTURE_S                                                       S"neutral"
#define QUICKENFORCEMENTTEST_ASSEMBLY_CULTURE_T                                                   TEXT("neutral")
#define STUTILTEST_ASSEMBLY_IDENTITY_DEF                                                                stutiltest,version=12.4.56.0,culture=neutral
#define STUTILTEST_ASSEMBLY_IDENTITY_DEF_A                                                             "stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_DEF_W                                                            L"stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_DEF_S                                                            S"stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("stutiltest,version=12.4.56.0,culture=neutral")
#define STUTILTEST_ASSEMBLY_IDENTITY_REF                                                                stutiltest,version=12.4.56.0,culture=neutral
#define STUTILTEST_ASSEMBLY_IDENTITY_REF_A                                                             "stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_REF_W                                                            L"stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_REF_S                                                            S"stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("stutiltest,version=12.4.56.0,culture=neutral")
#define STUTILTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                          stutiltest,version=12.4.56.0,culture=neutral
#define STUTILTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"stutiltest,version=12.4.56.0,culture=neutral"
#define STUTILTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("stutiltest,version=12.4.56.0,culture=neutral")
#define STUTILTEST_ASSEMBLY_NAME                                                                        stutiltest
#define STUTILTEST_ASSEMBLY_NAME_A                                                                     "stutiltest"
#define STUTILTEST_ASSEMBLY_NAME_W                                                                    L"stutiltest"
#define STUTILTEST_ASSEMBLY_NAME_S                                                                    S"stutiltest"
#define STUTILTEST_ASSEMBLY_NAME_T                                                                TEXT("stutiltest")
#define STUTILTEST_ASSEMBLY_VERSION                                                                     12.4.56.0
#define STUTILTEST_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define STUTILTEST_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define STUTILTEST_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define STUTILTEST_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define STUTILTEST_ASSEMBLY_CULTURE                                                                     neutral
#define STUTILTEST_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define STUTILTEST_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define STUTILTEST_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define STUTILTEST_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_DEF                                                            vouchermgrtest,version=12.4.56.0,culture=neutral
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_DEF_A                                                         "vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_DEF_W                                                        L"vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_DEF_S                                                        S"vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("vouchermgrtest,version=12.4.56.0,culture=neutral")
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_REF                                                            vouchermgrtest,version=12.4.56.0,culture=neutral
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_REF_A                                                         "vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_REF_W                                                        L"vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_REF_S                                                        S"vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("vouchermgrtest,version=12.4.56.0,culture=neutral")
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                      vouchermgrtest,version=12.4.56.0,culture=neutral
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"vouchermgrtest,version=12.4.56.0,culture=neutral"
#define VOUCHERMGRTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("vouchermgrtest,version=12.4.56.0,culture=neutral")
#define VOUCHERMGRTEST_ASSEMBLY_NAME                                                                    vouchermgrtest
#define VOUCHERMGRTEST_ASSEMBLY_NAME_A                                                                 "vouchermgrtest"
#define VOUCHERMGRTEST_ASSEMBLY_NAME_W                                                                L"vouchermgrtest"
#define VOUCHERMGRTEST_ASSEMBLY_NAME_S                                                                S"vouchermgrtest"
#define VOUCHERMGRTEST_ASSEMBLY_NAME_T                                                            TEXT("vouchermgrtest")
#define VOUCHERMGRTEST_ASSEMBLY_VERSION                                                                 12.4.56.0
#define VOUCHERMGRTEST_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define VOUCHERMGRTEST_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define VOUCHERMGRTEST_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define VOUCHERMGRTEST_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define VOUCHERMGRTEST_ASSEMBLY_CULTURE                                                                 neutral
#define VOUCHERMGRTEST_ASSEMBLY_CULTURE_A                                                              "neutral"
#define VOUCHERMGRTEST_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define VOUCHERMGRTEST_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define VOUCHERMGRTEST_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_DEF                                                              syschecktest,version=12.4.56.0,culture=neutral
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_DEF_A                                                           "syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_DEF_W                                                          L"syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_DEF_S                                                          S"syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("syschecktest,version=12.4.56.0,culture=neutral")
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_REF                                                              syschecktest,version=12.4.56.0,culture=neutral
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_REF_A                                                           "syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_REF_W                                                          L"syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_REF_S                                                          S"syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("syschecktest,version=12.4.56.0,culture=neutral")
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                        syschecktest,version=12.4.56.0,culture=neutral
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"syschecktest,version=12.4.56.0,culture=neutral"
#define SYSCHECKTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("syschecktest,version=12.4.56.0,culture=neutral")
#define SYSCHECKTEST_ASSEMBLY_NAME                                                                      syschecktest
#define SYSCHECKTEST_ASSEMBLY_NAME_A                                                                   "syschecktest"
#define SYSCHECKTEST_ASSEMBLY_NAME_W                                                                  L"syschecktest"
#define SYSCHECKTEST_ASSEMBLY_NAME_S                                                                  S"syschecktest"
#define SYSCHECKTEST_ASSEMBLY_NAME_T                                                              TEXT("syschecktest")
#define SYSCHECKTEST_ASSEMBLY_VERSION                                                                   12.4.56.0
#define SYSCHECKTEST_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define SYSCHECKTEST_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define SYSCHECKTEST_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define SYSCHECKTEST_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define SYSCHECKTEST_ASSEMBLY_CULTURE                                                                   neutral
#define SYSCHECKTEST_ASSEMBLY_CULTURE_A                                                                "neutral"
#define SYSCHECKTEST_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define SYSCHECKTEST_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define SYSCHECKTEST_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_DEF                                                              modifyssisdb,version=12.4.56.0,culture=neutral
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_DEF_A                                                           "modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_DEF_W                                                          L"modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_DEF_S                                                          S"modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("modifyssisdb,version=12.4.56.0,culture=neutral")
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_REF                                                              modifyssisdb,version=12.4.56.0,culture=neutral
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_REF_A                                                           "modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_REF_W                                                          L"modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_REF_S                                                          S"modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("modifyssisdb,version=12.4.56.0,culture=neutral")
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_EXACT_REF                                                        modifyssisdb,version=12.4.56.0,culture=neutral
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"modifyssisdb,version=12.4.56.0,culture=neutral"
#define MODIFYSSISDB_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("modifyssisdb,version=12.4.56.0,culture=neutral")
#define MODIFYSSISDB_ASSEMBLY_NAME                                                                      modifyssisdb
#define MODIFYSSISDB_ASSEMBLY_NAME_A                                                                   "modifyssisdb"
#define MODIFYSSISDB_ASSEMBLY_NAME_W                                                                  L"modifyssisdb"
#define MODIFYSSISDB_ASSEMBLY_NAME_S                                                                  S"modifyssisdb"
#define MODIFYSSISDB_ASSEMBLY_NAME_T                                                              TEXT("modifyssisdb")
#define MODIFYSSISDB_ASSEMBLY_VERSION                                                                   12.4.56.0
#define MODIFYSSISDB_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define MODIFYSSISDB_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define MODIFYSSISDB_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define MODIFYSSISDB_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define MODIFYSSISDB_ASSEMBLY_CULTURE                                                                   neutral
#define MODIFYSSISDB_ASSEMBLY_CULTURE_A                                                                "neutral"
#define MODIFYSSISDB_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define MODIFYSSISDB_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define MODIFYSSISDB_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_DEF                                                      reportingstresstests,version=12.4.56.0,culture=neutral
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_DEF_A                                                   "reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_DEF_W                                                  L"reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_DEF_S                                                  S"reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_DEF_T                                              TEXT("reportingstresstests,version=12.4.56.0,culture=neutral")
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_REF                                                      reportingstresstests,version=12.4.56.0,culture=neutral
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_REF_A                                                   "reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_REF_W                                                  L"reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_REF_S                                                  S"reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_REF_T                                              TEXT("reportingstresstests,version=12.4.56.0,culture=neutral")
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_EXACT_REF                                                reportingstresstests,version=12.4.56.0,culture=neutral
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_EXACT_REF_A                                             "reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_EXACT_REF_W                                            L"reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_EXACT_REF_S                                            S"reportingstresstests,version=12.4.56.0,culture=neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_IDENTITY_EXACT_REF_T                                        TEXT("reportingstresstests,version=12.4.56.0,culture=neutral")
#define REPORTINGSTRESSTESTS_ASSEMBLY_NAME                                                              reportingstresstests
#define REPORTINGSTRESSTESTS_ASSEMBLY_NAME_A                                                           "reportingstresstests"
#define REPORTINGSTRESSTESTS_ASSEMBLY_NAME_W                                                          L"reportingstresstests"
#define REPORTINGSTRESSTESTS_ASSEMBLY_NAME_S                                                          S"reportingstresstests"
#define REPORTINGSTRESSTESTS_ASSEMBLY_NAME_T                                                      TEXT("reportingstresstests")
#define REPORTINGSTRESSTESTS_ASSEMBLY_VERSION                                                           12.4.56.0
#define REPORTINGSTRESSTESTS_ASSEMBLY_VERSION_A                                                        "12.4.56.0"
#define REPORTINGSTRESSTESTS_ASSEMBLY_VERSION_W                                                       L"12.4.56.0"
#define REPORTINGSTRESSTESTS_ASSEMBLY_VERSION_S                                                       S"12.4.56.0"
#define REPORTINGSTRESSTESTS_ASSEMBLY_VERSION_T                                                   TEXT("12.4.56.0")
#define REPORTINGSTRESSTESTS_ASSEMBLY_CULTURE                                                           neutral
#define REPORTINGSTRESSTESTS_ASSEMBLY_CULTURE_A                                                        "neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_CULTURE_W                                                       L"neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_CULTURE_S                                                       S"neutral"
#define REPORTINGSTRESSTESTS_ASSEMBLY_CULTURE_T                                                   TEXT("neutral")
#define CLEANSERFVT_ASSEMBLY_IDENTITY_DEF                                                               cleanserfvt,version=12.4.56.0,culture=neutral
#define CLEANSERFVT_ASSEMBLY_IDENTITY_DEF_A                                                            "cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_DEF_W                                                           L"cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_DEF_S                                                           S"cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("cleanserfvt,version=12.4.56.0,culture=neutral")
#define CLEANSERFVT_ASSEMBLY_IDENTITY_REF                                                               cleanserfvt,version=12.4.56.0,culture=neutral
#define CLEANSERFVT_ASSEMBLY_IDENTITY_REF_A                                                            "cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_REF_W                                                           L"cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_REF_S                                                           S"cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("cleanserfvt,version=12.4.56.0,culture=neutral")
#define CLEANSERFVT_ASSEMBLY_IDENTITY_EXACT_REF                                                         cleanserfvt,version=12.4.56.0,culture=neutral
#define CLEANSERFVT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"cleanserfvt,version=12.4.56.0,culture=neutral"
#define CLEANSERFVT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("cleanserfvt,version=12.4.56.0,culture=neutral")
#define CLEANSERFVT_ASSEMBLY_NAME                                                                       cleanserfvt
#define CLEANSERFVT_ASSEMBLY_NAME_A                                                                    "cleanserfvt"
#define CLEANSERFVT_ASSEMBLY_NAME_W                                                                   L"cleanserfvt"
#define CLEANSERFVT_ASSEMBLY_NAME_S                                                                   S"cleanserfvt"
#define CLEANSERFVT_ASSEMBLY_NAME_T                                                               TEXT("cleanserfvt")
#define CLEANSERFVT_ASSEMBLY_VERSION                                                                    12.4.56.0
#define CLEANSERFVT_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define CLEANSERFVT_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define CLEANSERFVT_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define CLEANSERFVT_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define CLEANSERFVT_ASSEMBLY_CULTURE                                                                    neutral
#define CLEANSERFVT_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define CLEANSERFVT_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define CLEANSERFVT_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define CLEANSERFVT_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define XLTRANSTEST_ASSEMBLY_IDENTITY_DEF                                                               xltranstest,version=12.4.56.0,culture=neutral
#define XLTRANSTEST_ASSEMBLY_IDENTITY_DEF_A                                                            "xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_DEF_W                                                           L"xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_DEF_S                                                           S"xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("xltranstest,version=12.4.56.0,culture=neutral")
#define XLTRANSTEST_ASSEMBLY_IDENTITY_REF                                                               xltranstest,version=12.4.56.0,culture=neutral
#define XLTRANSTEST_ASSEMBLY_IDENTITY_REF_A                                                            "xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_REF_W                                                           L"xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_REF_S                                                           S"xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("xltranstest,version=12.4.56.0,culture=neutral")
#define XLTRANSTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                         xltranstest,version=12.4.56.0,culture=neutral
#define XLTRANSTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"xltranstest,version=12.4.56.0,culture=neutral"
#define XLTRANSTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("xltranstest,version=12.4.56.0,culture=neutral")
#define XLTRANSTEST_ASSEMBLY_NAME                                                                       xltranstest
#define XLTRANSTEST_ASSEMBLY_NAME_A                                                                    "xltranstest"
#define XLTRANSTEST_ASSEMBLY_NAME_W                                                                   L"xltranstest"
#define XLTRANSTEST_ASSEMBLY_NAME_S                                                                   S"xltranstest"
#define XLTRANSTEST_ASSEMBLY_NAME_T                                                               TEXT("xltranstest")
#define XLTRANSTEST_ASSEMBLY_VERSION                                                                    12.4.56.0
#define XLTRANSTEST_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define XLTRANSTEST_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define XLTRANSTEST_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define XLTRANSTEST_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define XLTRANSTEST_ASSEMBLY_CULTURE                                                                    neutral
#define XLTRANSTEST_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define XLTRANSTEST_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define XLTRANSTEST_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define XLTRANSTEST_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_DEF                                                              toolsmgmtdvt,version=12.4.56.0,culture=neutral
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_DEF_A                                                           "toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_DEF_W                                                          L"toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_DEF_S                                                          S"toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("toolsmgmtdvt,version=12.4.56.0,culture=neutral")
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_REF                                                              toolsmgmtdvt,version=12.4.56.0,culture=neutral
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_REF_A                                                           "toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_REF_W                                                          L"toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_REF_S                                                          S"toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("toolsmgmtdvt,version=12.4.56.0,culture=neutral")
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_EXACT_REF                                                        toolsmgmtdvt,version=12.4.56.0,culture=neutral
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"toolsmgmtdvt,version=12.4.56.0,culture=neutral"
#define TOOLSMGMTDVT_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("toolsmgmtdvt,version=12.4.56.0,culture=neutral")
#define TOOLSMGMTDVT_ASSEMBLY_NAME                                                                      toolsmgmtdvt
#define TOOLSMGMTDVT_ASSEMBLY_NAME_A                                                                   "toolsmgmtdvt"
#define TOOLSMGMTDVT_ASSEMBLY_NAME_W                                                                  L"toolsmgmtdvt"
#define TOOLSMGMTDVT_ASSEMBLY_NAME_S                                                                  S"toolsmgmtdvt"
#define TOOLSMGMTDVT_ASSEMBLY_NAME_T                                                              TEXT("toolsmgmtdvt")
#define TOOLSMGMTDVT_ASSEMBLY_VERSION                                                                   12.4.56.0
#define TOOLSMGMTDVT_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define TOOLSMGMTDVT_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define TOOLSMGMTDVT_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define TOOLSMGMTDVT_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define TOOLSMGMTDVT_ASSEMBLY_CULTURE                                                                   neutral
#define TOOLSMGMTDVT_ASSEMBLY_CULTURE_A                                                                "neutral"
#define TOOLSMGMTDVT_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define TOOLSMGMTDVT_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define TOOLSMGMTDVT_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define WSMONITORTEST_ASSEMBLY_IDENTITY_DEF                                                             wsmonitortest,version=12.4.56.0,culture=neutral
#define WSMONITORTEST_ASSEMBLY_IDENTITY_DEF_A                                                          "wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_DEF_W                                                         L"wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_DEF_S                                                         S"wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("wsmonitortest,version=12.4.56.0,culture=neutral")
#define WSMONITORTEST_ASSEMBLY_IDENTITY_REF                                                             wsmonitortest,version=12.4.56.0,culture=neutral
#define WSMONITORTEST_ASSEMBLY_IDENTITY_REF_A                                                          "wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_REF_W                                                         L"wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_REF_S                                                         S"wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("wsmonitortest,version=12.4.56.0,culture=neutral")
#define WSMONITORTEST_ASSEMBLY_IDENTITY_EXACT_REF                                                       wsmonitortest,version=12.4.56.0,culture=neutral
#define WSMONITORTEST_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"wsmonitortest,version=12.4.56.0,culture=neutral"
#define WSMONITORTEST_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("wsmonitortest,version=12.4.56.0,culture=neutral")
#define WSMONITORTEST_ASSEMBLY_NAME                                                                     wsmonitortest
#define WSMONITORTEST_ASSEMBLY_NAME_A                                                                  "wsmonitortest"
#define WSMONITORTEST_ASSEMBLY_NAME_W                                                                 L"wsmonitortest"
#define WSMONITORTEST_ASSEMBLY_NAME_S                                                                 S"wsmonitortest"
#define WSMONITORTEST_ASSEMBLY_NAME_T                                                             TEXT("wsmonitortest")
#define WSMONITORTEST_ASSEMBLY_VERSION                                                                  12.4.56.0
#define WSMONITORTEST_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define WSMONITORTEST_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define WSMONITORTEST_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define WSMONITORTEST_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define WSMONITORTEST_ASSEMBLY_CULTURE                                                                  neutral
#define WSMONITORTEST_ASSEMBLY_CULTURE_A                                                               "neutral"
#define WSMONITORTEST_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define WSMONITORTEST_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define WSMONITORTEST_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define STORAGETESTUI_ASSEMBLY_IDENTITY_DEF                                                             storagetestui,version=12.4.56.0,culture=neutral
#define STORAGETESTUI_ASSEMBLY_IDENTITY_DEF_A                                                          "storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_DEF_W                                                         L"storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_DEF_S                                                         S"storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("storagetestui,version=12.4.56.0,culture=neutral")
#define STORAGETESTUI_ASSEMBLY_IDENTITY_REF                                                             storagetestui,version=12.4.56.0,culture=neutral
#define STORAGETESTUI_ASSEMBLY_IDENTITY_REF_A                                                          "storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_REF_W                                                         L"storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_REF_S                                                         S"storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("storagetestui,version=12.4.56.0,culture=neutral")
#define STORAGETESTUI_ASSEMBLY_IDENTITY_EXACT_REF                                                       storagetestui,version=12.4.56.0,culture=neutral
#define STORAGETESTUI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"storagetestui,version=12.4.56.0,culture=neutral"
#define STORAGETESTUI_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("storagetestui,version=12.4.56.0,culture=neutral")
#define STORAGETESTUI_ASSEMBLY_NAME                                                                     storagetestui
#define STORAGETESTUI_ASSEMBLY_NAME_A                                                                  "storagetestui"
#define STORAGETESTUI_ASSEMBLY_NAME_W                                                                 L"storagetestui"
#define STORAGETESTUI_ASSEMBLY_NAME_S                                                                 S"storagetestui"
#define STORAGETESTUI_ASSEMBLY_NAME_T                                                             TEXT("storagetestui")
#define STORAGETESTUI_ASSEMBLY_VERSION                                                                  12.4.56.0
#define STORAGETESTUI_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define STORAGETESTUI_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define STORAGETESTUI_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define STORAGETESTUI_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define STORAGETESTUI_ASSEMBLY_CULTURE                                                                  neutral
#define STORAGETESTUI_ASSEMBLY_CULTURE_A                                                               "neutral"
#define STORAGETESTUI_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define STORAGETESTUI_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define STORAGETESTUI_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define GPSTRESS_ASSEMBLY_IDENTITY_DEF                                                                  gpstress,version=12.4.56.0,culture=neutral
#define GPSTRESS_ASSEMBLY_IDENTITY_DEF_A                                                               "gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_DEF_W                                                              L"gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_DEF_S                                                              S"gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("gpstress,version=12.4.56.0,culture=neutral")
#define GPSTRESS_ASSEMBLY_IDENTITY_REF                                                                  gpstress,version=12.4.56.0,culture=neutral
#define GPSTRESS_ASSEMBLY_IDENTITY_REF_A                                                               "gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_REF_W                                                              L"gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_REF_S                                                              S"gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("gpstress,version=12.4.56.0,culture=neutral")
#define GPSTRESS_ASSEMBLY_IDENTITY_EXACT_REF                                                            gpstress,version=12.4.56.0,culture=neutral
#define GPSTRESS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"gpstress,version=12.4.56.0,culture=neutral"
#define GPSTRESS_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("gpstress,version=12.4.56.0,culture=neutral")
#define GPSTRESS_ASSEMBLY_NAME                                                                          gpstress
#define GPSTRESS_ASSEMBLY_NAME_A                                                                       "gpstress"
#define GPSTRESS_ASSEMBLY_NAME_W                                                                      L"gpstress"
#define GPSTRESS_ASSEMBLY_NAME_S                                                                      S"gpstress"
#define GPSTRESS_ASSEMBLY_NAME_T                                                                  TEXT("gpstress")
#define GPSTRESS_ASSEMBLY_VERSION                                                                       12.4.56.0
#define GPSTRESS_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define GPSTRESS_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define GPSTRESS_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define GPSTRESS_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define GPSTRESS_ASSEMBLY_CULTURE                                                                       neutral
#define GPSTRESS_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define GPSTRESS_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define GPSTRESS_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define GPSTRESS_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_DEF                                                    reportingtargettestcpp,version=12.4.56.0,culture=neutral
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_DEF_A                                                 "reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_DEF_W                                                L"reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_DEF_S                                                S"reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_DEF_T                                            TEXT("reportingtargettestcpp,version=12.4.56.0,culture=neutral")
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_REF                                                    reportingtargettestcpp,version=12.4.56.0,culture=neutral
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_REF_A                                                 "reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_REF_W                                                L"reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_REF_S                                                S"reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_REF_T                                            TEXT("reportingtargettestcpp,version=12.4.56.0,culture=neutral")
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_EXACT_REF                                              reportingtargettestcpp,version=12.4.56.0,culture=neutral
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_EXACT_REF_A                                           "reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_EXACT_REF_W                                          L"reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_EXACT_REF_S                                          S"reportingtargettestcpp,version=12.4.56.0,culture=neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_IDENTITY_EXACT_REF_T                                      TEXT("reportingtargettestcpp,version=12.4.56.0,culture=neutral")
#define REPORTINGTARGETTESTCPP_ASSEMBLY_NAME                                                            reportingtargettestcpp
#define REPORTINGTARGETTESTCPP_ASSEMBLY_NAME_A                                                         "reportingtargettestcpp"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_NAME_W                                                        L"reportingtargettestcpp"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_NAME_S                                                        S"reportingtargettestcpp"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_NAME_T                                                    TEXT("reportingtargettestcpp")
#define REPORTINGTARGETTESTCPP_ASSEMBLY_VERSION                                                         12.4.56.0
#define REPORTINGTARGETTESTCPP_ASSEMBLY_VERSION_A                                                      "12.4.56.0"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_VERSION_W                                                     L"12.4.56.0"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_VERSION_S                                                     S"12.4.56.0"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_VERSION_T                                                 TEXT("12.4.56.0")
#define REPORTINGTARGETTESTCPP_ASSEMBLY_CULTURE                                                         neutral
#define REPORTINGTARGETTESTCPP_ASSEMBLY_CULTURE_A                                                      "neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_CULTURE_W                                                     L"neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_CULTURE_S                                                     S"neutral"
#define REPORTINGTARGETTESTCPP_ASSEMBLY_CULTURE_T                                                 TEXT("neutral")
#define DATAGENERATOR_ASSEMBLY_IDENTITY_DEF                                                             datagenerator,version=12.4.56.0,culture=neutral
#define DATAGENERATOR_ASSEMBLY_IDENTITY_DEF_A                                                          "datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_DEF_W                                                         L"datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_DEF_S                                                         S"datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("datagenerator,version=12.4.56.0,culture=neutral")
#define DATAGENERATOR_ASSEMBLY_IDENTITY_REF                                                             datagenerator,version=12.4.56.0,culture=neutral
#define DATAGENERATOR_ASSEMBLY_IDENTITY_REF_A                                                          "datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_REF_W                                                         L"datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_REF_S                                                         S"datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("datagenerator,version=12.4.56.0,culture=neutral")
#define DATAGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF                                                       datagenerator,version=12.4.56.0,culture=neutral
#define DATAGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"datagenerator,version=12.4.56.0,culture=neutral"
#define DATAGENERATOR_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("datagenerator,version=12.4.56.0,culture=neutral")
#define DATAGENERATOR_ASSEMBLY_NAME                                                                     datagenerator
#define DATAGENERATOR_ASSEMBLY_NAME_A                                                                  "datagenerator"
#define DATAGENERATOR_ASSEMBLY_NAME_W                                                                 L"datagenerator"
#define DATAGENERATOR_ASSEMBLY_NAME_S                                                                 S"datagenerator"
#define DATAGENERATOR_ASSEMBLY_NAME_T                                                             TEXT("datagenerator")
#define DATAGENERATOR_ASSEMBLY_VERSION                                                                  12.4.56.0
#define DATAGENERATOR_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define DATAGENERATOR_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define DATAGENERATOR_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define DATAGENERATOR_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define DATAGENERATOR_ASSEMBLY_CULTURE                                                                  neutral
#define DATAGENERATOR_ASSEMBLY_CULTURE_A                                                               "neutral"
#define DATAGENERATOR_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define DATAGENERATOR_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define DATAGENERATOR_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define PACKAGECHECK_ASSEMBLY_IDENTITY_DEF                                                              packagecheck,version=12.4.56.0,culture=neutral
#define PACKAGECHECK_ASSEMBLY_IDENTITY_DEF_A                                                           "packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_DEF_W                                                          L"packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_DEF_S                                                          S"packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("packagecheck,version=12.4.56.0,culture=neutral")
#define PACKAGECHECK_ASSEMBLY_IDENTITY_REF                                                              packagecheck,version=12.4.56.0,culture=neutral
#define PACKAGECHECK_ASSEMBLY_IDENTITY_REF_A                                                           "packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_REF_W                                                          L"packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_REF_S                                                          S"packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("packagecheck,version=12.4.56.0,culture=neutral")
#define PACKAGECHECK_ASSEMBLY_IDENTITY_EXACT_REF                                                        packagecheck,version=12.4.56.0,culture=neutral
#define PACKAGECHECK_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"packagecheck,version=12.4.56.0,culture=neutral"
#define PACKAGECHECK_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("packagecheck,version=12.4.56.0,culture=neutral")
#define PACKAGECHECK_ASSEMBLY_NAME                                                                      packagecheck
#define PACKAGECHECK_ASSEMBLY_NAME_A                                                                   "packagecheck"
#define PACKAGECHECK_ASSEMBLY_NAME_W                                                                  L"packagecheck"
#define PACKAGECHECK_ASSEMBLY_NAME_S                                                                  S"packagecheck"
#define PACKAGECHECK_ASSEMBLY_NAME_T                                                              TEXT("packagecheck")
#define PACKAGECHECK_ASSEMBLY_VERSION                                                                   12.4.56.0
#define PACKAGECHECK_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define PACKAGECHECK_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define PACKAGECHECK_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define PACKAGECHECK_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define PACKAGECHECK_ASSEMBLY_CULTURE                                                                   neutral
#define PACKAGECHECK_ASSEMBLY_CULTURE_A                                                                "neutral"
#define PACKAGECHECK_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define PACKAGECHECK_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define PACKAGECHECK_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_DEF                                          microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_DEF_A                                       "microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_DEF_W                                      L"microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_DEF_S                                      S"microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_DEF_T                                  TEXT("microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_REF                                          microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_REF_A                                       "microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_REF_W                                      L"microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_REF_S                                      S"microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_REF_T                                  TEXT("microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_EXACT_REF                                    microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_EXACT_REF_A                                 "microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_EXACT_REF_W                                L"microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_EXACT_REF_S                                S"microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_IDENTITY_EXACT_REF_T                            TEXT("microsoft.xna.liveserver.ls3i.om,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_NAME                                                  microsoft.xna.liveserver.ls3i.om
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_NAME_A                                               "microsoft.xna.liveserver.ls3i.om"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_NAME_W                                              L"microsoft.xna.liveserver.ls3i.om"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_NAME_S                                              S"microsoft.xna.liveserver.ls3i.om"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_NAME_T                                          TEXT("microsoft.xna.liveserver.ls3i.om")
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_VERSION                                               12.4.56.0
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_VERSION_A                                            "12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_VERSION_W                                           L"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_VERSION_S                                           S"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_VERSION_T                                       TEXT("12.4.56.0")
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_CULTURE                                               neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_CULTURE_A                                            "neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_CULTURE_W                                           L"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_CULTURE_S                                           S"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_OM_ASSEMBLY_CULTURE_T                                       TEXT("neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_DEF                                         microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_DEF_A                                      "microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_DEF_W                                     L"microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_DEF_S                                     S"microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_DEF_T                                 TEXT("microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_REF                                         microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_REF_A                                      "microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_REF_W                                     L"microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_REF_S                                     S"microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_REF_T                                 TEXT("microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_EXACT_REF                                   microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_EXACT_REF_A                                "microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_EXACT_REF_W                               L"microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_EXACT_REF_S                               S"microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_IDENTITY_EXACT_REF_T                           TEXT("microsoft.xna.liveserver.ls3i.wtt,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_NAME                                                 microsoft.xna.liveserver.ls3i.wtt
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_NAME_A                                              "microsoft.xna.liveserver.ls3i.wtt"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_NAME_W                                             L"microsoft.xna.liveserver.ls3i.wtt"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_NAME_S                                             S"microsoft.xna.liveserver.ls3i.wtt"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_NAME_T                                         TEXT("microsoft.xna.liveserver.ls3i.wtt")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_VERSION                                              12.4.56.0
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_VERSION_A                                           "12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_VERSION_W                                          L"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_VERSION_S                                          S"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_VERSION_T                                      TEXT("12.4.56.0")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_CULTURE                                              neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_CULTURE_A                                           "neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_CULTURE_W                                          L"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_CULTURE_S                                          S"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WTT_ASSEMBLY_CULTURE_T                                      TEXT("neutral")
#define RUNANALYZER_ASSEMBLY_IDENTITY_DEF                                                               runanalyzer,version=12.4.56.0,culture=neutral
#define RUNANALYZER_ASSEMBLY_IDENTITY_DEF_A                                                            "runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_DEF_W                                                           L"runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_DEF_S                                                           S"runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("runanalyzer,version=12.4.56.0,culture=neutral")
#define RUNANALYZER_ASSEMBLY_IDENTITY_REF                                                               runanalyzer,version=12.4.56.0,culture=neutral
#define RUNANALYZER_ASSEMBLY_IDENTITY_REF_A                                                            "runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_REF_W                                                           L"runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_REF_S                                                           S"runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("runanalyzer,version=12.4.56.0,culture=neutral")
#define RUNANALYZER_ASSEMBLY_IDENTITY_EXACT_REF                                                         runanalyzer,version=12.4.56.0,culture=neutral
#define RUNANALYZER_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"runanalyzer,version=12.4.56.0,culture=neutral"
#define RUNANALYZER_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("runanalyzer,version=12.4.56.0,culture=neutral")
#define RUNANALYZER_ASSEMBLY_NAME                                                                       runanalyzer
#define RUNANALYZER_ASSEMBLY_NAME_A                                                                    "runanalyzer"
#define RUNANALYZER_ASSEMBLY_NAME_W                                                                   L"runanalyzer"
#define RUNANALYZER_ASSEMBLY_NAME_S                                                                   S"runanalyzer"
#define RUNANALYZER_ASSEMBLY_NAME_T                                                               TEXT("runanalyzer")
#define RUNANALYZER_ASSEMBLY_VERSION                                                                    12.4.56.0
#define RUNANALYZER_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define RUNANALYZER_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define RUNANALYZER_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define RUNANALYZER_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define RUNANALYZER_ASSEMBLY_CULTURE                                                                    neutral
#define RUNANALYZER_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define RUNANALYZER_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define RUNANALYZER_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define RUNANALYZER_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_DEF                                       microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_DEF_A                                    "microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_DEF_W                                   L"microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_DEF_S                                   S"microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_DEF_T                               TEXT("microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_REF                                       microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_REF_A                                    "microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_REF_W                                   L"microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_REF_S                                   S"microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_REF_T                               TEXT("microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_EXACT_REF                                 microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_EXACT_REF_A                              "microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_EXACT_REF_W                             L"microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_EXACT_REF_S                             S"microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_IDENTITY_EXACT_REF_T                         TEXT("microsoft.xna.liveserver.ls3i.tasks,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_NAME                                               microsoft.xna.liveserver.ls3i.tasks
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_NAME_A                                            "microsoft.xna.liveserver.ls3i.tasks"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_NAME_W                                           L"microsoft.xna.liveserver.ls3i.tasks"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_NAME_S                                           S"microsoft.xna.liveserver.ls3i.tasks"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_NAME_T                                       TEXT("microsoft.xna.liveserver.ls3i.tasks")
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_VERSION                                            12.4.56.0
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_VERSION_A                                         "12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_VERSION_W                                        L"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_VERSION_S                                        S"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_VERSION_T                                    TEXT("12.4.56.0")
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_CULTURE                                            neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_CULTURE_A                                         "neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_CULTURE_W                                        L"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_CULTURE_S                                        S"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_TASKS_ASSEMBLY_CULTURE_T                                    TEXT("neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_DEF                                    microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_DEF_A                                 "microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_DEF_W                                L"microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_DEF_S                                S"microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_DEF_T                            TEXT("microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_REF                                    microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_REF_A                                 "microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_REF_W                                L"microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_REF_S                                S"microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_REF_T                            TEXT("microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_EXACT_REF                              microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_EXACT_REF_A                           "microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_EXACT_REF_W                          L"microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_EXACT_REF_S                          S"microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_IDENTITY_EXACT_REF_T                      TEXT("microsoft.xna.liveserver.ls3i.webpages,version=12.4.56.0,culture=neutral")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_NAME                                            microsoft.xna.liveserver.ls3i.webpages
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_NAME_A                                         "microsoft.xna.liveserver.ls3i.webpages"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_NAME_W                                        L"microsoft.xna.liveserver.ls3i.webpages"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_NAME_S                                        S"microsoft.xna.liveserver.ls3i.webpages"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_NAME_T                                    TEXT("microsoft.xna.liveserver.ls3i.webpages")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_VERSION                                         12.4.56.0
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_VERSION_A                                      "12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_VERSION_W                                     L"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_VERSION_S                                     S"12.4.56.0"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_VERSION_T                                 TEXT("12.4.56.0")
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_CULTURE                                         neutral
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_CULTURE_A                                      "neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_CULTURE_W                                     L"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_CULTURE_S                                     S"neutral"
#define MICROSOFT_XNA_LIVESERVER_LS3I_WEBPAGES_ASSEMBLY_CULTURE_T                                 TEXT("neutral")
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF                                         catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_A                                      "catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_W                                     L"catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_S                                     S"catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_T                                 TEXT("catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral")
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_REF                                         catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_A                                      "catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_W                                     L"catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_S                                     S"catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_T                                 TEXT("catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral")
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF                                   catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_A                                "catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_W                               L"catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_S                               S"catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_T                           TEXT("catalogwebservice-4999-functional,version=12.4.56.0,culture=neutral")
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_NAME                                                 catalogwebservice-4999-functional
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_NAME_A                                              "catalogwebservice-4999-functional"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_NAME_W                                             L"catalogwebservice-4999-functional"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_NAME_S                                             S"catalogwebservice-4999-functional"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_NAME_T                                         TEXT("catalogwebservice-4999-functional")
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_VERSION                                              12.4.56.0
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_VERSION_A                                           "12.4.56.0"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_VERSION_W                                          L"12.4.56.0"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_VERSION_S                                          S"12.4.56.0"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_VERSION_T                                      TEXT("12.4.56.0")
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_CULTURE                                              neutral
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_CULTURE_A                                           "neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_CULTURE_W                                          L"neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_CULTURE_S                                          S"neutral"
#define CATALOGWEBSERVICE_4999_FUNCTIONAL_ASSEMBLY_CULTURE_T                                      TEXT("neutral")
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF                                                 livetools-4998-functional,version=12.4.56.0,culture=neutral
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_A                                              "livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_W                                             L"livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_S                                             S"livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_DEF_T                                         TEXT("livetools-4998-functional,version=12.4.56.0,culture=neutral")
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_REF                                                 livetools-4998-functional,version=12.4.56.0,culture=neutral
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_A                                              "livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_W                                             L"livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_S                                             S"livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_REF_T                                         TEXT("livetools-4998-functional,version=12.4.56.0,culture=neutral")
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF                                           livetools-4998-functional,version=12.4.56.0,culture=neutral
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_A                                        "livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_W                                       L"livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_S                                       S"livetools-4998-functional,version=12.4.56.0,culture=neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_IDENTITY_EXACT_REF_T                                   TEXT("livetools-4998-functional,version=12.4.56.0,culture=neutral")
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_NAME                                                         livetools-4998-functional
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_NAME_A                                                      "livetools-4998-functional"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_NAME_W                                                     L"livetools-4998-functional"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_NAME_S                                                     S"livetools-4998-functional"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_NAME_T                                                 TEXT("livetools-4998-functional")
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_VERSION                                                      12.4.56.0
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_VERSION_A                                                   "12.4.56.0"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_VERSION_W                                                  L"12.4.56.0"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_VERSION_S                                                  S"12.4.56.0"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_VERSION_T                                              TEXT("12.4.56.0")
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_CULTURE                                                      neutral
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_CULTURE_A                                                   "neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_CULTURE_W                                                  L"neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_CULTURE_S                                                  S"neutral"
#define LIVETOOLS_4998_FUNCTIONAL_ASSEMBLY_CULTURE_T                                              TEXT("neutral")
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_DEF                                                   dspfilevalidatortesting,version=12.4.56.0,culture=neutral
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_DEF_A                                                "dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_DEF_W                                               L"dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_DEF_S                                               S"dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_DEF_T                                           TEXT("dspfilevalidatortesting,version=12.4.56.0,culture=neutral")
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_REF                                                   dspfilevalidatortesting,version=12.4.56.0,culture=neutral
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_REF_A                                                "dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_REF_W                                               L"dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_REF_S                                               S"dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_REF_T                                           TEXT("dspfilevalidatortesting,version=12.4.56.0,culture=neutral")
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_EXACT_REF                                             dspfilevalidatortesting,version=12.4.56.0,culture=neutral
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_EXACT_REF_A                                          "dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_EXACT_REF_W                                         L"dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_EXACT_REF_S                                         S"dspfilevalidatortesting,version=12.4.56.0,culture=neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_IDENTITY_EXACT_REF_T                                     TEXT("dspfilevalidatortesting,version=12.4.56.0,culture=neutral")
#define DSPFILEVALIDATORTESTING_ASSEMBLY_NAME                                                           dspfilevalidatortesting
#define DSPFILEVALIDATORTESTING_ASSEMBLY_NAME_A                                                        "dspfilevalidatortesting"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_NAME_W                                                       L"dspfilevalidatortesting"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_NAME_S                                                       S"dspfilevalidatortesting"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_NAME_T                                                   TEXT("dspfilevalidatortesting")
#define DSPFILEVALIDATORTESTING_ASSEMBLY_VERSION                                                        12.4.56.0
#define DSPFILEVALIDATORTESTING_ASSEMBLY_VERSION_A                                                     "12.4.56.0"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_VERSION_W                                                    L"12.4.56.0"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_VERSION_S                                                    S"12.4.56.0"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_VERSION_T                                                TEXT("12.4.56.0")
#define DSPFILEVALIDATORTESTING_ASSEMBLY_CULTURE                                                        neutral
#define DSPFILEVALIDATORTESTING_ASSEMBLY_CULTURE_A                                                     "neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_CULTURE_W                                                    L"neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_CULTURE_S                                                    S"neutral"
#define DSPFILEVALIDATORTESTING_ASSEMBLY_CULTURE_T                                                TEXT("neutral")
#define XLASTAUTO_ASSEMBLY_IDENTITY_DEF                                                                 xlastauto,version=12.4.56.0,culture=neutral
#define XLASTAUTO_ASSEMBLY_IDENTITY_DEF_A                                                              "xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_DEF_W                                                             L"xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_DEF_S                                                             S"xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("xlastauto,version=12.4.56.0,culture=neutral")
#define XLASTAUTO_ASSEMBLY_IDENTITY_REF                                                                 xlastauto,version=12.4.56.0,culture=neutral
#define XLASTAUTO_ASSEMBLY_IDENTITY_REF_A                                                              "xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_REF_W                                                             L"xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_REF_S                                                             S"xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("xlastauto,version=12.4.56.0,culture=neutral")
#define XLASTAUTO_ASSEMBLY_IDENTITY_EXACT_REF                                                           xlastauto,version=12.4.56.0,culture=neutral
#define XLASTAUTO_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"xlastauto,version=12.4.56.0,culture=neutral"
#define XLASTAUTO_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("xlastauto,version=12.4.56.0,culture=neutral")
#define XLASTAUTO_ASSEMBLY_NAME                                                                         xlastauto
#define XLASTAUTO_ASSEMBLY_NAME_A                                                                      "xlastauto"
#define XLASTAUTO_ASSEMBLY_NAME_W                                                                     L"xlastauto"
#define XLASTAUTO_ASSEMBLY_NAME_S                                                                     S"xlastauto"
#define XLASTAUTO_ASSEMBLY_NAME_T                                                                 TEXT("xlastauto")
#define XLASTAUTO_ASSEMBLY_VERSION                                                                      12.4.56.0
#define XLASTAUTO_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define XLASTAUTO_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define XLASTAUTO_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define XLASTAUTO_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define XLASTAUTO_ASSEMBLY_CULTURE                                                                      neutral
#define XLASTAUTO_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define XLASTAUTO_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define XLASTAUTO_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define XLASTAUTO_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_DEF                                                               xbl4xboxcom,version=12.4.56.0,culture=neutral
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_DEF_A                                                            "xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_DEF_W                                                           L"xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_DEF_S                                                           S"xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("xbl4xboxcom,version=12.4.56.0,culture=neutral")
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_REF                                                               xbl4xboxcom,version=12.4.56.0,culture=neutral
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_REF_A                                                            "xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_REF_W                                                           L"xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_REF_S                                                           S"xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("xbl4xboxcom,version=12.4.56.0,culture=neutral")
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_EXACT_REF                                                         xbl4xboxcom,version=12.4.56.0,culture=neutral
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"xbl4xboxcom,version=12.4.56.0,culture=neutral"
#define XBL4XBOXCOM_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("xbl4xboxcom,version=12.4.56.0,culture=neutral")
#define XBL4XBOXCOM_ASSEMBLY_NAME                                                                       xbl4xboxcom
#define XBL4XBOXCOM_ASSEMBLY_NAME_A                                                                    "xbl4xboxcom"
#define XBL4XBOXCOM_ASSEMBLY_NAME_W                                                                   L"xbl4xboxcom"
#define XBL4XBOXCOM_ASSEMBLY_NAME_S                                                                   S"xbl4xboxcom"
#define XBL4XBOXCOM_ASSEMBLY_NAME_T                                                               TEXT("xbl4xboxcom")
#define XBL4XBOXCOM_ASSEMBLY_VERSION                                                                    12.4.56.0
#define XBL4XBOXCOM_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define XBL4XBOXCOM_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define XBL4XBOXCOM_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define XBL4XBOXCOM_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define XBL4XBOXCOM_ASSEMBLY_CULTURE                                                                    neutral
#define XBL4XBOXCOM_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define XBL4XBOXCOM_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define XBL4XBOXCOM_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define XBL4XBOXCOM_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define AAMODULE_ASSEMBLY_IDENTITY_DEF                                                                  aamodule,version=12.4.56.0,culture=neutral
#define AAMODULE_ASSEMBLY_IDENTITY_DEF_A                                                               "aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_DEF_W                                                              L"aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_DEF_S                                                              S"aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_DEF_T                                                          TEXT("aamodule,version=12.4.56.0,culture=neutral")
#define AAMODULE_ASSEMBLY_IDENTITY_REF                                                                  aamodule,version=12.4.56.0,culture=neutral
#define AAMODULE_ASSEMBLY_IDENTITY_REF_A                                                               "aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_REF_W                                                              L"aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_REF_S                                                              S"aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_REF_T                                                          TEXT("aamodule,version=12.4.56.0,culture=neutral")
#define AAMODULE_ASSEMBLY_IDENTITY_EXACT_REF                                                            aamodule,version=12.4.56.0,culture=neutral
#define AAMODULE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                         "aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                        L"aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                        S"aamodule,version=12.4.56.0,culture=neutral"
#define AAMODULE_ASSEMBLY_IDENTITY_EXACT_REF_T                                                    TEXT("aamodule,version=12.4.56.0,culture=neutral")
#define AAMODULE_ASSEMBLY_NAME                                                                          aamodule
#define AAMODULE_ASSEMBLY_NAME_A                                                                       "aamodule"
#define AAMODULE_ASSEMBLY_NAME_W                                                                      L"aamodule"
#define AAMODULE_ASSEMBLY_NAME_S                                                                      S"aamodule"
#define AAMODULE_ASSEMBLY_NAME_T                                                                  TEXT("aamodule")
#define AAMODULE_ASSEMBLY_VERSION                                                                       12.4.56.0
#define AAMODULE_ASSEMBLY_VERSION_A                                                                    "12.4.56.0"
#define AAMODULE_ASSEMBLY_VERSION_W                                                                   L"12.4.56.0"
#define AAMODULE_ASSEMBLY_VERSION_S                                                                   S"12.4.56.0"
#define AAMODULE_ASSEMBLY_VERSION_T                                                               TEXT("12.4.56.0")
#define AAMODULE_ASSEMBLY_CULTURE                                                                       neutral
#define AAMODULE_ASSEMBLY_CULTURE_A                                                                    "neutral"
#define AAMODULE_ASSEMBLY_CULTURE_W                                                                   L"neutral"
#define AAMODULE_ASSEMBLY_CULTURE_S                                                                   S"neutral"
#define AAMODULE_ASSEMBLY_CULTURE_T                                                               TEXT("neutral")
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_DEF                                          frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_DEF_A                                       "frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_DEF_W                                      L"frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_DEF_S                                      S"frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_DEF_T                                  TEXT("frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_REF                                          frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_REF_A                                       "frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_REF_W                                      L"frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_REF_S                                      S"frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_REF_T                                  TEXT("frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                    frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                 "frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                L"frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                S"frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                            TEXT("frontdoor_activeauth_partner_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_NAME                                                  frontdoor_activeauth_partner_msi
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_NAME_A                                               "frontdoor_activeauth_partner_msi"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_NAME_W                                              L"frontdoor_activeauth_partner_msi"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_NAME_S                                              S"frontdoor_activeauth_partner_msi"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_NAME_T                                          TEXT("frontdoor_activeauth_partner_msi")
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_VERSION                                               12.4.56.0
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_VERSION_A                                            "12.4.56.0"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_VERSION_W                                           L"12.4.56.0"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_VERSION_S                                           S"12.4.56.0"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_VERSION_T                                       TEXT("12.4.56.0")
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_CULTURE                                               neutral
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_CULTURE_A                                            "neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_CULTURE_W                                           L"neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_CULTURE_S                                           S"neutral"
#define FRONTDOOR_ACTIVEAUTH_PARTNER_MSI_ASSEMBLY_CULTURE_T                                       TEXT("neutral")
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_DEF                                                  frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_DEF_A                                               "frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_DEF_W                                              L"frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_DEF_S                                              S"frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_DEF_T                                          TEXT("frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_REF                                                  frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_REF_A                                               "frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_REF_W                                              L"frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_REF_S                                              S"frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_REF_T                                          TEXT("frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                            frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                         "frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                        L"frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                        S"frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                    TEXT("frontdoor_activeauth_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_NAME                                                          frontdoor_activeauth_msi
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_NAME_A                                                       "frontdoor_activeauth_msi"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_NAME_W                                                      L"frontdoor_activeauth_msi"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_NAME_S                                                      S"frontdoor_activeauth_msi"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_NAME_T                                                  TEXT("frontdoor_activeauth_msi")
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_VERSION                                                       12.4.56.0
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_VERSION_A                                                    "12.4.56.0"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_VERSION_W                                                   L"12.4.56.0"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_VERSION_S                                                   S"12.4.56.0"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_VERSION_T                                               TEXT("12.4.56.0")
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_CULTURE                                                       neutral
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_CULTURE_A                                                    "neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_CULTURE_W                                                   L"neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_CULTURE_S                                                   S"neutral"
#define FRONTDOOR_ACTIVEAUTH_MSI_ASSEMBLY_CULTURE_T                                               TEXT("neutral")
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_DEF                                                         frontdoor_lsp_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_DEF_A                                                      "frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_DEF_W                                                     L"frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_DEF_S                                                     S"frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("frontdoor_lsp_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_REF                                                         frontdoor_lsp_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_REF_A                                                      "frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_REF_W                                                     L"frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_REF_S                                                     S"frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("frontdoor_lsp_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                                   frontdoor_lsp_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"frontdoor_lsp_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("frontdoor_lsp_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_LSP_MSI_ASSEMBLY_NAME                                                                 frontdoor_lsp_msi
#define FRONTDOOR_LSP_MSI_ASSEMBLY_NAME_A                                                              "frontdoor_lsp_msi"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_NAME_W                                                             L"frontdoor_lsp_msi"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_NAME_S                                                             S"frontdoor_lsp_msi"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_NAME_T                                                         TEXT("frontdoor_lsp_msi")
#define FRONTDOOR_LSP_MSI_ASSEMBLY_VERSION                                                              12.4.56.0
#define FRONTDOOR_LSP_MSI_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define FRONTDOOR_LSP_MSI_ASSEMBLY_CULTURE                                                              neutral
#define FRONTDOOR_LSP_MSI_ASSEMBLY_CULTURE_A                                                           "neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define FRONTDOOR_LSP_MSI_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_DEF                                                   frontdoor_signature_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_DEF_A                                                "frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_DEF_W                                               L"frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_DEF_S                                               S"frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_DEF_T                                           TEXT("frontdoor_signature_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_REF                                                   frontdoor_signature_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_REF_A                                                "frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_REF_W                                               L"frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_REF_S                                               S"frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_REF_T                                           TEXT("frontdoor_signature_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                             frontdoor_signature_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                          "frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                         L"frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                         S"frontdoor_signature_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                     TEXT("frontdoor_signature_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_NAME                                                           frontdoor_signature_msi
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_NAME_A                                                        "frontdoor_signature_msi"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_NAME_W                                                       L"frontdoor_signature_msi"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_NAME_S                                                       S"frontdoor_signature_msi"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_NAME_T                                                   TEXT("frontdoor_signature_msi")
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_VERSION                                                        12.4.56.0
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_VERSION_A                                                     "12.4.56.0"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_VERSION_W                                                    L"12.4.56.0"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_VERSION_S                                                    S"12.4.56.0"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_VERSION_T                                                TEXT("12.4.56.0")
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_CULTURE                                                        neutral
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_CULTURE_A                                                     "neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_CULTURE_W                                                    L"neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_CULTURE_S                                                    S"neutral"
#define FRONTDOOR_SIGNATURE_MSI_ASSEMBLY_CULTURE_T                                                TEXT("neutral")
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_DEF                                                     frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_DEF_A                                                  "frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_DEF_W                                                 L"frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_DEF_S                                                 S"frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_DEF_T                                             TEXT("frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_REF                                                     frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_REF_A                                                  "frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_REF_W                                                 L"frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_REF_S                                                 S"frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_REF_T                                             TEXT("frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                               frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                            "frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                           L"frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                           S"frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                       TEXT("frontdoor_xcrypto_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_NAME                                                             frontdoor_xcrypto_msi
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_NAME_A                                                          "frontdoor_xcrypto_msi"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_NAME_W                                                         L"frontdoor_xcrypto_msi"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_NAME_S                                                         S"frontdoor_xcrypto_msi"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_NAME_T                                                     TEXT("frontdoor_xcrypto_msi")
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_VERSION                                                          12.4.56.0
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_VERSION_A                                                       "12.4.56.0"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_VERSION_W                                                      L"12.4.56.0"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_VERSION_S                                                      S"12.4.56.0"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_VERSION_T                                                  TEXT("12.4.56.0")
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_CULTURE                                                          neutral
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_CULTURE_A                                                       "neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_CULTURE_W                                                      L"neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_CULTURE_S                                                      S"neutral"
#define FRONTDOOR_XCRYPTO_MSI_ASSEMBLY_CULTURE_T                                                  TEXT("neutral")
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_DEF                                                   frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_DEF_A                                                "frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_DEF_W                                               L"frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_DEF_S                                               S"frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_DEF_T                                           TEXT("frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_REF                                                   frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_REF_A                                                "frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_REF_W                                               L"frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_REF_S                                               S"frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_REF_T                                           TEXT("frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                             frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                          "frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                         L"frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                         S"frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                     TEXT("frontdoor_xrlscan32_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_NAME                                                           frontdoor_xrlscan32_msi
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_NAME_A                                                        "frontdoor_xrlscan32_msi"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_NAME_W                                                       L"frontdoor_xrlscan32_msi"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_NAME_S                                                       S"frontdoor_xrlscan32_msi"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_NAME_T                                                   TEXT("frontdoor_xrlscan32_msi")
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_VERSION                                                        12.4.56.0
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_VERSION_A                                                     "12.4.56.0"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_VERSION_W                                                    L"12.4.56.0"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_VERSION_S                                                    S"12.4.56.0"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_VERSION_T                                                TEXT("12.4.56.0")
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_CULTURE                                                        neutral
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_CULTURE_A                                                     "neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_CULTURE_W                                                    L"neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_CULTURE_S                                                    S"neutral"
#define FRONTDOOR_XRLSCAN32_MSI_ASSEMBLY_CULTURE_T                                                TEXT("neutral")
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_DEF                                                           _inh_kdcsvc_msi,version=12.4.56.0,culture=neutral
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_DEF_A                                                        "_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_DEF_W                                                       L"_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_DEF_S                                                       S"_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral")
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_REF                                                           _inh_kdcsvc_msi,version=12.4.56.0,culture=neutral
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_REF_A                                                        "_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_REF_W                                                       L"_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_REF_S                                                       S"_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral")
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                                     _inh_kdcsvc_msi,version=12.4.56.0,culture=neutral
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("_inh_kdcsvc_msi,version=12.4.56.0,culture=neutral")
#define _INH_KDCSVC_MSI_ASSEMBLY_NAME                                                                   _inh_kdcsvc_msi
#define _INH_KDCSVC_MSI_ASSEMBLY_NAME_A                                                                "_inh_kdcsvc_msi"
#define _INH_KDCSVC_MSI_ASSEMBLY_NAME_W                                                               L"_inh_kdcsvc_msi"
#define _INH_KDCSVC_MSI_ASSEMBLY_NAME_S                                                               S"_inh_kdcsvc_msi"
#define _INH_KDCSVC_MSI_ASSEMBLY_NAME_T                                                           TEXT("_inh_kdcsvc_msi")
#define _INH_KDCSVC_MSI_ASSEMBLY_VERSION                                                                12.4.56.0
#define _INH_KDCSVC_MSI_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define _INH_KDCSVC_MSI_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define _INH_KDCSVC_MSI_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define _INH_KDCSVC_MSI_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define _INH_KDCSVC_MSI_ASSEMBLY_CULTURE                                                                neutral
#define _INH_KDCSVC_MSI_ASSEMBLY_CULTURE_A                                                             "neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define _INH_KDCSVC_MSI_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_DEF                                                          _inh_udpadpt_msi,version=12.4.56.0,culture=neutral
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_DEF_A                                                       "_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_DEF_W                                                      L"_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_DEF_S                                                      S"_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("_inh_udpadpt_msi,version=12.4.56.0,culture=neutral")
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_REF                                                          _inh_udpadpt_msi,version=12.4.56.0,culture=neutral
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_REF_A                                                       "_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_REF_W                                                      L"_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_REF_S                                                      S"_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("_inh_udpadpt_msi,version=12.4.56.0,culture=neutral")
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                                    _inh_udpadpt_msi,version=12.4.56.0,culture=neutral
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"_inh_udpadpt_msi,version=12.4.56.0,culture=neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("_inh_udpadpt_msi,version=12.4.56.0,culture=neutral")
#define _INH_UDPADPT_MSI_ASSEMBLY_NAME                                                                  _inh_udpadpt_msi
#define _INH_UDPADPT_MSI_ASSEMBLY_NAME_A                                                               "_inh_udpadpt_msi"
#define _INH_UDPADPT_MSI_ASSEMBLY_NAME_W                                                              L"_inh_udpadpt_msi"
#define _INH_UDPADPT_MSI_ASSEMBLY_NAME_S                                                              S"_inh_udpadpt_msi"
#define _INH_UDPADPT_MSI_ASSEMBLY_NAME_T                                                          TEXT("_inh_udpadpt_msi")
#define _INH_UDPADPT_MSI_ASSEMBLY_VERSION                                                               12.4.56.0
#define _INH_UDPADPT_MSI_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define _INH_UDPADPT_MSI_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define _INH_UDPADPT_MSI_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define _INH_UDPADPT_MSI_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define _INH_UDPADPT_MSI_ASSEMBLY_CULTURE                                                               neutral
#define _INH_UDPADPT_MSI_ASSEMBLY_CULTURE_A                                                            "neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define _INH_UDPADPT_MSI_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_DEF                                                         _inh_wsreader_msi,version=12.4.56.0,culture=neutral
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_DEF_A                                                      "_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_DEF_W                                                     L"_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_DEF_S                                                     S"_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("_inh_wsreader_msi,version=12.4.56.0,culture=neutral")
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_REF                                                         _inh_wsreader_msi,version=12.4.56.0,culture=neutral
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_REF_A                                                      "_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_REF_W                                                     L"_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_REF_S                                                     S"_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("_inh_wsreader_msi,version=12.4.56.0,culture=neutral")
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                                   _inh_wsreader_msi,version=12.4.56.0,culture=neutral
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"_inh_wsreader_msi,version=12.4.56.0,culture=neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("_inh_wsreader_msi,version=12.4.56.0,culture=neutral")
#define _INH_WSREADER_MSI_ASSEMBLY_NAME                                                                 _inh_wsreader_msi
#define _INH_WSREADER_MSI_ASSEMBLY_NAME_A                                                              "_inh_wsreader_msi"
#define _INH_WSREADER_MSI_ASSEMBLY_NAME_W                                                             L"_inh_wsreader_msi"
#define _INH_WSREADER_MSI_ASSEMBLY_NAME_S                                                             S"_inh_wsreader_msi"
#define _INH_WSREADER_MSI_ASSEMBLY_NAME_T                                                         TEXT("_inh_wsreader_msi")
#define _INH_WSREADER_MSI_ASSEMBLY_VERSION                                                              12.4.56.0
#define _INH_WSREADER_MSI_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define _INH_WSREADER_MSI_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define _INH_WSREADER_MSI_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define _INH_WSREADER_MSI_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define _INH_WSREADER_MSI_ASSEMBLY_CULTURE                                                              neutral
#define _INH_WSREADER_MSI_ASSEMBLY_CULTURE_A                                                           "neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define _INH_WSREADER_MSI_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_DEF                                                            _inh_xbanc_msi,version=12.4.56.0,culture=neutral
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_DEF_A                                                         "_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_DEF_W                                                        L"_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_DEF_S                                                        S"_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_inh_xbanc_msi,version=12.4.56.0,culture=neutral")
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_REF                                                            _inh_xbanc_msi,version=12.4.56.0,culture=neutral
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_REF_A                                                         "_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_REF_W                                                        L"_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_REF_S                                                        S"_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_inh_xbanc_msi,version=12.4.56.0,culture=neutral")
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                                      _inh_xbanc_msi,version=12.4.56.0,culture=neutral
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_inh_xbanc_msi,version=12.4.56.0,culture=neutral"
#define _INH_XBANC_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_inh_xbanc_msi,version=12.4.56.0,culture=neutral")
#define _INH_XBANC_MSI_ASSEMBLY_NAME                                                                    _inh_xbanc_msi
#define _INH_XBANC_MSI_ASSEMBLY_NAME_A                                                                 "_inh_xbanc_msi"
#define _INH_XBANC_MSI_ASSEMBLY_NAME_W                                                                L"_inh_xbanc_msi"
#define _INH_XBANC_MSI_ASSEMBLY_NAME_S                                                                S"_inh_xbanc_msi"
#define _INH_XBANC_MSI_ASSEMBLY_NAME_T                                                            TEXT("_inh_xbanc_msi")
#define _INH_XBANC_MSI_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _INH_XBANC_MSI_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _INH_XBANC_MSI_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _INH_XBANC_MSI_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _INH_XBANC_MSI_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _INH_XBANC_MSI_ASSEMBLY_CULTURE                                                                 neutral
#define _INH_XBANC_MSI_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _INH_XBANC_MSI_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _INH_XBANC_MSI_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _INH_XBANC_MSI_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define _LIVELSP_4_ASSEMBLY_IDENTITY_DEF                                                                _livelsp_4,version=12.4.56.0,culture=neutral
#define _LIVELSP_4_ASSEMBLY_IDENTITY_DEF_A                                                             "_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_DEF_W                                                            L"_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_DEF_S                                                            S"_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_livelsp_4,version=12.4.56.0,culture=neutral")
#define _LIVELSP_4_ASSEMBLY_IDENTITY_REF                                                                _livelsp_4,version=12.4.56.0,culture=neutral
#define _LIVELSP_4_ASSEMBLY_IDENTITY_REF_A                                                             "_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_REF_W                                                            L"_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_REF_S                                                            S"_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_livelsp_4,version=12.4.56.0,culture=neutral")
#define _LIVELSP_4_ASSEMBLY_IDENTITY_EXACT_REF                                                          _livelsp_4,version=12.4.56.0,culture=neutral
#define _LIVELSP_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_livelsp_4,version=12.4.56.0,culture=neutral"
#define _LIVELSP_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_livelsp_4,version=12.4.56.0,culture=neutral")
#define _LIVELSP_4_ASSEMBLY_NAME                                                                        _livelsp_4
#define _LIVELSP_4_ASSEMBLY_NAME_A                                                                     "_livelsp_4"
#define _LIVELSP_4_ASSEMBLY_NAME_W                                                                    L"_livelsp_4"
#define _LIVELSP_4_ASSEMBLY_NAME_S                                                                    S"_livelsp_4"
#define _LIVELSP_4_ASSEMBLY_NAME_T                                                                TEXT("_livelsp_4")
#define _LIVELSP_4_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _LIVELSP_4_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _LIVELSP_4_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _LIVELSP_4_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _LIVELSP_4_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _LIVELSP_4_ASSEMBLY_CULTURE                                                                     neutral
#define _LIVELSP_4_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _LIVELSP_4_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _LIVELSP_4_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _LIVELSP_4_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_DEF                                                              _livematch_0,version=12.4.56.0,culture=neutral
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_DEF_A                                                           "_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_DEF_W                                                          L"_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_DEF_S                                                          S"_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("_livematch_0,version=12.4.56.0,culture=neutral")
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_REF                                                              _livematch_0,version=12.4.56.0,culture=neutral
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_REF_A                                                           "_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_REF_W                                                          L"_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_REF_S                                                          S"_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("_livematch_0,version=12.4.56.0,culture=neutral")
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_EXACT_REF                                                        _livematch_0,version=12.4.56.0,culture=neutral
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"_livematch_0,version=12.4.56.0,culture=neutral"
#define _LIVEMATCH_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("_livematch_0,version=12.4.56.0,culture=neutral")
#define _LIVEMATCH_0_ASSEMBLY_NAME                                                                      _livematch_0
#define _LIVEMATCH_0_ASSEMBLY_NAME_A                                                                   "_livematch_0"
#define _LIVEMATCH_0_ASSEMBLY_NAME_W                                                                  L"_livematch_0"
#define _LIVEMATCH_0_ASSEMBLY_NAME_S                                                                  S"_livematch_0"
#define _LIVEMATCH_0_ASSEMBLY_NAME_T                                                              TEXT("_livematch_0")
#define _LIVEMATCH_0_ASSEMBLY_VERSION                                                                   12.4.56.0
#define _LIVEMATCH_0_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define _LIVEMATCH_0_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define _LIVEMATCH_0_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define _LIVEMATCH_0_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define _LIVEMATCH_0_ASSEMBLY_CULTURE                                                                   neutral
#define _LIVEMATCH_0_ASSEMBLY_CULTURE_A                                                                "neutral"
#define _LIVEMATCH_0_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define _LIVEMATCH_0_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define _LIVEMATCH_0_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_DEF                                                              _livestats_1,version=12.4.56.0,culture=neutral
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_DEF_A                                                           "_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_DEF_W                                                          L"_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_DEF_S                                                          S"_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("_livestats_1,version=12.4.56.0,culture=neutral")
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_REF                                                              _livestats_1,version=12.4.56.0,culture=neutral
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_REF_A                                                           "_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_REF_W                                                          L"_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_REF_S                                                          S"_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("_livestats_1,version=12.4.56.0,culture=neutral")
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_EXACT_REF                                                        _livestats_1,version=12.4.56.0,culture=neutral
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"_livestats_1,version=12.4.56.0,culture=neutral"
#define _LIVESTATS_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("_livestats_1,version=12.4.56.0,culture=neutral")
#define _LIVESTATS_1_ASSEMBLY_NAME                                                                      _livestats_1
#define _LIVESTATS_1_ASSEMBLY_NAME_A                                                                   "_livestats_1"
#define _LIVESTATS_1_ASSEMBLY_NAME_W                                                                  L"_livestats_1"
#define _LIVESTATS_1_ASSEMBLY_NAME_S                                                                  S"_livestats_1"
#define _LIVESTATS_1_ASSEMBLY_NAME_T                                                              TEXT("_livestats_1")
#define _LIVESTATS_1_ASSEMBLY_VERSION                                                                   12.4.56.0
#define _LIVESTATS_1_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define _LIVESTATS_1_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define _LIVESTATS_1_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define _LIVESTATS_1_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define _LIVESTATS_1_ASSEMBLY_CULTURE                                                                   neutral
#define _LIVESTATS_1_ASSEMBLY_CULTURE_A                                                                "neutral"
#define _LIVESTATS_1_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define _LIVESTATS_1_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define _LIVESTATS_1_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_DEF                                                                _msgtool_0,version=12.4.56.0,culture=neutral
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_DEF_A                                                             "_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_DEF_W                                                            L"_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_DEF_S                                                            S"_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_msgtool_0,version=12.4.56.0,culture=neutral")
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_REF                                                                _msgtool_0,version=12.4.56.0,culture=neutral
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_REF_A                                                             "_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_REF_W                                                            L"_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_REF_S                                                            S"_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_msgtool_0,version=12.4.56.0,culture=neutral")
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_EXACT_REF                                                          _msgtool_0,version=12.4.56.0,culture=neutral
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_msgtool_0,version=12.4.56.0,culture=neutral"
#define _MSGTOOL_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_msgtool_0,version=12.4.56.0,culture=neutral")
#define _MSGTOOL_0_ASSEMBLY_NAME                                                                        _msgtool_0
#define _MSGTOOL_0_ASSEMBLY_NAME_A                                                                     "_msgtool_0"
#define _MSGTOOL_0_ASSEMBLY_NAME_W                                                                    L"_msgtool_0"
#define _MSGTOOL_0_ASSEMBLY_NAME_S                                                                    S"_msgtool_0"
#define _MSGTOOL_0_ASSEMBLY_NAME_T                                                                TEXT("_msgtool_0")
#define _MSGTOOL_0_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _MSGTOOL_0_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _MSGTOOL_0_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _MSGTOOL_0_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _MSGTOOL_0_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _MSGTOOL_0_ASSEMBLY_CULTURE                                                                     neutral
#define _MSGTOOL_0_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _MSGTOOL_0_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _MSGTOOL_0_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _MSGTOOL_0_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_DEF                                                             _partnermgr_0,version=12.4.56.0,culture=neutral
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_DEF_A                                                          "_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_DEF_W                                                         L"_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_DEF_S                                                         S"_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("_partnermgr_0,version=12.4.56.0,culture=neutral")
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_REF                                                             _partnermgr_0,version=12.4.56.0,culture=neutral
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_REF_A                                                          "_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_REF_W                                                         L"_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_REF_S                                                         S"_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("_partnermgr_0,version=12.4.56.0,culture=neutral")
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_EXACT_REF                                                       _partnermgr_0,version=12.4.56.0,culture=neutral
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"_partnermgr_0,version=12.4.56.0,culture=neutral"
#define _PARTNERMGR_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("_partnermgr_0,version=12.4.56.0,culture=neutral")
#define _PARTNERMGR_0_ASSEMBLY_NAME                                                                     _partnermgr_0
#define _PARTNERMGR_0_ASSEMBLY_NAME_A                                                                  "_partnermgr_0"
#define _PARTNERMGR_0_ASSEMBLY_NAME_W                                                                 L"_partnermgr_0"
#define _PARTNERMGR_0_ASSEMBLY_NAME_S                                                                 S"_partnermgr_0"
#define _PARTNERMGR_0_ASSEMBLY_NAME_T                                                             TEXT("_partnermgr_0")
#define _PARTNERMGR_0_ASSEMBLY_VERSION                                                                  12.4.56.0
#define _PARTNERMGR_0_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define _PARTNERMGR_0_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define _PARTNERMGR_0_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define _PARTNERMGR_0_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define _PARTNERMGR_0_ASSEMBLY_CULTURE                                                                  neutral
#define _PARTNERMGR_0_ASSEMBLY_CULTURE_A                                                               "neutral"
#define _PARTNERMGR_0_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define _PARTNERMGR_0_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define _PARTNERMGR_0_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define _PROPXQS_2_ASSEMBLY_IDENTITY_DEF                                                                _propxqs_2,version=12.4.56.0,culture=neutral
#define _PROPXQS_2_ASSEMBLY_IDENTITY_DEF_A                                                             "_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_DEF_W                                                            L"_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_DEF_S                                                            S"_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_propxqs_2,version=12.4.56.0,culture=neutral")
#define _PROPXQS_2_ASSEMBLY_IDENTITY_REF                                                                _propxqs_2,version=12.4.56.0,culture=neutral
#define _PROPXQS_2_ASSEMBLY_IDENTITY_REF_A                                                             "_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_REF_W                                                            L"_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_REF_S                                                            S"_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_propxqs_2,version=12.4.56.0,culture=neutral")
#define _PROPXQS_2_ASSEMBLY_IDENTITY_EXACT_REF                                                          _propxqs_2,version=12.4.56.0,culture=neutral
#define _PROPXQS_2_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_propxqs_2,version=12.4.56.0,culture=neutral"
#define _PROPXQS_2_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_propxqs_2,version=12.4.56.0,culture=neutral")
#define _PROPXQS_2_ASSEMBLY_NAME                                                                        _propxqs_2
#define _PROPXQS_2_ASSEMBLY_NAME_A                                                                     "_propxqs_2"
#define _PROPXQS_2_ASSEMBLY_NAME_W                                                                    L"_propxqs_2"
#define _PROPXQS_2_ASSEMBLY_NAME_S                                                                    S"_propxqs_2"
#define _PROPXQS_2_ASSEMBLY_NAME_T                                                                TEXT("_propxqs_2")
#define _PROPXQS_2_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _PROPXQS_2_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _PROPXQS_2_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _PROPXQS_2_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _PROPXQS_2_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _PROPXQS_2_ASSEMBLY_CULTURE                                                                     neutral
#define _PROPXQS_2_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _PROPXQS_2_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _PROPXQS_2_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _PROPXQS_2_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_DEF                                                    _refurbfeedprocessor_3,version=12.4.56.0,culture=neutral
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_DEF_A                                                 "_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_DEF_W                                                L"_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_DEF_S                                                S"_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_DEF_T                                            TEXT("_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral")
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_REF                                                    _refurbfeedprocessor_3,version=12.4.56.0,culture=neutral
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_REF_A                                                 "_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_REF_W                                                L"_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_REF_S                                                S"_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_REF_T                                            TEXT("_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral")
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_EXACT_REF                                              _refurbfeedprocessor_3,version=12.4.56.0,culture=neutral
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                           "_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                          L"_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                          S"_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                      TEXT("_refurbfeedprocessor_3,version=12.4.56.0,culture=neutral")
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_NAME                                                            _refurbfeedprocessor_3
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_NAME_A                                                         "_refurbfeedprocessor_3"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_NAME_W                                                        L"_refurbfeedprocessor_3"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_NAME_S                                                        S"_refurbfeedprocessor_3"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_NAME_T                                                    TEXT("_refurbfeedprocessor_3")
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_VERSION                                                         12.4.56.0
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_VERSION_A                                                      "12.4.56.0"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_VERSION_W                                                     L"12.4.56.0"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_VERSION_S                                                     S"12.4.56.0"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_VERSION_T                                                 TEXT("12.4.56.0")
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_CULTURE                                                         neutral
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_CULTURE_A                                                      "neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_CULTURE_W                                                     L"neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_CULTURE_S                                                     S"neutral"
#define _REFURBFEEDPROCESSOR_3_ASSEMBLY_CULTURE_T                                                 TEXT("neutral")
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_DEF                                                               _removepi_4,version=12.4.56.0,culture=neutral
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_DEF_A                                                            "_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_DEF_W                                                           L"_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_DEF_S                                                           S"_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_DEF_T                                                       TEXT("_removepi_4,version=12.4.56.0,culture=neutral")
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_REF                                                               _removepi_4,version=12.4.56.0,culture=neutral
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_REF_A                                                            "_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_REF_W                                                           L"_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_REF_S                                                           S"_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_REF_T                                                       TEXT("_removepi_4,version=12.4.56.0,culture=neutral")
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_EXACT_REF                                                         _removepi_4,version=12.4.56.0,culture=neutral
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                      "_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                     L"_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                     S"_removepi_4,version=12.4.56.0,culture=neutral"
#define _REMOVEPI_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                 TEXT("_removepi_4,version=12.4.56.0,culture=neutral")
#define _REMOVEPI_4_ASSEMBLY_NAME                                                                       _removepi_4
#define _REMOVEPI_4_ASSEMBLY_NAME_A                                                                    "_removepi_4"
#define _REMOVEPI_4_ASSEMBLY_NAME_W                                                                   L"_removepi_4"
#define _REMOVEPI_4_ASSEMBLY_NAME_S                                                                   S"_removepi_4"
#define _REMOVEPI_4_ASSEMBLY_NAME_T                                                               TEXT("_removepi_4")
#define _REMOVEPI_4_ASSEMBLY_VERSION                                                                    12.4.56.0
#define _REMOVEPI_4_ASSEMBLY_VERSION_A                                                                 "12.4.56.0"
#define _REMOVEPI_4_ASSEMBLY_VERSION_W                                                                L"12.4.56.0"
#define _REMOVEPI_4_ASSEMBLY_VERSION_S                                                                S"12.4.56.0"
#define _REMOVEPI_4_ASSEMBLY_VERSION_T                                                            TEXT("12.4.56.0")
#define _REMOVEPI_4_ASSEMBLY_CULTURE                                                                    neutral
#define _REMOVEPI_4_ASSEMBLY_CULTURE_A                                                                 "neutral"
#define _REMOVEPI_4_ASSEMBLY_CULTURE_W                                                                L"neutral"
#define _REMOVEPI_4_ASSEMBLY_CULTURE_S                                                                S"neutral"
#define _REMOVEPI_4_ASSEMBLY_CULTURE_T                                                            TEXT("neutral")
#define _SPUT_4_ASSEMBLY_IDENTITY_DEF                                                                   _sput_4,version=12.4.56.0,culture=neutral
#define _SPUT_4_ASSEMBLY_IDENTITY_DEF_A                                                                "_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_DEF_W                                                               L"_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_DEF_S                                                               S"_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_DEF_T                                                           TEXT("_sput_4,version=12.4.56.0,culture=neutral")
#define _SPUT_4_ASSEMBLY_IDENTITY_REF                                                                   _sput_4,version=12.4.56.0,culture=neutral
#define _SPUT_4_ASSEMBLY_IDENTITY_REF_A                                                                "_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_REF_W                                                               L"_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_REF_S                                                               S"_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_REF_T                                                           TEXT("_sput_4,version=12.4.56.0,culture=neutral")
#define _SPUT_4_ASSEMBLY_IDENTITY_EXACT_REF                                                             _sput_4,version=12.4.56.0,culture=neutral
#define _SPUT_4_ASSEMBLY_IDENTITY_EXACT_REF_A                                                          "_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_EXACT_REF_W                                                         L"_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_EXACT_REF_S                                                         S"_sput_4,version=12.4.56.0,culture=neutral"
#define _SPUT_4_ASSEMBLY_IDENTITY_EXACT_REF_T                                                     TEXT("_sput_4,version=12.4.56.0,culture=neutral")
#define _SPUT_4_ASSEMBLY_NAME                                                                           _sput_4
#define _SPUT_4_ASSEMBLY_NAME_A                                                                        "_sput_4"
#define _SPUT_4_ASSEMBLY_NAME_W                                                                       L"_sput_4"
#define _SPUT_4_ASSEMBLY_NAME_S                                                                       S"_sput_4"
#define _SPUT_4_ASSEMBLY_NAME_T                                                                   TEXT("_sput_4")
#define _SPUT_4_ASSEMBLY_VERSION                                                                        12.4.56.0
#define _SPUT_4_ASSEMBLY_VERSION_A                                                                     "12.4.56.0"
#define _SPUT_4_ASSEMBLY_VERSION_W                                                                    L"12.4.56.0"
#define _SPUT_4_ASSEMBLY_VERSION_S                                                                    S"12.4.56.0"
#define _SPUT_4_ASSEMBLY_VERSION_T                                                                TEXT("12.4.56.0")
#define _SPUT_4_ASSEMBLY_CULTURE                                                                        neutral
#define _SPUT_4_ASSEMBLY_CULTURE_A                                                                     "neutral"
#define _SPUT_4_ASSEMBLY_CULTURE_W                                                                    L"neutral"
#define _SPUT_4_ASSEMBLY_CULTURE_S                                                                    S"neutral"
#define _SPUT_4_ASSEMBLY_CULTURE_T                                                                TEXT("neutral")
#define _STUTIL_2_ASSEMBLY_IDENTITY_DEF                                                                 _stutil_2,version=12.4.56.0,culture=neutral
#define _STUTIL_2_ASSEMBLY_IDENTITY_DEF_A                                                              "_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_DEF_W                                                             L"_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_DEF_S                                                             S"_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("_stutil_2,version=12.4.56.0,culture=neutral")
#define _STUTIL_2_ASSEMBLY_IDENTITY_REF                                                                 _stutil_2,version=12.4.56.0,culture=neutral
#define _STUTIL_2_ASSEMBLY_IDENTITY_REF_A                                                              "_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_REF_W                                                             L"_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_REF_S                                                             S"_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("_stutil_2,version=12.4.56.0,culture=neutral")
#define _STUTIL_2_ASSEMBLY_IDENTITY_EXACT_REF                                                           _stutil_2,version=12.4.56.0,culture=neutral
#define _STUTIL_2_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"_stutil_2,version=12.4.56.0,culture=neutral"
#define _STUTIL_2_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("_stutil_2,version=12.4.56.0,culture=neutral")
#define _STUTIL_2_ASSEMBLY_NAME                                                                         _stutil_2
#define _STUTIL_2_ASSEMBLY_NAME_A                                                                      "_stutil_2"
#define _STUTIL_2_ASSEMBLY_NAME_W                                                                     L"_stutil_2"
#define _STUTIL_2_ASSEMBLY_NAME_S                                                                     S"_stutil_2"
#define _STUTIL_2_ASSEMBLY_NAME_T                                                                 TEXT("_stutil_2")
#define _STUTIL_2_ASSEMBLY_VERSION                                                                      12.4.56.0
#define _STUTIL_2_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define _STUTIL_2_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define _STUTIL_2_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define _STUTIL_2_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define _STUTIL_2_ASSEMBLY_CULTURE                                                                      neutral
#define _STUTIL_2_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define _STUTIL_2_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define _STUTIL_2_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define _STUTIL_2_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_DEF                                                            _systemcheck_1,version=12.4.56.0,culture=neutral
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_DEF_A                                                         "_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_DEF_W                                                        L"_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_DEF_S                                                        S"_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_systemcheck_1,version=12.4.56.0,culture=neutral")
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_REF                                                            _systemcheck_1,version=12.4.56.0,culture=neutral
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_REF_A                                                         "_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_REF_W                                                        L"_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_REF_S                                                        S"_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_systemcheck_1,version=12.4.56.0,culture=neutral")
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_EXACT_REF                                                      _systemcheck_1,version=12.4.56.0,culture=neutral
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_systemcheck_1,version=12.4.56.0,culture=neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_systemcheck_1,version=12.4.56.0,culture=neutral")
#define _SYSTEMCHECK_1_ASSEMBLY_NAME                                                                    _systemcheck_1
#define _SYSTEMCHECK_1_ASSEMBLY_NAME_A                                                                 "_systemcheck_1"
#define _SYSTEMCHECK_1_ASSEMBLY_NAME_W                                                                L"_systemcheck_1"
#define _SYSTEMCHECK_1_ASSEMBLY_NAME_S                                                                S"_systemcheck_1"
#define _SYSTEMCHECK_1_ASSEMBLY_NAME_T                                                            TEXT("_systemcheck_1")
#define _SYSTEMCHECK_1_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _SYSTEMCHECK_1_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _SYSTEMCHECK_1_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _SYSTEMCHECK_1_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _SYSTEMCHECK_1_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _SYSTEMCHECK_1_ASSEMBLY_CULTURE                                                                 neutral
#define _SYSTEMCHECK_1_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _SYSTEMCHECK_1_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_DEF                                                            _tokenimport_0,version=12.4.56.0,culture=neutral
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_DEF_A                                                         "_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_DEF_W                                                        L"_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_DEF_S                                                        S"_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_DEF_T                                                    TEXT("_tokenimport_0,version=12.4.56.0,culture=neutral")
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_REF                                                            _tokenimport_0,version=12.4.56.0,culture=neutral
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_REF_A                                                         "_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_REF_W                                                        L"_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_REF_S                                                        S"_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_REF_T                                                    TEXT("_tokenimport_0,version=12.4.56.0,culture=neutral")
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_EXACT_REF                                                      _tokenimport_0,version=12.4.56.0,culture=neutral
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                   "_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                  L"_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                  S"_tokenimport_0,version=12.4.56.0,culture=neutral"
#define _TOKENIMPORT_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                              TEXT("_tokenimport_0,version=12.4.56.0,culture=neutral")
#define _TOKENIMPORT_0_ASSEMBLY_NAME                                                                    _tokenimport_0
#define _TOKENIMPORT_0_ASSEMBLY_NAME_A                                                                 "_tokenimport_0"
#define _TOKENIMPORT_0_ASSEMBLY_NAME_W                                                                L"_tokenimport_0"
#define _TOKENIMPORT_0_ASSEMBLY_NAME_S                                                                S"_tokenimport_0"
#define _TOKENIMPORT_0_ASSEMBLY_NAME_T                                                            TEXT("_tokenimport_0")
#define _TOKENIMPORT_0_ASSEMBLY_VERSION                                                                 12.4.56.0
#define _TOKENIMPORT_0_ASSEMBLY_VERSION_A                                                              "12.4.56.0"
#define _TOKENIMPORT_0_ASSEMBLY_VERSION_W                                                             L"12.4.56.0"
#define _TOKENIMPORT_0_ASSEMBLY_VERSION_S                                                             S"12.4.56.0"
#define _TOKENIMPORT_0_ASSEMBLY_VERSION_T                                                         TEXT("12.4.56.0")
#define _TOKENIMPORT_0_ASSEMBLY_CULTURE                                                                 neutral
#define _TOKENIMPORT_0_ASSEMBLY_CULTURE_A                                                              "neutral"
#define _TOKENIMPORT_0_ASSEMBLY_CULTURE_W                                                             L"neutral"
#define _TOKENIMPORT_0_ASSEMBLY_CULTURE_S                                                             S"neutral"
#define _TOKENIMPORT_0_ASSEMBLY_CULTURE_T                                                         TEXT("neutral")
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_DEF                                                             _vouchermgr_3,version=12.4.56.0,culture=neutral
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_DEF_A                                                          "_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_DEF_W                                                         L"_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_DEF_S                                                         S"_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("_vouchermgr_3,version=12.4.56.0,culture=neutral")
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_REF                                                             _vouchermgr_3,version=12.4.56.0,culture=neutral
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_REF_A                                                          "_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_REF_W                                                         L"_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_REF_S                                                         S"_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("_vouchermgr_3,version=12.4.56.0,culture=neutral")
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_EXACT_REF                                                       _vouchermgr_3,version=12.4.56.0,culture=neutral
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"_vouchermgr_3,version=12.4.56.0,culture=neutral"
#define _VOUCHERMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("_vouchermgr_3,version=12.4.56.0,culture=neutral")
#define _VOUCHERMGR_3_ASSEMBLY_NAME                                                                     _vouchermgr_3
#define _VOUCHERMGR_3_ASSEMBLY_NAME_A                                                                  "_vouchermgr_3"
#define _VOUCHERMGR_3_ASSEMBLY_NAME_W                                                                 L"_vouchermgr_3"
#define _VOUCHERMGR_3_ASSEMBLY_NAME_S                                                                 S"_vouchermgr_3"
#define _VOUCHERMGR_3_ASSEMBLY_NAME_T                                                             TEXT("_vouchermgr_3")
#define _VOUCHERMGR_3_ASSEMBLY_VERSION                                                                  12.4.56.0
#define _VOUCHERMGR_3_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define _VOUCHERMGR_3_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define _VOUCHERMGR_3_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define _VOUCHERMGR_3_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define _VOUCHERMGR_3_ASSEMBLY_CULTURE                                                                  neutral
#define _VOUCHERMGR_3_ASSEMBLY_CULTURE_A                                                               "neutral"
#define _VOUCHERMGR_3_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define _VOUCHERMGR_3_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define _VOUCHERMGR_3_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define _XBLCFG_3_ASSEMBLY_IDENTITY_DEF                                                                 _xblcfg_3,version=12.4.56.0,culture=neutral
#define _XBLCFG_3_ASSEMBLY_IDENTITY_DEF_A                                                              "_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_DEF_W                                                             L"_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_DEF_S                                                             S"_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("_xblcfg_3,version=12.4.56.0,culture=neutral")
#define _XBLCFG_3_ASSEMBLY_IDENTITY_REF                                                                 _xblcfg_3,version=12.4.56.0,culture=neutral
#define _XBLCFG_3_ASSEMBLY_IDENTITY_REF_A                                                              "_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_REF_W                                                             L"_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_REF_S                                                             S"_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("_xblcfg_3,version=12.4.56.0,culture=neutral")
#define _XBLCFG_3_ASSEMBLY_IDENTITY_EXACT_REF                                                           _xblcfg_3,version=12.4.56.0,culture=neutral
#define _XBLCFG_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"_xblcfg_3,version=12.4.56.0,culture=neutral"
#define _XBLCFG_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("_xblcfg_3,version=12.4.56.0,culture=neutral")
#define _XBLCFG_3_ASSEMBLY_NAME                                                                         _xblcfg_3
#define _XBLCFG_3_ASSEMBLY_NAME_A                                                                      "_xblcfg_3"
#define _XBLCFG_3_ASSEMBLY_NAME_W                                                                     L"_xblcfg_3"
#define _XBLCFG_3_ASSEMBLY_NAME_S                                                                     S"_xblcfg_3"
#define _XBLCFG_3_ASSEMBLY_NAME_T                                                                 TEXT("_xblcfg_3")
#define _XBLCFG_3_ASSEMBLY_VERSION                                                                      12.4.56.0
#define _XBLCFG_3_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define _XBLCFG_3_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define _XBLCFG_3_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define _XBLCFG_3_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define _XBLCFG_3_ASSEMBLY_CULTURE                                                                      neutral
#define _XBLCFG_3_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define _XBLCFG_3_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define _XBLCFG_3_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define _XBLCFG_3_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_DEF                                                                _xkeymgr_3,version=12.4.56.0,culture=neutral
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_DEF_A                                                             "_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_DEF_W                                                            L"_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_DEF_S                                                            S"_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_xkeymgr_3,version=12.4.56.0,culture=neutral")
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_REF                                                                _xkeymgr_3,version=12.4.56.0,culture=neutral
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_REF_A                                                             "_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_REF_W                                                            L"_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_REF_S                                                            S"_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_xkeymgr_3,version=12.4.56.0,culture=neutral")
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_EXACT_REF                                                          _xkeymgr_3,version=12.4.56.0,culture=neutral
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_xkeymgr_3,version=12.4.56.0,culture=neutral"
#define _XKEYMGR_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_xkeymgr_3,version=12.4.56.0,culture=neutral")
#define _XKEYMGR_3_ASSEMBLY_NAME                                                                        _xkeymgr_3
#define _XKEYMGR_3_ASSEMBLY_NAME_A                                                                     "_xkeymgr_3"
#define _XKEYMGR_3_ASSEMBLY_NAME_W                                                                    L"_xkeymgr_3"
#define _XKEYMGR_3_ASSEMBLY_NAME_S                                                                    S"_xkeymgr_3"
#define _XKEYMGR_3_ASSEMBLY_NAME_T                                                                TEXT("_xkeymgr_3")
#define _XKEYMGR_3_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _XKEYMGR_3_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _XKEYMGR_3_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _XKEYMGR_3_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _XKEYMGR_3_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _XKEYMGR_3_ASSEMBLY_CULTURE                                                                     neutral
#define _XKEYMGR_3_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _XKEYMGR_3_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _XKEYMGR_3_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _XKEYMGR_3_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define _XMGMTC_3_ASSEMBLY_IDENTITY_DEF                                                                 _xmgmtc_3,version=12.4.56.0,culture=neutral
#define _XMGMTC_3_ASSEMBLY_IDENTITY_DEF_A                                                              "_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_DEF_W                                                             L"_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_DEF_S                                                             S"_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_DEF_T                                                         TEXT("_xmgmtc_3,version=12.4.56.0,culture=neutral")
#define _XMGMTC_3_ASSEMBLY_IDENTITY_REF                                                                 _xmgmtc_3,version=12.4.56.0,culture=neutral
#define _XMGMTC_3_ASSEMBLY_IDENTITY_REF_A                                                              "_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_REF_W                                                             L"_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_REF_S                                                             S"_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_REF_T                                                         TEXT("_xmgmtc_3,version=12.4.56.0,culture=neutral")
#define _XMGMTC_3_ASSEMBLY_IDENTITY_EXACT_REF                                                           _xmgmtc_3,version=12.4.56.0,culture=neutral
#define _XMGMTC_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                        "_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                       L"_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                       S"_xmgmtc_3,version=12.4.56.0,culture=neutral"
#define _XMGMTC_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                                   TEXT("_xmgmtc_3,version=12.4.56.0,culture=neutral")
#define _XMGMTC_3_ASSEMBLY_NAME                                                                         _xmgmtc_3
#define _XMGMTC_3_ASSEMBLY_NAME_A                                                                      "_xmgmtc_3"
#define _XMGMTC_3_ASSEMBLY_NAME_W                                                                     L"_xmgmtc_3"
#define _XMGMTC_3_ASSEMBLY_NAME_S                                                                     S"_xmgmtc_3"
#define _XMGMTC_3_ASSEMBLY_NAME_T                                                                 TEXT("_xmgmtc_3")
#define _XMGMTC_3_ASSEMBLY_VERSION                                                                      12.4.56.0
#define _XMGMTC_3_ASSEMBLY_VERSION_A                                                                   "12.4.56.0"
#define _XMGMTC_3_ASSEMBLY_VERSION_W                                                                  L"12.4.56.0"
#define _XMGMTC_3_ASSEMBLY_VERSION_S                                                                  S"12.4.56.0"
#define _XMGMTC_3_ASSEMBLY_VERSION_T                                                              TEXT("12.4.56.0")
#define _XMGMTC_3_ASSEMBLY_CULTURE                                                                      neutral
#define _XMGMTC_3_ASSEMBLY_CULTURE_A                                                                   "neutral"
#define _XMGMTC_3_ASSEMBLY_CULTURE_W                                                                  L"neutral"
#define _XMGMTC_3_ASSEMBLY_CULTURE_S                                                                  S"neutral"
#define _XMGMTC_3_ASSEMBLY_CULTURE_T                                                              TEXT("neutral")
#define _XSIGNER_0_ASSEMBLY_IDENTITY_DEF                                                                _xsigner_0,version=12.4.56.0,culture=neutral
#define _XSIGNER_0_ASSEMBLY_IDENTITY_DEF_A                                                             "_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_DEF_W                                                            L"_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_DEF_S                                                            S"_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("_xsigner_0,version=12.4.56.0,culture=neutral")
#define _XSIGNER_0_ASSEMBLY_IDENTITY_REF                                                                _xsigner_0,version=12.4.56.0,culture=neutral
#define _XSIGNER_0_ASSEMBLY_IDENTITY_REF_A                                                             "_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_REF_W                                                            L"_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_REF_S                                                            S"_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("_xsigner_0,version=12.4.56.0,culture=neutral")
#define _XSIGNER_0_ASSEMBLY_IDENTITY_EXACT_REF                                                          _xsigner_0,version=12.4.56.0,culture=neutral
#define _XSIGNER_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"_xsigner_0,version=12.4.56.0,culture=neutral"
#define _XSIGNER_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("_xsigner_0,version=12.4.56.0,culture=neutral")
#define _XSIGNER_0_ASSEMBLY_NAME                                                                        _xsigner_0
#define _XSIGNER_0_ASSEMBLY_NAME_A                                                                     "_xsigner_0"
#define _XSIGNER_0_ASSEMBLY_NAME_W                                                                    L"_xsigner_0"
#define _XSIGNER_0_ASSEMBLY_NAME_S                                                                    S"_xsigner_0"
#define _XSIGNER_0_ASSEMBLY_NAME_T                                                                TEXT("_xsigner_0")
#define _XSIGNER_0_ASSEMBLY_VERSION                                                                     12.4.56.0
#define _XSIGNER_0_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define _XSIGNER_0_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define _XSIGNER_0_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define _XSIGNER_0_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define _XSIGNER_0_ASSEMBLY_CULTURE                                                                     neutral
#define _XSIGNER_0_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define _XSIGNER_0_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define _XSIGNER_0_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define _XSIGNER_0_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_DEF                                             microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_DEF_A                                          "microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_DEF_W                                         L"microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_DEF_S                                         S"microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_DEF_T                                     TEXT("microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_REF                                             microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_REF_A                                          "microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_REF_W                                         L"microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_REF_S                                         S"microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_REF_T                                     TEXT("microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_EXACT_REF                                       microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_EXACT_REF_A                                    "microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_EXACT_REF_W                                   L"microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_EXACT_REF_S                                   S"microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_IDENTITY_EXACT_REF_T                               TEXT("microsoft.ems.tools.livetools,version=12.4.56.0,culture=neutral")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_NAME                                                     microsoft.ems.tools.livetools
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_NAME_A                                                  "microsoft.ems.tools.livetools"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_NAME_W                                                 L"microsoft.ems.tools.livetools"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_NAME_S                                                 S"microsoft.ems.tools.livetools"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_NAME_T                                             TEXT("microsoft.ems.tools.livetools")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_VERSION                                                  12.4.56.0
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_VERSION_A                                               "12.4.56.0"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_VERSION_W                                              L"12.4.56.0"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_VERSION_S                                              S"12.4.56.0"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_VERSION_T                                          TEXT("12.4.56.0")
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_CULTURE                                                  neutral
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_CULTURE_A                                               "neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_CULTURE_W                                              L"neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_CULTURE_S                                              S"neutral"
#define MICROSOFT_EMS_TOOLS_LIVETOOLS_ASSEMBLY_CULTURE_T                                          TEXT("neutral")
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_DEF                                                              _xappadmin_3,version=12.4.56.0,culture=neutral
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_DEF_A                                                           "_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_DEF_W                                                          L"_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_DEF_S                                                          S"_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_DEF_T                                                      TEXT("_xappadmin_3,version=12.4.56.0,culture=neutral")
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_REF                                                              _xappadmin_3,version=12.4.56.0,culture=neutral
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_REF_A                                                           "_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_REF_W                                                          L"_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_REF_S                                                          S"_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_REF_T                                                      TEXT("_xappadmin_3,version=12.4.56.0,culture=neutral")
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_EXACT_REF                                                        _xappadmin_3,version=12.4.56.0,culture=neutral
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                     "_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                    L"_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                    S"_xappadmin_3,version=12.4.56.0,culture=neutral"
#define _XAPPADMIN_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                                TEXT("_xappadmin_3,version=12.4.56.0,culture=neutral")
#define _XAPPADMIN_3_ASSEMBLY_NAME                                                                      _xappadmin_3
#define _XAPPADMIN_3_ASSEMBLY_NAME_A                                                                   "_xappadmin_3"
#define _XAPPADMIN_3_ASSEMBLY_NAME_W                                                                  L"_xappadmin_3"
#define _XAPPADMIN_3_ASSEMBLY_NAME_S                                                                  S"_xappadmin_3"
#define _XAPPADMIN_3_ASSEMBLY_NAME_T                                                              TEXT("_xappadmin_3")
#define _XAPPADMIN_3_ASSEMBLY_VERSION                                                                   12.4.56.0
#define _XAPPADMIN_3_ASSEMBLY_VERSION_A                                                                "12.4.56.0"
#define _XAPPADMIN_3_ASSEMBLY_VERSION_W                                                               L"12.4.56.0"
#define _XAPPADMIN_3_ASSEMBLY_VERSION_S                                                               S"12.4.56.0"
#define _XAPPADMIN_3_ASSEMBLY_VERSION_T                                                           TEXT("12.4.56.0")
#define _XAPPADMIN_3_ASSEMBLY_CULTURE                                                                   neutral
#define _XAPPADMIN_3_ASSEMBLY_CULTURE_A                                                                "neutral"
#define _XAPPADMIN_3_ASSEMBLY_CULTURE_W                                                               L"neutral"
#define _XAPPADMIN_3_ASSEMBLY_CULTURE_S                                                               S"neutral"
#define _XAPPADMIN_3_ASSEMBLY_CULTURE_T                                                           TEXT("neutral")
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_DEF                                                             _machineban_3,version=12.4.56.0,culture=neutral
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_DEF_A                                                          "_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_DEF_W                                                         L"_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_DEF_S                                                         S"_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("_machineban_3,version=12.4.56.0,culture=neutral")
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_REF                                                             _machineban_3,version=12.4.56.0,culture=neutral
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_REF_A                                                          "_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_REF_W                                                         L"_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_REF_S                                                         S"_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("_machineban_3,version=12.4.56.0,culture=neutral")
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_EXACT_REF                                                       _machineban_3,version=12.4.56.0,culture=neutral
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"_machineban_3,version=12.4.56.0,culture=neutral"
#define _MACHINEBAN_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("_machineban_3,version=12.4.56.0,culture=neutral")
#define _MACHINEBAN_3_ASSEMBLY_NAME                                                                     _machineban_3
#define _MACHINEBAN_3_ASSEMBLY_NAME_A                                                                  "_machineban_3"
#define _MACHINEBAN_3_ASSEMBLY_NAME_W                                                                 L"_machineban_3"
#define _MACHINEBAN_3_ASSEMBLY_NAME_S                                                                 S"_machineban_3"
#define _MACHINEBAN_3_ASSEMBLY_NAME_T                                                             TEXT("_machineban_3")
#define _MACHINEBAN_3_ASSEMBLY_VERSION                                                                  12.4.56.0
#define _MACHINEBAN_3_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define _MACHINEBAN_3_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define _MACHINEBAN_3_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define _MACHINEBAN_3_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define _MACHINEBAN_3_ASSEMBLY_CULTURE                                                                  neutral
#define _MACHINEBAN_3_ASSEMBLY_CULTURE_A                                                               "neutral"
#define _MACHINEBAN_3_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define _MACHINEBAN_3_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define _MACHINEBAN_3_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_DEF                                                          _machinehelper_3,version=12.4.56.0,culture=neutral
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_DEF_A                                                       "_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_DEF_W                                                      L"_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_DEF_S                                                      S"_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("_machinehelper_3,version=12.4.56.0,culture=neutral")
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_REF                                                          _machinehelper_3,version=12.4.56.0,culture=neutral
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_REF_A                                                       "_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_REF_W                                                      L"_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_REF_S                                                      S"_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("_machinehelper_3,version=12.4.56.0,culture=neutral")
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_EXACT_REF                                                    _machinehelper_3,version=12.4.56.0,culture=neutral
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"_machinehelper_3,version=12.4.56.0,culture=neutral"
#define _MACHINEHELPER_3_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("_machinehelper_3,version=12.4.56.0,culture=neutral")
#define _MACHINEHELPER_3_ASSEMBLY_NAME                                                                  _machinehelper_3
#define _MACHINEHELPER_3_ASSEMBLY_NAME_A                                                               "_machinehelper_3"
#define _MACHINEHELPER_3_ASSEMBLY_NAME_W                                                              L"_machinehelper_3"
#define _MACHINEHELPER_3_ASSEMBLY_NAME_S                                                              S"_machinehelper_3"
#define _MACHINEHELPER_3_ASSEMBLY_NAME_T                                                          TEXT("_machinehelper_3")
#define _MACHINEHELPER_3_ASSEMBLY_VERSION                                                               12.4.56.0
#define _MACHINEHELPER_3_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define _MACHINEHELPER_3_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define _MACHINEHELPER_3_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define _MACHINEHELPER_3_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define _MACHINEHELPER_3_ASSEMBLY_CULTURE                                                               neutral
#define _MACHINEHELPER_3_ASSEMBLY_CULTURE_A                                                            "neutral"
#define _MACHINEHELPER_3_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define _MACHINEHELPER_3_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define _MACHINEHELPER_3_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_DEF                                                          editorialwebsite,version=12.4.56.0,culture=neutral
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_DEF_A                                                       "editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_DEF_W                                                      L"editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_DEF_S                                                      S"editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_DEF_T                                                  TEXT("editorialwebsite,version=12.4.56.0,culture=neutral")
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_REF                                                          editorialwebsite,version=12.4.56.0,culture=neutral
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_REF_A                                                       "editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_REF_W                                                      L"editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_REF_S                                                      S"editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_REF_T                                                  TEXT("editorialwebsite,version=12.4.56.0,culture=neutral")
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_EXACT_REF                                                    editorialwebsite,version=12.4.56.0,culture=neutral
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_EXACT_REF_A                                                 "editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_EXACT_REF_W                                                L"editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_EXACT_REF_S                                                S"editorialwebsite,version=12.4.56.0,culture=neutral"
#define EDITORIALWEBSITE_ASSEMBLY_IDENTITY_EXACT_REF_T                                            TEXT("editorialwebsite,version=12.4.56.0,culture=neutral")
#define EDITORIALWEBSITE_ASSEMBLY_NAME                                                                  editorialwebsite
#define EDITORIALWEBSITE_ASSEMBLY_NAME_A                                                               "editorialwebsite"
#define EDITORIALWEBSITE_ASSEMBLY_NAME_W                                                              L"editorialwebsite"
#define EDITORIALWEBSITE_ASSEMBLY_NAME_S                                                              S"editorialwebsite"
#define EDITORIALWEBSITE_ASSEMBLY_NAME_T                                                          TEXT("editorialwebsite")
#define EDITORIALWEBSITE_ASSEMBLY_VERSION                                                               12.4.56.0
#define EDITORIALWEBSITE_ASSEMBLY_VERSION_A                                                            "12.4.56.0"
#define EDITORIALWEBSITE_ASSEMBLY_VERSION_W                                                           L"12.4.56.0"
#define EDITORIALWEBSITE_ASSEMBLY_VERSION_S                                                           S"12.4.56.0"
#define EDITORIALWEBSITE_ASSEMBLY_VERSION_T                                                       TEXT("12.4.56.0")
#define EDITORIALWEBSITE_ASSEMBLY_CULTURE                                                               neutral
#define EDITORIALWEBSITE_ASSEMBLY_CULTURE_A                                                            "neutral"
#define EDITORIALWEBSITE_ASSEMBLY_CULTURE_W                                                           L"neutral"
#define EDITORIALWEBSITE_ASSEMBLY_CULTURE_S                                                           S"neutral"
#define EDITORIALWEBSITE_ASSEMBLY_CULTURE_T                                                       TEXT("neutral")
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_DEF                                                             _bi_octopus_1,version=12.4.56.0,culture=neutral
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_DEF_A                                                          "_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_DEF_W                                                         L"_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_DEF_S                                                         S"_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_DEF_T                                                     TEXT("_bi_octopus_1,version=12.4.56.0,culture=neutral")
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_REF                                                             _bi_octopus_1,version=12.4.56.0,culture=neutral
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_REF_A                                                          "_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_REF_W                                                         L"_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_REF_S                                                         S"_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_REF_T                                                     TEXT("_bi_octopus_1,version=12.4.56.0,culture=neutral")
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_EXACT_REF                                                       _bi_octopus_1,version=12.4.56.0,culture=neutral
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_EXACT_REF_A                                                    "_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_EXACT_REF_W                                                   L"_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_EXACT_REF_S                                                   S"_bi_octopus_1,version=12.4.56.0,culture=neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_IDENTITY_EXACT_REF_T                                               TEXT("_bi_octopus_1,version=12.4.56.0,culture=neutral")
#define _BI_OCTOPUS_1_ASSEMBLY_NAME                                                                     _bi_octopus_1
#define _BI_OCTOPUS_1_ASSEMBLY_NAME_A                                                                  "_bi_octopus_1"
#define _BI_OCTOPUS_1_ASSEMBLY_NAME_W                                                                 L"_bi_octopus_1"
#define _BI_OCTOPUS_1_ASSEMBLY_NAME_S                                                                 S"_bi_octopus_1"
#define _BI_OCTOPUS_1_ASSEMBLY_NAME_T                                                             TEXT("_bi_octopus_1")
#define _BI_OCTOPUS_1_ASSEMBLY_VERSION                                                                  12.4.56.0
#define _BI_OCTOPUS_1_ASSEMBLY_VERSION_A                                                               "12.4.56.0"
#define _BI_OCTOPUS_1_ASSEMBLY_VERSION_W                                                              L"12.4.56.0"
#define _BI_OCTOPUS_1_ASSEMBLY_VERSION_S                                                              S"12.4.56.0"
#define _BI_OCTOPUS_1_ASSEMBLY_VERSION_T                                                          TEXT("12.4.56.0")
#define _BI_OCTOPUS_1_ASSEMBLY_CULTURE                                                                  neutral
#define _BI_OCTOPUS_1_ASSEMBLY_CULTURE_A                                                               "neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_CULTURE_W                                                              L"neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_CULTURE_S                                                              S"neutral"
#define _BI_OCTOPUS_1_ASSEMBLY_CULTURE_T                                                          TEXT("neutral")
#define ESP_COMMON_ASSEMBLY_IDENTITY_DEF                                                                esp_common,version=12.4.56.0,culture=neutral
#define ESP_COMMON_ASSEMBLY_IDENTITY_DEF_A                                                             "esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_DEF_W                                                            L"esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_DEF_S                                                            S"esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_DEF_T                                                        TEXT("esp_common,version=12.4.56.0,culture=neutral")
#define ESP_COMMON_ASSEMBLY_IDENTITY_REF                                                                esp_common,version=12.4.56.0,culture=neutral
#define ESP_COMMON_ASSEMBLY_IDENTITY_REF_A                                                             "esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_REF_W                                                            L"esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_REF_S                                                            S"esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_REF_T                                                        TEXT("esp_common,version=12.4.56.0,culture=neutral")
#define ESP_COMMON_ASSEMBLY_IDENTITY_EXACT_REF                                                          esp_common,version=12.4.56.0,culture=neutral
#define ESP_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_A                                                       "esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_W                                                      L"esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_S                                                      S"esp_common,version=12.4.56.0,culture=neutral"
#define ESP_COMMON_ASSEMBLY_IDENTITY_EXACT_REF_T                                                  TEXT("esp_common,version=12.4.56.0,culture=neutral")
#define ESP_COMMON_ASSEMBLY_NAME                                                                        esp_common
#define ESP_COMMON_ASSEMBLY_NAME_A                                                                     "esp_common"
#define ESP_COMMON_ASSEMBLY_NAME_W                                                                    L"esp_common"
#define ESP_COMMON_ASSEMBLY_NAME_S                                                                    S"esp_common"
#define ESP_COMMON_ASSEMBLY_NAME_T                                                                TEXT("esp_common")
#define ESP_COMMON_ASSEMBLY_VERSION                                                                     12.4.56.0
#define ESP_COMMON_ASSEMBLY_VERSION_A                                                                  "12.4.56.0"
#define ESP_COMMON_ASSEMBLY_VERSION_W                                                                 L"12.4.56.0"
#define ESP_COMMON_ASSEMBLY_VERSION_S                                                                 S"12.4.56.0"
#define ESP_COMMON_ASSEMBLY_VERSION_T                                                             TEXT("12.4.56.0")
#define ESP_COMMON_ASSEMBLY_CULTURE                                                                     neutral
#define ESP_COMMON_ASSEMBLY_CULTURE_A                                                                  "neutral"
#define ESP_COMMON_ASSEMBLY_CULTURE_W                                                                 L"neutral"
#define ESP_COMMON_ASSEMBLY_CULTURE_S                                                                 S"neutral"
#define ESP_COMMON_ASSEMBLY_CULTURE_T                                                             TEXT("neutral")
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_DEF                                        frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_DEF_A                                     "frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_DEF_W                                    L"frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_DEF_S                                    S"frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_DEF_T                                TEXT("frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_REF                                        frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_REF_A                                     "frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_REF_W                                    L"frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_REF_S                                    S"frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_REF_T                                TEXT("frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_EXACT_REF                                  frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_EXACT_REF_A                               "frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_EXACT_REF_W                              L"frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_EXACT_REF_S                              S"frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_IDENTITY_EXACT_REF_T                          TEXT("frontdoor_aamoduleifdreflector_msi,version=12.4.56.0,culture=neutral")
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_NAME                                                frontdoor_aamoduleifdreflector_msi
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_NAME_A                                             "frontdoor_aamoduleifdreflector_msi"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_NAME_W                                            L"frontdoor_aamoduleifdreflector_msi"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_NAME_S                                            S"frontdoor_aamoduleifdreflector_msi"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_NAME_T                                        TEXT("frontdoor_aamoduleifdreflector_msi")
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_VERSION                                             12.4.56.0
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_VERSION_A                                          "12.4.56.0"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_VERSION_W                                         L"12.4.56.0"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_VERSION_S                                         S"12.4.56.0"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_VERSION_T                                     TEXT("12.4.56.0")
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_CULTURE                                             neutral
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_CULTURE_A                                          "neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_CULTURE_W                                         L"neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_CULTURE_S                                         S"neutral"
#define FRONTDOOR_AAMODULEIFDREFLECTOR_MSI_ASSEMBLY_CULTURE_T                                     TEXT("neutral")
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_DEF                                                           cleanserscripts,version=12.4.56.0,culture=neutral
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_DEF_A                                                        "cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_DEF_W                                                       L"cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_DEF_S                                                       S"cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_DEF_T                                                   TEXT("cleanserscripts,version=12.4.56.0,culture=neutral")
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_REF                                                           cleanserscripts,version=12.4.56.0,culture=neutral
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_REF_A                                                        "cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_REF_W                                                       L"cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_REF_S                                                       S"cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_REF_T                                                   TEXT("cleanserscripts,version=12.4.56.0,culture=neutral")
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_EXACT_REF                                                     cleanserscripts,version=12.4.56.0,culture=neutral
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_EXACT_REF_A                                                  "cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_EXACT_REF_W                                                 L"cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_EXACT_REF_S                                                 S"cleanserscripts,version=12.4.56.0,culture=neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_IDENTITY_EXACT_REF_T                                             TEXT("cleanserscripts,version=12.4.56.0,culture=neutral")
#define CLEANSERSCRIPTS_ASSEMBLY_NAME                                                                   cleanserscripts
#define CLEANSERSCRIPTS_ASSEMBLY_NAME_A                                                                "cleanserscripts"
#define CLEANSERSCRIPTS_ASSEMBLY_NAME_W                                                               L"cleanserscripts"
#define CLEANSERSCRIPTS_ASSEMBLY_NAME_S                                                               S"cleanserscripts"
#define CLEANSERSCRIPTS_ASSEMBLY_NAME_T                                                           TEXT("cleanserscripts")
#define CLEANSERSCRIPTS_ASSEMBLY_VERSION                                                                12.4.56.0
#define CLEANSERSCRIPTS_ASSEMBLY_VERSION_A                                                             "12.4.56.0"
#define CLEANSERSCRIPTS_ASSEMBLY_VERSION_W                                                            L"12.4.56.0"
#define CLEANSERSCRIPTS_ASSEMBLY_VERSION_S                                                            S"12.4.56.0"
#define CLEANSERSCRIPTS_ASSEMBLY_VERSION_T                                                        TEXT("12.4.56.0")
#define CLEANSERSCRIPTS_ASSEMBLY_CULTURE                                                                neutral
#define CLEANSERSCRIPTS_ASSEMBLY_CULTURE_A                                                             "neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_CULTURE_W                                                            L"neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_CULTURE_S                                                            S"neutral"
#define CLEANSERSCRIPTS_ASSEMBLY_CULTURE_T                                                        TEXT("neutral")
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_DEF                                                         _secuserhistory_0,version=12.4.56.0,culture=neutral
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_DEF_A                                                      "_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_DEF_W                                                     L"_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_DEF_S                                                     S"_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_DEF_T                                                 TEXT("_secuserhistory_0,version=12.4.56.0,culture=neutral")
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_REF                                                         _secuserhistory_0,version=12.4.56.0,culture=neutral
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_REF_A                                                      "_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_REF_W                                                     L"_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_REF_S                                                     S"_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_REF_T                                                 TEXT("_secuserhistory_0,version=12.4.56.0,culture=neutral")
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF                                                   _secuserhistory_0,version=12.4.56.0,culture=neutral
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                                "_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                               L"_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                               S"_secuserhistory_0,version=12.4.56.0,culture=neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                           TEXT("_secuserhistory_0,version=12.4.56.0,culture=neutral")
#define _SECUSERHISTORY_0_ASSEMBLY_NAME                                                                 _secuserhistory_0
#define _SECUSERHISTORY_0_ASSEMBLY_NAME_A                                                              "_secuserhistory_0"
#define _SECUSERHISTORY_0_ASSEMBLY_NAME_W                                                             L"_secuserhistory_0"
#define _SECUSERHISTORY_0_ASSEMBLY_NAME_S                                                             S"_secuserhistory_0"
#define _SECUSERHISTORY_0_ASSEMBLY_NAME_T                                                         TEXT("_secuserhistory_0")
#define _SECUSERHISTORY_0_ASSEMBLY_VERSION                                                              12.4.56.0
#define _SECUSERHISTORY_0_ASSEMBLY_VERSION_A                                                           "12.4.56.0"
#define _SECUSERHISTORY_0_ASSEMBLY_VERSION_W                                                          L"12.4.56.0"
#define _SECUSERHISTORY_0_ASSEMBLY_VERSION_S                                                          S"12.4.56.0"
#define _SECUSERHISTORY_0_ASSEMBLY_VERSION_T                                                      TEXT("12.4.56.0")
#define _SECUSERHISTORY_0_ASSEMBLY_CULTURE                                                              neutral
#define _SECUSERHISTORY_0_ASSEMBLY_CULTURE_A                                                           "neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_CULTURE_W                                                          L"neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_CULTURE_S                                                          S"neutral"
#define _SECUSERHISTORY_0_ASSEMBLY_CULTURE_T                                                      TEXT("neutral")
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_DEF                                                      _secmachinehistory_0,version=12.4.56.0,culture=neutral
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_DEF_A                                                   "_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_DEF_W                                                  L"_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_DEF_S                                                  S"_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_DEF_T                                              TEXT("_secmachinehistory_0,version=12.4.56.0,culture=neutral")
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_REF                                                      _secmachinehistory_0,version=12.4.56.0,culture=neutral
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_REF_A                                                   "_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_REF_W                                                  L"_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_REF_S                                                  S"_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_REF_T                                              TEXT("_secmachinehistory_0,version=12.4.56.0,culture=neutral")
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF                                                _secmachinehistory_0,version=12.4.56.0,culture=neutral
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_A                                             "_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_W                                            L"_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_S                                            S"_secmachinehistory_0,version=12.4.56.0,culture=neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_IDENTITY_EXACT_REF_T                                        TEXT("_secmachinehistory_0,version=12.4.56.0,culture=neutral")
#define _SECMACHINEHISTORY_0_ASSEMBLY_NAME                                                              _secmachinehistory_0
#define _SECMACHINEHISTORY_0_ASSEMBLY_NAME_A                                                           "_secmachinehistory_0"
#define _SECMACHINEHISTORY_0_ASSEMBLY_NAME_W                                                          L"_secmachinehistory_0"
#define _SECMACHINEHISTORY_0_ASSEMBLY_NAME_S                                                          S"_secmachinehistory_0"
#define _SECMACHINEHISTORY_0_ASSEMBLY_NAME_T                                                      TEXT("_secmachinehistory_0")
#define _SECMACHINEHISTORY_0_ASSEMBLY_VERSION                                                           12.4.56.0
#define _SECMACHINEHISTORY_0_ASSEMBLY_VERSION_A                                                        "12.4.56.0"
#define _SECMACHINEHISTORY_0_ASSEMBLY_VERSION_W                                                       L"12.4.56.0"
#define _SECMACHINEHISTORY_0_ASSEMBLY_VERSION_S                                                       S"12.4.56.0"
#define _SECMACHINEHISTORY_0_ASSEMBLY_VERSION_T                                                   TEXT("12.4.56.0")
#define _SECMACHINEHISTORY_0_ASSEMBLY_CULTURE                                                           neutral
#define _SECMACHINEHISTORY_0_ASSEMBLY_CULTURE_A                                                        "neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_CULTURE_W                                                       L"neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_CULTURE_S                                                       S"neutral"
#define _SECMACHINEHISTORY_0_ASSEMBLY_CULTURE_T                                                   TEXT("neutral")
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_DEF                                                        extendedservicexml,version=12.4.56.0,culture=neutral
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_DEF_A                                                     "extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_DEF_W                                                    L"extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_DEF_S                                                    S"extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_DEF_T                                                TEXT("extendedservicexml,version=12.4.56.0,culture=neutral")
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_REF                                                        extendedservicexml,version=12.4.56.0,culture=neutral
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_REF_A                                                     "extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_REF_W                                                    L"extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_REF_S                                                    S"extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_REF_T                                                TEXT("extendedservicexml,version=12.4.56.0,culture=neutral")
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_EXACT_REF                                                  extendedservicexml,version=12.4.56.0,culture=neutral
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_EXACT_REF_A                                               "extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_EXACT_REF_W                                              L"extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_EXACT_REF_S                                              S"extendedservicexml,version=12.4.56.0,culture=neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_IDENTITY_EXACT_REF_T                                          TEXT("extendedservicexml,version=12.4.56.0,culture=neutral")
#define EXTENDEDSERVICEXML_ASSEMBLY_NAME                                                                extendedservicexml
#define EXTENDEDSERVICEXML_ASSEMBLY_NAME_A                                                             "extendedservicexml"
#define EXTENDEDSERVICEXML_ASSEMBLY_NAME_W                                                            L"extendedservicexml"
#define EXTENDEDSERVICEXML_ASSEMBLY_NAME_S                                                            S"extendedservicexml"
#define EXTENDEDSERVICEXML_ASSEMBLY_NAME_T                                                        TEXT("extendedservicexml")
#define EXTENDEDSERVICEXML_ASSEMBLY_VERSION                                                             12.4.56.0
#define EXTENDEDSERVICEXML_ASSEMBLY_VERSION_A                                                          "12.4.56.0"
#define EXTENDEDSERVICEXML_ASSEMBLY_VERSION_W                                                         L"12.4.56.0"
#define EXTENDEDSERVICEXML_ASSEMBLY_VERSION_S                                                         S"12.4.56.0"
#define EXTENDEDSERVICEXML_ASSEMBLY_VERSION_T                                                     TEXT("12.4.56.0")
#define EXTENDEDSERVICEXML_ASSEMBLY_CULTURE                                                             neutral
#define EXTENDEDSERVICEXML_ASSEMBLY_CULTURE_A                                                          "neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_CULTURE_W                                                         L"neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_CULTURE_S                                                         S"neutral"
#define EXTENDEDSERVICEXML_ASSEMBLY_CULTURE_T                                                     TEXT("neutral")
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\ArgReflector.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Reflection;

namespace xonline.common.tools.console
{
    /// <summary>
    /// 
    /// </summary>
    public class ArgReflector
    {
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parameters"></param>
        public static void DisplayUsage<T>(out T parameters)
        {
            parameters = default(T);
            DisplayUsage(typeof(T));
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        public static void DisplayUsage(Type type)
        {
            if (!type.IsSubclassOf(typeof(CommandLineDefinition)))
            {
                throw new ArgumentException("The type specified is not a child of " + typeof(CommandLineDefinition).FullName + ".");
            }

            CommandLineDefinition definition = (CommandLineDefinition)Activator.CreateInstance(type);
            definition.DisplayUsage();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="type"></param>
        /// <param name="returnCode"></param>
        /// <returns></returns>
        public static int DisplayUsage(Type type, int returnCode)
        {
            DisplayUsage(type);
            return returnCode;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parameters"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        public static Boolean Parse<T>(out T parameters, params String[] args) where T : CommandLineDefinition
        {
            return Parse(out parameters, 0, args);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parameters"></param>
        /// <param name="start"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        public static Boolean Parse<T>(out T parameters, int start, params String[] args) where T : CommandLineDefinition
        {
            Regex[] _reParameterType = new Regex[] {
                new Regex(@"^-(\w+)$", RegexOptions.Compiled),
                new Regex(@"^--(\w+)=(.*)$", RegexOptions.Compiled),
                new Regex(@"^[/-](\w+)[:=](.*)$", RegexOptions.Compiled),
                new Regex(@"^/(\w+)$", RegexOptions.Compiled)
            };

            Type definitionType = typeof(T);
            CommandLineSchema schema = new CommandLineSchema(definitionType);

            parameters = (T)Activator.CreateInstance(definitionType);
            List<String> arguments = new List<String>();
            List<String> specified = new List<string>();

            foreach (FieldInfo field in definitionType.GetFields())
            {
                if (field.GetValue(parameters) == null)
                    field.SetValue(parameters, Activator.CreateInstance(field.FieldType));
            }

            for (int argc = start; argc < args.Length; argc++)
            {
                String name, value;
                Match match = null;
                int paramType;

                for (paramType = 0; paramType < 4; paramType++)
                {
                    match = _reParameterType[paramType].Match(args[argc]);
                    if (match.Success)
                        break;
                }

                // Positional Parameter
                if (paramType == 4)
                {
                    arguments.Add(args[argc]);
                    continue;
                }

                // Named Parameters
                name = match.Groups[1].Value.ToLower();
                if (!schema.NamedParameters.ContainsKey(name))
                {
                    throw new ArgumentException("Invalid option", name);
                }

                CommandLineOptionDefinition optionDefinition;
                optionDefinition = schema.NamedParameters[name];
                ReflectedParameter rp = (ReflectedParameter)optionDefinition.FieldInfo.GetValue(parameters);
                if (rp == null)
                {
                    rp = (ReflectedParameter)Activator.CreateInstance(optionDefinition.FieldInfo.FieldType);
                    optionDefinition.FieldInfo.SetValue(parameters, rp);
                }

                // Update specified parameter list
                specified.Add(optionDefinition.FieldInfo.Name);

                if (paramType == 0 || paramType == 3)
                {
                    if (optionDefinition.FieldInfo.FieldType == typeof(Flag))
                    {
                        rp.Set(null);
                    }
                    else
                    {
                        value = args[++argc];
                        rp.Set(value);
                    }
                }
                else
                {
                    if (optionDefinition.FieldInfo.FieldType == typeof(bool))
                    {
                        throw new ArgumentException("A value was specified for a flag", name);
                    }
                    else
                    {
                        value = match.Groups[2].Value;
                        rp.Set(value);
                    }
                }
            }

            for (int argc = 0; argc < arguments.Count && argc < schema.PositionalParameters.Count; argc++)
            {
                FieldInfo fieldInfo = schema.PositionalParameters[argc].FieldInfo;
                
                // Update specified parameter list
                specified.Add(fieldInfo.Name);

                if (fieldInfo.FieldType != typeof(ArgumentCollection))
                {
                    ReflectedParameter positionalParameter = (ReflectedParameter)fieldInfo.GetValue(parameters);
                    if (positionalParameter == null)
                    {
                        positionalParameter = (ReflectedParameter)Activator.CreateInstance(fieldInfo.FieldType);
                        fieldInfo.SetValue(parameters, positionalParameter);
                    }
                    positionalParameter.Set(arguments[argc]);
                }
                else
                {
                    ArgumentCollection argCollection = (ArgumentCollection)fieldInfo.GetValue(parameters);
                    if (argCollection == null)
                    {
                        argCollection = new ArgumentCollection();
                        fieldInfo.SetValue(parameters, argCollection);
                    }

                    argCollection._value = new String[arguments.Count - argc];
                    for (int rargc = 0; argc < arguments.Count && argc < arguments.Count; argc++, rargc++)
                    {
                        argCollection.Value[rargc] = arguments[argc];
                    }
                }
            }

            if (!schema.ArgumentGraph.IsSatisfied(specified.ToArray()))
                return false;

            return parameters.Validate();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\CommandLineDefinition.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.IO;
using System.Xml.Serialization;
using System.Collections.Specialized;

namespace xonline.common.tools.console
{
    /// <summary>
    /// 
    /// </summary>
    public class CommandLineDefinition
    {
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public virtual Boolean Validate()
        {
            return true;
        }
        /// <summary>
        /// 
        /// </summary>
        public virtual void DisplayUsage()
        {
            CommandLineSchema schema = new CommandLineSchema(GetType());
            Assembly entryAssembly = Assembly.GetEntryAssembly();
            List<String> usageText = new List<String>();
            int windowWidth;
            TextBlock textblock;

            try
            {
                windowWidth = Console.WindowWidth - 1;
            }
            catch
            {
                windowWidth = 80;
            }
            
            textblock = new TextBlock(2);
            textblock.Columns[0].Width = schema.ApplicationName.Length+1;
            textblock.Columns[1].Justification = TextJustification.Left;
            textblock.Columns[0].Text = schema.ApplicationName;
            textblock.Columns[1].Width = -1;
            textblock.Columns[1].Justification = TextJustification.Right;
            textblock.Columns[1].Text = "v" + entryAssembly.GetName().Version.ToString();
            usageText.AddRange(textblock.Write(windowWidth));
            usageText.Add("");

            textblock = new TextBlock(1);
            textblock.Columns[0].Justification = TextJustification.Left;
            textblock.Columns[0].Text = schema.ApplicationDescription;
            usageText.AddRange(textblock.Write(windowWidth));
            usageText.Add("");

            Uri assemblyLocation = new Uri(entryAssembly.CodeBase);
            String commandName = Path.GetFileName(assemblyLocation.LocalPath);
            StringBuilder usageBuilder = new StringBuilder();
            usageBuilder.Append(commandName);

            foreach (String parameterName in schema.NamedParameters.Keys)
            {
                CommandLineOptionDefinition definition = schema.NamedParameters[parameterName];
                if (definition.FieldInfo.FieldType == typeof(Flag))
                    usageBuilder.AppendFormat(" [/{0}]", definition.FieldInfo.Name);
                else
                {
                    String[] typeName = definition.FieldInfo.FieldType.GetGenericArguments()[0].Name.Split('.');
                    usageBuilder.AppendFormat(" [/{0}=<{1}>]", definition.FieldInfo.Name, typeName[typeName.Length - 1]);
                }
            }

            foreach (CommandLineOptionDefinition parameter in schema.PositionalParameters)
            {
                if (parameter.FieldInfo.FieldType == typeof(ArgumentCollection))
                {
                    usageBuilder.AppendFormat(" {0} ...", parameter.FieldInfo.Name);
                    break;
                }
                else
                {
                    usageBuilder.AppendFormat(" {0}", parameter.FieldInfo.Name);
                }
            }

            usageText.Add("USAGE");
            textblock = new TextBlock(1);
            textblock.Columns[0].LeftPadding = 4;
            textblock.Columns[0].RightPadding = 4;
            textblock.Columns[0].Justification = TextJustification.Left;
            textblock.Columns[0].Text = usageBuilder.ToString();
            usageText.AddRange(textblock.Write(windowWidth));
            
            if (schema.PositionalParameters.Count > 0)
            {
                usageText.Add("");
                usageText.Add("ARGUMENTS");
                textblock = new TextBlock(2);
                textblock.Columns[0].Width = 15;
                textblock.Columns[0].LeftPadding = 4;
                textblock.Columns[0].RightPadding = 2;
                textblock.Columns[1].Width = -1;
                foreach (CommandLineOptionDefinition parameter in schema.PositionalParameters)
                {
                    textblock.Columns[0].Text = parameter.FieldInfo.Name;
                    if (parameter.FieldInfo.FieldType == typeof(ArgumentCollection))
                        textblock.Columns[0].Text = textblock.Columns[0].Text + " ...";
                    textblock.Columns[1].Text = parameter.Description == null ? "" : parameter.Description;

                    if (parameter.FieldInfo.FieldType == typeof(ArgumentCollection))
                        break;
                    usageText.AddRange(textblock.Write(windowWidth));
                }
            }

            if (schema.NamedParameters.Count > 0)
            {
                usageText.Add("");
                usageText.Add("NAMED PARAMETERS");
                textblock = new TextBlock(2);
                textblock.Columns[0].Width = 15;
                textblock.Columns[0].LeftPadding = 4;
                textblock.Columns[0].RightPadding = 2;
                textblock.Columns[1].Width = -1;
                foreach (String parameterName in schema.NamedParameters.Keys)
                {
                    textblock.Columns[0].Text = parameterName;
                    textblock.Columns[1].Text = schema.NamedParameters[parameterName].Description == null ? "" : schema.NamedParameters[parameterName].Description;
                    usageText.AddRange(textblock.Write(windowWidth));                    
                }
            }

            if (schema.ReturnValueDescription != null)
            {
                usageText.Add("");
                usageText.Add("RETURN VALUES");
                textblock = new TextBlock(1);
                textblock.Columns[0].LeftPadding = 4;
                textblock.Columns[0].Text = schema.ReturnValueDescription;
                usageText.AddRange(textblock.Write(windowWidth));
            }

            foreach (String line in usageText)
            {
                Console.WriteLine(line);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public void DumpValues()
        {
            foreach (FieldInfo fieldInfo in GetType().GetFields())
            {
                if (!fieldInfo.FieldType.IsSubclassOf(typeof(ReflectedParameter)))
                {
                    continue;
                }
                ReflectedParameter parameter = (ReflectedParameter)fieldInfo.GetValue(this);
                Console.WriteLine("{0} {1}: \"{1}\"", parameter.IsSet, fieldInfo.Name, parameter);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\ArgumentDependencyGraph.cs ===
using System;
using System.Collections.Generic;
using System.Text;

namespace xonline.common.tools.console
{
    public class ArgumentDependencyGraph<NodeType>
    {
        public class DependencyNode<NodeTypeInternal>
        {
            protected List<NodeTypeInternal> _required;
            protected List<NodeTypeInternal> _optional;

            public NodeTypeInternal Name;
            public List<NodeTypeInternal> Required { get { return _required; } }
            public List<NodeTypeInternal> Optional { get { return _optional; } }

            public DependencyNode(NodeTypeInternal name)
            {
                Name = name;
                _required = new List<NodeTypeInternal>();
                _optional = new List<NodeTypeInternal>();
            }

            public Boolean IsSatisfied(Dictionary<NodeTypeInternal, Boolean> specified)
            {
                foreach (NodeTypeInternal requiredNode in Required)
                {
                    if (!specified.ContainsKey(requiredNode))
                        return false;
                    specified[requiredNode] = false;
                }

                foreach (NodeTypeInternal optionalNode in Optional)
                {
                    if (specified.ContainsKey(optionalNode))
                    {
                        specified[optionalNode] = false;
                    }
                }
                return true;
            }
        }
        protected Dictionary<NodeType, DependencyNode<NodeType>> _dependants;
        protected DependencyNode<NodeType> _root;

        public DependencyNode<NodeType> Root { get { return _root; } }
        public DependencyNode<NodeType> this[NodeType node]
        {
            get
            {
                lock (_dependants)
                {
                    if (!_dependants.ContainsKey(node))
                        _dependants.Add(node, new DependencyNode<NodeType>(node));
                }
                return _dependants[node];
            }
        }

        public ArgumentDependencyGraph()
        {
            _dependants = new Dictionary<NodeType, DependencyNode<NodeType>>();
            _root = new DependencyNode<NodeType>(default(NodeType));
        }

        public Boolean IsSatisfied(params NodeType[] specifiedNodes)
        {
            NodeType[] extras;

            return IsSatisfied(out extras, specifiedNodes);
        }

        public Boolean IsSatisfied(out NodeType[] extraNodes, params NodeType[] specifiedNodes)
        {
            Dictionary<NodeType, Boolean> satisfied;
            Dictionary<NodeType, Boolean> specified;
            List<NodeType> extras;
            Boolean success = true;

            extras = new List<NodeType>();
            satisfied = new Dictionary<NodeType, bool>();
            specified = new Dictionary<NodeType, bool>();

            foreach (NodeType node in specifiedNodes)
            {
                specified[node] = true;
            }

            if (!Root.IsSatisfied(specified))
                success = false;

            foreach (NodeType node in specifiedNodes)
            {
                if (!_dependants.ContainsKey(node))
                    continue;
                DependencyNode<NodeType> dependencyNode = _dependants[node];
                if (!dependencyNode.IsSatisfied(specified))
                    success = false;
            }

            foreach (NodeType node in specifiedNodes)
            {
                if (specified[node])
                {
                    extras.Add(node);
                }
            }

            extraNodes = extras.ToArray();

            return success;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\CommandLineSchema.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Text.RegularExpressions;

namespace xonline.common.tools.console
{
    /// <summary>
    /// 
    /// </summary>
    public class CommandLineOptionDefinition
    {
        internal FieldInfo FieldInfo; 
        /// <summary>
        /// 
        /// </summary>
        public String Name;
        /// <summary>
        /// 
        /// </summary>
        public String Description;
        /// <summary>
        /// 
        /// </summary>
        public String[] Requirements;
        /// <summary>
        /// 
        /// </summary>
        public String[] Aliases;
    }

    /// <summary>
    /// 
    /// </summary>
    public class CommandLineSchema
    {
        /// <summary>
        /// 
        /// </summary>
        public String ApplicationName;
        /// <summary>
        /// 
        /// </summary>
        public String ApplicationDescription;
        /// <summary>
        /// 
        /// </summary>
        public String ReturnValueDescription;
        /// <summary>
        /// 
        /// </summary>
        public Dictionary<String, CommandLineOptionDefinition> NamedParameters;
        /// <summary>
        /// 
        /// </summary>
        public List<CommandLineOptionDefinition> PositionalParameters;
        /// <summary>
        /// 
        /// </summary>
        public ArgumentDependencyGraph<String> ArgumentGraph;
        /// <summary>
        /// 
        /// </summary>
        protected Type SchemaType;
        /// <summary>
        /// 
        /// </summary>
        protected List<String> ParseErrors;
        /// <summary>
        /// 
        /// </summary>
        /// <param name="definitionType"></param>
        public CommandLineSchema(Type definitionType)
        {
            Type iReflectedParameterType = typeof(ReflectedParameter);
            Type iPositionalParameterType = typeof(IPositionalParameter);
            Type iArgumentCollection = typeof(ArgumentCollection);
            Type iNamedParameterType = typeof(INamedParameter);
            Type iFlagType = typeof(IFlag);

            SchemaType = definitionType;
            ArgumentGraph = new ArgumentDependencyGraph<string>();
            NamedParameters = new Dictionary<string, CommandLineOptionDefinition>();
            PositionalParameters = new List<CommandLineOptionDefinition>();

            if (!definitionType.IsSubclassOf(typeof(CommandLineDefinition)))
            {
                throw new ArgumentException("The type specified is not a child of " + typeof(CommandLineDefinition).FullName + ".");
            }

            ApplicationDescriptionAttribute[] applicationDescriptionAttributes = (ApplicationDescriptionAttribute[])definitionType.GetCustomAttributes(typeof(ApplicationDescriptionAttribute), false);
            foreach (ApplicationDescriptionAttribute applicationDescriptionAttribute in applicationDescriptionAttributes)
            {
                ApplicationDescription = applicationDescriptionAttribute.Description;
                break;
            }

            ApplicationNameAttribute[] applicationNameAttributes = (ApplicationNameAttribute[])definitionType.GetCustomAttributes(typeof(ApplicationNameAttribute), false);
            foreach (ApplicationNameAttribute applicationNameAttribute in applicationNameAttributes)
            {
                ApplicationName = applicationNameAttribute.Name;
                break;
            }

            ApplicationReturnDescriptionAttribute[] applicationReturnDescriptionAttributes = (ApplicationReturnDescriptionAttribute[])definitionType.GetCustomAttributes(typeof(ApplicationReturnDescriptionAttribute), false);
            foreach (ApplicationReturnDescriptionAttribute applicationReturnDescriptionAttribute in applicationReturnDescriptionAttributes)
            {
                ReturnValueDescription = applicationReturnDescriptionAttribute.ReturnDescription;
                break;
            }

            foreach (FieldInfo field in definitionType.GetFields())
            {
                if (!iReflectedParameterType.IsAssignableFrom(field.FieldType))
                {
                    continue;
                }

                ParameterRequiredAttribute[] requiredAttributes = (ParameterRequiredAttribute[])field.GetCustomAttributes(typeof(ParameterRequiredAttribute), false);
                if (requiredAttributes == null || requiredAttributes.Length == 0)
                {
                    ArgumentGraph.Root.Optional.Add(field.Name);
                }
                else
                {
                    foreach (ParameterRequiredAttribute requiredAttribute in requiredAttributes)
                    {
                        ArgumentGraph.Root.Required.Add(field.Name);
                        break;
                    }
                }

                ParameterRequiresAttribute[] requiresAttributes = (ParameterRequiresAttribute[])field.GetCustomAttributes(typeof(ParameterRequiresAttribute), false);
                foreach (ParameterRequiresAttribute requiresAttribute in requiresAttributes)
                {
                    foreach (String requiresField in requiresAttribute.RequiredFields)
                    {
                        ArgumentGraph[field.Name].Required.Add(requiresField);
                    }
                    break;
                }

                ParameterOptionalAttribute[] optionalAttributes = (ParameterOptionalAttribute[])field.GetCustomAttributes(typeof(ParameterOptionalAttribute), false);
                foreach (ParameterOptionalAttribute optionalAttribute in optionalAttributes)
                {
                    foreach (String optionalField in optionalAttribute.OptionalFields)
                    {
                        ArgumentGraph[field.Name].Optional.Add(optionalField);
                    }
                    break;
                }

                CommandLineOptionDefinition definition = new CommandLineOptionDefinition();
                definition.Name = field.Name;
                definition.FieldInfo = field;

                ParameterDescriptionAttribute[] descriptionAttributes = (ParameterDescriptionAttribute[])field.GetCustomAttributes(typeof(ParameterDescriptionAttribute), false);
                foreach (ParameterDescriptionAttribute descriptionAttribute in descriptionAttributes)
                {
                    definition.Description = descriptionAttribute.Description;
                    break;
                }

                if (iPositionalParameterType.IsAssignableFrom(field.FieldType))
                {
                    PositionalParameters.Add(definition);
                    continue;
                }

                List<String> aliases = new List<string>();
                String aliasHash = field.Name.ToLower();
                if (NamedParameters.ContainsKey(aliasHash))
                {
                    throw new ArgumentException("Aliases defined should not collide with eachother.", field.Name);
                }
                aliases.Add(aliasHash);
                NamedParameters.Add(aliasHash, definition);

                ParameterAliasesAttribute[] aliasAttributes = (ParameterAliasesAttribute[])field.GetCustomAttributes(typeof(ParameterAliasesAttribute), false);
                foreach (ParameterAliasesAttribute aliasAttribute in aliasAttributes)
                {
                    foreach (String alias in aliasAttribute.Aliases)
                    {
                        aliasHash = alias.ToLower();
                        if (NamedParameters.ContainsKey(aliasHash))
                        {
                            throw new ArgumentException("Aliases defined should not collide with eachother.", field.Name);
                        }
                        aliases.Add(aliasHash);
                        NamedParameters.Add(aliasHash, definition);
                    }
                    definition.Aliases = aliases.ToArray();
                    break;
                }
            }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="parameters"></param>
        /// <param name="start"></param>
        /// <param name="args"></param>
        /// <returns></returns>
        public Boolean Parse<T>(out T parameters, int start, params String[] args)  where T : CommandLineDefinition
        {
                Regex[] _reParameterType = new Regex[] {
                new Regex(@"^-(\w+)$", RegexOptions.Compiled),
                new Regex(@"^--(\w+)=(.*)$", RegexOptions.Compiled),
                new Regex(@"^[/-](\w+)[:=](.*)$", RegexOptions.Compiled),
                new Regex(@"^/(\w+)$", RegexOptions.Compiled)
            };

            Type definitionType = typeof(T);
            if (definitionType != SchemaType)
                throw new ArgumentException("Parameters must be the same type as the schema.", "parameters");

            ParseErrors = new List<string>();
            parameters = (T)Activator.CreateInstance(definitionType);
            List<String> arguments = new List<String>();
            List<String> specified = new List<string>();

            foreach (FieldInfo field in definitionType.GetFields())
            {
                if (field.GetValue(parameters) == null)
                    field.SetValue(parameters, Activator.CreateInstance(field.FieldType));
            }

            for (int argc = start; argc < args.Length; argc++)
            {
                String name, value;
                Match match = null;
                int paramType;                

                for (paramType = 0; paramType < 4; paramType++)
                {
                    match = _reParameterType[paramType].Match(args[argc]);
                    if (match.Success)
                        break;
                }

                // Positional Parameter
                if (paramType == 4)
                {
                    arguments.Add(args[argc]);
                    continue;
                }

                // Named Parameters
                name = match.Groups[1].Value.ToLower();
                if (!NamedParameters.ContainsKey(name))
                {
                    ParseErrors.Add(String.Format("Invalid named parameter \'{0}\'", name));
                    continue;
                }

                CommandLineOptionDefinition optionDefinition;
                optionDefinition = NamedParameters[name];
                ReflectedParameter rp = (ReflectedParameter)optionDefinition.FieldInfo.GetValue(parameters);
                if (rp == null)
                {
                    rp = (ReflectedParameter)Activator.CreateInstance(optionDefinition.FieldInfo.FieldType);
                    optionDefinition.FieldInfo.SetValue(parameters, rp);
                }

                // Update specified parameter list
                specified.Add(optionDefinition.FieldInfo.Name);

                if (paramType == 0 || paramType == 3)
                {
                    if (optionDefinition.FieldInfo.FieldType == typeof(Flag))
                    {
                        rp.Set(null);
                    }
                    else
                    {
                        value = args[++argc];
                        rp.Set(value);
                    }
                }
                else
                {
                    if (optionDefinition.FieldInfo.FieldType == typeof(bool))
                    {
                        throw new ArgumentException("A value was specified for a flag", name);
                    }
                    else
                    {
                        value = match.Groups[2].Value;
                        rp.Set(value);
                    }
                }
            }

            for (int argc = 0; argc < arguments.Count && argc < PositionalParameters.Count; argc++)
            {
                FieldInfo fieldInfo = PositionalParameters[argc].FieldInfo;

                // Update specified parameter list
                specified.Add(fieldInfo.Name);

                if (fieldInfo.FieldType != typeof(ArgumentCollection))
                {
                    ReflectedParameter positionalParameter = (ReflectedParameter)fieldInfo.GetValue(parameters);
                    if (positionalParameter == null)
                    {
                        positionalParameter = (ReflectedParameter)Activator.CreateInstance(fieldInfo.FieldType);
                        fieldInfo.SetValue(parameters, positionalParameter);
                    }
                    positionalParameter.Set(arguments[argc]);
                }
                else
                {
                    ArgumentCollection argCollection = (ArgumentCollection)fieldInfo.GetValue(parameters);
                    if (argCollection == null)
                    {
                        argCollection = new ArgumentCollection();
                        fieldInfo.SetValue(parameters, argCollection);
                    }

                    argCollection._value = new String[arguments.Count - argc];
                    for (int rargc = 0; argc < arguments.Count && argc < arguments.Count; argc++, rargc++)
                    {
                        argCollection.Value[rargc] = arguments[argc];
                    }
                }
            }

            if (!ArgumentGraph.IsSatisfied(specified.ToArray()))
            {
                ParseErrors.Add("One or more required parameters were not specified.");
                return false;
            }

            if (!parameters.Validate())
            {
                ParseErrors.Add("One or more parameters was invalid.");
                return false;
            }
            return parameters.Validate();
        }
        /// <summary>
        /// 
        /// </summary>
        public void DisplayUsage()
        {
            SchemaType.GetMethod("DisplayUsage").Invoke(Activator.CreateInstance(SchemaType), null);
            if (ParseErrors.Count > 0)
            {
                Console.WriteLine("");
                Console.WriteLine("ERRORS");

                TextBlock textblock = new TextBlock(2);
                textblock.Columns[0].Width = 7;
                textblock.Columns[0].LeftPadding = 4;
                textblock.Columns[0].RightPadding = 2;
                textblock.Columns[0].Text = "*";
                foreach (String error in ParseErrors)
                {
                    textblock.Columns[1].Text = error;
                    foreach (String line in textblock.Write(Console.WindowWidth - 1))
                    {
                        Console.WriteLine(line);
                    }
                    textblock.Columns[1].Text = "";
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\Attributes.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Text.RegularExpressions;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;

namespace xonline.common.tools.console
{
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Field)]
    public class ParameterPositionAttribute : Attribute
    {
        private int _position;
        /// <summary>
        /// 
        /// </summary>
        public int Position
        {
            get { return _position; }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="position"></param>
        public ParameterPositionAttribute(int position)
        {
            _position = position;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Field)]
    public class ParameterDescriptionAttribute : Attribute
    {
        private string _description;
        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="description"></param>
        public ParameterDescriptionAttribute(string description)
        {
            _description = description;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Field)]
    public class ParameterAliasesAttribute : Attribute
    {
        private String[] _aliases;
        /// <summary>
        /// 
        /// </summary>
        public String[] Aliases { get { return _aliases; } }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="aliases"></param>
        public ParameterAliasesAttribute(params String[] aliases)
        {
            _aliases = aliases;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Field)]
    public class ParameterRequiresAttribute : Attribute
    {
        private string[] _requiredFields;

        /// <summary>
        /// 
        /// </summary>
        public string[] RequiredFields
        {
            get { return _requiredFields; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requiredFields"></param>
        public ParameterRequiresAttribute(params string[] requiredFields)
        {
            _requiredFields = requiredFields;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Field)]
    public class ParameterRequiredAttribute : Attribute
    {
        /// <summary>
        /// 
        /// </summary>
        public ParameterRequiredAttribute()
        {
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Field)]
    public class ParameterOptionalAttribute : Attribute
    {
        private string[] _optionalFields;

        /// <summary>
        /// 
        /// </summary>
        public string[] OptionalFields
        {
            get { return _optionalFields; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="requiredFields"></param>
        public ParameterOptionalAttribute(params string[] requiredFields)
        {
            _optionalFields = requiredFields;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Class)]
    public class ApplicationDescriptionAttribute : Attribute
    {
        private string _description;

        /// <summary>
        /// 
        /// </summary>
        public string Description
        {
            get { return _description; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="description"></param>
        public ApplicationDescriptionAttribute(string description)
        {
            _description = description;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    [AttributeUsage(AttributeTargets.Class)]
    public class ApplicationNameAttribute : Attribute
    {
        private string _Name;

        /// <summary>
        /// 
        /// </summary>
        public string Name
        {
            get { return _Name; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="Name"></param>
        public ApplicationNameAttribute(string Name)
        {
            _Name = Name;
        }
    }

    [AttributeUsage(AttributeTargets.Class)]
    public class ApplicationReturnDescriptionAttribute : Attribute
    {
        private string _returnDescription;

        /// <summary>
        /// 
        /// </summary>
        public string ReturnDescription
        {
            get { return _returnDescription; }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param RetunDescription="RetunDescription"></param>
        public ApplicationReturnDescriptionAttribute(string returnDescription)
        {
            _returnDescription = returnDescription;
        }
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.argreflector_none_12.4.56.0_none_593dc6043e875c41
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.argreflector
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.cat
XP_PAYLOAD_PATH=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.argreflector,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\ParameterTypes.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Reflection;
using System.Text.RegularExpressions;
using System.ComponentModel;
using System.Xml;
using System.Xml.Serialization;
using System.Collections;

namespace xonline.common.tools.console
{
    internal interface IFlag
    {
    }
    internal interface INamedParameter
    {
    }
    internal interface IPositionalParameter
    {
    }
    /// <summary>
    /// 
    /// </summary>
    public abstract class ReflectedParameter
    {
        /// <summary>
        /// 
        /// </summary>
        public abstract Boolean IsSet { get; }
        internal abstract void Set(String text);
    }
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class GenericReflectedParameter<T> : ReflectedParameter, IFormattable 
    {
        /// <summary>
        /// 
        /// </summary>
        internal protected T _value;
        /// <summary>
        /// 
        /// </summary>
        internal protected String _text;
        /// <summary>
        /// 
        /// </summary>
        public T Value { get { return _value; } }
        /// <summary>
        /// 
        /// </summary>
        public String Text { get { return _text; } }
        /// <summary>
        /// 
        /// </summary>
        public override Boolean IsSet { get { return _text != null; } }
        internal override void Set(String text)
        {
            _text = text;
            if (_value is IConvertible)
            {
                _value = (T)Convert.ChangeType(text, typeof(T));
            }
            else 
            {
                MethodInfo parse = typeof(T).GetMethod("Parse", BindingFlags.Static | BindingFlags.Public,
                    null, new Type[] { typeof(String) }, null);

                if (parse != null)
                {
                    _value = (T)parse.Invoke(null, new Object[] { text });
                }
                else
                {
                    _value = (T)TypeDescriptor.GetConverter(typeof(T)).ConvertFrom(text);

                }
            }
        }
        internal GenericReflectedParameter(T value)
        {
            _value = value;
            _text = null;
        }
        internal GenericReflectedParameter()
        {
            _value = default(T);
            _text = null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="format"></param>
        /// <param name="formatProvider"></param>
        /// <returns></returns>
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return Text;
        }
    }
    /// <summary>
    /// 
    /// </summary>
    public class Flag : GenericReflectedParameter<Boolean>, IFlag
    {
        internal override void Set(String value)
        {
            _text = "true";
            _value = true;
        }
        /// <summary>
        /// 
        /// </summary>
        public Flag()
            : base()
        {
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class ValueParameter<T> : GenericReflectedParameter<T>
    {
        /// <summary>
        /// 
        /// </summary>
        public override bool IsSet
        {
            get { return _text != null; }
        }

        internal ValueParameter(T value)
            :
            base(value)
        {
        }
        internal ValueParameter()
            :
            base()
        {

        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class NamedParameter<T> : ValueParameter<T>, INamedParameter
    {
        internal NamedParameter(T value)
            : base(value)
        {
        }
        /// <summary>
        /// 
        /// </summary>
        public NamedParameter()
            : base()
        {
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static implicit operator NamedParameter<T>(T value)
        {
            return new NamedParameter<T>(value);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    /// <typeparam name="T"></typeparam>
    public class PositionalParameter<T> : ValueParameter<T>, IPositionalParameter
    {
        internal PositionalParameter(T value)
            : base(value)
        {
        }
        /// <summary>
        /// 
        /// </summary>
        public PositionalParameter()
            : base()
        {
        }
        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static implicit operator PositionalParameter<T>(T value)
        {
            return new PositionalParameter<T>(value);
        }
    }
    /// <summary>
    /// 
    /// </summary>
    public class ArgumentCollection : GenericReflectedParameter<String[]>, IPositionalParameter
    {
        /// <summary>
        /// 
        /// </summary>
        public new String Text { get { throw new NotImplementedException(); } }
        
        /// <summary>
        /// 
        /// </summary>
        public override bool IsSet
        {
            get { return Value != null && Value.Length > 0; }
        }
                
        /// <summary>
        /// 
        /// </summary>
        /// <param name="text"></param>
        internal override void Set(string text)
        {
            throw new Exception("The method or operation is not implemented.");
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\TextBlock.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Collections.Specialized;

namespace xonline.common.tools.console
{
    public enum TextJustification
    {
        Left,
        Center,
        Right
    }

    public class TextColumn
    {
        public String Text;
        public int Width;
        public int LeftPadding;
        public int RightPadding;
        public TextJustification Justification;

        public TextColumn()
        {
            Text = "";
            Width = -1;
            LeftPadding = 0;
            RightPadding = 0;
            Justification = TextJustification.Left;
        }

        public List<String> Format()
        {
            return Format(Width);
        }
        public List<String> Format(int width)
        {
            List<String> lines;
            String line;
            int index;

            index = 0;
            lines = new List<String>();
            line = Text.Trim();
            line = line.Replace("\r\n", "\n");
            line = line.Replace("\r", "\n");
            width -= LeftPadding + RightPadding;

            while (index < line.Length)
            {
                String nextLine;
                int lastSpace = -1;
                int ptr = 0;

                if (index >= line.Length)
                    return null;
                for (ptr = 0; ptr < width && index + ptr < line.Length; ptr++)
                {
                    char current = line[index + ptr];
                    if (Char.IsWhiteSpace(current))
                    {
                        lastSpace = ptr;
                        if (current == '\n')
                            break;
                    }
                }
                if (lastSpace == -1 || ptr < width)
                    lastSpace = ptr;

                nextLine = line.Substring(index, lastSpace);
                index = index + lastSpace + 1;

                switch (Justification)
                {
                    case TextJustification.Left:
                        nextLine = nextLine.PadRight(width);
                        break;

                    case TextJustification.Center:
                        ptr = (width - nextLine.Length) / 2;
                        nextLine = nextLine.PadLeft(width - ptr).PadRight(width);
                        break;

                    case TextJustification.Right:
                        nextLine = nextLine.PadLeft(width);
                        break;
                }

                if (LeftPadding > 0)
                {
                    nextLine = nextLine.PadLeft(width + LeftPadding);
                }
                if (RightPadding > 0)
                {
                    nextLine = nextLine.PadRight(width + LeftPadding + RightPadding);
                }

                lines.Add(nextLine);
            }

            return lines;
        }
    }

    public class TextBlock
    {
        public List<TextColumn> Columns;

        public TextBlock(int columns)
        {
            Columns = new List<TextColumn>(columns);
            for (int column = 0; column < columns; column++)
            {
                Columns.Add(new TextColumn());
            }
        }

        public List<String> Write(int width)
        {
            int[] colWidth = new int[Columns.Count];
            int wildCard = -1;

            for (int column = 0; column < Columns.Count; column++)
            {
                if (Columns[column].Width == -1)
                {
                    if (wildCard != -1)
                    {
                        throw new ArgumentException("Only one variable width column is allowed");
                    }
                    wildCard = column;
                }
                else
                {
                    colWidth[column] = Columns[column].Width;
                    width -= colWidth[column];
                }
            }
            if (wildCard != -1)
            {
                colWidth[wildCard] = width;
            }

            List<String>[] columns = new List<String>[Columns.Count];
            int maxLength = 0;
            for (int column = 0; column < Columns.Count; column++)
            {
                columns[column] = Columns[column].Format(colWidth[column]);
                if (columns[column].Count > maxLength)
                {
                    maxLength = columns[column].Count;
                }
            }

            List<String> lines = new List<String>();
            for (int line = 0; line < maxLength; line++)
            {
                String currentLine = "";
                for (int column = 0; column < Columns.Count; column++)
                {
                    if (line >= columns[column].Count)
                    {
                        currentLine = currentLine.PadRight(colWidth[column]);
                    }
                    else
                    {
                        currentLine = currentLine + columns[column][line];
                    }
                }
                lines.Add(currentLine);
            }

            return lines;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_xonline.common.argreflector_none_12.4.56.0_none_593dc6043e875c41
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=xonline.common.argreflector
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.manifest
XP_MANIFEST_PATH=manifests\msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.cat
XP_CATALOG_PATH=manifests\msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d.cat
XP_PAYLOAD_PATH=msil_xonline.common.argreflector_no-public-key_12.4.56.0_x-ww_6ac7432d
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=xonline.common.argreflector,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\test\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\src\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\argreflector\test\Program.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using System.Data.SqlTypes;
using System.Xml.Serialization;
using xonline.common.tools.console;

namespace CommandReflector
{
    [ApplicationName("LiveTitle")]
    [ApplicationDescription("Tool to configure a title in the Xbox Live Service")]
    public class LiveTitleParameters : CommandLineDefinition
    {
        [ParameterDescription("Confirms the database connectivity, Titlevault existence, and parameter files exist")]
        public Flag CheckReady;

        [ParameterDescription("Full path to an XLAST XML file")]
        public NamedParameter<String> XLastPath;

        [ParameterAliases("lbs")]
        [ParameterDescription("Default leaderboard server for this title")]
        public NamedParameter<String> LBServer;

        [ParameterAliases("matchsvr")]
        [ParameterDescription("Default matchmaking server for this title")]
        public NamedParameter<String> MatchServer;

        [ParameterDescription("Full path to a LiveTitleConfig XML file")]
        public NamedParameter<String> LTCPath;

        [ParameterDescription("Disc-media id for this title (optional -- default is 0)")]
        public NamedParameter<int> DiscId;

        [ParameterDescription("Enable vervose output")]
        public Flag Verbose;

        [ParameterDescription("Generate an LTC file for the specified XLAST.")]
        public Flag LiveTitleDefault;

        [ParameterDescription("Link in images???")]
        public Flag Images;

        [ParameterDescription("Don\'t reload front doors after LiveTitle complete")]
        public Flag NoReload;

        [ParameterDescription("Time to wait for a response")]
        public NamedParameter<int> TimeOut;

        [ParameterDescription("Prop an Xbox 1 title")]
        public Flag XboxDefault;

        [ParameterDescription("Path to the XBOX file")]
        public NamedParameter<String> XboxPath;

        [ParameterDescription("Path to the XSC file")]
        public NamedParameter<String> XSCFilePath;
        
        [ParameterDescription("Path to the XMS file")]
        public NamedParameter<String> XMSPath;

        [ParameterDescription("Title version")]
        public NamedParameter<int> Version;

        [ParameterDescription("Lock a title\'s configuration")]
        public Flag Lock;

        [ParameterDescription("Report title version information")]
        public Flag ReportVer;

        [ParameterDescription("TitleId for this title")]
        public NamedParameter<String> TitleId;

        [ParameterDescription("Add a new base version for a title")]
        public Flag AddBaseVer;

        [ParameterDescription("Delete a version chain for a title")]
        public Flag DelBaseVer;

        public override void DisplayUsage()
        {
            base.DisplayUsage();
            Console.WriteLine("Examples:");
            Console.WriteLine("    Create a default Live Title Config file from an Xlast file (Do this BEFORE you deploy the Xlast doc)");
            Console.WriteLine("    LiveTitle /livetitledefault /xlastpath:c:\\temp\\ffe04585.xlast /lbs:TukPrStatInh001 /matchsvr:MtchSqlv01;MtchSqlv03");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Deploy initial configuration so title 0xffe04585, which is part of the bounty program can log in");
            Console.WriteLine("    LiveTitle /deploy /xlastpath:c:\\temp\\ffe04585.xlast /ltcpath:c:\\temp\\ffe04585_ltc.xml");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Create a default Live Title Config file from an XBOX1 config file (Do this BEFORE you deploy the Xbox1 title)");
            Console.WriteLine("    LiveTitle /xboxdefault /xboxpath:c:\\temp\\ffe04585.xbox  /xscpath:c:\\temp\\ffe04585.xsc ");
            Console.WriteLine("              /lbs:TukPrStatInh001 /matchsvr:MtchSqlv01;MtchSqlv03");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Deploy initial so Xbox title 0xffe04585 can log in");
            Console.WriteLine("    LiveTitle /deployxbox /xboxpath:c:\\temp\\ffe04585.xbox /ltcpath:c:\\temp\\ffe04585_ltc.xml ");
            Console.WriteLine("              /xscpath:c:\\temp\\ffe04585.xsc ");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Mark a title's configuration as 'locked'");
            Console.WriteLine("    LiveTitle /lock /xlastpath:c:\\temp\\ffe04585.xlast");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Report version information for title 0xffe04585 ");
            Console.WriteLine("    LiveTitle /reportver /titleid:0xffe04585 ");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Add new base version 0x5 for Xenon title 0xffe04585 ");
            Console.WriteLine("    LiveTitle /addbasever /titleid:0xffe04585 /version:0x5 /platform:Xenon");
            Console.WriteLine("");
            Console.WriteLine("");
            Console.WriteLine("    Delete version chain for PC title 0xffe04585 version 0x5 ");
            Console.WriteLine("    LiveTitle /delbasever /titleid:0xffe04585 /version:0x5 /platform:PC");
            Console.WriteLine("");
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            LiveTitleParameters parameters;

            ArgReflector.DisplayUsage(typeof(LiveTitleParameters));
            if (!ArgReflector.Parse(out parameters, args))
            {
                ArgReflector.DisplayUsage(typeof(LiveTitleParameters));
                return;
            };
            parameters.DumpValues();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:25 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:28 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:47 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth.40\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:28 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:43 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth.40\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:47 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth.40\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:26 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\DelaySigned.Microsoft.XboxLive.Auth.40\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:43 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthAgeGroups.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary>AuthAgeGroups defines the set of possible
    /// values for the claimType  AuthClaimTypes.AgeGroups.
    /// The values are assigned to users as a function  of
    /// their country of record.</summary>
    public static class AuthAgeGroups
    {
        /// <summary>The user  is  considered  a  child  in
        /// their country of record.  Typically this  means
        /// less than 13 years of  age,  but it  varies  by
        /// country (e.g. less han 14 years of age in Korea)
        /// </summary>
        public const string Child = "Child";
        
        /// <summary>The user is considered  a teenager  in
        /// their country  (not a child or an adult  -  see
        /// definitions above/below.</summary>
        public const string Teen = "Teen";

        /// <summary>The user  is  considered  an adult  in
        /// their country of record.  Typically this  means
        /// greater than or equal to 18 years of  age,  but
        /// it varies by country.</summary>
        public const string Adult = "Adult";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthDeviceTypes.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary>
    /// AuthDeviceTypes defines the set of possible
    /// values for the claimType AuthClaimTypes.DeviceTypes.    
    /// </summary>
    public static class AuthDeviceTypes
    {
        /// <summary>
        /// The token was issued for a Windows Phone device.
        /// </summary>
        public const string WindowsPhone = "WindowsPhone";

        /// <summary>
        /// The token was issued for is a Windows Phone 7 device.
        /// Deprecated: we can't tell the difference between WP7 and Apollo
        /// </summary>
        public const string WindowsPhone7 = "WindowsPhone7";

        /// <summary>
        /// The token was issued for a web browser or other unknown platform.
        /// </summary>
        public const string Web = "Web";

        /// <summary>
        /// The token was issued for an Xbox 360 console.
        /// </summary>
        public const string Xbox360 = "Xbox360";

        /// <summary>
        /// The token was issued for a PC running Games for Windows Live.
        /// </summary>
        public const string PC = "PC";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthPrivileges.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary> </summary>
    public static class AuthPrivileges
    {
        /// <summary> </summary>
        public const byte AddFriend                   = 255;
        /// <summary> </summary>
        public const byte Multiplayer                 = 254;
        /// <summary> </summary>
        public const byte MultiplayerEnabledByTier    = 253;
        /// <summary> </summary>
        public const byte VideoMessagingSend          = 250;
        /// <summary> </summary>
        public const byte PurchaseContent             = 245;
        /// <summary> </summary>
        public const byte CrossPlatformMultiplayer    = 241;
        /// <summary> </summary>
        public const byte CrossPlatformCommunications = 240;
        /// <summary> </summary>
        public const byte PreviousLiveProtocols       = 239;
        /// <summary> </summary>
        public const byte VideoCommunications         = 235;
        /// <summary> </summary>
        public const byte TradeContent                = 238;
        /// <summary> </summary>
        public const byte MusicExplicitContent        = 237;
        /// <summary> </summary>
        public const byte MetroAccess                 = 231;
        /// <summary> </summary>
        public const byte PassportSwitching           = 228;
        /// <summary> </summary>
        public const byte BillingSwitching            = 227;
        /// <summary> </summary>
        public const byte MultiplayerDedicatedServer  = 226;
        /// <summary> </summary>
        public const byte UserGraduation              = 225;
        /// <summary> </summary>
        public const byte PremiumVideo                = 224;
        /// <summary> </summary>
        public const byte Primetime                   = 223;
        /// <summary> </summary>
        public const byte ContentAuthor               = 222;
        /// <summary> </summary>
        public const byte PiiAccess                   = 221;
        /// <summary> </summary>
        public const byte SocialNetworkSharing        = 220;
        /// <summary> </summary>
        public const byte SubscriptionContent         = 219;
        /// <summary> </summary>
        public const byte SubscriptionTitle           = 218;
        /// <summary> </summary>
        public const byte PremiumContent              = 214;
        /// <summary> </summary>
        public const byte Family                      = 213;
        /// <summary> </summary>
        public const byte UnsafeProgramming           = 212;
        /// <summary> </summary>
        public const byte ShareContent                = 211;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthTiers.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary> </summary>
    public static class AuthTiers
    {
        /// <summary> </summary>
        public const string NewUser = "None";
        /// <summary> </summary>
        public const string Silver = "Silver";
        /// <summary> </summary>
        public const string Gold = "Gold";
        /// <summary> </summary>
        public const string FamilyGold = "FamilyGold";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthStatus.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary>AuthStatus defines the set of possible values
    /// for the claimType AuthClaimTypes.Status</summary>
    public static class AuthStatus
    {
        /// <summary>The user account requires maintenance and
        /// can only access maintenance services.  The account
        /// must be fixed before accessing other user services
        /// </summary>
        public const string Maintenance = "Maintenance";
        
        /// <summary>The user account is in good standing  and
        /// is allowed to access all user  services.</summary>
        public const string Ok          = "Ok";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthValue.cs ===
using System;
using System.Collections.Generic;
using System.Globalization;
using System.Net;
using System.Net.Sockets;
using System.Text;

using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth.Claims
{
    internal interface IAuthArray {
        bool Contains(object value);
    }

    internal abstract class AuthValue
    {
        private delegate AuthValue AuthValueDelegate(object o);

        private static Dictionary<string, AuthValueDelegate> _valueTypes = new Dictionary<string, AuthValueDelegate>() {
            { AuthClaimValueTypes.IpAddress,    (s => new AuthIpAddress(s))    },
            { ClaimValueTypes.Base64Binary,     (s => new AuthBase64Binary(s)) },
            { ClaimValueTypes.Boolean,          (s => new AuthBoolean(s))      },
            { ClaimValueTypes.Date,             (s => new AuthDateTime(s))     },
            { ClaimValueTypes.Datetime,         (s => new AuthDateTime(s))     },
            { AuthClaimValueTypes.Decimal,      (s => new AuthDecimal(s))      },
            { ClaimValueTypes.Double,           (s => new AuthDecimal(s))      },
            { ClaimValueTypes.HexBinary,        (s => new AuthHexBinary(s))    },
            { ClaimValueTypes.Integer,          (s => new AuthInteger(s))      },
            { ClaimValueTypes.Time,             (s => new AuthTime(s))         },
            { AuthClaimValueTypes.IntegerArray, (s => new AuthIntegerArray(s)) },
        };

        /// <summary>
        /// Create the appropriate AuthValue object as a function of the
        /// claimType
        /// </summary>
        /// <param name="o">The object to convert into an AuthValue</param>
        /// <param name="claimValueType">The type to which the object is converted</param>
        /// <returns>An AuthValue representing the supplied object</returns>
        public static AuthValue Create(object o, string claimValueType) {
            try {
                if (_valueTypes.ContainsKey(claimValueType))
                    return _valueTypes[claimValueType](o);
                else {
                    return new AuthString(o);
                }
            }
            catch (Exception e) {
                if (e is FormatException) throw;
                throw new FormatException(e.Message, e);
            }
        }

        public static void CheckIsNullOrEmptyString(object o, string type)
        {
            string s = o as string;

            if ((o == null) || ((s != null) && (s.Length == 0))) {
                throw new FormatException("Value not recognized as " + type);
            }
        }
    }

    /// <summary>
    /// AuthByteArray is a common class used to wrap a byte array. It
    /// is derived by the AuthBase64Binary and AuthHexBinary  classes.
    /// </summary>
    internal abstract class AuthByteArray : AuthValue, IComparable
    {
        public byte[] Value { get; protected set; }

        /// <summary>
        /// Initializes a new instance of the AuthByteArray class.
        /// </summary>
        protected AuthByteArray() {
        }

        public override bool Equals(object o) {
            if ((Value == null) ^ (((AuthByteArray) o).Value == null)) return false;
            if (Value == null) return true;
            return CompareTo(o) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

        /// <summary>
        /// Compare the value of the wrapped byte array with the user
        /// supplied value.  Arrays of different lengths are compared
        /// up to the length of the shorter array.  If they are equal
        /// at that point, then the  longer array is considered to be
        /// greater.
        /// </summary>
        public int CompareTo(object o)
        {
            AuthByteArray byteArray = o as AuthByteArray;

            if ((byteArray == null || byteArray.Value == null)) {
                throw new InvalidOperationException();
            }

            byte[] value = byteArray.Value;
            int length = Math.Min(Value.Length, value.Length);

            for (int i = 0; i < length; i++) {
                int difference = Value[i] - value[i];
                if (difference != 0) return difference > 0 ? 1 : -1;
            }

            if (Value.Length > value.Length) return 1;
            return Value.Length == value.Length ? 0 : -1;
        }

        protected static byte[] HexToBytes(string s)
        {
            if (s == null)
                throw new ArgumentNullException("s");
            else if (s == string.Empty) {
                return new byte[0];
            }

            if (s.StartsWith("0x")) s = s.Substring(2);
            if ((s.Length % 2) == 1) s = "0" + s;

            byte[] bytes = new byte[s.Length / 2];

            for (int i = 0; i < s.Length / 2; i++) {
                bytes[i] = (byte)((HexToByte(s[i * 2]) << 4) + HexToByte(s[i * 2 + 1]));
            }

            return bytes;
        }

        protected static byte HexToByte(char c)
        {
            if (c >= '0' && c <= '9')
                return (byte)(c - '0');
            else if (c >= 'a' && c <= 'f')
                return (byte)(c - 'a' + 10);
            else if (c >= 'A' && c <= 'F')
            {
                return (byte)(c - 'A' + 10);
            }

            throw new FormatException("Invalid hex character, '" + c + "'");
        }
    }

    internal class AuthBase64Binary : AuthByteArray
    {
        /// <summary>
        /// Initializes a new instance of the AuthBase64Binary  class.
        /// </summary>
        public AuthBase64Binary(object o)
        {
            if (o == null)
                Value = null;
            else if (o is byte[])
                Value = (byte[]) o;
            else if (o is string)
                Value = Convert.FromBase64String((string) o);
            else if (o is bool)
                Value = (bool)o ? new byte[] { 1 } : new byte[] { 0 };
            else if (o.GetType().IsPrimitive)
                Value = HexToBytes(Convert.ToUInt64(o).ToString("X"));
            else {
                throw new FormatException("Value not recognized as base64binary.");
            }
        }

        /// <summary>
        /// Return the canonical representation of a base  64  string.
        /// This is the standard conversion from .NET.
        /// </summary>
        public override string ToString() {
            if (Value == null) return null;
            return Convert.ToBase64String(Value);
        }
    }

    /// <summary>
    /// 
    /// </summary>
    internal class AuthHexBinary : AuthByteArray {

        /// <summary>
        /// Initializes a new instance of the AuthHexBinary class.
        /// </summary>
        public AuthHexBinary(object o)
        {
            if (o == null)
                Value = null;
            else if (o is byte[])
                Value = (byte[]) o;
            else if (o is string)
                Value = HexToBytes((string) o);
            else if (o is bool)
                Value = (bool) o ? new byte[] { 1 } : new byte[] { 0 };
            else if (o.GetType().IsPrimitive)
                Value = HexToBytes(Convert.ToUInt64(o).ToString("X"));
            else {
                throw new FormatException("Value not recognized as hexBinary.");
            }
        }


        /// <summary>
        /// Return the canonical representation of a hex string. That
        /// is, 0-9, A-F,  with no lower case  and  no  leading  "0x"
        /// </summary>
        public override string ToString()
        {
            if (Value == null) return null;
            if (Value.Length == 0) return string.Empty;

            char[] chars = new char[Value.Length * 2];
            int position = 0;

            for (int i = 0; i < Value.Length; i++)
            {
                byte v = Value[i];
                chars[position++] = _hexChar[(v & 0xF0) >> 4];
                chars[position++] = _hexChar[(v & 0x0F)];
            }

            return new string(chars);
        }

        private readonly static char[] _hexChar = new char[] { 
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' 
        };
    }


    internal class AuthInteger : AuthValue, IComparable
    {
        public decimal Value { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AuthInteger class.
        /// </summary>
        public AuthInteger(object o)
        {
            CheckIsNullOrEmptyString(o, "integer");

            if (o is string)
                Value = decimal.Parse((string)o, NumberStyles.Integer);
            else {
                Value = Convert.ToDecimal(o);
            }
        }

        public override bool Equals(object obj) {
            return CompareTo(obj) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

         public int CompareTo(object o) {
            decimal value = ((AuthInteger) o).Value;
            if (Value > value) return 1;
            return Value < value ? -1 : 0;
        }

        public override string ToString() {
            return Value.ToString("d");
        }
    }


    internal class AuthDateTime : AuthValue, IComparable
    {
        public DateTime Value { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public AuthDateTime(object o) {
            CheckIsNullOrEmptyString(o, "integer");
            Value = Convert.ToDateTime(o);
        }

        public override bool Equals(object obj) {
            return CompareTo(obj) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

        public int CompareTo(object o) {
            DateTime value = ((AuthDateTime) o).Value;
            if (Value > value) return  1;
            return Value < value ? -1 : 0;
        }

        /// <summary>
        /// Return the canonical representation of a #time
        /// </summary>
        public override string ToString() {
            return Value.ToString("u");
        }
    }


    /// <summary>
    /// 
    /// </summary>
    internal class AuthString : AuthValue, IComparable
    {
        public string Value { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public AuthString(object o) {
            if (o == null)
                Value = null;
            else {
                Value = o.ToString();
            }
        }

        public override bool Equals(object o) {
            if ((Value == null) ^ (((AuthString) o).Value == null)) return false;
            if (Value == null) return true;
            return CompareTo(o) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

        /// <summary>
        /// 
        /// </summary>
        public int CompareTo(object o) {
            string value = ((AuthString) o).Value;
            int order = string.Compare(Value, value);
            if (order == 0) return order;
            return order < 0 ? -1 : 1;
        }

        public override string ToString() {
            return Value;
        }
    }

    
    internal class AuthBoolean : AuthValue, IComparable
    {
        /// <summary>
        /// Get the wrapped boolean value
        /// </summary>
        public bool Value { get; set; }

        /// <summary>
        /// Initializes a new instance of the AuthTime class.
        /// </summary>
        public AuthBoolean(object o)
        {
            CheckIsNullOrEmptyString(o, "bool");

            if (o is bool)
                Value = (bool) o;
            else if (o is string)
            {
                string s = (string) o;

                if (s.Trim() == "1")
                    Value = true;
                else if (s.Trim() == "0")
                    Value = false;
                else {
                    Value = Convert.ToBoolean(s);
                }
            }

            else {
                Value = Convert.ToBoolean(o);
            }
        }

        public override bool Equals(object obj) {
            return CompareTo(obj) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

        /// <summary>
        /// Compare the wrapped boolean value. Return 0 if  they  are
        /// equal.  For the purposes of greater than  and  less  than
        /// assume that true is greater than false.
        /// </summary>
        public int CompareTo(object o) {
            bool value = ((AuthBoolean) o).Value;
            if (Value == value) return 0;
            return Value ? 1 : -1;
        }

        /// <summary>
        /// Return the canonical representation of a boolean value.
        /// </summary>
        public override string ToString() {
            return Value.ToString();
        }
    }


    internal class AuthTime : AuthValue, IComparable
    {
        public DateTime Value { get; set; }

        /// <summary>
        /// Initializes a new instance of the AuthTime class.
        /// </summary>
        public AuthTime(object o) {
            CheckIsNullOrEmptyString(o, "DateTime");

            if (o is DateTime)
                Value = (DateTime) o;
            else {
                Value = Convert.ToDateTime(o);
            }
        }

        public override bool Equals(object obj) {
            return CompareTo(obj) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

        public int CompareTo(object o) {
            DateTime value = ((AuthTime) o).Value;
            if (Value > value) return  1;
            return Value < value ? -1 : 0;
        }

        /// <summary>
        /// Return canonical representation of a time (hours, minutes,
        /// seconds and a timezone).
        /// </summary>
        public override string ToString() {
            return Value.ToString("hh:mm:ssZ");
        }
    }


    internal class AuthDecimal : AuthValue, IComparable
    {
        public decimal Value { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AuthDecimal class.
        /// </summary>
        public AuthDecimal(object o)
        {
            CheckIsNullOrEmptyString(o, "decimal");

            if (o is decimal)
                Value = (decimal) o;
            else {
                Value = Convert.ToDecimal(o);
            }
        }

        public override bool Equals(object obj) {
            return CompareTo(obj) == 0;
        }

        public override int GetHashCode() {
            return Value.GetHashCode();
        }

        public int CompareTo(object o) {
            decimal value = ((AuthDecimal) o).Value;
            if (Value > value) return  1;
            return (Value < value) ? -1 : 0;
        }

        /// <summary>
        /// Return the canonical representation of a decimal
        /// </summary>
        public override string ToString() {
            return Value.ToString();
        }
    }

    
    /// <summary>
    /// 
    /// </summary>
    internal class AuthIpAddress : AuthValue
    {
        /// <summary>
        /// Get the wrapped address values
        /// </summary>
        public IPAddress Address { get; private set; }
        public ushort    Port { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AuthIpAddress class.
        /// </summary>
        public AuthIpAddress(object o)
        {
            CheckIsNullOrEmptyString(o, "IPAddress");

            if (o is IPAddress)
                Address = (IPAddress) o;
            else if (o.GetType().IsAssignableFrom(typeof(Int64)))
                Address = new IPAddress((Int64) o);
            else if (o is byte[])
                Address = new IPAddress((byte[]) o);
            else if (! (o is string))
                throw new FormatException("Value not recognized as IPAddress");
            else {
                string address = (string) o;
                string port = "0";

                // is it a IPv4 address (does it have a dot)
                if (address.IndexOf('.') > -1)
                {
                    int i = address.LastIndexOf(':');

                    if (i > -1) {
                        port = address.Substring(i + 1);
                        address = address.Substring(0, i);
                    }
                }

                // it must be IPv6 (see if it has a port)
                else {
                    int i = address.LastIndexOf("]:");

                    if ((i > -1) && (address[0] == '['))
                    {
                        if (address.Length > i + 1) port = address.Substring(i + 2);
                        address = address.Substring(1, i - 1);
                    }
                }

                Port = string.IsNullOrEmpty(port) ? Port : ushort.Parse(port);
                Address = IPAddress.Parse(address);
            }
        }

        public override bool Equals(object o)
        {
            IPAddress address = ((AuthIpAddress) o).Address;
            ushort    port    = ((AuthIpAddress) o).Port;

            return Address.Equals(address) && (Port == port);
        }

        public override int GetHashCode() {
            return Address.GetHashCode() ^ Port.GetHashCode();
        }

        public override string ToString()
        {
            if (Port == 0) return Address.ToString();

            if (Address.AddressFamily == AddressFamily.InterNetwork)
                return Address.ToString() + ":" + Port.ToString();
            else if (Address.AddressFamily == AddressFamily.InterNetworkV6)
                return "[" + Address.ToString() + "]:" + Port.ToString();
            else {
                return Address.ToString();
            }
        }
    }


    /// <summary>
    /// 
    /// </summary>
    internal class AuthIntegerArray : AuthValue, IAuthArray
    {
        /// <summary>
        /// Get the wrapped integer array value
        /// </summary>
        public Decimal[] Values { get; private set; }

        /// <summary>
        /// Initializes a new instance of the AuthIntegerArray class.
        /// </summary>
        public AuthIntegerArray(object o)
        {
            if (o == null)
                Values = null;
            else if (IsIntegerType(o.GetType()))
                Values = new Decimal[1] { (Decimal) o };

            else if (o.GetType().IsArray)
            {
                if (IsIntegerType(o.GetType().GetElementType())) {
                    Array array = (Array) o;
                    Values = new Decimal[array.Length];

                    for (int i = 0; i < array.Length; i++) {
                        Values[i] = Convert.ToDecimal(array.GetValue(i));    
                    }
                }
            }

            else if (o is string)
            {
                string t = (string)o;
                string[] s = ((string) o).Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                Values = new Decimal[s.Length];

                for (int i = 0; i < Values.Length; i++) {
                    Values[i] = Decimal.Parse(s[i], NumberStyles.Integer);
                }
            }
            else {
                throw new FormatException("Value not recognized as hexBinary.");
            }
        }

        public override bool Equals(object o)
        {
            AuthIntegerArray integerArray = o as AuthIntegerArray;

            if (integerArray == null) return false;
            if (Values.Length != integerArray.Values.Length) return false;

            for (int i = 0; i < Values.Length; i++) {
                if (Values[i] != integerArray.Values[i]) return false;
            }

            return true;
        }

        public bool Contains(object o)
        {
            AuthInteger authInteger = new AuthInteger(o);

            for (int i = 0; i < Values.Length; i++) {
                if (Values[i] == authInteger.Value) return true;
            }

            return false;
        }

        private static bool IsIntegerType(System.Type type)
        {
            if (!type.IsValueType) return false;
            if (type.FullName.Equals("System.Boolean") || type.FullName.Equals("System.Single") || type.FullName.Equals("System.Double") || type.FullName.Equals("System.Decimal")) return false;
            return true;
        }

        public override int GetHashCode()
        {
            if (Values.Length == 0) return 0;
            int hashCode = Values[0].GetHashCode();

            for (int i = 0; i < Values.Length; i++) {
                hashCode ^= Values[i].GetHashCode();
            }

            return hashCode;
        }

        public override string ToString()
        {
            if (Values.Length == 0) return string.Empty;
            StringBuilder stringBuilder = new StringBuilder(Values[0].ToString());

            for (int i = 1; i < Values.Length; i++) {
                stringBuilder.AppendFormat(" {0}", Values[i].ToString());
            }

            return stringBuilder.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Extensions\IClaimsIdentity.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth
{
    /// <summary>
    /// AuthExtensions contains a number class extensions  to  make  it
    /// easier to navigate IClaimsPrincipal and IClaimsIdentity objects.
    /// </summary>
    public static partial class AuthExtensions
    {
        private static IEnumerable<Claim> FindClaims(this IClaimsIdentity identity, Predicate<Claim> predicate) {
            return from claim in identity.Claims where predicate(claim) select claim;
        }

        private static IEnumerable<Claim> FindClaims(this IClaimsIdentity identity, string claimType)
        {
            return identity.FindClaims(c => c.ClaimType.Equals(claimType));
        }

        private static IEnumerable<Claim> FindClaims(this IClaimsIdentity identity, string claimType, string claimIssuer)
        {
            return identity.FindClaims(c => c.ClaimType.Equals(claimType) && c.Issuer.Equals(claimIssuer));
        }

        /// <summary>
        /// For this identity,  check to see if there is a claim that matches the
        /// specified predicate.
        /// </summary>
        /// <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
        /// <param name="predicate">The Predicate to be evaluated.</param>
        /// <returns>True if the predicate evaluates to true, otherwise false</returns>
        public static bool ClaimExists(this IClaimsIdentity identity, Predicate<Claim> predicate)
        {
            return identity.FindClaims(predicate).FirstOrDefault() != null;
        }

        /// <summary>
        /// For this identitty, try to get the value of the specified claim (claimType)
        /// without respect to the issuer of the claim.
        /// </summary>
        /// <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
        /// <param name="claimType">The claimType (name)</param>
        /// <param name="claimValue">The string that will receive the claimValue</param>
        /// <returns>True if the claim and value were found, otherwise false.</returns>
        public static bool TryGetClaimValue(this IClaimsIdentity identity, string claimType, out string claimValue)
        {
            Claim claim = identity.FindClaims(claimType).FirstOrDefault();
            claimValue = claim == null ? null : claim.Value;
            return claimValue != null;
        }

        /// <summary>
        /// For this identity,  try to get the value of the specified claim (claimType)
        /// from the specified issuer.
        /// </summary>
        /// <param name="identity">The IClaimsIdentity instance that serves as "this".</param>
        /// <param name="claimType">The claimType (name)</param>
        /// <param name="claimIssuer">Only return claims matching the claimIssuer</param>
        /// <param name="claimValue">The string that will receive the claimValue</param>
        /// <returns>True if the claim and value were found, otherwise false.</returns>
        public static bool TryGetClaimValue(this IClaimsIdentity identity, string claimType, string claimIssuer, out string claimValue)
        {
            Claim claim = identity.FindClaims(claimType, claimIssuer).FirstOrDefault();
            claimValue = claim == null ? null : claim.Value;
            return claimValue != null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Config\AuthConfig.cs ===
﻿using System.Collections.Generic;
using System.Configuration;
using System.Xml;

using Microsoft.XboxLive.Auth.Policy;

namespace Microsoft.XboxLive.Auth.Config
{
    /// <summary>
    /// The AuthConfig class is the top node in the configuration. It
    /// has no attributes, and is just a collection of service  nodes.
    /// </summary>
    public class AuthConfig : ConfigurationSection
    {
        /// <summary> </summary>
        [ConfigurationProperty("", IsDefaultCollection = true)]
        public AuthServiceCollection Services {
            get { return (AuthServiceCollection)base[""]; }
        }

        /// <summary>
        /// By default we look for an issuer  of  "xsts.xboxlive.com".
        /// Setting the issuer attribute on the configuration element
        /// changes the default to the specified value. That value is
        /// used in AuthAttribute and AuthHelper code.
        /// </summary>
        [ConfigurationProperty("Issuer", IsRequired = false, IsKey = true)]
        public string Issuer
        {
            get { return (string)this["Issuer"]; }
            set { this["Issuer"] = value; }
        }

        /// <summary>
        /// Find configured policy for the specifed service and action
        /// </summary>
        /// <param name="serviceName">The name of  the  service. This
        /// varies by framework type. For instance, for ASP.NET  SOAP
        /// this is the [WebService] class name. For ASP.NET MVC this
        /// is the controller name.</param>
        /// <param name="actionName">The name  of  the  action.  This
        /// varies by framework type.  For instance, for ASP.NET SOAP
        /// this is the [WebMethod] name.  For WCF, this is the  name
        /// of the [OperationContract].   For ASP.NET MVC this is the
        /// action name.</param>
        /// <returns>The configued policy for the specificed service
        /// and action. If no policy is defined then null.</returns>
        public AuthPolicy Find(string serviceName, string actionName)
        {
            AuthServiceElement serviceElement = Services[serviceName];
            if (serviceElement == null) return null;

            AuthActionElement actionElement = serviceElement.Actions[actionName];
            if (actionElement == null) return null;

            return actionElement.Policy;
        }

        /// <summary>
        /// Find configured global policy for  the  specifed  service
        /// </summary>
        /// <param name="serviceName">The name of  the  service. This
        /// varies by framework type. For instance, for ASP.NET  SOAP
        /// this is the [WebService] class name. For ASP.NET MVC this
        /// is the controller name.</param>
        /// <returns>The configured policy for the specificed service.
        ///If no policy is defined then null.</returns>
        public AuthPolicy Find(string serviceName)
        {
            AuthServiceElement serviceElement = Services[serviceName];
            if (serviceElement == null) return null;

            AuthPolicyElement policyElement = serviceElement.Policies;
            if (policyElement == null) return null;

            return policyElement.Policy;
        }

        private static AuthConfig _authConfig = null;

        /// <summary>
        /// Return the configuration for the current thread.
        /// </summary>
        public static AuthConfig Current
        {
            get {
                if (_authConfig != null) return _authConfig;
                return _authConfig = (AuthConfig) ConfigurationManager.GetSection("AuthConfig");
            }
        }
    }

    /// <summary> </summary>
    public class AuthServiceCollection : ConfigurationElementCollection
    {
        /// <summary> </summary>
        public new AuthServiceElement this[string name]
        {
            get {
                if (IndexOf(name) < 0) return null;
                return (AuthServiceElement) BaseGet(name);
            }
        }

        /// <summary> </summary>
        public AuthServiceElement this[int index]
        {
            get { return (AuthServiceElement) BaseGet(index); }
        }

        /// <summary> </summary>
        public int IndexOf(string name)
        {
            name = name.ToLower();

            for (int index = 0; index < base.Count; index++) {
                if (this[index].Name.ToLower() == name) return index;
            }

            return -1;
        }

        /// <summary> </summary>
        public override ConfigurationElementCollectionType CollectionType
        {
            get { return ConfigurationElementCollectionType.BasicMap; }
        }

        /// <summary> </summary>
        protected override ConfigurationElement CreateNewElement()
        {
            return new AuthServiceElement();
        }

        /// <summary> </summary>
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((AuthServiceElement)element).Name;
        }

        /// <summary> </summary>
        protected override string ElementName
        {
            get { return "Service"; }
        }
    }

    /// <summary> </summary>
    public class AuthServiceElement : ConfigurationElement
    {
        /// <summary>
        /// This is the service name for which the policy is  defined.
        /// The use of this value varies depending on the application
        /// framework being used.
        /// 
        /// For ASP.NET using SOAP it is the class name  of  the  web
        /// service.  For MVC it is the class name of the  controller.
        /// For WCF it is the interface name of the service  contract.
        /// </summary>
        [ConfigurationProperty("Name", IsRequired = true, IsKey = true)]
        public string Name
        {
            get { return (string)this["Name"]; }
            set { this["Name"] = value; }
        }

        /// <summary>
        /// Each  service  element  can  have  zero  or  more  global
        /// policies to be applied to all actions.
        /// </summary>
        [ConfigurationProperty("Policies", IsRequired = false)]
        public AuthPolicyElement Policies
        {
            get { return (AuthPolicyElement) base["Policies"]; }
            set { this["Policies"] = value; }
        }

        /// <summary>
        /// Each service element has zero  or  more  action  elements.
        /// Depending  on  the  application  framework,  each  action 
        /// represents a method or action on which policy is  defined.
        /// </summary>
        [ConfigurationProperty("Actions", IsDefaultCollection = false)]
        public AuthActionCollection Actions
        {
            get { return (AuthActionCollection)base["Actions"]; }
            set { this["Actions"] = value; }
        }
    }

    /// <summary> </summary>
    public class AuthActionCollection : ConfigurationElementCollection
    {
        /// <summary> </summary>
        public new AuthActionElement this[string name]
        {
            get {
                if (IndexOf(name) < 0) return null;
                return (AuthActionElement)BaseGet(name);
            }
        }

        /// <summary> </summary>
        public AuthActionElement this[int index]
        {
            get { return (AuthActionElement)BaseGet(index); }
        }

        /// <summary> </summary>
        public int IndexOf(string name)
        {
            name = name.ToLower();

            for (int index = 0; index < base.Count; index++) {
                if (this[index].Name.ToLower() == name) return index;
            }

            return -1;
        }

        /// <summary> </summary>
        public override ConfigurationElementCollectionType CollectionType
        {
            get { return ConfigurationElementCollectionType.BasicMap; }
        }

        /// <summary> </summary>
        protected override ConfigurationElement CreateNewElement()
        {
            return new AuthActionElement();
        }

        /// <summary> </summary>
        protected override object GetElementKey(ConfigurationElement element)
        {
            return ((AuthActionElement)element).Name;
        }

        /// <summary> </summary>
        protected override string ElementName
        {
            get { return "Action"; }
        }
    }
    
    /// <summary>
    /// An AuthActionElement is the  root  element  for configuration
    /// policy on an action (e.g. web method, operation contract, etc)
    /// </summary>
    public class AuthActionElement : AuthPolicyElement
    {
        /// <summary>
        /// This is the action  name for which the policy is  defined.
        /// The use of this value varies depending on the application
        /// framework being used.
        /// 
        /// In all cases it is the name of a method that  is  invoked.
        /// For ASP.NET using SOAP it is the web method name, for MVC
        /// it the method name for the action.  For  WCF  it  is  the
        /// interface method  attributed  with  the  OperationContact .
        /// </summary>
        [ConfigurationProperty("Name", IsRequired = true, IsKey = true)]
        public string Name {
            get { return (string)this["Name"]; }
            set { this["Name"] = value; }
        }

        /// <summary>
        /// Skip over parts for the current  AuthActionElement.  Then
        /// read the inner nodes and parse the XML to  obtain  policy
        /// for this action.
        /// </summary>
        /// <param name="reader">XmlReader sent by the  configuration
        /// processing code.</param>
        /// <param name="serializeCollectionKey">required parameter
        /// in the base class.  This is unused.</param>
        protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
        {
            // read past action specific attributes  on  the  current
            // element,  then go get the policy element inside of  it

            reader.IsStartElement("Action");
            Name = reader.GetAttribute("Name");

            base.DeserializeElement(reader, serializeCollectionKey);
        }
    }

    /// <summary>
    /// An AuthPolicyElement is the  root  element  for configuration
    /// policy on an action (e.g. web method, operation contract, etc)
    /// </summary>
    public class AuthPolicyElement : ConfigurationElement
    {
        /// <summary>
        /// This is the actual authorization policy  associated  with 
        /// the action. The policy has a check method that is invoked
        /// just before the action.
        /// 
        /// The policy is configured using custom  configuration  XML
        /// inside of the action node.  That is,  there is no further
        /// definition  using  the  System.ServiceModel.Configuration
        /// classes.  It hooks in a custom parser by  overriding  the
        /// DeserializeElement method below..
        /// </summary>
        public AuthPolicy Policy {
            get; private set;
        }

        /// <summary>
        /// Get the policy elements for the service or action using a
        /// custom deserializer.
        /// </summary>
        /// <param name="reader">XmlReader sent by the  configuration
        /// processing code.</param>
        /// <param name="serializeCollectionKey">required parameter
        /// in the base class.  This is unused.</param>
        protected override void DeserializeElement(XmlReader reader, bool serializeCollectionKey)
        {
            List<AuthPolicy> policyList = new List<AuthPolicy>();

            // each iteration should being at a start element and the
            // internal call to create should consume its end element

            while (reader.Read() && (reader.NodeType != XmlNodeType.EndElement)) {
                if (reader.NodeType == XmlNodeType.Comment) continue;
                if (reader.NodeType == XmlNodeType.Whitespace) continue;
                policyList.Add(AuthPolicy.Create(reader));
            }

            // if there were no internal nodes,  then return the null
            // policy. if there is one return that, otherwise we wrap

            if (policyList.Count == 0)
                Policy = AuthPolicy.NullPolicy;
            else if (policyList.Count == 1)
                Policy = policyList[0];

            // multiple policies are anded together 

            else {
                Policy = new AuthAnd(policyList.ToArray());
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthTitles.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary> </summary>
    public static class AuthTitles
    {
        /// <summary> </summary>
        public const uint LiveSignup        = 0xFFFE07D2;
        /// <summary> </summary>
        public const uint Web               = 0xFFED0000;
        /// <summary> </summary>
        public const uint XenonDashboard    = 0xFFFE07D1;
        /// <summary> </summary>
        public const uint Zune              = 0xFFFD0000;

        /// <summary> </summary>
        public static readonly uint[] DashboardTitles = new uint[] { Web, XenonDashboard, LiveSignup };
        /// <summary> </summary>
        public static readonly uint[] WebTitles = new uint[] { Web, Zune };
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Claims\AuthClaimTypes.cs ===
using System.Collections.Specialized;
using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth.Claims
{
    // READ THIS!
    // Hey you. If you're adding a new claim type, make sure you also update the 
    // ValueTypes collection below to provide a default ClaimValueType for your 
    // new claim. Thanks.

    /// <summary> </summary>
    public static class AuthClaimTypes
    {
        /// <summary>the user's agegroup</summary>
        /// <seealso cref="Microsoft.XboxLive.Auth.Claims.AuthAgeGroups"/>
        public const string AgeGroup = "http://schemas.microsoft.com/xbox/2011/07/claims/user/agegroup";

        /// <summary>the client's external ip address and port</summary>
        public const string ClientIpPort = "http://schemas.microsoft.com/xbox/2011/07/claims/user/clientipport";

        /// <summary>the country id of the user</summary>
        public const string Country = "http://schemas.microsoft.com/xbox/2011/07/claims/user/country";

        /// <summary>a bearer token used for delegation back to Xbox LIVE</summary>
        public const string DelegationToken = "http://schemas.microsoft.com/xbox/2011/07/claims/delegationtoken";

        /// <summary>the unique identifier for the device</summary>
        public const string DeviceId      = "http://schemas.microsoft.com/xbox/2011/07/claims/device/id";

        /// <summary>the identifier for the device name</summary>
        public const string DeviceName    = "http://schemas.microsoft.com/xbox/2011/07/claims/device/name";

        /// <summary>the device type</summary>
        /// <seealso cref="Microsoft.XboxLive.Auth.Claims.AuthDeviceTypes"/>
        public const string DeviceType    = "http://schemas.microsoft.com/xbox/2011/07/claims/device/type";

        /// <summary>the unique session identifier</summary>
        public const string FlowToken = "http://schemas.microsoft.com/xbox/2011/07/claims/flowtoken";

        /// <summary>the gamertag of the user</summary>
        public const string Gamertag      = "http://schemas.microsoft.com/xbox/2011/07/claims/user/gamertag";

        /// <summary>the user's language</summary>
        public const string Language      = "http://schemas.microsoft.com/xbox/2011/07/claims/user/language";

        /// <summary>the parent xuid of the user</summary>
        public const string ParentXuid = "http://schemas.microsoft.com/xbox/2011/07/claims/parent/xuid";

        /// <summary>the unique identifier for the device</summary>
        public const string PartnerDeviceId = "http://schemas.microsoft.com/xbox/2011/07/claims/device/pdid";

        /// <summary>the partner parent xuid for the user (based on the relying party)</summary>
        public const string PartnerParentXuid = "http://schemas.microsoft.com/xbox/2011/07/claims/parent/pxuid";

        /// <summary>the partner xuid for the user (based on the relying party)</summary>
        public const string PartnerXuid = "http://schemas.microsoft.com/xbox/2011/07/claims/user/pxuid";

        /// <summary>the privileges granted to the user</summary>
        /// <seealso cref="Microsoft.XboxLive.Auth.Claims.AuthPrivileges"/>
        public const string Privileges = "http://schemas.microsoft.com/xbox/2011/07/claims/user/privileges";

        /// <summary>the passport user id (puid) of the user</summary>
        public const string Puid = "http://schemas.microsoft.com/xbox/2011/07/claims/user/puid";

        /// <summary>the user status</summary>
        /// <seealso cref="Microsoft.XboxLive.Auth.Claims.AuthStatus"/>
        public const string Status = "http://schemas.microsoft.com/xbox/2011/07/claims/user/status";

        /// <summary>the xbox live subscription tier of the user</summary>
        public const string Tier = "http://schemas.microsoft.com/xbox/2011/07/claims/user/tier";

        /// <summary>the title id</summary>
        /// <seealso cref="Microsoft.XboxLive.Auth.Claims.AuthTitles"/>
        public const string TitleId = "http://schemas.microsoft.com/xbox/2011/07/claims/title/id";

        /// <summary>the title version</summary>
        public const string TitleVersion = "http://schemas.microsoft.com/xbox/2011/07/claims/title/version";

        /// <summary>the xuid of the user</summary>
        public const string Xuid = "http://schemas.microsoft.com/xbox/2011/07/claims/user/xuid";

        // NEW CLAIMS MUST ALSO BE ADDED TO THE VALUETYPES COLLECTION

        /// <summary>the claim value types for all AuthClaimTypes</summary>
        public static NameValueCollection ValueTypes = new NameValueCollection()
        {
            { AgeGroup, ClaimValueTypes.String },
            { ClientIpPort, AuthClaimValueTypes.IpAddress },
            { Country, ClaimValueTypes.Integer },
            { DelegationToken, ClaimValueTypes.HexBinary },
            { DeviceId, ClaimValueTypes.HexBinary },
            { DeviceName, ClaimValueTypes.String },
            { DeviceType, ClaimValueTypes.String },
            { FlowToken, ClaimValueTypes.HexBinary },
            { Gamertag, ClaimValueTypes.String },
            { Language, ClaimValueTypes.Integer },
            { ParentXuid, ClaimValueTypes.Integer },
            { PartnerDeviceId, ClaimValueTypes.HexBinary },
            { PartnerParentXuid, ClaimValueTypes.HexBinary },
            { PartnerXuid, ClaimValueTypes.HexBinary },
            { Privileges, AuthClaimValueTypes.IntegerArray },
            { Puid, ClaimValueTypes.Integer },
            { Status, ClaimValueTypes.String },
            { Tier, ClaimValueTypes.String },
            { TitleId, ClaimValueTypes.Integer },
            { TitleVersion, ClaimValueTypes.Integer },
            { Xuid, ClaimValueTypes.Integer },
        };

        /// <summary>
        /// Create a Claim from an arbitrary C# object with the appropriate formatting.
        /// </summary>
        /// <param name="claimType">Type of claim to create, see AuthClaimTypes</param>
        /// <param name="claimValue">The claim's value, may be any basic C# type</param>
        /// <param name="claimValueType">Format of the claim value as a string, see AuthClaimValueTypes</param>
        /// <param name="issuer">Name of the issuer of this claim</param>
        /// <returns>New Claim with proper formatting</returns>
        public static Claim Create(string claimType, object claimValue, string claimValueType, string issuer)
        {
            // @@@ Implement proper type conversions based on claimValueType!
            string claimValueStr = claimValue != null
                ? claimValue.ToString()
                : null;
            return new Claim(claimType, claimValueStr, claimValueType, issuer);
        }

    }

    /// <summary> </summary>
    public static class AuthClaimValueTypes
    {
        /// <summary>a comma-separated list of integers</summary>
        public const string IntegerArray = "http://schemas.microsoft.com/xbox/types#IntegerArray";

        /// <summary>a "dotted 4" notation with optional port</summary>
        /// <example>1.2.3.4, 1.2.3.4:2000</example>
        public const string IpAddress = "http://schemas.microsoft.com/xbox/types#IpAddress";

        /// <summary>
        /// Microsoft.IdentityModel.Claims.ClaimValueTypes does not
        /// define this one.  Make this one claim value type easier
        /// </summary>
        public const string Decimal = "http://www.w3.org/2001/XMLSchema#decimal";
    }

    /// <summary> </summary>
    public static class AuthIdentityTypes
    {
        /// <summary>the machine / device identity</summary>
        public const string SG = "urn:xbox:identity:sg";

        /// <summary>the user identity</summary>
        public const string ActiveAuth = "urn:xbox:identity:aauth";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Extensions\IClaimsPrincipal.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth
{
    /// <summary> </summary>
    public static partial class AuthExtensions
    {
        /// <summary>
        /// For this principal, find all claims that match the specified predicate.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="predicate">The predicate used to match claims</param>
        /// <returns>A enumerable collection of matching claims</returns>
        public static IEnumerable<Claim> FindClaims(this IClaimsPrincipal principal, Predicate<Claim> predicate)
        {
            foreach (IClaimsIdentity identity in principal.Identities) {
                foreach (Claim claim in identity.FindClaims(predicate)) {
                    yield return claim;
                }
            }
        }

        /// <summary>
        /// For this principal, find all claims that match the specified claimType without
        /// to issuer.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <returns>A enumerable collection of matching claims</returns>
        public static IEnumerable<Claim> FindClaims(this IClaimsPrincipal principal, string claimType)
        {
            return principal.FindClaims(c => c.ClaimType.Equals(claimType));
        }

        /// <summary>
        /// For this principal, find all claims that match the specified claimType and claimIssuer.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <param name="claimIssuer">Only return claims matching the claimIssuer</param>
        /// <returns>A enumerable collection of matching claims</returns>
        public static IEnumerable<Claim> FindClaims(this IClaimsPrincipal principal, string claimType, string claimIssuer)
        {
            if (claimIssuer == null) return principal.FindClaims(claimType);
            return principal.FindClaims(c => c.ClaimType.Equals(claimType) && c.Issuer.Equals(claimIssuer));
        }



        /// <summary>
        /// For this principal, check if there exists a claim matching the predicate.
        ///  </summary>
        ///  <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="predicate">The predicate used to match claims</param>
        public static bool ClaimExists(this IClaimsPrincipal principal, Predicate<Claim> predicate)
        {
            foreach (var identity in principal.Identities) {
                if (identity.ClaimExists(predicate)) return true;
            }

            return false;
        }

        /// <summary>
        /// For this principal, check if the specified claim type exists without respect to issuer.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <returns>True if the claim is found, otherwise false</returns>
        public static bool ClaimExists(this IClaimsPrincipal principal, string claimType)
        {
            return principal.ClaimExists(c => c.ClaimType.Equals(claimType));
        }

        /// <summary>
        /// For this principal, check if the specified claim type from the specified issuer exists. 
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <param name="claimIssuer">Only return claims matching the claimIssuer</param>
        /// <returns>True if the claim is found, otherwise false</returns>
        public static bool ClaimExists(this IClaimsPrincipal principal, string claimType, string claimIssuer) 
        {
            if (claimIssuer == null) return principal.ClaimExists(claimType);
            return principal.ClaimExists(c => c.ClaimType.Equals(claimType) && c.Issuer.Equals(claimIssuer));
        }



        /// <summary>
        /// For this principal, try to get the value of the specified claim from the specified issuer.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <param name="claimIssuer">Only return claims matching the claimIssuer</param>
        /// <param name="claimValue">Receives the claim value</param>
        /// <returns>True if the claim is found, otherwise false</returns>
        public static bool TryGetClaimValue(this IClaimsPrincipal principal, string claimType, string claimIssuer, out string claimValue)
        {
            Claim claim = principal.FindClaims(claimType, claimIssuer).FirstOrDefault();
            claimValue = claim == null ? null : claim.Value;
            return claimValue != null;
        }

        /// <summary>
        /// For this principal,  try to get the value of the specified claim without respect to issuer.  
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <param name="claimValue">Receives the claim value</param>
        /// <returns>True if the claim is found, otherwise false</returns>
        public static bool TryGetClaimValue(this IClaimsPrincipal principal, string claimType, out string claimValue)
        {
            return principal.TryGetClaimValue(claimType, null, out claimValue);
        }

        /// <summary>
        /// For this principal, get the value of the specified claim from the specified
        /// issuer from the principal. Only the first value is returned.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <param name="claimIssuer">Only return claims matching the claimIssuer</param>
        /// <returns>The claim value</returns>
        /// <exception cref="Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        public static string GetClaimValue(this IClaimsPrincipal principal, string claimType, string claimIssuer)
        {
            string claimValue;
            if (principal.TryGetClaimValue(claimType, claimIssuer, out claimValue)) return claimValue;
            throw new ClaimNotFoundException(claimType);
        }

        /// <summary>
        /// For this principal, get the value of the specified claim from the principal
        /// without respect to the issuer. Only the first value is returned.
        /// </summary>
        /// <param name="principal">The IClaimsPrincipal instance that serves as "this"</param>
        /// <param name="claimType">Only return claims matching the claimType</param>
        /// <returns>The claim value</returns>
        /// <exception cref="Microsoft.XboxLive.Auth.ClaimNotFoundException">if the claim is not found</exception>
        public static string GetClaimValue(this IClaimsPrincipal principal, string claimType)
        {
            return principal.GetClaimValue(claimType, null);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Misc\AuthException.cs ===
﻿using System;
using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth
{
    /// <summary>
    /// The exception that is  thrown  when  a  authorization  policy
    /// error occurs.
    /// </summary>
    /// <remarks>
    /// The AuthException class allows applications to  differentiate
    /// exceptions thrown by  the  system and/or  authorization  code.
    /// </remarks>
    public class AuthException : Exception
    {
        /// <summary>Initializes a new instance of the  AuthException
        /// class.</summary>
        public AuthException() : base() 
        {
        }

        /// <summary>Initializes a new instance of the  AuthException
        /// class with a specified error message.</summary>
        /// <param name="message">The error message that explains the
        /// reason for the exception.</param>
        public AuthException(string message) : base(message)
        {
        }

        /// <summary>Initializes a new instance of the  AuthException
        /// class with a specified error message.</summary>
        /// <param name="format">The error message that explains the
        /// reason for the exception.</param>
        /// <param name="args">The arguments for the format string.</param>
        public AuthException(string format, params string[] args)
            : base(string.Format(format, args))
        {
        }

        /// <summary>Initializes a new instance of the  AuthException
        /// class with a specified error message and a  reference  to
        /// the inner exception that is the cause of  this  exception.
        /// </summary>
        /// <param name="message">The error message that explains the
        /// reason for the exception.</param>
        /// <param name="innerException">The exception  that  is  the
        /// cause of the current exception, or a null reference if no
        /// inner exception is specified.</param>
        public AuthException(string message, Exception innerException) : base(message, innerException)
        {
        }

        /// <summary>Initializes a new instance of the  AuthException
        /// class with the specified error formatted  message  and  a
        /// reference to the inner exception that is the cause of the
        /// exception.
        /// </summary>
        /// <param name="format">The error message that explains the
        /// reason for the exception.</param>
        /// <param name="innerException">The exception  that  is  the
        /// cause of the current exception, or a null reference if no
        /// inner exception is specified.</param>
        /// <param name="args">The arguments for the format string.</param>
        public AuthException(string format, Exception innerException, params string[] args)
            : base(string.Format(format, args), innerException)
        {
        }
    }

    /// <summary> </summary>
    public class ClaimNotFoundException : AuthException
    {
        /// <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
        /// <param name="claimType">The claimType that was not found</param>
        public ClaimNotFoundException(string claimType) : this(claimType, "Claim not found, " + claimType, null)
        {
        }

        /// <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
        /// <param name="claimType">The claimType that was not found</param>
        /// <param name="message">The message that describes the error.</param>
        public ClaimNotFoundException(string claimType, string message)
            : this(claimType, message, null)
        {
        }

        /// <summary>Initializes a new instance of the ClaimNotFoundException class</summary>
        /// <param name="claimType">The claimType that was not found</param>
        /// <param name="message">The message that describes the error.</param>
        /// <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        public ClaimNotFoundException(string claimType, string message, Exception innerException)
            : base(message, innerException)
        {
            ClaimType = claimType;
        }

        /// <summary>
        /// Gets the claimType  that  caused  the  current  exception
        /// </summary>
        /// <remarks>
        /// The type of the claimType is a string.  But  most  claims
        /// processing frameworks require this to be  a  well  formed
        /// uri.</remarks>
        /// <seealso cref="Microsoft.XboxLive.Auth.Claims.AuthClaimTypes" />
        /// <seealso cref="Microsoft.IdentityModel.Claims.ClaimTypes" />
        public string ClaimType
        {
            get; private set;
        }
    }
    
    /// <summary>
    /// The specific claim is invalid.  That claim value is not valid
    /// for the ClaimValueType.</summary>
    public class InvalidClaimException : AuthException
    {
        /// <summary>Initializes a new instance of the InvalidClaimException
        /// class.</summary>
        /// <param name="claim">The claim that is invalid</param>
        public InvalidClaimException(Claim claim)
            : this(claim, "Invalid claim, " + claim.ClaimType, null)
        {
        }

        /// <summary>Initializes a new instance of the InvalidClaimException
        /// class.</summary>
        /// <param name="claim">The claim that is invalid</param>
        /// <param name="message">The message that describes the error.</param>
        public InvalidClaimException(Claim claim, string message)
            : this(claim, message, null)
        {
        }

        /// <summary>Initializes a new instance of the InvalidClaimException
        /// class.</summary>
        /// <param name="claim">The claim that is invalid</param>
        /// <param name="message">The message that describes the error.</param>
        /// <param name="innerException">Gets the Exception instance that caused the current exception.</param>
        public InvalidClaimException(Claim claim, string message, Exception innerException)
            : base(message, innerException)
        {
            Claim = claim;
        }

        /// <summary>
        /// Gets the invalid claim that caused the exception.
        /// </summary>
        public Claim Claim
        {
            get;
            private set;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Misc\AuthTrace.cs ===
﻿using System;
using System.Diagnostics;


namespace Microsoft.XboxLive.Auth
{
    /// <summary>The AuthTrace class allows for tracing of authorization
    /// policy.
    /// </summary>
    public static class AuthTrace
    {
        private const string TRACE_PREFIX = "Microsoft.XboxLive.Auth";
        private static TraceSwitch _traceSwitch = new TraceSwitch(TRACE_PREFIX, string.Empty);
        
        /// <summary>
        /// Gets the TraceSwitch that controls  tracing.  Applications
        /// can set the Level to programmatically control trace output
        /// </summary>
        public static TraceSwitch TraceSwitch {
            get { return _traceSwitch; }
        }

        /// <summary>
        /// Writes trace information to the  trace  listeners  if  the
        /// TraceLevel is set to TraceLevel.Error or higher.
        /// </summary>
        /// <param name="format">A composite format string. See remarks
        /// for <see cref="System.String.Format(string, object[])"/></param>
        /// <param name="args">An object  array  that contains zero or
        /// more objects to format.</param>
        public static void Error(string format, params object[] args)
        {
            if (!_traceSwitch.TraceError) return;
            Trace.WriteLine(string.Format(format, args), TRACE_PREFIX);
        }

        /// <summary>
        /// Writes trace information to the  trace  listeners  if  the
        /// TraceLevel is set to TraceLevel.Warning or higher.
        /// </summary>
        /// <param name="format">A composite format string. See remarks
        /// for <see cref="System.String.Format(string, object[])"/></param>
        /// <param name="args">An object  array  that contains zero or
        /// more objects to format.</param>
        public static void Warning(string format, params object[] args)
        {
            if (!_traceSwitch.TraceWarning) return;
            Trace.WriteLine(string.Format(format, args), TRACE_PREFIX);
        }

        /// <summary>
        /// Writes trace information to the  trace  listeners  if  the
        /// TraceLevel is set to TraceLevel.Info or higher.
        /// </summary>
        /// <param name="format">A composite format string. See remarks
        /// for <see cref="System.String.Format(string, object[])"/></param>
        /// <param name="args">An object  array  that contains zero or
        /// more objects to format.</param>
        public static void Info(string format, params object[] args) {
            if (! _traceSwitch.TraceInfo) return;
            Trace.WriteLine(string.Format(format, args), TRACE_PREFIX);
        }

        /// <summary>
        /// Writes trace information to the  trace  listeners  if  the
        /// TraceLevel is set to TraceLevel.Verbose.
        /// </summary>
        /// <param name="format">A composite format string. See remarks
        /// for <see cref="System.String.Format(string, object[])"/></param>
        /// <param name="args">An object  array  that contains zero or
        /// more objects to format.</param>
        public static void Verbose(string format, params object[] args)
        {
            if (! _traceSwitch.TraceVerbose) return;
            Trace.WriteLine(string.Format(format, args), TRACE_PREFIX);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:23 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:26 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Misc\AuthHelper.cs ===
﻿using Microsoft.IdentityModel.Claims;
using Microsoft.XboxLive.Auth.Claims;

using System;
using System.Linq;
using System.Threading;

using Microsoft.XboxLive.Auth.Policy;
using Microsoft.XboxLive.Auth.Config;

namespace Microsoft.XboxLive.Auth
{
    /// <summary>The AuthHelper class provides a number of convenience
    /// methods for accessing an IClaimsPrincipal. All of the function
    /// herein can be had by iterating over the identities  and  claim
    /// sets in the IClaimsPrincipal.</summary>
    public class AuthHelper
    {
        /// <summary>
        /// The default issuer is the issuer used when no other issuer
        /// is specified.  This is true when using the  AuthHelper  as 
        /// well as attributes and web.config.
        /// </summary>
        public const string DEFAULT_ISSUER = "xsts.xboxlive.com";


        /// <summary>
        /// The system issuer is used when authoring local claims added
        /// to the current principal by an  internal  process - not  by
        /// the security token service.
        /// </summary>
        public const string SYSTEM_ISSUER = "System";

        /// <summary>
        /// Initialize an AuthHelper using  the  principal from the
        /// current thread of execution and with the default issuer.
        /// </summary>
        public AuthHelper()
            : this(null, null)
        {
        }

        /// <summary>
        /// Initialize an AuthHelper. All tests using the helper will
        /// be applied against the specified claims principal and the
        /// default issuer.
        /// </summary>
        /// <param name="claimsPrincipal">The principal to check when
        /// doing claims verification.</param>
        public AuthHelper(IClaimsPrincipal claimsPrincipal)
            : this(claimsPrincipal, null)
        {
        }

        /// <summary>
        /// Initialize an AuthHelper and set the default issuer using
        /// the supplied claimIssuer.</summary>
        /// <param name="issuer">The issuer to check for when doing
        /// claims verification.</param>
        public AuthHelper(string issuer)
            : this(null, issuer)
        {
        }

        /// <summary>
        /// Initialize an AuthHelper with the specified claims principal
        /// and claims issuer.</summary>
        /// <param name="claimsPrincipal">The principal to check when
        /// doing claims verification.</param>
        /// <param name="issuer">The issuer to check for when doing
        /// claims verification.</param>
        public AuthHelper(IClaimsPrincipal claimsPrincipal, string issuer)
        {
            if ((Principal = claimsPrincipal) == null)
            {
                AuthTrace.Info("No principal supplied, using Thread.CurrentPrincipal");
                Principal = Thread.CurrentPrincipal as IClaimsPrincipal;

                if (Principal == null)
                {
                    AuthTrace.Info("Thread.CurrentPrincipal not found, using AnonymousPrincipal");
                    Principal = ClaimsPrincipal.AnonymousPrincipal;
                }
            }

            if (! string.IsNullOrEmpty(issuer))
                Issuer = issuer;
            else {
                if (AuthConfig.Current != null) Issuer = AuthConfig.Current.Issuer;
                if (string.IsNullOrEmpty(Issuer)) Issuer = DEFAULT_ISSUER;
            }
        }

        /// <summary>
        /// The principal to use when finding and verifying claims.
        /// </summary>
        /// <remarks>
        /// If not supplied at construction, the principal is taken off
        /// the current thread of execution.   If there is no principal
        /// on the current thread, vthen an anonymous principal is used
        /// as a default.
        /// </remarks>
        public IClaimsPrincipal Principal
        {
            get;
            set;
        }

        /// <summary>
        /// The issuer to use when checking for claims.
        /// </summary>
        /// <remarks>
        /// If not supplied at construction,  or in configuration the
        /// issuer defaults to "xsts.xboxlive.com".
        /// </remarks>
        public string Issuer
        {
            get;
            set;
        }

        /// <summary>Verify the existence of the specified claimType</summary>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <returns>True if the claim exists, otherwise false.</returns>
        public bool VerifyExists(string claimType)
        {
            return VerifyExists(Principal, Issuer, claimType);
        }

        /// <summary>Verify that the value of the specified claim is
        /// equal to one of the specified values.</summary>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <param name="values">The values against which the claim value
        /// is compared.</param>
        /// <returns>True if the claim exists and is equal to one of the 
        /// specified values</returns>
        /// <remarks>The specified values are converted to the ValueType of
        /// the claim before comparing with the claim Value.
        /// </remarks>
        public bool VerifyEquals(string claimType, params object[] values)
        {
            return VerifyClaim(Principal, Issuer, claimType, AuthComparison.Equals, values);
        }

        /// <summary>Verify that the value of the specified claim is
        /// greater than the specified value.</summary>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <param name="value">The value against which the claim value
        /// is compared.</param>
        /// <returns>True if the claim exists and is greater than the
        /// specified value</returns>
        /// <remarks>The specified claimValue parameter is converted to the
        /// ValueType of the claim before comparing with the claim Value
        /// </remarks>
        public bool VerifyGreaterThan(string claimType, object value)
        {
            return VerifyClaim(Principal, Issuer, claimType, AuthComparison.GreaterThan, value);
        }

        /// <summary>Verify that the value of the specified claim is
        /// less than the specified value.</summary>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <param name="value">The value against which the claim value
        /// is compared.</param>
        /// <returns>True if the claim exists and is less than the
        /// specified value</returns>
        /// <remarks>The specified claimValue parameter is converted to the
        /// ValueType of the claim before comparing with the claim Value
        /// </remarks>
        public bool VerifyLessThan(string claimType, object value)
        {
            return VerifyClaim(Principal, Issuer, claimType, AuthComparison.LessThan, value);
        }

        /// <summary>Verify that the value of the specified claim type contains
        /// all of the specified values. The value type of the claim type must
        /// be an array type.</summary>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <param name="values">The values against which the claim value
        /// is compared.</param>
        /// <returns>True if the claim exists and all of the specified values
        /// are contained by the claim value</returns>
        /// <remarks>The specified values are converted to strings and
        /// compared against the string values in the claim value.
        /// </remarks>
        public bool VerifyContains(string claimType, params object[] values)
        {
            Claim claim = Principal.FindClaims(claimType, Issuer).FirstOrDefault();
            if (claim == null) throw new ClaimNotFoundException(claimType);

            IAuthArray authValue = AuthValue.Create(claim.Value, claim.ValueType) as IAuthArray;
            if (authValue == null) throw new InvalidOperationException();

            for (int i = 0; i < values.Length; i++) {
                if (! authValue.Contains(values[i])) return false;
            }

            return true;
        }
        
        /// <summary>
        /// Find a claim with the specified claimType from the specified
        /// issuer.
        /// </summary>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <returns>A claim, or null, if no claim is found.</returns>
        public Claim FindClaim(string claimType)
        {
            return Principal.FindClaims(claimType, Issuer).FirstOrDefault();
        }

        internal static bool VerifyExists(IClaimsPrincipal principal, string issuer, string claimType)
        {
            bool result = principal.FindClaims(claimType, issuer).FirstOrDefault() != null;
            AuthTrace.Info("<Exists claimType=\"{0}\" claimIssuer=\"{1}\">{2}</Exists>", claimType, issuer, result);
            return result;
        }

        /// <summary>
        /// Find a claim with the specified claimType, and compare its value
        /// against the supplied array of valid values.  Return true / false
        /// as a function of the supplied predicate.
        /// </summary>
        /// <param name="principal">Look for claims for this principal.</param>
        /// <param name="issuer">Look for claims from this issuer.</param>
        /// <param name="claimType">Find claims with this claimType.</param>
        /// <param name="comparison">The operation used to verify the claim.</param>
        /// <param name="validValues">The list of valid values against which to compare.</param>
        /// <returns>True if the claim exists and values passes the comparision test</returns>
        internal static bool VerifyClaim(IClaimsPrincipal principal, string issuer, string claimType, AuthComparison comparison, params object[] validValues)
        {
            Claim claim = principal.FindClaims(claimType, issuer).FirstOrDefault();
            if (claim == null) throw new ClaimNotFoundException(claimType);

            AuthValue claimValue;

            // wrap the claim value for comparision. this throws if invalid

            try {
                claimValue = AuthValue.Create(claim.Value, claim.ValueType);
            }
            catch (Exception e) {
                throw new InvalidClaimException(claim, e.Message, e);
            }

            // compare the claim value against the array of valid values

            bool result = VerifyValue(claimValue, claim.ValueType, comparison, validValues);
            AuthTrace.Info("<Compare ClaimType=\"{0}\" ClaimIssuer=\"{1}\">{2}</Compare>", claimType, issuer, result);

            return result;
        }


        internal static bool VerifyValue(AuthValue claimValue, string claimValueType, AuthComparison comparison, params object[] values)
        {
            if ((values != null) && (values.Length > 0)) {

                Predicate<object> predicate = null;

                // if the comparision is equals then just  do  equals
                
                if (comparison == AuthComparison.Equals) 
                    predicate = v => claimValue.Equals(AuthValue.Create(v, claimValueType));

                // if the comparision is something else then we  need
                // to make sure  that  the  operands  are  comparable

                else {
                    if (! (claimValue is IComparable))
                        throw new InvalidOperationException(comparison.ToString() + " operation can not be performed on " + claimValueType);
                    else if (comparison == AuthComparison.GreaterThan)
                        predicate = v => ((IComparable) claimValue).CompareTo(AuthValue.Create(v, claimValueType)) > 0;
                    else if (comparison == AuthComparison.LessThan)
                        predicate = v => ((IComparable) claimValue).CompareTo(AuthValue.Create(v, claimValueType)) < 0;

                        // this is defensive.  it should never happen

                    else {
                        throw new InvalidOperationException("Operation can not be performed on " + claimValueType);
                    }
                }

                // iterate over each of the values provided (usually
                // there is just one), and perform the required test

                foreach (object value in values) {
                    if (predicate(value)) return true;
                }
            }

            return false;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:45 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:39 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthActionFilter.cs ===
﻿using System;
using System.Net;
using System.Reflection;
using System.Web.Mvc;
using System.Web.Mvc.Async;

using Microsoft.XboxLive.Auth.Policy;

namespace Microsoft.XboxLive.Auth
{
    /// <summary>
    /// Authentication filter for MVC Actions.
    /// </summary>
    public class AuthActionFilter : IActionFilter
    {
        /// <summary>
        /// Runs after the Action has executed.
        /// </summary>
        /// <param name="filterContext">Context of the action</param>
        public void OnActionExecuted(ActionExecutedContext filterContext)
        {
        }

        /// <summary>
        /// Runs before the Action has executed.
        /// </summary>
        /// <param name="filterContext">Context of the action</param>
        public void OnActionExecuting(ActionExecutingContext filterContext)
        {
            var actionDescriptor = filterContext.ActionDescriptor;

            MethodInfo methodInfo;

            ReflectedActionDescriptor rad = actionDescriptor as ReflectedActionDescriptor;
            if (rad != null)
            {
                methodInfo = rad.MethodInfo;
            }
            else
            {
                ReflectedAsyncActionDescriptor raad = actionDescriptor as ReflectedAsyncActionDescriptor;
                if (raad != null)
                {
                    methodInfo = raad.AsyncMethodInfo;
                }
                else
                {
                    throw new NotSupportedException(string.Format("Unsupported ActionDescriptor type: {0}", actionDescriptor.GetType().Name));
                }
            }

            // controller name and action name are keys for finding policies

            string controllerName = actionDescriptor.ControllerDescriptor.ControllerName;
            string actionName = actionDescriptor.ActionName;

            // see if we have an auth policy,  if there is none it will  add
            // one.  this will add the null policy if no policy  is  defined

            AuthPolicy authPolicy = AuthPolicy.Add(controllerName, actionName, methodInfo);
            if ((authPolicy == null) || (authPolicy == AuthPolicy.NullPolicy)) return;

            // we have a policy that we need to enforce.  call the check and
            // throw a framework appropriate exception if it does  not  pass

            bool result;

            try
            {
                result = authPolicy.Check(filterContext.ActionParameters);
                AuthTrace.Info("<Action Name=\"{0}.{1}\">{2}</Action>", controllerName, actionName, result);
            }
            catch (AuthException e)
            {
                AuthTrace.Info("<Exception Name=\"{0}.{1}\">{2}</Exception>", controllerName, actionName, e);
                result = false;
            }

            if (!result) 
            {
                filterContext.Result = new HttpStatusCodeResult((int)HttpStatusCode.Forbidden);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthComparison.cs ===
﻿namespace Microsoft.XboxLive.Auth.Claims
{
    /// <summary></summary>
    public enum AuthComparison
    {
        /// <summary></summary>
        Equals,
        /// <summary></summary>
        GreaterThan,
        /// <summary></summary>
        LessThan
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthInvoker.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Reflection;
using System.ServiceModel;
using System.ServiceModel.Dispatcher;
using System.ServiceModel.Security;
using System.ServiceModel.Web;
using System.Threading;

using Microsoft.IdentityModel.Claims;


namespace Microsoft.XboxLive.Auth.Policy
{
    /// <summary>
    /// The AuthInvoker class is the main interception point for  WCF
    /// policy checks.  The AuthBehavior reflects over  AuthAttribute
    /// attributes and policies defined in the web.config and inserts
    /// the AuthInvoker into the OperationInvoker chain as  necessary.
    /// </summary>
    public class AuthInvoker : IOperationInvoker
    {
        private IOperationInvoker _innerInvoker;
        private string            _serviceName;
        private MethodInfo        _methodInfo;
        private AuthPolicy        _authPolicy;

        /// <summary> </summary>
        public AuthInvoker(
            IOperationInvoker innerInvoker,
            string            serviceName,
            MethodInfo        methodInfo,
            AuthPolicy        authPolicy
        ) {
            _innerInvoker = innerInvoker;
            _serviceName  = serviceName;
            _methodInfo   = methodInfo;
            _authPolicy   = authPolicy;
        }


        // IOperationInvoker Implementation

        object[] IOperationInvoker.AllocateInputs()
        {
            return _innerInvoker.AllocateInputs();
        }

        object IOperationInvoker.Invoke(object instance, object[] inputs, out object[] outputs)
        {
            if (! CheckAuthorizationPolicy(inputs)) {
                outputs = null;
                return null;
            }

            // if we got here then we passed all the checks
            return _innerInvoker.Invoke(instance, inputs, out outputs);
        }

        IAsyncResult IOperationInvoker.InvokeBegin(object instance, object[] inputs, AsyncCallback callback, object state)
        {
            if (! CheckAuthorizationPolicy(inputs)) {
                return new AuthErrorResult(state);
            }

            return _innerInvoker.InvokeBegin(instance, inputs, callback, state);
        }

        object IOperationInvoker.InvokeEnd(object instance, out object[] outputs, IAsyncResult result)
        {
            if (result is AuthErrorResult) {
                outputs = null;
                return null;
            }

            return _innerInvoker.InvokeEnd(instance, out outputs, result);
        }

        bool IOperationInvoker.IsSynchronous
        {
            get { return _innerInvoker.IsSynchronous; }
        }

        private bool CheckAuthorizationPolicy(object[] inputs) 
        {
            // there is an authorization policy. convert the inputs
            // into a dictionary using methodInfo  parameter  names

            if (_authPolicy == null) return true;

            Dictionary<string, object> parameters = new Dictionary<string,object>();
            ParameterInfo[] parameterInfo = _methodInfo.GetParameters();

            for (int i = 0, j = 0; i < parameterInfo.Length; i++) {
                if (parameterInfo[i].IsOut) continue;
                parameters.Add(parameterInfo[i].Name, inputs[j++]);
            }

            bool result;

            try {
                result = _authPolicy.Check(parameters);
                AuthTrace.Info("<Action Name=\"{0}.{1}\">{2}</Action>", _serviceName, _methodInfo.Name, result);
            }

            catch (AuthException e) {
                AuthTrace.Info("<Exception Name=\"{0}.{1}\">{2}</Exception>", _serviceName, _methodInfo.Name, e);
                result = false;
            }

            if (! result)
            {
                WebOperationContext webOperationContext = WebOperationContext.Current;

                if (webOperationContext != null)
                {
                    webOperationContext.OutgoingResponse.StatusCode = HttpStatusCode.Forbidden;
                    webOperationContext.OutgoingResponse.StatusDescription = string.Format("Error accessing action \"{0}.{1}\"", _serviceName, _methodInfo.Name);
                }
            }

            return result;
        }

        internal class AuthErrorResult : IAsyncResult 
        {
            private object _state;
            private WaitHandle _waitHandle = new ManualResetEvent(true);

            internal AuthErrorResult(object state) {
                _state = state;
            }

            public object AsyncState { get { return _state; } }
            public WaitHandle AsyncWaitHandle { get { return _waitHandle; } }
            public bool CompletedSynchronously { get { return true; } }
            public bool IsCompleted { get { return true; } }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthBehavior.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Reflection;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.ServiceModel.Configuration;
using System.ServiceModel.Dispatcher;
using System.ServiceModel.Description;

namespace Microsoft.XboxLive.Auth.Policy
{
    /// <summary> </summary>
    public class AuthBehaviorElement : BehaviorExtensionElement
    {
        /// <summary> </summary>
        public override Type BehaviorType
        {
            get { return typeof(AuthBehavior); }
        }

        /// <summary> </summary>
        protected override object CreateBehavior()
        {
            return new AuthBehavior();
        }
    }


    /// <summary> </summary>
    public class AuthBehavior : Attribute, IOperationBehavior, IServiceBehavior
    {
        private string     _serviceName;
        private MethodInfo _methodInfo;
        private AuthPolicy _authPolicy;

        // this is called when constructing the service behavior
        /// <summary> </summary>
        public AuthBehavior() { }

        // this is called when constructing operation  behaviors
        /// <summary> </summary>
        public AuthBehavior(string serviceName, MethodInfo methodInfo, AuthPolicy authPolicy)
        {
            _serviceName = serviceName;
            _methodInfo  = methodInfo;
            _authPolicy  = authPolicy;
        }


        // IOperationBehavior Implementation

        void IOperationBehavior.AddBindingParameters(OperationDescription operationDescription, BindingParameterCollection bindingParameters)
        {
        }

        void IOperationBehavior.ApplyClientBehavior(OperationDescription operationDescription, ClientOperation clientOperation)
        {
        }

        void IOperationBehavior.ApplyDispatchBehavior(OperationDescription operationDescription, DispatchOperation dispatchOperation)
        {
            if (_authPolicy != null) {
                dispatchOperation.Invoker = new AuthInvoker(dispatchOperation.Invoker, _serviceName, _methodInfo, _authPolicy);
            }
        }

        void IOperationBehavior.Validate(OperationDescription operationDescription)
        {
        }


        // IServiceBehavior Implementation

        void IServiceBehavior.AddBindingParameters(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase, Collection<ServiceEndpoint> endpoints, BindingParameterCollection bindingParameters)
        {
        }

        void IServiceBehavior.ApplyDispatchBehavior(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
            foreach (ServiceEndpoint endpoint in serviceDescription.Endpoints)
            {
                string serviceName = endpoint.Contract.ContractType.Name;

                foreach (OperationDescription operation in endpoint.Contract.Operations)
                {
                    MethodInfo methodInfo = operation.SyncMethod;
                    AuthPolicy authPolicy = AuthPolicy.Add(serviceName, methodInfo.Name, methodInfo);
                    
                    // if there is a configured action, then it overrides any
                    // code attributes - which means we can  skip  that  part

                    if ((authPolicy != null) && (authPolicy != AuthPolicy.NullPolicy)) {
                        if (! operation.Behaviors.Contains(typeof(AuthBehavior))) {
                            operation.Behaviors.Add(new AuthBehavior(serviceName, methodInfo, authPolicy));
                        }

                        continue;
                    }
                }
            }
        }

        void IServiceBehavior.Validate(ServiceDescription serviceDescription, ServiceHostBase serviceHostBase)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthPolicyCollection.cs ===
﻿using System.Collections.Generic;
using System.Threading;

namespace Microsoft.XboxLive.Auth.Policy
{
    internal class AuthPolicyCollection
    {
        internal static AuthPolicyCollection Policies = new AuthPolicyCollection();

        private Dictionary<string, AuthPolicy> _policies;
        private ReaderWriterLockSlim _rwLock = new ReaderWriterLockSlim();

        private AuthPolicyCollection() {
            _rwLock = new ReaderWriterLockSlim();
            _policies = new Dictionary<string, AuthPolicy>();
        }

        internal AuthPolicy this[string serviceName, string methodName]
        {
            get {
                string key = GetKey(serviceName, methodName);
                _rwLock.EnterReadLock();

                try {
                    return _policies.ContainsKey(key) ? _policies[key] : null;
                }
                finally {
                    _rwLock.ExitReadLock();
                }
            }

            set {
                string key = GetKey(serviceName, methodName);
                _rwLock.EnterWriteLock();

                try {
                    _policies[key] = value;
                }
                finally {
                    _rwLock.ExitWriteLock();
                }
            }
        }

        private string GetKey(string serviceName, string methodName) {
            return serviceName + "." + methodName;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthPolicy.cs ===
﻿using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Xml;

using Microsoft.IdentityModel.Claims;
using Microsoft.XboxLive.Auth.Config;
using Microsoft.XboxLive.Auth.Claims;

namespace Microsoft.XboxLive.Auth.Policy
{
    /// <summary>
    /// AuthPolicy is the root class used to check policy for a given
    /// service and action.
    /// </summary>
    public class AuthPolicy
    {
        internal bool Check(MethodInfo methodInfo, object[] inputs) {
            
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            ParameterInfo[] parameterInfo = methodInfo.GetParameters();

            for (int i = 0, j = 0; i < parameterInfo.Length; i++) {
                if (parameterInfo[i].IsOut) continue;
                parameters.Add(parameterInfo[i].Name, inputs[j++]);
            }

            return Check(parameters);
        }

        internal bool Check(IDictionary<string, object> parameters) {
            return Check(new AuthHelper().Principal, parameters);
        }

        internal virtual bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters) {
            return true;
        }

        internal virtual void Bind(MethodInfo methodInfo)
        {
        }
        
        internal static readonly AuthPolicy NullPolicy = new AuthPolicy();

        internal static AuthPolicy Create(MethodInfo methodInfo)
        {
            // reflect over each of the authorization attributes and
            // build up a list of policies for the  specified method

            List<AuthPolicy> policies = new List<AuthPolicy>();

            // first look for method policies  (with no data binding)

            foreach (AuthClassMethodAttribute attribute in methodInfo.GetCustomAttributes(typeof(AuthClassMethodAttribute), true)) {
                policies.Add(attribute.GetPolicy());
            }

            // add policies applied to individual  method  parameters

            foreach (ParameterInfo parameterInfo in methodInfo.GetParameters()) {
                foreach (AuthParameterAttribute attribute in parameterInfo.GetCustomAttributes(typeof(AuthParameterAttribute), true)) {
                    policies.Add(attribute.GetPolicy(parameterInfo));
                }
            }

            // take policy list and return a single  grouped  policy.

            if (policies.Count == 0) return AuthPolicy.NullPolicy;
            if (policies.Count == 1) return policies.First();
            return new AuthAnd(policies.ToArray());
        }

        internal static AuthPolicy Create(Type declaringType)
        {
            // reflect over each of the authorization attributes  and
            // build up a list of policies  for  the  specified  type

            List<AuthPolicy> policies = new List<AuthPolicy>();

            // look at class attributes.  types don't have parameters.

            foreach (AuthClassMethodAttribute attribute in declaringType.GetCustomAttributes(typeof(AuthClassMethodAttribute), true)) {
                policies.Add(attribute.GetPolicy());
            }

            // take policy list and return a single  grouped  policy.

            if (policies.Count == 0) return AuthPolicy.NullPolicy;
            if (policies.Count == 1) return policies.First();
            return new AuthAnd(policies.ToArray());
        }


        internal static AuthPolicy Create(string s)
        {
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.ConformanceLevel = ConformanceLevel.Fragment;
            settings.IgnoreComments = settings.IgnoreWhitespace = true;

            using (StringReader stringReader = new StringReader(s)) {
                using (XmlReader xmlReader = XmlReader.Create(stringReader, settings)) {
                    return AuthPolicy.Create(xmlReader);
                }
            }
        }

        internal static AuthPolicy Create(XmlReader reader)
        {
            if (reader.IsStartElement()) {
                switch (reader.Name) {
                    case "And"         : return new AuthAnd(reader);
                    case "Or"          : return new AuthOr(reader);
                    case "Not"         : return new AuthNot(reader);
                    case "Exists"      : return new AuthExists(reader);
                    case "Equals"      : return new AuthCompare(reader, AuthComparison.Equals);
                    case "GreaterThan" : return new AuthCompare(reader, AuthComparison.GreaterThan);
                    case "LessThan"    : return new AuthCompare(reader, AuthComparison.LessThan);
                    case "Contains"    : return new AuthContains(reader);
                }
            }

            throw new AuthException(string.Format("Unexpected element '{0}'.", reader.Name));
        }

        internal static AuthPolicy Find(string serviceName, string methodName) {
            return AuthPolicyCollection.Policies[serviceName, methodName]; 
        }
        
        /// <summary>
        /// Add policy for the  specified service and action. Look in
        /// the configuration for defined  policy,  and if  there  is
        /// none,  then through reflection on the supplied methodInfo
        /// </summary>
        /// <param name="serviceName">The name of the service</param>
        /// <param name="actionName">The name of the action</param>
        /// <param name="methodInfo">The methodInfo for the action</param>
        /// <returns>The configured policy for the service and action.
        /// If no policy is defined then return AuthPolicy.NullPolicy
        /// </returns>
        internal static AuthPolicy Add(string serviceName, string actionName, MethodInfo methodInfo)
        {
            // first see if there is already a policy  in  the  cache
            
            AuthPolicy actionPolicy = AuthPolicy.Find(serviceName, actionName);
            if (actionPolicy != null) return actionPolicy;

            // if not, then we are going to build a new policy. first
            // find policy that is defined across the entire  service

            AuthConfig authConfig = AuthConfig.Current;
            AuthPolicy servicePolicy = AuthPolicy.Find(serviceName, string.Empty);

            // if there is no service policy in the  cache,  look  in
            // the config, and if not there then on the declaringType

            if (servicePolicy == null) {
                if (authConfig != null) servicePolicy = authConfig.Find(serviceName);
                if (servicePolicy == null) servicePolicy = AuthPolicy.Create(methodInfo.DeclaringType);
                AuthPolicyCollection.Policies[serviceName, string.Empty] = servicePolicy;
            }

            // now we look for the action policy in the config. if we
            // find one,  then we do data binding with the methodInfo

            if (authConfig != null) {
                actionPolicy = authConfig.Find(serviceName, actionName);
                if (actionPolicy != null) actionPolicy.Bind(methodInfo);
            }

            // if we don't have an action policy, then create one with
            // the methodInfo (this will always return a policy object).

            if (actionPolicy == null) {
                actionPolicy = AuthPolicy.Create(methodInfo);
            }

            // now combine service and action policies  as  necessary

            if (servicePolicy != AuthPolicy.NullPolicy) {
                if (actionPolicy == AuthPolicy.NullPolicy)
                    actionPolicy = servicePolicy;
                else {
                    actionPolicy = new AuthAnd(servicePolicy, actionPolicy);
                }
            }

            AuthPolicyCollection.Policies[serviceName, actionName] = actionPolicy;
            return actionPolicy;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="parameters"></param>
        /// <param name="parameterInfo"></param>
        /// <returns></returns>
        protected static object GetParameter(IDictionary<string, object> parameters, ParameterInfo parameterInfo)
        {
            object o = parameters[parameterInfo.Name];
            if (o == null) return null;
            Type t = parameterInfo.ParameterType;

            if (t.IsGenericType && t.GetGenericTypeDefinition().Equals(typeof(Nullable<>))) {
                t = Nullable.GetUnderlyingType(t);
            }

            return Convert.ChangeType(o, t);
        }

        internal static string GetIssuer(XmlReader reader)
        {
            string issuer = reader.GetAttribute("Issuer");
            
            // if there is no specific issuer for this  policy,  then
            // set it to null so we get the default issuer  later  on

            if (string.IsNullOrEmpty(issuer)) issuer = null;
            return issuer;
        }
    }

    internal class AuthTrue : AuthPolicy {
        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters) {
            return true;
        }
    }

    internal class AuthFalse : AuthPolicy {
        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters) {
            return false;
        }
    }

    internal abstract class AuthGroup : AuthPolicy
    {
        protected AuthPolicy[] _policies;

        protected AuthGroup(AuthPolicy[] policies, int minOccurs, int maxOccurs) {
            _policies = policies;
            CheckMinMax(minOccurs, maxOccurs);
        }

        protected AuthGroup(XmlReader reader, int minOccurs, int maxOccurs)
        {
            if (! reader.IsStartElement()) {
                throw new AuthException(string.Format("Unexpected element '{0}'.", reader.Name));
            }

            string name = reader.Name;
            List<AuthPolicy> policyList = new List<AuthPolicy>();

            while (reader.Read()) {
                if (reader.NodeType == XmlNodeType.Comment) continue;
                if (reader.NodeType == XmlNodeType.Whitespace) continue;
                if (reader.NodeType == XmlNodeType.EndElement) break;
                policyList.Add(AuthPolicy.Create(reader));
            }

            _policies = policyList.ToArray();
            CheckMinMax(minOccurs, maxOccurs);
        }

        private void CheckMinMax(int minOccurs, int maxOccurs) {
            if (_policies.Length < minOccurs) 
                throw new AuthException(string.Format("Expected at least {0} child elements", minOccurs));
            else if (_policies.Length > maxOccurs) {
                throw new AuthException(string.Format("Expected no more than {0} child elements", maxOccurs));
            }
        } 

        internal override void Bind(MethodInfo methodInfo) {
            foreach (AuthPolicy policy in _policies) {
                policy.Bind(methodInfo);
            }
        }
    }

    internal class AuthOr : AuthGroup
    {
        public AuthOr(params AuthPolicy[] policies) : base(policies, 2, int.MaxValue) { }
        public AuthOr(XmlReader reader) : base(reader, 2, int.MaxValue) { }

        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters)
        {
            bool result = false;

            // it's an or.  bail out the first time get a true value
            foreach (AuthPolicy policy in _policies) {
                if (policy.Check(principal, parameters)) {
                    result = true;
                    break;
                }
            }

            AuthTrace.Info("AuthOr = {0}", result);
            return result;
        }
    }

    
    internal class AuthAnd : AuthGroup
    {
        public AuthAnd(params AuthPolicy[] policies) : base(policies, 2, int.MaxValue) { }
        public AuthAnd(XmlReader reader) : base(reader, 2, int.MaxValue) { }

        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters)
        {
            bool result = true;

            // it's an and.  bail out the first time get a false value
            foreach (AuthPolicy policy in _policies) {
                if (! policy.Check(principal, parameters)) {
                    result = false;
                    break;
                }
            }

            AuthTrace.Info("AuthAnd = {0}", result);
            return result;
        }
    }

    internal class AuthNot : AuthGroup
    {
        public AuthNot(AuthPolicy policy) : base(new AuthPolicy[] { policy }, 1, 1) { }
        public AuthNot(XmlReader reader) : base(reader, 1, 1) { }

        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters) {
            // for a not group there is exactly one policy
            bool result = ! _policies.First().Check(principal, parameters);
            AuthTrace.Info("AuthNot = {0}", result);
            return result;
        }
    }

    internal class AuthCompare : AuthPolicy
    {
        private string         _claimType;
        private string         _issuer;
        private object         _value;
        private AuthComparison _comparison;

        private string         _source;
        private ParameterInfo  _parameterInfo;

        private AuthCompare(string claimType, string issuer, AuthComparison comparison)
        {
            if (claimType == null) {
                throw new AuthException("Missing 'ClaimType' attribute");
            }

            _claimType  = claimType;
            _issuer     = issuer;
            _comparison = comparison;
        }

        public AuthCompare(string claimType, string issuer, object value, AuthComparison comparison)
            : this(claimType, issuer, comparison)
        {
            _value = value;
        }

        public AuthCompare(string claimType, string issuer, ParameterInfo parameterInfo, AuthComparison comparison)
            : this(claimType, issuer, comparison)
        {
            _parameterInfo = parameterInfo;
        }

        public AuthCompare(XmlReader reader, AuthComparison comparison) 
            : this(reader.GetAttribute("ClaimType"), GetIssuer(reader), comparison)
        {
            _value  = reader.GetAttribute("Value");
            _source = reader.GetAttribute("Source");

            if ((_value != null) ^ (_source == null)) {
                throw new AuthException("One of Value or Source attributes must be present");
            }
        }

        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters)
        {
            // only one of _value or _parameterInfo  are  non-null
            // initialize to claimValue, but then use source if it
            // is there (and if there is a value  for  the  source)

            object value = _value ?? GetParameter(parameters, _parameterInfo);
            return AuthHelper.VerifyClaim(principal, _issuer, _claimType, _comparison, value);

        }

        internal override void Bind(MethodInfo methodInfo)
        {
            // if there is a value, then we have data and don't need
            // to bind. similarly, no source means nothing  to  bind

            if ((_value != null) || (_source == null)) return;
            
            foreach (ParameterInfo parameterInfo in methodInfo.GetParameters()) {
                if (parameterInfo.Name == _source) {
                    _parameterInfo = parameterInfo;
                    return;
                }
            }

            throw new AuthException("No source parameter '{0}' for action '{1}'", _source, methodInfo.Name);
        }
    }

    internal class AuthExists : AuthPolicy
    {
        private string _claimType;
        private string _issuer;

        public AuthExists(string claimType, string issuer) {
            _claimType = claimType;
            _issuer    = issuer;
        }

        public AuthExists(XmlReader reader)
            : this(reader.GetAttribute("ClaimType"), GetIssuer(reader))
        {
        }

        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters) {
            return AuthHelper.VerifyExists(principal, _issuer, _claimType);
        }
    }

    
    internal class AuthContains : AuthPolicy
    {
        private string _claimType;
        private object _value;
        private string _issuer;
        private string _source;

        private ParameterInfo _parameterInfo = null;

        public AuthContains(string claimType, string issuer, object value, string source)
        {
            _claimType = claimType;
            _value     = value;
            _issuer    = issuer;
            _source    = source;

            if (_claimType == null)
                throw new AuthException("Missing 'ClaimType' attribute");
            else if ((_value != null) ^ (_source == null))
                throw new AuthException("One of Value or Source attributes must be present");
            else if (_source != null) {
                // TODO - parse binding to allow for parameters and resources
            }
        }

        public AuthContains(XmlReader reader) : this(
            reader.GetAttribute("ClaimType"), GetIssuer(reader), reader.GetAttribute("Value"), reader.GetAttribute("Source")
        ) {
        }

        internal override void Bind(MethodInfo methodInfo)
        {
            if ((_value != null) || (_source == null)) return;

            foreach (ParameterInfo parameterInfo in methodInfo.GetParameters())
            {
                if (parameterInfo.Name == _source)
                {
                    _parameterInfo = parameterInfo;
                    return;
                }
            }

            throw new AuthException("No source parameter '{0}' for action '{1}'", _source, methodInfo.Name);
        }

        internal override bool Check(IClaimsPrincipal principal, IDictionary<string, object> parameters)
        {
            string[] s = principal.GetClaimValue(_claimType, _issuer).Split(new char[] {' '}, StringSplitOptions.RemoveEmptyEntries);
            object value = _value ?? GetParameter(parameters, _parameterInfo);

            AuthValue authValue = AuthValue.Create(value, ClaimValueTypes.String);
            return AuthHelper.VerifyValue(authValue, ClaimValueTypes.String, AuthComparison.Equals, s);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthAttribute.cs ===
﻿using System;
using System.Reflection;
using System.Web.Services.Protocols;

using Microsoft.XboxLive.Auth;
using Microsoft.XboxLive.Auth.Claims;
using Microsoft.XboxLive.Auth.Config;

namespace Microsoft.XboxLive.Auth.Policy
{
    /// <summary>
    /// Represents the base class for authorization policy attributes.
    /// </summary>
    /// <remarks>
    /// The authorization attributes are used to define authorization
    /// policy on classes, methods, and their parameters.  Each  time
    /// a method is invoked it is checked  for  authorization  policy.
    /// If there is a policy defined for a given  method   then  that
    /// policy is checked against the current  authorization  context
    /// before the method is invoked.  If the policy check fails then
    /// an exception is thrown and the method is not called.
    /// </remarks>
    /// <example>
    /// <code>
    /// // Example of a SOAP web method with authorization attributes
    /// 
    /// [AuthExists(AuthClaimTypes.Xuid)]
    /// [WebMethod]
    /// public void ChangeGamertag(
    ///    [VerifyClaim(AuthClaimTypes.Gamertag)] string gamertag
    /// );
    /// 
    /// Example of a WCF operation contact with authorization attributes
    /// 
    /// [VerifyPlatformId(AuthPlatforms.Xbox360)]
    /// [RequireClaim(AuthClaimTypes.DeviceId)]
    /// [OperationContract]
    /// public void AutoUpdateReferral()
    /// </code>
    /// </example>
    public abstract class AuthAttribute : Attribute
    {
        /// <summary>
        /// The constructor for all  auth attributes sets the default
        /// issuer.  This can be set via  configuration  or  using  a
        /// named attribute parameter.
        /// </summary>
        protected AuthAttribute()
        {
            if (AuthConfig.Current != null) {
                Issuer = AuthConfig.Current.Issuer;
                if (string.IsNullOrEmpty(Issuer)) Issuer = AuthHelper.DEFAULT_ISSUER;
            }
        }

        /// <summary>
        /// The claim type to look for and test
        /// </summary>
        protected string ClaimType { get; set; }

        /// <summary>
        /// The issuer from which claims of the specified type should
        /// originate.
        /// </summary>
        public string Issuer { get; set; }
    }


    /// <summary>
    /// This is the base attribute for all  authorization  attributes
    /// placed on classes and methods.  Class and  method  attributes
    /// are  limited to simple claim existence checks and  comparison
    /// of claim values against compile time values.
    /// </summary>
    /// <remarks>This is an abstract class and cannot be instantiated.
    /// It is the base class for all authorization policy  attributes
    /// with a AttributeTarget of Class or Method.</remarks>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = true, Inherited = true)]
    public abstract class AuthClassMethodAttribute : AuthAttribute {
        /// <summary>
        /// protected constructor to hook into constructor  for  base
        /// class which sets the default issuer.
        /// </summary>
        protected AuthClassMethodAttribute() : base() {
        }

        /// <summary>
        /// Abstract method for converting auth attributes AuthPolicy.
        /// </summary>
        /// 
        /// <returns>An AuthPolicy object called later to do policy
        /// enforcement checks.</returns>
        internal abstract AuthPolicy GetPolicy();
    }


    /// <summary>
    /// The AuthArrayAttribute is used to check claims against a  set
    /// of values (provided in an array).  Multiple checks are made - 
    /// one against each value in the array.  Allows  for  and/or  of
    /// results.
    /// </summary>
    public abstract class AuthArrayAttribute : AuthClassMethodAttribute
    {
        /// <summary>
        /// Array of values used by Allowed and  Required  attributes.
        /// </summary>
        protected object[] _values;

        /// <summary>
        /// Initializes new instance of the  AuthArrayAttribute class.
        /// This is a protected constructor.  It is currently used to
        /// derive other attributes.
        /// </summary>
        /// <param name="claimType">claimType to  be  checked</param>
        /// <param name="values">The array values against  which  the
        /// claim value is checked</param>
        protected AuthArrayAttribute(string claimType, params object[] values) : base()
        {
            ClaimType = claimType;
            _values    = values;
        }
    }

    /// <summary>
    /// 
    /// </summary>
    public class AllowedValuesAttribute : AuthArrayAttribute
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="claimType"></param>
        /// <param name="values"></param>
        public AllowedValuesAttribute(string claimType, params string[] values)
            : base(claimType, values)
        {
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        internal override AuthPolicy GetPolicy()
        {
            AuthPolicy[] policies = new AuthPolicy[_values.Length];

            for (int i = 0; i < _values.Length; i++) {
                policies[i] = new AuthCompare(ClaimType, Issuer, _values[i], AuthComparison.Equals);
            }

            if (policies.Length == 0) return new AuthFalse();
            if (policies.Length == 1) return policies[0];
            return new AuthOr(policies);
        }
    }


    /// <summary>
    /// 
    /// </summary>
    public class RequiredValuesAttribute : AuthArrayAttribute
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="claimType"></param>
        /// <param name="values"></param>
        public RequiredValuesAttribute(string claimType, params object[] values)
            : base(claimType, values)
        {
        }

        
        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        internal override AuthPolicy GetPolicy()
        {
            AuthPolicy[] policies = new AuthPolicy[_values.Length];

            for (int i = 0; i < _values.Length; i++) {
                policies[i] = new AuthContains(ClaimType, Issuer, _values[i], null);
            }

            if (policies.Length == 0) return new AuthTrue();
            if (policies.Length == 1) return policies[0];
            return new AuthAnd(policies);
        }
    }

    
    /// <summary>
    /// The AllowedPlatformsAttribute is used to affect policy checks
    /// of the device type against an array of valid  platform  types
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
    public class AllowedPlatformsAttribute : AllowedValuesAttribute
    {
        /// <summary>
        /// Initializes an instance of AllowedPlatformsAttribute
        /// </summary>
        /// <param name="values">The array of allowed platform types</param>
        public AllowedPlatformsAttribute(params string[] values) 
            : base(AuthClaimTypes.DeviceType, Array.ConvertAll(values, p => p.ToString()))
        {
        }
    }


    /// <summary>
    /// The AllowedTitlesAttribute is used to affect policy checks of
    /// the title id claim  against  an  array  of  valid  title  ids
    /// </summary>
    [AttributeUsage(AttributeTargets.Class | AttributeTargets.Method, AllowMultiple = false, Inherited = true)]
    public class AllowedTitlesAttribute : AllowedValuesAttribute
    {
        /// <summary>
        /// Initializes an instance of AllowedTitlesAttribute
        /// </summary>
        /// <param name="values">The array of allowed titles ids</param>
        public AllowedTitlesAttribute(params uint[] values)
            : base(AuthClaimTypes.TitleId, Array.ConvertAll(values, t => ((uint) t).ToString()))
        {
        }
    }

    /// <summary>
    /// Verify that all of the  privileges  in  the  specified  array
    /// appear in the privileges claim.
    /// </summary>
    public class RequiredPrivilegesAttribute : RequiredValuesAttribute {
        /// <summary>
        /// Initializes an instance of RequiredPrivilegesAttribute
        /// </summary>
        /// <param name="privileges">The array of required privileges</param>
        public RequiredPrivilegesAttribute(params byte[] privileges)
            : base(AuthClaimTypes.Privileges, Array.ConvertAll(privileges, p => p.ToString()))
        {
        }
    }

    /// <summary>
    /// Verify that the specified claim is present in the  auth  data
    /// </summary>
    public class AuthExistsAttribute : AuthClassMethodAttribute
    {
        /// <summary>
        /// Initializes an instance of the AuthExistsAttribute
        /// </summary>
        /// <param name="claimType">the specific claimType (name) for
        /// which we are checking</param>
        public AuthExistsAttribute(string claimType) : base() {
            ClaimType = claimType;
        }

        internal override AuthPolicy GetPolicy() {
            return new AuthExists(ClaimType, Issuer);
        }
    }


    /// <summary>
    /// Verify that the specified claim is present and then perform the
    /// specified comparison operation between the specified value  and
    /// the claim value.
    /// </summary>
    public abstract class AuthComparisonAttribute : AuthClassMethodAttribute
    {
        private object         _value;
        private AuthComparison _comparison;

        /// <summary>
        /// Initializes an instance of the AuthComparisonAttribute
        /// </summary>
        /// <param name="claimType">the specific claimType (name) for which we are checking</param>
        /// <param name="value">The value against which the claim value is compared</param>
        /// <param name="comparison">The comparision operation to perform</param>
        protected AuthComparisonAttribute(string claimType, object value, AuthComparison comparison) : base()
        {
            ClaimType   = claimType;
            _value      = value;
            _comparison = comparison;
        }

        internal override AuthPolicy GetPolicy() {
            return new AuthCompare(ClaimType, Issuer, _value, _comparison);
        }
    }


    /// <summary>
    /// Verify that the specified claim is present in the  auth  data
    /// and that the claim value is  equal  to  the  specified  value
    /// </summary>
    public class AuthEqualsAttribute : AuthComparisonAttribute
    {
        /// <summary>
        /// Initializes an instance of the AuthEqualsAttribute
        /// </summary>
        /// <param name="claimType">the specific claimType (name) for which we are checking</param>
        /// <param name="value">The value against which the claim value is compared</param>
        public AuthEqualsAttribute(string claimType, object value)
            : base(claimType, value, AuthComparison.Equals)
        {
        }
    }


    /// <summary>
    /// Verify that the specified claim is present in the  auth  data
    /// and that the claim value is  equal  to  the  specified  value
    /// </summary>
    public class AuthGreaterThanAttribute : AuthComparisonAttribute
    {
        /// <summary>
        /// Initializes an instance of the AuthGreaterThanAttribute
        /// </summary>
        /// <param name="claimType">the specific claimType (name) for which we are checking</param>
        /// <param name="value">The value against which the claim value is compared</param>
        public AuthGreaterThanAttribute(string claimType, object value)
            : base(claimType, value, AuthComparison.GreaterThan)
        {
        }
    }

    /// <summary>
    /// Verify that the specified claim is present in the  auth  data
    /// and that the claim value is less  than  the  specified  value
    /// </summary>
    public class AuthLessThanAttribute : AuthComparisonAttribute
    {
        /// <summary>
        /// Initializes an instance of the AuthLessThanAttribute
        /// </summary>
        /// <param name="claimType">the specific claimType (name) for which we are checking</param>
        /// <param name="value">The value against which the claim value is compared</param>
        public AuthLessThanAttribute(string claimType, object value)
            : base(claimType, value, AuthComparison.LessThan)
        {
        }
    }


    /// <summary>Represents the base class for  authorization  policy
    /// attributes applied to method parameters.   Class  and  method
    /// parameters make static checks for the  presence  of  specific
    /// claims or specific well know  values.   Parameter  attributes
    /// compare specific claims against  the  parameter  value  being
    /// passed into the method.</summary>
    /// <remarks>This is an abstract class and cannot be instantiated.
    /// It is the base class for all authorization policy  attributes
    /// with a Parameter.</remarks>
    [AttributeUsage(AttributeTargets.Parameter, AllowMultiple = false, Inherited = true)]
    public abstract class AuthParameterAttribute : AuthAttribute
    {
        /// <summary>
        /// protected constructor to hook into constructor  for  base
        /// class which sets the default issuer.
        /// </summary>
        protected AuthParameterAttribute() : base() {
        }

        /// <summary>
        /// Abstract method for converting auth attributes into policy
        /// rexpression.  Parameter attributes differ from method  and
        /// class attributes in that they take a  parameter  which  is
        /// used to lookup the value of the  parameter  on  each  call.
        /// </summary>
        /// 
        /// <returns>An AuthPolicy object</returns>

        internal abstract AuthPolicy GetPolicy(ParameterInfo parameterInfo);
    }


    /// <summary>
    /// Verify that the attributed parameter is equal to the value of
    /// the specified claim.
    /// </summary>
    public class AuthVerifyAttribute : AuthParameterAttribute
    {
        /// <summary>
        /// Initializes an  instance  of  the AuthVerifyAttribute
        /// </summary>
        /// <remarks>Compare the value  of  the  declaring  parameter
        /// against the specified claim type</remarks>
        public AuthVerifyAttribute(string claimType) : base()
        {
            ClaimType = claimType;
        }

        internal override AuthPolicy GetPolicy(ParameterInfo parameterInfo) {
            return new AuthCompare(ClaimType, Issuer, parameterInfo, AuthComparison.Equals);
        }
    }

    /// <summary>
    /// Verify that the attributed parameter is equal to the value of
    /// the device id claim.
    /// </summary>
    public class VerifyMachineAttribute : AuthVerifyAttribute {
        /// <summary>
        /// Initializes a new instance of the  VerifyMachineAttribute
        /// </summary>
        /// <remarks>Compare the value  of  the  declaring  parameter
        /// against the well known claimType  AuthClaimTypes.DeviceId.
        /// </remarks>
        public VerifyMachineAttribute() : base(AuthClaimTypes.DeviceId) { }
    }

    /// <summary>
    /// Verify that the attributed parameter is equal to the value of
    /// the user (xuid) claim.
    /// </summary>
    public class VerifyUserAttribute : AuthVerifyAttribute {
        /// <summary>
        /// Initializes a new instance of the VerifyUserAttribute
        /// </summary>
        /// <remarks>Compare the value  of  the  declaring  parameter
        /// against  the  well  known  claimType  AuthClaimTypes.Xuid
        /// </remarks>
        public VerifyUserAttribute() : base(AuthClaimTypes.Xuid) { }
    }

    /// <summary>
    /// Verify that the attributed parameter is equal to the value of
    /// the title id claim.
    /// </summary>
    public class VerifyTitleAttribute : AuthVerifyAttribute {
        /// <summary>
        /// Initializes a new instance  of  the  VerifyTitleAttribute
        /// </summary>
        /// <remarks>Compare the value  of  the  declaring  parameter
        /// against the well known  claimType  AuthClaimTypes.TitleId
        /// </remarks>
        public VerifyTitleAttribute() : base(AuthClaimTypes.TitleId) { }
    }

    /// <summary>
    /// Verify that the attributed parameter is equal to the value of
    /// the country claim.
    /// </summary>
    public class VerifyCountryAttribute : AuthVerifyAttribute
    {
        /// <summary>
        /// Initializes a new instance of the  VerifyCountryAttribute
        /// </summary>
        /// <remarks>Compare the value  of  the  declaring  parameter
        /// against the well known  claimType  AuthClaimTypes.Country
        /// </remarks>
        public VerifyCountryAttribute() : base(AuthClaimTypes.Country) { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Policy\AuthSoapExtension.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Reflection;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

using Microsoft.IdentityModel;
using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth.Policy
{
    /// <summary> </summary>
    public class AuthSoapExtension : SoapExtension
    {
        private static HashSet<string> _initializedServices = new HashSet<string>();

        /// <summary>
        /// This is a required abstract method.  We don't  need  to  do
        /// anything here.  It just has to be present
        /// </summary>
        public override void Initialize(object initializer)
        {
        }

        /// <summary>
        /// Called when ASP.NET finds a SoapExtension in the web config
        /// file.  Reflect on the serviceType to find all  web  methods
        /// Then look to see if there is any policy defined  (it  would
        /// come from the config  file).  If there is none then see  if
        /// the code is attributed for authorization.
        /// </summary>
        /// <param name="serviceType">the method  we  are  expected  to
        /// initialize.  use this to get the declaring type for the web
        /// method (that is the web  service  class)
        /// </param>

        public override object GetInitializer(Type serviceType)
        {
            string serviceName = serviceType.Name;

            // we lock during the check,  but not during  intialization
            // we may do this a few times, but the result is idempotent

            lock (_initializedServices) {
                if (_initializedServices.Contains(serviceName)) return null;
            }

            // relfect on the serviceType and find all of  web  methods
            // whittle it down to those with the  WebMethod  attributes

            MethodInfo[] methodInfo = serviceType.GetMethods(
                BindingFlags.Public | BindingFlags.Instance | BindingFlags.DeclaredOnly
            );

            if (methodInfo != null) 
            {
                for (int i = 0; i < methodInfo.Length; i++)
                {
                    // find all of the methods that  are  [WebMethod]'s
                    object[] attributes = (Attribute[]) methodInfo[i].GetCustomAttributes(typeof(WebMethodAttribute), false);
                    if ((attributes == null) || (attributes.Length == 0)) continue;

                    // add policy for this method. this looks in  the
                    // config first, and if necessary uses reflection

                    AuthPolicy.Add(serviceName, methodInfo[i].Name, methodInfo[i]);
                }
            }

            // add the type to the set of  types  that  we  initialized
            // allow for a race if someone else got  to  it  before  us

            lock (_initializedServices)
            {
                if (_initializedServices.Contains(serviceName)) return null;
                _initializedServices.Add(serviceName);
            }

            return serviceType;
        }


        /// <summary>
        /// Called when ASP.NET finds a SoapExtensionAttribute on a web
        /// web method.  Even though this is for a  single  method,  we
        /// initialize the whole web service by calling back  into  the
        /// GetInitializer for a web.config defined SoapExtension.
        /// </summary>
        /// <param name="methodInfo">the method we are initializing. we
        /// use this to get the declaring type for the web method (that
        /// is the web service class)
        /// </param>
        /// <param name="attribute">the attribute that  triggered  this
        /// call. we don't need use it because the common code reflects
        /// </param>

        public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute)
        {
            return GetInitializer(methodInfo.DeclaringType);
        }


        /// <summary>
        /// ProcessMessage is called multiple times at different stages
        /// We enforce authorization policy during the AfterDeserialize
        /// stage.
        /// </summary>
        /// <param name="message">The request we  are  authorizing.  We
        /// need this to get the methodName, and then the parameters to
        /// do any data binding
        /// </param>

        public override void ProcessMessage(SoapMessage message)
        {
            // if there is already an exception then we are done,  else
            // if it is the after deserialize stage we do authorization

            if (message.Exception != null) return;
            if (message.Stage != SoapMessageStage.AfterDeserialize) return;

            // get the service name and method name. we use them as key
            // values  to  lookup  our  cached  authorization  policies

            string serviceName = message.MethodInfo.DeclaringType.Name;
            string methodName = message.MethodInfo.Name;

            AuthPolicy authPolicy = AuthPolicy.Find(serviceName, methodName);
            if ((authPolicy == null) || (authPolicy == AuthPolicy.NullPolicy)) return;

            // get the parameters from the soap  message  package  them
            // up as an object dictionary to pass to the  policy  check

            Dictionary<string, object> parameters = new Dictionary<string, object>();
            ParameterInfo[] parameterInfo = message.MethodInfo.InParameters;
            
            for (int i = 0; i < parameterInfo.Length; i++) {
                parameters.Add(parameterInfo[i].Name, message.GetInParameterValue(i));
            }

            // and finally we can make our call into  common  code.  if
            // it fails then we throw a framework appropriate exception

            try {
                bool result = authPolicy.Check(parameters);
                AuthTrace.Info("<Action Name=\"{0}.{1}\">{2}</Action>", serviceName, methodName, result);
                if (result) return;

                throw new AuthException(string.Format("Authorization error accessing {0}.{1}", serviceName, methodName));
            }

            // catch authorization exceptions (the explicit  one  above
            // or from the policy check.  return a status code  of  403

            catch (AuthException e)
            {
                AuthTrace.Error("<Exception Name=\"{0}.{1}\">{2}</Exception>", serviceName, methodName, e);
                HttpContext context = HttpContext.Current;

                if ((context != null) && (context.Response != null))
                {
                    context.Response.StatusCode = (int) HttpStatusCode.Forbidden;
                    context.Response.StatusDescription = e.Message;
                    context.ApplicationInstance.CompleteRequest();
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:23 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:26 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Protocol\XblAuthorizationPolicy.cs ===
﻿using System;
using System.Net;
using System.Security;
using System.Security.Principal;
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Claims;
using System.IdentityModel.Policy;
using System.IdentityModel.Tokens;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Threading;

namespace Microsoft.XboxLive.Auth.Protocol
{
    
    /// <summary>
    /// Reads in authorization header.  Presents header to  token  handlers
    /// to see who can read the token, one of which will return a principal
    /// </summary>
    public class XblAuthorizationPolicy : IAuthorizationPolicy
    {
        private string id = Guid.NewGuid().ToString();
        
        /// <summary>
        /// Null constructor required so WCF can instantiate the authorization policy
        /// </summary>
        public XblAuthorizationPolicy() {
        }

        /// <summary>
        /// Take the request and look for authorization context on the
        /// headers.   If we find it and can parse it,  then create  a
        /// principal and put it on the thread.
        /// </summary>
        /// <param name="evaluationContext">The <see cref="T:System.IdentityModel.EvaluationContext"/> for the request.</param>
        /// <param name="state"></param>
        /// <returns>
        /// true if access is granted; otherwise, false. The default is true.
        /// </returns>
        public bool Evaluate(EvaluationContext evaluationContext, ref object state)
        {
            var uri = OperationContext.Current.IncomingMessageHeaders.To.AbsoluteUri;
            var headers = WebOperationContext.Current.IncomingRequest.Headers;

            try 
            {
                XblAuthProtocolHandler protocolHandler = new XblAuthProtocolHandler();
                IPrincipal principal = protocolHandler.ProcessToken(headers, uri);
                
                if (principal == null) {
                    AuthTrace.Info("No token on request, using existing principal");
                    principal = Thread.CurrentPrincipal;
                }
                
                AuthTrace.Info("Adding principal to evaluation context, {0}", principal);
                evaluationContext.Properties["Principal"] = principal;
                
                return true;
            }

            // it's okay to have no token and therefore no  principal
            // but stop exceptions and  try  to  return  bad  request

            catch (Exception e)
            {
                AuthTrace.Info("Error evaluating context, {0}", e.Message);

                if (WebOperationContext.Current != null)
                {
                    OutgoingWebResponseContext response = WebOperationContext.Current.OutgoingResponse;
                    
                    if (! (e is SecurityTokenExpiredException))
                        response.StatusCode = HttpStatusCode.Forbidden;
                    else {
                        response.StatusCode = HttpStatusCode.Unauthorized;
                        response.Headers.Add("WWW-Authenticate", "Token realm='xboxlive.com', error='token_expired'");
                    }
                }

                if ((e is SecurityTokenException) || (e is SecurityException)) throw;
                throw new SecurityException(e.Message, e);
            }
        }
        
        /// <summary>
        /// Get the id of the authorization policy object.  
        /// </summary>
        public string Id {
            get { return id; }
        }

        /// <summary>
        /// Get the Issuer of the authorization policy object.  
        /// </summary>
        public ClaimSet Issuer
        {
           get { return ClaimSet.System; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Protocol\XblAuthProtocolModule.cs ===
﻿using Microsoft.IdentityModel.Claims;
using Microsoft.IdentityModel.Web.Controls;
using Microsoft.IdentityModel.Tokens;

using System;
using System.Net;
using System.Security;
using System.Threading;
using System.Web;
using System.Collections.Specialized;

namespace Microsoft.XboxLive.Auth.Protocol
{
    /// <summary>
    /// XblAuthProtocolModule is an HttpModule to provide basic token authentication
    /// handling. It hooks into ASP.NET's AuthenticateRequest callback and consumes
    /// the 'Authorization' or 'X-Authorization' HTTP header. 
    /// </summary>
    /// <remarks>
    /// The "XblAuthProtocol" is a simple authentication protocol, vaguely similar in 
    /// functionality to WS-Federation but more active. The client provides the STS
    /// token (presumably SAML2.0, but not necessarily) in an HTTP header, and this
    /// module reads that token and verifies it and creates an IClaimsPrincipal.
    /// 
    /// The header value must contain "XBL2.0 x=STSTOKEN", where STSTOKEN is the XML 
    /// token received from the XSTS service. The output of the module is an 
    /// IClaimsPrincipal placed in Thread.CurrentPrincipal. If no header is present,
    /// the module does nothing. 
    /// 
    /// Authorization is left to the user of this module. Any errors that occur during
    /// parsing or validation are passed to a callback event, and if not cancelled, the
    /// exception is rethrown. ASP.Net will catch this and abort the request.
    /// </remarks>
    /// <example>
    /// In the configuration section of your web.config:
    /// 
    ///   <system.webServer>
    ///     <modules>
    ///        <add name="XblAuthProtocolModule" type="Microsoft.XboxLive.Auth.Protocol.XblAuthProtocolModule, Microsoft.XboxLive.Auth "/>
    ///     </modules>
    ///   </system.webServer>
    ///   
    /// </example>
    public class XblAuthProtocolModule : IHttpModule 
    {
        /// <summary>
        /// Constructor
        /// </summary>
        public XblAuthProtocolModule()
        {
        }

        /// <summary>
        /// Name of the HTTP module
        /// </summary>
        public String ModuleName
        {
            get { return "XblAuthProtocolModule"; }
        }

        /// <summary>
        /// Fires for any unhandled error during AuthenticateRequest
        /// </summary>
        public static event EventHandler<ErrorEventArgs> AuthenticateError;

        /// <summary>
        /// Fires for any traceline generated during execution
        /// </summary>
        public static event EventHandler<TraceEventArgs> TraceOutput;

        /// <summary>
        /// Initialize module. Hooks into AuthenticateRequest handler.
        /// </summary>
        /// <param name="application"></param>
        public virtual void Init(HttpApplication application)
        {
            TraceOutput += new EventHandler<TraceEventArgs>((sender, args) =>
            {
                System.Diagnostics.Debug.WriteLine(args.ToString());
            });

            application.AuthenticateRequest += new EventHandler(this.OnAuthenticateRequest);
        }

        /// <summary>
        /// Dispose
        /// </summary>
        public virtual void Dispose()
        {
        }

        internal void OnAuthenticateRequest(object sender, EventArgs args)
        {
            HttpApplication application = (HttpApplication)sender;
            HttpContext ctx = application.Context;

            try {
                IClaimsPrincipal claimsPrincipal = ProcessAuthenticateRequest(ctx.Request.Headers, ctx.Request.RawUrl);

                if (claimsPrincipal != null) {
                    // Set on current thread and in ASP.NET context
                    Thread.CurrentPrincipal = claimsPrincipal;
                    ctx.User = claimsPrincipal;
                }
            }
            catch (SecurityTokenExpiredException) {
                ctx.Response.StatusCode = (int)HttpStatusCode.Unauthorized;
                ctx.Response.Headers.Add("WWW-Authenticate", "Token realm='xboxlive.com', error='token_expired'");
                ctx.ApplicationInstance.CompleteRequest();
            }
            catch {
                ctx.Response.StatusCode = (int) HttpStatusCode.Forbidden;
                ctx.ApplicationInstance.CompleteRequest();
            }
        }

        /// <summary>
        /// Handles bulk of reading and validating the incoming token. 
        /// </summary>
        /// <param name="webHeaders">Incoming HTTP headers. Looks for Authorization header.</param>
        /// <param name="rawUrl">Full URL of incoming request.</param>
        /// <returns>Validated IClaimsPrincipal, or null if none available.</returns>
        /// <remarks>
        /// Marked public to allow for testing, but not intended for external use.
        /// </remarks>
        public IClaimsPrincipal ProcessAuthenticateRequest(NameValueCollection webHeaders, string rawUrl)
        {
            IClaimsPrincipal claimsPrincipal = null;
            try
            {
                XblAuthProtocolHandler protocolHandler = new XblAuthProtocolHandler();
                claimsPrincipal = protocolHandler.ProcessToken(webHeaders, rawUrl);
            }
            catch (Exception e)
            {
                if (IsFatal(e))
                {
                    throw;
                }

                Trace(e, "Unhandled OnAuthenticateRequest error");

                ErrorEventArgs evtArgs = new ErrorEventArgs(e);
                var evtFunc = AuthenticateError;
                if (evtFunc != null)
                {
                    evtFunc(this, evtArgs);
                }
                if (!evtArgs.Cancel)
                {
                    throw;
                }
            }
            return claimsPrincipal;
        }

        /// <summary>
        /// Determines whether an exception is fatal or whether we should attempt to 
        /// handle it gracefully.
        /// </summary>
        /// <param name="exception"></param>
        /// <returns>True if fatal</returns>
        protected virtual bool IsFatal(Exception exception)
        {
            for (Exception exception2 = exception; exception2 != null; exception2 = exception2.InnerException)
            {
                if (((exception2 is OutOfMemoryException) && !(exception2 is InsufficientMemoryException)) || (((exception2 is ThreadAbortException) || (exception2 is AccessViolationException)) || (exception2 is System.Runtime.InteropServices.SEHException)))
                {
                    return true;
                }
            }
            return false;
        }

        /// <summary>
        /// Handles writing a diagnostic trace line.
        /// </summary>
        /// <param name="e">Optional exception, pass null if none</param>
        /// <param name="msgFormat">Optional message and format string</param>
        /// <param name="msgArgs">Message format arguments</param>
        protected virtual void Trace(Exception e, string msgFormat, params object[] msgArgs)
        {
            TraceEventArgs evtArgs = new TraceEventArgs()
            {
                Message = !String.IsNullOrEmpty(msgFormat) ? String.Format(msgFormat, msgArgs) : null,
                Error = e,
            };
            var evtFunc = TraceOutput;
            if (evtFunc != null)
            {
                evtFunc(this, evtArgs);
            }
        }

    }

    /// <summary>
    /// Arguments for handling a traceline event callback
    /// </summary>
    public class TraceEventArgs : EventArgs
    {
        /// <summary>
        /// The trace message
        /// </summary>
        public string Message;

        /// <summary>
        /// An exception associated with the trace, if any. May be null.
        /// </summary>
        public Exception Error;

        /// <summary>
        /// Helper for printing the trace event
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            if (Error == null)
                return Message;
            else
                return Message + ": " + Error.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:45 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.40\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:39 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth\Protocol\XblAuthProtocolHandler.cs ===
﻿using System;
using System.Collections.Specialized;
using System.IO;
using System.Xml;
using System.Web;
using System.Threading;
using System.ServiceModel;
using System.IdentityModel.Tokens;
using System.Xml.Linq;
using System.Text;

using Microsoft.IdentityModel.Claims;
using Microsoft.IdentityModel.Tokens;
using Microsoft.IdentityModel.Configuration;
using Microsoft.IdentityModel.Web;
using Microsoft.XboxLive.Auth.Claims;

namespace Microsoft.XboxLive.Auth.Protocol
{
    /// <summary>
    /// Core code that implements the "Xbox Live Auth Protocol", which is simple replacement
    /// for WS-Federation (ASP.NET) and WS-Trust, et al (WCF) that WIF includes out of the 
    /// box.
    /// </summary>
    public class XblAuthProtocolHandler
    {
        /// <summary>The primary header used for transporting tokens in an HttpRequest</summary>
        public const string HEADER_NAME = "Authorization";

        /// <summary>The secondary header used for transporting tokens in an HttpRequest</summary>
        public const string ALT_HEADER_NAME = "X-Authorization";

        /// <summary>
        /// WIF-provided configuration, either from web.config or a default.
        /// </summary>
        public ServiceConfiguration ServiceConfig { get; protected set; }

        private readonly string AUTH_NAME = "XBL2.0";
        private readonly string AUTH_VALUE_PREFIX_XML = "x=";

        /// <summary>Instantiate an XblAuthProtocolHandler</summary>
        public XblAuthProtocolHandler()
        {
            ServiceConfig = GetCurrentConfiguration();
        }

        /// <summary>
        /// Read token from header then authenitcate it. Same as calling ReadToken() 
        /// and AuthenticateToken().
        /// </summary>
        /// <param name="httpHeaders">Incoming HTTP headers containing the token in the "Authorization" header.</param>
        /// <param name="resourceName">Resource being requested, usually the URL of the request</param>
        /// <returns>New IClaimsPrincipal from token, else null if none</returns>
        public IClaimsPrincipal ProcessToken(NameValueCollection httpHeaders, string resourceName)
        {
            // look for authorization headers get back  collection
            // we can validate and turn into our claims principals
            
            SecurityToken[] securityTokens = ReadTokens(httpHeaders);
            if (securityTokens == null) return null;

            // the first token does not require  special  handling

            IClaimsPrincipal claimsPrincipal = null;

            for (int i = 0; i < securityTokens.Length; i++) {
                claimsPrincipal = MergePrincipals(
                    claimsPrincipal, AuthenticateToken(securityTokens[i], resourceName)
                );
            }

            return claimsPrincipal;
        }

        private IClaimsPrincipal MergePrincipals(IClaimsPrincipal sourcePrincipal, IClaimsPrincipal destinationPrincipal)
        {
            // if there is nothing to merge, just return what we have

            if (destinationPrincipal == null) return sourcePrincipal;
            if (sourcePrincipal == null) return destinationPrincipal;
            
            // both source and destination must have a device  claim.
            // the check to ensure they match happens further  below
            
            if ((! sourcePrincipal.ClaimExists(AuthClaimTypes.DeviceId)) ||
                (! destinationPrincipal.ClaimExists(AuthClaimTypes.DeviceId))) {
                
                throw new AuthException("Multiple tokens requires matching device claims");
            }

            foreach (IClaimsIdentity sourceIdentity in sourcePrincipal.Identities) {

                IClaimsIdentity destinationIdentity = null;

                // find matching source identity in the destination principal

                for (int i = 0; i < destinationPrincipal.Identities.Count; i++) {
                    if (destinationPrincipal.Identities[i].Name == sourceIdentity.Name) {
                        destinationIdentity = destinationPrincipal.Identities[i];
                        break;
                    }
                }

                // if it's not there, create and add to destination principal

                if (destinationIdentity == null)
                    destinationPrincipal.Identities.Add(sourceIdentity);

                // otherwise, reconcile individual claims in  the  identities
                // add missing claims, compare values for any existing claims

                else {
                    foreach (Claim sourceClaim in sourceIdentity.Claims) {
                        string destinationValue = null;

                        if (! destinationIdentity.TryGetClaimValue(sourceClaim.ClaimType, out destinationValue))
                            destinationIdentity.Claims.Add(sourceClaim.Copy());
                        else if (destinationValue != sourceClaim.Value) {
                            throw new AuthException("Multiple tokens with conflicting claim values");
                        }
                    }
                }
            }

            return destinationPrincipal;
        }

        /// <summary>
        /// Attempts to parse the 'XBL2.0' token from the Authorization or X-Authorization
        /// header, parses the XML token value, and reads it using the WIF library. This
        /// allows for custom handlers and authenticators can be plugged in and configured 
        /// as desired.
        /// </summary>
        /// <param name="httpHeaders">Headers collection, looks for 'Authorization' or 'X-Authorization'</param>
        /// <returns>array of security tokens, may have zero entries</returns>
        public SecurityToken[] ReadTokens(NameValueCollection httpHeaders)
        {
            string securityTokenXml = GetSecurityTokenXml(httpHeaders);
            if (String.IsNullOrEmpty(securityTokenXml)) return null;

            // wrap the token xml with a root node.  this  allows
            // us to process multiple elements as an xml document
            
            XmlDocument document = new XmlDocument();
            document.LoadXml("<root>" + securityTokenXml + "</root>");

            // move to our artificial root node.  the children of
            // that root node are the security tokens we validate

            XmlNode rootNode = document.FirstChild;
            SecurityToken[] securityTokens = new SecurityToken[rootNode.ChildNodes.Count];

            for (int i = 0; i < rootNode.ChildNodes.Count; i++) {
                securityTokens[i] = ReadToken(rootNode.ChildNodes[i].OuterXml);
            }

            return securityTokens;
        }

        /// <summary>
        /// Uses WIF to read an XML formatted token.
        /// </summary>
        /// <param name="tokenXml">Token in XML format.</param>
        /// <returns>New SecurityToken, or else null if none.</returns>
        public SecurityToken ReadToken(string tokenXml)
        {
            if (tokenXml != null)
            {
                using (StringReader stringReader = new StringReader(tokenXml))
                {
                    using (XmlReader reader = XmlReader.Create(stringReader))
                    {
                        SecurityTokenHandlerCollection securityTokenHandlers = ServiceConfig.SecurityTokenHandlers;
                        if (securityTokenHandlers.CanReadToken(reader))
                        {
                            return securityTokenHandlers.ReadToken(reader);
                        }
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Creates the value for the 'Authorization' header for the given token.
        /// </summary>
        /// <param name="token">Valid security token</param>
        /// <returns>Header value of encoded token</returns>
        public string WriteToken(SecurityToken token)
        {
            SecurityTokenHandlerCollection securityTokenHandlers = ServiceConfig.SecurityTokenHandlers;
            SecurityTokenHandler handler = securityTokenHandlers[token];
            return WriteToken(token, handler);
        }

        /// <summary>
        /// Creates the value for the 'Authorization' header for the given token and token
        /// handler.
        /// </summary>
        /// <param name="token">Valid security token</param>
        /// <param name="handler">Handler to use for writing the token</param>
        /// <returns>Header value of encoded token</returns>
        public string WriteToken(SecurityToken token, SecurityTokenHandler handler)
        {
            if (handler == null || token == null || !handler.CanWriteToken)
                return null;

            StringBuilder sbToken = new StringBuilder(500);
            XmlWriterSettings writerSettings = new XmlWriterSettings()
            {
                NewLineHandling = NewLineHandling.None,
                OmitXmlDeclaration = true,
            };
            using (XmlWriter writer = XmlWriter.Create(sbToken, writerSettings))
            {
                handler.WriteToken(writer, token);
                writer.Flush();
                return String.Format("{0} {1}{2}",
                    AUTH_NAME,
                    AUTH_VALUE_PREFIX_XML,
                    EncodeHeaderXml(sbToken.ToString()));
            }
        }

        /// <summary>
        /// Uses WIF's token authentication to authenticate a security token and extract the
        /// IClaimsPrincipal from it. 
        /// </summary>
        /// <param name="securityToken">Security token read from the request</param>
        /// <param name="resourceName">Name of requested resource. Usually this is the URL.</param>
        /// <returns>The resulting IClaimsPrincipal, which is also set to Thread.CurrentPrincipal. Returns null if anything fails.</returns>
        public IClaimsPrincipal AuthenticateToken(
            SecurityToken securityToken, 
            string resourceName)
        {
            IClaimsPrincipal claimsPrincipal = null;
            var tokenHandlers = ServiceConfig.SecurityTokenHandlers;
            if (tokenHandlers != null && securityToken != null)
            {
                // Validate
                ClaimsIdentityCollection identities = tokenHandlers.ValidateToken(securityToken);
                claimsPrincipal = ClaimsPrincipal.CreateFromIdentities(identities);

                // Authenticate
                var claimsAuthManager = ServiceConfig.ClaimsAuthenticationManager;
                if (claimsAuthManager != null && claimsPrincipal != null)
                {
                    claimsPrincipal = claimsAuthManager.Authenticate(resourceName, claimsPrincipal);
                }
            }

            return claimsPrincipal;
        }

        /// <summary>Get the current service configuration from the OperationContext.  If
        /// none is present then look in the FederatedAuthentication service configuration.
        /// </summary>
        protected ServiceConfiguration GetCurrentConfiguration()
        {
            // Get best service configuration
            if (OperationContext.Current == null)
            {
                return FederatedAuthentication.ServiceConfiguration;
            }
            if (null != OperationContext.Current.IncomingMessageProperties && OperationContext.Current.IncomingMessageProperties.ContainsKey("ServiceConfiguration"))
            {
                ServiceConfiguration configuration = OperationContext.Current.IncomingMessageProperties["ServiceConfiguration"] as ServiceConfiguration;
                if (configuration != null)
                {
                    return configuration;
                }
            }
            return new ServiceConfiguration();
        }

        /// <summary>Get one of the well-known Authorization headers from the collection
        /// of headers, strip off the protocol parts go get to the XML and then decode
        /// the HTTP encoded elements to generate a straight up XML string</summary>
        protected string GetSecurityTokenXml(NameValueCollection httpHeaders)
        {
            string tokenXml = null;

            string authName;
            string authValue;
            if (TryParseAuthorizationHeader(
                    httpHeaders,
                    out authName,
                    out authValue))
            {
                if (authName == AUTH_NAME)
                {
                    if (authValue.StartsWith(AUTH_VALUE_PREFIX_XML))
                    {
                        tokenXml = DecodeHeaderXml(authValue.Substring(AUTH_VALUE_PREFIX_XML.Length));
                    }
                }
            }

            return tokenXml;
        }
        
        /// <summary>
        /// Looks for "Authorization" or "X-Authorization" header and attempts to parse the 
        /// token. 
        /// </summary>
        /// <param name="headerCollection">HTTP headers</param>
        /// <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
        /// <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
        /// <returns>True if successful, false if not</returns>
        protected static bool TryParseAuthorizationHeader(
            NameValueCollection headerCollection,
            out string authName,
            out string authValue)
        {
            string hdrValue = headerCollection[HEADER_NAME];
            if (null == hdrValue)
            {
                hdrValue = headerCollection[ALT_HEADER_NAME];
            }
            if (String.IsNullOrEmpty(hdrValue))
            {
                authName = null;
                authValue = null;
                return false;
            }
            return TryParseAuthorizationHeader(hdrValue, out authName, out authValue);
        }

        /// <summary>
        /// Parse the authorization header into 2 tokens.
        /// </summary>
        /// <param name="authHdrValue">HTTP header value</param>
        /// <param name="authName">Parsed named of auth scheme, e.g. "XBL1.0" or "WLID1.0"</param>
        /// <param name="authValue">Parsed value of the auth scheme, e.g. "x=..." or "t=..."</param>
        /// <returns></returns>
        protected static bool TryParseAuthorizationHeader(
            string authHdrValue,
            out string authName,
            out string authValue)
        {
            // Parameter validation
            int iIndex = authHdrValue.IndexOf(' ');
            if (1 > iIndex)
            {
                authName = null;
                authValue = null;
                return false;
            }
            authName = authHdrValue.Substring(0, iIndex);
            authValue = authHdrValue.Substring(iIndex + 1);
            return true;
        }

        /// <summary>Decode HTTP encoded XML string back to straight up XML</summary>
        protected static string DecodeHeaderXml(string xml)
        {
            return HttpUtility.HtmlDecode(xml);
        }

        /// <summary>Remove new lines and carriage returns from the XML string</summary>
        protected static string EncodeHeaderXml(string xml)
        {
            if (!String.IsNullOrEmpty(xml))
            {
                xml = xml.Replace("\r", String.Empty);
                xml = xml.Replace("\n", String.Empty);
            }
            return xml;
        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Extensions\AuthHelper.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;

using Microsoft.IdentityModel.Claims;
using Microsoft.XboxLive.Auth;
using Microsoft.XboxLive.Auth.Claims;

namespace Microsoft.XboxLive.Auth
{
    /// <summary> </summary>
    public static partial class AuthExtensions
    {
        /// <summary>
        /// Check for existence of an internal claim (which is always issued
        /// by "System").  And if specified, check  the  claim  against  the 
        /// array of valid values.
        /// </summary>
        /// <param name="helper">The AuthHelper instance that servces as "this"</param>
        /// <param name="values">The values (if any) against which to check</param>
        public static bool IsInternal(this AuthHelper helper, params string[] values)
        {
            // create a new helper to avoid side affect of setting issuer
            helper = new AuthHelper(helper.Principal, AuthHelper.SYSTEM_ISSUER);

            if (values == null || values.Length == 0)
                return helper.VerifyExists(AuthInternalClaimTypes.Internal);
            else {
                return helper.VerifyEquals(AuthInternalClaimTypes.Internal);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Misc\DbUtil.cs ===
using System;
using System.Net;
using System.Net.Sockets;
using Microsoft.Win32;

namespace Microsoft.XboxLive.Auth
{
    // Borrowed from \private\common\config\config\ConfigInstance.cs, NpdbInfo class. 
    // Slightly trimmed. Eventing removed.

    internal class DbUtil
    {
        private const string _xblConfigServerEnvVarName = "XBL_CONFIG_SERVER";
        private const string _xblConfigDatabaseEnvVarName = "XBL_CONFIG_DATABASE";
        private const string _CommonConfigRegKeyPath = "Software\\Microsoft\\XboxLive\\CommonConfig";
        private const string _ServerRegValueName = "Server";
        private const string _DatabaseRegValueName = "Database";
        private const string _xblConfigServerDNSName = "npdb";
        private const int _xblConfigDNSTimeout = 10000;
        private const string _defaultDatabaseName = "npdb";

        private delegate IPHostEntry GetHostByName(string s);

        private static object _lockobj = new object();
        private static string _npdbServer;
        private static string _npdbDatabase;

        public static string NpdbServer
        {
            get
            {
                string capturedErrors = "";

                if (_npdbServer != null)
                {
                    // we've already figured out where NPDB lives, so return it
                    return _npdbServer;
                }

                lock (_lockobj)
                {
                    if (_npdbServer != null)
                    {
                        // we've already figured out where NPDB lives, so return it
                        return _npdbServer;
                    }

                    // 1st precedence is to use the server specified in the XBL_CONFIG_SERVER environment variable
                    string serverEnvSetting = System.Environment.GetEnvironmentVariable(_xblConfigServerEnvVarName);
                    if (serverEnvSetting != null)
                    {
                        _npdbServer = serverEnvSetting;
                        return _npdbServer;
                    }

                    // 2nd precedence is to use the server specified in the Server value in the registry key:
                    // \HKLM\Software\Microsoft\XboxLive\CommonConfig
                    RegistryKey commonConfig = Registry.LocalMachine.OpenSubKey(_CommonConfigRegKeyPath);
                    if (commonConfig != null)
                    {
                        object o = commonConfig.GetValue(_ServerRegValueName);

                        if (o != null)
                        {
                            // we should be able to cast this to a string, but we don't want to
                            // completely fail if the cast is bad
                            try
                            {
                                string temp = (string) o;
                                _npdbServer = temp;
                                return _npdbServer;
                            }
                            catch (InvalidCastException)
                            {
                                string errorMessage = "Unable to cast '" +
                                    _ServerRegValueName +
                                    "' registry value at path '" + _CommonConfigRegKeyPath +
                                    "' to a string. This registry setting will be ignored";
                                capturedErrors += errorMessage + "\n";
                            }
                        }
                    }

                    // 3rd precedence is to use the server pointed to by DNS
                    
                    GetHostByName delegateGetHostByName = Dns.GetHostEntry;
                    IAsyncResult iAsyncResult = delegateGetHostByName.BeginInvoke(
                        _xblConfigServerDNSName,
                        null,
                        null);

                    // wait for up to iTimeoutMilliseconds for the read operation
                    // to complete
                    bool bSignal = iAsyncResult.AsyncWaitHandle.WaitOne(_xblConfigDNSTimeout, false);
                    if (!bSignal)
                    {
                        // the wait timed out, log an NT event noting this, and move along
                        string errorMessage = "Dns.GetHostByName(" + _xblConfigServerDNSName +
                            ") timed out. DNS will not be used to find NPDB";
                        capturedErrors += errorMessage + "\n";
                    }
                    else
                    {
                        try
                        {
                            IPHostEntry ipHostEntry = delegateGetHostByName.EndInvoke(iAsyncResult);
                            if (ipHostEntry == null)
                            {
                                // apparently there was no record, log an NT event noting this, and move along
                                string errorMessage = "Dns.GetHostByName(" + _xblConfigServerDNSName +
                                    ") returned null. DNS will not be used to find NPDB";
                                capturedErrors += errorMessage + "\n";
                            }
                            else
                            {
                                if (ipHostEntry.AddressList.Length < 1)
                                {
                                    // apparently there was a record, but no addresses for it.
                                    // log an NT event noting this, and move along
                                    string errorMessage = "Dns.GetHostByName(" +
                                        _xblConfigServerDNSName +
                                        ") returned a zero length list of IP addresses. DNS will not be used to find NPDB";
                                    capturedErrors += errorMessage + "\n";
                                }
                                else
                                {
                                    // we have at least one IP address. Use the first one in the list
                                    if (ipHostEntry.AddressList.Length > 1)
                                    {
                                        string errorMessage = "Dns.GetHostByName(" +
                                            _xblConfigServerDNSName +
                                            ") returned " + ipHostEntry.AddressList.Length +
                                            " IP addresses. The first address in the list will be used and the rest will be ignored";
                                        capturedErrors += errorMessage + "\n";
                                    }

                                    _npdbServer = ipHostEntry.AddressList[0].ToString();
                                    return _npdbServer;
                                }
                            }
                        }
                        catch (SocketException e)
                        {
                            // Dns.GetHostByName will throw a socket exception if the host is not
                            // known. Simply log an event and move along
                            string errorMessage = "Dns.GetHostByName(" + _xblConfigServerDNSName +
                                ") threw a SocketException. DNS will not be used to find NPDB. Exception message: " +
                                e.Message;
                            capturedErrors += errorMessage + "\n";
                        }
                    }

                    // if we get here, we didn't figure out where NPDB lives, so we log an
                    // event and throw
                    ApplicationException ae =
                        new ApplicationException("Unable to determine location of NPDB\n" + capturedErrors);
                    throw ae;
                }
            }
            set
            {
                lock (_lockobj)
                {
                    _npdbServer = value;
                }
            }
        }

        public static string NpdbDatabase
        {
            get
            {
                if (_npdbDatabase != null)
                {
                    // we've already figured out what the name of the NPDB database is, so return it
                    return _npdbDatabase;
                }

                lock (_lockobj)
                {
                    if (_npdbDatabase != null)
                    {
                        return _npdbDatabase;
                    }

                    // 1st precedence is to use the server specified in the XBL_CONFIG_DATABASE environment variable
                    string databaseEnvSetting = System.Environment.GetEnvironmentVariable(_xblConfigDatabaseEnvVarName);
                    if (databaseEnvSetting != null)
                    {
                        _npdbDatabase = databaseEnvSetting;
                        return _npdbDatabase;
                    }

                    // 2nd precedence is to use the database name specified in the Database value in the registry key:
                    // \HKLM\Software\Microsoft\XboxLive\CommonConfig
                    RegistryKey commonConfig = Registry.LocalMachine.OpenSubKey(_CommonConfigRegKeyPath);
                    if (commonConfig != null)
                    {
                        object o = commonConfig.GetValue(_DatabaseRegValueName);
                        // we should be able to cast this to a string, but we don't want to
                        // completely fail if the cast is bad
                        string temp = null;
                        try
                        {
                            temp = (string)o;
                        }
                        catch (InvalidCastException)
                        {
                        }

                        // if we got a database name, then we're done, otherwise, fall through
                        // to the next option to figure out the database name
                        if (temp != null)
                        {
                            _npdbDatabase = temp;
                            return _npdbDatabase;
                        }
                    }

                    // if we get here, none of the locations above specified a value for the
                    // database name, so we use the default of "npdb". I don't want services
                    // to compile defaults in, because I want those defaults to be in NPDB,
                    // but since this is a bootstrap to get to npdb, I think it's ok to compile
                    // in a default.
                    _npdbDatabase = _defaultDatabaseName;
                    return _npdbDatabase;
                }
            }
            set
            {
                lock (_lockobj)
                {
                    _npdbDatabase = value;
                }
            }
        }

        public static string NpdbConnectionString(int timeout, string applicationName)
        {
            string connString = "Data Source=" + NpdbServer
                + ";Initial Catalog=" + NpdbDatabase
                + ";Integrated Security=SSPI"
                + ";Connection Timeout=" + timeout
                + (!String.IsNullOrEmpty(applicationName) ? ";Application Name=" + applicationName : "");
            return connString;
        }




    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Misc\MasterKey.cs ===
using System;
using System.IO;
using System.Security.Cryptography;

namespace Microsoft.XboxLive.Auth
{
    internal class MasterKey : IDisposable
    {
        private const int ENCRYPTED_BLOCK_SIZE   = 256;
        private const int UNENCRYPTED_BLOCK_SIZE = 128;

        int _masterKeyVersion;
        RSACryptoServiceProvider _cryptoServiceProvider;

        public MasterKey(int masterKeyVersion)
        {
            _masterKeyVersion = masterKeyVersion;

            CspParameters parameters = new CspParameters();
            parameters.Flags = CspProviderFlags.UseMachineKeyStore | CspProviderFlags.UseExistingKey;
            parameters.KeyContainerName = ContainerName(masterKeyVersion);

            try {
                _cryptoServiceProvider = new RSACryptoServiceProvider(parameters);
            } catch (Exception e) {
                throw new Exception(String.Format("Error getting master key, version = {0}", masterKeyVersion), e);
            }
        }

        public int MasterKeyVersion
        {
            get { return _masterKeyVersion; }
        }

        public byte[] Decrypt(byte[] encryptedBytes)
        {
            
            byte[] tempBytes;

            using (MemoryStream inputStream = new MemoryStream(encryptedBytes)) {
                using (BinaryReader binaryReader = new BinaryReader(inputStream)) {
                    using (MemoryStream outputStream = new MemoryStream()) {
                        
                        while ((tempBytes = binaryReader.ReadBytes(ENCRYPTED_BLOCK_SIZE)).Length > 0) {

                            // the native code writes bytes in the reverse order
                            // of managed code.  reverse bytes for compatibility

                            Array.Reverse(tempBytes);

                            // decrypt the bytes using the provider and then we
                            // write to the stream so we can get one big  array

                            tempBytes = _cryptoServiceProvider.Decrypt(tempBytes, false);
                            outputStream.Write(tempBytes, 0, tempBytes.Length);
                        }

                        return outputStream.ToArray();
                    }
                }
            }
        }
        
        public byte[] Encrypt(byte[] unencryptedBytes)
        {
            byte[] tempBytes;

            using (MemoryStream inputStream = new MemoryStream(unencryptedBytes)) {
                using (BinaryReader binaryReader = new BinaryReader(inputStream)) {
                    using (MemoryStream outputStream = new MemoryStream()) {

                        while ((tempBytes = binaryReader.ReadBytes(UNENCRYPTED_BLOCK_SIZE)).Length > 0)
                        {
                            tempBytes = _cryptoServiceProvider.Encrypt(tempBytes, false);

                            // the native code writes bytes in the reverse order
                            // of managed code.  reverse bytes for compatibility

                            Array.Reverse(tempBytes);
                            outputStream.Write(tempBytes, 0, tempBytes.Length);
                        }

                        return outputStream.ToArray();
                    }
                }
            }
        }




        public void Dispose()
        {
            _cryptoServiceProvider.Clear();
        }

        private static string ContainerName(int masterKeyVersion)
        {
            return "XOMasterKey" + masterKeyVersion;
        }

        public static byte[] Decrypt(int masterKeyVersion, byte[] buffer)
        {
            using (MasterKey masterKey = new MasterKey(masterKeyVersion))
            {
                return masterKey.Decrypt(buffer);
            }
        }

        public static byte[] Encrypt(int masterKeyVersion, byte[] buffer)
        {
            using (MasterKey masterKey = new MasterKey(masterKeyVersion))
            {
                return masterKey.Encrypt(buffer);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Extensions\XAuthdataWeb.cs ===
﻿using System.Net;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Threading;
//using System.Data.Services.Client;

using Microsoft.IdentityModel.Claims;
using Microsoft.XboxLive.Auth.Protocol;
using Microsoft.XboxLive.Auth.Tokens;

namespace Microsoft.XboxLive.Auth
{
    /// <summary>
    /// These are LINQ extensions to various web requests, such as WebClient,
    /// HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
    /// to the outgoing request. These should be used by a service that is using an
    /// IClaimsPrincipal and that needs to call another service that is also using 
    /// XblAuthProtocolModule and has XAuthdataTokenHandler configured.
    /// </summary>
    /// <remarks>
    /// To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
    /// It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
    /// interface.
    /// </remarks>
    public static partial class AuthExtensions
    {
        #region WebClient

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="client"></param>
        public static void SetXAuthdata(this WebClient client)
        {
            client.Headers.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="client"></param>
        /// <param name="principal">Local instance or Thread.CurrentPrincipal</param>
        /// <example>
        /// webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        /// </example>
        public static void SetXAuthdata(this WebClient client, IClaimsPrincipal principal)
        {
            client.Headers.SetXAuthdata(principal);
        }

        #endregion

        #region HttpWebRequest

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="request"></param>
        public static void SetXAuthdata(this HttpWebRequest request)
        {
            request.Headers.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="request"></param>
        /// <param name="auth">Local instance or AuthHelper.Current</param>
        /// <example>
        /// webReq.SetXAuthdata(AuthHelper.Current);
        /// </example>
        public static void SetXAuthdata(this HttpWebRequest request, AuthHelper auth)
        {
            if (auth != null)
            {
                request.Headers.SetXAuthdata(auth.Principal);
            }
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="request"></param>
        /// <param name="principal">Local instance or Thread.CurrentPrincipal</param>
        /// <example>
        /// webReq.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        /// </example>
        public static void SetXAuthdata(this HttpWebRequest request, IClaimsPrincipal principal)
        {
            request.Headers.SetXAuthdata(principal);
        }

        #endregion

#if false
        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="context"></param>
        /// <param name="principal"></param>
        public static void SetXAuthdata(this DataServiceContext context, IClaimsPrincipal principal)
        {
           if (principal == null)
                return;
            XblAuthProtocolHandler handler = new XblAuthProtocolHandler();
            XAuthdataToken token = new XAuthdataToken(null, principal.Identities);
            string tokenString = handler.WriteToken(token);
            context.SendingRequest += (s, e) =>
            {
                e.RequestHeaders["Authorization"] = tokenString;
            };
        }
#endif

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="headers"></param>
        public static void SetXAuthdata(this WebHeaderCollection headers)
        {
            headers.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="headers"></param>
        /// <param name="auth"></param>
        public static void SetXAuthdata(this WebHeaderCollection headers, AuthHelper auth)
        {
            if (auth != null)
            {
                headers.SetXAuthdata(auth.Principal);
            }
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="headers"></param>
        /// <param name="principal"></param>
        public static void SetXAuthdata(this WebHeaderCollection headers, IClaimsPrincipal principal)
        {
            if (principal == null)
                return;

            headers[XblAuthProtocolHandler.HEADER_NAME] = principal.WriteToken();
        }

        internal static string WriteToken(this IClaimsPrincipal principal)
        {
            XblAuthProtocolHandler protocolHandler = new XblAuthProtocolHandler();
            XAuthdataToken token = new XAuthdataToken(null, principal.Identities);
            XAuthdataTokenHandler tokenHandler = new XAuthdataTokenHandler();

            return protocolHandler.WriteToken(token, tokenHandler);
        }
    }

}

namespace Microsoft.XboxLive.Auth.Extensions.ServiceModel
{
    /// <summary>
    /// These are LINQ extensions to various web requests, such as WebClient,
    /// HttpWebRequest, and WCF (coming soon), to facilitate adding XAuthdata information
    /// to the outgoing request. These should be used by a service that is using an
    /// IClaimsPrincipal and that needs to call another service that is also using 
    /// XblAuthProtocolModule and has XAuthdataTokenHandler configured.
    /// </summary>
    /// <remarks>
    /// To use these extensions, you need to use the Microsoft.XboxLive.Auth namespace.
    /// It is helpful to also use Microsoft.IdentityModel.Claims to get the IClaimsPrincipal
    /// interface.
    /// </remarks>
    public static partial class AuthExtensions
    {
        #region OperationContextScope

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="context"></param>
        public static void SetXAuthdata(this OperationContext context)
        {
            context.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="context"></param>
        /// <param name="principal"></param>
        public static void SetXAuthdata(this OperationContext context, IClaimsPrincipal principal)
        {
            if (principal == null)
                return;

            context.OutgoingMessageProperties.SetXAuthdata(principal);
        }

        #endregion
        #region MessageProperties

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="properties"></param>
        public static void SetXAuthdata(this MessageProperties properties)
        {
            properties.SetXAuthdata(Thread.CurrentPrincipal as IClaimsPrincipal);
        }

        /// <summary>
        /// Sets an XAuthdataToken in the Authorization HTTP header
        /// </summary>
        /// <param name="properties"></param>
        /// <param name="principal"></param>
        public static void SetXAuthdata(this MessageProperties properties, IClaimsPrincipal principal)
        {
            if (principal == null)
                return;

            HttpRequestMessageProperty msgProperties = new HttpRequestMessageProperty();

            msgProperties.SuppressEntityBody = false;
            msgProperties.Headers.Add(XblAuthProtocolHandler.HEADER_NAME, principal.WriteToken());

            properties[HttpRequestMessageProperty.Name] = msgProperties;
        }

        #endregion
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Misc\Blob.cs ===
// 
// Blob.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Blob class
// Xbox Online Service
//
// Represents a byte array, but provides lots of helpers for dealing with it, including 
// equality, to/from string, implicit casting, hashcodes, xml serialization, and more.

using System;
using System.Text;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace Microsoft.XboxLive.Auth
{
    // ------------------------------------------------------------------------------
    // class Blob
    //
    // This is a lightweight wrapper around byte[].  It provides lots of nice functions 
    // and helpers, but DOES NOT DEEP CLONE the original array or blob. So if you make a 
    // blob around a byte array and then change the byte array, your blob will change.  
    // Ditto if you create a new blob from another blob.  
    // ------------------------------------------------------------------------------
    internal struct Blob : IEquatable<Blob>, IComparable<Blob>, IXmlSerializable
    {
        private byte[] _value;

        public static Blob Empty
        {
            get { return new Blob(); }
        }

        private Blob(byte[] value)
        {
            _value = value;
        }

        private Blob(string s)
        {
            if (String.IsNullOrEmpty(s))
                throw new ArgumentException("s cannot be null");

            if (s.StartsWith("0x"))
                s = s.Substring(2);

            if ((s.Length % 2) == 1)
                s = "0" + s;

            _value = new byte[s.Length / 2];
            for (int i = 0; i < s.Length / 2; i++)
            {
                _value[i] = (byte)((unhex(s[i*2]) << 4) + unhex(s[i*2+1]));
            }
        }

        private static byte unhex(char c)
        {
            if (c >= '0' && c <= '9')
                return (byte)(c - '0');
            else if (c >= 'a' && c <= 'f')
                return (byte)(c - 'a' + 10);
            else if (c >= 'A' && c <= 'F')
                return (byte)(c - 'A' + 10);
            throw new FormatException("Invalid hex character: " + c);
        }

        public int Length
        {
            get 
            { 
                return (_value != null) ? _value.Length : 0; 
            }
        }

        public byte this[int i]
        {
            get { return _value[i]; }
            set { _value[i] = value; }
        }

        public override int GetHashCode()
        {
            if (_value == null)
                return 0;

            int hashCode = _value[0];
            for(int i = 1; i < _value.Length; i++)
            {
                // 1718205583 is prime
                hashCode = hashCode * 1718205583 + _value[i];
            }
            return hashCode;
        }

        public static implicit operator Blob(byte[] value)
        {
            return new Blob(value);
        }

        public static implicit operator byte[](Blob blob)
        {
            return blob._value;
        }

        public static bool operator ==(Blob b1, Blob b2)
        {
            return b1.Equals(b2);
        }

        public static bool operator !=(Blob b1, Blob b2)
        {
            return !b1.Equals(b2);
        }

        public override bool Equals(object o)
        {
            if (o == null) 
                return base.Equals(o);
            if (!(o is Blob))
                throw new InvalidCastException("The object argument is not a Blob object");
            return Equals((Blob)o);
        }

        public bool Equals(Blob other)
        {
            return CompareTo(other) == 0;
        }

        public int CompareTo(Blob other)
        {
            if (this.Length == 0 && other.Length == 0)
            {
                return 0;
            }
            else if (this.Length == 0)
            {
                return -1;
            }
            else if (other.Length == 0)
            {
                return 1;
            }
            else if (this.Length != other.Length)
            {
                // bit odd, but what else to do?
                return this.Length - other.Length;
            }
            else
            {
                for (int i = 0; i < this.Length; i++)
                {
                    if (this[i] != other[i])
                    {
                        return this[i] - other[i];
                    }
                }
                return 0;
            }
        }

        public static Blob Parse(string s)
        {
            return new Blob(s);
        }

        public static bool TryParse(string s, out Blob blob)
        {
            try
            {
                blob = Blob.Parse(s);
                return true;
            }
            catch
            {
                blob = new Blob();
                return false;
            }
        }           

        public void ReadXml(XmlReader reader)
        {
            string s = reader.ReadElementContentAsString();

        }

        public void WriteXml(XmlWriter writer)
        {
            writer.WriteValue(_value.ToString());
        }

        public XmlSchema GetSchema()
        {
            return (null);
        }

        private readonly static char[] _hexCharLookup = new char[] { 
            '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F' 
        };

        public override string ToString()
        {
            if (_value == null)
                return String.Empty;

            char[] charstr = new char[_value.Length * 2];
            int charPos = 0;
            for (int i = 0; i < _value.Length; i++)
            {
                byte v = _value[i];
                charstr[charPos++] = _hexCharLookup[(v & 0xF0) >> 4];
                charstr[charPos++] = _hexCharLookup[(v & 0x0F)];
            }
            return new string(charstr);
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:25 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Claims\AuthInternalClaimTypes.cs ===
using System.Collections.Specialized;
using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth.Claims
{
    // READ THIS!
    // Hey you. If you're adding a new claim type, make sure you also update the 
    // ValueTypes collection below to provide a default ClaimValueType for your 
    // new claim. Thanks.

    /// <summary> </summary>
    public static class AuthInternalClaimTypes
    {
        /// <summary>the caller is internal.  the value of this
        /// claim is typically the component name of the caller</summary>
        public const string Internal = "http://schemas.microsoft.com/xbox/2011/07/claims/internal";

        /// <summary>connection claim typically added by a gateway.
        /// claim should never appear in a user/machine/title token</summary>
        public const string Ip = "http://schemas.microsoft.com/xbox/2011/07/claims/connection/ip";

        /// <summary>connection claim typically added by a gateway.
        /// claim should never appear in a user/machine/title token</summary>
        public const string Port = "http://schemas.microsoft.com/xbox/2011/07/claims/connection/port";

        /// <summary>connection claim typically added by a gateway.
        /// claim should never appear in a user/machine/title token</summary>
        public const string PartnerId = "http://schemas.microsoft.com/xbox/2011/07/claims/partner/id";

        // NEW CLAIMS MUST ALSO BE ADDED TO THE VALUETYPES COLLECTION

        /// <summary>the claim value types for all AuthClaimTypes</summary>
        public static NameValueCollection ValueTypes = new NameValueCollection()
        {
            { Internal,  ClaimValueTypes.String },
            { Ip,        ClaimValueTypes.String },
            { Port,      ClaimValueTypes.String },
            { PartnerId, ClaimValueTypes.String },
        };
    }   
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Misc\ServiceKey.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace Microsoft.XboxLive.Auth
{
    internal enum ServiceKeyType
    {
        KDC_PASSPORT_NET         = 1,
        KDC_XBOX_COM             = 2,
        PASSPORT_DELADMIN        = 3,
        BILLING                  = 4,
        KEY_ENCRYPTION_KEY       = 5,
        SECURITY_GATEWAY         = 6,
        SIGNATURE_SERVER         = 7,
        WMDRM_GROUP_PRIVATE_KEY  = 8,
        KDC_ECHO_DATA            = 9,
        WMRM_EMS_SEED_ID         = 10,
        WMRM_SYNCCAST_AES_KEY    = 11,
        WIREDATA_PRIVATE_KEY     = 12,
        WIREDATA_PUBLIC_KEY      = 13,
        SECP_DB_PRIVATE_KEY      = 14,
        SECP_DB_PUBLIC_KEY       = 15,
        TOKEN_KEY_ENCRYPTION_KEY = 16,
        PLAYREADY_XBOX360_MODEL_PRIVATE_KEY = 17,
        XAUTHDATA_SIGNING_KEY    = 18,
        MUSICNET_AES_KEY         = 20,
        TESTONLY_XKEYMGR         = 999
    }

    // Borrowed from \private\common\core\service\ServiceKey.cs.
    // Somewhat heavily modified. The static methods changed a lot, as I don't
    // care about the key version -- I want a list of keys of a certain type.

    internal class ServiceKey
    {
        private ServiceKeyType _keyType;
        private int            _keyVersion;
        private int            _masterKeyVersion;
        private int?           _siteId;
        private int?           _lifetime;
        private string         _serviceData1;
        private string         _serviceData2;

        private byte[]         _key;
        private Exception      _e;

        private ServiceKey(ServiceKeyType keyType, int keyVersion, int masterKeyVersion, byte[] key)
        {
            _keyType          = keyType;
            _keyVersion       = keyVersion;
            _masterKeyVersion = masterKeyVersion;
            _key              = key;
        }

        private ServiceKey(ServiceKeyType keyType, int keyVersion, int masterKeyVersion, Exception e)
        {
            _keyType          = keyType;
            _keyVersion       = keyVersion;
            _masterKeyVersion = masterKeyVersion;
            _e                = e;
        }

        // all the key fields have only private setters

        public ServiceKeyType KeyType
        {
            get { return _keyType; }
            private set { _keyType = value; }
        }

        public string ServiceData1
        {
            get { return _serviceData1; }
            private set { _serviceData1 = value; }
        }

        public string ServiceData2
        {
            get { return _serviceData2; }
            private set { _serviceData2 = value; }
        }

        public int KeyVersion
        {
            get { return _keyVersion; }
            private set { _keyVersion = value; }
        }

        public int MasterKeyVersion
        {
            get { return _masterKeyVersion; }
        }

        public byte[] Key
        {
            get { return _key; }
        }

        public int? Lifetime
        {
            get { return _lifetime; }
            set { _lifetime = value; }
        }

        public int? SiteId
        {
            get { return _siteId; }
            set { _siteId = value; }
        }

        private Exception Exception
        {
            get { return _e; }
        }

        private static Hashtable _cache = null;

        public static void ClearCache()
        {
            _cache = null;
        }

        public static List<ServiceKey> Get(ServiceKeyType keyType)
        {
            string serviceKeyHash = GetHashKey(keyType);
            List<ServiceKey> listKeys = Cache[serviceKeyHash] as List<ServiceKey>;

            if (listKeys == null)
            {
                try
                {
                    listKeys = GetFromDatabase(keyType);
                }
                catch (Exception)
                {
                    // Store empty list in cache to indicate we tried, and failed.
                    // Don't want to keep attempting expensive database connections
                    // if we know they are going to fail.
                    listKeys = new List<ServiceKey>();
                    throw;
                }
                finally
                {
                    lock (typeof(ServiceKey))
                    {
                        Cache[serviceKeyHash] = listKeys;
                    }
                }
            }

            return listKeys;
        }

        private static List<ServiceKey> GetFromDatabase(ServiceKeyType keyTypeFilter)
        {
            List<ServiceKey> keyList = new List<ServiceKey>();
            string connString = DbUtil.NpdbConnectionString(15, null);
            using (SqlConnection connection = new SqlConnection(connString))
            {
                using (SqlCommand command = connection.CreateCommand())
                {
                    command.CommandText = "p_service_keys_get";
                    command.CommandType = CommandType.StoredProcedure;
                    command.Parameters.Add("@i_key_type", SqlDbType.Int).Value = (Int32)keyTypeFilter;

                    connection.Open();

                    using (SqlDataReader reader = command.ExecuteReader())
                    {
                        int siteIdOrdinal   = reader.GetOrdinal("i_site_id");
                        int lifetimeOrdinal = reader.GetOrdinal("i_ticket_lifetime_secs");

                        while (reader.Read()) 
                        {
                            // figure out how many bytes  are  in  the  key
                            // allocate a buffer and read the encrypted key

                            int ordinal = reader.GetOrdinal("bin_key");
                            byte[] encryptedBytes = new byte[reader.GetBytes(ordinal, 0, null, 0, 0)];
                            reader.GetBytes(ordinal, 0, encryptedBytes, 0, encryptedBytes.Length);

                            // instantiate a new service key  objects  with
                            // the key fields, then fill  in  other  fields

                            ServiceKey serviceKey = null;
                            ServiceKeyType keyType = (ServiceKeyType) reader["i_key_type"];
                            int keyVersion = (int) reader["i_key_version"];
                            int masterKeyVersion = (int)reader["i_master_key_version"];

                            try
                            {
                                serviceKey = new ServiceKey(
                                    keyType, keyVersion, masterKeyVersion, MasterKey.Decrypt(masterKeyVersion, encryptedBytes)
                                );
                            }
                            catch (Exception e)
                            {
//                                 Xom.NtEvent(XEvent.Id.SERVICE_KEY_LOAD_ERROR, e,
//                                     "Error loading service key, keyType = {0} ({1}), keyVersion = {2}", keyType, (int)keyType, keyVersion
//                                 );

                                // create a poisoned key that will throw an
                                // exception when someone tries to  get  it

                                serviceKey = new ServiceKey(keyType, keyVersion, masterKeyVersion, e);
                            }

                            // get other key data - even if key is poisoned

                            serviceKey.ServiceData1 = (string) reader["vc_service_data1"];
                            serviceKey.ServiceData2 = (string) reader["vc_service_data2"];

                            // special handling for fields with null values

                            if (! reader.IsDBNull(siteIdOrdinal))   serviceKey.SiteId   = reader.GetInt32(siteIdOrdinal);
                            if (! reader.IsDBNull(lifetimeOrdinal)) serviceKey.Lifetime = reader.GetInt32(lifetimeOrdinal);

                            // add key to cache
                            keyList.Add(serviceKey);

                        }
                    } // using
                } // using
            } // using
            
            return keyList;
        }

        private static Hashtable Cache
        {
            get
            {
                Hashtable cache = _cache;
                if (cache != null) return cache;

                lock (typeof(ServiceKey))
                {
                    cache = _cache;
                    if (cache != null) return cache;

                    cache = new Hashtable();
                    return _cache = cache;
                }
            }
        }

        private static string GetHashKey(ServiceKey serviceKey)
        {
            return GetHashKey(serviceKey.KeyType);
        }

        private static string GetHashKey(ServiceKeyType keyType)
        {
            return ((int) keyType).ToString();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:27 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:46 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:42 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:08:26 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Tokens\XAuthdataConstants.cs ===
using System;
using System.Collections.Specialized;

using Microsoft.XboxLive.Auth.Claims;
using Microsoft.IdentityModel.Claims;

namespace Microsoft.XboxLive.Auth.Tokens
{
    /// <summary>
    /// </summary>
    internal static class XAuthdataConstants
    {
        public static class Elements
        {
            // Sample:
            // <xauthdata>
            //   <msg>
            //     <identity>
            //       <c>...</c>
            //       <xc>...</xc>
            //     </identity>
            //   </msg>
            //   <sig>
            //     ...
            //   </sig>
            // </xauthdata>
            public const string XAUTHDATATOKEN = "xauthdata";
            public const string MESSAGE = "msg";
            public const string SIGNATURE = "sig";
            public const string IDENTITY = "identity";
            public const string CLAIM = "c";
            public const string XBOXCLAIM = "xc";
        };

        public static class Attributes
        {
            // <xauthdatatoken>
            public const string TOKENID = "id";
            public const string ENCTYPE = "enc";
            public const string VERSION = "ver";

            // <msg>
            public const string TIMESTAMP = "ts";

            // <identity>
            public const string AUTHTYPE = "authtype";

            // <claim> and <xclaim>
            public const string CLAIMTYPE = "t";
            public const string CLAIMVALUETYPE = "vt";
            public const string ISSUER = "i";
        };

        public static class Values
        {
            public const int VERSION                       = 1;
            public const string ENCODINGTYPE_XML           = "xml";
            public const string XBOXCLAIM_CLAIMTYPE_PREFIX = "http://schemas.microsoft.com/xbox/2011/07/claims/";
        }

        public static NameValueCollection V0ValueTypes = new NameValueCollection()
        {
            { AuthClaimTypes.FlowToken, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.DeviceId, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.DeviceType, ClaimValueTypes.String },
            { AuthClaimTypes.TitleId, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.TitleVersion, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.Xuid, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.Puid, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.PartnerXuid, ClaimValueTypes.HexBinary },
            { AuthClaimTypes.Country, ClaimValueTypes.Integer },
            { AuthClaimTypes.Gamertag, ClaimValueTypes.String },
            { AuthClaimTypes.Tier, ClaimValueTypes.String },
            { AuthClaimTypes.Privileges, AuthClaimValueTypes.IntegerArray },
            { AuthClaimTypes.ClientIpPort, AuthClaimValueTypes.IpAddress },
            { AuthClaimTypes.Language, ClaimValueTypes.Integer },
            { AuthClaimTypes.AgeGroup, ClaimValueTypes.String },
            { AuthClaimTypes.Status, ClaimValueTypes.String },
            { AuthClaimTypes.DelegationToken, ClaimValueTypes.HexBinary },
        };
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Tokens\XAuthdataToken.cs ===
﻿using System;
using System.Collections.ObjectModel;
using System.Collections.Generic;
using System.IdentityModel.Tokens;
using System.Linq;
using System.Security.Cryptography;
using System.Threading;

using Microsoft.IdentityModel.Claims;
using Microsoft.XboxLive.Auth.Claims;
using Microsoft.XboxLive.Auth.Protocol;

namespace Microsoft.XboxLive.Auth.Tokens
{
    /// <summary>
    /// XAuthdataToken is the internal representation of authorization
    /// internal to the Xbox LIVE data center.  XAuthdataToken objects
    /// must never leave the data center.
    /// </summary>
    public class XAuthdataToken : SecurityToken
    {
        private string _Id;
        private List<IClaimsIdentity> _IdentityList;
        private DateTime _ValidFrom;
        private DateTime _ValidTo;

        [ThreadStatic]
        private static RandomNumberGenerator _random = null;

        private RandomNumberGenerator Random
        {
            get
            {
                // random number generator is thread static.  we may
                // not have one on our thread yet. if not create one.

                if (_random == null) _random = RandomNumberGenerator.Create();
                return _random;
            }
        }


        /// <summary>
        /// Instantiate an XAuthdataToken object using the claims from
        /// the supplied identities.
        /// </summary>
        /// <param name="identityList">A list of identities continaing
        /// claims used to populate the XAuthdataToken</param>
        public XAuthdataToken(IEnumerable<IClaimsIdentity> identityList)
            : this(null, identityList)
        {
        }

        /// <summary>
        /// Instantiate an XAuthdataToken object using the claims from
        /// the supplied identities.
        /// </summary>
        /// <param name="id">Token id (statistically unique identifier)</param>
        /// <param name="identityList">A list of identities continaing
        /// claims used to populate the XAuthdataToken</param>
        public XAuthdataToken(string id, IEnumerable<IClaimsIdentity> identityList)
        {
            _IdentityList = (identityList != null)
                ? identityList.ToList()
                : new List<IClaimsIdentity>();
            SetId(id);

            _ValidFrom = DateTime.UtcNow;
            _ValidTo = DateTime.UtcNow.AddDays(1); // completely arbitrary
        }

        /// <summary>
        /// Gets the token id. The token id is initialized during
        /// construction
        /// </summary>
        public override string Id
        {
            get
            {
                return _Id;
            }
        }

        /// <summary>
        /// </summary>
        public List<IClaimsIdentity> Identities
        {
            get
            {
                return _IdentityList;
            }
        }

        /// <summary>
        /// </summary>
        public override ReadOnlyCollection<SecurityKey> SecurityKeys
        {
            get { throw new NotImplementedException(); }
        }

        /// <summary>
        /// Gets the datetime from which this token is valid
        /// </summary>
        public override DateTime ValidFrom
        {
            get { return _ValidFrom; }
        }

        /// <summary>
        /// Gets the datetime until which this token is valid
        /// </summary>
        public override DateTime ValidTo
        {
            get { return _ValidTo; }
        }

        private void SetId(string id)
        {
            if (String.IsNullOrEmpty(id) && _IdentityList != null)
            {
                id = 
                    (from i in _IdentityList
                     from c in i.Claims
                     where c.ClaimType == AuthClaimTypes.FlowToken
                     select c.Value)
                    .FirstOrDefault();
            }
            if (String.IsNullOrEmpty(id))
            {
                byte[] buffer = new byte[8];
                Random.GetBytes(buffer);
                id = BitConverter.ToUInt64(buffer, 0).ToString("X").PadLeft(16, '0');
            }
            _Id = id;
        }

        /// <summary>
        /// Returns a serialized XAuthData XML.
        /// </summary>
        public override string ToString()
        {            
            XblAuthProtocolHandler protocolHandler = new XblAuthProtocolHandler();
            XAuthdataToken token = new XAuthdataToken(null, Identities);
            XAuthdataTokenHandler tokenHandler = new XAuthdataTokenHandler();
            
            return protocolHandler.WriteToken(token, tokenHandler);
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\amd64\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("11.8.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("11.8.31.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 7:29:47 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\obj\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 10/27/2012 5:24:29 PM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal\Tokens\XAuthdataTokenHandler.cs ===
﻿using System;
using System.Collections.Generic;
using System.Xml;
using System.Xml.Linq;
using System.IdentityModel.Tokens;
using System.Linq;
using System.Security.Cryptography;
using System.Configuration;
using System.Text;

using Microsoft.IdentityModel.Claims;
using Microsoft.IdentityModel.Tokens;

using Microsoft.XboxLive.Auth.Claims;
using Microsoft.XboxLive.Auth;

namespace Microsoft.XboxLive.Auth.Tokens
{
    /// <summary>
    /// </summary>
    internal class XAuthdataTokenHandler : SecurityTokenHandler
    {
        private const string c_DefaultEncodingType = XAuthdataConstants.Values.ENCODINGTYPE_XML;
        private const int    c_DefaultTokenVersion = XAuthdataConstants.Values.VERSION;
        
        private const string c_Config_XAuthdataSigningKeysName = "XAuthdataSigningKeys";
        private const string c_Config_XAuthdataMasterKeyVersionsName = "XAuthdataMasterKeyVersions";
        private const string c_Config_XAuthdataEnableSignaturesName = "XAuthdataEnableSignatures";
        private const string c_Config_XAuthdataEnableClockSkewVerificationName = "XAuthdataEnableClockSkewVerification";
        private const string c_Config_XAuthdataMaxClockSkewSecondsName = "XAuthdataMaxClockSkewSeconds";

        private const int c_DefaultMaxClockSkewSeconds = 300;

        public string TokenEncodingType { get; private set; }
        public int    TokenVersion { get; private set; }
        public int    MaxClockSkewSeconds { get; private set; }
        public bool   EnableSignatureVerification { get; set; }
        public bool   EnableClockSkewVerification { get; set; }

        private List<byte[]> SignatureVerificationKeys { get; set; }
        private byte[] SignatureCreationKey { get; set; }

        private static volatile List<byte[]> CachedSignatureVerificationKeys = null;

        public XAuthdataTokenHandler()
        {
            Init();

            try
            {
                SignatureVerificationKeys = CachedSignatureVerificationKeys;
                if (SignatureVerificationKeys == null)
                {
                    SignatureVerificationKeys = GetSigningKeys();

                    // May be a race condition, but that's ok. Assume it would end in the
                    // same result.
                    CachedSignatureVerificationKeys = SignatureVerificationKeys;
                }

                // Always use the oldest key for creating the signature. The process for
                // rolling a key will be:
                // 1. Add 2nd key to configuration, push to all machines
                //    - creation uses 1st key
                //    - verification uses 1st key then tries 2nd key
                // 2. Remove 1st key from configuration, push to all machines
                SignatureCreationKey = SignatureVerificationKeys.Count > 0
                    ? SignatureVerificationKeys.First()
                    : null;
            }
            catch (Exception)
            {
                if (EnableSignatureVerification)
                    throw;
                SignatureVerificationKeys = new List<byte[]>();
                SignatureCreationKey = null;

                if (CachedSignatureVerificationKeys == null)
                {
                    CachedSignatureVerificationKeys = SignatureVerificationKeys;
                }
            }
        }

        private void Init()
        {
            TokenEncodingType   = c_DefaultEncodingType;
            TokenVersion        = c_DefaultTokenVersion;
            MaxClockSkewSeconds = c_DefaultMaxClockSkewSeconds;

            EnableSignatureVerification = true;
            EnableClockSkewVerification = true;

            string settingVal;
            settingVal = ConfigurationManager.AppSettings[c_Config_XAuthdataEnableSignaturesName];
            if (String.Equals(settingVal, "0", StringComparison.OrdinalIgnoreCase) ||
                String.Equals(settingVal, "false", StringComparison.OrdinalIgnoreCase))
            {
                EnableSignatureVerification = false;
            }

            settingVal = ConfigurationManager.AppSettings[c_Config_XAuthdataEnableClockSkewVerificationName];
            if (String.Equals(settingVal, "0", StringComparison.OrdinalIgnoreCase) ||
                String.Equals(settingVal, "false", StringComparison.OrdinalIgnoreCase))
            {
                EnableClockSkewVerification = false;
            }

            settingVal = ConfigurationManager.AppSettings[c_Config_XAuthdataMaxClockSkewSecondsName];
            if (settingVal != null)
            {
                MaxClockSkewSeconds = int.Parse(settingVal);
            }
        }

        public override string[] GetTokenTypeIdentifiers()
        {
            return new string[]
            {
                //"http://schemas.microsoft.com/xbox/2011/07/xad-token-profile-1.0",
                "xad-token-profile-1.0",
            };
        }

        public override Type TokenType
        {
            get { return typeof(XAuthdataToken); }
        }

        public override bool CanValidateToken { get { return true; } }

        public override bool CanWriteToken { get { return true; } }

        public override bool CanReadToken(XmlReader reader)
        {
            if (reader.IsStartElement(XAuthdataConstants.Elements.XAUTHDATATOKEN))
            {
                return true;
            }

            return false;
        }

        public bool CanReadToken(XElement rootElement)
        {
            return rootElement.Name == XAuthdataConstants.Elements.XAUTHDATATOKEN;
        }

        public override SecurityToken ReadToken(XmlReader reader)
        {
            if (!CanReadToken(reader))
            {
                throw new XmlException("Unsupported security token.");
            }

            XElement rootElement = XElement.Load(reader, LoadOptions.None);
            return ReadToken(rootElement);
        }

        public SecurityToken ReadToken(string tokenString)
        {
            return ReadToken(XElement.Parse(tokenString));
        }

        public SecurityToken ReadToken(XElement rootElement)
        {
            if (rootElement == null)
            {
                throw new ArgumentNullException("rootElement");
            }
            if (rootElement.Name != XAuthdataConstants.Elements.XAUTHDATATOKEN)
            {
                throw new ArgumentException("Root element unknown: " + rootElement.Name, "rootElement");
            }

            string tokenId = (string)rootElement.Attribute(XAuthdataConstants.Attributes.TOKENID);
            string encodingType = (string)rootElement.Attribute(XAuthdataConstants.Attributes.ENCTYPE);

            // early versions of xauthdata don't have a version attribute
            // make that version zero. if they provide a version - use it

            int version = 0;

            XAttribute attribute = rootElement.Attribute(XAuthdataConstants.Attributes.VERSION);
            if (attribute != null) version = (int) attribute;

            // Decode the XML tree
            rootElement = DecodeElements(rootElement, encodingType);
            var messageElement = rootElement.Element(XAuthdataConstants.Elements.MESSAGE);
            var signatureElement = rootElement.Element(XAuthdataConstants.Elements.SIGNATURE);

            if (messageElement == null)
            {
                throw new InvalidSecurityTokenException("No '" + XAuthdataConstants.Elements.MESSAGE + "' element found in token.");
            }

            if (EnableSignatureVerification)
            {
                if (signatureElement == null)  {
                    throw new InvalidSecurityTokenException("No '" + XAuthdataConstants.Elements.SIGNATURE + "' element found in token.");
                }

                // Message not tampered with?
                VerifySignature(messageElement, signatureElement.Value);
            }

            if (EnableClockSkewVerification)
            {
                string timestampStr = (string)messageElement.Attribute(XAuthdataConstants.Attributes.TIMESTAMP);
                DateTime timestamp = DateTime.Parse(timestampStr);
                DateTime now = DateTime.UtcNow;
                double diffSeconds = Math.Abs((now - timestamp).TotalSeconds);
                if (diffSeconds > MaxClockSkewSeconds)
                {
                    throw new InvalidSecurityTokenException(String.Format(
                        "Token timestamp out of range: {0} exceeds local time {1} +/- {2} seconds.",
                        timestampStr, now, MaxClockSkewSeconds));
                }
            }

            // Identities
            var elIdentities = messageElement.Elements(XAuthdataConstants.Elements.IDENTITY);
            List<IClaimsIdentity> identityList = new List<IClaimsIdentity>();
            foreach (var elIdentity in elIdentities)
            {
                // Identity attributes
                string authType = (string)elIdentity.Attribute(XAuthdataConstants.Attributes.AUTHTYPE);

                ClaimsIdentity claimsIdentity = new ClaimsIdentity(authType);
                identityList.Add(claimsIdentity);

                // Claims
                foreach (var elClaim in elIdentity.Elements(XAuthdataConstants.Elements.CLAIM))
                {
                    string type = (string)elClaim.Attribute(XAuthdataConstants.Attributes.CLAIMTYPE);
                    if (String.IsNullOrEmpty(type))
                        throw new XmlException("<claim> type attribute is required");
                    string valueType = (string)elClaim.Attribute(XAuthdataConstants.Attributes.CLAIMVALUETYPE);
                    if (String.IsNullOrEmpty(valueType))
                        valueType = ClaimValueTypes.String;
                    string issuer = (string)elClaim.Attribute(XAuthdataConstants.Attributes.ISSUER);

                    Claim claim = new Claim(type, elClaim.Value, valueType, issuer);
                    claimsIdentity.Claims.Add(claim);
                }

                // if the element is <xc> then it is an xbox claim, and we have to
                // reconstitute with the claimType prefix and the claim value type

                foreach (var elClaim in elIdentity.Elements(XAuthdataConstants.Elements.XBOXCLAIM))
                {
                    string type = (string) elClaim.Attribute(XAuthdataConstants.Attributes.CLAIMTYPE);

                    if (String.IsNullOrEmpty(type)) {
                        throw new XmlException("<claim> type attribute is required");
                    }

                    type = XAuthdataConstants.Values.XBOXCLAIM_CLAIMTYPE_PREFIX + type;
                    
                    string issuer = (string)elClaim.Attribute(XAuthdataConstants.Attributes.ISSUER);
                    string valueType = (string) elClaim.Attribute(XAuthdataConstants.Attributes.CLAIMVALUETYPE); 

                    // if there is a value type,  then use  that.  otherwise  we
                    // glean the data type as a function of the authdata version
                    
                    if (String.IsNullOrEmpty(valueType))  {
                        valueType = version == 0 ? XAuthdataConstants.V0ValueTypes[type] : AuthClaimTypes.ValueTypes[type]; 
                    }

                    Claim claim = new Claim(type, elClaim.Value, valueType, issuer);
                    claimsIdentity.Claims.Add(claim);
                }
            }

            // Finally ready for the token
            XAuthdataToken token = new XAuthdataToken(
                tokenId,
                identityList);

            return token;                
        }

        public override void WriteToken(XmlWriter writer, SecurityToken token)
        {
            XAuthdataToken xauthToken = token as XAuthdataToken;
            if (xauthToken == null)
            {
                base.WriteToken(writer, token);
                return;
            }

            XElement rootElement = WriteToken(xauthToken);

            // Write them and we're done
            rootElement.WriteTo(writer);
        }

        public XElement WriteToken(XAuthdataToken xauthToken)
        {
            if (xauthToken == null)
            {
                throw new ArgumentNullException("xauthToken");
            }
            XElement rootElement = new XElement(
                XAuthdataConstants.Elements.XAUTHDATATOKEN,
                new XAttribute(XAuthdataConstants.Attributes.TOKENID, xauthToken.Id),
                new XAttribute(XAuthdataConstants.Attributes.ENCTYPE, TokenEncodingType),
                new XAttribute(XAuthdataConstants.Attributes.VERSION, TokenVersion)
            );

            var messageElement = new XElement(
                XAuthdataConstants.Elements.MESSAGE,
                new XAttribute(XAuthdataConstants.Attributes.TIMESTAMP, DateTime.UtcNow.ToString())
                );
            rootElement.Add(messageElement);

            // Identities
            foreach (var ident in xauthToken.Identities)
            {
                XElement identEl = new XElement(
                    XAuthdataConstants.Elements.IDENTITY,
                    new XAttribute(XAuthdataConstants.Attributes.AUTHTYPE, ident.AuthenticationType)
                    );
               messageElement.Add(identEl);

                // Claims
                foreach (var claim in ident.Claims)
                {
                    string elementType        = null;
                    XAttribute claimType      = null;
                    XAttribute claimValueType = null;
                    
                    XAttribute claimIssuer    =
                        (! String.IsNullOrEmpty(claim.Issuer) && claim.Issuer != "LOCAL AUTHORITY") ?
                        new XAttribute(XAuthdataConstants.Attributes.ISSUER, claim.Issuer) : null;

                    if (claim.ClaimType.StartsWith(XAuthdataConstants.Values.XBOXCLAIM_CLAIMTYPE_PREFIX) && 
                       (AuthClaimTypes.ValueTypes[claim.ClaimType] != null))
                    {
                        // well known xbox claim types are encoded with a different
                        // element to facilitate deserialization on the  other  end

                        elementType = XAuthdataConstants.Elements.XBOXCLAIM;
                        
                        // xbox claim types have a common prefix, save ourselves 40
                        // bytes per claim, by stripping the prefix on  each  claim

                        claimType = new XAttribute(
                            XAuthdataConstants.Attributes.CLAIMTYPE,
                            claim.ClaimType.Substring(XAuthdataConstants.Values.XBOXCLAIM_CLAIMTYPE_PREFIX.Length)
                        );

                        // if value type doesn't match expected value type and it's
                        // not null or empty,  then  write real claim type to token

                        if (! claim.ValueType.Equals(AuthClaimTypes.ValueTypes[claim.ClaimType])) {
                            if (! String.IsNullOrEmpty(claim.ValueType)) {
                                claimValueType = new XAttribute(XAuthdataConstants.Attributes.CLAIMVALUETYPE, claim.ValueType);
                            }
                        }
                    }
                    else {
                    
                        // standard claim element with a fully qualified claim type
                    
                        elementType = XAuthdataConstants.Elements.CLAIM;
                        claimType   = new XAttribute(XAuthdataConstants.Attributes.CLAIMTYPE, claim.ClaimType);
                        
                        // skip claim value type if not present,  or it is a string

                        if (! String.IsNullOrEmpty(claim.ValueType) && claim.ValueType != ClaimValueTypes.String) {
                            claimValueType = new XAttribute(XAuthdataConstants.Attributes.CLAIMVALUETYPE, claim.ValueType);
                        }
                    }
                    
                    // claimValueType may be null.  that's okay.  XElement
                    // does the right thing and doesn't add  an  attribute

                    identEl.Add(
                        new XElement(elementType, claimType, claimValueType, claimIssuer, claim.Value)
                    );
                }
            }

            // Signature. Always create if there is a key configured.
            if (SignatureCreationKey != null)
            {
                XElement signatureElement = new XElement(
                    XAuthdataConstants.Elements.SIGNATURE,
                    CreateSignature(messageElement, SignatureCreationKey));
                rootElement.Add(signatureElement);
            }

            // Encode the XML tree into a new one
            rootElement = EncodeElements(rootElement, TokenEncodingType);

            return rootElement;
        }

        public override ClaimsIdentityCollection ValidateToken(SecurityToken token)
        {
            XAuthdataToken xauthToken = token as XAuthdataToken;
            if (xauthToken == null)
            {
                return base.ValidateToken(token);
            }

            // @@@ XAuthdata is inherently trusted, for now. Maybe rethink this and 
            // include an issuer. If so, validate here by looking up in the 
            // configuration.

            return new ClaimsIdentityCollection(xauthToken.Identities as IEnumerable<IClaimsIdentity>);
        }

        /// <summary>
        /// Retrieve one or more signature keys from the configuration store. It currently
        /// uses the app settings in the web.config, but could be extended in the future 
        /// for registry, database, file, or external code support.
        /// </summary>
        /// <example>
        ///   [appSettings]
        ///     [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF..."/]
        ///     [add key="XAuthdataMasterKeyVersions" value="1"/]
        ///   [/appSettings]
        ///
        ///   [appSettings]
        ///     [add key="XAuthdataSigningKeys" value="00112233445566778899AABBCCDDEEFF...,00102030405060708090A0B0C0D0E0F0..."/]
        ///     [add key="XAuthdataMasterKeyVersions" value="1,1"/]
        ///   [/appSettings]
        /// </example>
        /// <returns>List of keys, ordered oldest to newest</returns>
        private static List<byte[]> GetSigningKeys()
        {
            string encryptedHexKeyStr = null;
            string masterKeyVerStr = null;
            try
            {
                // First try local config file
                encryptedHexKeyStr = ConfigurationManager.AppSettings[c_Config_XAuthdataSigningKeysName];
                masterKeyVerStr = ConfigurationManager.AppSettings[c_Config_XAuthdataMasterKeyVersionsName];
                if (encryptedHexKeyStr != null)
                {
                    return GetSigningKeys(encryptedHexKeyStr, masterKeyVerStr);
                }

                // Then try the database. Yes, they are mutually exclusive.
                List<ServiceKey> listKeys = ServiceKey.Get(ServiceKeyType.XAUTHDATA_SIGNING_KEY);
                return listKeys
                    .OrderBy(k => k.KeyVersion)
                    .Select(k => k.Key)
                    .ToList();
            }
            catch (Exception e)
            {
                throw new FormatException("Unhandled error for web.config appSettings (or database) " +
                    c_Config_XAuthdataSigningKeysName + "='" + encryptedHexKeyStr + "' and " +
                    c_Config_XAuthdataMasterKeyVersionsName + "='" + masterKeyVerStr + "'.",
                    e);
            }
        }

        private static List<byte[]> GetSigningKeys(string encryptedHexKeysStr, string masterKeyVersionStr)
        {
            if (String.IsNullOrEmpty(encryptedHexKeysStr))
            {
                throw new ArgumentNullException("encryptedHexKeysStr");
            }

            string[] encryptedHexKeys = encryptedHexKeysStr.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);
            string[] masterKeys = String.IsNullOrEmpty(masterKeyVersionStr)
                ? new string[] { }
                : masterKeyVersionStr.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            if (masterKeys.Length > 0 && masterKeys.Length < encryptedHexKeys.Length)
            {
                throw new ArgumentException("Number of keys provided, " + encryptedHexKeys.Length + 
                                            ", does not match the number of master key versions, " +
                                            masterKeys.Length + ".");
            }

            List<byte[]> decryptedKeys = new List<byte[]>(encryptedHexKeys.Length); 
            for (int i = 0; i < encryptedHexKeys.Length; i++)
            {
                byte[] encryptedKey = Blob.Parse(encryptedHexKeys[i]);
                int masterKeyVersion = (masterKeys.Length == 0) ? 1 : int.Parse(masterKeys[i]);
                using (var masterKey = new MasterKey(masterKeyVersion))
                {
                    decryptedKeys.Add(masterKey.Decrypt(encryptedKey));
                }
            }

            // Order matters. First key is oldest key. Last key is most recent key. 
            return decryptedKeys;
        }

        private void VerifySignature(XElement messageElement, string base64Signature)
        {
            foreach (byte[] key in SignatureVerificationKeys)
            {
                string signatureComputed = CreateSignature(messageElement, key);

                // These are both base64 strings, so we can just compare them directly.
                if (String.Equals(base64Signature, signatureComputed, StringComparison.Ordinal))
                {
                    return;
                }
            }
            throw new InvalidSecurityTokenException(
                "Signature verification failed for message '" +
                messageElement.ToString() + "' with provided signature '" +
                base64Signature + "'.");
        }

        private string CreateSignature(XElement messageElement, byte[] signatureCreationKey)
        {
            if (signatureCreationKey == null)
            {
                throw new ArgumentNullException("signatureCreationKey");
            }
            using (var hashAlg = new HMACSHA256(signatureCreationKey))
            {
                string messageStr = messageElement.ToString(SaveOptions.DisableFormatting);
                byte[] messageBytes = Encoding.UTF8.GetBytes(messageStr);
                byte[] messageHash = hashAlg.ComputeHash(messageBytes);
                string hashString = Convert.ToBase64String(messageHash, Base64FormattingOptions.None);
                return hashString;
            }
        }

        private static XElement DecodeElements(XElement rootElement, string encodingType)
        {
#if false  // Not implemented yet, just a fun exercise
            if (encodingType == XAuthdataConstants.Values.ENCODINGTYPE_XML_COMPRESSED_BASE64)
            {
                byte[] compressedBytes = Convert.FromBase64String(rootElement.Value);
                using (var zipStream = new GZipStream(
                    new MemoryStream(compressedBytes),
                    System.IO.Compression.CompressionMode.Decompress))
                {
                    int streamLength = (int)zipStream.Length;
                    byte[] uncompressedBytes = new byte[streamLength];
                    int bytesRead = zipStream.Read(uncompressedBytes, 0, streamLength);
                    if (bytesRead != streamLength)
                    {
                        throw new InvalidDataException("Expected to read " + streamLength + " bytes, actually read " + bytesRead + " bytes.");
                    }
                    string xmlString = Encoding.UTF8.GetString(uncompressedBytes, 0, bytesRead);
                    rootChildren = XElement.Parse("<wrapper>" + xmlString + "</wrapper>").Elements();
                }
            }
#endif
            if (encodingType == XAuthdataConstants.Values.ENCODINGTYPE_XML ||
                String.IsNullOrEmpty(encodingType))
            {
                return rootElement;
            }
            else 
            {
                throw new NotSupportedException("Encoding type not supported: " + encodingType);
            }
        }

        private static XElement EncodeElements(XElement rootElement, string encodingType)
        {
            if (encodingType == XAuthdataConstants.Values.ENCODINGTYPE_XML ||
                String.IsNullOrEmpty(encodingType))
            {
                return rootElement;
            }
            else
            {
                throw new NotSupportedException("Encoding type not supported: " + encodingType);
            }
        }

   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\Microsoft.XboxLive.Auth.Internal.40\objd\i386\_generated.cs ===
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Reflection;

[assembly: System.Runtime.InteropServices.ComVisible(false)]
[assembly: System.CLSCompliant(false)]
[assembly: System.Reflection.AssemblyProduct("\r\n      DEPOT\r\n    ")]
[assembly: System.Reflection.AssemblyVersion("12.4.0.0")]
[assembly: System.Reflection.AssemblyFileVersion("12.4.56.0")]

// Generated by the MSBuild WriteCodeFragment class on 11/2/2012 2:55:44 AM.
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\MvcAuthApp\Models\AccountModels.cs ===
﻿using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Globalization;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Security;

namespace MvcAuthApp.Models
{

    #region Models

    public class ChangePasswordModel
    {
        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Current password")]
        public string OldPassword { get; set; }

        [Required]
        [ValidatePasswordLength]
        [DataType(DataType.Password)]
        [Display(Name = "New password")]
        public string NewPassword { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm new password")]
        [Compare("NewPassword", ErrorMessage = "The new password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }

    public class LogOnModel
    {
        [Required]
        [Display(Name = "User name")]
        public string UserName { get; set; }

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }


    public class RegisterModel
    {
        [Required]
        [Display(Name = "User name")]
        public string UserName { get; set; }

        [Required]
        [DataType(DataType.EmailAddress)]
        [Display(Name = "Email address")]
        public string Email { get; set; }

        [Required]
        [ValidatePasswordLength]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; }

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; }
    }
    #endregion

    #region Services
    // The FormsAuthentication type is sealed and contains static members, so it is difficult to
    // unit test code that calls its members. The interface and helper class below demonstrate
    // how to create an abstract wrapper around such a type in order to make the AccountController
    // code unit testable.

    public interface IMembershipService
    {
        int MinPasswordLength { get; }

        bool ValidateUser(string userName, string password);
        MembershipCreateStatus CreateUser(string userName, string password, string email);
        bool ChangePassword(string userName, string oldPassword, string newPassword);
    }

    public class AccountMembershipService : IMembershipService
    {
        private readonly MembershipProvider _provider;

        public AccountMembershipService()
            : this(null)
        {
        }

        public AccountMembershipService(MembershipProvider provider)
        {
            _provider = provider ?? Membership.Provider;
        }

        public int MinPasswordLength
        {
            get
            {
                return _provider.MinRequiredPasswordLength;
            }
        }

        public bool ValidateUser(string userName, string password)
        {
            if (String.IsNullOrEmpty(userName)) throw new ArgumentException("Value cannot be null or empty.", "userName");
            if (String.IsNullOrEmpty(password)) throw new ArgumentException("Value cannot be null or empty.", "password");

            return _provider.ValidateUser(userName, password);
        }

        public MembershipCreateStatus CreateUser(string userName, string password, string email)
        {
            if (String.IsNullOrEmpty(userName)) throw new ArgumentException("Value cannot be null or empty.", "userName");
            if (String.IsNullOrEmpty(password)) throw new ArgumentException("Value cannot be null or empty.", "password");
            if (String.IsNullOrEmpty(email)) throw new ArgumentException("Value cannot be null or empty.", "email");

            MembershipCreateStatus status;
            _provider.CreateUser(userName, password, email, null, null, true, null, out status);
            return status;
        }

        public bool ChangePassword(string userName, string oldPassword, string newPassword)
        {
            if (String.IsNullOrEmpty(userName)) throw new ArgumentException("Value cannot be null or empty.", "userName");
            if (String.IsNullOrEmpty(oldPassword)) throw new ArgumentException("Value cannot be null or empty.", "oldPassword");
            if (String.IsNullOrEmpty(newPassword)) throw new ArgumentException("Value cannot be null or empty.", "newPassword");

            // The underlying ChangePassword() will throw an exception rather
            // than return false in certain failure scenarios.
            try
            {
                MembershipUser currentUser = _provider.GetUser(userName, true /* userIsOnline */);
                return currentUser.ChangePassword(oldPassword, newPassword);
            }
            catch (ArgumentException)
            {
                return false;
            }
            catch (MembershipPasswordException)
            {
                return false;
            }
        }
    }

    public interface IFormsAuthenticationService
    {
        void SignIn(string userName, bool createPersistentCookie);
        void SignOut();
    }

    public class FormsAuthenticationService : IFormsAuthenticationService
    {
        public void SignIn(string userName, bool createPersistentCookie)
        {
            if (String.IsNullOrEmpty(userName)) throw new ArgumentException("Value cannot be null or empty.", "userName");

            FormsAuthentication.SetAuthCookie(userName, createPersistentCookie);
        }

        public void SignOut()
        {
            FormsAuthentication.SignOut();
        }
    }
    #endregion

    #region Validation
    public static class AccountValidation
    {
        public static string ErrorCodeToString(MembershipCreateStatus createStatus)
        {
            // See http://go.microsoft.com/fwlink/?LinkID=177550 for
            // a full list of status codes.
            switch (createStatus)
            {
                case MembershipCreateStatus.DuplicateUserName:
                    return "Username already exists. Please enter a different user name.";

                case MembershipCreateStatus.DuplicateEmail:
                    return "A username for that e-mail address already exists. Please enter a different e-mail address.";

                case MembershipCreateStatus.InvalidPassword:
                    return "The password provided is invalid. Please enter a valid password value.";

                case MembershipCreateStatus.InvalidEmail:
                    return "The e-mail address provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidAnswer:
                    return "The password retrieval answer provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidQuestion:
                    return "The password retrieval question provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.InvalidUserName:
                    return "The user name provided is invalid. Please check the value and try again.";

                case MembershipCreateStatus.ProviderError:
                    return "The authentication provider returned an error. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                case MembershipCreateStatus.UserRejected:
                    return "The user creation request has been canceled. Please verify your entry and try again. If the problem persists, please contact your system administrator.";

                default:
                    return "An unknown error occurred. Please verify your entry and try again. If the problem persists, please contact your system administrator.";
            }
        }
    }

    [AttributeUsage(AttributeTargets.Field | AttributeTargets.Property, AllowMultiple = false, Inherited = true)]
    public sealed class ValidatePasswordLengthAttribute : ValidationAttribute, IClientValidatable
    {
        private const string _defaultErrorMessage = "'{0}' must be at least {1} characters long.";
        private readonly int _minCharacters = Membership.Provider.MinRequiredPasswordLength;

        public ValidatePasswordLengthAttribute()
            : base(_defaultErrorMessage)
        {
        }

        public override string FormatErrorMessage(string name)
        {
            return String.Format(CultureInfo.CurrentCulture, ErrorMessageString,
                name, _minCharacters);
        }

        public override bool IsValid(object value)
        {
            string valueAsString = value as string;
            return (valueAsString != null && valueAsString.Length >= _minCharacters);
        }

        public IEnumerable<ModelClientValidationRule> GetClientValidationRules(ModelMetadata metadata, ControllerContext context)
        {
            return new[]{
                new ModelClientValidationStringLengthRule(FormatErrorMessage(metadata.GetDisplayName()), _minCharacters, int.MaxValue)
            };
        }
    }
    #endregion

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\MvcAuthApp\Controllers\AccountController.cs ===
﻿using System;
using System.Collections.Generic;
using System.Diagnostics.CodeAnalysis;
using System.Linq;
using System.Security.Principal;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;
using System.Web.Security;
using MvcAuthApp.Models;

namespace MvcAuthApp.Controllers
{
    public class AccountController : Controller
    {

        public IFormsAuthenticationService FormsService { get; set; }
        public IMembershipService MembershipService { get; set; }

        protected override void Initialize(RequestContext requestContext)
        {
            if (FormsService == null) { FormsService = new FormsAuthenticationService(); }
            if (MembershipService == null) { MembershipService = new AccountMembershipService(); }

            base.Initialize(requestContext);
        }

        // **************************************
        // URL: /Account/LogOn
        // **************************************

        public ActionResult LogOn()
        {
            return View();
        }

        [HttpPost]
        public ActionResult LogOn(LogOnModel model, string returnUrl)
        {
            if (ModelState.IsValid)
            {
                if (MembershipService.ValidateUser(model.UserName, model.Password))
                {
                    FormsService.SignIn(model.UserName, model.RememberMe);
                    if (Url.IsLocalUrl(returnUrl))
                    {
                        return Redirect(returnUrl);
                    }
                    else
                    {
                        return RedirectToAction("Index", "Home");
                    }
                }
                else
                {
                    ModelState.AddModelError("", "The user name or password provided is incorrect.");
                }
            }

            // If we got this far, something failed, redisplay form
            return View(model);
        }

        // **************************************
        // URL: /Account/LogOff
        // **************************************

        public ActionResult LogOff()
        {
            FormsService.SignOut();

            return RedirectToAction("Index", "Home");
        }

        // **************************************
        // URL: /Account/Register
        // **************************************

        public ActionResult Register()
        {
            ViewBag.PasswordLength = MembershipService.MinPasswordLength;
            return View();
        }

        [HttpPost]
        public ActionResult Register(RegisterModel model)
        {
            if (ModelState.IsValid)
            {
                // Attempt to register the user
                MembershipCreateStatus createStatus = MembershipService.CreateUser(model.UserName, model.Password, model.Email);

                if (createStatus == MembershipCreateStatus.Success)
                {
                    FormsService.SignIn(model.UserName, false /* createPersistentCookie */);
                    return RedirectToAction("Index", "Home");
                }
                else
                {
                    ModelState.AddModelError("", AccountValidation.ErrorCodeToString(createStatus));
                }
            }

            // If we got this far, something failed, redisplay form
            ViewBag.PasswordLength = MembershipService.MinPasswordLength;
            return View(model);
        }

        // **************************************
        // URL: /Account/ChangePassword
        // **************************************

        [Authorize]
        public ActionResult ChangePassword()
        {
            ViewBag.PasswordLength = MembershipService.MinPasswordLength;
            return View();
        }

        [Authorize]
        [HttpPost]
        public ActionResult ChangePassword(ChangePasswordModel model)
        {
            if (ModelState.IsValid)
            {
                if (MembershipService.ChangePassword(User.Identity.Name, model.OldPassword, model.NewPassword))
                {
                    return RedirectToAction("ChangePasswordSuccess");
                }
                else
                {
                    ModelState.AddModelError("", "The current password is incorrect or the new password is invalid.");
                }
            }

            // If we got this far, something failed, redisplay form
            ViewBag.PasswordLength = MembershipService.MinPasswordLength;
            return View(model);
        }

        // **************************************
        // URL: /Account/ChangePasswordSuccess
        // **************************************

        public ActionResult ChangePasswordSuccess()
        {
            return View();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\SoapAuthApp\Application.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;

namespace SoapAuthApp
{
    public class Application : HttpApplication
    {
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\SoapAuthApp\Service.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Services;

using Microsoft.XboxLive.Auth;

namespace SoapAuthApp
{
    [WebService]
    public class Service
    {
        [WebMethod]
        [AllowedPlatforms(AuthPlatforms.Web)]
        [AllowedTitles(AuthTitles.Web,AuthTitles.Zune)]
        public void DoIt(
            [VerifyClaim("http://schemas.abc.com/2011/04/claims/random")] int value
        )
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\MvcAuthApp\Controllers\HomeController.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

using Microsoft.XboxLive.Auth;

namespace MvcAuthApp.Controllers
{
    public class HomeController : Controller
    {
        public ActionResult Index()
        {
            ViewBag.Message = "Welcome to ASP.NET MVC!";
            return View();
        }

        [RequiredPrivileges(AuthPrivileges.PurchaseContent)]
        public ActionResult Purchase(
            [VerifyUser]    uint userPuid,
            [VerifyMachine] ulong machinePuid,
                            Guid offerInstanceId
        )
        {
            // Do purchase stuff
            return View();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\MvcAuthApp\Global.asax.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using System.Web.Routing;

namespace MvcAuthApp
{
    // Note: For instructions on enabling IIS6 or IIS7 classic mode, 
    // visit http://go.microsoft.com/?LinkId=9394801

    public class MvcApplication : System.Web.HttpApplication
    {
        public static void RegisterGlobalFilters(GlobalFilterCollection filters)
        {
            filters.Add(new HandleErrorAttribute());
        }

        public static void RegisterRoutes(RouteCollection routes)
        {
            routes.IgnoreRoute("{resource}.axd/{*pathInfo}");

            routes.MapRoute(
                "Default", // Route name
                "{controller}/{action}/{id}", // URL with parameters
                new { controller = "Home", action = "Index", id = UrlParameter.Optional } // Parameter defaults
            );

        }

        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();

            RegisterGlobalFilters(GlobalFilters.Filters);
            RegisterRoutes(RouteTable.Routes);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\Unit\Program.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Microsoft.XboxLive.Auth.Test
{
    interface ITester
    {
        void Run();
    }

    class UnitTester
    {
        static void Main(string[] args)
        {
            UnitTester tester = new UnitTester();

            try
            {
                tester.Run();
            }
            catch (Exception e)
            {
                Console.WriteLine("\nFAILED: {0}", e.ToString());
                System.Environment.Exit(-1);
            }

            Console.WriteLine("\nPASSED");
            System.Environment.Exit(0);
        }

        public UnitTester()
        {
        }

        public void Run()
        {
            ITester[] testClasses = new ITester[]
            {
                new TestXblAuthProtocol(),
                new TestXAuthdataTokenHandler(),
            };

            bool allPassed = true;
            foreach (var testClass in testClasses)
            {
                try
                {
                    testClass.Run();
                }
                catch (Exception e)
                {
                    allPassed = false;
                    var prevColor = Console.ForegroundColor;
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine("\nFAIL: {0}", e.ToString());
                    Console.ForegroundColor = prevColor;
                }
            }

            if (!allPassed)
            {
                throw new Exception("At least one test has failed");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\Unit\TestXblAuthProtocol.cs ===
using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Web;
using System.Diagnostics;

using Microsoft.IdentityModel.Web.Controls;
using Microsoft.IdentityModel.Claims;

using Microsoft.XboxLive.Auth;
using Microsoft.XboxLive.Auth.Protocol;

namespace Microsoft.XboxLive.Auth.Test
{
    class TestXblAuthProtocol : ITester
    {
        public TestXblAuthProtocol()
        {
        }

        public void Run()
        {
            TestModule();
        }

        public string GetXAuthdataXml()
        {
            return @"<xauthdata id='0011223344556677' enc='xml'><identity authtype='TestAuthType1'><c t='http://test/claimtype1'>imastring</c><c t='http://test/claimtype2' vt='http://www.w3.org/2001/XMLSchema#hexBinary'>10</c></identity><identity authtype='TestAuthType2'><xc t='claimtype3'>1.1.1.1:2</xc><xc t='claimtype4'>imaxboxstring</xc></identity></xauthdata>";
        }

        public void TestModule()
        {
            XblAuthProtocolModule module = new XblAuthProtocolModule();
            NameValueCollection headers = new NameValueCollection();
            IClaimsPrincipal principal = null;
            ErrorEventArgs lastError = null;
            TraceEventArgs lastTrace = null;

            XblAuthProtocolModule.AuthenticateError += new EventHandler<ErrorEventArgs>((sender, args) =>
            {
                lastError = args;
                args.Cancel = true;
            });

            XblAuthProtocolModule.TraceOutput += new EventHandler<TraceEventArgs>((sender, args) =>
            {
                lastTrace = args;
            });

            lastError = null;
            lastTrace = null;
            principal = module.ProcessAuthenticateRequest(headers, "http://testurl");
            Debug.Assert(lastError == null);
            Debug.Assert(lastTrace == null);
            Debug.Assert(principal == null);

            lastError = null;
            lastTrace = null;
            headers["Authorization"] = "XBL2.0 x=junk";
            principal= module.ProcessAuthenticateRequest(headers, "http://testurl");
            Debug.Assert(lastError != null);
            Debug.Assert(lastTrace != null);
            Debug.Assert(principal == null);

            // Token handler not configured
            lastError = null;
            lastTrace = null;
            headers["Authorization"] = "XBL2.0 x=" + GetXAuthdataXml();
            principal = module.ProcessAuthenticateRequest(headers, "http://testurl");
            Debug.Assert(lastError == null);
            Debug.Assert(lastTrace == null);
            Debug.Assert(principal == null);

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\Unit\Properties\AssemblyInfo.cs ===
﻿using System.Reflection;
using System.Runtime.CompilerServices;
using System.Runtime.InteropServices;

// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
[assembly: AssemblyTitle("Unit")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("Microsoft")]
[assembly: AssemblyProduct("Unit")]
[assembly: AssemblyCopyright("Copyright © Microsoft 2011")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]

// Setting ComVisible to false makes the types in this assembly not visible 
// to COM components.  If you need to access a type in this assembly from 
// COM, set the ComVisible attribute to true on that type.
[assembly: ComVisible(false)]

// The following GUID is for the ID of the typelib if this project is exposed to COM
[assembly: Guid("08b2d955-6d71-4d08-a88d-2ff9d3bc0c9c")]

// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Build and Revision Numbers 
// by using the '*' as shown below:
// [assembly: AssemblyVersion("1.0.*")]
[assembly: AssemblyVersion("1.0.0.0")]
[assembly: AssemblyFileVersion("1.0.0.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\WcfAuthApp\Service1.svc.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;

using Microsoft.XboxLive.Auth;

namespace WcfAuthApp
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the class name "Service1" in code, svc and config file together.
    public class Service1 : IService1
    {
        // currently there are no auth attributes on the methods.
        // the IService1.cs contract file to look at the attributes
        public string GetData(int value)
        {
            // but we can do "stuff" inside of our business logic as well

            // IAuthData authData = AuthData.Current;
            // authData.VerifyClaim("http://schemas.abc.com/2011/04/claims/random", "foo");
            
            return string.Format("You entered: {0}", value);
        }

        // currently there are no auth attributes on the methods.
        // the IService1.cs contract file to look at the attributes
        public CompositeType GetDataUsingDataContract(CompositeType composite)
        {
            if (composite == null)
            {
                throw new ArgumentNullException("composite");
            }
            if (composite.BoolValue)
            {
                composite.StringValue += "Suffix";
            }
            return composite;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\WcfAuthApp\IService1.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.Serialization;
using System.ServiceModel;
using System.ServiceModel.Web;
using System.Text;

using Microsoft.XboxLive.Auth;

namespace WcfAuthApp
{
    // NOTE: You can use the "Rename" command on the "Refactor" menu to change the interface name "IService1" in both code and config file together.
    [ServiceContract]
    public interface IService1
    {
        [OperationContract]
        string GetData(
            [VerifyCountry] int country
        );

        [OperationContract]
        [RequiredClaim("http://schemas.microsoft.com/xbox/2011/07/claims/user/age")]
        CompositeType GetDataUsingDataContract(CompositeType composite);

        // TODO: Add your service operations here
    }


    // Use a data contract as illustrated in the sample below to add composite types to service operations.
    [DataContract]
    public class CompositeType
    {
        bool boolValue = true;
        string stringValue = "Hello ";

        [DataMember]
        public bool BoolValue
        {
            get { return boolValue; }
            set { boolValue = value; }
        }

        [DataMember]
        public string StringValue
        {
            get { return stringValue; }
            set { stringValue = value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\azure\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\azure\AzureManagement.cs ===
﻿using System;
using System.IO;
using System.Net;
using System.Security.Cryptography.X509Certificates;
using System.Text;
using System.Threading;
using System.Xml;

namespace xonline.common.Azure
{
    /// <summary>
    /// Operation status codes returned by GetOperationStatus.
    /// </summary>
    public enum OperationStatus
    {
        InProgress = 0,
        Succeeded = 1,
        Failed = 2
    }

    public class OperationStatusDetails
    {
        public OperationStatusDetails(string id, OperationStatus status, HttpStatusCode? httpStatus, string errorCode, string errorMessage)
        {
            Id = id;
            Status = status;
            HttpStatus = httpStatus;
            ErrorCode = errorCode;
            ErrorMessage = errorMessage;
        }

        public string Id { get; private set; }
        public OperationStatus Status { get; private set; }
        public HttpStatusCode? HttpStatus { get; private set; }
        public string ErrorCode { get; private set; }
        public string ErrorMessage { get; private set; }

        public override string ToString()
        {
            return string.Format("ID: {0}\r\nStatus: {1}\r\nHttp Status Code: {2}\r\nError Code: {3}\r\nError Message: {4}", 
                Id, Status, HttpStatus, ErrorCode, ErrorMessage);
        }
    }

    /// <summary>
    /// Deployment status codes returned by GetDeploymentStatus.
    /// </summary>
    public enum DeploymentStatus
    {
        NotExists,
        Running,
        Suspended,
        RunningTransitioning,
        SuspendedTransitioning,
        Starting,
        Suspending,
        Deploying,
        Deleting
    }

    /// <summary>
    /// Role instance status codes.
    /// </summary>
    public enum InstanceStatus
    {
        Ready,
        Busy,
        Initializing,
        Stopping,
        Stopped,
        Unresponsive 
    }

    /// <summary>
    /// Wrapper around the Azure Service Management REST APIs
    /// </summary>
    public class AzureManagement
    {
        #region GetStorageAccountKey

        // 0 = Subscription Id, 1 = Storage Account
        private const string GetStorageAccountKeysUriFormatString =
            "https://management.core.windows.net/{0}/services/storageservices/{1}/keys";

        /// <summary>
        /// Returns a storage account key.  Will return the primary key first,
        /// then the secondary if the primary is empty.
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="storageAccount"></param>
        /// <param name="clientCertificate"></param>
        /// <returns></returns>
        public static string GetStorageAccountKey(string subscriptionId, string storageAccount, X509Certificate clientCertificate)
        {
            string uriString = string.Format(GetStorageAccountKeysUriFormatString, subscriptionId, storageAccount);

            HttpWebRequest request = (HttpWebRequest) WebRequest.Create(new Uri(uriString));
            request.Headers["x-ms-version"] = "2009-10-01";
            request.Method = "GET";
            request.ClientCertificates.Add(clientCertificate);

            HttpWebResponse response = null;
            XmlDocument responseDoc;
            try
            {
                response = (HttpWebResponse)request.GetResponse();

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    throw new ApplicationException(string.Format("Expected GetStorageAccountKey to return 200 OK, but got {0}",
                                                    response.StatusCode));
                }

                responseDoc = new XmlDocument();
                responseDoc.Load(response.GetResponseStream());
            }
            catch (Exception e)
            {
                throw new ApplicationException("GetStorageAccountKey request failed.", e);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    ((IDisposable)response).Dispose();
                }
            }

            XmlNamespaceManager nsManager = new XmlNamespaceManager(responseDoc.NameTable);
            nsManager.AddNamespace("az", "http://schemas.microsoft.com/windowsazure");

            XmlNode primaryKeyNode =
                responseDoc.SelectSingleNode("/az:StorageService/az:StorageServiceKeys/az:Primary", nsManager);
            XmlNode secondaryKeyNode =
                responseDoc.SelectSingleNode("/az:StorageService/az:StorageServiceKeys/az:Secondary", nsManager);

            if (primaryKeyNode != null)
            {
                return primaryKeyNode.InnerText;
            }

            if (secondaryKeyNode != null)
            {
                return secondaryKeyNode.InnerText;
            }

            return null;
        }

        #endregion

        #region GetHostedServiceProperties

        // 0 = Subscription Id, 1 = Hosted Service Name
        private const string GetHostedServicePropertiesUriFormatString =
            "https://management.core.windows.net/{0}/services/hostedservices/{1}?embed-detail=true";

        /// <summary>
        /// Get all properties for the specified Azure Hosted Service.
        /// Includes information about deployments as well.  See
        /// http://msdn.microsoft.com/en-us/library/ee460806.aspx 
        /// for a description of the returned XML format.
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="hostedServiceName"></param>
        /// <param name="clientCertificate"></param>
        /// <returns></returns>
        public static XmlDocument GetHostedServiceProperties(
            string subscriptionId, 
            string hostedServiceName, 
            X509Certificate clientCertificate)
        {
            string uriString = string.Format(GetHostedServicePropertiesUriFormatString, subscriptionId,
                                             hostedServiceName);

            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(new Uri(uriString));
            request.Headers["x-ms-version"] = "2009-10-01";
            request.Method = "GET";
            request.ClientCertificates.Add(clientCertificate);

            HttpWebResponse response = null;
            XmlDocument responseDoc;
            try
            {
                response = (HttpWebResponse)request.GetResponse();

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    throw new ApplicationException(string.Format("Expected GetHostedServiceProperties to return 200 OK, but got {0}",
                                                    response.StatusCode));
                }

                responseDoc = new XmlDocument();
                responseDoc.Load(response.GetResponseStream());
            }
            catch (Exception e)
            {
                throw new ApplicationException("GetHostedServiceProperties request failed.", e);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    ((IDisposable)response).Dispose();
                }
            }

            return responseDoc;
        }

        #endregion

        #region CreateDeployment

        // 0 = Subscription Id, 1 = StorageAccount, 2 = Slot production|staging
        private const string CreateDeploymentUriFormatString = "https://management.core.windows.net/{0}/services/hostedservices/{1}/deploymentslots/{2}";

        // Replacement parameters are self explanatory.
        private const string CreateDeploymentBodyFormatString =
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
            "<CreateDeployment xmlns=\"http://schemas.microsoft.com/windowsazure\">" +
                @"<Name>{0}</Name>" +
                @"<PackageUrl>{1}</PackageUrl>" +
                @"<Label>{2}</Label>" +
                @"<Configuration>{3}</Configuration>" +
            @"</CreateDeployment>";

        /// <summary>
        /// Create a new deployment.
        /// </summary>
        /// <returns>Request ID</returns>
        public static string CreateDeployment(
            string subscriptionId,
            X509Certificate certificate,
            string serviceName,
            bool isStaging,
            string deploymentName,
            string deploymentLabel,
            string packageStorageUri,
            string configurationFilePath
            )
        {
            // Create the URI for creating a deployment.
            Uri createDeploymentUri =
                new Uri(string.Format(CreateDeploymentUriFormatString, subscriptionId, serviceName,
                                      isStaging ? "staging" : "production"));

            // Read in and Base64 encode the configuration file.
            FileStream configFileStream = new FileStream(configurationFilePath, FileMode.Open);
            if (configFileStream.Length > int.MaxValue)
            {
                // File is too big.  Throw an exception.
                throw new ArgumentException(string.Format("The file {0} exceeds the maximum length of {1}.",
                                                          configurationFilePath, int.MaxValue));
            }

            // Convert the configuration file to a base64 string.
            byte[] configurationFileBytes = new byte[configFileStream.Length];
            configFileStream.Read(configurationFileBytes, 0, (int) configFileStream.Length);
            string base64EncodedConfigurationFile = Convert.ToBase64String(configurationFileBytes);

            // Label need to be base64 encoded as well.
            byte[] labelEncodedBytes = Encoding.UTF8.GetBytes(deploymentLabel);
            string base64EncodedLabel = Convert.ToBase64String(labelEncodedBytes);

            // Format the request body XML and encode into UTF8.
            string bodyXml = string.Format(CreateDeploymentBodyFormatString, deploymentName, packageStorageUri,
                                           base64EncodedLabel,
                                           base64EncodedConfigurationFile);
            byte[] bodyXmlUtf8Bytes = Encoding.UTF8.GetBytes(bodyXml);

            // Format and send the request.
            HttpWebRequest request = (HttpWebRequest) WebRequest.Create(createDeploymentUri);
            request.Method = "POST";
            request.ClientCertificates.Add(certificate);
            request.ContentType = "application/xml";
            request.ContentLength = bodyXmlUtf8Bytes.Length;
            request.Headers["x-ms-version"] = "2009-10-01";

            request.GetRequestStream().Write(bodyXmlUtf8Bytes, 0, bodyXmlUtf8Bytes.Length);

            HttpWebResponse response = null;
            try
            {
                response = (HttpWebResponse)request.GetResponse();

                if (response.StatusCode != HttpStatusCode.Accepted)
                {
                    // Error status code should already throw web exceptions, but
                    // if we get any non-error status other than Accepted that 
                    // should be treated as an error as well.
                    throw new ApplicationException(
                        string.Format(
                            "Incorrect status code returned from create deployment operation.  Expected 202 Accepted, got {0}.",
                            response.StatusCode));
                }

                return response.Headers["x-ms-request-id"];
            }
            catch (Exception e)
            {
                throw new ApplicationException("Create deployment request failed.", e);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    ((IDisposable)response).Dispose();
                }
            }
        }

        #endregion

        #region UpgradeDeployment

        // 0 = Subscription Id, 1 = StorageAccount, 2 = Slot production|staging
        private const string UpgradeDeploymentUriFormatString = "https://management.core.windows.net/{0}/services/hostedservices/{1}/deploymentslots/{2}/?comp=upgrade";

        // Replacement parameters are self explanatory.
        private const string UpgradeDeploymentBodyFormatString =
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
            "<UpgradeDeployment xmlns=\"http://schemas.microsoft.com/windowsazure\">" +
                @"<Mode>auto</Mode>" +
                @"<PackageUrl>{0}</PackageUrl>" +
                @"<Configuration>{2}</Configuration>" +
                @"<Label>{1}</Label>" +
            @"</UpgradeDeployment>";
        
        public static string UpgradeDeployment(
            string subscriptionId,
            X509Certificate certificate,
            string serviceName,
            bool isStaging,
            string deploymentLabel,
            string packageStorageUri,
            string configurationFilePath
            )
        {
            // Create the URI for creating a deployment.
            Uri upgradeDeploymentUri =
                new Uri(string.Format(UpgradeDeploymentUriFormatString, subscriptionId, serviceName,
                                      isStaging ? "staging" : "production"));

            // Read in and Base64 encode the configuration file.
            FileStream configFileStream = new FileStream(configurationFilePath, FileMode.Open);
            if (configFileStream.Length > int.MaxValue)
            {
                // File is too big.  Throw an exception.
                throw new ArgumentException(string.Format("The file {0} exceeds the maximum length of {1}.",
                                                          configurationFilePath, int.MaxValue));
            }

            // Convert the configuration file to a base64 string.
            BinaryReader configFileReader = new BinaryReader(configFileStream);
            byte[] configurationFileBytes = configFileReader.ReadBytes((int)configFileStream.Length);
            string base64EncodedConfigurationFile = Convert.ToBase64String(configurationFileBytes);

            // Label need to be base64 encoded as well.
            byte[] labelEncodedBytes = Encoding.UTF8.GetBytes(deploymentLabel);
            string base64EncodedLabel = Convert.ToBase64String(labelEncodedBytes);

            // Format the request body XML and encode into UTF8.
            string bodyXml = string.Format(UpgradeDeploymentBodyFormatString,
                                           packageStorageUri,
                                           base64EncodedLabel,
                                           base64EncodedConfigurationFile);
            byte[] bodyXmlUtf8Bytes = Encoding.UTF8.GetBytes(bodyXml);

            // Format and send the request.
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(upgradeDeploymentUri);
            request.Method = "POST";
            request.ClientCertificates.Add(certificate);
            request.ContentType = "application/xml";
            request.ContentLength = bodyXmlUtf8Bytes.Length;
            request.Headers["x-ms-version"] = "2009-10-01";

            request.GetRequestStream().Write(bodyXmlUtf8Bytes, 0, bodyXmlUtf8Bytes.Length);

            HttpWebResponse response = null;
            try
            {
                response = (HttpWebResponse)request.GetResponse();

                if (response.StatusCode != HttpStatusCode.Accepted)
                {
                    // Error status code should already throw web exceptions, but
                    // if we get any non-error status other than Accepted that 
                    // should be treated as an error as well.
                    throw new ApplicationException(
                        string.Format(
                            "Incorrect status code returned from create deployment operation.  Expected 202 Accepted, got {0}.",
                            response.StatusCode));
                }

                return response.Headers["x-ms-request-id"];
            }
            catch (WebException e)
            {
                response = (HttpWebResponse)e.Response;
                StreamReader reader = new StreamReader(response.GetResponseStream());
                string responseBody = reader.ReadToEnd();

                throw new ApplicationException(responseBody, e);
            }
            catch (Exception e)
            {
                throw new ApplicationException("Create deployment request failed.", e);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    ((IDisposable)response).Dispose();
                }
            }
        }

        #endregion

        #region UpdateDeploymentStatus

        #endregion

        #region RunDeployment

        // 0 = Subscription Id, 1 = Service Name, 2 = Slot production|staging
        private const string RunDeploymentUriFormatString = "https://management.core.windows.net/{0}/services/hostedservices/{1}/deploymentslots/{2}/?comp=status";

        // Replacement parameters are self explanatory.
        private const string RunDeploymentBody =
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>" +
            "<UpdateDeploymentStatus xmlns=\"http://schemas.microsoft.com/windowsazure\">" +
                @"<Status>Running</Status>" +
            @"</UpdateDeploymentStatus>";

        /// <summary>
        /// Instruct a previously deployed package to start running.
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="certificate"></param>
        /// <param name="serviceName"></param>
        /// <param name="isStaging"></param>
        /// <returns>Request ID</returns>
        public static string RunDeployment(
            string subscriptionId,
            X509Certificate certificate,
            string serviceName,
            bool isStaging
            )
        {
            Uri runDeploymentUri =
                new Uri(string.Format(RunDeploymentUriFormatString, subscriptionId, serviceName,
                                      isStaging ? "staging" : "production"));

            // Format the request body XML and encode into UTF8.
            byte[] bodyXmlUtf8Bytes = Encoding.UTF8.GetBytes(RunDeploymentBody);

            // Format and send the request.
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(runDeploymentUri);
            request.Method = "POST";
            request.ClientCertificates.Add(certificate);
            request.ContentType = "application/xml";
            request.ContentLength = bodyXmlUtf8Bytes.Length;
            request.Headers["x-ms-version"] = "2009-10-01";

            request.GetRequestStream().Write(bodyXmlUtf8Bytes, 0, bodyXmlUtf8Bytes.Length);

            HttpWebResponse response = null;
            string requestId;
            try
            {
                response = (HttpWebResponse)request.GetResponse();

                if (response.StatusCode != HttpStatusCode.Accepted)
                {
                    // Error status code should already throw web exceptions, but
                    // if we get any non-error status other than Accepted that 
                    // should be treated as an error as well.
                    throw new ApplicationException(
                        string.Format(
                            "Incorrect status code returned from create deployment operation.  Expected 202 Accepted, got {0}.",
                            response.StatusCode));
                }

                requestId = response.Headers["x-ms-request-id"];
            }
            catch (Exception e)
            {
                throw new ApplicationException("Run deployment request failed.", e);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    ((IDisposable)response).Dispose();
                }
            }

            if (string.IsNullOrEmpty(requestId))
            {
                throw new ApplicationException("Response did not contain an x-ms-request-id header.");
            }

            return requestId;
        }

        #endregion

        #region GetDeploymentStatus

        // 0 = Subscription Id, 1 = Service Name, 2 = Slot production|staging
        private const string GetDeploymentStatusUriFormatString = "https://management.core.windows.net/{0}/services/hostedservices/{1}/deploymentslots/{2}";

        public static DeploymentStatus GetDeploymentStatus(
            string subscriptionId,
            X509Certificate certificate,
            string serviceName,
            bool isStaging
            )
        {
            Uri getDeploymentStatusUri =
                new Uri(string.Format(GetDeploymentStatusUriFormatString, subscriptionId, serviceName,
                                      isStaging ? "staging" : "production"));

            HttpWebRequest request = (HttpWebRequest) WebRequest.Create(getDeploymentStatusUri);
            request.Method = "GET";
            request.ClientCertificates.Add(certificate);
            request.Headers["x-ms-version"] = "2009-10-01";

            HttpWebResponse response = null;
            XmlDocument responseDoc;
            try
            {
                response = (HttpWebResponse)request.GetResponse();

                //
                //  Process the response
                //

                if (response.StatusCode != HttpStatusCode.OK)
                {
                    // Error status code should already throw web exceptions, but
                    // if we get any non-error status other than Accepted that 
                    // should be treated as an error as well.
                    throw new ApplicationException(
                        string.Format(
                            "Incorrect status code returned from get deployment status operation.  Expected 200 OK, got {0}.",
                            response.StatusCode));
                }

                responseDoc = new XmlDocument();
                responseDoc.Load(response.GetResponseStream());
            }
            catch (WebException we)
            {
                response = (HttpWebResponse) we.Response;
                if (response == null)
                {
                    throw;
                }

                if(response.StatusCode == HttpStatusCode.NotFound)
                {
                    return DeploymentStatus.NotExists;
                }

                throw;
            }
            catch (Exception e)
            {
                throw new ApplicationException("Get deployment status request failed.", e);
            }
            finally
            {
                if (response != null)
                {
                    response.Close();
                    ((IDisposable)response).Dispose();
                }
            }

            XmlNamespaceManager nsManager = new XmlNamespaceManager(responseDoc.NameTable);
            nsManager.AddNamespace("az", "http://schemas.microsoft.com/windowsazure");

            //
            //  Make sure the deployment itself is running.
            //

            XmlNode deploymentStatusNode = responseDoc.SelectSingleNode("/az:Deployment/az:Status", nsManager);

            DeploymentStatus deploymentStatus = (DeploymentStatus) Enum.Parse(typeof(DeploymentStatus), deploymentStatusNode.InnerText);

            if(deploymentStatus != DeploymentStatus.Running)
            {
                return deploymentStatus;
            }

            //
            // Is there an upgrade in progress?
            //

            XmlNode deploymentUpgradeNode = responseDoc.SelectSingleNode("/az:Deployment/az:UpgradeStatus", nsManager);
            if(deploymentUpgradeNode != null)
            {
                return DeploymentStatus.Deploying;
            }

            //
            //  Make sure all role instances are Ready.
            //

            XmlNodeList roleNodes = responseDoc.SelectNodes("/az:Deployment/az:RoleInstanceList/az:RoleInstance",
                                                            nsManager);
            if (roleNodes == null || roleNodes.Count == 0)
            {
                return DeploymentStatus.Running;
            }

            foreach(XmlNode roleNode in roleNodes)
            {
                XmlNode statusNode = roleNode.SelectSingleNode("az:InstanceStatus", nsManager);
                if(statusNode == null)
                {
                    continue;
                }

                InstanceStatus instanceStatus =
                    (InstanceStatus) Enum.Parse(typeof (InstanceStatus), statusNode.InnerText);

                if(instanceStatus != InstanceStatus.Ready)
                {
                    return DeploymentStatus.Starting;
                }
            }

            return DeploymentStatus.Running;
        }

        #endregion

        #region GetOperationStatus

        // 0 = Subscription Id, 1 = Request Id
        private const string GetOperationStatusUriFormatString = "https://management.core.windows.net/{0}/operations/{1}";

        /// <summary>
        /// Poll GetOperationStatus until we get a completion status (Failed or Succeeded).
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="certificate"></param>
        /// <param name="requestId"></param>
        /// <returns></returns>
        public static OperationStatusDetails PollForOperationCompleteStatus(
            string subscriptionId,
            X509Certificate certificate,
            string requestId)
        {
            // Now we need to poll GetOperationStatus until it's done.
            OperationStatusDetails statusDetails = GetOperationStatus(subscriptionId, certificate, requestId);
            while (statusDetails.Status == OperationStatus.InProgress)
            {
                Thread.Sleep(5000);
                statusDetails = GetOperationStatus(subscriptionId, certificate, requestId);
            }

            return statusDetails;
        }

        /// <summary>
        /// Get back status on a pending operation.
        /// </summary>
        /// <param name="subscriptionId"></param>
        /// <param name="certificate"></param>
        /// <param name="requestId"></param>
        /// <returns></returns>
        public static OperationStatusDetails GetOperationStatus(
            string subscriptionId, 
            X509Certificate certificate,
            string requestId)
        {
            Uri getOperationStatusUri =
                new Uri(string.Format(GetOperationStatusUriFormatString, subscriptionId, requestId));
            HttpWebRequest request = (HttpWebRequest) WebRequest.Create(getOperationStatusUri);
            request.Method = "GET";
            request.Headers["x-ms-version"] = "2009-10-01";
            request.ClientCertificates.Add(certificate);

            HttpWebResponse response = (HttpWebResponse) request.GetResponse();
            if (response.StatusCode != HttpStatusCode.OK)
            {
                throw new ApplicationException(
                    string.Format("Expected GetOperationStatus to return 200 OK, but got back {0} instead.",
                                  response.StatusCode));
            }

            XmlDocument responseDoc = new XmlDocument();

            responseDoc.Load(response.GetResponseStream());

            XmlNamespaceManager nsManager = new XmlNamespaceManager(responseDoc.NameTable);
            nsManager.AddNamespace("az", "http://schemas.microsoft.com/windowsazure");

            XmlNode statusNode = responseDoc.SelectSingleNode("/az:Operation/az:Status", nsManager);
            if (statusNode == null)
            {
                throw new ApplicationException("GetOperationStatus response did not contain a Status element.");
            }
            OperationStatus status = (OperationStatus) Enum.Parse(typeof (OperationStatus), statusNode.InnerText);

            string id = responseDoc.SelectSingleNode("/az:Operation/az:ID", nsManager).InnerText;

            HttpStatusCode? httpStatusCode = null;
            string errorCode = null;
            string errorMessage = null;

            if (status != OperationStatus.InProgress)
            {
                XmlNode httpStatusNode = responseDoc.SelectSingleNode("/az:Operation/az:HttpStatusCode", nsManager);
                httpStatusCode =
                    (HttpStatusCode) Enum.Parse(typeof (HttpStatusCode), httpStatusNode.InnerText);

                if (status == OperationStatus.Failed)
                {
                    errorCode = responseDoc.SelectSingleNode("/az:Operation/az:Error/az:Code", nsManager).InnerText;
                    errorMessage =
                        responseDoc.SelectSingleNode("/az:Operation/az:Error/az:Message", nsManager).InnerText;
                }
            }

            return new OperationStatusDetails(id, status, httpStatusCode, errorCode, errorMessage);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\azure\azurestorage.cs ===
﻿using System;
using System.IO;
using Microsoft.WindowsAzure;
using Microsoft.WindowsAzure.StorageClient;

namespace xonline.common.Azure
{
    public class AzureStorage
    {
        private readonly StorageCredentialsAccountAndKey _storageAccountCredentials;
        private readonly Uri _baseStorageAddress;

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="storageAccountName"></param>
        /// <param name="storageAccountKey"></param>
        public AzureStorage(string storageAccountName, string storageAccountKey)
        {
            _baseStorageAddress = new Uri(string.Format("http://{0}.blob.core.windows.net", storageAccountName));
            _storageAccountCredentials = new StorageCredentialsAccountAndKey(storageAccountName, storageAccountKey);
        }

        /// <summary>
        /// Upload a binary blob contained in a stream to blob storage.
        /// </summary>
        /// <param name="container"></param>
        /// <param name="name"></param>
        /// <param name="blob"></param>
        public string PutBlob(string container, string name, Stream blob)
        {
            CloudBlobClient blobClient = new CloudBlobClient(_baseStorageAddress, _storageAccountCredentials);

            // Make sure the container exists.
            CloudBlobContainer blobContainer = blobClient.GetContainerReference(container);
            blobContainer.CreateIfNotExist();

            // Upload the blob
            CloudBlob blobReference = blobContainer.GetBlobReference(name);
            blobReference.UploadFromStream(blob);

            // Return the full URI for the blob.
            return blobReference.Uri.ToString();
        }

        /// <summary>
        /// Create the named container.
        /// </summary>
        /// <param name="containerName"></param>
        /// <returns></returns>
        public CloudBlobContainer CreateContainer(string containerName)
        {
            CloudBlobClient blobClient = new CloudBlobClient(_baseStorageAddress, _storageAccountCredentials);
            CloudBlobContainer blobContainer = blobClient.GetContainerReference(containerName);
            blobContainer.CreateIfNotExist();

            return blobContainer;
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\certimpx.cpp ===
/*++

   Copyright    (c) 1998-2001    Microsoft Corporation

   Module  Name :
       CertImpX.cpp

   Abstract:
       Implements the combined crypto/cert calls necessary to
       import a .PFX certificate, its private key, and associated
       parental certificates

   Author:
       Michio Nikaido (michion)

   Environment:
       Win32 - User Mode

   Project:
       XBox Live 0 Xenon

   Revision History:
       2/2005 - Initial version (adapted from certimp2.cpp provided by
                IIS team)
       7/2005 - Write to log. printf doesn't work inside MSI packages.

--*/

#include "precomp.hxx"

#include <time.h>
#include <stdio.h>


#define DLL_IMPLEMENTATION
#define IMPLEMENTATION_EXPORT
#include <certimpx.h>


void LogMessage(WCHAR *msg)
{
    wprintf(msg);

    FILE *fp = fopen("c:\\certimpx.log", "a+");
    if (fp==NULL) return;

    time_t now;
    time(&now);
    fwprintf(fp, L"%.24s: %s", _wctime(&now), msg);
    fclose(fp);
}

void LogError(WCHAR* msg)
{
    LogMessage(msg);
}

void LogError(WCHAR* msg, DWORD ec)
{
    WCHAR buf[250];
    swprintf(buf, msg, ec);
    LogError(buf);
}

void LogProgress(WCHAR* msg)
{
    LogMessage(msg);
}

void LogProgress(WCHAR* msg, WCHAR* arg)
{
    WCHAR buf[250];
    swprintf(buf, msg, arg);
    LogMessage(buf);
}

DWORD OpenStoreFromFile( LPWSTR pszFileName, LPWSTR pszPassword, HCERTSTORE* phStore, PCCTL_CONTEXT* ppCTLContext)
{
    HANDLE hFile            = NULL;
    HANDLE hMapping         = NULL;
    BYTE* pData             = NULL;
    DWORD nFileSizeHigh     = 0;
    DWORD nFileSizeLow      = 0;
    DWORD dwErr             = NO_ERROR;

    hFile = CreateFile(
        pszFileName,
        GENERIC_READ,
        FILE_SHARE_READ,
        NULL,
        OPEN_EXISTING,
        FILE_ATTRIBUTE_NORMAL,
        NULL
        );

    if (hFile == NULL || hFile == INVALID_HANDLE_VALUE)
    {
        dwErr = GetLastError();
        LogError(L"CreateFile: Error opening certificate file: 0x%x\n", dwErr);
		LogError(pszFileName);
		LogError(L"\n");
        goto Error;
    }

    nFileSizeLow = GetFileSize(hFile, &nFileSizeHigh);

    if (nFileSizeHigh != 0 ||
        nFileSizeLow == 0 ||
        nFileSizeLow == 0xFFFFFFFF
        )
    {
        dwErr = GetLastError();
        LogError(L"GetFileSize: Error opening certificate file: 0x%x\n", dwErr);
        goto Error;
    }

    hMapping = CreateFileMapping(
        hFile,
        NULL,
        PAGE_READONLY,
        0,
        nFileSizeLow,
        NULL
        );

    if (hMapping == NULL)
    {
        dwErr = GetLastError();
        LogError(L"CreateFileMapping: Error opening certificate file: 0x%x\n", dwErr);
        goto Error;
    }

    pData = (BYTE*)MapViewOfFile(
        hMapping,
        FILE_MAP_READ,
        0,
        0,
        0
        );

    if (pData == NULL)
    {
        dwErr = GetLastError();
        LogError(L"MapViewOfFile: Error opening certificate file: 0x%x\n", dwErr);
        goto Error;
    }



    //-------------------------------------------------------------------------
    // If the files is supposed to be a .PFX (SSL cert + private key), then
    // the caller should have given us a phStore to fill out.  Use the password
    // to crack the file info and set the caller up with the handle to the
    // in memory store
    //
    if (phStore != NULL)
    {
        // Our first attempt to open this file will be using the std CertOpenStore()
        // function.  If the files is an STL (or other PKCX#7 store?) this should 
        // succeed and we'll have a store handled right off
        //
        *phStore = CertOpenStore(
            CERT_STORE_PROV_FILENAME_W,
            X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
            NULL,
            CERT_STORE_OPEN_EXISTING_FLAG,
            pszFileName
            );

        if (*phStore == NULL)
        {
            dwErr = GetLastError();
            if (dwErr == CRYPT_E_FILE_ERROR)
            {
                // We use the convention that a non-NULL pszPassword pointer indicates
                // that we are dealing with .PFX file, so in this case we expect the
                // CertOpenStore call to fail (no facility for password protection).
                // In this case, we will use the PFXImportCertStore() function to crack
                // the password protection to get at the file contents
                //
                if (pszPassword)
                {
                    CRYPT_DATA_BLOB cdbStore = {0};
        
                    dwErr = NO_ERROR;

                    cdbStore.cbData = nFileSizeLow;
                    cdbStore.pbData = pData;
                
                    *phStore = PFXImportCertStore(
                        &cdbStore,
                        wcslen(pszPassword) ? pszPassword : NULL,   // $REVIEW (michion): This a remarkable piece undocumented feces.
                        CRYPT_EXPORTABLE | CRYPT_MACHINE_KEYSET     // If the password is blank, then this fn() requires a NULL to decrypt 
                        );
                
                    if (*phStore == NULL)
                    {
                        dwErr = GetLastError();
                        LogError(L"Error creating an in memory cert store from the file: 0x%x\n", dwErr);
                        goto Error;
                    }
                }
                else
                {
                    LogError(L"Non-password proected file could not be opened.  Error: 0x%x\n", dwErr);
                    goto Error;
                }
            }
            else
            {
                LogError(L"CertOpenStore: Error opening certificate file: 0x%x\n", dwErr);
                goto Error;
            }
        }
    }


    //-------------------------------------------------------------------------
    // If the files is (also) supposed to be a CTL (in .STL format), then we
    // should be able to create CTL context from it (no password here since
    // there's no real secrets)
    //
    if (ppCTLContext != NULL)
    {
        *ppCTLContext = CertCreateCTLContext(
            X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
            pData,
            nFileSizeLow
            );

        if (*ppCTLContext == NULL)
        {
            dwErr = GetLastError();
            LogError(L"Error creating an in memory CTL context from the file: 0x%x\n", dwErr);
            goto Error;
        }
    }

    goto Cleanup;


Error:
    if (phStore != NULL)
    {
        if (*phStore != NULL)
        {
            *phStore = NULL;
        }
    }

    if (ppCTLContext != NULL)
    {
        if (*ppCTLContext != NULL)
        {
            *ppCTLContext = NULL;
        }
    }


Cleanup:
    if (pData != NULL)
    {
        UnmapViewOfFile(pData);
    }

    if (hMapping != NULL)
    {
        CloseHandle(hMapping);
    }

    if (hFile != NULL)
    {
        CloseHandle(hFile);
    }

    return dwErr;
}






DWORD ImportCTLFromContext(PCCTL_CONTEXT pCTLContext, LPWSTR* pszCTLHash)
{
    DWORD       dwErr           = NO_ERROR;
    DWORD       idx             = 0;

    HCERTSTORE  hSystemStore    = NULL;
    BOOL        fResult         = FALSE;

    LPBYTE      pbHash          = NULL;
    DWORD       cbHash          = 0;
    WCHAR       szHex[3];


    // open the destination stores
    hSystemStore = CertOpenStore(
        CERT_STORE_PROV_SYSTEM_W,
        X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
        NULL,
        CERT_SYSTEM_STORE_LOCAL_MACHINE,
        L"CA"
        );

    if (hSystemStore == NULL)
    {
        dwErr = GetLastError();
        LogError(L"Error opening the local machine store: 0x%x\n", dwErr);
        goto Error;
    }


    LogProgress(L"Adding CTL to local machine's CA certificate container\n");

    if (!CertAddCTLContextToStore(hSystemStore, pCTLContext, CERT_STORE_ADD_REPLACE_EXISTING, NULL))
    {
        dwErr = GetLastError();
        LogError(L"Error: CertAddCTLContextToStore failed  0x%08x\n", dwErr);
        goto Error;
    }
                                         

    // IIS uses the ListIdentifier in the CTL_INFO to associate a CTL to a site
    // fortunately, the CryptoAPI has already decoded this for us and in UNICODE
    // no less.  So all we have to is allocate a string to pass it back to our
    // caller and copy the bytes
    //
    if (pCTLContext->pCtlInfo->ListIdentifier.cbData)
    {
        CRYPT_DATA_BLOB *pBlob = &(pCTLContext->pCtlInfo->ListIdentifier);

        *pszCTLHash = (LPWSTR) CoTaskMemAlloc(pBlob->cbData);
        if (*pszCTLHash == NULL)
        {
            dwErr = (DWORD)E_OUTOFMEMORY;
            LogError(L"certimpx: Unable to allocate string buffer for CTL hash\n");
            goto Error;
        }

        memcpy(*pszCTLHash, pBlob->pbData, pBlob->cbData); 
    }

    goto Cleanup;

Error:
    if (*pszCTLHash != NULL)
    {
        CoTaskMemFree(*pszCTLHash);
        *pszCTLHash = NULL;
    }

Cleanup:
    if (hSystemStore != NULL)
    {
        CertCloseStore(hSystemStore, 0);
    }

    return dwErr;
}


 



DWORD ImportCertsFromStore(HCERTSTORE hSourceStore, LPWSTR* pszCertHash, bool importClientCertInSystemStore)
{
    DWORD       dwErr           = NO_ERROR;
    DWORD       idx             = 0;

    HCERTSTORE  hSystemStore    = NULL;
    HCERTSTORE  hRootStore      = NULL;
    HCERTSTORE  hUserStore      = NULL;

    PCCERT_CONTEXT pCertContext = NULL;
    PCCERT_CONTEXT pSSLCert     = NULL;

    DWORD cbUsage               = 512;
    PCERT_ENHKEY_USAGE pUsage   = (PCERT_ENHKEY_USAGE)malloc(cbUsage);

    LPBYTE  pbHash              = NULL;
    DWORD   cbHash              = 0;
    WCHAR   szHex[3];

    LPWSTR  szSubjectName;

    if (pUsage == NULL)
    {
        dwErr = (DWORD)E_OUTOFMEMORY;
        goto Error;
    }

    // open the destination stores
    hSystemStore = CertOpenStore(
        CERT_STORE_PROV_SYSTEM_W,
        X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
        NULL,
        CERT_SYSTEM_STORE_LOCAL_MACHINE,
        L"MY"
        );

    if (hSystemStore == NULL)
    {
        dwErr = GetLastError();
        LogError(L"Error opening the local machine store: 0x%x\n", dwErr);
        goto Error;
    }

    hRootStore = CertOpenStore(
        CERT_STORE_PROV_SYSTEM_W,
        X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
        NULL,
        CERT_SYSTEM_STORE_LOCAL_MACHINE,
        L"ROOT"
        );

    if (hRootStore == NULL)  
    {
        dwErr = GetLastError();
        LogError(L"Error opening the root store: 0x%x\n", dwErr);
        goto Error;
    }

    hUserStore = CertOpenStore(
        CERT_STORE_PROV_SYSTEM_W,
        X509_ASN_ENCODING | PKCS_7_ASN_ENCODING,
        NULL,
        CERT_SYSTEM_STORE_CURRENT_USER,
        L"MY"
        );

    if (hUserStore == NULL)  
    {
        dwErr = GetLastError();
        LogError(L"Error opening the user store: 0x%x\n", dwErr);
        goto Error;
    }

    for (pCertContext=NULL; (pCertContext = CertEnumCertificatesInStore(hSourceStore, pCertContext)) != NULL;)
    {
        DWORD cbRequired = 0;

        WCHAR nameStr[81];
        CertGetNameString(
            pCertContext,
            CERT_NAME_FRIENDLY_DISPLAY_TYPE,
            0, // flag
            NULL,
            nameStr,
            80);
		
        LogProgress(L"new cert context (%s)\n", nameStr);

        if (!CertGetEnhancedKeyUsage(pCertContext, 0, NULL, &cbRequired))
        {
            continue;
        }

        if (cbRequired > cbUsage)
        {
            cbUsage = cbRequired;
            if (pUsage != NULL)
                free(pUsage);
            pUsage = (PCERT_ENHKEY_USAGE)malloc(cbUsage);
        }

        if (pUsage == NULL)
        {
            continue;
        }

        if (!CertGetEnhancedKeyUsage(pCertContext, 0, pUsage, &cbUsage))
        {
            continue;
        }

        DWORD dwData = 0;
        BOOL bPrivateKey =
            CertGetCertificateContextProperty(
            pCertContext,
            CERT_KEY_PROV_INFO_PROP_ID,
            NULL,
            &dwData) &&
            CryptFindCertificateKeyProvInfo(pCertContext, 0, NULL);

		if(!bPrivateKey)
		{
			// No private key available, so store it in the root certs store
			LogProgress(L"Adding root CA certificate\n");

			if (!CertAddCertificateContextToStore(
				hRootStore,
				pCertContext,
				CERT_STORE_ADD_USE_EXISTING,
				NULL
				))
			{
				dwErr = GetLastError();
				LogError(L"Error adding certificate to root store: 0x%x\n", dwErr);
			}
		}
		else
		{
			// We have a private key, decide whether it goes 
			// into the LocalMachine or User store
			if (pUsage->cUsageIdentifier == 0)
			{
				// No certificate usage add to system store
				LogProgress(L"Adding local machine certificate\n");

				if (CertAddCertificateContextToStore(
					hSystemStore,
					pCertContext,
					CERT_STORE_ADD_USE_EXISTING,
					NULL
					))
				{
					pSSLCert = CertDuplicateCertificateContext(pCertContext);
				}
				else
				{
					dwErr = GetLastError();
					LogError(L"Error adding certificate to system store: 0x%x\n", dwErr);
				}
			}
			else
			{
				BOOL bServer = FALSE;
				BOOL bClient = FALSE;
		
				for (idx = 0; idx < pUsage->cUsageIdentifier; idx++)
				{
					if (_stricmp(OID_SERVER, pUsage->rgpszUsageIdentifier[idx]) == 0)
					{
						bServer = TRUE;
					}
					else if (_stricmp(OID_CLIENT, pUsage->rgpszUsageIdentifier[idx]) == 0)
					{
						bClient = TRUE;
					}
				}
		
				if (bServer)
				{
					LogProgress(L"Adding server certificate\n");
		
					if (CertAddCertificateContextToStore(
						hSystemStore,
						pCertContext,
						CERT_STORE_ADD_USE_EXISTING,
						NULL))
					{
						pSSLCert = CertDuplicateCertificateContext(pCertContext);
					}
					else
					{
						dwErr = GetLastError();
						LogError(L"Error adding server certificate to system store: 0x%x\n", dwErr);
					}
				}
				else if (bClient)
				{
					HCERTSTORE hTargetStore;
					LPWSTR szTargetStoreName;

					if (importClientCertInSystemStore)
					{
						hTargetStore= hSystemStore;
						szTargetStoreName = L"system store";
					}
					else
					{
						hTargetStore= hUserStore;
						szTargetStoreName = L"user store";
					}

					LogProgress(L"Adding client certificate to %s\n", szTargetStoreName);
		
					if (CertAddCertificateContextToStore(
						hTargetStore,
						pCertContext,
						CERT_STORE_ADD_USE_EXISTING,
						NULL
						))
					{
						pSSLCert = CertDuplicateCertificateContext(pCertContext);
					}
					else
					{
						dwErr = GetLastError();
						WCHAR buf[250];
						swprintf(buf, L"Error adding client certificate to %s: 0x%x\n", szTargetStoreName, dwErr);
						LogError(buf);
					}
				}
			}
        }
    }



    // If the store contained a server SSL certificate with a private key and
    // the caller asked for the hash for that cert, pull that property off the saved
    //
    if (pszCertHash && pSSLCert)
    {
        *pszCertHash = NULL;
     
         if (!CertGetCertificateContextProperty(
             pSSLCert,
             CERT_SHA1_HASH_PROP_ID,
             NULL,
             &cbHash
             ))
         {
             dwErr = GetLastError();
             LogError(L"certimpx!CertGetCertificateContextProperty (sizing) failed (%08x)\n",dwErr);
             goto Error;
         }
         
         pbHash = (PBYTE)malloc(cbHash);
         if (pbHash == NULL)
         {
             dwErr = (DWORD)E_OUTOFMEMORY;
             LogError(L"certimpx: Unable to allocate binary buffer for certificate hash\n");
             goto Error;
         }
     
         *pszCertHash = (LPWSTR) CoTaskMemAlloc(((cbHash*2)+1) * sizeof(WCHAR));
         if (*pszCertHash == NULL)
         {
             dwErr = (DWORD)E_OUTOFMEMORY;
             LogError(L"certimpx: Unable to allocate string buffer for certificate hash\n");
             goto Error;
         }
     
     
         if (!CertGetCertificateContextProperty(
             pSSLCert,
             CERT_SHA1_HASH_PROP_ID,
             pbHash,
             &cbHash
             ))
         {
             dwErr = GetLastError();
             LogError(L"certimpx: CertGetCertificateContextProperty (actual) failed (%08x)\n",dwErr);
             goto Error;
         }
     
         wcscpy(*pszCertHash,L"");

        for (idx=0; idx<cbHash; idx++)
        {
            wsprintf(szHex,L"%02X", pbHash[idx]);
            wcscat(*pszCertHash, szHex);
        }
    }

    goto Cleanup;

Error:
    if (*pszCertHash != NULL)
    {
        CoTaskMemFree(*pszCertHash);
        *pszCertHash = NULL;
    }

Cleanup:
    if (pbHash != NULL)
    {
        free(pbHash);
        pbHash = NULL;
    }

    if (pUsage != NULL)
    {
        free(pUsage);
        pUsage = NULL;
    }

    if (pSSLCert != NULL)
    {
        CertFreeCertificateContext(pSSLCert);
        pSSLCert = NULL;
    }

    if (pCertContext != NULL)
    {
        CertFreeCertificateContext(pCertContext);
        pCertContext = NULL;
    }

    if (hSystemStore != NULL)
    {
        CertCloseStore(hSystemStore, 0);
        hSystemStore = NULL;
    }

    if (hRootStore != NULL)
    {
        CertCloseStore(hRootStore, 0);
        hRootStore = NULL;
    }

    if (hUserStore != NULL)
    {
        CertCloseStore(hUserStore, 0);
        hUserStore = NULL;
    }

    return dwErr;
}






/* ImportCompleteSTL
 * -----------------
 * Externally exposed API to import an .STL file containing a
 * CTL and its associated certs into the local machine's
 * crypto store and return the CTL's list identifier GUID to
 *
 * Parameters:  
 *
 *
*/
LPWSTR ImportCompleteSTL(LPWSTR pszFileName)
{
    DWORD           dwResult        = 0;
    PCCTL_CONTEXT   pCTLContext     = NULL;
    HCERTSTORE      hFileStore      = NULL;
    LPWSTR          szCTLThumbprint = NULL;

    dwResult = OpenStoreFromFile(pszFileName, NULL, &hFileStore, &pCTLContext);
    if (dwResult)
    {
        LogError(L"Error: OpenStoreFromFile failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    dwResult = ImportCertsFromStore(hFileStore, NULL, false);
    if (dwResult)
    {
        LogError(L"Error: ImportCertsFromStore failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    dwResult = ImportCTLFromContext(pCTLContext, &szCTLThumbprint);
    if (dwResult)
    {
        LogError(L"Error: ImportCTLFromContext failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    goto Cleanup;



Error:
    if (szCTLThumbprint != NULL)
    {
        CoTaskMemFree(szCTLThumbprint);
        szCTLThumbprint = NULL;
    }

Cleanup:
    if (hFileStore != NULL)
    {
        CertCloseStore(hFileStore, 0);
        hFileStore = 0;
    }
    
    if (pCTLContext != NULL)
    {
        CertFreeCTLContext(pCTLContext);
        pCTLContext = NULL;
    }

    return szCTLThumbprint;
}




/* ImportCompletePFX
 * -----------------
 * Externally exposed API to import a .PFX file and its associated certs
 * into the local machine's crypto store and return the hash of the 
 * SSL cert imported
 *
 * Parameters:  
 *
 *
*/
LPWSTR ImportCompletePFX(LPWSTR pszFileName, LPWSTR pszPassword, bool importClientCertInSystemStore)
{
    DWORD           dwResult        = 0;
    HCERTSTORE      hFileStore      = NULL;
    LPWSTR          szCertHash      = NULL;

    LogProgress(L"ImportCompletePFX(%s)\n", pszFileName);

    dwResult = OpenStoreFromFile(pszFileName, pszPassword, &hFileStore, NULL);
    if (dwResult)
    {
        LogError(L"Error: OpenStoreFromFile failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    dwResult = ImportCertsFromStore(hFileStore, &szCertHash, importClientCertInSystemStore);
    if (dwResult)
    {
        LogError(L"Error: ImportCertsFromStore failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    goto Cleanup;


Error:
    if (szCertHash != NULL)
    {
        CoTaskMemFree(szCertHash);
        szCertHash = NULL;
    }

Cleanup:
    if (hFileStore != NULL)
    {
        CertCloseStore(hFileStore, 0);
        hFileStore = 0;
    }
    

    return szCertHash;
}




/* ImportCompleteP7B
 * -----------------
 * Externally exposed API to import the certificates in a .P7B file
 * into the local machine's crypto store
 *
 * Parameters:  
 *
 *
*/
DWORD ImportCompleteP7B(LPWSTR pszFileName)
{
    DWORD           dwResult        = 0;
    PCCTL_CONTEXT   pCTLContext     = NULL;
    HCERTSTORE      hFileStore      = NULL;
    LPWSTR          szCTLThumbprint = NULL;

    dwResult = OpenStoreFromFile(pszFileName, NULL, &hFileStore, NULL);
    if (dwResult)
    {
        LogError(L"Error: OpenStoreFromFile failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    dwResult = ImportCertsFromStore(hFileStore, NULL, false);
    if (dwResult)
    {
        LogError(L"Error: ImportCertsFromStore failed: Return code = %08x!\n", dwResult);
        goto Error;
    }

    goto Cleanup;

Error:

Cleanup:
    if (hFileStore != NULL)
    {
        CertCloseStore(hFileStore, 0);
        hFileStore = 0;
    }
    
    return dwResult;
}



/*

void main(void)
{
    LPWSTR  szHash;
    DWORD   dw;
    
    szHash = ImportCompleteSTL(L"websg.stl");
    wprintf(L"CTL hash: [%s]\n\n",szHash);
    
    szHash = ImportCompletePFX(L"websg.pfx", L"");
    wprintf(L"PFX hash: [%s]\n\n",szHash);
    
    dw = ImportCompleteP7B(L"websg.p7b");
    wprintf(L"P7B return: [0x%08x]\n\n",dw);
}


*/
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\certimpx.h ===
#define MD_SSL_CERT_HASH                ( IIS_MD_SSL_BASE+6 )
#define MD_SSL_CERT_STORE_NAME          ( IIS_MD_SSL_BASE+11 )

#define OID_SERVER "1.3.6.1.5.5.7.3.1"
#define OID_CLIENT "1.3.6.1.5.5.7.3.2"


LPWSTR ImportCompleteSTL(LPWSTR pszCertFile);
LPWSTR ImportCompletePFX(LPWSTR pszCertFile, LPWSTR pszCertPassword, bool importClientCertInSystemStore);
DWORD  ImportCompleteP7B(LPWSTR pszFileName);


DWORD OpenStoreFromFile( LPWSTR pszFileName, LPWSTR pszPassword, HCERTSTORE* phStore, PCCTL_CONTEXT* ppCTLContext);
DWORD ImportCertsFromStore(HCERTSTORE hSourceStore, LPWSTR* pszCertHash);
DWORD ImportCTLFromContext(PCCTL_CONTEXT pCTLContext, LPWSTR* pszCTLHash);
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\dllmain.cpp ===
// DllMain

#include <precomp.hxx>

#define DLL_IMPLEMENTATION
#define IMPLEMENTATION_EXPORT



/////////////////////////////////////////////////////////////////////////////
// DLL Entry Point

extern "C"
BOOL WINAPI
DllMain(
    HINSTANCE hInstance,
    DWORD dwReason,
    LPVOID /*lpReserved*/)
{
    BOOL  fReturn = TRUE;  // ok
    
    if (dwReason == DLL_PROCESS_ATTACH)
    {
        fReturn = TRUE;;
    }
    else if (dwReason == DLL_PROCESS_DETACH)
    {
        fReturn = TRUE;;
    }

    return fReturn;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\auth\test\Unit\TestXAuthdataTokenHandler.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.Web;
using System.Diagnostics;
using System.Xml.Linq;
using System.Xml;
using System.IO;
using System.Net;
using System.Configuration;
using System.Security.Cryptography;

using Microsoft.IdentityModel.Web.Controls;
using Microsoft.IdentityModel.Claims;
using Microsoft.IdentityModel.Tokens;

using Microsoft.XboxLive.Auth;
using Microsoft.XboxLive.Auth.Protocol;
using Microsoft.XboxLive.Auth.Tokens;
using Microsoft.XboxLive.Auth.Claims;

namespace Microsoft.XboxLive.Auth.Test
{
    class TestXAuthdataTokenHandler : ITester
    {
        private const string _SigningKeyRaw = "F151B9D0774A180FB03848B41278D6F3954620D94CFA8DF3F81FD65D074DDB5602DB145D3374EBA95ABA58D6F46ED81FC6929BC3F168E9471A602844C3131EDF";
        private const string _SigningKeyEncrypted = "962DB6A8CF5C9DCF6704EB15ED5A9E514E56CC7680A9249A3874506B984585B1274B4F8012C1EAF4554BF8EDE9A90565F532EBC1B7381A0BA75F05452C182B20BD6B888A64EC3641B8FAA70854E1613866413CEBDBF9F39BABA71ADC21B69E94A1298DFCDE8F2B78377271E160489F38F14A6C34560F7201EF35326C5908E069BA5E1E3F238C03936494AC2C5F34D1FD2F2000486D36634C8911FD60F5CDEF61BD5EEB5076AFF085E6643120E9501261C9DFF7E305AFF7C0892A299B75D09FDB92A3C33B200CC4E0F3050EDED89F5800DBDA0B7FBA005F2E1D01A9613CF9E268FFFE2F5B9A92EE6F5DD7C3EDCEBE3A17811CB1751B32C9F39CE1341E82A6BA1D";

        private const string _SigningKeyRaw2 = "C67BC19631DA12EC458397E647B2E7FC716E849C4A1052F3829C5DD79BAED1B0E779D4C83B2A7132BEA9689C427844600B34CD795FAD7A994650BC80D7A535E9";
        private const string _SigningKeyEncrypted2 = "CF765E4171B15F4C82ECC9A9A00000D3E7735E3312C6ABD2AF8B3A6D4FC6003720D91323DBAD795C9B18FFFDD3892B4E7C1BEDD3076E42148911D1725D8415E88A816AAF1E27910A391FCB6DDDDCFBED65271EE6E852D524D4A2BD48167F13E9567C85CF26C0A6625C95B53C9F8875CB2B81F6B0494C0643A7734467BA90DA557A5767C18E5E16371B82B1CBABD42EDB983F1B0C7FE45A46AF696E959096083C9B7C607814AD6B2B7DE7F22634120269DDC14E0714304CB56C17A6DC88374294C11BEEAAF1A6E1EF4BE5501D338ACDD3B293EFCC80F57A5A8A2AD8326934501787B431B057FE262DF63CDA33FB3E4251180D533285FE5168194866702586552A";

        public TestXAuthdataTokenHandler()
        {
        }

        public void Run()
        {
            TestToken();
            TestSigningKeys();
            TestWrite();
            TestRead();
            TestReadVerification();
            TestValidate();
            TestE2E();
            TestWeb();
        }

        public XAuthdataTokenHandler GetHandler(
            string signingKey = _SigningKeyEncrypted,
            string masterKeyVer = "1",
            string enableSignatures = null,
            string enableClockSkew = null,
            string clockSkewSeconds = null
            )
        {
            ConfigurationManager.AppSettings["XAuthdataSigningKeys"] = signingKey;
            ConfigurationManager.AppSettings["XAuthdataMasterKeyVersions"] = masterKeyVer;
            ConfigurationManager.AppSettings["XAuthdataEnableSignatures"] = enableSignatures;
            ConfigurationManager.AppSettings["XAuthdataEnableClockSkewVerification"] = enableClockSkew;
            ConfigurationManager.AppSettings["XAuthdataMaxClockSkewSeconds"] = clockSkewSeconds;
            return new XAuthdataTokenHandler();
        }

        public XAuthdataToken GetToken()
        {
            var claims1 = new List<Claim>()
            {
                new Claim("http://test/claimtype1", "imastring"),
                new Claim("http://test/claimtype2", "10", ClaimValueTypes.HexBinary),
            };
            var claims2 = new List<Claim>()
            {
                new Claim(AuthClaimTypes.ClientIpPort, "1.1.1.1:2", AuthClaimValueTypes.IpAddress),
                new Claim(AuthClaimTypes.Status, "imaxboxstring", ClaimValueTypes.String, "testissuer"),
            };
            var ids = new List<IClaimsIdentity>()
            {
                new ClaimsIdentity(claims1, "TestAuthType1"),
                new ClaimsIdentity(claims2, "TestAuthType2"),
            };
            var token = new XAuthdataToken("0011223344556677", ids);
            return token;
        }

        public void TestToken()
        {
            var token1 = new XAuthdataToken(null);
            Debug.Assert(token1.Id.Length == 16);
            Debug.Assert(token1.Identities != null);
            Debug.Assert(token1.Identities.Count == 0);

            var claims = new List<Claim>()
            {
                new Claim("claimtype1", "claimvalue1"),
                new Claim("claimtype2", "claimvalue2"),
            };
            var ids = new List<IClaimsIdentity>()
            {
                new ClaimsIdentity(claims),
            };

            var token2 = new XAuthdataToken(null, ids);
            Debug.Assert(token2.Id.Length == 16);
            Debug.Assert(token1.Id != token2.Id);
            Debug.Assert(token2.Identities.Count == 1);
            Debug.Assert(token2.Identities[0].Claims.Count == 2);

            var token3 = new XAuthdataToken("FOO", ids);
            Debug.Assert(token3.Id == "FOO");
            Debug.Assert(token3.ValidFrom <= DateTime.UtcNow);
            Debug.Assert(token3.ValidTo > DateTime.UtcNow.AddHours(4));
        }

        public void TestSigningKeys()
        {
            XAuthdataTokenHandler handler;
            try
            {
                handler = GetHandler();
            }
            catch (Exception e)
            {
                if (!(e is FormatException && e.InnerException is ArgumentNullException))
                    throw;
            }

            // Test helper function
            Func<string, string, Type, XAuthdataTokenHandler> testCreate = (key, mkver, extype) => {
                try
                {
                    handler = GetHandler(signingKey: key, masterKeyVer: mkver);
                    if (extype != null)
                    {
                        throw new Exception("No exception caught, expected " + extype);
                    }
                    return handler;
                }
                catch (Exception e)
                {
                    if (e.GetType() != extype || extype == null)
                        throw;
                    return null;
                }
            };

            // Positive
            handler = testCreate(_SigningKeyEncrypted, "1", null);
            handler = testCreate("0x" + _SigningKeyEncrypted, "1", null);
            handler = testCreate(_SigningKeyEncrypted + "," + _SigningKeyEncrypted2, null, null);
            handler = testCreate(_SigningKeyEncrypted + "," + _SigningKeyEncrypted2, "1,1", null);

            // Negative
            testCreate(_SigningKeyEncrypted + "," + _SigningKeyEncrypted2, "1", typeof(FormatException));
            testCreate("00 11", "1", typeof(FormatException));
            testCreate("zz", "1", typeof(FormatException));
            testCreate("00", "1", typeof(FormatException));
            testCreate(_SigningKeyEncrypted + ",00", "1", typeof(FormatException));
        }

        public void TestWrite()
        {
            var handler = GetHandler();
            var token = GetToken();

            Debug.Assert(handler.CanWriteToken);
            var root = handler.WriteToken(token);

            Console.WriteLine(root.ToString());

            Debug.Assert(root.Name == XAuthdataConstants.Elements.XAUTHDATATOKEN);
            Debug.Assert(root.Attributes().Count() == 2);
            Debug.Assert(root.Elements("msg").Count() == 1);
            Debug.Assert(root.Elements("sig").Count() == 1);

            XElement msg = root.Element("msg");
            XElement id1 = msg.Elements(XAuthdataConstants.Elements.IDENTITY).ElementAt(0);
            XElement id2 = msg.Elements(XAuthdataConstants.Elements.IDENTITY).ElementAt(1);
            var claims1 = id1.Elements(XAuthdataConstants.Elements.CLAIM);
            var claims2 = id2.Elements(XAuthdataConstants.Elements.XBOXCLAIM);

            Debug.Assert((string)id1.Attribute(XAuthdataConstants.Attributes.AUTHTYPE) == "TestAuthType1");
            Debug.Assert((string)id2.Attribute(XAuthdataConstants.Attributes.AUTHTYPE) == "TestAuthType2");
            
            Debug.Assert(id1.Elements(XAuthdataConstants.Elements.CLAIM).Count() == 2);
            Debug.Assert(id1.Elements(XAuthdataConstants.Elements.XBOXCLAIM).Count() == 0);
            Debug.Assert(id2.Elements(XAuthdataConstants.Elements.CLAIM).Count() == 0);
            Debug.Assert(id2.Elements(XAuthdataConstants.Elements.XBOXCLAIM).Count() == 2);

            Debug.Assert((string)claims1.ElementAt(0).Attribute(XAuthdataConstants.Attributes.CLAIMTYPE) == "http://test/claimtype1");
            Debug.Assert((string)claims1.ElementAt(0).Attribute(XAuthdataConstants.Attributes.ISSUER) == null);
            Debug.Assert((string)claims1.ElementAt(1).Attribute(XAuthdataConstants.Attributes.CLAIMTYPE) == "http://test/claimtype2");
            Debug.Assert((string)claims1.ElementAt(1).Attribute(XAuthdataConstants.Attributes.ISSUER) == null);
            Debug.Assert((string)claims2.ElementAt(0).Attribute(XAuthdataConstants.Attributes.CLAIMTYPE) == AuthClaimTypes.ClientIpPort.Substring(XAuthdataConstants.Values.XBOXCLAIM_CLAIMTYPE_PREFIX.Length));
            Debug.Assert((string)claims2.ElementAt(0).Attribute(XAuthdataConstants.Attributes.ISSUER) == null);
            Debug.Assert((string)claims2.ElementAt(1).Attribute(XAuthdataConstants.Attributes.CLAIMTYPE) == AuthClaimTypes.Status.Substring(XAuthdataConstants.Values.XBOXCLAIM_CLAIMTYPE_PREFIX.Length));
            Debug.Assert((string)claims2.ElementAt(1).Attribute(XAuthdataConstants.Attributes.ISSUER) == "testissuer");

            Debug.Assert(claims1.ElementAt(0).Value == "imastring");
            Debug.Assert(claims1.ElementAt(1).Value == "10");
            Debug.Assert(claims2.ElementAt(0).Value == "1.1.1.1:2");
            Debug.Assert(claims2.ElementAt(1).Value == "imaxboxstring");

            XElement sig = root.Element("sig");
            byte[] sigBytes = Convert.FromBase64String(sig.Value);
            Debug.Assert(sigBytes.Length == 32);

            // Test signature and timestamp
            XElement token1 = handler.WriteToken(token);
            System.Threading.Thread.Sleep(1100);
            XElement token2 = handler.WriteToken(token);
            Console.WriteLine("\ntoken1:\n{0}", token1.ToString());
            Console.WriteLine("\ntoken2 (+1 second):\n{0}", token2.ToString());
            Debug.Assert(token1.Element("msg").ToString(SaveOptions.DisableFormatting) != token2.Element("msg").ToString(SaveOptions.DisableFormatting));
            Debug.Assert(DateTime.Parse((string)token1.Element("msg").Attribute("ts")) < DateTime.Parse((string)token2.Element("msg").Attribute("ts")));
            Debug.Assert(token1.Element("sig").Value != token2.Element("sig").Value);
        }

        public void TestRead()
        {
            var handler = GetHandler();
            XAuthdataToken token1, token2;
            var tokenXml = handler.WriteToken(GetToken()).ToString(SaveOptions.DisableFormatting);

            using (var reader = XmlReader.Create(new StringReader(tokenXml)))
            {
                Debug.Assert(handler.CanReadToken(reader));
                token1 = (XAuthdataToken)handler.ReadToken(reader);
            }

            token2 = (XAuthdataToken)handler.ReadToken(tokenXml);

            Debug.Assert(token1.Id == "0011223344556677");
            Debug.Assert(token2.Id == "0011223344556677");

            Debug.Assert(token1.Identities.Count == 2);
            Debug.Assert(token2.Identities.Count == 2);

            AssertIdentities(token1.Identities.AsEnumerable());
            AssertIdentities(token2.Identities.AsEnumerable());
        }

        public void TestReadVerification()
        {
            XAuthdataTokenHandler handler = GetHandler();
            XElement tokenElement = handler.WriteToken(GetToken());

            // Test helper function
            Func<Type, XAuthdataToken> testRead = (extype) =>
            {
                try
                {
                    var token = (XAuthdataToken)handler.ReadToken(tokenElement);
                    if (extype != null)
                    {
                        throw new Exception("No exception caught, expected " + extype);
                    }
                    return token;
                }
                catch (Exception e)
                {
                    if (e.GetType() != extype || extype == null)
                        throw;
                    return null;
                }
            };

            handler = GetHandler(enableSignatures: null, enableClockSkew: null);
            testRead(null);

            handler = GetHandler(enableSignatures: "true", enableClockSkew: "true");
            testRead(null);

            // Modify the token
            tokenElement.Element("msg").Add(
                new XAttribute("modified", "yup"));

            handler = GetHandler(enableSignatures: null, enableClockSkew: null);
            testRead(typeof(InvalidSecurityTokenException));

            // Disable sig checks
            handler = GetHandler(enableSignatures: "false", enableClockSkew: null);
            testRead(null);

            // Shorten clock skew
            System.Threading.Thread.Sleep(1100);
            handler = GetHandler(enableSignatures: "false", enableClockSkew: null, clockSkewSeconds: "1");
            testRead(typeof(InvalidSecurityTokenException));

            // Disable skew checking
            handler = GetHandler(enableSignatures: "false", enableClockSkew: "false", clockSkewSeconds: "1");
            testRead(null);

            // Sanity check: enable skew checking, increase range
            handler = GetHandler(enableSignatures: "false", enableClockSkew: null, clockSkewSeconds: "300");
            testRead(null);

            // No sig present
            handler = GetHandler();
            tokenElement = handler.WriteToken(GetToken());
            tokenElement.Element("sig").Remove();
            testRead(typeof(InvalidSecurityTokenException));

            // Empty sig
            tokenElement.Add(new XElement("sig", String.Empty));
            testRead(typeof(InvalidSecurityTokenException));


            // Rolling keys

            // Sign with one key, verify with two
            handler = GetHandler(signingKey: _SigningKeyEncrypted);
            tokenElement = handler.WriteToken(GetToken());
            testRead(null);
            handler = GetHandler(signingKey: _SigningKeyEncrypted + "," + _SigningKeyEncrypted2, masterKeyVer: "1,1");
            testRead(null);
            handler = GetHandler(signingKey: _SigningKeyEncrypted2 + "," + _SigningKeyEncrypted, masterKeyVer: "1,1");
            testRead(null);
            handler = GetHandler(signingKey: _SigningKeyEncrypted2);
            testRead(typeof(InvalidSecurityTokenException));

            // Sign with two, ensure it used the first key
            handler = GetHandler(signingKey: _SigningKeyEncrypted2 + "," + _SigningKeyEncrypted, masterKeyVer: "1,1");
            tokenElement = handler.WriteToken(GetToken());
            testRead(null);
            handler = GetHandler(signingKey: _SigningKeyEncrypted2);
            testRead(null);
            handler = GetHandler(signingKey: _SigningKeyEncrypted);
            testRead(typeof(InvalidSecurityTokenException));
        }

        public void TestValidate()
        {
            var handler = GetHandler();
            var token = GetToken();

            Debug.Assert(handler.CanValidateToken);

            var identities = handler.ValidateToken(token);

            AssertIdentities(identities);
        }

        private void AssertIdentities(IEnumerable<IClaimsIdentity> identities)
        {
            Claim c;

            c = identities.ElementAt(0).Claims[0];
            Debug.Assert(c.ClaimType == "http://test/claimtype1");
            Debug.Assert(c.ValueType == ClaimValueTypes.String);
            Debug.Assert(c.Value == "imastring");
            Debug.Assert(c.Issuer == "LOCAL AUTHORITY");

            c = identities.ElementAt(0).Claims[1];
            Debug.Assert(c.ClaimType == "http://test/claimtype2");
            Debug.Assert(c.ValueType == ClaimValueTypes.HexBinary);
            Debug.Assert(c.Value == "10");
            Debug.Assert(c.Issuer == "LOCAL AUTHORITY");

            c = identities.ElementAt(1).Claims[0];
            Debug.Assert(c.ClaimType == AuthClaimTypes.ClientIpPort);
            Debug.Assert(c.ValueType == AuthClaimValueTypes.IpAddress);
            Debug.Assert(c.Value == "1.1.1.1:2");
            Debug.Assert(c.Issuer == "LOCAL AUTHORITY");

            c = identities.ElementAt(1).Claims[1];
            Debug.Assert(c.ClaimType == AuthClaimTypes.Status);
            Debug.Assert(c.ValueType == ClaimValueTypes.String);
            Debug.Assert(c.Value == "imaxboxstring");
            Debug.Assert(c.Issuer == "testissuer");

        }

        public void TestE2E()
        {
            var handler = GetHandler();

            var tokenXml = handler.WriteToken(GetToken()).ToString(SaveOptions.DisableFormatting);
            var token = handler.ReadToken(tokenXml);
            var identities = handler.ValidateToken(token);
            var root = handler.WriteToken((XAuthdataToken)token);
            var rootStr = root.ToString(SaveOptions.DisableFormatting);
            string origXml = tokenXml.Replace("'", "\"");

            Console.WriteLine("\norigXml:\n{0}", origXml);
            Console.WriteLine("\nrootStr:\n{0}", rootStr);

            // Again!
            token = GetToken();
            root = handler.WriteToken((XAuthdataToken)token);
            var token2 = handler.ReadToken(root.ToString(SaveOptions.DisableFormatting));
        }

        public void TestWeb()
        {
            var handler = GetHandler();
            var protocol = new XblAuthProtocolHandler();

            var token = GetToken();
            var identities = handler.ValidateToken(token);
            var principal = new ClaimsPrincipal(identities);
            WebHeaderCollection headers = new WebHeaderCollection();

            Debug.Assert(headers["Authorization"] == null);


            // Take principal, write to header
            headers.SetXAuthdata(principal);
            Debug.Assert(headers["Authorization"] != null);

            // Take header, create a principal. We haven't configured WIF to handle 
            // this, so it shouldn't.
            var principal2 = protocol.ProcessToken(headers, "http://testurl");
            Debug.Assert(principal2 == null);

            // Ensure WIF can process XAuthdataTokens
            protocol.ServiceConfig.SecurityTokenHandlers.Add(handler);
            principal2 = protocol.ProcessToken(headers, "http://testurl");
            Debug.Assert(principal2 != null);
            Debug.Assert(principal.Identities.Count == 2);
            Debug.Assert(principal2.Identities.Count == 2);

            // Same principal?
            var token1 = new XAuthdataToken("foo", principal.Identities);
            var token2 = new XAuthdataToken("foo", principal2.Identities);
            var root1 = handler.WriteToken(token1);
            var root2 = handler.WriteToken(token2);
            Debug.Assert(root1.ToString(SaveOptions.DisableFormatting) == root2.ToString(SaveOptions.DisableFormatting));

            // Replace principal
            headers.SetXAuthdata(ClaimsPrincipal.AnonymousPrincipal);
            var principal3 = protocol.ProcessToken(headers, "http://testurl");
            Debug.Assert(principal3.Identities.Count == 1);
            Debug.Assert(principal3.Identities[0].Claims.Count == 0);

        }


    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_certimpx_none_12.4.56.0_none_b309607cceb801aa
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=certimpx
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.manifest
XP_MANIFEST_PATH=manifests\x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.cat
XP_CATALOG_PATH=manifests\x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.cat
XP_PAYLOAD_PATH=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=certimpx,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\dll\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\certimpx\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86_certimpx_none_12.4.56.0_none_b309607cceb801aa
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=certimpx
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.manifest
XP_MANIFEST_PATH=manifests\x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.cat
XP_CATALOG_PATH=manifests\x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646.cat
XP_PAYLOAD_PATH=x86_certimpx_no-public-key_12.4.56.0_x-ww_2bf54646
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=certimpx,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\dll\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\FriendsListUtil.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Transactions;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;
using xonline.common.protocol.SubNoti;

namespace xonline.common.community
{
    public class FriendsList : UserListData
    {
        public FriendsList() : base(DATA_TYPES.eFriendsList)
        {
        }
        
        public override bool Equals(object obj)
        {
            FriendsList inputList = obj as FriendsList;

            if (inputList == null) return false;
            if (inputList.OwnerID != this.OwnerID) return false;
            if (inputList.dwListVersion != this.dwListVersion) return false;
            if (inputList.HeaderFlags != this.HeaderFlags) return false;

            return true;
        }

        public override int GetHashCode()
        {
            return OwnerID.GetHashCode();
        }

        public bool CanShareList(ulong targetId)
        {
            if (targetId == OwnerID) 
            {
                return true;
            }

            if (0 != (HeaderFlags & CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE))
            {
                return true;
            }
            else if ((0 != (HeaderFlags & CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS)) 
                && IsAcceptedBuddy(targetId))
            {
                return true;
            }

            return false;
        }

        public bool IsAcceptedBuddy(ulong buddyXuid)
        {
            int index = Array.BinarySearch(rgUsers, buddyXuid, FriendComparer.Instance);
            if (index >= 0)
            {
                return CacheUtil.GetFriendStatus(rgUsers[index].dwUserFlags) == PresDefs.P_BUDDY_STATUS_OK;
            }

            return false;
        }

        public bool IsRequestedBuddy(ulong buddyXuid)
        {
            int index = Array.BinarySearch(rgUsers, buddyXuid, FriendComparer.Instance);
            if (index >= 0)
            {
                return CacheUtil.GetFriendStatus(rgUsers[index].dwUserFlags) == PresDefs.P_BUDDY_STATUS_REQUEST;
            }

            return false;
        }

        public bool IsPendingBuddy(ulong buddyXuid)
        {
            int index = Array.BinarySearch(rgUsers, buddyXuid, FriendComparer.Instance);
            if (index >= 0)
            {
                return CacheUtil.GetFriendStatus(rgUsers[index].dwUserFlags) == PresDefs.P_BUDDY_STATUS_PENDING;
            }

            return false;
        }

        public bool AreAcceptedBuddies(ulong qwUser1, ulong qwUser2)
        {
            ulong buddyXuid = 0;
            if (qwUser1 == OwnerID)
            {
                buddyXuid = qwUser2;
            }
            else if (qwUser2 == OwnerID)
            {
                buddyXuid = qwUser1;
            }
            else
            {
                // neither is the owner, WTF?
                return false;
            }

            return IsAcceptedBuddy(buddyXuid);
        }

        /// <summary>
        /// Creates an instance of the FriendsList and populates its fields from a data reader
        /// </summary>
        /// <param name="ownerId">the owner xuid</param>
        /// <param name="reader">the reader to populate from</param>
        /// <returns>friends list</returns>
        internal static FriendsList FromDataReader(ulong ownerId, WstDataReader reader)
        {
            FriendsList returnList = new FriendsList();
            List<UserData> lFriends = new List<UserData>();
            int listVersion = -1;

            if (reader.HasRows)
            {
                while (reader.Read())
                {
                    UserData f = new UserData();
                    f.qwXUID = (ulong)(long)reader["bi_friend_puid"];
                    CacheUtil.SetFriendStatus(ref f.dwUserFlags, (uint)(byte)reader["ti_status"]);
                    lFriends.Add(f);
                }
            }

            if (reader.NextResult() && reader.Read())
            {
                listVersion = reader.GetInt32(0);
            }

            returnList.OwnerID = ownerId;
            returnList.dwListVersion = unchecked((uint)(listVersion));
            returnList.rgUsers = lFriends.ToArray();

            return returnList;
        }

        internal void GetSharingPermissions()
        {
            UserPrivileges privs = PresenceUtil.GetUserPrivileges(OwnerID);
            ApplySharingPermissions(privs);
        }

        public void ApplySharingPermissions(UserPrivileges privs)
        {            
            if (privs.HasPrivilege(XOn.XPRIVILEGE_SHARE_FRIENDS_LIST))
            {
                HeaderFlags |= CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE;
            }
            else
            {
                HeaderFlags &= unchecked((uint)~CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE);
            }

            if (privs.HasPrivilege(XOn.XPRIVILEGE_SHARE_FRIENDS_LIST_FRIENDS_ONLY))
            {
                HeaderFlags |= CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS;
            }
            else
            {
                HeaderFlags &= unchecked((uint)~CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS);
            }
        }
    }


    public class FriendComparer : IComparer
    {
        protected static FriendComparer s_instance = new FriendComparer();
        public static FriendComparer Instance
        {
            get
            {
                return s_instance;
            }
        }
        
        int IComparer.Compare(Object x, Object y)
        {
            UserData userData = (UserData)x;
            ulong qwUser = (ulong)y;
            
            return (userData.qwXUID < qwUser) ? -1 : (userData.qwXUID > qwUser) ? 1 : 0;
        }

        public static Hashtable DiffFriendsLists(FriendsList list1, FriendsList list2)
        {
            Hashtable htResults = new Hashtable();
            int iIndex1 = 0;
            int iIndex2 = 0;
            UserData[] rgList1 = (list1 == null) ? null : list1.rgUsers;
            UserData[] rgList2 = (list2 == null) ? null : list2.rgUsers;

            if ((rgList1 != null) && (rgList2 != null))
            {
                // really diff.                            
                while ((iIndex1 < rgList1.Length) && (iIndex2 < rgList2.Length))
                {
                    if (rgList1[iIndex1].qwXUID == rgList2[iIndex2].qwXUID)
                    {
                        if (rgList1[iIndex1].dwUserFlags != rgList2[iIndex2].dwUserFlags)
                        {
                            //  we need to add this user.  doesnt matter which status goes in.
                            htResults.Add(rgList1[iIndex1].qwXUID, true);
                        }
                        // this item is the same, skip in both lists.
                        iIndex1++;
                        iIndex2++;
                    }
                    else if (rgList1[iIndex1].qwXUID < rgList2[iIndex2].qwXUID)
                    {
                        // list1 contains an item not in list2.
                        htResults.Add(rgList1[iIndex1].qwXUID, true);
                        iIndex1++;
                    }
                    else
                    {
                        // list2 contains an item not in list1.
                        htResults.Add(rgList2[iIndex2].qwXUID, true);
                        iIndex2++;
                    }
                }
            }

            if (rgList1 != null)
            {
                // add anything left in list1.
                while (iIndex1 < rgList1.Length)
                {
                    htResults.Add(rgList1[iIndex1].qwXUID, true);
                    iIndex1++;
                }
            }

            if (rgList2 != null)
            {
                // add anything left in list2.
                while (iIndex2 < rgList2.Length)
                {
                    htResults.Add(rgList2[iIndex2].qwXUID, true);
                    iIndex2++;
                }
            }

            return htResults;
        }
        
    }



    public class FriendsListUtil
    {
        static TransactionOptions s_txnOptions = new TransactionOptions();

        static FriendsListUtil()
        {
            s_txnOptions.IsolationLevel = IsolationLevel.ReadCommitted;
        }
        
        /// <summary>
        /// Entry point for getting the friends list
        /// </summary>
        /// <param name="userId">the xuid to query the list for</param>
        /// <returns>the list of Friend objects</returns>
        public static FriendsList GetFriendsListForXuid(ulong userId)
        {
            FriendsList friends = GetFriendsListFromCache(userId);

            if (friends == null)
            {
                friends = GetFriendsListFromDatabase(userId);
                UpdateCache(friends);
            }

            return friends;
        }

        /// <summary>
        /// Adds a friend relationship by doing inserts on both UODB partitions. Also updates the cache.
        /// </summary>
        /// <param name="userId">xuid of user requesting friendship</param>
        /// <param name="friendId">xuid of target user</param>
        /// <param name="userGamertag">gamertag of requesting user</param>
        /// <param name="friendGamertag">request target gamertag</param>
        /// <returns>HResult</returns>
        public static HResult Add(ulong userId, ulong friendId, string userGamertag, string friendGamertag)
        {
            if (string.IsNullOrEmpty(userGamertag) || userGamertag.Length >= PresDefs.XONLINE_GAMERTAG_SIZE)
            {
                throw new ArgumentException("userGamertag is the wrong length", "userGamertag");
            }

            if (string.IsNullOrEmpty(friendGamertag) || friendGamertag.Length >= PresDefs.XONLINE_GAMERTAG_SIZE)
            {
                throw new ArgumentException("friendGamertag is the wrong length", "friendGamertag");
            }

            HResult hr = HResult.S_OK;

            FriendsList userList = null;
            FriendsList friendList = null;

            using (TransactionScope txnScope = new TransactionScope(TransactionScopeOption.Required, s_txnOptions))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    /*
                    * Do the sproc calls in the same order as the xuids.
                    * This prevents issues if both users are making friend requests to each other at the same time.
                    */
                    Action[] rgActions = null;
                    
                    Action addAction = delegate()
                    {
                        ws.ClearParameters();

                        ws.StoredProc = "dbo.p_pres_add_friend_V2";
                        ws.Partition = ws.CalcPartition(userId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", userId);
                        ws.AddParameter("@bi_friend_puid", friendId);
                        ws.AddParameter("@vc_friend_gamertag", friendGamertag);
                        ws.AddParameter("@i_friend_limit", Config.GetSetting("presence_MaxFriends"));

                        WstDataReader reader = ws.Execute();
                        hr = (uint)ws.GetIntParameter("@RETVAL");
                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read() && reader.NextResult())
                        {
                            userList = FriendsList.FromDataReader(userId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    Action addedAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "dbo.p_pres_added_friend_V2";
                        ws.Partition = ws.CalcPartition(friendId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", friendId);
                        ws.AddParameter("@bi_friend_puid", userId);
                        ws.AddParameter("@vc_friend_gamertag", userGamertag);
                        ws.AddParameter("@i_friend_limit", Config.GetSetting("presence_MaxFriends"));

                        WstDataReader reader = ws.Execute();
                        hr = (uint)ws.GetIntParameter("@RETVAL");
                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read() && reader.NextResult())
                        {
                            friendList = FriendsList.FromDataReader(friendId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    if (userId < friendId)
                    {
                        rgActions = new Action[]{addAction, addedAction};
                    }
                    else
                    {
                        rgActions = new Action[]{addedAction, addAction};
                    }

                    for (int iAction = 0; iAction < rgActions.Length; iAction++)
                    {
                        rgActions[iAction]();
                        if (HResult.Failed(hr))
                        {
                            goto exit;
                        }
                    }
                }
                
                txnScope.Complete();
            }

            // Update the cache entries for both lists.
            userList.GetSharingPermissions();
            friendList.GetSharingPermissions();
            UpdateCache(userList);
            UpdateCache(friendList);

            PresenceRecord friendRecord = PresenceUtil.GetPresenceRecord(friendId);
            if ((friendRecord != null) && (friendRecord.IsOnline()))
            {
                friendRecord.QueueListChangeQVals(
                    friendList.dwListVersion,
                    userId,
                    PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_ADDED,
                    hr,
                    userGamertag);
            }

        exit:

            // always send the adder a qval.
            PresenceRecord userRecord = PresenceUtil.GetPresenceRecord(userId);
            if ((userRecord != null) && (userRecord.IsOnline()))
            {
                userRecord.QueueListChangeQVals(
                    (userList == null) ? 0 : userList.dwListVersion,
                    friendId,
                    PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_ADD,
                    hr,
                    friendGamertag);
            }

            return hr;
        }

        /// <summary>
        /// Accepts an existing friend request and updates the cache
        /// </summary>
        /// <param name="userId">xuid of user doing the accepting</param>
        /// <param name="friendId">xuid of user who sent the request</param>
        /// <returns>Hresult</returns>
        public static HResult Accept(ulong userId, ulong friendId)
        {
            HResult hr = HResult.S_OK;

            FriendsList userList = null;
            FriendsList friendList = null;
            string userGamertag = null;
            string friendGamertag = null;

            using (TransactionScope txnScope = new TransactionScope(TransactionScopeOption.Required, s_txnOptions))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    /*
                    * Do the sproc calls in the same order as the xuids.
                    * This prevents issues if both users are making friend requests to each other at the same time.
                    */
                    Action[] rgActions = null;
                    
                    Action acceptAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "dbo.p_pres_accept_friend_V2";
                        ws.Partition = ws.CalcPartition(userId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", userId);
                        ws.AddParameter("@bi_friend_puid", friendId);

                        WstDataReader reader = ws.Execute();

                        hr = (uint)ws.GetIntParameter("@RETVAL");

                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read())
                        {
                            userGamertag = reader.GetString(1);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                            return;
                        }

                        if (reader.NextResult())
                        {
                            userList = FriendsList.FromDataReader(userId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };
                    
                    Action acceptedAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "dbo.p_pres_accepted_friend_V2";
                        ws.Partition = ws.CalcPartition(friendId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", friendId);
                        ws.AddParameter("@bi_friend_puid", userId);

                        WstDataReader reader = ws.Execute();

                        hr = (uint)ws.GetIntParameter("@RETVAL");

                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read())
                        {
                            friendGamertag = reader.GetString(1);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                            return;
                        }

                        if (reader.NextResult())
                        {
                            friendList = FriendsList.FromDataReader(friendId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    if (userId < friendId)
                    {
                        rgActions = new Action[]{acceptAction, acceptedAction};
                    }
                    else
                    {
                        rgActions = new Action[]{acceptedAction, acceptAction};
                    }

                    for (int iAction = 0; iAction < rgActions.Length; iAction++)
                    {
                        rgActions[iAction]();
                        if (HResult.Failed(hr))
                        {
                            goto exit;
                        }
                    }
                }

                txnScope.Complete();
            }

            // Update the cache entries for both lists.
            userList.GetSharingPermissions();
            UpdateCache(userList);
            friendList.GetSharingPermissions();
            UpdateCache(friendList);

            PresenceRecord friendRecord = PresenceUtil.GetPresenceRecord(friendId);
            if ((friendRecord != null) && (friendRecord.IsOnline()))
            {
                friendRecord.QueueListChangeQVals(
                    friendList.dwListVersion,
                    userId,
                    PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_ACCEPT,
                    hr,
                    userGamertag);
            }
                
        exit:

            // always send the caller a qval.
            PresenceRecord userRecord = PresenceUtil.GetPresenceRecord(userId);
            if ((userRecord != null) && (userRecord.IsOnline()))
            {
                userRecord.QueueListChangeQVals(
                    (userList == null) ? 0 : userList.dwListVersion,
                    friendId,
                    PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_ACCEPT,
                    hr,
                    friendGamertag);
            }

            if (HResult.Succeeded(hr))
            {
                //Notify friends change to presence events
                PresenceEvents.PublishFriendsChange(new PresenceEvents.FriendsChangeEventArgs()
                {
                    Xuid1 = userId,
                    Xuid2 = friendId,
                    AreFriends = true
                }
                );
            }

            
            return hr;
        }

        /// <summary>
        /// Rejects a friend request and optionally blocks the sender.
        /// </summary>
        /// <param name="userId">xuid of user doing the accepting</param>
        /// <param name="friendId">xuid of user who sent the request</param>
        /// <param name="blockFriendId">flag indicating requesting user should be blocked</param>
        /// <param name="userListVersion">resulting friends list version for the userId user</param>
        /// <param name="friendListVersion">resulting friends list version for the friendId user</param>
        /// <returns>Hresult</returns>
        public static HResult Reject(ulong userId, 
            ulong friendId, 
            bool blockFriendId)
        {
            HResult hr = HResult.S_OK;
            FriendsList userList = null;
            FriendsList friendList = null;

            using (TransactionScope txnScope = new TransactionScope(TransactionScopeOption.Required, s_txnOptions))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    /*
                    * Do the sproc calls in the same order as the xuids.
                    * This prevents issues if both users are making friend requests to each other at the same time.
                    */
                    Action[] rgActions = null;
                    
                    Action rejectAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "dbo.p_pres_reject_friend_V2";
                        ws.Partition = ws.CalcPartition(userId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", userId);
                        ws.AddParameter("@bi_friend_puid", friendId);
                        ws.AddParameter("@f_never", (blockFriendId) ? 1 : 0);

                        WstDataReader reader = ws.Execute();

                        hr = (uint)ws.GetIntParameter("@RETVAL");

                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read())
                        {
                            hr = (uint)ws.GetIntParameter("@RETVAL");
                            if (hr != HResult.S_OK)
                            {
                                return;
                            }
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                            return;
                        }
                        
                        if (reader.NextResult())
                        {
                            userList = FriendsList.FromDataReader(userId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    Action rejectedAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "p_pres_rejected_friend_V2";
                        ws.Partition = ws.CalcPartition(friendId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", friendId);
                        ws.AddParameter("@bi_friend_puid", userId);

                        WstDataReader reader = ws.Execute();

                        hr = (uint)ws.GetIntParameter("@RETVAL");

                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read())
                        {
                            hr = (uint)ws.GetIntParameter("@RETVAL");
                            if (hr != HResult.S_OK)
                            {
                                return;
                            }
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                            return;
                        }
                        
                        if (reader.NextResult())
                        {
                            friendList = FriendsList.FromDataReader(friendId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    if (userId < friendId)
                    {
                        rgActions = new Action[]{rejectAction, rejectedAction};
                    }
                    else
                    {
                        rgActions = new Action[]{rejectedAction, rejectAction};
                    }

                    for (int iAction = 0; iAction < rgActions.Length; iAction++)
                    {
                        rgActions[iAction]();
                        if (HResult.Failed(hr))
                        {
                            goto exit;
                        }
                    }
                }
                
                txnScope.Complete();
            }

            // Update the cache entries for both lists.
            if (userList != null)
            {
                userList.GetSharingPermissions();
                UpdateCache(userList);
            }

            if (friendList != null)
            {
                friendList.GetSharingPermissions();
                UpdateCache(friendList);

                PresenceRecord friendRecord = PresenceUtil.GetPresenceRecord(friendId);
                if ((friendRecord != null) && (friendRecord.IsOnline()))
                {
                    friendRecord.QueueListChangeQVals(
                        friendList.dwListVersion,
                        userId,
                        PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_DELETE,
                        hr,
                        "");
                }
            }

        exit:

            // always send the caller a qval.
            PresenceRecord userRecord = PresenceUtil.GetPresenceRecord(userId);
            if ((userRecord != null) && (userRecord.IsOnline()))
            {
                userRecord.QueueListChangeQVals(
                    (userList == null) ? 0 : userList.dwListVersion,
                    friendId,
                    PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_REJECT,
                    hr,
                    "");
            }

            // Since the neverlist was touched, remove the cached copy, next time its needed it will be refreshed
            if (blockFriendId)
            {
                PresenceUtil.PurgeNeverListFromCache(userId);
            }
            
            return hr;
        }

        /// <summary>
        /// Removes the friend association between users
        /// </summary>
        /// <param name="userId">requesting user's xuid</param>
        /// <param name="friendId">buddy's xuid</param>
        /// <returns>HResult</returns>
        public static HResult Delete(ulong userId, ulong friendId)
        {
            HResult hr = HResult.S_OK;
            FriendsList userList = null;
            FriendsList friendList = null;

            using (TransactionScope txnScope = new TransactionScope(TransactionScopeOption.Required, s_txnOptions))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    /*
                    * Do the sproc calls in the same order as the xuids.
                    * This prevents issues if both users are making friend requests to each other at the same time.
                    */
                    Action[] rgActions = null;
                    
                    Action deleteAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "dbo.p_pres_delete_friend_V2";
                        ws.Partition = ws.CalcPartition(userId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", userId);
                        ws.AddParameter("@bi_friend_puid", friendId);

                        WstDataReader reader = ws.Execute();
                        hr = (uint)ws.GetIntParameter("@RETVAL");

                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read())
                        {
                            hr = (uint)ws.GetIntParameter("@RETVAL");
                            if (hr != HResult.S_OK)
                            {
                                return;
                            }
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                            return;
                        }
                        
                        if (reader.NextResult())
                        {
                            userList = FriendsList.FromDataReader(userId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    Action deletedAction = delegate()
                    {
                        ws.ClearParameters();
                        
                        ws.StoredProc = "dbo.p_pres_delete_friend_V2";
                        ws.Partition = ws.CalcPartition(friendId);

                        ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                        ws.AddParameter("@bi_user_puid", friendId);
                        ws.AddParameter("@bi_friend_puid", userId);

                        WstDataReader reader = ws.Execute();
                        hr = (uint)ws.GetIntParameter("@RETVAL");

                        if (HResult.Failed(hr))
                        {
                            return;
                        }

                        if (reader.HasRows && reader.Read())
                        {
                            hr = (uint)ws.GetIntParameter("@RETVAL");
                            if (hr != HResult.S_OK)
                            {
                                return;
                            }
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                            return;
                        }
                        
                        if (reader.NextResult())
                        {
                            friendList = FriendsList.FromDataReader(friendId, reader);
                        }
                        else
                        {
                            hr = HResult.XONLINE_E_DATABASE_RESULT_ERROR;
                        }
                        
                        reader.Close();
                    };

                    if (userId < friendId)
                    {
                        rgActions = new Action[]{deleteAction, deletedAction};
                    }
                    else
                    {
                        rgActions = new Action[]{deletedAction, deleteAction};
                    }

                    for (int iAction = 0; iAction < rgActions.Length; iAction++)
                    {
                        rgActions[iAction]();
                        if (HResult.Failed(hr))
                        {
                            goto exit;
                        }
                    }
                }

                txnScope.Complete();
            }

            // Update the cache entries for both lists.
            if (userList != null)
            {
                userList.GetSharingPermissions();
                UpdateCache(userList);
            }
            
            if (friendList != null)
            {
                friendList.GetSharingPermissions();
                UpdateCache(friendList);

                PresenceRecord friendRecord = PresenceUtil.GetPresenceRecord(friendId);
                if ((friendRecord != null) && (friendRecord.IsOnline()))
                {
                    friendRecord.QueueListChangeQVals(
                        friendList.dwListVersion,
                        userId,
                        PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_DELETE,
                        hr,
                        "");
                }
            }
            
        exit:

            // always send the caller a qval.
            PresenceRecord userRecord = PresenceUtil.GetPresenceRecord(userId);
            if ((userRecord != null) && (userRecord.IsOnline()))
            {
                userRecord.QueueListChangeQVals(
                    (userList == null) ? 0 : userList.dwListVersion,
                    friendId,
                    PresenceRecord.PLIST_CHANGE.PLIST_BUDDY_DELETE,
                    hr,
                    "");
            }

            if (HResult.Succeeded(hr))
            {
                //Notify friends change to presence events
                PresenceEvents.PublishFriendsChange(new PresenceEvents.FriendsChangeEventArgs()
                {
                    Xuid1 = userId,
                    Xuid2 = friendId,
                    AreFriends = false
                }
                );
            }


            return hr;
        }

        /// <summary>
        /// Quick function for automatically making friends. Intially created for testing purposes.
        /// !!!DO NOT USE!!!
        /// </summary>
        /// <param name="userA">userID of requestor</param>
        /// <param name="userB">userID of requestee</param>
        /// <param name="userAGamertag">gamertag of requestor</param>
        /// <param name="userBGamertag">gamertag of requestee</param>
        /// <param name="userAListVersion">friends list version for user A</param>
        /// <param name="userBListVersion">friends list version for user B</param>
        /// <returns>HResult</returns>
        public static HResult MakeFriends(ulong userA,
            ulong userB,
            string userAGamertag,
            string userBGamertag)
        { 
            HResult hr = HResult.S_OK;

            hr = FriendsListUtil.Add(userA, userB, userAGamertag, userBGamertag);

            if (HResult.Failed(hr))
            {
                goto exit;
            }

            hr = FriendsListUtil.Accept(userB, userA);

        exit:
            return hr;
        }

        private FriendsListUtil()
        {
        }

        /// <summary>
        /// Updates the cache after fetching a fresh copy of the list from the data base
        /// </summary>
        /// <param name="qwUserID">userXuid</param>
        public static void RefreshFriendsListCache(ulong qwUserID)
        {
            UpdateCache(GetFriendsListFromDatabase(qwUserID));
        }

        /// <summary>
        /// Gets the friends list from the cache.
        /// </summary>
        /// <param name="qwUserID">user xuid</param>
        /// <returns>the friends list</returns>
        private static FriendsList GetFriendsListFromCache(ulong qwUserID)
        {
            string sKey = CacheUtil.BuildCacheKey(DATA_TYPES.eFriendsList, qwUserID);
            return (FriendsList)CacheUtil.ReadFromCache(sKey);
        }

        /// <summary>
        /// Populates a FriendsList from the data store.
        /// </summary>
        /// <param name="qwUserID">userXuid</param>
        /// <returns>populated friendsList for the specified user</returns>
        private static FriendsList GetFriendsListFromDatabase(ulong qwUserID)
        {
            FriendsList friends = null;

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_xprof_get_friends";
                ws.Partition = ws.CalcPartition(qwUserID);

                ws.AddParameter("@bi_user_puid", qwUserID);

                WstDataReader reader = ws.Execute();
                friends = FriendsList.FromDataReader(qwUserID, reader);
           }

            friends.GetSharingPermissions();

            return friends;
        }

        /// <summary>
        /// Writes the friendsList to the cache.
        /// </summary>
        /// <param name="friends">FriendsList to cache</param>
        internal static void UpdateCache(FriendsList friends)
        {
            CacheUtil.OverwriteCache(friends);
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\metro\sharingservice.cs ===
using System;
using System.Net;
using System.Collections;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;

using SharingServiceWSDL;


// TODO: Add Perf Counters, Success, Failures, etc. (see DMP / SCG)

namespace xonline.common.metro 
{
    // 
    // This Class is a wrapper to a Pool of ShareService Objects, that can be re-used for specific queries from SharingService
    //
    // Initially it will be used to retrieve the Messenger ReverseList from SharingService, for a give user. 
    //
/*
    public class ListMember
    {
        public ulong PassportId;
        public string PassportName;

        public ListMember()
        {
            PassportId = 0;
            PassportName = String.Empty;
        }
        
        public ListMember(ulong passportId, string passportName) : this(passportId, passportName, 0)
        {
        }
        
        public ListMember(ulong passportId, string passportName)
        {
            PassportId = passportId;
            PassportName = String.Empty;

            if( passportName != null )
            {
                PassportName = passportName;
            }
        }
    }
*/    
    public class SharingServiceWrapper
    {
        public SharingServiceWrapper( int poolSize )
        {
            _poolSharingServiceConns = new FastPool( poolSize * 2, poolSize /* queueSize for object contention */ );
            
            for (int iConns = 0; iConns < poolSize; iConns++)
            {
                // insert initialized SharingService Connections Objects into the pool.
                _poolSharingServiceConns.Insert( CreateSharingService() );
            }
        }
        
        // GetReverseListMembers method
        public ulong[] GetReverseListMembers( long Puid, Guid ABID )
        {
            MembershipResult mr = null;
            ulong[] listMembers = new ulong[0];

            // Get an ABCH obj from Pool
            SharingService shserv = (SharingService) _poolSharingServiceConns.Obtain();

            try
            {
                // Set the correct PUID
                shserv.ABAuthHeaderValue.CallerIdentification.CallerPassportId = Puid;

                ArrayList arrMembers = new ArrayList();

                NamespaceHandle nsHandleTemp = new NamespaceHandle();
                nsHandleTemp.Id = ABID;
                bool expandMembership = true;

                // Setup request for ServiceType Messenger
                ServiceFilter serviceFilter = new ServiceFilter();
                ServiceType[] serviceTypes = new ServiceType[1];
                serviceTypes[0] = ServiceType.Messenger;
                serviceFilter.Types = serviceTypes;

                // Setup request for Reverse role
                RoleId[] roles = new RoleId[1];
                roles[0] = RoleId.Reverse;

                // Get the Members of the Messenger Reverse List
                mr = shserv.FindMembershipByRole(nsHandleTemp /*nsHandle*/,
                    serviceFilter,
                    roles,
                    MembershipView.Full,
                    expandMembership);

                // if we have a valid service list
                if( mr != null && mr.Services != null && mr.Services.Length > 0)
                {
                    int count = 0;
                    foreach (Service service in mr.Services)
                    {
                        if (service.Memberships == null)
                            continue;

                        // walk the membership list
                        foreach (Membership membership in service.Memberships)
                        {
                            if (membership.Members == null)
                                continue;

                            // Allocate storage for the Members
                            if (listMembers.Length < membership.Members.Length)
                            {
                                // We expect only one Membership list for the Messenger ReverseList, 
                                // but this code allows for multiple
                                if (listMembers.Length == 0)
                                {
                                    listMembers = new ulong[membership.Members.Length];
                                }
                                else
                                {
                                    Array.Resize(ref listMembers, listMembers.Length + membership.Members.Length);
                                }
                            }

                            foreach (Member member in membership.Members)
                            { 
                                // only care about Passport Members 
                                if( member.Type == MemberType.Passport )
                                {
                                    PassportMember pm = (PassportMember)member;
                                    listMembers[count] = (ulong)pm.PassportId;

                                    count++;
                                }
                            }
                        }                    
                    }

                    if (count == 0)
                    {
                        // must not have found any PassportMembers
                        listMembers = new ulong[0];
                    }
                    else if (count < listMembers.Length)
                    {
                        // list must have included the "me" contact
                        Array.Resize(ref listMembers, count);
                    }
                }
            }
            // Catch Exceptions, but don't fail them now...
            catch (Exception e)
            {
                Xom.Trace(XomAreaName.metro, LogLevel.L_NORMAL, "Caught the following " + e.GetType().ToString() + " while talking to SharingService: " + e.Message);

                String Url;
                if(shserv != null)
                {
                    Url = shserv.Url;
                }
                else
                {
                    Url = SharingServiceUrl;
                }
                
                throw new Exception(string.Format(
                    "SharingServiceWrapper.GetReverseListMembers failed: {0}\n"+
                    "SharingService.Url={1}\n",
                    e.Message,
                    Url),
                    e);
            }
            finally
            {
                // Done with this SharingService Obj, put back in Pool
                _poolSharingServiceConns.Insert( shserv );
            }

            return listMembers;
        }

        private SharingService CreateSharingService()
        {
            long Puid = 0;
            string Name = "";
            Guid AppId = new Guid(ABCHWrapper.ApplicationId); // is same AppId

            SharingService shserv = new SharingService();
            ABApplicationHeader ABApH = new ABApplicationHeader();
            ABAuthHeader ABAuH = new ABAuthHeader();
            ABTestHeader ABTeH = new ABTestHeader();
            IdentificationHeader IH = new IdentificationHeader();

            // Set App Header
            ABApH.ApplicationId = AppId;
            shserv.ABApplicationHeaderValue = ABApH;

            // Set Ident Header
            IH.CallerPassportId = Puid;
            IH.CallerPassportName = Name;
            
            // Set Auth Header
            ABAuH.ManagedGroupRequest = false;
            ABAuH.CallerIdentification = IH;
            shserv.ABAuthHeaderValue = ABAuH;

            // Set the SOAP Url
            shserv.Url = SharingServiceUrl;

            // Set the WebProxy, if needed
            string proxy = Config.GetSetting(Setting.billing_proxy);
            if (proxy == string.Empty)
                shserv.Proxy = new WebProxy();
            else
                shserv.Proxy = new WebProxy(proxy, true);

            shserv.Timeout = ABCHWrapper.GetMessengerBuddiesTimeoutSeconds * 1000; // re-using same timeout

            return shserv;
        }

        public static string SharingServiceUrl
        {
            get
            {
                string sharingServiceUrl = null;

                try
                {
                    sharingServiceUrl = Config.GetSetting(Setting.abch_sharingServiceUrl);
                }
                catch(Exception)
                {
                    sharingServiceUrl = Config.GetSetting(Setting.abch_abserviceUrl);
                    sharingServiceUrl = sharingServiceUrl.Replace("abservice.asmx", "sharingservice.asmx");
                }
                
                if (sharingServiceUrl == "" || sharingServiceUrl == string.Empty)
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_121, "The abch_sharingServiceUrl setting is not configured");

                return sharingServiceUrl;
            }
        }

        private FastPool _poolSharingServiceConns;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\metro\abch.cs ===
using System;
using System.Net;
using System.Collections;
using System.Threading;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;

using ABCHWSDL;

[assembly: XomAreaDefinition(XomAreaName.metro)]


// TODO: Add Perf Counters, Success, Failures, etc. (see DMP / SCG)

namespace xonline.common.metro 
{
    // 
    // This Class is a wrapper to a Pool of ABCH Objects, that can be re-used for specific queries from ABCH
    //
    // Initially it will be used to retrieve the list of Messenger Users/Buddies from ABCH, for a give user. 
    //

    public class ABCHContact
    {
        public ulong LivePuid = 0;
        public string GamerTag;
        public ulong PassportPuid;
        public string ABCHDisplayName;
        public string ABCHEmail;

        public ABCHContact()
        {
            LivePuid = 0;
            GamerTag = String.Empty;
            PassportPuid = 0;
            ABCHDisplayName = String.Empty;
            ABCHEmail = String.Empty;
        }
        
        public ABCHContact(ulong passportPuid, string displayName, string email)
        {
            LivePuid = 0;
            GamerTag = String.Empty;
            PassportPuid = passportPuid;
            ABCHDisplayName = String.Empty;
            ABCHEmail = String.Empty;

            if( displayName != null )
            {
                ABCHDisplayName = displayName;
            }

            if( email != null )
            {
                ABCHEmail = email;
            }
        }
    }
    
    public class ABCHWrapper
    {
        private static SharingServiceWrapper sharingServiceWrapper = null;
        private static string _sABCH = "ABCH";
        private static FastFailHelper _fastFailHelper = new FastFailHelper(
            Setting.abch_fastFailTimeoutThresholdCount, 
            Setting.abch_fastFailTimeoutTimespanSeconds, 
            Setting.abch_fastFailBlockIntervalSeconds);
        
        public ABCHWrapper( int poolSize )
        {
            _poolABCHConns = new FastPool( poolSize * 2, poolSize /* queueSize for object contention */ );
            
            for (int iConns = 0; iConns < poolSize; iConns++)
            {
                // insert initialized ABCH Connections Objects into the pool.
                _poolABCHConns.Insert( CreateABService() );
            }

            // init sharingService, used for getting the ReverseList
            sharingServiceWrapper = new SharingServiceWrapper(ABCHWrapper.GetPoolSize);
        }
        
        // GetMessengerBuddies method
        public ABCHContact[] GetMessengerBuddies( long Puid )
        {
            return GetMessengerBuddies(Puid, true);
        }
            
        // GetMessengerBuddies method
        public ABCHContact[] GetMessengerBuddies( long Puid , bool vetWithReverseList )
        {
            return GetMessengerBuddies(Puid, vetWithReverseList, false);
        }
                
        // GetMessengerBuddies method
        public ABCHContact[] GetMessengerBuddies( long Puid , bool vetWithReverseList, bool acceptPending )
        {
            return GetMessengerBuddies(Puid, vetWithReverseList, acceptPending, false);
        }
                        
        // GetMessengerBuddies method
        public ABCHContact[] GetMessengerBuddies( long Puid , bool vetWithReverseList, bool acceptPending, bool acceptAll )
        {
            Guid ABID;
            AB[] ABArr;
            FindResult fr = null;
            Hashtable reverseListHash = null;
            ABCHContact[] abchContacts = new ABCHContact[0];
            bool fFastFail = false;

            // Get an ABCH obj from Pool
            ABService abserv = (ABService) _poolABCHConns.Obtain();
            string orginalUrl = null;

            try
            {
                if (_fastFailHelper.InFastFailState(_sABCH))
                {
                    fFastFail = true;
                    throw new ApplicationException("ABCH resource in fast-fail state.");
                }

                // the following does nothing unless a failure has been injected, in which case an exception is thrown.
                ABCHFailure.HandleBehaviorInjectionFailure();
                
                // Set the correct PUID
                abserv.ABAuthHeaderValue.CallerIdentification.CallerPassportId = Puid;

                // Set alternateUrl
                string alternateUrl = GetSessionAlternateUrl();
                if ( false == string.IsNullOrEmpty(alternateUrl) )
                {
					orginalUrl = abserv.Url;
                    abserv.Url = alternateUrl;
                }

                // Get the AddressBook(s) for this user
                ABArr = abserv.ABFind(Puid);

                if(ABArr != null)
                {
                    // For now, grab the first Address Book
                    ABID = ABArr[0].abId;

                    // Get the BuddyList
                    fr = abserv.ABFindMessengerUsers(ABID, ABView.MessengerServer);

                    // if we have a valid contact list
                    if( fr != null && fr.contacts != null && fr.contacts.Length > 0)
                    {
                        abchContacts = new ABCHContact[fr.contacts.Length];

                        if(vetWithReverseList)
                        {
                            ulong[] reverseListMembers = sharingServiceWrapper.GetReverseListMembers(Puid, ABID);

                            // if we have a valid reverse list
                            if(reverseListMembers != null && reverseListMembers.Length > 0)
                            {
                                reverseListHash = new Hashtable();
                                
                                // Make quick hashtables of ReverseList Members that we can vet against
                                for( int i = 0; i < reverseListMembers.Length; i++)
                                {
                                    // quick hash by PassportPuid
                                    reverseListHash[reverseListMembers[i]] = reverseListMembers[i];
                                }                                
                            }
                        }

                        int count = 0;
                        foreach(Contact contact in fr.contacts)
                        {
                            // Skip the "me" contact
                            if ( contact.contactInfo != null &&
                                ((acceptAll && contact.contactInfo.contactType != ContactType.Me)
                                || contact.contactInfo.contactType == ContactType.Regular
                                || contact.contactInfo.contactType == ContactType.Live
                                || (acceptPending && contact.contactInfo.contactType == ContactType.LivePending ))
                                )
                            {
                                if(!vetWithReverseList 
                                    || (reverseListHash != null && reverseListHash.ContainsKey((ulong)contact.contactInfo.puid)))
                                {
                                    abchContacts[count] = new ABCHContact((ulong)contact.contactInfo.puid, 
                                                                            contact.contactInfo.displayName, 
                                                                            contact.contactInfo.passportName);

                                    count++;
                                }
                            }

                            if( count > fr.contacts.Length )
                            {
                                Xom.Trace(XomAreaName.metro, LogLevel.L_NORMAL, "Miscalculated the size for ABCHContacts.");
                                break;
                            }
                        }

                        if( count == 0 )
                        {
                            // must have been only the "me" contact
                            abchContacts = new ABCHContact[0];
                        }
                        else if( count < fr.contacts.Length )
                        {
                            // list must have included the "me" contact
                            Array.Resize(ref abchContacts, count);
                        }
                    }
                }
            }
            // Catch Exceptions, but don't fail them now...
            catch (Exception e)
            {
                Xom.Trace(XomAreaName.metro, LogLevel.L_NORMAL, "Caught the following " + e.GetType().ToString() + " while talking to ABCH: " + e.Message);

                String Url;
                if(abserv != null)
                {
                    Url = abserv.Url;
                }
                else
                {
                    Url = ABServiceUrl;
                }

                if (!fFastFail)
                {
                    _fastFailHelper.ReportFailure(_sABCH, e.Message);
                }
                
                throw new Exception(string.Format(
                    "ABCHWrapper.GetMessengerBuddies failed: {0}\n"+
                    "ABService.Url={1}\n",
                    e.Message,
                    Url),
                    e);
            }
            finally
            {
                // if the URL was overridden, restore the original value
                if(abserv != null && orginalUrl != null)
                {
                	abserv.Url = orginalUrl;
                }
				
                // Done with this ABCH Obj, put back in Pool
                _poolABCHConns.Insert( abserv );
            }

            _fastFailHelper.ReportSuccess(_sABCH);

            return abchContacts;
        }

        // This function is similar to the one originally in CruxService (CallGetContacts), 
        // but without any LiveCache or WebCache Common classes dependencies
        public ABCHContact[] GetMessengerBuddiesAndGamertags( long Puid , ref ushort gamertagsCount)
        {
            ABCHContact[] abchContacts = GetMessengerBuddies(Puid, true, true, true);
            gamertagsCount = 0;

            if( abchContacts != null && abchContacts.Length > 0 )
            {
                XCacheUserResponseData [] xcurds = new XCacheUserResponseData[0];

                // create a simple list of passportPuids
                ulong [] passportPuids = new ulong[abchContacts.Length];
                for( int i = 0; i < abchContacts.Length; i++)
                {
                    passportPuids[i] = abchContacts[i].PassportPuid;
                }

                // get the list of corrisponding LivePuids and Gamertags
                try
                {
                    xcurds = XCache.LookupUsersByPassport(passportPuids);
                }
                catch (Exception)
                {
                }

                // update the return array
                for( int i = 0; i < xcurds.Length && i < abchContacts.Length; i++ )
                {
                    if(xcurds[i].qwUserID != 0)
                    {
                        abchContacts[i].LivePuid = xcurds[i].qwUserID;
                        abchContacts[i].GamerTag = xcurds[i].szGamertag;
                        gamertagsCount++;
                    }
                }
            }

            return abchContacts;
        }

        private ABService CreateABService()
        {
            long Puid = 0;
            string Name = "";
            Guid AppId = new Guid(ApplicationId);

            ABService abserv = new ABService();
            ABApplicationHeader ABApH = new ABApplicationHeader();
            ABAuthHeader ABAuH = new ABAuthHeader();
            ABTestHeader ABTeH = new ABTestHeader();
            IdentificationHeader IH = new IdentificationHeader();

            // Set App Header
            ABApH.ApplicationId = AppId;
            abserv.ABApplicationHeaderValue = ABApH;

            // Set Ident Header
            IH.CallerPassportId = Puid;
            IH.CallerPassportName = Name;
            
            // Set Auth Header
            ABAuH.ManagedGroupRequest = false;
            ABAuH.CallerIdentification = IH;
            abserv.ABAuthHeaderValue = ABAuH;

            // Set the SOAP Url
            abserv.Url = ABServiceUrl;

            // Set the WebProxy, if needed
            string proxy = Config.GetSetting(Setting.billing_proxy);
            if (proxy == string.Empty)
                abserv.Proxy = new WebProxy();
            else
                abserv.Proxy = new WebProxy(proxy, true);

            abserv.Timeout = GetMessengerBuddiesTimeoutSeconds * 1000;

            return abserv;
        }

        public static string ABServiceUrl
        {
            get
            {
                string abserviceUrl = Config.GetSetting(Setting.abch_abserviceUrl);
                if (abserviceUrl == "" || abserviceUrl == string.Empty)
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_121, "The abch_abserviceUrl setting is not configured");

                return abserviceUrl;
            }
        }

        public static string ApplicationId
        {
            get
            {
                string applicationId = Config.GetSetting(Setting.abch_applicationId);
                if (applicationId == "" || applicationId == string.Empty)
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_122, "The abch_applicationId setting is not configured");

                return applicationId;
            }
        }

        public static int GetMessengerBuddiesTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.abch_getMessengerBuddiesTimeoutSeconds);
            }
        }

        public static int GetPoolSize
        {
            get
            {
                return Config.GetIntSetting(Setting.abch_getSoapConnectionPoolSize);
            }
        }

        public static bool GetAllowQueryAtLoginAsQueryAtSignup
        {
            get
            {
                return Config.GetBoolSetting(Setting.abch_allowQueryAtLoginAsQueryAtSignup);
            }
        }

        // Reset the session alternate Url. Default Url will be used instead
        public static void ResetSessionAlternateUrl()
        {
            InitAlternateHandler();
            Thread.SetData(_tlsSessionAlternateUrl, null);
        }

        // Set the session alternate Url.
        public static void SetSessionAlternateUrl(string url)
        {
            InitAlternateHandler();
            Thread.SetData(_tlsSessionAlternateUrl, url);
        }

        // Get the session alternate Url
        public static string GetSessionAlternateUrl()
        {
            InitAlternateHandler();
            object url = Thread.GetData(_tlsSessionAlternateUrl);
            return (string) url;
        }

        // Lazily initializes alternate url support. It basically allocates the
        // TLS slot for the alternate url string and instantiates the hashtable
        // to store the handlers.
        private static void InitAlternateHandler()
        {
            if (_tlsSessionAlternateUrl == null)
            {
                lock(_lockObject)
                {
                    _tlsSessionAlternateUrl = Thread.AllocateDataSlot();
                }
            }
        }

        private volatile static LocalDataStoreSlot _tlsSessionAlternateUrl = null;

        private static volatile object _lockObject = new object();

        private FastPool _poolABCHConns;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\CacheAccess.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;
using System.Runtime.InteropServices;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;

using xonline.common.protocol.SubNoti;
using xonline.server.XConnSrv;
using System.Transactions;

namespace xonline.common.community
{

    // Schema identifier for data objects.
    public enum DATA_TYPES : ushort
    {
        /* IF YOU ADD ANYTHING HERE, ALSO ADD TO THE CacheUtil CONSTRUCTOR BELOW! */

        // MIN_DATA_TYPE
        eFriendsList = 1000,
        eBasicPresence = 1001,
        eExtendedPresence = 1002,
        eRichPresenceString = 1003,
        eBasicProfile = 1004,
        eExtendedProfile = 1005,
        eAvatar = 1006,
        ePartyInfo = 1007,
        eNewMessages = 1008,
        eLimitedPresence = 1009,
        eToastQueue = 1010,
        eDeviceControlQueue = 1011,
        eAppMessageQueue = 1012,
        eLaunchAppQueue = 1013,
        // MAX_DATA_TYPE

        // MIN_INTERNAL_DATA_TYPE
        eConnSrvLocation = 2000,
        eInternalPresence = 2001,
        eMachineUserList = 2002,
        eUserPrivileges = 2003,
        eUserNeverList = 2004,
        eTransientMessages = 2005,
        eInvitation = 2006,
        eUserQueue = 2007,
        eMessagingData = 2008,
        eAffiliateList = 2009
        // MAX_INTERNAL_DATA_TYPE
    };


    // substructure used to identify data objects for subscription, query, etc.
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public struct DATA_OBJECT_SPECIFIER
    {
        // Schema version identifier.
        public ushort wObjectSize;
        
        // schema identifier.  see DATA_TYPES.
        public ushort wDataType;

        // optional subtype for data.  e.g. TitleID for data specific to a title.  Zero if unused.
        public uint dwDataSubType;

        // User who owns the data
        public ulong qwOwnerXUID;

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            ToString(sb, 0);
            return sb.ToString();
        }

        public void ToString(StringBuilder sb, int indent)
        {
            string sGlobalIndent = new string(' ', indent);
            string sLocalIndent = new string(' ', WireData.C_INDENT);
            sb.AppendLine("DATA_OBJECT_SPECIFIER {");
            sb.AppendLine(String.Format("{0}{1}wObjectSize={2}", sGlobalIndent, sLocalIndent, wObjectSize));
            sb.AppendLine(String.Format("{0}{1}wDataType={2}", sGlobalIndent, sLocalIndent, CacheUtil.DataTypeToString(wDataType)));
            sb.AppendLine(String.Format("{0}{1}dwDataSubType=0x{2:X}", sGlobalIndent, sLocalIndent, dwDataSubType));
            sb.AppendLine(String.Format("{0}{1}qwOwnerXUID=0x{2:X}", sGlobalIndent, sLocalIndent, qwOwnerXUID));
            sb.AppendLine(String.Format("{0}}}", sGlobalIndent));
        }
    };

    // header for all data types in the subscription/notification system.
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public struct BASE_DATA_HEADER
    {
        // object specifier info.
        public DATA_OBJECT_SPECIFIER doSpec;

        // Extra flags for this piece of data.
        public uint dwHeaderFlags;

        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            ToString(sb, 0);
            return sb.ToString();
        }

        public void ToString(StringBuilder sb, int indent)
        {
            string sGlobalIndent = new string(' ', indent);
            string sLocalIndent = new string(' ', WireData.C_INDENT);
            sb.AppendLine("BASE_DATA_HEADER {");
            sb.Append(String.Format("{0}{1}doSpec=", sGlobalIndent, sLocalIndent));
            doSpec.ToString(sb, indent + WireData.C_INDENT);
            sb.AppendLine(String.Format("{0}{1}dwHeaderFlags=0x{2:X}", sGlobalIndent, sLocalIndent, dwHeaderFlags));
            sb.AppendLine(String.Format("{0}}}", sGlobalIndent));
        }
    };

    public class BaseDataHeader : WireData
    {
        [WireInfo(Serialize=false, PrintToString=false)]
        public BASE_DATA_HEADER header = new BASE_DATA_HEADER();

        [WireInfo(Serialize=false)]
        public uint dwVersion;

        [WireInfo(Serialize=false)]
        public byte[] rgbUnknownData;

        public ulong OwnerID
        {
            get { return header.doSpec.qwOwnerXUID; }
            set { header.doSpec.qwOwnerXUID = value; }
        }

        public ushort DataType
        {
            get { return header.doSpec.wDataType; }
            set { header.doSpec.wDataType = value; }
        }

        public uint DataSubType
        {
            get { return header.doSpec.dwDataSubType; }
            set { header.doSpec.dwDataSubType = value; }
        }

        public uint HeaderFlags
        {
            get { return header.dwHeaderFlags; }
            set { header.dwHeaderFlags = value; }
        }

        public string CacheKey
        {
            get { return CacheUtil.GetDataKeyString(ref header.doSpec); }
        }

        public BaseDataHeader() : this((ushort)0)
        {
        }
        public BaseDataHeader(DATA_TYPES type) : this((ushort)type)
        {
        }
        protected BaseDataHeader(ushort wDataType)
        {
            header.doSpec.wDataType = wDataType;
        }

        public unsafe override WireData ReadStream(Stream stream)
        {
            // read the header as a byte array.
            byte[] rgbHeader = new byte[sizeof(BASE_DATA_HEADER)];
            stream.Read(rgbHeader, 0, rgbHeader.Length);

            fixed (byte *pBuf = rgbHeader)
            {
                // copy the read header into our local header.
                BASE_DATA_HEADER *pHeader = (BASE_DATA_HEADER *)pBuf;
                header = *pHeader;
            }

            // read the rest of the known object stream.
            base.ReadStream(stream);

            // read any known extension.
            ReadExtension(stream);

            // read anything left as unknown.
            rgbUnknownData = new byte[stream.Length - stream.Position];
            stream.Read(rgbUnknownData, 0, rgbUnknownData.Length);
            
            return this;
        }

        public unsafe override void WriteStream(Stream stream)
        {
            // mark the original stream position.
            long startPos = stream.Position;

            // copy the local header into a byte array.
            byte[] rgbHeader = new byte[sizeof(BASE_DATA_HEADER)];
            fixed (BASE_DATA_HEADER *pHeader = &header)
            {
                Marshal.Copy((IntPtr)pHeader, rgbHeader, 0, rgbHeader.Length);
            }

            // write the byte array header.
            stream.Write(rgbHeader, 0, rgbHeader.Length);

            // write the rest of the known object.
            base.WriteStream(stream);

            // write any known extension.
            WriteExtension(stream);

            // write any unknown data.
            if (rgbUnknownData != null)
            {
                stream.Write(rgbUnknownData, 0, rgbUnknownData.Length);
            }

            // calculate the total size of the object, including the header.
            ushort cbSize = (ushort)(stream.Position - startPos);

            // grab the output stream's internal byte array.
            MemoryStream memoryStream = (MemoryStream)stream;
            byte[] buffer = memoryStream.GetBuffer();
            fixed (byte* pBuffer = &(buffer[startPos]))
            {
                // overwrite the size of our object into the serialized header.
                BASE_DATA_HEADER* pHeader = (BASE_DATA_HEADER*)pBuffer;
                pHeader->doSpec.wObjectSize = cbSize;
            }
        }

        // override ReadExtension to deserialize any added extension objects.
        public virtual void ReadExtension(Stream stream)
        {
        }

        // override ReadExtension to serialize any added extension objects.
        public virtual void WriteExtension(Stream stream)
        {
        }

        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            header.ToString(sb, indent);

            string sIndent = new string(' ', indent);

            if (this.GetType() != typeof(BaseDataHeader))
            {
                sb.Append(string.Format("{0}DerivedClass=", sIndent));
                base.ToString(sb, indent);
            }

            return sb.ToString();
        }

        public void RefreshFromStore()
        {
            CacheUtil.RefreshFromCache(this);
        }

        public uint FlushToStore()
        {
            return CacheUtil.WriteToCache(this);
        }

        public bool TryWrite()
        {
            if (FlushToStore() != HResult.E_ACCESSDENIED)
            {
                return true;
            }
            RefreshFromStore();
            return false;
        }
    }

    // Table of contents for a language specific data object.  A language specific data object will have a header describing the total size of
    // the entire blob, which contains this table of contents, followed by a number of inner data blobs.  Each inner blob will have it's own
    // BASE_DATA_HEADER which describes only itself.  Each entry in the table of contents is the offset into the total blob where the inner
    // blob for that language is located.  Multiple entries in the TOC may point to the same offset (e.g. the default).
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public struct PER_LANGUAGE_TOC
    {
        // number of languages.  should be XONLINE_LANGUAGE_MAX + 1 (the first is the default).
        public ushort wNumLanguages;

        // LANGUAGE_TOC_ENTRY rgEntries[wNumLanguages];
    };
    
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public struct LANGUAGE_TOC_ENTRY
    {
        public const int ASCII_LOCALE_BYTES = 8;
        
        // the locale string ("en-US")
        public unsafe fixed byte szLocale[ASCII_LOCALE_BYTES];
        public ushort wOffset;
    };

    public class LanguageSpecificData : BaseDataHeader
    {
        public ushort wNumLocales;

        [WireInfo(SizeParam="wNumLocales", Serialize=false)]
        public string[] rgLocales;

        [WireInfo(SizeParam = "wNumLocales")]
        public BaseDataHeader[] rgInnerBlobs;

        public LanguageSpecificData(DATA_TYPES type) : base (type)
        {
        }

        public LanguageSpecificData(ushort type) : base (type)
        {
        }

        public unsafe override void WriteStream(Stream stream)
        {
            // make sure we mark this blob as language specific.
            HeaderFlags |= CacheUtil.XONLINE_CACHE_DATA_FLAG_LANGUAGE_SPECIFIC;
            wNumLocales = (rgLocales == null) ? (ushort)0 : (ushort)rgLocales.Length;

            // a place to hold the serialized inner blobs.
            byte[][] rgbInner = new byte[wNumLocales][];

            // a new buffer for the combined header + language TOC.
            byte[] rgbHeader = new byte[sizeof(BASE_DATA_HEADER) + sizeof(PER_LANGUAGE_TOC) + (wNumLocales * sizeof(LANGUAGE_TOC_ENTRY))];
            
            fixed (byte *pBuffer = rgbHeader)
            {
                // write the header.
                BASE_DATA_HEADER *pHeader = (BASE_DATA_HEADER *)pBuffer;
                *pHeader = header;

                // write the TOC header.
                PER_LANGUAGE_TOC *pTOCHeader = (PER_LANGUAGE_TOC *)(pBuffer + sizeof(BASE_DATA_HEADER));
                pTOCHeader->wNumLanguages = wNumLocales;

                ushort wNextOffset = (ushort)rgbHeader.Length;
                LANGUAGE_TOC_ENTRY *rgTOC = (LANGUAGE_TOC_ENTRY *)(pBuffer + sizeof(BASE_DATA_HEADER) + sizeof(PER_LANGUAGE_TOC));
                for (int iLocale = 0; iLocale < wNumLocales; iLocale++)
                {
                    // write the TOC entry.
                    byte[] rgbLocale = Encoding.ASCII.GetBytes(rgLocales[iLocale]);
                    Marshal.Copy(rgbLocale, 0, (IntPtr)rgTOC[iLocale].szLocale, Math.Min(rgbLocale.Length, LANGUAGE_TOC_ENTRY.ASCII_LOCALE_BYTES));
                    rgTOC[iLocale].wOffset = wNextOffset;

                    // serialize the inner blob, and update the next offset.
                    rgbInner[iLocale] = (byte[])rgInnerBlobs[iLocale];
                    wNextOffset += (ushort)rgbInner[iLocale].Length;
                }

                // overwrite the total size.
                pHeader->doSpec.wObjectSize = wNextOffset;
            }

            // write the combined header.
            stream.Write(rgbHeader, 0, rgbHeader.Length);

            // write all the inner blobs.
            for (int iLocale = 0; iLocale < wNumLocales; iLocale++)
            {
                stream.Write(rgbInner[iLocale], 0, rgbInner[iLocale].Length);
            }
        }

        public unsafe override WireData ReadStream(Stream stream)
        {
            // mark the original stream position.
            long startPos = stream.Position;

            // grab the input stream's internal byte array.
            MemoryStream memoryStream = (MemoryStream)stream;
            byte[] buffer = memoryStream.GetBuffer();

            fixed (byte *pBuffer = &(buffer[startPos]))
            {
                byte *pWork = pBuffer;
                
                // copy the read header into our local header.
                BASE_DATA_HEADER *pHeader = (BASE_DATA_HEADER *)pWork;
                header = *pHeader;
                pWork += sizeof(BASE_DATA_HEADER);

                PER_LANGUAGE_TOC *pTOCHeader = (PER_LANGUAGE_TOC *)pWork;
                wNumLocales = pTOCHeader->wNumLanguages;
                pWork += sizeof(PER_LANGUAGE_TOC);

                LANGUAGE_TOC_ENTRY *rgTOCEntries = (LANGUAGE_TOC_ENTRY *)pWork;
                pWork += (wNumLocales * sizeof(LANGUAGE_TOC_ENTRY));

                rgLocales = new string[wNumLocales];
                rgInnerBlobs = new BaseDataHeader[wNumLocales];
                for (int iLocale = 0; iLocale < wNumLocales; iLocale++)
                {
                    // account for the zero-padding on the locale string.
                    int localeLen = 0;
                    while ((rgTOCEntries[iLocale].szLocale[localeLen] != '\0') && (localeLen < LANGUAGE_TOC_ENTRY.ASCII_LOCALE_BYTES)) localeLen++;
                    rgLocales[iLocale] = Encoding.ASCII.GetString(buffer, (int)(startPos + (rgTOCEntries[iLocale].szLocale - pBuffer)), localeLen);

                    // deserialize a typed object from the inner data at the specified offset.
                    BASE_DATA_HEADER* pInnerHeader = (BASE_DATA_HEADER*)(pBuffer + rgTOCEntries[iLocale].wOffset);
                    byte[] rgbInnerData = new byte[pInnerHeader->doSpec.wObjectSize];
                    Buffer.BlockCopy(buffer, (int)(startPos + rgTOCEntries[iLocale].wOffset), rgbInnerData, 0, rgbInnerData.Length);
                    rgInnerBlobs[iLocale] = CacheUtil.ReadCacheItemFromBytes(rgbInnerData);
                }
            }

            // consume everything we were supposed to.
            stream.Position = startPos + header.doSpec.wObjectSize;

            return this;
        }

        public override string ToString(int indent)
        {
            wNumLocales = (rgLocales == null) ? (ushort)0 : (ushort)rgLocales.Length;
            return base.ToString(indent);
        }
    }

    // Schema definition for DATA_TYPES.eConnSrvLocation
    public class ConnSrvLocation : BaseDataHeader
    {
        // client ip address
        public uint dwClientIP;
        public ushort wClientPort;
        
        // server ip address
        public uint dwServerIP;

        // count of bytes in server name
        public ushort cbServerName;

        // server name
        [WireInfo(SizeParam="cbServerName")]
        public string sServerName;
        
        [WireInfo(Serialize=false)]
        public ConnSrvLocationExtension extension = new ConnSrvLocationExtension();

        public ConnSrvLocation() : base (DATA_TYPES.eConnSrvLocation)
        {
        }

        public override void ReadExtension(Stream stream)
        {
            if (stream.Position < stream.Length)
            {
                extension.ReadStream(stream);
            }
        }

        public override void WriteExtension(Stream stream)
        {
            if (extension != null)
            {
                extension.WriteStream(stream);
            }
        }
    }

    // Schema definition for DATA_TYPES.eConnSrvLocation
    public class ConnSrvLocationExtension : WireData
    {
        public SGADDR sgaddr = new SGADDR();
    }
    
    // Schema definition for DATA_TYPES.eFriendsList, etc.
    public class UserListData : BaseDataHeader
    {
        public UserListData(DATA_TYPES type) : base(type)
        {
        }
        
        // list version.
        public uint dwListVersion;

        // Count of users.
        public uint dwNumUsers;

        // the list of users.
        [WireInfo(SizeParam="dwNumUsers")]        
        public UserData[] rgUsers;
    }

    // substructure for USER_LIST_DATA representing a single User.
    public class UserData : WireData
    {
        // The XUID of the user.
        public ulong qwXUID;

        // Extra flags for this user.
        public uint dwUserFlags;
    }

    // used for cache data types of unknown format.
    public class OpaqueData : BaseDataHeader
    {
        [WireInfo(Serialize=false, PrintToString=false)]
        public byte[] rgbOpaque;

        public unsafe override WireData ReadStream(Stream stream)
        {
            // read the header as a byte array.
            byte[] rgbHeader = new byte[sizeof(BASE_DATA_HEADER)];
            stream.Read(rgbHeader, 0, rgbHeader.Length);

            fixed (byte *pBuf = rgbHeader)
            {
                // copy the read header into our local header.
                BASE_DATA_HEADER *pHeader = (BASE_DATA_HEADER *)pBuf;
                header = *pHeader;
            }

            // make a new array for the opaque part.
            rgbOpaque = new byte[header.doSpec.wObjectSize - rgbHeader.Length];

            // read the rest of the stream into the opaque array.
            stream.Read(rgbOpaque, 0, rgbOpaque.Length);

            return this;
        }

        public unsafe override void WriteStream(Stream stream)
        {
            // mark the original stream position.
            long startPos = stream.Position;

            // copy the local header into a byte array.
            byte[] rgbHeader = new byte[sizeof(BASE_DATA_HEADER)];
            fixed (BASE_DATA_HEADER *pHeader = &header)
            {
                Marshal.Copy((IntPtr)pHeader, rgbHeader, 0, rgbHeader.Length);
            }

            // write the byte array header.
            stream.Write(rgbHeader, 0, rgbHeader.Length);

            // write the opaque part.
            stream.Write(rgbOpaque, 0, rgbOpaque.Length);

            // calculate the total size of the object, including the header.
            ushort cbSize = (ushort)(stream.Position - startPos);

            // grab the output stream's internal byte array.
            MemoryStream memoryStream = (MemoryStream)stream;
            byte[] buffer = memoryStream.GetBuffer();
            fixed (byte* pBuffer = &(buffer[startPos]))
            {
                // overwrite the size of our object into the serialized header.
                BASE_DATA_HEADER* pHeader = (BASE_DATA_HEADER*)pBuffer;
                pHeader->doSpec.wObjectSize = cbSize;
            }
        }

        public override string ToString(int indent)
        {
            StringBuilder sb = new StringBuilder();
            header.ToString(sb, indent);

            string sIndent = new string(' ', indent);
            string sIndent2 = new string(' ', indent + WireData.C_INDENT);

            sb.AppendLine(string.Format("{0}DerivedClass=OpaqueData {1}", sIndent, '{'));

            string[] rgLines = ByteConvert.ToFormattedStrings(rgbOpaque);
            foreach (string line in rgLines)
            {
                sb.AppendLine(string.Format("{0}{1}", sIndent2, line));
            }

            sb.AppendLine(string.Format("{0}{1}", sIndent, '}'));

            return sb.ToString();
        }
    }

    public class JsonData : OpaqueData
    {
        [WireInfo(Serialize=false, PrintToString=false)]
        public string jsonPayload;

        public override WireData ReadStream(Stream stream)
        {
            base.ReadStream(stream);
            jsonPayload = Encoding.UTF8.GetString(this.rgbOpaque);
            return this;
        }
        
        public override void WriteStream(Stream stream)
        {
            if (jsonPayload != null)
            {
                this.rgbOpaque = Encoding.UTF8.GetBytes(jsonPayload);
            }
            base.WriteStream(stream);
        }

        public override string ToString(int indent)
        {
            // TODO: is there a good json pretty printer?
            // print as opaque binary.
            if ((rgbOpaque == null) && (jsonPayload != null))
            {
                this.rgbOpaque = Encoding.UTF8.GetBytes(jsonPayload);
            }
            return base.ToString(indent);
        }
    }

    public class OwnerNotifyData : JsonData
    {
        protected const uint _connectionTypeMask = 0xFF;
        public enum ConnectionType : byte
        {
            eConsole,
            ePhone,
            eWeb,
            ePartner,
        }

        public ConnectionType TargetConnectionType
        {
            get
            {
                return GetConnectionTypeFromDataSubType(this.DataSubType);
            }
            set
            {
                this.DataSubType &= ~_connectionTypeMask;
                this.DataSubType |= (uint)value;
            }
        }

        public static ConnectionType GetConnectionTypeFromDataSubType(uint dwSubType)
        {
            return (ConnectionType)(dwSubType & _connectionTypeMask);
        }

        public static uint BuildDataSubType(ConnectionType connectionType)
        {
            return (uint)connectionType;
        }
    }

    public class CacheUtil
    {
        // data header flags.
        public const int XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE = 0x1;
        public const int XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS = 0x2;
        public const int XONLINE_CACHE_DATA_FLAG_LANGUAGE_SPECIFIC = 0x4;

        // user list data flags
        public const int XONLINE_CACHE_USER_LIST_MASK_FRIEND_STATUS = 0x3;
        public const int XONLINE_CACHE_USER_LIST_SHIFT_FRIEND_STATUS = 0;

        // cache type flags
        public const int XONLINE_CACHE_TYPE_FLAG_OWNER_NOTIFY = 0x1;

        public static uint GetFriendStatus(uint dwUserFlags)
        {
            return ((dwUserFlags & XONLINE_CACHE_USER_LIST_MASK_FRIEND_STATUS) >> XONLINE_CACHE_USER_LIST_SHIFT_FRIEND_STATUS);
        }

        public static void SetFriendStatus(ref uint dwUserFlags, uint dwFriendStatus)
        {
            dwUserFlags &= ~(uint)XONLINE_CACHE_USER_LIST_MASK_FRIEND_STATUS;
            dwUserFlags |= ((dwFriendStatus << XONLINE_CACHE_USER_LIST_SHIFT_FRIEND_STATUS) & XONLINE_CACHE_USER_LIST_MASK_FRIEND_STATUS);
        }

        public static string DataTypeToString(ushort wDataType)
        {
            DataTypeInfo dti = (DataTypeInfo)s_htDataTypeMap[wDataType];
            return (dti == null) ? wDataType.ToString() : dti.sTypeName;
        }

        public static string GetDataKeyString(DATA_OBJECT_SPECIFIER doSpec)
        {
            return GetDataKeyString(ref doSpec);
        }
        public static string GetDataKeyString(ref DATA_OBJECT_SPECIFIER doSpec)
        {
            return GetDataKeyString(doSpec.wDataType, doSpec.qwOwnerXUID, doSpec.dwDataSubType);
        }
        public static string GetDataKeyString(ushort wDataType, ulong qwOwnerID, uint dwDataSubType)
        {
            return String.Join(":", new string[]{
                DataTypeToString(wDataType), 
                qwOwnerID.ToString("X"), 
                dwDataSubType.ToString("X")});
        }

        public static DATA_OBJECT_SPECIFIER GetDataKeyFromString(string sKey)
        {
            string[] sFields = sKey.Split(':');
            DataTypeInfo dti = (DataTypeInfo)s_htDataTypeMap[sFields[0]];
            if (dti == null)
            {
                throw new ApplicationException(string.Format("CacheUtil: unknown data type ({0}) not found in lookup table.", sFields[0]));
            }
            
            DATA_OBJECT_SPECIFIER doSpec = new DATA_OBJECT_SPECIFIER();
            doSpec.wDataType = dti.wDataType;
            doSpec.qwOwnerXUID = UInt64.Parse(sFields[1], System.Globalization.NumberStyles.AllowHexSpecifier);
            doSpec.dwDataSubType = UInt32.Parse(sFields[2], System.Globalization.NumberStyles.AllowHexSpecifier);

            return doSpec;
        }

        public static bool IsOwnerNotifyType(ushort wDataType)
        {
            DataTypeInfo dti = (DataTypeInfo)s_htDataTypeMap[wDataType];
            return (dti == null) ? false : ((dti.dwTypeFlags & CacheUtil.XONLINE_CACHE_TYPE_FLAG_OWNER_NOTIFY) != 0);
        }

        public enum CacheCluster : ushort
        {
            ePresenceCache,
            eNotificationCache
        };

        public class DataTypeInfo
        {
            public ushort wDataType;
            public ushort wCacheCluster;
            public string sTypeName;
            public Type classType;
            public uint dwTypeFlags;

            public DataTypeInfo(ushort wDataType, ushort wCacheCluster, string sTypeName, Type classType, uint dwTypeFlags)
            {
                this.wDataType = wDataType;
                this.wCacheCluster = wCacheCluster;
                this.sTypeName = sTypeName;
                this.classType = classType;
                this.dwTypeFlags = dwTypeFlags;
            }
        }

        protected static IMemCache s_mcNotiCache = null;
        protected static IMemCache s_mcPresCache = null;
        protected static Hashtable s_htDataTypeMap = null;

        static CacheUtil()
        {
            try
            {
                string dllName = null;
                using (TransactionScope txnScope = new TransactionScope(TransactionScopeOption.Suppress))
                {
                     dllName = Config.GetSetting(Setting.XConnSrv_MemCacheDllName);
                     txnScope.Complete();
                }
                s_mcNotiCache = (IMemCache)Activator.CreateInstance(Type.GetType("xonline.server.XConnSrv.MemCacheImpl," + dllName));
                s_mcPresCache = (IMemCache)Activator.CreateInstance(Type.GetType("xonline.server.XConnSrv.MemCacheImpl,AccelerationMC"), new Object[]{Interface.PresenceCache});

                // initialize the data types map.
                LoadDataTypes(null);

                Config.MultiSettingChange +=OnMultiSettingChange;
            }
            catch (Exception)
            {
                s_mcNotiCache = null;
                throw;
            }
        }

        public static void SetPresCache(IMemCache cache)
        {
            if (cache != null)
            {
                s_mcPresCache = cache;
            }
        }

        public static void SetNotiCache(IMemCache cache)
        {
            if (cache != null)
            {
                s_mcNotiCache = cache;
            }
        }

        protected static void LoadDataTypes(string[] rgTypes)
        {
            Hashtable htMap = new Hashtable();

            if (rgTypes == null)
            {
                rgTypes = Config.GetMultiSetting(MultiSetting.community_cacheDataTypes);
            }
            
            foreach (string typestring in rgTypes)
            {
                string[] rgFields = typestring.Split(';');
                
                DataTypeInfo dti;

                // TODO: maybe use Json here?  something to read fields by name.
                dti = new DataTypeInfo(UInt16.Parse(rgFields[0]), (ushort)Enum.Parse(typeof(CacheCluster), rgFields[2]), rgFields[1], Type.GetType(rgFields[3]), UInt32.Parse(rgFields[4]));
                
                htMap.Add(dti.wDataType, dti);
                htMap.Add(dti.sTypeName, dti);
            }

            s_htDataTypeMap = htMap;
        }

        protected static void OnMultiSettingChange(object sender, MultiSettingChangeEventArgs e)
        {
            if (e.MultiSetting == MultiSetting.community_cacheDataTypes)
            {
                LoadDataTypes(e.ValueNew);
            }
        }

        public static string BuildCacheKey(DATA_TYPES type, ulong qwOwnerID)
        {
            return BuildCacheKey(type, qwOwnerID, 0);
        }
        public static string BuildCacheKey(DATA_TYPES type, ulong qwOwnerID, uint dwSubType)
        {
            return GetDataKeyString((ushort)type, qwOwnerID, dwSubType);
        }

        protected static IMemCache GetMemCacheFromDataType(ushort wDataType)
        {
            DataTypeInfo dti = (DataTypeInfo)s_htDataTypeMap[wDataType];
            if (dti == null)
            {
                throw new ApplicationException(string.Format("CacheUtil: unknown data type ({0}) not found in lookup table.", wDataType));
            }

            return GetMemCacheFromClusterID(dti.wCacheCluster);
        }

        protected static IMemCache GetMemCacheFromClusterID(ushort wCacheCluster)
        {
            switch (wCacheCluster)
            {
                case (ushort)CacheCluster.eNotificationCache: return s_mcNotiCache;
                case (ushort)CacheCluster.ePresenceCache: return s_mcPresCache;
            }

            throw new ApplicationException(string.Format("CacheUtil: unknown cache cluster id ({0}).", wCacheCluster));
        }

        protected static IMemCache GetMemCacheFromKey(string sKey)
        {
            return GetMemCacheFromDataType(GetDataKeyFromString(sKey).wDataType);
        }
        
        public static unsafe BaseDataHeader ReadCacheItemFromBytes(byte[] rgbCacheValue)
        {
            if ((rgbCacheValue == null) || (rgbCacheValue.Length <= sizeof(BASE_DATA_HEADER)))
            {
                // the <= is intentional.  if the item found is an empty header, we treat it the same as a cache miss.
                return null;
            }

            // read the header.
            BaseDataHeader item = new BaseDataHeader();
            item.ReadBytes(rgbCacheValue);

            if (0 != (item.HeaderFlags & CacheUtil.XONLINE_CACHE_DATA_FLAG_LANGUAGE_SPECIFIC))
            {
                // language specific trumps data type.
                item = new LanguageSpecificData(item.DataType);
                return (BaseDataHeader)item.ReadBytes(rgbCacheValue);
            }

            // find the data type.
            DataTypeInfo dti = (DataTypeInfo)s_htDataTypeMap[item.DataType];
            if (dti == null)
            {
                throw new ApplicationException(string.Format("CacheUtil: unknown data type ({0}) not found in lookup table.", item.DataType));
            }

            // invoke the type constructor.
            item = (BaseDataHeader)dti.classType.GetConstructor(Type.EmptyTypes).Invoke(Type.EmptyTypes);

            // deserialize typed data.
            return (BaseDataHeader)item.ReadBytes(rgbCacheValue);
        }
        

        public unsafe static BaseDataHeader ReadFromCache(string sKey)
        {
            IMemCache cache = GetMemCacheFromKey(sKey);

            BaseDataHeader item = null;
            uint version;
            byte[] rgbCacheData = cache.RequestData(sKey, null, out version);

            if ((rgbCacheData != null) && (rgbCacheData.Length > sizeof(BASE_DATA_HEADER)))
            {
                item = ReadCacheItemFromBytes(rgbCacheData);
                item.dwVersion = version;
            }

            return item;
        }
        
        public unsafe static BaseDataHeader[] ReadFromCache(IMemCache cache, string[] rgKeys)
        {
            uint[] rgVersions;
            byte[][] rgValues = cache.BulkRequestData(rgKeys, new Object[rgKeys.Length], out rgVersions);

            BaseDataHeader[] rgItems = new BaseDataHeader[rgKeys.Length];
            for (int iItem = 0; iItem < rgItems.Length; iItem++)
            {
                if ((rgValues[iItem] != null) && (rgValues[iItem].Length > sizeof(BASE_DATA_HEADER)))
                {
                    try
                    {
                        rgItems[iItem] = ReadCacheItemFromBytes(rgValues[iItem]);
                        rgItems[iItem].dwVersion = rgVersions[iItem];
                    }
                    catch (Exception)
                    {
                        rgItems[iItem] = null;
                    }
                }
            }

            return rgItems;
        }

        public static uint ReadBytesFromCache(string sKey, out uint dwVersion, out byte[] rgbValue)
        {
            IMemCache cache = GetMemCacheFromKey(sKey);
            return cache.RequestData(sKey, null, out dwVersion, out rgbValue);
        }

        public static BaseDataHeader[] ReadFromNotificationCache(string[] rgKeys)
        {
            return ReadFromCache(s_mcNotiCache, rgKeys);
        }

        public static BaseDataHeader[] ReadFromPresenceCache(string[] rgKeys)
        {
            return ReadFromCache(s_mcPresCache, rgKeys);
        }

        public static uint WriteToCache(BaseDataHeader item)
        {
            IMemCache cache = GetMemCacheFromDataType(item.DataType);
            // owner notify types only need to remain in the cache long enough to be detected and sent to online owners.
            // if the owner is not online, then it should expire quickly so that no stale notifications get sent later.
            uint expiry = (CacheUtil.IsOwnerNotifyType(item.DataType)) ? Config.GetUIntSetting(Setting.community_ownerNotifyCacheExpirySeconds) : 0;
            return cache.PublishData(item.CacheKey, (byte[])item, null, ref item.dwVersion, expiry);
        }

        public static uint OverwriteCache(BaseDataHeader item)
        {
            item.dwVersion = AccelerationDefs.ACCELERATION_SET_DATA_VERSION_OVERWRITE;
            return WriteToCache(item);
        }

        public static void OverwritePresenceCache(BaseDataHeader[] rgItems)
        {
            string[] rgKeys = new string[rgItems.Length];
            byte[][] rgValues = new byte[rgItems.Length][];
            for (int iItem = 0; iItem < rgItems.Length; iItem++)
            {
                if (rgItems[iItem] == null) continue;
                rgKeys[iItem] = rgItems[iItem].CacheKey;
                rgValues[iItem] = (byte[])rgItems[iItem];
            }
            s_mcPresCache.BulkPublishData(rgKeys, rgValues, new object[rgItems.Length]);
        }

        public static void OverwriteNotificationCache(BaseDataHeader[] rgItems)
        {
            string[] rgKeys = new string[rgItems.Length];
            byte[][] rgValues = new byte[rgItems.Length][];
            for (int iItem = 0; iItem < rgItems.Length; iItem++)
            {
                if (rgItems[iItem] == null) continue;
                rgKeys[iItem] = rgItems[iItem].CacheKey;
                rgValues[iItem] = (byte[])rgItems[iItem];
            }
            s_mcNotiCache.BulkPublishData(rgKeys, rgValues, new object[rgItems.Length]);
        }

        public unsafe static void RefreshFromCache(BaseDataHeader item)
        {
            IMemCache cache = GetMemCacheFromDataType(item.DataType);
            uint version;
            byte[] rgbCacheData = cache.RequestData(item.CacheKey, null, out version);

            if ((rgbCacheData != null) && (rgbCacheData.Length > sizeof(BASE_DATA_HEADER)))
            {
                item.ReadBytes(rgbCacheData);
                item.dwVersion = version;
            }
        }

        public static void RemoveFromCache(string sKey)
        {
            IMemCache cache = GetMemCacheFromKey(sKey);
            cache.RemoveData(sKey);
        }

        public static void RemoveFromPresenceCache(string sKey)
        {
            s_mcPresCache.RemoveData(sKey);
        }

        public static void RemoveFromPresenceCache(string[] rgKeys)
        {
            s_mcPresCache.BulkRemoveData(rgKeys);
        }

        public delegate bool FriendCompareProc(ulong qwUser1, ulong qwUser2);
        public static bool IsDataAccessible(ulong qwOwnerID, ulong qwViewerID, uint dwDataFlags, FriendCompareProc areUsersFriends)
        {
            if (qwOwnerID == qwViewerID)
            {
                return true;
            }

            if ((dwDataFlags & XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE) != 0)
            {
                return true;
            }

            if (((dwDataFlags & XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS) != 0) &&
                areUsersFriends(qwOwnerID, qwViewerID))
            {
                return true;
            }

            return false;
        }

        public static void RegisterPresenceCacheNotificationHandler(DataChangeNotification notificationCallback)
        {
            s_mcPresCache.RegisterNotificationHandler(notificationCallback);                
        }

        public static void RegisterNotificationCacheNotificationHandler(DataChangeNotification notificationCallback)
        {
            s_mcNotiCache.RegisterNotificationHandler(notificationCallback);
        }

        public static void UnregisterPresenceCacheHandlers()
        {
            s_mcPresCache.UnregisterHandlers();
        }

        public static void UnregisterNotificationCacheHandlers()
        {
            s_mcPresCache.UnregisterHandlers();
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\AffiliateList.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Text;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.utilities2;
using xonline.common.protocol.SubNoti;
using xonline.server.XConnSrv;

using Microsoft.Webstore.WstClient;

namespace xonline.common.community
{
    public class Affiliate : WireData
    {
        public ulong qwAffiliateID;

        public uint dwTitleID;

        public uint mtDateUpdated;
    }

    public class AffiliateList : BaseDataHeader
    {
        public uint mtDateLoaded;

        public uint cAffiliates;

        [WireInfo(SizeParam = "cAffiliates")]
        public Affiliate[] rgAffiliates;

        public uint ListType
        {
            get
            {
                return DataSubType;
            }
            set
            {
                DataSubType = value;
            }
        }

        public uint Length
        {
            get
            {
                return cAffiliates;
            }
        }

        public void AddAffiliates(ulong[] rgqwNewAffiliates, uint dwTitleID, uint mtDateUpdated)
        {
            do
            {
                List<Affiliate> newList = new List<Affiliate>(rgAffiliates);
                foreach (ulong qwUserID in rgqwNewAffiliates)
                {
                    Affiliate affiliate = newList.Find((x) => { return (x.qwAffiliateID == qwUserID); });
                    if (affiliate != null)
                    {
                        affiliate.dwTitleID = dwTitleID;
                        affiliate.mtDateUpdated = mtDateUpdated;
                    }
                    else
                    {
                        affiliate = new Affiliate();
                        affiliate.qwAffiliateID = qwUserID;
                        affiliate.dwTitleID = dwTitleID;
                        affiliate.mtDateUpdated = mtDateUpdated;
                        newList.Add(affiliate);
                    }
                }
                newList.Sort((left, right) => { return (int)(right.mtDateUpdated - left.mtDateUpdated); }); // Newer messages first
                // Remove older messages if we're past the maximum count
                int maxCount = PresDefs.MAX_AFFILIATES(ListType);
                if (newList.Count > maxCount)
                {
                    newList.RemoveRange(maxCount, newList.Count - maxCount);
                }
                rgAffiliates = newList.ToArray();
                cAffiliates = (uint)rgAffiliates.Length;
            }
            while (!TryWrite());
        }

        public void RemoveAffiliates(ulong[] rgqwRemoveAffiliates)
        {
            do
            {
                List<Affiliate> newList = new List<Affiliate>(rgAffiliates);
                foreach (ulong qwUserID in rgqwRemoveAffiliates)
                {
                    int idx = newList.FindIndex((x) => { return (x.qwAffiliateID == qwUserID); });
                    if (idx >= 0)
                    {
                        newList.RemoveAt(idx);
                    }
                }
                rgAffiliates = newList.ToArray();
                cAffiliates = (uint)rgAffiliates.Length;
            }
            while (!TryWrite());
        }

        public bool IsAffiliate(ulong qwAffiliateID)
        {
            return (Array.FindIndex<Affiliate>(rgAffiliates, (x) => { return (x.qwAffiliateID == qwAffiliateID); }) >= 0);
        }

        public static AffiliateList Load(ulong qwUserID, uint dwListType)
        {
            string key = CacheUtil.BuildCacheKey(DATA_TYPES.eAffiliateList, qwUserID, dwListType);
            AffiliateList list;
            do
            {
                list = CacheUtil.ReadFromCache(key) as AffiliateList;
                if (list == null)
                {
                    uint mtCropBefore = 0;
                    list = new AffiliateList(qwUserID, dwListType);
                    using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
                    {
                        ws.Partition = ws.CalcPartition(qwUserID);
                        ws.StoredProc = "dbo.p_pres_load_affiliates";
                        ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                        ws.AddParameter("@bi_user_puid", (long)qwUserID);
                        ws.AddParameter("@i_list_flag", (int)PresDefs.X_AFFILIATE_INDEX_TO_FLAG(dwListType));
                        WstDataReader reader = ws.Execute();
                        HResult hr = (uint)ws.GetIntParameter("@ret");
                        if (HResult.Succeeded(hr) && reader.HasRows)
                        {
                            List<Affiliate> affiliates = new List<Affiliate>();
                            while (reader.Read())
                            {
                                if (affiliates.Count == PresDefs.MAX_AFFILIATES(dwListType))
                                {
                                    mtCropBefore = MsgDefs.DateTimeToMsgTime((DateTime)reader["dt_date_updated"]);
                                    break;
                                }
                                else
                                {
                                    Affiliate a = new Affiliate();
                                    a.qwAffiliateID = (ulong)(long)reader["bi_affiliate_puid"];
                                    a.dwTitleID = (uint)(int)reader["i_title_id"];
                                    a.mtDateUpdated = MsgDefs.DateTimeToMsgTime((DateTime)reader["dt_date_updated"]);
                                    affiliates.Add(a);
                                }
                            }
                            // List comes back sorted DESC by dt_date_updated
                            list.rgAffiliates = affiliates.ToArray();
                            list.cAffiliates = (uint)affiliates.Count;
                        }
                        reader.Close();
                    }

                    // find the most recent affiliate and set that to the list "load time".
                    list.mtDateLoaded = (list.rgAffiliates.Length > 0) ? list.rgAffiliates[0].mtDateUpdated : 0;

                    if (!list.TryWrite())
                    {
                        // Maybe another thread already created the list. Next iteration we should be able to load it from the cache.
                        list = null;
                    }
                    else if (mtCropBefore > 0)
                    {
                        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                        {
                            ws.Partition = ws.CalcPartition(qwUserID);
                            ws.StoredProc = "dbo.p_pres_crop_affiliates";
                            ws.AddParameter("@bi_user_puid", (long)qwUserID);
                            ws.AddParameter("@i_list_flag", (int)PresDefs.X_AFFILIATE_INDEX_TO_FLAG(dwListType));
                            ws.AddParameter("@dt_date_updated", MsgDefs.MsgTimeToDateTime(mtCropBefore));
                            ws.ExecuteNonQuery();
                        }
                    }
                }
                else
                {
                    // For simplicity, other methods of AffiliateList assume that rgAffiliates is never null
                    if (list.rgAffiliates == null)
                    {
                        list.rgAffiliates = new Affiliate[0];
                    }
                }
            } while (list == null) ;

            return list;
        }

        public static void PersistToDatabase(ulong qwUserID)
        {
            StringBuilder sb = new StringBuilder();
            AffiliateList[] rgLists = new AffiliateList[PresDefs.NUM_STORED_AFFILIATE_LISTS];
            for (uint dwListType = 0; dwListType < PresDefs.NUM_STORED_AFFILIATE_LISTS; ++dwListType)
            {
                string key = CacheUtil.BuildCacheKey(DATA_TYPES.eAffiliateList, qwUserID, dwListType);
                AffiliateList list = CacheUtil.ReadFromCache(key) as AffiliateList;
                rgLists[dwListType] = list;
                if ((list != null) && (list.rgAffiliates.Length > 0) && (list.rgAffiliates[0].mtDateUpdated > list.mtDateLoaded))
                {
                    foreach (Affiliate a in list.rgAffiliates)
                    {
                        // the list is sorted by date.
                        if (a.mtDateUpdated <= list.mtDateLoaded)
                        {
                            break;
                        }

                        sb.AppendFormat(
                            @"<a xuid=""{0}"" title=""{1}"" list=""{2}"" date=""{3:G}""/>",
                            (long)a.qwAffiliateID,
                            (int)a.dwTitleID,
                            PresDefs.X_AFFILIATE_INDEX_TO_FLAG(dwListType),
                            MsgDefs.MsgTimeToDateTime(a.mtDateUpdated));
                    }
                }
            }
            if (sb.Length > 0)
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.Partition = ws.CalcPartition(qwUserID);
                    ws.StoredProc = "dbo.p_pres_add_affiliates";
                    ws.AddParameter("@bi_user_puid", qwUserID);
                    ws.AddParameter("@si_hash_bucket", ws.Partition);
                    ws.AddParameter("@xml_data", sb.ToString());
                    ws.ExecuteNonQuery();
                }

                // update the load times in the caches that were modified.
                for (uint dwListType = 0; dwListType < PresDefs.NUM_STORED_AFFILIATE_LISTS; ++dwListType)
                {
                    AffiliateList list = rgLists[dwListType];
                    if (list == null)
                    {
                         continue;
                    }

                    bool fChanged = false;
                    do
                    {
                        fChanged = false;
                        
                        if ((list.rgAffiliates.Length == 0) && (list.mtDateLoaded != 0))
                        {
                            list.mtDateLoaded = 0;
                            fChanged = true;
                        }
                            
                        if ((list.rgAffiliates.Length > 0) && (list.rgAffiliates[0].mtDateUpdated > list.mtDateLoaded))
                        {
                            list.mtDateLoaded = list.rgAffiliates[0].mtDateUpdated;
                            fChanged = true;
                        }
                    }
                    while (fChanged && !list.TryWrite());

                    if (fChanged && (list.rgAffiliates.Length >= PresDefs.MAX_AFFILIATES(dwListType)))
                    {
                        // we don't have the update time of the first person we want to delete.  but we do have the time of the last person
                        // we want to keep.  so we subtract 1 to that in an effort to delete everything before him.
                        uint mtCropBefore = list.rgAffiliates[PresDefs.MAX_AFFILIATES(dwListType) - 1].mtDateUpdated - 1;
                        
                        using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                        {
                            ws.Partition = ws.CalcPartition(qwUserID);
                            ws.StoredProc = "dbo.p_pres_crop_affiliates";
                            ws.AddParameter("@bi_user_puid", (long)qwUserID);
                            ws.AddParameter("@i_list_flag", (int)PresDefs.X_AFFILIATE_INDEX_TO_FLAG(dwListType));
                            ws.AddParameter("@dt_date_updated", MsgDefs.MsgTimeToDateTime(mtCropBefore));
                            ws.ExecuteNonQuery();
                        }
                    }
                }
            }
        }

        public AffiliateList() : base(DATA_TYPES.eAffiliateList)
        {
            rgAffiliates = new Affiliate[0];
        }

        public AffiliateList(ulong qwOwnerID, uint dwListType)
            : base(DATA_TYPES.eAffiliateList)
        {
            OwnerID = qwOwnerID;
            ListType = dwListType;
            rgAffiliates = new Affiliate[0];
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\UserQueue.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities2;

using xonline.common.protocol.SubNoti;
using xonline.server.XConnSrv;

namespace xonline.common.community
{
    public class UserQueue : BaseDataHeader
    {
        public uint cdwQueueItems;

        [WireInfo(SizeParam="cdwQueueItems")]
        public NotificationListItem[] rgQueueItems;

        public ushort QueueType
        {
            get
            {
                return (ushort)DataSubType;
            }
            set
            {
                DataSubType = value;
            }
        }

        public uint Length
        {
            get
            {
                return cdwQueueItems;
            }
        }


        public void AddItem(NotificationListItem newItem)
        {
            do
            {
                NotificationListItem[] newList = new NotificationListItem[cdwQueueItems + 1];
                
                if (cdwQueueItems > 0)
                {
                    foreach (NotificationListItem item in rgQueueItems)
                    {
                        if (item.dwItemID == newItem.dwItemID)
                        {
                            // duplicate id.
                            return;
                        }
                    }

                    Array.ConstrainedCopy(rgQueueItems, 0, newList, 0, (int)cdwQueueItems);
                }
                
                newList[cdwQueueItems] = newItem;

                rgQueueItems = newList;
                cdwQueueItems = (uint)rgQueueItems.Length;
            }
            while (!TryWrite());
        }

        public NotificationListItem[] DequeueItems(
            uint dwStartItemID, 
            uint cMaxItems, 
            ref uint cMaxBytes, 
            out uint dwNextItemID, 
            out ushort cItemsLeft)
        {
            NotificationListItem[] rgItems = null;
            int cBytes = 0;
            
            do
            {
                cItemsLeft = (ushort)cdwQueueItems;
                
                // find the start index.
                int iStart = 0;
                while ((iStart < cdwQueueItems) && (rgQueueItems[iStart].dwItemID < dwStartItemID))
                {
                    iStart++;
                }

                cItemsLeft -= (ushort)iStart;

                if (cItemsLeft == 0)
                {
                    // reached the end of the list.
                    cMaxBytes = 0;
                    dwNextItemID = 0;
                    return null;
                }

                // find the length of the range to return.
                ushort cItems = 0;
                cBytes = 0;
                while ((cItems < cItemsLeft) && ((cBytes + rgQueueItems[iStart + cItems].wItemLen) <= cMaxBytes))
                {
                    cBytes += rgQueueItems[iStart + cItems].wItemLen;
                    cItems++;
                }

                cItemsLeft -= cItems;

                rgItems = null;
                if (cItems > 0)
                {
                    // split off the returned list.
                    rgItems = new NotificationListItem[cItems];
                    Array.ConstrainedCopy(rgQueueItems, iStart, rgItems, 0, rgItems.Length);

                    // combine anything skipped with anything remaining.
                    NotificationListItem[] rgRemaining = new NotificationListItem[cdwQueueItems - rgItems.Length];
                    Array.ConstrainedCopy(rgQueueItems, 0, rgRemaining, 0, iStart);
                    Array.ConstrainedCopy(rgQueueItems, iStart + rgItems.Length, rgRemaining, iStart, rgRemaining.Length - iStart);

                    rgQueueItems = rgRemaining;
                    cdwQueueItems = (uint)rgQueueItems.Length;
                }
            }
            while (!TryWrite());

            cMaxBytes = (uint)cBytes;
            dwNextItemID = (cItemsLeft == 0) ? 0 : rgQueueItems[rgQueueItems.Length - cItemsLeft].dwItemID;

            return rgItems;
        }

        public void Clear()
        {
            do
            {
                cdwQueueItems = 0;
                rgQueueItems = null;
            }
            while (!TryWrite());
        }


        public UserQueue(ulong qwUserID, ushort wQueueType) : base(DATA_TYPES.eUserQueue)
        {
            OwnerID = qwUserID;
            QueueType = wQueueType;
            
            RefreshFromStore();
        }

        public UserQueue()
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\GetFriendsProcessorBase.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

using xonline.common.service;

using xonline.common.protocol.socialquery;
using xonline.common.community;
using xonline.common.community.socialquery.protocol;
using System.Diagnostics;

namespace xonline.common.community.socialquery
{
    public abstract class GetFriendsListProcessorBase : SocialQueryUserListProcessor
    {
        // The request parameters from the caller
        protected GetFriendsINHRequest message;

        // The working set. This is the user list that Gather/Sort/Page/Filter operate on.
        protected SocialQueryUser[] friends;
        public SocialQueryUser[] Friends
        {
            get { return friends; }
        }

        // The version of the friend list
        protected uint friendListVersion;
        public uint FriendListVersion
        {
            get { return friendListVersion; }
        }

        // The total number of users in the response set
        protected uint totalNumUsers;
        public uint TotalNumUsers
        {
            get { return totalNumUsers; }
        }

        // The index of the first user of the friends array within the total result set
        protected uint firstUserIndex;
        public uint FirstUserIndex
        {
            get { return firstUserIndex; }
        }

        public override void Sort()
        {
            // If a Friends-of-Friends query is being done (requestor != owner), the only supported sort is by online status
            if(message.data.RequestorXuid != message.data.OwnerXuid && message.data.SortType != GetFriendSortType.OnlineStatus)
            {
                throw new XRLException(HResult.E_FAIL, XEvent.Id.SOCIALQUERY_INVALID_SORT_TYPE, 
                                       "Friends-of-friend queries can only sort by online status.");
            }

            if (friends != null && friends.Length > 1)
            {
                IComparer<SocialQueryUser> comparer = null;

                switch (message.data.SortType)
                {
                    case GetFriendSortType.Gamertag:
                        comparer = new SocialQueryUserGamertagComparer();
                        break;

                    case GetFriendSortType.OnlineStatus:
                        comparer = new SocialQueryUserOnlineStatusComparer();
                        break;

                    case GetFriendSortType.Activity:
                        comparer = new SocialQueryUserActivityComparer(new TitleStringFetcher(), message.data.TitleId, message.data.LocaleId);
                        break;

                    default:
                        throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.SOCIALQUERY_INVALID_SORT_TYPE, 
                                               "GetFriendsListProcessorBase Sort() received an unknown sort type = " + (uint)message.data.SortType);
                }

                Array.Sort(friends, comparer);
            }
        }

        public override void Page()
        {
            // Don't do paging twice. If the INH does it, don't do it on the FD, too.
            Debug.Assert(FirstUserIndex == 0);

            if (friends == null || friends.Length == 0)
            {
                return; // nothing to do
            }

            if (friends.Length < message.data.PagingInfo.PageSize && message.data.PagingInfo.PageStart == 0)
            {
                return; // the entire result fits in a single page so we're done
            }

            int iStart = Math.Min(friends.Length, message.data.PagingInfo.PageStart); // PageStart is an element index, not a page number!
            int iEnd   = Math.Min(iStart + message.data.PagingInfo.PageSize, friends.Length);

            SocialQueryUser[] friendsPage = new SocialQueryUser[iEnd - iStart];

            // fill in the "page" of data
            Array.Copy(friends, iStart, friendsPage, 0, iEnd - iStart);

            // Update our user list state with information about the page.
            friends = friendsPage;
            firstUserIndex = (uint)message.data.PagingInfo.PageStart;

            // !!TODO(joelwi): Use the PagingInfo.FocusXuid once we're done designing how it should work!
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\SGComm.cs ===
//
// SGComm.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
//  This provides a class for communication with the security gateway.
//
// Xbox Online Service
//
using System;
using System.Web;
using System.IO;
using System.Net;
using System.Net.Sockets;
using System.Runtime.InteropServices;

using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;

namespace xonline.common.community
{
    // QVals - Xonline.x over engineers the crap out of these.
    //         In practice they always look like this
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public struct SQVals
    {
        public uint QFlagQVal; // Notification Queue Flags
        public uint QFlags;

        public uint InviteQVal; // Boolean (no extra data)

        public uint NewMsgIdsQVal; // The last 3 message IDs that arrived
        public uint NewMsgId_1;
        public uint NewMsgId_2;
        public uint NewMsgId_3;

        public uint NewMsgDataQVal; // Data for the last 3 messages that arrived
        public uint NewMsgData_1;
        public uint NewMsgData_2;
        public uint NewMsgData_3;

        public uint DelMsgQVal; // the last 3 messages deleted
        public uint DelMsg_1;
        public uint DelMsg_2;
        public uint DelMsg_3;
    };

    public class CQVal
    {
        // Definitions -----------------------------------------------------------------------
        public static uint QVAL_QFLAGS
        {
            get
            {
                return QVAL(0, 1);  // Payload is dwQFlags
            }
        }
        public static uint QVAL_NEW_GAME_INVITE
        {
            get
            {
                return QVAL(2, 0);  // Boolean (no extra data)
            }
        }

        public static uint QVAL_NEW_MSG_IDS
        {
            get
            {
                return QVAL(3, 3);  // 3 DWORDs of the last 3 message IDs that arrived
            }
        }

        public static uint QVAL_NEW_MSG_DATA
        {
            get
            {
                return QVAL(7, 3);  // 3 DWORDs of data for the last 3 messages that arrived
            }
        }
        public static uint QVAL_MSG_DELETED
        {
            get
            {
                return QVAL(11,3);  // 3 DWORDs of the last 3 messages deleted
            }
        }
        public static uint QVAL_MAX
        {
            get
            {
                return QVAL_MSG_DELETED;
            }
        }

        public static uint QVAL_COUNT
        {
            get
            {
                return QVAL_INDEX_NEXT(QVAL_MAX);
            }
        }

        public static uint QVAL(uint idx, uint size)
        {
            return (((idx) << QVAL_INDEX_SHIFT) | (size));
        }

        public static uint QVAL_INDEX(uint qval)
        {
            return (((qval) & QVAL_INDEX_MASK) >> QVAL_INDEX_SHIFT);
        }

        public static uint QVAL_DSIZE(uint qval)
        {
            return (((qval) & QVAL_DSIZE_MASK));
        }

        public static uint QVAL_INDEX_NEXT(uint qval)
        {
            return (QVAL_INDEX(qval) + 1 + QVAL_DSIZE(qval));
        }

        public static uint QVAL_SEQ(uint qval)
        {
            return (((qval) & QVAL_SEQ_MASK) >> QVAL_SEQ_SHIFT);
        }

        public const uint QVAL_DSIZE_MASK  =   0x00000003;      // Payload size in DWORDs
        public const uint QVAL_INDEX_MASK  =   0x0000007C;      // Index of this value in vector of CQVal
        public const uint QVAL_BOOL_MASK   =   0x00000080;      // Boolean value (for when there is no payload)
        public const uint QVAL_SEQ_MASK    =   0xFFFFFF00;      // Sequence number associated with value

        public const int QVAL_INDEX_SHIFT =   2;               // How far left to shift index
        public const int QVAL_SEQ_SHIFT   =   8;               // How far left to shift sequence number
    };

    public static class SGComm
    {
        //TODO: These should be mostly configurable
        private const int sizeMessageKickResponse = 25;
        private const int XONLINE_SG_MESSAGE_PORT = 0xFFFF;
        private const int XONLINE_SG_REQ_RETRIES = 4;        // Number of retries. Each retry doubles prevous timeout.
        private const int XONLINE_SG_REQ_TIMEOUT = 200000;   // 200 milliseconds timeout for first request, doubled every subsequent request
        // Net result is 4 requests with timeouts of 200, 400, 800, and 1600 milliseconds

        class SGSocket : IDisposable
        {
            public NativeSocket _socket;
            public byte[] _buffer;

            public SGSocket(AddressFamily addressFamily, SocketType socketType, ProtocolType protocolType, int cbBuffer)
            {
                _socket = new NativeSocket(addressFamily, socketType, protocolType);
                _buffer = new byte[cbBuffer];
            }

            public void Dispose()
            {
                _socket.Dispose();
                _buffer = null;
            }
        }

        private static LockFreeStack<SGSocket> _socketPool = new LockFreeStack<SGSocket>();

        public static void SendKick(SGADDR sgaddr)
        {
            byte[] sgRequest;
            CSgMsgKickReq req = new CSgMsgKickReq();
            req._sgaddr = sgaddr;
            sgRequest = (byte[])req;
            SendSgMsg(SG_MSG_TYPES.SGMSG_TYPE_KICK_REQ, sgRequest, sgaddr);
        }

        public static void SendQVals(SGADDR sgaddr, ulong qwUserId, uint dwSeqQVals, uint[] rgQVALs)
        {
            byte[] sgRequest;
            CSgMsgSetQValsReq req = new CSgMsgSetQValsReq();
            req.SetPush();
            req._sgaddr = sgaddr;                    // SGADDR of the client
            req._qwUserId = qwUserId;                  // User id of the user
            req._dwContext = dwSeqQVals;                 // Sender's context to be returned in reply
            req._qvals = rgQVALs;
            sgRequest = (byte[])req;
            SendSgMsg(SG_MSG_TYPES.SGMSG_TYPE_SET_QVALS_PUSH, sgRequest, sgaddr);
        }

        private static void SendSgMsg(SG_MSG_TYPES type, byte[] request, SGADDR sgaddr)
        {
            // don't do anything for empty sgaddr
            if (sgaddr.inaSg == 0)
                return;

            BinaryReader resp = null;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            SGSocket sgsock = null;
            byte[] sgResponse = null;
            bool haveData = false;
            int recBytes = 0;
            bool fRetry = true;


            lRetry:

            try
            {
                sgsock = _socketPool.Pop();

                if (sgsock == null)
                {
                    sgsock = new SGSocket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp, 1500);
                    // removed:  is this important here?
                    // sock.Blocking = false;
                    IPEndPoint epLocal = new IPEndPoint(IPAddress.Any, 0);
                    sgsock._socket.Bind(epLocal);
                }

                IPEndPoint SgMsgPort = new IPEndPoint(sgaddr.inaSg, XONLINE_SG_MESSAGE_PORT);

                try
                {
                    IPEndPoint ep = new IPEndPoint(IPAddress.Any, 0);

                    // first clear any remaining traffic sitting on this old socket.
                    while (sgsock._socket.Select(0, SelectMode.SelectRead))
                    {
                        sgsock._socket.ReceiveFrom(sgsock._buffer, ref ep);
                    }

                    for (int i = 0; i < XONLINE_SG_REQ_RETRIES; i++)
                    {
                        //send the request
                        sgsock._socket.SendTo(request, SgMsgPort);

                        if (sgsock._socket.Select(XONLINE_SG_REQ_TIMEOUT * (1 << i), SelectMode.SelectRead))
                        {
                            sgResponse = sgsock._buffer;

                            recBytes = sgsock._socket.ReceiveFrom(sgResponse, ref ep);

                            if(sgResponse != null && recBytes > 0)
                            {
                                resp = new BinaryReader(new MemoryStream(sgResponse));

                                // we've succeeded in getting results if we're here.
                                // see if they're meaningful.
                                haveData = VerifyResponse(type, resp);

                                if (haveData)
                                {
                                    break;
                                }
                                else
                                {
                                    haveData = false;
                                    sgResponse = null;
                                    recBytes = 0;
                                }
                            }
                        }
                    }

                    _socketPool.Push(sgsock);
                }
                catch(Exception e)
                {
                    if (null != sgsock)
                    {
                        sgsock.Dispose();
                        sgsock = null;
                    }

                    if (fRetry == false)
                    {
                        throw new ExceptionWithEventId(XEvent.Id.AUTHDATA_SG_COMMUNICATION_ERROR, "SG("+sgaddr.inaSg+"): " + e);
                    }
                    else
                    {
                        fRetry = false;
                        goto lRetry;
                    }
                }
            }
            catch(Exception)
            {  
                if (null != sgsock)
                {
                    sgsock.Dispose();
                    sgsock = null;
                }
                //XomNtEvent(
                //    XEVENT_PRESENCE_CODE_412,
                //    "SendKick SendTo failed hr=0x%X)", 
                //    hr);
                throw;
            }
        }

        private static bool VerifyResponse(SG_MSG_TYPES type, BinaryReader br)
        {
            switch (type)
            {
                case SG_MSG_TYPES.SGMSG_TYPE_KICK_REQ:
                    {
                        if (br.ReadUInt16() != (ushort)SG_MSG_TYPES.SGMSG_TYPE_KICK_REP)
                        {
                            return false;
                        }

                        // good enough
                        return true;
                    }
                case SG_MSG_TYPES.SGMSG_TYPE_SET_QVALS_PUSH:
                    {
                        if (br.ReadUInt16() != (ushort)SG_MSG_TYPES.SGMSG_TYPE_SET_QVALS_REP)
                        {
                            return false;
                        }

                        return true;
                    }
                default:
                    return false;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\MessagingUtil.cs ===
using System;
using System.Text;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.IO;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.protocol.SubNoti;

namespace xonline.common.community
{
    /// <summary>
    /// For now this class contains data for throttling
    /// </summary>
    public class MessagingData : BaseDataHeader
    {
        // dtThrottleWindow represents when a user's message data should
        // have a clean slate.  We're initializing it now, so the next update
        // should be in 24 hours.
        public DateTime dtThrottleWindow = DateTime.UtcNow.AddHours(24);
        public ushort wRecipientsToday = 0;
        public ushort wMessagesToday = 0;

        public MessagingData() : base(DATA_TYPES.eMessagingData)
        {
        }
    }

    #region Transient Message WireData types

    public class TransientMessage : WireData
    {
        public MessageSummary Summary;

        [WireInfo(Serialize = false)]
        public MessageDetails Details;

        public TransientMessage()
        {
            Summary = new MessageSummary();
            Details = null;
        }

        public MessageSummary2 Summary2
        {
            get
            {
                MessageSummary2 s = new MessageSummary2();
                s.bMessageType = Summary.bMessageType;
                s.cbDetails = Summary.cbDetails;
                s.dwMessageFlags = Summary.dwMessageFlags;
                s.dwMessageID = Summary.dwMessageID;
                s.dwSenderTitleID = Summary.dwSenderTitleID;
                s.mtSentTime = Summary.mtSentTime;
                s.qwSenderContext = Summary.qwSenderContext;
                s.qwSenderID = Summary.qwSenderID;
                s.szSenderName = Summary.szSenderName;
                s.wExpireMinutes = Summary.wExpireMinutes;
                // Subject goes empty in MessageSummary2 for game invites
                s.rgbSubject = null;
                return s;
            }
        }

        public ulong MatchSessionID
        {
            get
            {
                if (Details != null)
                {
                    byte[] rgbProp = MessagingUtil.GetMessageProperty(MsgDefs.XONLINE_MSG_PROP_SESSION_ID, Details);
                    if (rgbProp != null && rgbProp.Length == sizeof(ulong))
                    {
                        return BitConverter.ToUInt64(rgbProp, 0);
                    }
                }
                return 0;
            }
        }

        public override void WriteStream(BinaryWriter binaryWriter)
        {
            if (Details != null)
            {
                Summary.cbDetails = (ushort)Details.Size();
            }
            else
            {
                Summary.cbDetails = 0;
            }
            base.WriteStream(binaryWriter);
            if (Details != null)
            {
                Details.WriteStream(binaryWriter);
            }
        }

        public override WireData ReadStream(BinaryReader binaryReader)
        {
            WireData wd = base.ReadStream(binaryReader);
            if (Summary.cbDetails > 0)
            {
                Details = new MessageDetails();
                Details.cbData = Summary.cbDetails;
                Details.ReadStream(binaryReader);
            }
            return wd;
        }
    }

    // Stores the transient messages received by a user
    public class TransientMessages : BaseDataHeader
    {
        public TransientMessages()
            : base(DATA_TYPES.eTransientMessages)
        {
            dwNextMessageID = 1 | MsgDefs.XONLINE_MSG_ID_TRANSIENT_MESSAGE;
            dwMessageCount = 0;
            Messages = null;
        }

        public TransientMessages(ulong qwOwnerID)
            : base(DATA_TYPES.eTransientMessages)
        {
            dwNextMessageID = 1 | MsgDefs.XONLINE_MSG_ID_TRANSIENT_MESSAGE;
            dwMessageCount = 0;
            Messages = null;
            OwnerID = qwOwnerID;
        }

        public uint dwNextMessageID;

        public uint dwMessageCount;

        [WireInfo(SizeParam = "dwMessageCount")]
        public TransientMessage[] Messages; // Newer messages are inserted at the end of Messages[]

        protected uint NextMessageID
        {
            get
            {
                uint id = dwNextMessageID;
                dwNextMessageID = ((id + 1) & MsgDefs.XONLINE_MSG_ID_BASE_MASK) | MsgDefs.XONLINE_MSG_ID_TRANSIENT_MESSAGE;
                return id;
            }
        }

        public uint AddMessage(TransientMessage xmsg)
        {
            var msgList = new List<TransientMessage>();
            if (Messages != null)
            {
                msgList.AddRange(Messages);
            }
            if (msgList.Count >= MsgDefs.XONLINE_MAX_TRANSIENT_MESSAGES)
            {
                msgList.RemoveRange(0, (int)(dwMessageCount - MsgDefs.XONLINE_MAX_TRANSIENT_MESSAGES + 1));
            }
            xmsg.Summary.dwMessageID = NextMessageID;
            // Add new message at the end of the list
            msgList.Add(xmsg);
            // Now save data for serialization
            Messages = msgList.ToArray();
            // Return the id of the newly added message
            return xmsg.Summary.dwMessageID;
        }

        public TransientMessage GetMessage(uint dwMessageID)
        {
            TransientMessage xmsg = null;
            if (Messages != null)
            {
                xmsg = Array.Find<TransientMessage>(Messages, (x) => { return (x.Summary.dwMessageID == dwMessageID); });
            }
            return xmsg;
        }

        public TransientMessage DeleteMessage(uint dwMessageID)
        {
            if (Messages != null)
            {
                return DeleteMessageByIndex(Array.FindIndex<TransientMessage>(Messages, (x) => { return (x.Summary.dwMessageID == dwMessageID); }));
            }
            else
            {
                return null;
            }
        }

        public TransientMessage DeleteMessageByIndex(int index)
        {
            if (Messages != null && index >= 0 && index < Messages.Length)
            {
                TransientMessage xmsg = Messages[index];
                if (Messages.Length == 1)
                {
                    Messages = null;
                }
                else
                {
                    for (int j = index + 1; j < Messages.Length; ++j)
                    {
                        Messages[j - 1] = Messages[j];
                    }
                    Array.Resize<TransientMessage>(ref Messages, Messages.Length - 1);
                }
                return xmsg;
            }
            return null;
        }

        public TransientMessage DeleteMessageBySource(ulong qwSenderID, ulong qwSenderContext, byte bMessageType)
        {
            if (Messages != null)
            {
                return DeleteMessageByIndex(Array.FindIndex<TransientMessage>(Messages, (x) => { return (x.Summary.bMessageType == bMessageType && x.Summary.qwSenderID == qwSenderID && x.Summary.qwSenderContext == qwSenderContext); }));
            }
            else
            {
                return null;
            }
        }
    }

    #endregion

    // Schema definition for DATA_TYPES.eNewMessages
    public class NewMessagesData : BaseDataHeader
    {
        // count of new messages
        public ushort cNewMessages;

        // count of deleted messages
        public ushort cDeletedMessages;

        [WireInfo(SizeParam="cNewMessages")]
        public NewMessageData[] rgNewMessages;

        [WireInfo(SizeParam="cDeletedMessages")]
        public DeletedMessageData[] rgDeletedMessages;

        public NewMessagesData() : base (DATA_TYPES.eNewMessages)
        {
        }
    };

    // substructure for NEW_MESSAGES_DATA representing a single new message.
    public class NewMessageData : WireData
    {
        // the message sender
        public ulong qwSenderID;

        // extra context data passed by the sender
        public ulong qwSenderContext;

        // time the message was sent
        public uint mtSentTime;

        // recipient's message id
        public uint dwMessageID;

        // message flags
        public uint dwMessageFlags;

        // titleid of the sender
        public uint dwSenderTitleID;

        // An offset in minutes from the sent time
        public ushort wExpireMinutes; 

        // size of the message details
        public ushort cbDetails;

        // message type
        public byte bMessageType;

        // The subject of the message.
        [WireInfo(ArraySize=MsgDefs.XONLINE_MAX_SUBJECT_SIZE)]
        public string sSubject;
    };

    // substructure for NEW_MESSAGES_DATA representing a single deleted message.
    public class DeletedMessageData : WireData
    {
        // recipient's message id
        public uint dwMessageID;
    }

    public class MsgReqInternal : MsgReq
    {
        protected string m_authData = null;

        public void SetAuthData(SGInfo sgInfo)
        {
            m_authData = (sgInfo != null) ? sgInfo.ConstructBase64String() : null;
        }

        protected override HResult SendRequest(string strWho, XOService service, string path, XRLObject2 postOb)
        {
            XRLObject2 respOb = null;
            return XRLUtil.PostXrlRequest(VirtualInterface.xpnfd_messaging_int, "/xpnfront/xmessaging.srf", m_authData, postOb, ref respOb);
        }

        protected override HResult SendRequest(string strWho, XOService service, string path, XRLObject2 postOb, ref XRLObject2 respOb)
        {
            return XRLUtil.PostXrlRequest(VirtualInterface.xpnfd_messaging_int, "/xpnfront/xmessaging.srf", m_authData, postOb, ref respOb);
        }
    }

    public static class MessagingUtil
    {
        static MessagingUtil()
        {
            Config.SettingChange += new SettingChangeEventHandler(Config_SettingChange);
        }

        #region Utility functions

        public static byte[] GetMessageProperty(ushort tag, MessageDetails details)
        {
            for (int i = 0; i < details.rgProperties.Length; i++)
            {
                if (details.rgProperties[i].wPropTag == tag)
                {
                    switch (MsgDefs.XOnlineMessageGetPropType(details.rgProperties[i].wPropTag))
                    {
                        case MsgDefs.XONLINE_MSG_PROP_TYPE_NULL:
                        case MsgDefs.XONLINE_MSG_PROP_TYPE_BOOL:
                        case MsgDefs.XONLINE_MSG_PROP_TYPE_I1:
                        case MsgDefs.XONLINE_MSG_PROP_TYPE_I2:
                            return BitConverter.GetBytes(details.rgProperties[i].wPropOffset);
                        default:
                            {
                                int nSize = 0;
                                byte[] arr = null;
                                if (i == details.rgProperties.Length - 1)
                                {
                                    nSize = details.rgbData.Length - details.rgProperties[i].wPropOffset;
                                }
                                else
                                {
                                    nSize = details.rgProperties[i + 1].wPropOffset - details.rgProperties[i].wPropOffset;
                                }
                                arr = new byte[nSize];
                                Array.Copy(details.rgbData, details.rgProperties[i].wPropOffset, arr, 0, nSize);
                                return arr;
                            }
                    }
                }
            }
            return null;
        }

        #endregion

        #region NPDB Settings for Messaging

        static bool _settingsLoaded = false;

        static object _settingsLock = new object();

        /// <summary>
        /// Handles changes to setting values in NPDB.
        /// _settingsLoaded must be set to 'false' in the event that any of the settings relevant to MessagingUtil have changed.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        static void Config_SettingChange(object sender, SettingChangeEventArgs e)
        {
            switch (e.Setting)
            {
                case Setting.presence_MessagingDailySends:
                case Setting.presence_MessagingDailyRecipients:
                case Setting.presence_MessageTypeExpiration:
                case Setting.presence_ValidMessageTypes:
                    _settingsLoaded = false;
                    break;
            }
        }

        /// <summary>
        /// Load all Messaging-related settings from NPDB here. 
        /// If _settingsLoaded == true then calling LoadSettings is a noop.
        /// Public static methods on this class must call LoadSettings before reading  of their values.
        /// </summary>
        static void LoadSettings()
        {
            if (!_settingsLoaded)
            {
                lock (_settingsLock)
                {
                    if (!_settingsLoaded)
                    {
                        LoadValidMessageTypesAndExpirations();
                        LoadMessagingDataSettings();
                        _settingsLoaded = true;
                    }
                }
            }
        }

        static Dictionary<byte, ushort> _MessageTypes = null;
        static Dictionary<string, uint> _MessagingDataSettings = null;


        static void LoadMessagingDataSettings()
        {
            var MessagingDataSettings = new Dictionary<string, uint>();
            MessagingDataSettings.Add(Setting.presence_MessagingDailyRecipients, Config.GetUIntSetting(Setting.presence_MessagingDailyRecipients));
            MessagingDataSettings.Add(Setting.presence_MessagingDailySends, Config.GetUIntSetting(Setting.presence_MessagingDailySends));
            //Atomic swap
            Interlocked.Exchange(ref _MessagingDataSettings, MessagingDataSettings);
        }

        /// <summary>
        /// Builds a dictionary of message types to expiration times.
        /// The keys of the dictionary map to setting:presence_ValidMessageTypes and
        /// the values of each key map to setting:presence_MessageTypeExpiration
        /// </summary>
        static void LoadValidMessageTypesAndExpirations()
        {
            var MessageTypes = new Dictionary<byte, ushort>();
            byte[] rgbTypes = LoadValidMessageTypes();
            ushort[] rgwExpirations = LoadMessageExpirations();

            for (int i = 0; i < rgbTypes.Length; ++i)
            {
                if (i < rgwExpirations.Length)
                {
                    MessageTypes.Add(rgbTypes[i], rgwExpirations[i]);
                }
                else
                {
                    MessageTypes.Add(rgbTypes[i], 43200); // 30 days
                }
            }
            //Atomic swap
            Interlocked.Exchange(ref _MessageTypes, MessageTypes);
        }

        /// <summary>
        /// Loads the NPDB setting for presence_MessageTypeExpiration and returns the value as an array of ushorts
        /// </summary>
        /// <returns>Value for setting:presence_MessageTypeExpiration parsed into an array of ushorts</returns>
        static ushort[] LoadMessageExpirations()
        {
            var wExpirations = new List<ushort>();
            string sExpirations = Config.GetSetting(Setting.presence_MessageTypeExpiration);
            if (sExpirations != null)
            {
                foreach (var s in sExpirations.Split(new char[] { ',', '\t' }))
                {
                    wExpirations.Add(ushort.Parse(s));
                }
            }
            return wExpirations.ToArray();
        }

        /// <summary>
        /// Loads the NPDB setting for presence_LoadValidMessageTypes and returns the value as an array of bytes
        /// </summary>
        /// <returns>Value for setting:presence_LoadValidMessageTypes parsed into an array of bytes</returns>
        static byte[] LoadValidMessageTypes()
        {
            var bTypes = new List<byte>();
            string sExpirations = Config.GetSetting(Setting.presence_ValidMessageTypes);
            if (sExpirations != null)
            {
                foreach (var s in sExpirations.Split(new char[] { ',', '\t' }))
                {
                    bTypes.Add(byte.Parse(s));
                }
            }
            return bTypes.ToArray();
        }

        public static ushort GetMessageExpiration(byte bMessageType)
        {
            LoadSettings();
            if (_MessageTypes.ContainsKey(bMessageType))
            {
                return _MessageTypes[bMessageType];
            }
            else
            {
                return 43200; // 30 days
            }
        }

        public static bool IsValidMessageType(byte bMessageType)
        {
            LoadSettings();
            return (_MessageTypes.ContainsKey(bMessageType));
        }

        public static uint GetMaxDailySends()
        {
            LoadSettings();
            return _MessagingDataSettings[Setting.presence_MessagingDailySends];
        }

        public static uint GetMaxDailyRecipients()
        {
            LoadSettings();
            return _MessagingDataSettings[Setting.presence_MessagingDailyRecipients];
        }

        #endregion

        #region Sending Notifications (QVALs)

        public static void SendAddMessageNotification(ulong qwUserID, SendMessageMsg newMessage, uint dwItemID)
        {
            PresenceRecord presenceRecord = PresenceUtil.GetPresenceRecord(qwUserID);
            if (presenceRecord == null)
            {
                return;
            }
            presenceRecord.SetXMsgAddQVals(newMessage, dwItemID);
        }

        public static void SendDeleteMessageNotification(ulong qwUserID, uint dwMessageId)
        {
            PresenceRecord presenceRecord = PresenceUtil.GetPresenceRecord(qwUserID);
            if (presenceRecord == null)
            {
                return;
            }
            presenceRecord.SetXMsgDeleteQVals(dwMessageId);
        }

        #endregion

        #region Handling Transient Messages - inbox for a particular user's game invites

        public static uint AddTransientMessage(ulong qwRecipientID, TransientMessage xmsg)
        {
            uint result;
            uint newMsgId;
            TransientMessage xmsgDeleted;
            string sRecipientKey = CacheUtil.BuildCacheKey(DATA_TYPES.eTransientMessages, qwRecipientID);
            TransientMessages messages = null;
            do
            {
                messages = (TransientMessages)CacheUtil.ReadFromCache(sRecipientKey);
                if (messages == null)
                {
                    messages = new TransientMessages(qwRecipientID);
                }
                xmsgDeleted = messages.DeleteMessageBySource(xmsg.Summary.qwSenderID, xmsg.Summary.qwSenderContext, xmsg.Summary.bMessageType);
                newMsgId = messages.AddMessage(xmsg);
                result = CacheUtil.WriteToCache(messages);
            }
            while (result == HResult.E_ACCESSDENIED);
                
            if (xmsgDeleted != null)
            {
                PresenceRecord record = PresenceUtil.GetPresenceRecord(qwRecipientID);
                if (record != null)
                {
                    record.SetXMsgDeleteQVals(xmsgDeleted.Summary.dwMessageID);
                }
            }
            return newMsgId;
        }

        public static TransientMessage DeleteTransientMessage(ulong qwRecipientID, uint dwMessageID)
        {
            var xmsgs = DeleteTransientMessages(qwRecipientID, new uint[] { dwMessageID });
            return (xmsgs.Length > 0) ? xmsgs[0] : null;
        }

        public static TransientMessage[] DeleteTransientMessages(ulong qwRecipientID, uint[] dwMessageIDs)
        {
            uint result;
            List<TransientMessage> deleted;
            string sRecipientKey = CacheUtil.BuildCacheKey(DATA_TYPES.eTransientMessages, qwRecipientID);
            do
            {
                result = HResult.S_OK;
                deleted = new List<TransientMessage>();
                var messages = (TransientMessages)CacheUtil.ReadFromCache(sRecipientKey);
                if (messages != null)
                {
                    foreach (uint id in dwMessageIDs)
                    {
                        var xmsg = messages.DeleteMessage(id);
                        if (xmsg != null)
                        {
                            deleted.Add(xmsg);
                        }
                    }
                    // Only save if there were actual changes made to the transient message collection
                    if (deleted.Count > 0)
                    {
                        result = CacheUtil.WriteToCache(messages);
                    }
                }
            }
            while (result == HResult.E_ACCESSDENIED);
            return deleted.ToArray();
        }

        public static TransientMessage GetTransientMessage(ulong qwRecipientID, uint dwMessageID)
        {
            TransientMessage xmsg = null;
            string sRecipientKey = CacheUtil.BuildCacheKey(DATA_TYPES.eTransientMessages, qwRecipientID);
            TransientMessages messages = (TransientMessages)CacheUtil.ReadFromCache(sRecipientKey);
            if (messages != null)
            {
                xmsg = messages.GetMessage(dwMessageID);
            }
            return xmsg;
        }

        public static TransientMessage[] GetTransientMessages(ulong qwRecipientID)
        {
            string sRecipientKey = CacheUtil.BuildCacheKey(DATA_TYPES.eTransientMessages, qwRecipientID);
            TransientMessages messages = (TransientMessages)CacheUtil.ReadFromCache(sRecipientKey);
            var msgList = new List<TransientMessage>();
            if (messages != null)
            {
                // Remove expired messages from the returned results
                uint mtNow = MsgDefs.DateTimeToMsgTime(DateTime.UtcNow);
                foreach (var xmsg in messages.Messages)
                {
                    // MSGTIME is a count of seconds
                    uint mtExpire = (uint)(xmsg.Summary.mtSentTime + (xmsg.Summary.wExpireMinutes * 60));
                    if (mtExpire > mtNow)
                    {
                        msgList.Add(xmsg);
                        if (msgList.Count == MsgDefs.XONLINE_MAX_TRANSIENT_MESSAGES)
                        {
                            break;
                        }
                    }
                }
            }
            return msgList.ToArray();
        }

        public static uint ModifyTransientMessageFlags(ulong qwRecipientID, uint dwMessageID, uint dwSetFlags, uint dwUnsetFlags)
        {
            string sRecipientKey = CacheUtil.BuildCacheKey(DATA_TYPES.eTransientMessages, qwRecipientID);
            TransientMessages messages = null;
            uint hr = HResult.S_OK;
            do
            {
                messages = (TransientMessages)CacheUtil.ReadFromCache(sRecipientKey);
                TransientMessage xmsg = null;
                if (messages != null)
                {
                    xmsg = messages.GetMessage(dwMessageID);
                }
                if (xmsg == null)
                {
                    return HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID;
                }

                xmsg.Summary.dwMessageFlags |= dwSetFlags;
                xmsg.Summary.dwMessageFlags &= ~dwUnsetFlags;

                hr = CacheUtil.WriteToCache(messages);
            }
            while (hr == HResult.E_ACCESSDENIED);

            return hr;
        }

        /// <summary>
        /// Delegate that is a Predicate for the RevokeTransientMessage function
        /// Return true if a match is found, false otherwise
        /// </summary>
        /// <param name="msg"></param>
        /// <returns></returns>
        public delegate bool MatchRule(TransientMessage msg);

        /// <summary>
        /// Overload for method that takes the boolean parameter.
        /// This one uses true for breaking loop if found.
        /// </summary>
        /// <param name="qwRecipient">Recipient in whose queue the message is expected to be there</param>
        /// <param name="rule">Predicate that is called for each message in the recipients queue</param>
        /// <returns>List of messages that were revoked</returns>
        public static TransientMessage[] RevokeTransientMessage(ulong qwRecipient, MatchRule rule)
        {
            return RevokeTransientMessage(qwRecipient, true, rule);
        }
        /// <summary>
        /// Function that revokes a transient message
        /// </summary>
        /// <param name="qwRecipient">Recipient in whose queue the message is expected to be there</param>
        /// <param name="rule">Predicate that is called for each message in the recipients queue</param>
        /// <returns>List of messages that were revoked</returns>
        public static TransientMessage[] RevokeTransientMessage(ulong qwRecipient, bool bBreakOnFound, MatchRule rule)
        {
            var msgsDeleted = new List<TransientMessage>();
            TransientMessage[] xmsgs = GetTransientMessages(qwRecipient);
            if (null != xmsgs)
            {
                foreach (TransientMessage msg in xmsgs)
                {
                    if (rule(msg))
                    {
                        msgsDeleted.Add(DeleteTransientMessage(qwRecipient, msg.Summary.dwMessageID));
                        if (bBreakOnFound)
                        {
                            break;
                        }
                    }
                }
            }
            return msgsDeleted.ToArray();
        }

        #endregion

        #region Handling Throttling for mesaging
        
        public static MessagingData GetMessagingDataRecord(ulong qwUserId)
        {
            MessagingData msgData = (MessagingData)CacheUtil.ReadFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eMessagingData, qwUserId));
            if (msgData == null)
            {
                msgData = new MessagingData();
                msgData.OwnerID = qwUserId;
            }
            
            return msgData;
        }

        public static bool ApplyThrottling(ulong qwUserId, ushort recipients)
        {
            HResult hr = HResult.S_OK;
            do
            {
                MessagingData data = GetMessagingDataRecord(qwUserId);
                if (null != data)
                {
                    if (DateTime.UtcNow > data.dtThrottleWindow)
                    {
                        //Started a new window, reset everything
                        data.wMessagesToday = 0;
                        data.wRecipientsToday = 0;
                        data.dtThrottleWindow = DateTime.UtcNow.AddHours(24);
                    }
                    if ((data.wRecipientsToday + recipients) > GetMaxDailyRecipients() || (data.wMessagesToday + 1) > GetMaxDailySends())
                    {
                        return true;
                    }
                    else
                    {
                        data.wMessagesToday += 1;
                        data.wRecipientsToday += recipients;
                        hr = CacheUtil.WriteToCache(data);
                    }
                }
            } while (hr == HResult.E_ACCESSDENIED);
            return false;
        }
        #endregion

        #region Memory Compare implementation
        public static bool MemCmpImpl(ushort src1, byte[] src2)
        {
            if (src2.Length < 2)
                return false;
            return MemCmpImpl(BitConverter.GetBytes(src1), src2);
        }
        public static bool MemCmpImpl(byte[] src1, ushort src2)
        {
            if (src1.Length < 2)
                return false;
            return MemCmpImpl(src1, BitConverter.GetBytes(src2));
        }

        public static bool MemCmpImpl(byte[] src1, byte[] src2)
        {
            //Compare the smaller of the 2 lengths, 0 offsets
            return MemCmpImpl(src1, src2, Math.Min(src1.Length, src2.Length));
        }
        public static bool MemCmpImpl(byte[] src1, byte[] src2, int len)
        {
            return MemCmpImpl(src1, src2, len, 0);
        }
        public static bool MemCmpImpl(byte[] src1, byte[] src2, int len, int offset1)
        {
            return MemCmpImpl(src1, src2, len, offset1, 0);
        }

        /// <summary>
        /// Simple memcmp implementation
        /// </summary>
        /// <param name="src1">first comperand</param>
        /// <param name="src2">second comperand</param>
        /// <param name="len">length of second comparand to compare, the length of the second comperand is checked and used, length of first is not validated</param>
        /// <param name="offset1">offset in first array to compare from</param>
        /// <param name="offset2">offset in second array to compare against</param>
        /// <returns></returns>
        public static bool MemCmpImpl(byte[] src1, byte[] src2, int len, int offset1, int offset2)
        {
            //Safeguard offsets and length
            if (len <= 0)
            {
                return false;
            }
            if ((offset1 + len) > src1.Length || (offset2 + len) > src2.Length)
            {
                return false;
            }
            for (int i=0; i<len; i++)
            {
                if (src1[offset1+i] != src2[offset2+i])
                {
                    return false;
                }
            }
            return true;
        }
#endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\metro\abchwsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace ABCHWSDL {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ABServiceSoap", Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ABService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private ABApplicationHeader aBApplicationHeaderValueField;
        
        private ABAuthHeader aBAuthHeaderValueField;
        
        private ABTestHeader aBTestHeaderValueField;
        
        private ServiceHeader serviceHeaderValueField;
        
        private System.Threading.SendOrPostCallback ABAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABFindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABContactUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABContactFindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABContactAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABContactDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABGroupAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABGroupDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABGroupUpdateOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABGroupFindOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABGroupContactAddOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABGroupContactDeleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABAllowListSetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABAllowListGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABFindAllOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABFindByContactsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABFindMessengerUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABFindByGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABFindMeContactOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateCategoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddDynamicItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateDynamicItemOperationCompleted;
        
        private System.Threading.SendOrPostCallback ABSetForceFullSyncDateOperationCompleted;
        
        /// <remarks/>
        public ABService() {
            this.Url = "http://pvt-contacts.msn.com/abservice/abservice.asmx";
        }
        
        public ABApplicationHeader ABApplicationHeaderValue {
            get {
                return this.aBApplicationHeaderValueField;
            }
            set {
                this.aBApplicationHeaderValueField = value;
            }
        }
        
        public ABAuthHeader ABAuthHeaderValue {
            get {
                return this.aBAuthHeaderValueField;
            }
            set {
                this.aBAuthHeaderValueField = value;
            }
        }
        
        public ABTestHeader ABTestHeaderValue {
            get {
                return this.aBTestHeaderValueField;
            }
            set {
                this.aBTestHeaderValueField = value;
            }
        }
        
        public ServiceHeader ServiceHeaderValue {
            get {
                return this.serviceHeaderValueField;
            }
            set {
                this.serviceHeaderValueField = value;
            }
        }
        
        /// <remarks/>
        public event ABAddCompletedEventHandler ABAddCompleted;
        
        /// <remarks/>
        public event ABDeleteCompletedEventHandler ABDeleteCompleted;
        
        /// <remarks/>
        public event ABUpdateCompletedEventHandler ABUpdateCompleted;
        
        /// <remarks/>
        public event ABFindCompletedEventHandler ABFindCompleted;
        
        /// <remarks/>
        public event ABContactUpdateCompletedEventHandler ABContactUpdateCompleted;
        
        /// <remarks/>
        public event ABContactFindCompletedEventHandler ABContactFindCompleted;
        
        /// <remarks/>
        public event ABContactAddCompletedEventHandler ABContactAddCompleted;
        
        /// <remarks/>
        public event ABContactDeleteCompletedEventHandler ABContactDeleteCompleted;
        
        /// <remarks/>
        public event ABGroupAddCompletedEventHandler ABGroupAddCompleted;
        
        /// <remarks/>
        public event ABGroupDeleteCompletedEventHandler ABGroupDeleteCompleted;
        
        /// <remarks/>
        public event ABGroupUpdateCompletedEventHandler ABGroupUpdateCompleted;
        
        /// <remarks/>
        public event ABGroupFindCompletedEventHandler ABGroupFindCompleted;
        
        /// <remarks/>
        public event ABGroupContactAddCompletedEventHandler ABGroupContactAddCompleted;
        
        /// <remarks/>
        public event ABGroupContactDeleteCompletedEventHandler ABGroupContactDeleteCompleted;
        
        /// <remarks/>
        public event ABAllowListSetCompletedEventHandler ABAllowListSetCompleted;
        
        /// <remarks/>
        public event ABAllowListGetCompletedEventHandler ABAllowListGetCompleted;
        
        /// <remarks/>
        public event ABFindAllCompletedEventHandler ABFindAllCompleted;
        
        /// <remarks/>
        public event ABFindByContactsCompletedEventHandler ABFindByContactsCompleted;
        
        /// <remarks/>
        public event ABFindMessengerUsersCompletedEventHandler ABFindMessengerUsersCompleted;
        
        /// <remarks/>
        public event ABFindByGroupsCompletedEventHandler ABFindByGroupsCompleted;
        
        /// <remarks/>
        public event ABFindMeContactCompletedEventHandler ABFindMeContactCompleted;
        
        /// <remarks/>
        public event AddCategoryCompletedEventHandler AddCategoryCompleted;
        
        /// <remarks/>
        public event DeleteCategoryCompletedEventHandler DeleteCategoryCompleted;
        
        /// <remarks/>
        public event UpdateCategoryCompletedEventHandler UpdateCategoryCompleted;
        
        /// <remarks/>
        public event AddDynamicItemCompletedEventHandler AddDynamicItemCompleted;
        
        /// <remarks/>
        public event UpdateDynamicItemCompletedEventHandler UpdateDynamicItemCompleted;
        
        /// <remarks/>
        public event ABSetForceFullSyncDateCompletedEventHandler ABSetForceFullSyncDateCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid ABAdd(ABInfo abInfo) {
            object[] results = this.Invoke("ABAdd", new object[] {
                        abInfo});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABAdd(ABInfo abInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABAdd", new object[] {
                        abInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndABAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void ABAddAsync(ABInfo abInfo) {
            this.ABAddAsync(abInfo, null);
        }
        
        /// <remarks/>
        public void ABAddAsync(ABInfo abInfo, object userState) {
            if ((this.ABAddOperationCompleted == null)) {
                this.ABAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABAddOperationCompleted);
            }
            this.InvokeAsync("ABAdd", new object[] {
                        abInfo}, this.ABAddOperationCompleted, userState);
        }
        
        private void OnABAddOperationCompleted(object arg) {
            if ((this.ABAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABAddCompleted(this, new ABAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABDelete(System.Guid abId) {
            this.Invoke("ABDelete", new object[] {
                        abId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABDelete(System.Guid abId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABDelete", new object[] {
                        abId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABDelete(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABDeleteAsync(System.Guid abId) {
            this.ABDeleteAsync(abId, null);
        }
        
        /// <remarks/>
        public void ABDeleteAsync(System.Guid abId, object userState) {
            if ((this.ABDeleteOperationCompleted == null)) {
                this.ABDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABDeleteOperationCompleted);
            }
            this.InvokeAsync("ABDelete", new object[] {
                        abId}, this.ABDeleteOperationCompleted, userState);
        }
        
        private void OnABDeleteOperationCompleted(object arg) {
            if ((this.ABDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABUpdate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABUpdate(AB ab) {
            this.Invoke("ABUpdate", new object[] {
                        ab});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABUpdate(AB ab, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABUpdate", new object[] {
                        ab}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABUpdateAsync(AB ab) {
            this.ABUpdateAsync(ab, null);
        }
        
        /// <remarks/>
        public void ABUpdateAsync(AB ab, object userState) {
            if ((this.ABUpdateOperationCompleted == null)) {
                this.ABUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABUpdateOperationCompleted);
            }
            this.InvokeAsync("ABUpdate", new object[] {
                        ab}, this.ABUpdateOperationCompleted, userState);
        }
        
        private void OnABUpdateOperationCompleted(object arg) {
            if ((this.ABUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFind", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AB[] ABFind(long ownerPuid) {
            object[] results = this.Invoke("ABFind", new object[] {
                        ownerPuid});
            return ((AB[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABFind(long ownerPuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABFind", new object[] {
                        ownerPuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public AB[] EndABFind(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AB[])(results[0]));
        }
        
        /// <remarks/>
        public void ABFindAsync(long ownerPuid) {
            this.ABFindAsync(ownerPuid, null);
        }
        
        /// <remarks/>
        public void ABFindAsync(long ownerPuid, object userState) {
            if ((this.ABFindOperationCompleted == null)) {
                this.ABFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABFindOperationCompleted);
            }
            this.InvokeAsync("ABFind", new object[] {
                        ownerPuid}, this.ABFindOperationCompleted, userState);
        }
        
        private void OnABFindOperationCompleted(object arg) {
            if ((this.ABFindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABFindCompleted(this, new ABFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactUpdate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABContactUpdate(System.Guid abId, Contact[] contacts, ContactUpdateOptions options) {
            this.Invoke("ABContactUpdate", new object[] {
                        abId,
                        contacts,
                        options});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABContactUpdate(System.Guid abId, Contact[] contacts, ContactUpdateOptions options, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABContactUpdate", new object[] {
                        abId,
                        contacts,
                        options}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABContactUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABContactUpdateAsync(System.Guid abId, Contact[] contacts, ContactUpdateOptions options) {
            this.ABContactUpdateAsync(abId, contacts, options, null);
        }
        
        /// <remarks/>
        public void ABContactUpdateAsync(System.Guid abId, Contact[] contacts, ContactUpdateOptions options, object userState) {
            if ((this.ABContactUpdateOperationCompleted == null)) {
                this.ABContactUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABContactUpdateOperationCompleted);
            }
            this.InvokeAsync("ABContactUpdate", new object[] {
                        abId,
                        contacts,
                        options}, this.ABContactUpdateOperationCompleted, userState);
        }
        
        private void OnABContactUpdateOperationCompleted(object arg) {
            if ((this.ABContactUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABContactUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactFind", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ContactFindResult ABContactFind(System.Guid abId, ContactFilter contactFilter) {
            object[] results = this.Invoke("ABContactFind", new object[] {
                        abId,
                        contactFilter});
            return ((ContactFindResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABContactFind(System.Guid abId, ContactFilter contactFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABContactFind", new object[] {
                        abId,
                        contactFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public ContactFindResult EndABContactFind(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ContactFindResult)(results[0]));
        }
        
        /// <remarks/>
        public void ABContactFindAsync(System.Guid abId, ContactFilter contactFilter) {
            this.ABContactFindAsync(abId, contactFilter, null);
        }
        
        /// <remarks/>
        public void ABContactFindAsync(System.Guid abId, ContactFilter contactFilter, object userState) {
            if ((this.ABContactFindOperationCompleted == null)) {
                this.ABContactFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABContactFindOperationCompleted);
            }
            this.InvokeAsync("ABContactFind", new object[] {
                        abId,
                        contactFilter}, this.ABContactFindOperationCompleted, userState);
        }
        
        private void OnABContactFindOperationCompleted(object arg) {
            if ((this.ABContactFindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABContactFindCompleted(this, new ABContactFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] ABContactAdd(System.Guid abId, Contact[] contacts, ContactAddOptions options) {
            object[] results = this.Invoke("ABContactAdd", new object[] {
                        abId,
                        contacts,
                        options});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABContactAdd(System.Guid abId, Contact[] contacts, ContactAddOptions options, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABContactAdd", new object[] {
                        abId,
                        contacts,
                        options}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid[] EndABContactAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void ABContactAddAsync(System.Guid abId, Contact[] contacts, ContactAddOptions options) {
            this.ABContactAddAsync(abId, contacts, options, null);
        }
        
        /// <remarks/>
        public void ABContactAddAsync(System.Guid abId, Contact[] contacts, ContactAddOptions options, object userState) {
            if ((this.ABContactAddOperationCompleted == null)) {
                this.ABContactAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABContactAddOperationCompleted);
            }
            this.InvokeAsync("ABContactAdd", new object[] {
                        abId,
                        contacts,
                        options}, this.ABContactAddOperationCompleted, userState);
        }
        
        private void OnABContactAddOperationCompleted(object arg) {
            if ((this.ABContactAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABContactAddCompleted(this, new ABContactAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABContactDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABContactDelete(System.Guid abId, Contact[] contacts, ContactDeleteOptions options) {
            this.Invoke("ABContactDelete", new object[] {
                        abId,
                        contacts,
                        options});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABContactDelete(System.Guid abId, Contact[] contacts, ContactDeleteOptions options, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABContactDelete", new object[] {
                        abId,
                        contacts,
                        options}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABContactDelete(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABContactDeleteAsync(System.Guid abId, Contact[] contacts, ContactDeleteOptions options) {
            this.ABContactDeleteAsync(abId, contacts, options, null);
        }
        
        /// <remarks/>
        public void ABContactDeleteAsync(System.Guid abId, Contact[] contacts, ContactDeleteOptions options, object userState) {
            if ((this.ABContactDeleteOperationCompleted == null)) {
                this.ABContactDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABContactDeleteOperationCompleted);
            }
            this.InvokeAsync("ABContactDelete", new object[] {
                        abId,
                        contacts,
                        options}, this.ABContactDeleteOperationCompleted, userState);
        }
        
        private void OnABContactDeleteOperationCompleted(object arg) {
            if ((this.ABContactDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABContactDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] ABGroupAdd(System.Guid abId, GroupInfo[] groupInfo) {
            object[] results = this.Invoke("ABGroupAdd", new object[] {
                        abId,
                        groupInfo});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABGroupAdd(System.Guid abId, GroupInfo[] groupInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABGroupAdd", new object[] {
                        abId,
                        groupInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid[] EndABGroupAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void ABGroupAddAsync(System.Guid abId, GroupInfo[] groupInfo) {
            this.ABGroupAddAsync(abId, groupInfo, null);
        }
        
        /// <remarks/>
        public void ABGroupAddAsync(System.Guid abId, GroupInfo[] groupInfo, object userState) {
            if ((this.ABGroupAddOperationCompleted == null)) {
                this.ABGroupAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABGroupAddOperationCompleted);
            }
            this.InvokeAsync("ABGroupAdd", new object[] {
                        abId,
                        groupInfo}, this.ABGroupAddOperationCompleted, userState);
        }
        
        private void OnABGroupAddOperationCompleted(object arg) {
            if ((this.ABGroupAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABGroupAddCompleted(this, new ABGroupAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABGroupDelete(System.Guid abId, GroupFilter groupFilter) {
            this.Invoke("ABGroupDelete", new object[] {
                        abId,
                        groupFilter});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABGroupDelete(System.Guid abId, GroupFilter groupFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABGroupDelete", new object[] {
                        abId,
                        groupFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABGroupDelete(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABGroupDeleteAsync(System.Guid abId, GroupFilter groupFilter) {
            this.ABGroupDeleteAsync(abId, groupFilter, null);
        }
        
        /// <remarks/>
        public void ABGroupDeleteAsync(System.Guid abId, GroupFilter groupFilter, object userState) {
            if ((this.ABGroupDeleteOperationCompleted == null)) {
                this.ABGroupDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABGroupDeleteOperationCompleted);
            }
            this.InvokeAsync("ABGroupDelete", new object[] {
                        abId,
                        groupFilter}, this.ABGroupDeleteOperationCompleted, userState);
        }
        
        private void OnABGroupDeleteOperationCompleted(object arg) {
            if ((this.ABGroupDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABGroupDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupUpdate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABGroupUpdate(System.Guid abId, Group[] groups) {
            this.Invoke("ABGroupUpdate", new object[] {
                        abId,
                        groups});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABGroupUpdate(System.Guid abId, Group[] groups, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABGroupUpdate", new object[] {
                        abId,
                        groups}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABGroupUpdate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABGroupUpdateAsync(System.Guid abId, Group[] groups) {
            this.ABGroupUpdateAsync(abId, groups, null);
        }
        
        /// <remarks/>
        public void ABGroupUpdateAsync(System.Guid abId, Group[] groups, object userState) {
            if ((this.ABGroupUpdateOperationCompleted == null)) {
                this.ABGroupUpdateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABGroupUpdateOperationCompleted);
            }
            this.InvokeAsync("ABGroupUpdate", new object[] {
                        abId,
                        groups}, this.ABGroupUpdateOperationCompleted, userState);
        }
        
        private void OnABGroupUpdateOperationCompleted(object arg) {
            if ((this.ABGroupUpdateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABGroupUpdateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupFind", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Group[] ABGroupFind(System.Guid abId, GroupFilter groupFilter, bool getAnnotations, Annotation[] annotations) {
            object[] results = this.Invoke("ABGroupFind", new object[] {
                        abId,
                        groupFilter,
                        getAnnotations,
                        annotations});
            return ((Group[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABGroupFind(System.Guid abId, GroupFilter groupFilter, bool getAnnotations, Annotation[] annotations, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABGroupFind", new object[] {
                        abId,
                        groupFilter,
                        getAnnotations,
                        annotations}, callback, asyncState);
        }
        
        /// <remarks/>
        public Group[] EndABGroupFind(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Group[])(results[0]));
        }
        
        /// <remarks/>
        public void ABGroupFindAsync(System.Guid abId, GroupFilter groupFilter, bool getAnnotations, Annotation[] annotations) {
            this.ABGroupFindAsync(abId, groupFilter, getAnnotations, annotations, null);
        }
        
        /// <remarks/>
        public void ABGroupFindAsync(System.Guid abId, GroupFilter groupFilter, bool getAnnotations, Annotation[] annotations, object userState) {
            if ((this.ABGroupFindOperationCompleted == null)) {
                this.ABGroupFindOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABGroupFindOperationCompleted);
            }
            this.InvokeAsync("ABGroupFind", new object[] {
                        abId,
                        groupFilter,
                        getAnnotations,
                        annotations}, this.ABGroupFindOperationCompleted, userState);
        }
        
        private void OnABGroupFindOperationCompleted(object arg) {
            if ((this.ABGroupFindCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABGroupFindCompleted(this, new ABGroupFindCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupContactAdd", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid[] ABGroupContactAdd(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, GroupContactAddOptions groupContactAddOptions) {
            object[] results = this.Invoke("ABGroupContactAdd", new object[] {
                        abId,
                        groupFilter,
                        contacts,
                        groupContactAddOptions});
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABGroupContactAdd(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, GroupContactAddOptions groupContactAddOptions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABGroupContactAdd", new object[] {
                        abId,
                        groupFilter,
                        contacts,
                        groupContactAddOptions}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid[] EndABGroupContactAdd(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid[])(results[0]));
        }
        
        /// <remarks/>
        public void ABGroupContactAddAsync(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, GroupContactAddOptions groupContactAddOptions) {
            this.ABGroupContactAddAsync(abId, groupFilter, contacts, groupContactAddOptions, null);
        }
        
        /// <remarks/>
        public void ABGroupContactAddAsync(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, GroupContactAddOptions groupContactAddOptions, object userState) {
            if ((this.ABGroupContactAddOperationCompleted == null)) {
                this.ABGroupContactAddOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABGroupContactAddOperationCompleted);
            }
            this.InvokeAsync("ABGroupContactAdd", new object[] {
                        abId,
                        groupFilter,
                        contacts,
                        groupContactAddOptions}, this.ABGroupContactAddOperationCompleted, userState);
        }
        
        private void OnABGroupContactAddOperationCompleted(object arg) {
            if ((this.ABGroupContactAddCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABGroupContactAddCompleted(this, new ABGroupContactAddCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABGroupContactDelete", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABGroupContactDelete(System.Guid abId, GroupFilter groupFilter, Contact[] contacts) {
            this.Invoke("ABGroupContactDelete", new object[] {
                        abId,
                        groupFilter,
                        contacts});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABGroupContactDelete(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABGroupContactDelete", new object[] {
                        abId,
                        groupFilter,
                        contacts}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABGroupContactDelete(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABGroupContactDeleteAsync(System.Guid abId, GroupFilter groupFilter, Contact[] contacts) {
            this.ABGroupContactDeleteAsync(abId, groupFilter, contacts, null);
        }
        
        /// <remarks/>
        public void ABGroupContactDeleteAsync(System.Guid abId, GroupFilter groupFilter, Contact[] contacts, object userState) {
            if ((this.ABGroupContactDeleteOperationCompleted == null)) {
                this.ABGroupContactDeleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABGroupContactDeleteOperationCompleted);
            }
            this.InvokeAsync("ABGroupContactDelete", new object[] {
                        abId,
                        groupFilter,
                        contacts}, this.ABGroupContactDeleteOperationCompleted, userState);
        }
        
        private void OnABGroupContactDeleteOperationCompleted(object arg) {
            if ((this.ABGroupContactDeleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABGroupContactDeleteCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABAllowListSet", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABAllowListSet(System.Guid abId, string allowList) {
            this.Invoke("ABAllowListSet", new object[] {
                        abId,
                        allowList});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABAllowListSet(System.Guid abId, string allowList, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABAllowListSet", new object[] {
                        abId,
                        allowList}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABAllowListSet(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABAllowListSetAsync(System.Guid abId, string allowList) {
            this.ABAllowListSetAsync(abId, allowList, null);
        }
        
        /// <remarks/>
        public void ABAllowListSetAsync(System.Guid abId, string allowList, object userState) {
            if ((this.ABAllowListSetOperationCompleted == null)) {
                this.ABAllowListSetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABAllowListSetOperationCompleted);
            }
            this.InvokeAsync("ABAllowListSet", new object[] {
                        abId,
                        allowList}, this.ABAllowListSetOperationCompleted, userState);
        }
        
        private void OnABAllowListSetOperationCompleted(object arg) {
            if ((this.ABAllowListSetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABAllowListSetCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABAllowListGet", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ABAllowListGet(System.Guid abId) {
            object[] results = this.Invoke("ABAllowListGet", new object[] {
                        abId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABAllowListGet(System.Guid abId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABAllowListGet", new object[] {
                        abId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndABAllowListGet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ABAllowListGetAsync(System.Guid abId) {
            this.ABAllowListGetAsync(abId, null);
        }
        
        /// <remarks/>
        public void ABAllowListGetAsync(System.Guid abId, object userState) {
            if ((this.ABAllowListGetOperationCompleted == null)) {
                this.ABAllowListGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABAllowListGetOperationCompleted);
            }
            this.InvokeAsync("ABAllowListGet", new object[] {
                        abId}, this.ABAllowListGetOperationCompleted, userState);
        }
        
        private void OnABAllowListGetOperationCompleted(object arg) {
            if ((this.ABAllowListGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABAllowListGetCompleted(this, new ABAllowListGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindAll", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResult ABFindAll(System.Guid abId, ABView abView, bool deltasOnly, System.DateTime lastChange, ABDynamicItemView dynamicItemView, System.DateTime dynamicItemLastChange) {
            object[] results = this.Invoke("ABFindAll", new object[] {
                        abId,
                        abView,
                        deltasOnly,
                        lastChange,
                        dynamicItemView,
                        dynamicItemLastChange});
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABFindAll(System.Guid abId, ABView abView, bool deltasOnly, System.DateTime lastChange, ABDynamicItemView dynamicItemView, System.DateTime dynamicItemLastChange, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABFindAll", new object[] {
                        abId,
                        abView,
                        deltasOnly,
                        lastChange,
                        dynamicItemView,
                        dynamicItemLastChange}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResult EndABFindAll(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public void ABFindAllAsync(System.Guid abId, ABView abView, bool deltasOnly, System.DateTime lastChange, ABDynamicItemView dynamicItemView, System.DateTime dynamicItemLastChange) {
            this.ABFindAllAsync(abId, abView, deltasOnly, lastChange, dynamicItemView, dynamicItemLastChange, null);
        }
        
        /// <remarks/>
        public void ABFindAllAsync(System.Guid abId, ABView abView, bool deltasOnly, System.DateTime lastChange, ABDynamicItemView dynamicItemView, System.DateTime dynamicItemLastChange, object userState) {
            if ((this.ABFindAllOperationCompleted == null)) {
                this.ABFindAllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABFindAllOperationCompleted);
            }
            this.InvokeAsync("ABFindAll", new object[] {
                        abId,
                        abView,
                        deltasOnly,
                        lastChange,
                        dynamicItemView,
                        dynamicItemLastChange}, this.ABFindAllOperationCompleted, userState);
        }
        
        private void OnABFindAllOperationCompleted(object arg) {
            if ((this.ABFindAllCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABFindAllCompleted(this, new ABFindAllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindByContacts", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResult ABFindByContacts(System.Guid abId, ABView abView, System.Guid[] contactIds, ABDynamicItemView dynamicItemView) {
            object[] results = this.Invoke("ABFindByContacts", new object[] {
                        abId,
                        abView,
                        contactIds,
                        dynamicItemView});
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABFindByContacts(System.Guid abId, ABView abView, System.Guid[] contactIds, ABDynamicItemView dynamicItemView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABFindByContacts", new object[] {
                        abId,
                        abView,
                        contactIds,
                        dynamicItemView}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResult EndABFindByContacts(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public void ABFindByContactsAsync(System.Guid abId, ABView abView, System.Guid[] contactIds, ABDynamicItemView dynamicItemView) {
            this.ABFindByContactsAsync(abId, abView, contactIds, dynamicItemView, null);
        }
        
        /// <remarks/>
        public void ABFindByContactsAsync(System.Guid abId, ABView abView, System.Guid[] contactIds, ABDynamicItemView dynamicItemView, object userState) {
            if ((this.ABFindByContactsOperationCompleted == null)) {
                this.ABFindByContactsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABFindByContactsOperationCompleted);
            }
            this.InvokeAsync("ABFindByContacts", new object[] {
                        abId,
                        abView,
                        contactIds,
                        dynamicItemView}, this.ABFindByContactsOperationCompleted, userState);
        }
        
        private void OnABFindByContactsOperationCompleted(object arg) {
            if ((this.ABFindByContactsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABFindByContactsCompleted(this, new ABFindByContactsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindMessengerUsers", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResult ABFindMessengerUsers(System.Guid abId, ABView abView) {
            object[] results = this.Invoke("ABFindMessengerUsers", new object[] {
                        abId,
                        abView});
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABFindMessengerUsers(System.Guid abId, ABView abView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABFindMessengerUsers", new object[] {
                        abId,
                        abView}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResult EndABFindMessengerUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public void ABFindMessengerUsersAsync(System.Guid abId, ABView abView) {
            this.ABFindMessengerUsersAsync(abId, abView, null);
        }
        
        /// <remarks/>
        public void ABFindMessengerUsersAsync(System.Guid abId, ABView abView, object userState) {
            if ((this.ABFindMessengerUsersOperationCompleted == null)) {
                this.ABFindMessengerUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABFindMessengerUsersOperationCompleted);
            }
            this.InvokeAsync("ABFindMessengerUsers", new object[] {
                        abId,
                        abView}, this.ABFindMessengerUsersOperationCompleted, userState);
        }
        
        private void OnABFindMessengerUsersOperationCompleted(object arg) {
            if ((this.ABFindMessengerUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABFindMessengerUsersCompleted(this, new ABFindMessengerUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindByGroups", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResult ABFindByGroups(System.Guid abId, ABView abView, System.Guid[] groupIds) {
            object[] results = this.Invoke("ABFindByGroups", new object[] {
                        abId,
                        abView,
                        groupIds});
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABFindByGroups(System.Guid abId, ABView abView, System.Guid[] groupIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABFindByGroups", new object[] {
                        abId,
                        abView,
                        groupIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResult EndABFindByGroups(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public void ABFindByGroupsAsync(System.Guid abId, ABView abView, System.Guid[] groupIds) {
            this.ABFindByGroupsAsync(abId, abView, groupIds, null);
        }
        
        /// <remarks/>
        public void ABFindByGroupsAsync(System.Guid abId, ABView abView, System.Guid[] groupIds, object userState) {
            if ((this.ABFindByGroupsOperationCompleted == null)) {
                this.ABFindByGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABFindByGroupsOperationCompleted);
            }
            this.InvokeAsync("ABFindByGroups", new object[] {
                        abId,
                        abView,
                        groupIds}, this.ABFindByGroupsOperationCompleted, userState);
        }
        
        private void OnABFindByGroupsOperationCompleted(object arg) {
            if ((this.ABFindByGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABFindByGroupsCompleted(this, new ABFindByGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABFindMeContact", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindResult ABFindMeContact(System.Guid abId, ABView abView) {
            object[] results = this.Invoke("ABFindMeContact", new object[] {
                        abId,
                        abView});
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABFindMeContact(System.Guid abId, ABView abView, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABFindMeContact", new object[] {
                        abId,
                        abView}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindResult EndABFindMeContact(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindResult)(results[0]));
        }
        
        /// <remarks/>
        public void ABFindMeContactAsync(System.Guid abId, ABView abView) {
            this.ABFindMeContactAsync(abId, abView, null);
        }
        
        /// <remarks/>
        public void ABFindMeContactAsync(System.Guid abId, ABView abView, object userState) {
            if ((this.ABFindMeContactOperationCompleted == null)) {
                this.ABFindMeContactOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABFindMeContactOperationCompleted);
            }
            this.InvokeAsync("ABFindMeContact", new object[] {
                        abId,
                        abView}, this.ABFindMeContactOperationCompleted, userState);
        }
        
        private void OnABFindMeContactOperationCompleted(object arg) {
            if ((this.ABFindMeContactCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABFindMeContactCompleted(this, new ABFindMeContactCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddCategory", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Category[] AddCategory(System.Guid abId, string[] name) {
            object[] results = this.Invoke("AddCategory", new object[] {
                        abId,
                        name});
            return ((Category[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCategory(System.Guid abId, string[] name, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddCategory", new object[] {
                        abId,
                        name}, callback, asyncState);
        }
        
        /// <remarks/>
        public Category[] EndAddCategory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Category[])(results[0]));
        }
        
        /// <remarks/>
        public void AddCategoryAsync(System.Guid abId, string[] name) {
            this.AddCategoryAsync(abId, name, null);
        }
        
        /// <remarks/>
        public void AddCategoryAsync(System.Guid abId, string[] name, object userState) {
            if ((this.AddCategoryOperationCompleted == null)) {
                this.AddCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCategoryOperationCompleted);
            }
            this.InvokeAsync("AddCategory", new object[] {
                        abId,
                        name}, this.AddCategoryOperationCompleted, userState);
        }
        
        private void OnAddCategoryOperationCompleted(object arg) {
            if ((this.AddCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCategoryCompleted(this, new AddCategoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeleteCategory", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteCategory(System.Guid abId, Category[] categories) {
            this.Invoke("DeleteCategory", new object[] {
                        abId,
                        categories});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteCategory(System.Guid abId, Category[] categories, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteCategory", new object[] {
                        abId,
                        categories}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteCategory(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteCategoryAsync(System.Guid abId, Category[] categories) {
            this.DeleteCategoryAsync(abId, categories, null);
        }
        
        /// <remarks/>
        public void DeleteCategoryAsync(System.Guid abId, Category[] categories, object userState) {
            if ((this.DeleteCategoryOperationCompleted == null)) {
                this.DeleteCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCategoryOperationCompleted);
            }
            this.InvokeAsync("DeleteCategory", new object[] {
                        abId,
                        categories}, this.DeleteCategoryOperationCompleted, userState);
        }
        
        private void OnDeleteCategoryOperationCompleted(object arg) {
            if ((this.DeleteCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateCategory", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateCategory(System.Guid abId, Category[] categories) {
            this.Invoke("UpdateCategory", new object[] {
                        abId,
                        categories});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateCategory(System.Guid abId, Category[] categories, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateCategory", new object[] {
                        abId,
                        categories}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateCategory(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateCategoryAsync(System.Guid abId, Category[] categories) {
            this.UpdateCategoryAsync(abId, categories, null);
        }
        
        /// <remarks/>
        public void UpdateCategoryAsync(System.Guid abId, Category[] categories, object userState) {
            if ((this.UpdateCategoryOperationCompleted == null)) {
                this.UpdateCategoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateCategoryOperationCompleted);
            }
            this.InvokeAsync("UpdateCategory", new object[] {
                        abId,
                        categories}, this.UpdateCategoryOperationCompleted, userState);
        }
        
        private void OnUpdateCategoryOperationCompleted(object arg) {
            if ((this.UpdateCategoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateCategoryCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddDynamicItem", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddDynamicItem(System.Guid abId, DynamicItem[] dynamicItems) {
            this.Invoke("AddDynamicItem", new object[] {
                        abId,
                        dynamicItems});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddDynamicItem(System.Guid abId, DynamicItem[] dynamicItems, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddDynamicItem", new object[] {
                        abId,
                        dynamicItems}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddDynamicItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddDynamicItemAsync(System.Guid abId, DynamicItem[] dynamicItems) {
            this.AddDynamicItemAsync(abId, dynamicItems, null);
        }
        
        /// <remarks/>
        public void AddDynamicItemAsync(System.Guid abId, DynamicItem[] dynamicItems, object userState) {
            if ((this.AddDynamicItemOperationCompleted == null)) {
                this.AddDynamicItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddDynamicItemOperationCompleted);
            }
            this.InvokeAsync("AddDynamicItem", new object[] {
                        abId,
                        dynamicItems}, this.AddDynamicItemOperationCompleted, userState);
        }
        
        private void OnAddDynamicItemOperationCompleted(object arg) {
            if ((this.AddDynamicItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddDynamicItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateDynamicItem", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateDynamicItem(System.Guid abId, DynamicItem[] dynamicItems) {
            this.Invoke("UpdateDynamicItem", new object[] {
                        abId,
                        dynamicItems});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateDynamicItem(System.Guid abId, DynamicItem[] dynamicItems, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateDynamicItem", new object[] {
                        abId,
                        dynamicItems}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateDynamicItem(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateDynamicItemAsync(System.Guid abId, DynamicItem[] dynamicItems) {
            this.UpdateDynamicItemAsync(abId, dynamicItems, null);
        }
        
        /// <remarks/>
        public void UpdateDynamicItemAsync(System.Guid abId, DynamicItem[] dynamicItems, object userState) {
            if ((this.UpdateDynamicItemOperationCompleted == null)) {
                this.UpdateDynamicItemOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateDynamicItemOperationCompleted);
            }
            this.InvokeAsync("UpdateDynamicItem", new object[] {
                        abId,
                        dynamicItems}, this.UpdateDynamicItemOperationCompleted, userState);
        }
        
        private void OnUpdateDynamicItemOperationCompleted(object arg) {
            if ((this.UpdateDynamicItemCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateDynamicItemCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/ABSetForceFullSyncDate", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ABSetForceFullSyncDate(System.Guid abId) {
            this.Invoke("ABSetForceFullSyncDate", new object[] {
                        abId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginABSetForceFullSyncDate(System.Guid abId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ABSetForceFullSyncDate", new object[] {
                        abId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndABSetForceFullSyncDate(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ABSetForceFullSyncDateAsync(System.Guid abId) {
            this.ABSetForceFullSyncDateAsync(abId, null);
        }
        
        /// <remarks/>
        public void ABSetForceFullSyncDateAsync(System.Guid abId, object userState) {
            if ((this.ABSetForceFullSyncDateOperationCompleted == null)) {
                this.ABSetForceFullSyncDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnABSetForceFullSyncDateOperationCompleted);
            }
            this.InvokeAsync("ABSetForceFullSyncDate", new object[] {
                        abId}, this.ABSetForceFullSyncDateOperationCompleted, userState);
        }
        
        private void OnABSetForceFullSyncDateOperationCompleted(object arg) {
            if ((this.ABSetForceFullSyncDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ABSetForceFullSyncDateCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABAuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        private bool managedGroupRequestField;
        
        private IdentificationHeader callerIdentificationField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public bool ManagedGroupRequest {
            get {
                return this.managedGroupRequestField;
            }
            set {
                this.managedGroupRequestField = value;
            }
        }
        
        /// <remarks/>
        public IdentificationHeader CallerIdentification {
            get {
                return this.callerIdentificationField;
            }
            set {
                this.callerIdentificationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class IdentificationHeader {
        
        private long callerPassportIdField;
        
        private string callerPassportNameField;
        
        /// <remarks/>
        public long CallerPassportId {
            get {
                return this.callerPassportIdField;
            }
            set {
                this.callerPassportIdField = value;
            }
        }
        
        /// <remarks/>
        public string CallerPassportName {
            get {
                return this.callerPassportNameField;
            }
            set {
                this.callerPassportNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceInfo {
        
        private Annotation[] annotationsField;
        
        private ServiceHandle handleField;
        
        private string displayNameField;
        
        private bool inverseRequiredField;
        
        private string urlField;
        
        private string rSSUrlField;
        
        private string authorizationCriteriaField;
        
        private bool isBotField;
        
        /// <remarks/>
        public Annotation[] Annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle Handle {
            get {
                return this.handleField;
            }
            set {
                this.handleField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool InverseRequired {
            get {
                return this.inverseRequiredField;
            }
            set {
                this.inverseRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public string RSSUrl {
            get {
                return this.rSSUrlField;
            }
            set {
                this.rSSUrlField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCriteria {
            get {
                return this.authorizationCriteriaField;
            }
            set {
                this.authorizationCriteriaField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBot {
            get {
                return this.isBotField;
            }
            set {
                this.isBotField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Annotation {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceHandle {
        
        private short idField;
        
        private ServiceType typeField;
        
        private string foreignIdField;
        
        /// <remarks/>
        public short Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ServiceType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string ForeignId {
            get {
                return this.foreignIdField;
            }
            set {
                this.foreignIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ServiceType {
        
        /// <remarks/>
        Namespace,
        
        /// <remarks/>
        Calendar,
        
        /// <remarks/>
        Folder,
        
        /// <remarks/>
        ContactInfo,
        
        /// <remarks/>
        AddressBook,
        
        /// <remarks/>
        Favorites,
        
        /// <remarks/>
        Messenger,
        
        /// <remarks/>
        Space,
        
        /// <remarks/>
        MessageContainer,
        
        /// <remarks/>
        PhotoAlbum,
        
        /// <remarks/>
        List,
        
        /// <remarks/>
        ABCHInternal,
        
        /// <remarks/>
        Invitation,
        
        /// <remarks/>
        SocialNetwork,
        
        /// <remarks/>
        Profile,
        
        /// <remarks/>
        EmailNotifications,
        
        /// <remarks/>
        BlindEmail,
        
        /// <remarks/>
        Classifieds,
        
        /// <remarks/>
        CommunityQuestionAnswer,
        
        /// <remarks/>
        OfficeLiveWebNotification,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NamespaceHandle {
        
        private System.Guid idField;
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private long cIDField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhoneMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassportMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroupMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GuidMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EveryoneMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RoleMember))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public abstract partial class Member {
        
        private int membershipIdField;
        
        private MemberType typeField;
        
        private NamespaceHandle locationField;
        
        private string displayNameField;
        
        private MemberState stateField;
        
        private Annotation[] annotationsField;
        
        private bool deletedField;
        
        private System.DateTime lastChangedField;
        
        private MemberPropertyTypes changesField;
        
        /// <remarks/>
        public int MembershipId {
            get {
                return this.membershipIdField;
            }
            set {
                this.membershipIdField = value;
            }
        }
        
        /// <remarks/>
        public MemberType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public NamespaceHandle Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public MemberState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public Annotation[] Annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
        
        /// <remarks/>
        public MemberPropertyTypes Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberType {
        
        /// <remarks/>
        Passport,
        
        /// <remarks/>
        Everyone,
        
        /// <remarks/>
        Phone,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        Group,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Role,
        
        /// <remarks/>
        Service,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberState {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Removed,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberPropertyTypes {
        
        /// <remarks/>
        State = 1,
        
        /// <remarks/>
        Annotations = 2,
        
        /// <remarks/>
        DisplayName = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PhoneMember : Member {
        
        private string phoneNumberField;
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class EmailMember : Member {
        
        private string emailField;
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceMember : Member {
        
        private ServiceHandle serviceField;
        
        /// <remarks/>
        public ServiceHandle Service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PassportMember : Member {
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private long passportIdField;
        
        private long cIDField;
        
        private PassportMemberPropertyTypes passportChangesField;
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public long PassportId {
            get {
                return this.passportIdField;
            }
            set {
                this.passportIdField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public PassportMemberPropertyTypes PassportChanges {
            get {
                return this.passportChangesField;
            }
            set {
                this.passportChangesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum PassportMemberPropertyTypes {
        
        /// <remarks/>
        IsPassportNameHidden = 1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupMember : Member {
        
        private System.Guid idField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GuidMember : Member {
        
        private System.Guid idField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class EveryoneMember : Member {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class RoleMember : Member {
        
        private RoleId idField;
        
        private ServiceHandle definingServiceField;
        
        private int maxRoleRecursionDepthField;
        
        private int maxDegreesSeparationField;
        
        /// <remarks/>
        public RoleId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle DefiningService {
            get {
                return this.definingServiceField;
            }
            set {
                this.definingServiceField = value;
            }
        }
        
        /// <remarks/>
        public int MaxRoleRecursionDepth {
            get {
                return this.maxRoleRecursionDepthField;
            }
            set {
                this.maxRoleRecursionDepthField = value;
            }
        }
        
        /// <remarks/>
        public int MaxDegreesSeparation {
            get {
                return this.maxDegreesSeparationField;
            }
            set {
                this.maxDegreesSeparationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum RoleId {
        
        /// <remarks/>
        Admin,
        
        /// <remarks/>
        AssistantAdmin,
        
        /// <remarks/>
        Member,
        
        /// <remarks/>
        Guest,
        
        /// <remarks/>
        Banned,
        
        /// <remarks/>
        Delegate,
        
        /// <remarks/>
        Allow,
        
        /// <remarks/>
        Block,
        
        /// <remarks/>
        Reverse,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        CalFreeBusy,
        
        /// <remarks/>
        Contributor,
        
        /// <remarks/>
        NamespaceQuota,
        
        /// <remarks/>
        TwoWayRelationship,
        
        /// <remarks/>
        OneWayRelationship,
        
        /// <remarks/>
        ProfileCareer,
        
        /// <remarks/>
        ProfileDating,
        
        /// <remarks/>
        ProfileEducation,
        
        /// <remarks/>
        ProfileGaming,
        
        /// <remarks/>
        ProfileGeneral,
        
        /// <remarks/>
        ProfilePersonalContact,
        
        /// <remarks/>
        ProfileProfessionalContact,
        
        /// <remarks/>
        ProfileSocial,
        
        /// <remarks/>
        ProfileExpression,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Membership {
        
        private RoleId memberRoleField;
        
        private Member[] membersField;
        
        /// <remarks/>
        public RoleId MemberRole {
            get {
                return this.memberRoleField;
            }
            set {
                this.memberRoleField = value;
            }
        }
        
        /// <remarks/>
        public Member[] Members {
            get {
                return this.membersField;
            }
            set {
                this.membersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Service {
        
        private Membership[] membershipsField;
        
        private ServiceInfo infoField;
        
        private ServicePropertyType changesField;
        
        private System.DateTime lastChangeField;
        
        private bool deletedField;
        
        /// <remarks/>
        public Membership[] Memberships {
            get {
                return this.membershipsField;
            }
            set {
                this.membershipsField = value;
            }
        }
        
        /// <remarks/>
        public ServiceInfo Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public ServicePropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ServicePropertyType {
        
        /// <remarks/>
        DisplayName = 1,
        
        /// <remarks/>
        Url = 2,
        
        /// <remarks/>
        Annotation = 4,
        
        /// <remarks/>
        RSSUrl = 8,
        
        /// <remarks/>
        IsBot = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NotificationData {
        
        private Service storeServiceField;
        
        private StoreStatusTypes statusField;
        
        private bool statusFieldSpecified;
        
        private System.DateTime lastChangedField;
        
        private bool lastChangedFieldSpecified;
        
        private System.DateTime lastViewedField;
        
        private bool lastViewedFieldSpecified;
        
        private bool gleamField;
        
        private bool gleamFieldSpecified;
        
        private short instanceIdField;
        
        /// <remarks/>
        public Service StoreService {
            get {
                return this.storeServiceField;
            }
            set {
                this.storeServiceField = value;
            }
        }
        
        /// <remarks/>
        public StoreStatusTypes Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastChangedSpecified {
            get {
                return this.lastChangedFieldSpecified;
            }
            set {
                this.lastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastViewed {
            get {
                return this.lastViewedField;
            }
            set {
                this.lastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastViewedSpecified {
            get {
                return this.lastViewedFieldSpecified;
            }
            set {
                this.lastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Gleam {
            get {
                return this.gleamField;
            }
            set {
                this.gleamField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GleamSpecified {
            get {
                return this.gleamFieldSpecified;
            }
            set {
                this.gleamFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public short InstanceId {
            get {
                return this.instanceIdField;
            }
            set {
                this.instanceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum StoreStatusTypes {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassportDynamicItem))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public abstract partial class DynamicItem {
        
        private DynamicItemType typeField;
        
        private bool deletedField;
        
        private System.DateTime lastChangedField;
        
        /// <remarks/>
        public DynamicItemType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum DynamicItemType {
        
        /// <remarks/>
        Passport,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PassportDynamicItem : DynamicItem {
        
        private string passportNameField;
        
        private long passportIdField;
        
        private long cIDField;
        
        private SpaceStatusType spaceStatusField;
        
        private System.DateTime spaceLastChangedField;
        
        private bool spaceLastChangedFieldSpecified;
        
        private System.DateTime spaceLastViewedField;
        
        private bool spaceLastViewedFieldSpecified;
        
        private bool spaceGleamField;
        
        private ProfileStatusType profileStatusField;
        
        private System.DateTime profileLastChangedField;
        
        private bool profileLastChangedFieldSpecified;
        
        private System.DateTime profileLastViewedField;
        
        private bool profileLastViewedFieldSpecified;
        
        private bool profileGleamField;
        
        private System.DateTime profileLastComparedField;
        
        private bool profileLastComparedFieldSpecified;
        
        private ContactProfileStatusType contactProfileStatusField;
        
        private System.DateTime contactProfileLastChangedField;
        
        private bool contactProfileLastChangedFieldSpecified;
        
        private System.DateTime contactProfileLastViewedField;
        
        private bool contactProfileLastViewedFieldSpecified;
        
        private System.DateTime liveContactLastChangedField;
        
        private bool liveContactLastChangedFieldSpecified;
        
        private System.DateTime contactLastComparedField;
        
        private bool contactLastComparedFieldSpecified;
        
        private NotificationData[] notificationsField;
        
        private PassportDynamicItemPropertyType changesField;
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public long PassportId {
            get {
                return this.passportIdField;
            }
            set {
                this.passportIdField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public SpaceStatusType SpaceStatus {
            get {
                return this.spaceStatusField;
            }
            set {
                this.spaceStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SpaceLastChanged {
            get {
                return this.spaceLastChangedField;
            }
            set {
                this.spaceLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLastChangedSpecified {
            get {
                return this.spaceLastChangedFieldSpecified;
            }
            set {
                this.spaceLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime SpaceLastViewed {
            get {
                return this.spaceLastViewedField;
            }
            set {
                this.spaceLastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool SpaceLastViewedSpecified {
            get {
                return this.spaceLastViewedFieldSpecified;
            }
            set {
                this.spaceLastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool SpaceGleam {
            get {
                return this.spaceGleamField;
            }
            set {
                this.spaceGleamField = value;
            }
        }
        
        /// <remarks/>
        public ProfileStatusType ProfileStatus {
            get {
                return this.profileStatusField;
            }
            set {
                this.profileStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ProfileLastChanged {
            get {
                return this.profileLastChangedField;
            }
            set {
                this.profileLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProfileLastChangedSpecified {
            get {
                return this.profileLastChangedFieldSpecified;
            }
            set {
                this.profileLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ProfileLastViewed {
            get {
                return this.profileLastViewedField;
            }
            set {
                this.profileLastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProfileLastViewedSpecified {
            get {
                return this.profileLastViewedFieldSpecified;
            }
            set {
                this.profileLastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool ProfileGleam {
            get {
                return this.profileGleamField;
            }
            set {
                this.profileGleamField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ProfileLastCompared {
            get {
                return this.profileLastComparedField;
            }
            set {
                this.profileLastComparedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ProfileLastComparedSpecified {
            get {
                return this.profileLastComparedFieldSpecified;
            }
            set {
                this.profileLastComparedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ContactProfileStatusType ContactProfileStatus {
            get {
                return this.contactProfileStatusField;
            }
            set {
                this.contactProfileStatusField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ContactProfileLastChanged {
            get {
                return this.contactProfileLastChangedField;
            }
            set {
                this.contactProfileLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactProfileLastChangedSpecified {
            get {
                return this.contactProfileLastChangedFieldSpecified;
            }
            set {
                this.contactProfileLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ContactProfileLastViewed {
            get {
                return this.contactProfileLastViewedField;
            }
            set {
                this.contactProfileLastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactProfileLastViewedSpecified {
            get {
                return this.contactProfileLastViewedFieldSpecified;
            }
            set {
                this.contactProfileLastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LiveContactLastChanged {
            get {
                return this.liveContactLastChangedField;
            }
            set {
                this.liveContactLastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LiveContactLastChangedSpecified {
            get {
                return this.liveContactLastChangedFieldSpecified;
            }
            set {
                this.liveContactLastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ContactLastCompared {
            get {
                return this.contactLastComparedField;
            }
            set {
                this.contactLastComparedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ContactLastComparedSpecified {
            get {
                return this.contactLastComparedFieldSpecified;
            }
            set {
                this.contactLastComparedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public NotificationData[] Notifications {
            get {
                return this.notificationsField;
            }
            set {
                this.notificationsField = value;
            }
        }
        
        /// <remarks/>
        public PassportDynamicItemPropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum SpaceStatusType {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ProfileStatusType {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactProfileStatusType {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum PassportDynamicItemPropertyType {
        
        /// <remarks/>
        SpaceStatus = 1,
        
        /// <remarks/>
        SpaceLastChanged = 2,
        
        /// <remarks/>
        SpaceLastViewed = 4,
        
        /// <remarks/>
        SpaceGleam = 8,
        
        /// <remarks/>
        ProfileStatus = 16,
        
        /// <remarks/>
        ProfileLastChanged = 32,
        
        /// <remarks/>
        ProfileLastViewed = 64,
        
        /// <remarks/>
        ProfileGleam = 128,
        
        /// <remarks/>
        ProfileLastCompared = 256,
        
        /// <remarks/>
        ContactProfileStatus = 512,
        
        /// <remarks/>
        ContactProfileLastChanged = 1024,
        
        /// <remarks/>
        ContactProfileLastViewed = 2048,
        
        /// <remarks/>
        LiveContactLastChanged = 4096,
        
        /// <remarks/>
        ContactLastCompared = 8192,
        
        /// <remarks/>
        Notifications = 16384,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class FindResult {
        
        private Group[] groupsField;
        
        private Contact[] contactsField;
        
        private Category[] categoriesField;
        
        private DynamicItem[] dynamicItemsField;
        
        private AB abField;
        
        /// <remarks/>
        public Group[] groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public Contact[] contacts {
            get {
                return this.contactsField;
            }
            set {
                this.contactsField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public DynamicItem[] DynamicItems {
            get {
                return this.dynamicItemsField;
            }
            set {
                this.dynamicItemsField = value;
            }
        }
        
        /// <remarks/>
        public AB ab {
            get {
                return this.abField;
            }
            set {
                this.abField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Group {
        
        private System.Guid groupIdField;
        
        private GroupInfo groupInfoField;
        
        private GroupPropertyType propertiesChangedField;
        
        private bool fDeletedField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public System.Guid groupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        public GroupInfo groupInfo {
            get {
                return this.groupInfoField;
            }
            set {
                this.groupInfoField = value;
            }
        }
        
        /// <remarks/>
        public GroupPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
        
        /// <remarks/>
        public bool fDeleted {
            get {
                return this.fDeletedField;
            }
            set {
                this.fDeletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupInfo {
        
        private Annotation[] annotationsField;
        
        private System.Guid groupTypeField;
        
        private string nameField;
        
        private string clientErrorDataField;
        
        private bool isNotMobileVisibleField;
        
        private Category[] categoriesField;
        
        private bool isPrivateField;
        
        /// <remarks/>
        public Annotation[] annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid groupType {
            get {
                return this.groupTypeField;
            }
            set {
                this.groupTypeField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string clientErrorData {
            get {
                return this.clientErrorDataField;
            }
            set {
                this.clientErrorDataField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNotMobileVisible {
            get {
                return this.isNotMobileVisibleField;
            }
            set {
                this.isNotMobileVisibleField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                this.isPrivateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Category {
        
        private short idField;
        
        private string nameField;
        
        private CategoryPropertyType changesField;
        
        private bool changesFieldSpecified;
        
        private bool deletedField;
        
        private bool deletedFieldSpecified;
        
        private System.DateTime lastChangeField;
        
        private bool lastChangeFieldSpecified;
        
        private string clientErrorDataField;
        
        /// <remarks/>
        public short Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public CategoryPropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ChangesSpecified {
            get {
                return this.changesFieldSpecified;
            }
            set {
                this.changesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DeletedSpecified {
            get {
                return this.deletedFieldSpecified;
            }
            set {
                this.deletedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastChangeSpecified {
            get {
                return this.lastChangeFieldSpecified;
            }
            set {
                this.lastChangeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string ClientErrorData {
            get {
                return this.clientErrorDataField;
            }
            set {
                this.clientErrorDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum CategoryPropertyType {
        
        /// <remarks/>
        Name = 1,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum GroupPropertyType {
        
        /// <remarks/>
        GroupName = 1,
        
        /// <remarks/>
        Annotation = 2,
        
        /// <remarks/>
        IsNotMobileVisible = 4,
        
        /// <remarks/>
        Categories = 8,
        
        /// <remarks/>
        IsPrivate = 16,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Contact {
        
        private System.Guid contactIdField;
        
        private ContactInfo contactInfoField;
        
        private ContactPropertyType propertiesChangedField;
        
        private bool fDeletedField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public System.Guid contactId {
            get {
                return this.contactIdField;
            }
            set {
                this.contactIdField = value;
            }
        }
        
        /// <remarks/>
        public ContactInfo contactInfo {
            get {
                return this.contactInfoField;
            }
            set {
                this.contactInfoField = value;
            }
        }
        
        /// <remarks/>
        public ContactPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
        
        /// <remarks/>
        public bool fDeleted {
            get {
                return this.fDeletedField;
            }
            set {
                this.fDeletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactInfo {
        
        private ContactEmail[] emailsField;
        
        private ContactPhone[] phonesField;
        
        private ContactLocation[] locationsField;
        
        private ContactWebSite[] webSitesField;
        
        private Annotation[] annotationsField;
        
        private System.Guid[] groupIdsField;
        
        private System.Guid[] groupIdsDeletedField;
        
        private string clientErrorDataField;
        
        private ContactType contactTypeField;
        
        private string quickNameField;
        
        private string firstNameField;
        
        private string middleNameField;
        
        private string lastNameField;
        
        private string suffixField;
        
        private string nameTitleField;
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private string displayNameField;
        
        private long puidField;
        
        private long cIDField;
        
        private string commentField;
        
        private bool isNotMobileVisibleField;
        
        private bool isMobileIMEnabledField;
        
        private bool isMessengerUserField;
        
        private bool isFavoriteField;
        
        private bool isSmtpField;
        
        private bool hasSpaceField;
        
        private SpotType spotWatchStateField;
        
        private System.DateTime birthdateField;
        
        private ContactEmailType primaryEmailTypeField;
        
        private ContactLocationType primaryLocationField;
        
        private ContactPhoneType primaryPhoneField;
        
        private Category[] categoriesField;
        
        private string fileAsField;
        
        private bool isPrivateField;
        
        private string anniversaryField;
        
        private GenderType genderField;
        
        private TimeZoneRange timeZoneField;
        
        /// <remarks/>
        public ContactEmail[] emails {
            get {
                return this.emailsField;
            }
            set {
                this.emailsField = value;
            }
        }
        
        /// <remarks/>
        public ContactPhone[] phones {
            get {
                return this.phonesField;
            }
            set {
                this.phonesField = value;
            }
        }
        
        /// <remarks/>
        public ContactLocation[] locations {
            get {
                return this.locationsField;
            }
            set {
                this.locationsField = value;
            }
        }
        
        /// <remarks/>
        public ContactWebSite[] webSites {
            get {
                return this.webSitesField;
            }
            set {
                this.webSitesField = value;
            }
        }
        
        /// <remarks/>
        public Annotation[] annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] groupIds {
            get {
                return this.groupIdsField;
            }
            set {
                this.groupIdsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] groupIdsDeleted {
            get {
                return this.groupIdsDeletedField;
            }
            set {
                this.groupIdsDeletedField = value;
            }
        }
        
        /// <remarks/>
        public string clientErrorData {
            get {
                return this.clientErrorDataField;
            }
            set {
                this.clientErrorDataField = value;
            }
        }
        
        /// <remarks/>
        public ContactType contactType {
            get {
                return this.contactTypeField;
            }
            set {
                this.contactTypeField = value;
            }
        }
        
        /// <remarks/>
        public string quickName {
            get {
                return this.quickNameField;
            }
            set {
                this.quickNameField = value;
            }
        }
        
        /// <remarks/>
        public string firstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleName {
            get {
                return this.middleNameField;
            }
            set {
                this.middleNameField = value;
            }
        }
        
        /// <remarks/>
        public string lastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string Suffix {
            get {
                return this.suffixField;
            }
            set {
                this.suffixField = value;
            }
        }
        
        /// <remarks/>
        public string NameTitle {
            get {
                return this.nameTitleField;
            }
            set {
                this.nameTitleField = value;
            }
        }
        
        /// <remarks/>
        public string passportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public string displayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public long puid {
            get {
                return this.puidField;
            }
            set {
                this.puidField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public string comment {
            get {
                return this.commentField;
            }
            set {
                this.commentField = value;
            }
        }
        
        /// <remarks/>
        public bool IsNotMobileVisible {
            get {
                return this.isNotMobileVisibleField;
            }
            set {
                this.isNotMobileVisibleField = value;
            }
        }
        
        /// <remarks/>
        public bool isMobileIMEnabled {
            get {
                return this.isMobileIMEnabledField;
            }
            set {
                this.isMobileIMEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool isMessengerUser {
            get {
                return this.isMessengerUserField;
            }
            set {
                this.isMessengerUserField = value;
            }
        }
        
        /// <remarks/>
        public bool isFavorite {
            get {
                return this.isFavoriteField;
            }
            set {
                this.isFavoriteField = value;
            }
        }
        
        /// <remarks/>
        public bool isSmtp {
            get {
                return this.isSmtpField;
            }
            set {
                this.isSmtpField = value;
            }
        }
        
        /// <remarks/>
        public bool hasSpace {
            get {
                return this.hasSpaceField;
            }
            set {
                this.hasSpaceField = value;
            }
        }
        
        /// <remarks/>
        public SpotType spotWatchState {
            get {
                return this.spotWatchStateField;
            }
            set {
                this.spotWatchStateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime birthdate {
            get {
                return this.birthdateField;
            }
            set {
                this.birthdateField = value;
            }
        }
        
        /// <remarks/>
        public ContactEmailType primaryEmailType {
            get {
                return this.primaryEmailTypeField;
            }
            set {
                this.primaryEmailTypeField = value;
            }
        }
        
        /// <remarks/>
        public ContactLocationType PrimaryLocation {
            get {
                return this.primaryLocationField;
            }
            set {
                this.primaryLocationField = value;
            }
        }
        
        /// <remarks/>
        public ContactPhoneType PrimaryPhone {
            get {
                return this.primaryPhoneField;
            }
            set {
                this.primaryPhoneField = value;
            }
        }
        
        /// <remarks/>
        public Category[] Categories {
            get {
                return this.categoriesField;
            }
            set {
                this.categoriesField = value;
            }
        }
        
        /// <remarks/>
        public string FileAs {
            get {
                return this.fileAsField;
            }
            set {
                this.fileAsField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPrivate {
            get {
                return this.isPrivateField;
            }
            set {
                this.isPrivateField = value;
            }
        }
        
        /// <remarks/>
        public string Anniversary {
            get {
                return this.anniversaryField;
            }
            set {
                this.anniversaryField = value;
            }
        }
        
        /// <remarks/>
        public GenderType Gender {
            get {
                return this.genderField;
            }
            set {
                this.genderField = value;
            }
        }
        
        /// <remarks/>
        public TimeZoneRange TimeZone {
            get {
                return this.timeZoneField;
            }
            set {
                this.timeZoneField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactEmail {
        
        private ContactEmailType contactEmailTypeField;
        
        private string emailField;
        
        private bool isMessengerEnabledField;
        
        private ContactEmailPropertyType propertiesChangedField;
        
        /// <remarks/>
        public ContactEmailType contactEmailType {
            get {
                return this.contactEmailTypeField;
            }
            set {
                this.contactEmailTypeField = value;
            }
        }
        
        /// <remarks/>
        public string email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
        
        /// <remarks/>
        public bool isMessengerEnabled {
            get {
                return this.isMessengerEnabledField;
            }
            set {
                this.isMessengerEnabledField = value;
            }
        }
        
        /// <remarks/>
        public ContactEmailPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactEmailType {
        
        /// <remarks/>
        ContactEmailPersonal,
        
        /// <remarks/>
        ContactEmailBusiness,
        
        /// <remarks/>
        ContactEmailOther,
        
        /// <remarks/>
        ContactEmailMessenger,
        
        /// <remarks/>
        Messenger2,
        
        /// <remarks/>
        Messenger3,
        
        /// <remarks/>
        Messenger4,
        
        /// <remarks/>
        Passport,
        
        /// <remarks/>
        Messenger5,
        
        /// <remarks/>
        Messenger6,
        
        /// <remarks/>
        Messenger7,
        
        /// <remarks/>
        Messenger8,
        
        /// <remarks/>
        Messenger9,
        
        /// <remarks/>
        Messenger10,
        
        /// <remarks/>
        Messenger11,
        
        /// <remarks/>
        Messenger12,
        
        /// <remarks/>
        Messenger13,
        
        /// <remarks/>
        Messenger14,
        
        /// <remarks/>
        Messenger15,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactEmailPropertyType {
        
        /// <remarks/>
        Email = 1,
        
        /// <remarks/>
        IsMessengerEnabled = 2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactPhone {
        
        private ContactPhoneType contactPhoneTypeField;
        
        private string numberField;
        
        private bool isMessengerEnabledField;
        
        private string speedDialField;
        
        private ContactPhonePropertyType propertiesChangedField;
        
        /// <remarks/>
        public ContactPhoneType contactPhoneType {
            get {
                return this.contactPhoneTypeField;
            }
            set {
                this.contactPhoneTypeField = value;
            }
        }
        
        /// <remarks/>
        public string number {
            get {
                return this.numberField;
            }
            set {
                this.numberField = value;
            }
        }
        
        /// <remarks/>
        public bool isMessengerEnabled {
            get {
                return this.isMessengerEnabledField;
            }
            set {
                this.isMessengerEnabledField = value;
            }
        }
        
        /// <remarks/>
        public string SpeedDial {
            get {
                return this.speedDialField;
            }
            set {
                this.speedDialField = value;
            }
        }
        
        /// <remarks/>
        public ContactPhonePropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactPhoneType {
        
        /// <remarks/>
        ContactPhonePersonal,
        
        /// <remarks/>
        ContactPhoneBusiness,
        
        /// <remarks/>
        ContactPhoneMobile,
        
        /// <remarks/>
        ContactPhonePager,
        
        /// <remarks/>
        ContactPhoneFax,
        
        /// <remarks/>
        ContactPhoneOther,
        
        /// <remarks/>
        Personal2,
        
        /// <remarks/>
        Business2,
        
        /// <remarks/>
        BusinessFax,
        
        /// <remarks/>
        Company,
        
        /// <remarks/>
        Assistant,
        
        /// <remarks/>
        Callback,
        
        /// <remarks/>
        Car,
        
        /// <remarks/>
        ISDN,
        
        /// <remarks/>
        OtherFax,
        
        /// <remarks/>
        Primary,
        
        /// <remarks/>
        Radio,
        
        /// <remarks/>
        Telex,
        
        /// <remarks/>
        TTY,
        
        /// <remarks/>
        MSN,
        
        /// <remarks/>
        IP,
        
        /// <remarks/>
        BusinessMobile,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactPhonePropertyType {
        
        /// <remarks/>
        Number = 1,
        
        /// <remarks/>
        IsMessengerEnabled = 2,
        
        /// <remarks/>
        SpeedDial = 4,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactLocation {
        
        private ContactLocationType contactLocationTypeField;
        
        private string nameField;
        
        private string streetField;
        
        private string cityField;
        
        private string stateField;
        
        private string countryField;
        
        private string postalCodeField;
        
        private string officeField;
        
        private string departmentField;
        
        private double latitudeField;
        
        private bool latitudeFieldSpecified;
        
        private double longitudeField;
        
        private bool longitudeFieldSpecified;
        
        private ContactLocationProperty changesField;
        
        /// <remarks/>
        public ContactLocationType contactLocationType {
            get {
                return this.contactLocationTypeField;
            }
            set {
                this.contactLocationTypeField = value;
            }
        }
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string street {
            get {
                return this.streetField;
            }
            set {
                this.streetField = value;
            }
        }
        
        /// <remarks/>
        public string city {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string state {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string country {
            get {
                return this.countryField;
            }
            set {
                this.countryField = value;
            }
        }
        
        /// <remarks/>
        public string postalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string Office {
            get {
                return this.officeField;
            }
            set {
                this.officeField = value;
            }
        }
        
        /// <remarks/>
        public string Department {
            get {
                return this.departmentField;
            }
            set {
                this.departmentField = value;
            }
        }
        
        /// <remarks/>
        public double Latitude {
            get {
                return this.latitudeField;
            }
            set {
                this.latitudeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LatitudeSpecified {
            get {
                return this.latitudeFieldSpecified;
            }
            set {
                this.latitudeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public double Longitude {
            get {
                return this.longitudeField;
            }
            set {
                this.longitudeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LongitudeSpecified {
            get {
                return this.longitudeFieldSpecified;
            }
            set {
                this.longitudeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public ContactLocationProperty Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactLocationType {
        
        /// <remarks/>
        ContactLocationPersonal,
        
        /// <remarks/>
        ContactLocationBusiness,
        
        /// <remarks/>
        Other,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactLocationProperty {
        
        /// <remarks/>
        Name = 1,
        
        /// <remarks/>
        Street = 2,
        
        /// <remarks/>
        City = 4,
        
        /// <remarks/>
        State = 8,
        
        /// <remarks/>
        Country = 16,
        
        /// <remarks/>
        PostalCode = 32,
        
        /// <remarks/>
        Office = 64,
        
        /// <remarks/>
        Department = 128,
        
        /// <remarks/>
        Latitude = 256,
        
        /// <remarks/>
        Longitude = 512,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactWebSite {
        
        private ContactWebSiteType contactWebSiteTypeField;
        
        private string webURLField;
        
        /// <remarks/>
        public ContactWebSiteType contactWebSiteType {
            get {
                return this.contactWebSiteTypeField;
            }
            set {
                this.contactWebSiteTypeField = value;
            }
        }
        
        /// <remarks/>
        public string webURL {
            get {
                return this.webURLField;
            }
            set {
                this.webURLField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactWebSiteType {
        
        /// <remarks/>
        ContactWebSitePersonal,
        
        /// <remarks/>
        ContactWebSiteBusiness,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactType {
        
        /// <remarks/>
        Regular,
        
        /// <remarks/>
        Me,
        
        /// <remarks/>
        Live,
        
        /// <remarks/>
        LiveDropped,
        
        /// <remarks/>
        LivePending,
        
        /// <remarks/>
        LiveRejected,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum SpotType {
        
        /// <remarks/>
        NoDevice,
        
        /// <remarks/>
        NoMessaging,
        
        /// <remarks/>
        MessagingEnabled,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum GenderType {
        
        /// <remarks/>
        Unspecified,
        
        /// <remarks/>
        Female,
        
        /// <remarks/>
        Male,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum TimeZoneRange {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        GmtMinus12h,
        
        /// <remarks/>
        GmtMinus11h,
        
        /// <remarks/>
        GmtMinus10h,
        
        /// <remarks/>
        GmtMinus9h,
        
        /// <remarks/>
        GmtMinus8h,
        
        /// <remarks/>
        GmtMinus7h,
        
        /// <remarks/>
        GmtMinus6h,
        
        /// <remarks/>
        GmtMinus5h,
        
        /// <remarks/>
        GmtMinus4h,
        
        /// <remarks/>
        GmtMinus3h30,
        
        /// <remarks/>
        GmtMinus3h,
        
        /// <remarks/>
        GmtMinus2h,
        
        /// <remarks/>
        GmtMinus1h,
        
        /// <remarks/>
        Gmt,
        
        /// <remarks/>
        GmtPlus1h,
        
        /// <remarks/>
        GmtPlus2h,
        
        /// <remarks/>
        GmtPlus3h,
        
        /// <remarks/>
        GmtPlus3h30,
        
        /// <remarks/>
        GmtPlus4h,
        
        /// <remarks/>
        GmtPlus4h30,
        
        /// <remarks/>
        GmtPlus5h,
        
        /// <remarks/>
        GmtPlus5h30,
        
        /// <remarks/>
        GmtPlus5h45,
        
        /// <remarks/>
        GmtPlus6h,
        
        /// <remarks/>
        GmtPlus6h30,
        
        /// <remarks/>
        GmtPlus7h,
        
        /// <remarks/>
        GmtPlus8h,
        
        /// <remarks/>
        GmtPlus9h,
        
        /// <remarks/>
        GmtPlus9h30,
        
        /// <remarks/>
        GmtPlus10h,
        
        /// <remarks/>
        GmtPlus11h,
        
        /// <remarks/>
        GmtPlus12h,
        
        /// <remarks/>
        GmtPlus13h,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactPropertyType : long {
        
        /// <remarks/>
        ContactPrimaryEmailType = 1,
        
        /// <remarks/>
        ContactFirstName = 2,
        
        /// <remarks/>
        ContactLastName = 4,
        
        /// <remarks/>
        ContactQuickName = 8,
        
        /// <remarks/>
        ContactBirthDate = 16,
        
        /// <remarks/>
        ContactEmail = 32,
        
        /// <remarks/>
        ContactPhone = 64,
        
        /// <remarks/>
        ContactLocation = 128,
        
        /// <remarks/>
        ContactWebSite = 256,
        
        /// <remarks/>
        Annotation = 512,
        
        /// <remarks/>
        Passport = 1024,
        
        /// <remarks/>
        Comment = 2048,
        
        /// <remarks/>
        IsNotMobileVisible = 4096,
        
        /// <remarks/>
        IsMobileIMEnabled = 8192,
        
        /// <remarks/>
        IsMessengerUser = 16384,
        
        /// <remarks/>
        IsFavorite = 32768,
        
        /// <remarks/>
        IsSmtp = 65536,
        
        /// <remarks/>
        SpotWatchState = 131072,
        
        /// <remarks/>
        DisplayName = 262144,
        
        /// <remarks/>
        HasSpace = 524288,
        
        /// <remarks/>
        Categories = 1048576,
        
        /// <remarks/>
        FileAs = 2097152,
        
        /// <remarks/>
        IsPrivate = 4194304,
        
        /// <remarks/>
        Anniversary = 8388608,
        
        /// <remarks/>
        MiddleName = 16777216,
        
        /// <remarks/>
        NameTitle = 33554432,
        
        /// <remarks/>
        Suffix = 67108864,
        
        /// <remarks/>
        PrimaryLocation = 134217728,
        
        /// <remarks/>
        PrimaryPhone = 268435456,
        
        /// <remarks/>
        Gender = 536870912,
        
        /// <remarks/>
        TimeZone = 1073741824,
        
        /// <remarks/>
        ContactType = 2147483648,
        
        /// <remarks/>
        IsPassportNameHidden = 4294967296,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class AB {
        
        private System.Guid abIdField;
        
        private ABInfo abInfoField;
        
        private System.DateTime lastChangeField;
        
        private System.DateTime dynamicItemLastChangedField;
        
        private System.DateTime createDateField;
        
        private ABPropertyType propertiesChangedField;
        
        /// <remarks/>
        public System.Guid abId {
            get {
                return this.abIdField;
            }
            set {
                this.abIdField = value;
            }
        }
        
        /// <remarks/>
        public ABInfo abInfo {
            get {
                return this.abInfoField;
            }
            set {
                this.abInfoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime DynamicItemLastChanged {
            get {
                return this.dynamicItemLastChangedField;
            }
            set {
                this.dynamicItemLastChangedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime createDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public ABPropertyType propertiesChanged {
            get {
                return this.propertiesChangedField;
            }
            set {
                this.propertiesChangedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ABInfo {
        
        private string nameField;
        
        private long ownerPuidField;
        
        private long ownerCIDField;
        
        private string ownerEmailField;
        
        private bool fDefaultField;
        
        private bool joinedNamespaceField;
        
        private bool isBotField;
        
        /// <remarks/>
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public long ownerPuid {
            get {
                return this.ownerPuidField;
            }
            set {
                this.ownerPuidField = value;
            }
        }
        
        /// <remarks/>
        public long OwnerCID {
            get {
                return this.ownerCIDField;
            }
            set {
                this.ownerCIDField = value;
            }
        }
        
        /// <remarks/>
        public string ownerEmail {
            get {
                return this.ownerEmailField;
            }
            set {
                this.ownerEmailField = value;
            }
        }
        
        /// <remarks/>
        public bool fDefault {
            get {
                return this.fDefaultField;
            }
            set {
                this.fDefaultField = value;
            }
        }
        
        /// <remarks/>
        public bool joinedNamespace {
            get {
                return this.joinedNamespaceField;
            }
            set {
                this.joinedNamespaceField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBot {
            get {
                return this.isBotField;
            }
            set {
                this.isBotField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ABPropertyType {
        
        /// <remarks/>
        Name = 1,
        
        /// <remarks/>
        IsBot = 2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupContactAddOptions {
        
        private bool fMergeField;
        
        private bool fGenerateMissingQuickNameField;
        
        private bool enableAllowListManagementField;
        
        private bool disableIMListManagementField;
        
        /// <remarks/>
        public bool fMerge {
            get {
                return this.fMergeField;
            }
            set {
                this.fMergeField = value;
            }
        }
        
        /// <remarks/>
        public bool fGenerateMissingQuickName {
            get {
                return this.fGenerateMissingQuickNameField;
            }
            set {
                this.fGenerateMissingQuickNameField = value;
            }
        }
        
        /// <remarks/>
        public bool EnableAllowListManagement {
            get {
                return this.enableAllowListManagementField;
            }
            set {
                this.enableAllowListManagementField = value;
            }
        }
        
        /// <remarks/>
        public bool DisableIMListManagement {
            get {
                return this.disableIMListManagementField;
            }
            set {
                this.disableIMListManagementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactDeleteOptions {
        
        private bool enableAllowListManagementField;
        
        private bool disableIMListManagementField;
        
        /// <remarks/>
        public bool EnableAllowListManagement {
            get {
                return this.enableAllowListManagementField;
            }
            set {
                this.enableAllowListManagementField = value;
            }
        }
        
        /// <remarks/>
        public bool DisableIMListManagement {
            get {
                return this.disableIMListManagementField;
            }
            set {
                this.disableIMListManagementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactAddOptions {
        
        private bool enableAllowListManagementField;
        
        private bool disableIMListManagementField;
        
        /// <remarks/>
        public bool EnableAllowListManagement {
            get {
                return this.enableAllowListManagementField;
            }
            set {
                this.enableAllowListManagementField = value;
            }
        }
        
        /// <remarks/>
        public bool DisableIMListManagement {
            get {
                return this.disableIMListManagementField;
            }
            set {
                this.disableIMListManagementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactFindResult {
        
        private Group[] groupsField;
        
        private Contact[] contactsField;
        
        private System.DateTime ablastChangeField;
        
        /// <remarks/>
        public Group[] groups {
            get {
                return this.groupsField;
            }
            set {
                this.groupsField = value;
            }
        }
        
        /// <remarks/>
        public Contact[] contacts {
            get {
                return this.contactsField;
            }
            set {
                this.contactsField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ablastChange {
            get {
                return this.ablastChangeField;
            }
            set {
                this.ablastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupFilter {
        
        private System.Guid[] groupIdsField;
        
        private System.Guid[] groupTypesField;
        
        /// <remarks/>
        public System.Guid[] groupIds {
            get {
                return this.groupIdsField;
            }
            set {
                this.groupIdsField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid[] groupTypes {
            get {
                return this.groupTypesField;
            }
            set {
                this.groupTypesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactFilter {
        
        private System.Guid[] contactIdsField;
        
        private GroupFilter groupFilterField;
        
        private System.DateTime lastChangeField;
        
        private ContactInfoType contactInfoViewField;
        
        private bool fDeltasOnlyField;
        
        /// <remarks/>
        public System.Guid[] contactIds {
            get {
                return this.contactIdsField;
            }
            set {
                this.contactIdsField = value;
            }
        }
        
        /// <remarks/>
        public GroupFilter groupFilter {
            get {
                return this.groupFilterField;
            }
            set {
                this.groupFilterField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime lastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        public ContactInfoType contactInfoView {
            get {
                return this.contactInfoViewField;
            }
            set {
                this.contactInfoViewField = value;
            }
        }
        
        /// <remarks/>
        public bool fDeltasOnly {
            get {
                return this.fDeltasOnlyField;
            }
            set {
                this.fDeltasOnlyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ContactInfoType {
        
        /// <remarks/>
        ContactInfoHotmail,
        
        /// <remarks/>
        ContactInfoMessenger,
        
        /// <remarks/>
        ContactInfoAll,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ContactUpdateOptions {
        
        private bool enableAllowListManagementField;
        
        private bool disableIMListManagementField;
        
        /// <remarks/>
        public bool EnableAllowListManagement {
            get {
                return this.enableAllowListManagementField;
            }
            set {
                this.enableAllowListManagementField = value;
            }
        }
        
        /// <remarks/>
        public bool DisableIMListManagement {
            get {
                return this.disableIMListManagementField;
            }
            set {
                this.disableIMListManagementField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABTestHeader : System.Web.Services.Protocols.SoapHeader {
        
        private bool disableAuthField;
        
        private bool enableHiddenAPIField;
        
        private bool skipCIDLookupField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public bool DisableAuth {
            get {
                return this.disableAuthField;
            }
            set {
                this.disableAuthField = value;
            }
        }
        
        /// <remarks/>
        public bool EnableHiddenAPI {
            get {
                return this.enableHiddenAPIField;
            }
            set {
                this.enableHiddenAPIField = value;
            }
        }
        
        /// <remarks/>
        public bool SkipCIDLookup {
            get {
                return this.skipCIDLookupField;
            }
            set {
                this.skipCIDLookupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ServiceHeader : System.Web.Services.Protocols.SoapHeader {
        
        private string versionField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public string Version {
            get {
                return this.versionField;
            }
            set {
                this.versionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABApplicationHeader : System.Web.Services.Protocols.SoapHeader {
        
        private System.Guid applicationIdField;
        
        private bool isMigrationField;
        
        private string partnerScenarioField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public System.Guid ApplicationId {
            get {
                return this.applicationIdField;
            }
            set {
                this.applicationIdField = value;
            }
        }
        
        /// <remarks/>
        public bool IsMigration {
            get {
                return this.isMigrationField;
            }
            set {
                this.isMigrationField = value;
            }
        }
        
        /// <remarks/>
        public string PartnerScenario {
            get {
                return this.partnerScenarioField;
            }
            set {
                this.partnerScenarioField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ABView {
        
        /// <remarks/>
        Full,
        
        /// <remarks/>
        Hotmail,
        
        /// <remarks/>
        MessengerServer,
        
        /// <remarks/>
        MessengerClient,
        
        /// <remarks/>
        Phone,
        
        /// <remarks/>
        MinimalPhone,
        
        /// <remarks/>
        MapPoint,
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        ContactControl,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ABDynamicItemView {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        Full,
        
        /// <remarks/>
        Gleam,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABAddCompletedEventHandler(object sender, ABAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABFindCompletedEventHandler(object sender, ABFindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AB[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AB[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABContactUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABContactFindCompletedEventHandler(object sender, ABContactFindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABContactFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABContactFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ContactFindResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ContactFindResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABContactAddCompletedEventHandler(object sender, ABContactAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABContactAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABContactAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABContactDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABGroupAddCompletedEventHandler(object sender, ABGroupAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABGroupAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABGroupAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABGroupDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABGroupUpdateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABGroupFindCompletedEventHandler(object sender, ABGroupFindCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABGroupFindCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABGroupFindCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Group[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Group[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABGroupContactAddCompletedEventHandler(object sender, ABGroupContactAddCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABGroupContactAddCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABGroupContactAddCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Guid[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABGroupContactDeleteCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABAllowListSetCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABAllowListGetCompletedEventHandler(object sender, ABAllowListGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABAllowListGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABAllowListGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABFindAllCompletedEventHandler(object sender, ABFindAllCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABFindAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABFindAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABFindByContactsCompletedEventHandler(object sender, ABFindByContactsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABFindByContactsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABFindByContactsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABFindMessengerUsersCompletedEventHandler(object sender, ABFindMessengerUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABFindMessengerUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABFindMessengerUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABFindByGroupsCompletedEventHandler(object sender, ABFindByGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABFindByGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABFindByGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABFindMeContactCompletedEventHandler(object sender, ABFindMeContactCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ABFindMeContactCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ABFindMeContactCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public FindResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((FindResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCategoryCompletedEventHandler(object sender, AddCategoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCategoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCategoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Category[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Category[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateCategoryCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddDynamicItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateDynamicItemCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ABSetForceFullSyncDateCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\presence\PresenceUtil.cs ===
using System;
using System.Text;
using System.Collections.Generic;
using System.IO;
using System.Transactions;
using System.Net;
using Microsoft.Webstore.WstClient;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

using xonline.common.protocol.SubNoti;
using xonline.server.XConnSrv;

[assembly: XomAreaDefinition(XomAreaName.Reporting)]
[assembly: XomAreaDefinition(XomAreaName.Reporting_v2)]

namespace xonline.common.community
{
    internal class InternalRandom
    {
        private static Random _rand = new Random();
        
        public static uint Next()
        {
            lock (_rand)
            {
                return (uint)_rand.Next();
            }
        }
    }

    // class to represent the public version of a user's presence, not including rich presence.  stored in the notification cache.
    public class BasicPresence : BaseDataHeader
    {
        [WireInfo(ArraySize=PresDefs.XONLINE_GAMERTAG_SIZE)]
        public string sGamertag;
        public uint dwTitleID;
        public uint mtLastSeen;
        public ulong qwSessionID;
        public uint dwState;

        public DateTime LastSeenTime
        {
            get { return MsgDefs.MsgTimeToDateTime(mtLastSeen); }
            set { mtLastSeen = MsgDefs.DateTimeToMsgTime(value); }
        }

        public BasicPresence() : base(DATA_TYPES.eBasicPresence)
        {
        }
    };

    // Schema definition for DATA_TYPES.eRichPresenceString
    public class RichPresenceData : BaseDataHeader
    {
        // count of characters in the rich presence string.
        public ushort cbRichPresence;

        // actual formatted rich presence string for the given language.
        [WireInfo(Serialize=false)]
        public string sRichPresence;

        [WireInfo(SizeParam="cbRichPresence")]
        public byte[] rgbRichPresence;

        public RichPresenceData() : base (DATA_TYPES.eRichPresenceString)
        {
        }

        public override void WriteStream(Stream stream)
        {
            rgbRichPresence = Encoding.Unicode.GetBytes(sRichPresence);
            base.WriteStream(stream);
        }

        public override WireData ReadStream(Stream stream)
        {
            base.ReadStream(stream);
            sRichPresence = (rgbRichPresence == null) ? null : Encoding.Unicode.GetString(rgbRichPresence);
            return this;
        }
    };

    // Extension to PresenceRecord class.
    public class PresenceRecordExtension : WireData
    {
        public ulong qwSGSeqNum = 0;
        public uint dwPrevSGTitleId = 0;
        public uint dwCurrentSGTitleId = 0;
    }

    // class to represent the internal version of a user's presence.  this includes things like the true state
    // of a user marked "appear offline".  stored in the presence cache.
    public class PresenceRecord : BaseDataHeader
    {
      
        public uint sGamertagLen;
        [WireInfo(SizeParam="sGamertagLen")]
        public string sGamertag;
        public uint dwTitleID;
        public uint dwLastSeenTitleID;
        public DateTime dtLastSeen = MsgDefs.MsgTimeToDateTime(0);
        public ulong qwSessionID;
        public uint dwState;

        public SGADDR sgaddr;
        public ushort ipportXbox;
        public uint ipaXbox;

        public int rgbRPDataLen;
        [WireInfo(SizeParam="rgbRPDataLen")]
        public byte[] rgbRPData;

        // QVAL sequence numbers
        public uint dwSeqQVals = 1;
        public uint dwSeqXMsgAddQVal = 1;
        public uint dwSeqXMsgDeleteQVal = 1;

        // QVALs are always 15 DWORDs
        [WireInfo(ArraySize=15)]
        public uint[] rgQVals = new uint[15];

        public uint dwNextQueueItemID = 1;

        // reporting data
        public uint mtPlayStart;
        public uint mtTitleStart;
        public ushort wStates;
        public ushort wRandTitle;

        // sg nonce, used by reporting
        public ulong qwNonce;

        public XBOX_LIBRARY_VERSION ClientVersion = new XBOX_LIBRARY_VERSION();

        [WireInfo(Serialize=false)]
        public PresenceRecordExtension extension = new PresenceRecordExtension();

        public bool IsOnline()
        {
            return ((dwState & PresDefs.P_STATE_FLAG_ONLINE) != 0);
        }
        public bool DoesExist()
        {
            return (sGamertagLen != 0);
        }

        public static PresenceRecord Init(
            ulong qwUserID,
            string sGamertag,
            uint dwTitleID,
            SGADDR sgaddr,
            UserPrivileges privs,
            SGInfo sginfo)
        {
            PresenceRecord presence = new PresenceRecord(qwUserID);

            List<string> lReportingLogs = new List<string>();
            do
            {
                presence.sGamertag = sGamertag;
                presence.sGamertagLen = (uint)sGamertag.Length;
                presence.qwSessionID = 0;
                presence.dwState = PresDefs.P_STATE_FLAG_ONLINE | PresDefs.P_STATE_FLAG_CLOAKED;
                presence.rgbRPData = new byte[0];
                presence.rgbRPDataLen = 0;

                presence.dwSeqQVals = 1;
                presence.dwSeqXMsgAddQVal = 1;
                presence.dwSeqXMsgDeleteQVal = 1;
                presence.rgQVals = new uint[15];
                presence.dwNextQueueItemID = 1;

                lReportingLogs.Clear();
                presence.RecordTitleChange(dwTitleID, sginfo, sgaddr, lReportingLogs);

                // set sgaddr, ip/port, and nonce after recordtitlechange
                presence.sgaddr = sgaddr;

                presence.ipportXbox = sginfo.ClientPort;
                presence.ipaXbox = BitConverter.ToUInt32(sginfo.ClientIP.GetAddressBytes(), 0);

                presence.qwNonce = sginfo.Nonce;

                // set titleid after recordtitlechange.
                presence.dwTitleID = dwTitleID;

                // this titleid comes from the sg/ticket.
                presence.extension.dwCurrentSGTitleId = sginfo.TitleId;
                presence.extension.dwPrevSGTitleId = 0;

                presence.ClientVersion = new XBOX_LIBRARY_VERSION();
                presence.ClientVersion.wMajorVersion = sginfo.MajorVersion;
                presence.ClientVersion.wMinorVersion = sginfo.MinorVersion;
                presence.ClientVersion.wQFENumber= sginfo.QFENumber;
                presence.ClientVersion.wBuildNumber= sginfo.BuildNumber;
            } while (!presence.TryWrite());

            foreach (string sLog in lReportingLogs)
            {
                Xom.Log(XomAreaName.PresenceLog, sLog);
                Xom.Log(XomAreaName.Reporting, sLog);
            }

            uint dwHeaderFlags = 0;
            dwHeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE : 0;
            dwHeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE_FRIENDS_ONLY) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS : 0;

            presence.WriteBasicPresence(dwHeaderFlags);
            presence.WriteLimitedPresence(dwHeaderFlags);
            PresenceUtil.WriteEmptyRichPresence(qwUserID, dwHeaderFlags);

            presence.ClearQueues();

            return presence;
        }

        protected void WriteLimitedPresence(uint dwHeaderFlags)
        {
            LimitedPresence limitedPresence = new LimitedPresence();
            limitedPresence.OwnerID = OwnerID;
            limitedPresence.HeaderFlags = dwHeaderFlags;
            limitedPresence.dwTitleID = dwLastSeenTitleID;
            limitedPresence.sGamertag = sGamertag;
            limitedPresence.mtLastSeen = MsgDefs.DateTimeToMsgTime(dtLastSeen);
            limitedPresence.SetState(dwState);

            CacheUtil.OverwriteCache(limitedPresence);
        }

        protected void WriteBasicPresence(uint dwHeaderFlags)
        {
            BasicPresence basic = new BasicPresence();
            basic.OwnerID = this.OwnerID;
            basic.sGamertag = this.sGamertag;
            basic.dwTitleID = this.dwLastSeenTitleID;
            basic.LastSeenTime = this.dtLastSeen;
            basic.qwSessionID = this.qwSessionID;
            basic.dwState = ((this.dwState & PresDefs.P_STATE_FLAG_CLOAKED) != 0) ? 0 : this.dwState;
            basic.HeaderFlags = dwHeaderFlags;

            CacheUtil.OverwriteCache(basic);
        }

        public void SetLastWebTime(uint dwTitleID)
        {
            do
            {
                DateTime dtNow = DateTime.UtcNow;

                if (IsOnline() && ((dwState & PresDefs.P_STATE_FLAG_CLOAKED) == 0))
                {
                    // online and not cloaked.  we have better presence to show than the web's.
                    return;
                }

                if ((dwLastSeenTitleID == dwTitleID) &&
                    (dtNow < dtLastSeen.AddSeconds((double)Config.GetIntSetting(Setting.presence_WebUserTimeout))))
                {
                    // already showing recent web presence.
                    return;
                }

                dtLastSeen = dtNow;
                dwLastSeenTitleID = dwTitleID;
            }
            while (!TryWrite());

            uint dwHeaderFlags = 0;
            UserPrivileges privs = PresenceUtil.GetUserPrivileges(OwnerID);
            dwHeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE : 0;
            dwHeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE_FRIENDS_ONLY) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS : 0;

            WriteBasicPresence(dwHeaderFlags);
            WriteLimitedPresence(dwHeaderFlags);
        }

        public void SetOffline()
        {
            uint dwStateChange = 0;
            SetState(0, PresDefs.P_STATE_FLAG_NONE, 0, null, null, null, new SGADDR(), 0, ref dwStateChange);

            // Did we actually just went from Online to Offline?
            if ((dwStateChange & PresDefs.P_STATE_FLAG_ONLINE) != 0)
            {
                // Persist all the affiliate lists back to DB
                AffiliateList.PersistToDatabase(OwnerID);
                // Clearing the Invitation record should've been done within SetState.
            }
        }

        public void SetState(
            uint dwTitleID,
            uint dwState,
            ulong qwSessionID,
            byte[] rgbRPData,
            string[] rgLocales,
            string[] rgLocalizedStrings,
            SGADDR sgaddr,
            ulong qwSGSeqNum)
        {
            uint dwStateChange = 0;
            SetState(
                dwTitleID,
                dwState,
                qwSessionID,
                rgbRPData,
                rgLocales,
                rgLocalizedStrings,
                sgaddr,
                qwSGSeqNum,
                ref dwStateChange);
        }

        public void SetState(
            uint dwTitleID,
            uint dwState,
            ulong qwSessionID,
            byte[] rgbRPData,
            string[] rgLocales,
            string[] rgLocalizedStrings,
            SGADDR sgaddr)
        {
            uint dwStateChange = 0;
            SetState(
                dwTitleID,
                dwState,
                qwSessionID,
                rgbRPData,
                rgLocales,
                rgLocalizedStrings,
                sgaddr,
                0,
                ref dwStateChange);
        }

        public void SetState(
            uint dwTitleID,
            uint dwState,
            ulong qwSessionID,
            byte[] rgbRPData,
            string[] rgLocales,
            string[] rgLocalizedStrings,
            SGADDR sgaddr,
            ulong qwSGSeqNum,
            ref uint dwStateChange)
        {
            dwStateChange = 0;
            bool fWriteBasic = false;
            bool fNotifyAnnounce = false;
            List<string> lReportingLogs = new List<string>();

            do
            {
                dwStateChange = this.dwState ^ dwState;
                fWriteBasic = false;

                // using some extra bits here for easy filtering.  these bits are normally reserved for the client.  they have no meaning to the server and thus are never sent up.
                dwStateChange &= ~PresDefs.P_STATE_MASK_CLIENTFLAGS;
                dwStateChange |= (dwTitleID == this.dwTitleID) ? 0 : PresDefs.P_STATE_MASK_TITLEID_CHANGED;
                dwStateChange |= (qwSessionID == this.qwSessionID) ? 0 : PresDefs.P_STATE_MASK_SESSIONID_CHANGED;

                wStates++;

                // and we are switching from online/uncloaked to cloaked
                if (((dwState & PresDefs.P_STATE_FLAG_CLOAKED) == PresDefs.P_STATE_FLAG_CLOAKED) &&
                    ((this.dwState & PresDefs.P_STATE_FLAG_ONLINE) == PresDefs.P_STATE_FLAG_ONLINE)
                    && !((this.dwState & PresDefs.P_STATE_FLAG_CLOAKED) == PresDefs.P_STATE_FLAG_CLOAKED))
                {
                    // cloaking now so write an offline record in public cache
                    fWriteBasic = true;

                    if (this.dwTitleID != 0)
                    {
                        dwLastSeenTitleID = this.dwTitleID;
                    }
                    this.dtLastSeen = DateTime.UtcNow;
                }
                // and we are cloaked to offline
                else if (!((dwState & PresDefs.P_STATE_FLAG_ONLINE) == PresDefs.P_STATE_FLAG_ONLINE) &&
                    ((this.dwState & PresDefs.P_STATE_FLAG_CLOAKED) == PresDefs.P_STATE_FLAG_CLOAKED) )
                {
                    fWriteBasic = false;
                }
                // if nothing has changed or we are cloaked
                else if (dwStateChange == 0 || (dwState & PresDefs.P_STATE_FLAG_CLOAKED) == PresDefs.P_STATE_FLAG_CLOAKED)
                {
                    // don't write basic
                    fWriteBasic = false;
                }
                else
                {
                    fWriteBasic = true;

                    //here there is a state change for sure. So we check here if the user is (online and not cloaked)
                    // and the previous state was offline or cloaked. 
                    if (((dwState & PresDefs.P_STATE_FLAG_ONLINE) == PresDefs.P_STATE_FLAG_ONLINE) &&   //current state is online
                        !((dwState & PresDefs.P_STATE_FLAG_CLOAKED) == PresDefs.P_STATE_FLAG_CLOAKED) && //current state is not cloaked
                        (((this.dwState & PresDefs.P_STATE_FLAG_CLOAKED) == PresDefs.P_STATE_FLAG_CLOAKED) || //previous state was cloaked
                        !((this.dwState & PresDefs.P_STATE_FLAG_ONLINE) == PresDefs.P_STATE_FLAG_ONLINE))) //Or previous state was offline
                    {
                        // uncloaking.  time to announce.
                        fNotifyAnnounce = true;
                    }
                    
                    if (dwTitleID != 0)
                    {
                        dwLastSeenTitleID = dwTitleID;
                    }
                    this.dtLastSeen = DateTime.UtcNow;
                }

                if (!Acceleration.CompareByteArrays(this.rgbRPData, rgbRPData))
                {
                    dwStateChange |= PresDefs.P_STATE_MASK_RICHPRES_CHANGED;
                    this.rgbRPData = rgbRPData;
                    this.rgbRPDataLen = (rgbRPData == null) ? 0 : rgbRPData.Length;
                }

                // ignore the previous reporting logs if we had a conflict on write
                lReportingLogs.Clear();

                // if the new title id does not match the old one
                if (dwTitleID != this.dwTitleID)
                {
                    // send the new title id to Record Title Change
                    RecordTitleChange(dwTitleID, null, sgaddr, lReportingLogs);
                }

                // if we are now playing an actual game
                if (((dwState & PresDefs.P_STATE_FLAG_PLAYING) == PresDefs.P_STATE_FLAG_PLAYING) && (dwTitleID != 0) && (qwSessionID != 0))
                {
                    // send the new state, new title id and new session id to RecordPlayStart
                    RecordPlayStart(dwState, dwTitleID, qwSessionID, lReportingLogs);
                }
                else
                {
                    // Record play stop uses the old data to terminate play
                    RecordPlayStop(lReportingLogs);
                }

                // record any change in guests.
                if ((dwStateChange & PresDefs.P_STATE_MASK_GUESTS) != 0)
                {
                    RecordGuestChange(this.dwState & PresDefs.P_STATE_MASK_GUESTS, dwState & PresDefs.P_STATE_MASK_GUESTS, lReportingLogs);
                }

                this.dwTitleID = dwTitleID;
                this.dwState = dwState;
                this.qwSessionID = qwSessionID;
                this.sgaddr = sgaddr;
                this.extension.qwSGSeqNum = qwSGSeqNum;
            }
            while (!TryWrite());

            // successfully wrote the changes, write to reporting
            foreach (string sLog in lReportingLogs)
            {
                Xom.Log(XomAreaName.PresenceLog, sLog);
                Xom.Log(XomAreaName.Reporting, sLog);
            }

            uint dwHeaderFlags = 0;
            UserPrivileges privs = PresenceUtil.GetUserPrivileges(OwnerID);
            dwHeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE : 0;
            dwHeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE_FRIENDS_ONLY) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS : 0;

            if (fWriteBasic)
            {
                WriteBasicPresence(dwHeaderFlags);
                if (LimitedPresence.WriteRequired(dwStateChange))
                {
                    WriteLimitedPresence(dwHeaderFlags);
                }
            }

            if ((dwStateChange & PresDefs.P_STATE_MASK_RICHPRES_CHANGED) != 0)
            {
                if ((rgLocales == null) || (rgLocalizedStrings == null) || (rgLocales.Length != rgLocalizedStrings.Length))
                {
                    PresenceUtil.WriteEmptyRichPresence(OwnerID, dwHeaderFlags);
                }
                else
                {
                    PresenceUtil.WriteRichPresence(OwnerID, rgLocales, rgLocalizedStrings, dwHeaderFlags);
                }
            }

            if (!IsOnline() || (dwStateChange & (PresDefs.P_STATE_MASK_SESSIONID_CHANGED | PresDefs.P_STATE_MASK_TITLEID_CHANGED)) != 0)
            {
                PresenceUtil.PreserveSpecificInvitation(OwnerID, this.qwSessionID);
            }

            
            //Raise events for login and titleid change
            uint eventsPlatform = PresDefs.GetPlatformType(this.dwState);
            uint eventsPrivacy = dwHeaderFlags;
            if ((this.dwState & PresDefs.P_STATE_FLAG_CLOAKED) != 0)
            {
                eventsPrivacy = 0;
            }
            
            if (fNotifyAnnounce)
            {
                PresenceEvents.PublishAnnounce(new PresenceEvents.AnnounceEventArgs()
                    {
                        Xuid = this.OwnerID,
                        TitleId = this.dwTitleID,
                        Privacy = eventsPrivacy, 
                        PlatformType = eventsPlatform, 
                        ClientVersion = this.ClientVersion
                    }
                );
            }

            // TODO: perf counter stuff
            //if (dwStateChange & P_STATE_MASK_ONLINE) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_ONLINE_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_PLAYING) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_PLAYING_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_CLOAKED) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_CLOAKED_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_VOICE) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_VOICE_RATE, 1);
            //if (dwStateChange & (P_STATE_MASK_JOINABLE | P_STATE_MASK_JOINABLE_FRIENDS_ONLY)) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_JOINABLE_RATE, 1);
            //if (dwStateChange & (P_STATE_MASK_PARTY_JOINABLE | P_STATE_MASK_PARTY_JOINABLE_FRIENDS_ONLY)) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_PARTY_JOINABLE_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_PARTY_PLAYING) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_PARTY_PLAYING_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_PARTY_COUNTER) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_PARTY_COUNTER_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_USER_STATE) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_USERSTATE_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_TITLEID_CHANGED) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_TITLEID_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_SESSIONID_CHANGED) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_SESSIONID_RATE, 1);
            //if (dwStateChange & P_STATE_MASK_RICHPRES_CHANGED) g_Counters.IncrementValue32(XPPERF_SERVER_STATECHANGE_RICHPRES_RATE, 1);

        }

        private ulong BuildReportingTitleSessionKey()
        {
            return (ulong)(((ulong)wRandTitle << 32) | (ulong)mtTitleStart);
        }

        /*****************************************************************************
        RecordPlayStart
        Utility method that is called when state is set to playing
        *****************************************************************************/
        private void RecordPlayStart(uint dwNewState, uint dwNewTitleID, ulong qwNewSessionID, List<string> lLogs)
        {
            // Are we not playing?
            if (mtPlayStart == 0)
            {
                // Mark the start of play
                mtPlayStart = MsgDefs.DateTimeToMsgTime(DateTime.UtcNow);
                if (mtPlayStart == 0)
                {
                    // zero is magic, add a tick
                    mtPlayStart = 1;
                }

                // LineType|MachinePUID|TitleID|UserPUID|State|SessionID
                string sLog = string.Format("SESSTART|{0}|{1}|{2}|{3}|{4}",
                    sgaddr.qwXboxId.ToString("X"),
                    dwNewTitleID.ToString("X"),
                    OwnerID.ToString("X"),
                    dwNewState.ToString("X"),
                    qwNewSessionID.ToString("X"));
                lLogs.Add(sLog);
            }
        }

        /*****************************************************************************
        RecordPlayStop
        Utility method that is paired up with RecordPlayStart calls in order to
        properly track the end of playing state sessions.
        *****************************************************************************/
        private void RecordPlayStop(List<string> lLogs)
        {
            uint dwDiff = 0;

            // Were we playing?
            if (mtPlayStart != 0)
            {
                // Mark the end of play
                dwDiff = MsgDefs.DateTimeToMsgTime(DateTime.UtcNow) - mtPlayStart;

                // Difference in time is in seconds, but reporting expects milliseconds, convert.
                dwDiff *= 1000;

                // LineType|MachinePUID|TitleID|UserPUID|State|SessionID|Duration(ms)
                string sLog = string.Format("SESEND|{0}|{1}|{2}|{3}|{4}|{5}",
                    sgaddr.qwXboxId.ToString("X"),
                    dwTitleID.ToString("X"),
                    OwnerID.ToString("X"),
                    dwState.ToString("X"),
                    qwSessionID.ToString("X"),
                    dwDiff.ToString("X"));
                lLogs.Add(sLog);

                mtPlayStart = 0;
            }
        }

        /*****************************************************************************
        CPresence::RecordTitleChange
        Utility method that logs to reporting when the title changes on an Xbox360 console
        *****************************************************************************/
        private void RecordTitleChange(uint dwNewTitleID, SGInfo sginfo, SGADDR sgaddrNew, List<string> lLogs)
        {
            uint dwDiff = 0;

            if ((dwTitleID != 0) && (mtTitleStart != 0))
            {
                // Stop any session currently in progress
                RecordPlayStop(lLogs);

                // Mark the end of the title
                dwDiff = MsgDefs.DateTimeToMsgTime(DateTime.UtcNow) - mtTitleStart;

                // Difference in time is in seconds, but reporting expects milliseconds, convert.
                dwDiff *= 1000;

                string sLog;
                if (qwNonce == 0)
                {
                    // LineType|MachinePUID|TitleID|UserPUID|State|Xbox IP|Xbox port|SessKey|Duration(ms)|States|Dequeues
                    sLog = string.Format("TITLEND|{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}",
                        sgaddr.qwXboxId.ToString("X"),
                        dwTitleID.ToString("X"),
                        OwnerID.ToString("X"),
                        dwState.ToString("X"),
                        ipaXbox.ToString("X"),
                        ipportXbox.ToString("X"),
                        BuildReportingTitleSessionKey().ToString("X"),
                        dwDiff.ToString("X"),
                        wStates.ToString("X"),
                        "0"
                        );
                }
                else
                {
                    // LineType|MachinePUID|TitleID|UserPUID|State|Xbox IP|Xbox port|SessKey|Duration(ms)|States|Dequeues|Nonce
                    sLog = string.Format("TITLEND2|{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}|{8}|{9}|{10}",
                        sgaddr.qwXboxId.ToString("X"),
                        dwTitleID.ToString("X"),
                        OwnerID.ToString("X"),
                        dwState.ToString("X"),
                        ipaXbox.ToString("X"),
                        ipportXbox.ToString("X"),
                        BuildReportingTitleSessionKey().ToString("X"),
                        dwDiff.ToString("X"),
                        wStates.ToString("X"),
                        "0",
                        qwNonce.ToString("X")
                        );
                }
                lLogs.Add(sLog);

                mtTitleStart = 0;
                wRandTitle = 0;
                wStates = 0;
            }

            if ((dwNewTitleID != 0) && (mtTitleStart == 0))
            {
                // Mark the start of play
                mtTitleStart = MsgDefs.DateTimeToMsgTime(DateTime.UtcNow);
                wRandTitle = (ushort)InternalRandom.Next();

                uint ipaXboxNew = ipaXbox;
                ushort ipportXboxNew = ipportXbox;
                ulong qwNonceNew = qwNonce;

                // SGInfo will come in an Alive call, which will update SG information
                // track that separately than what is currently in the current record.
                if (sginfo != null)
                {
                    ipaXboxNew = BitConverter.ToUInt32(sginfo.ClientIP.GetAddressBytes(), 0);
                    ipportXboxNew = sginfo.ClientPort;
                    qwNonceNew = sginfo.Nonce;
                }

                string sLog;
                if (qwNonce == 0)
                {
                    // LineType|MachinePUID|TitleID|UserPUID|State|Xbox IP|Xbox port|SessKey
                    sLog = string.Format("TITLESTART|{0}|{1}|{2}|{3}|{4}|{5}|{6}",
                        sgaddrNew.qwXboxId.ToString("X"),
                        dwNewTitleID.ToString("X"),
                        OwnerID.ToString("X"),
                        dwState.ToString("X"),
                        ipaXboxNew.ToString("X"),
                        ipportXboxNew.ToString("X"),
                        BuildReportingTitleSessionKey().ToString("X")
                        );
                }
                else
                {
                    // LineType|MachinePUID|TitleID|UserPUID|State|Xbox IP|Xbox port|SessKey|Nonce
                    sLog = string.Format("TITLESTART2|{0}|{1}|{2}|{3}|{4}|{5}|{6}|{7}",
                        sgaddrNew.qwXboxId.ToString("X"),
                        dwNewTitleID.ToString("X"),
                        OwnerID.ToString("X"),
                        dwState.ToString("X"),
                        ipaXboxNew.ToString("X"),
                        ipportXboxNew.ToString("X"),
                        BuildReportingTitleSessionKey().ToString("X"),
                        qwNonceNew.ToString("X")
                        );
                }
                lLogs.Add(sLog);
            }
        }

        /*****************************************************************************
        CPresence::RecordGuestChange
        Utility method that logs to reporting when the guests change on an Xbox360 console
        *****************************************************************************/
        private void RecordGuestChange(uint dwOldGuests, uint dwNewGuests, List<string> alLogs)
        {
            // LineType|MachinePUID|TitleID|UserPUID|State|OldGuests|NewGuests
            string sLog = string.Format(
                "GUESTCHG|{0}|{1}|{2}|{3}|{4}|{5}",
                sgaddr.qwXboxId.ToString("X"),
                dwTitleID.ToString("X"),
                OwnerID.ToString("X"),
                dwState.ToString("X"),
                dwOldGuests.ToString("X"),
                dwNewGuests.ToString("X"));

            alLogs.Add(sLog);
        }

        /*****************************************************************************
        SetXMsgAddQVals
        A new message has arrived for this user, set the appropriate QVals
        *****************************************************************************/
        public unsafe void SetXMsgAddQVals(SendMessageMsg newMessage, uint dwItemID)
        {

            // We use two QVals of stacked information when a message is added.  The first QVal contains 3 DWORDs
            // which are the message IDs of the 3 most recently added messages.  The second QVal contains additional
            // data about the messages such as their type and relevant flags.  Also, some titles will want to handle
            // only messages sent from their title, whereas others will want to handle all messages.  Rather than
            // have another two QVals for this, there is a special message flag used to indicate that
            // a particular message is for the current title.

            do
            {
                // Set up the new message notification data
                uint dwTypeAndFlags;
                dwTypeAndFlags = (uint)(newMessage.bMessageType << 24);
                dwTypeAndFlags |= (newMessage.dwMessageFlags & MsgDefs.XONLINE_MSG_FLAGS_TITLE_RESERVED) >> 8;

                if(((TitleId)dwTitleID).PublisherID == ((TitleId)newMessage.dwSenderTitleID).PublisherID)
                {
                    dwTypeAndFlags |= MsgDefs.XONLINE_MSG_NOTIFICATION_FLAG_SAME_PUBLISHER;
                }
                if ((newMessage.dwMessageFlags & MsgDefs.XONLINE_MSG_FLAG_HAS_VOICE) != 0)
                {
                    dwTypeAndFlags |= MsgDefs.XONLINE_MSG_NOTIFICATION_FLAG_HAS_VOICE;
                }
                if ((newMessage.dwMessageFlags & MsgDefs.XONLINE_MSG_FLAG_HAS_TEXT) != 0)
                {
                    dwTypeAndFlags |= MsgDefs.XONLINE_MSG_NOTIFICATION_FLAG_HAS_TEXT;
                }
                if(dwTitleID == newMessage.dwSenderTitleID)
                {
                    dwTypeAndFlags |= MsgDefs.XONLINE_MSG_NOTIFICATION_FLAG_SAME_TITLE;
                }
                // NOTE: we dont care about alt titleid anymore.

                // Mark a new item
                dwSeqXMsgAddQVal++;

                // Always mark a change of the master sequence number since this is used to match up replies
                dwSeqQVals++;

                fixed(uint *pdwQVals = rgQVals)
                {
                    SQVals* pQVals = (SQVals*)pdwQVals;

                    // The sequence is used by the client to know how many new messages have arrived.  If the number is
                    // less than 3, then the metadata can be retrieved directly using the data values without enumerating.
                    pQVals->NewMsgIdsQVal = CQVal.QVAL_NEW_MSG_IDS | (dwSeqXMsgAddQVal << CQVal.QVAL_SEQ_SHIFT);
                    pQVals->NewMsgDataQVal = CQVal.QVAL_NEW_MSG_DATA | (dwSeqXMsgAddQVal << CQVal.QVAL_SEQ_SHIFT);

                    // Shift out the oldest message ID and insert the new one
                    pQVals->NewMsgId_3 = pQVals->NewMsgId_2;
                    pQVals->NewMsgId_2 = pQVals->NewMsgId_1;
                    pQVals->NewMsgId_1 = dwItemID;

                    // Shift out the oldest message data and insert the new one
                    pQVals->NewMsgData_3 = pQVals->NewMsgData_2;
                    pQVals->NewMsgData_2 = pQVals->NewMsgData_1;
                    pQVals->NewMsgData_1 = dwTypeAndFlags;
                }
            }
            while (!TryWrite());

            /*
            XomTrace(
                PresenceDebug,
                L_NORMAL,
                "Setting Messaging Add QVal User=%I64X Msg=0x%08X SameTitle=%d FromFriend=%d AddSeq=%X MainSeq=%X",
               m_qwUserID,
               dwItemID,
               m_pOnlinePresence->m_dwTitleID == pNewMessage->dwSenderTitleID,
               fSenderIsFriend,
               m_pOnlinePresence->m_dwSeqXMsgAddQVal,
               m_pOnlinePresence->m_dwSeqQVals);

             */
            SGComm.SendQVals(sgaddr, OwnerID, dwSeqQVals, rgQVals);
        }

        /*****************************************************************************
        SetXMsgDeleteQVals
        A message has been deleted for this user, set the appropriate QVals
        *****************************************************************************/
        public unsafe void SetXMsgDeleteQVals(uint dwItemID)
        {
            do
            {
                // Mark a new item
                dwSeqXMsgDeleteQVal++;

                // Always mark a change of the master sequence number since this is used to match up replies
                dwSeqQVals++;

                fixed (uint* pdwQVals = rgQVals)
                {
                    SQVals* pQVals = (SQVals*)pdwQVals;

                    // The sequence is used by the client to know how many new messages have arrived.  If the number is
                    // less than 3, then the metadata can be retrieved directly using the data values without enumerating.
                    pQVals->DelMsgQVal = CQVal.QVAL_MSG_DELETED | (dwSeqXMsgDeleteQVal << CQVal.QVAL_SEQ_SHIFT);

                    // Shift out the oldest message ID and insert the new one
                    pQVals->DelMsg_3 = pQVals->DelMsg_2;
                    pQVals->DelMsg_2 = pQVals->DelMsg_1;
                    pQVals->DelMsg_1 = dwItemID;

                }
            }
            while (!TryWrite());

            /*
            XomTrace(
                PresenceDebug,
                L_NORMAL,
                "Setting Messaging Delete QVal User=%I64X Msg=0x%08X DelSeq=%X MainSeq=%X",
               m_qwUserID,
               dwItemID,
               m_pOnlinePresence->m_dwSeqXMsgDeleteQVal,
               m_pOnlinePresence->m_dwSeqQVals);
            */

            SGComm.SendQVals(sgaddr, OwnerID, dwSeqQVals, rgQVals);
        }


        // List Change Operations
        // ----------------------
        public enum PLIST_CHANGE
        {
            PLIST_BUDDY_NOP = 0,
            PLIST_BUDDY_ADD = 1,
            PLIST_BUDDY_ADDED = 2,
            PLIST_BUDDY_ACCEPT = 3,
            PLIST_BUDDY_REJECT = 4,
            PLIST_BUDDY_DELETE = 5
        }

        public void ClearQueues()
        {
            ClearQueues(OwnerID);
        }

        public static void ClearQueues(ulong qwUserID)
        {
            UserQueue buddyReqQ = new UserQueue(qwUserID, (ushort)P_QUEUE_TYPES.PQUEUE_BUDDY_REQ);
            UserQueue listChangeQ = new UserQueue(qwUserID, (ushort)P_QUEUE_TYPES.PQUEUE_LIST_CHANGE);
            UserQueue inviteQ = new UserQueue(qwUserID, (ushort)P_QUEUE_TYPES.PQUEUE_INVITE);
            UserQueue inviteAnswerQ = new UserQueue(qwUserID, (ushort)P_QUEUE_TYPES.PQUEUE_INVITE_ANSWER);
            buddyReqQ.Clear();
            listChangeQ.Clear();
            inviteQ.Clear();
            inviteAnswerQ.Clear();
        }

        /*****************************************************************************
        QueueAddQVals
        Base implementation to add an item to a queue and bump the QVALs for it
        *****************************************************************************/
        protected unsafe void QueueAddQVals(uint dwQueueType, byte[] rgbItemData)
        {
            uint dwQueueItemID = 0;
            bool fChanged;

            do
            {
                fChanged = false;
                fixed (uint* pdwQVals = rgQVals)
                {
                    SQVals* pQVals = (SQVals*)pdwQVals;

                    if ((pQVals->QFlags & (1 << (int)dwQueueType)) == 0)
                    {
                        fChanged = true;
                        dwSeqQVals++;
                        pQVals->QFlagQVal = (1 | (dwSeqQVals << CQVal.QVAL_SEQ_SHIFT));
                        pQVals->QFlags |= (uint)(1 << (int)dwQueueType);
                    }
                }

                dwQueueItemID = dwNextQueueItemID;
                dwNextQueueItemID++;
            }
            while (!TryWrite());

            NotificationListItem listItem = new NotificationListItem();
            listItem.dwItemID = dwQueueItemID;
            listItem.rgbItemData = rgbItemData;

            UserQueue userQueue = new UserQueue(OwnerID, (ushort)dwQueueType);
            userQueue.AddItem(listItem);

            if (fChanged)
            {
                SGComm.SendQVals(sgaddr, OwnerID, dwSeqQVals, rgQVals);
            }
        }

        /*****************************************************************************
        QueueInviteQVals
        An invitation has been received
        *****************************************************************************/
        public unsafe void QueueInviteQVals(ulong qwHostID, ulong qwMatchSessionID, uint dwTitleID)
        {
            InvitationItem invite = new InvitationItem();
            invite.qwHostID = qwHostID;
            invite.qwMatchSessionID = qwMatchSessionID;
            invite.dwTitleID = dwTitleID;
            invite.ftSent = (ulong)DateTime.UtcNow.ToFileTime();

            QueueAddQVals((uint)P_QUEUE_TYPES.PQUEUE_INVITE, (byte[])invite);
        }

        /*****************************************************************************
        QueueInviteAnswerQVals
        An invitation answer has been received
        *****************************************************************************/
        public unsafe void QueueInviteAnswerQVals(ulong qwInviteeID, ulong qwMatchSessionID, ushort wAnswer)
        {
            InvitationAnswerItem inviteAnswer = new InvitationAnswerItem();
            inviteAnswer.qwInviteeID = qwInviteeID;
            inviteAnswer.wAnswer = wAnswer;
            inviteAnswer.qwMatchSessionID = qwMatchSessionID;
            inviteAnswer.ftSent = (ulong)DateTime.UtcNow.ToFileTime();

            QueueAddQVals((uint)P_QUEUE_TYPES.PQUEUE_INVITE_ANSWER, (byte[])inviteAnswer);
        }

        /*****************************************************************************
        QueueListChange
        The list for this user has changed
        *****************************************************************************/
        public unsafe void QueueListChangeQVals(uint dwVersion, ulong qwTargetID, PLIST_CHANGE wOperationID, HResult hrOp, string sTargetAcctName)
        {
            uint dwQueueType = (uint)((wOperationID != PLIST_CHANGE.PLIST_BUDDY_ADDED) ? P_QUEUE_TYPES.PQUEUE_LIST_CHANGE : P_QUEUE_TYPES.PQUEUE_BUDDY_REQ);

            ListChangeItem listChange = new ListChangeItem();
            listChange.dwListVersion = dwVersion;
            listChange.qwTargetID = qwTargetID;
            listChange.wOperationID = (ushort)wOperationID;
            listChange.hr = hrOp;
            listChange.szTargetAcctName = sTargetAcctName;

            QueueAddQVals(dwQueueType, (byte[])listChange);
        }

        public unsafe void ClearQFlag(ushort wQType)
        {
            do
            {
                // Always mark a change of the master sequence number since this is used to match up replies
                dwSeqQVals++;

                fixed(uint *pdwQVals = rgQVals)
                {
                    SQVals* pQVals = (SQVals*)pdwQVals;

                    if ((pQVals->QFlags & (1 << (int)wQType)) == 0)
                    {
                        return;
                    }

                    dwSeqQVals++;
                    pQVals->QFlagQVal = (1 | (dwSeqQVals << CQVal.QVAL_SEQ_SHIFT));
                    pQVals->QFlags &= ~(uint)(1 << (int)wQType);
                }
            }
            while (!TryWrite());

            SGComm.SendQVals(sgaddr, OwnerID, dwSeqQVals, rgQVals);
        }


        public PresenceRecord(ulong userID) : base(DATA_TYPES.eInternalPresence)
        {
            this.OwnerID = userID;
            RefreshFromStore();
        }
        public PresenceRecord() : base(DATA_TYPES.eInternalPresence)
        {
        }

        public override void ReadExtension(Stream stream)
        {
            extension = new PresenceRecordExtension();
            
            if (stream.Position < stream.Length)
            {
                extension.ReadStream(stream);
            }
        }

        public override void WriteExtension(Stream stream)
        {
            if (extension != null)
            {
                extension.WriteStream(stream);
            }
        }

        public static PresenceRecord ReadOrCreate(ulong qwUserID, out bool fCreated)
        {
            // NOTE: the following method of loading the presence record is different from most others.  This is NOT the
            // recommened general purpose method for obtaining a presence record.  We do this here as an attempt to
            // reconstruct the record in cases where it may have been lost from the cache.
            //
            // Normal callers shoud just do this:
            //
            //     PresenceRecord record = PresenceUtil.GetPresenceRecord(qwUserID);
            //

            byte[] rgbCacheData;
            uint dwCacheVersion;

            fCreated = false;

            uint hr = CacheUtil.ReadBytesFromCache(
                CacheUtil.BuildCacheKey(DATA_TYPES.eInternalPresence, qwUserID),
                out dwCacheVersion,
                out rgbCacheData);

            if (HResult.Failed(hr))
            {
                // failure to read from cache indicates the cache is unavailable.  we won't try to reconstruct here, as we
                // have no confidence that our reconstructed record could be saved back to the cache.
                throw new XRLException(hr, XEvent.Id.PRESENCE_DO_NOT_LOG_EVENT, "ReadOrCreatePresenceRecord: cache unavailable for user " + (Puid)qwUserID);
            }

            // overwrite the record with what we read from the cache.
            PresenceRecord record = (PresenceRecord)CacheUtil.ReadCacheItemFromBytes(rgbCacheData);
            if (record != null)
            {
                record.dwVersion = dwCacheVersion;
            }
            else
            {
                // cache miss.  try to load offline data to refresh it.
                record = PresenceRecord.LoadOfflinePresenceFromDatabase(qwUserID);
                if (record == null)
                {
                    hr = HResult.XONLINE_E_USER_NOT_PRESENT;
                    throw new XRLException(hr, XEvent.Id.PRESENCE_INVALID_USERID, "ReadOrCreatePresenceRecord: user " + (Puid)qwUserID + " not found in database.");
                }

                // LineType|UserPUID|Gamertag
                Xom.Log(XomAreaName.PresenceLog,string.Format("RECONSTRUCT|{0}|{1}", qwUserID.ToString("X"), record.sGamertag));
                fCreated = true;
            }

            return record;
        }

        public static PresenceRecord LoadOfflinePresenceFromDatabase(ulong qwUserID)
        {
            PresenceRecord record = null;
            UserPrivileges priv = null;
            NeverList neverList = new NeverList();
            FriendsList friendsList = new FriendsList();
            HResult hr = HResult.S_OK;

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.Partition = ws.CalcPartition(qwUserID);
                ws.StoredProc = "dbo.p_pres_load_offline";

                ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                ws.AddParameter("@bi_user_puid", qwUserID);

                WstDataReader reader = ws.Execute();

                hr = (uint)ws.GetIntParameter("@RETVAL");
                if (hr.IsSuccess())
                {
                    // empty constructor bypasses cache read.
                    record = new PresenceRecord();
                    record.OwnerID = qwUserID;
                    record.sgaddr = new SGADDR();

                    //Populate PresenceRecord AND the UserPrivilege in the cache
                    if (reader.HasRows && reader.Read())
                    {
                        record.sGamertag = (string)reader[2];
                        if (record.sGamertag != null)
                            record.sGamertagLen = (uint)record.sGamertag.Length;
                        //Seed the user privileges into the cache since we get it anyway
                        //Overwrite the previous one
                        priv = new UserPrivileges(qwUserID, (byte[])reader[5]);
                        record.dwState = PresDefs.P_STATE_FLAG_NONE;
                        friendsList.dwListVersion = (uint)(int)reader[0];
                        friendsList.OwnerID = qwUserID;
                        friendsList.rgUsers = new UserData[(int)reader[1]];
                        record.dtLastSeen = MsgDefs.MsgTimeToDateTime(0);
                    }

                    //Populate the FriendsList in the cache
                    if (reader.NextResult())
                    {
                        int iFriend = 0;
                        while (reader.HasRows && reader.Read())
                        {
                            friendsList.rgUsers[iFriend] = new UserData();
                            friendsList.rgUsers[iFriend].qwXUID = (ulong)(long)reader[0];
                            CacheUtil.SetFriendStatus(ref friendsList.rgUsers[iFriend].dwUserFlags, (uint)(byte)reader[1]);
                            iFriend++;
                        }
                        if (priv != null)
                        {
                            friendsList.ApplySharingPermissions(priv);
                        }
                    }

                    //Populate the NeverList in the cache
                    if (reader.NextResult())
                    {
                        if (reader.HasRows && reader.Read())
                        {
                            neverList.rgNeversLen = (int)reader[0];
                        }
                    }
                    if (neverList.rgNeversLen > 0)
                    {
                        neverList.rgNevers = new ulong[neverList.rgNeversLen];
                        int iNever = 0;
                        while (reader.HasRows && reader.Read())
                        {
                            neverList.rgNevers[iNever] = ((ulong)(long)reader[0]);
                        }
                    }

                    //Persist all to cache
                    record.FlushToStore();
                    PresenceUtil.WriteUserPrivilegesToCache(priv);
                    FriendsListUtil.UpdateCache(friendsList);
                    PresenceUtil.WriteNeverListToCache(neverList);
                }
            }

            return record;
        }

    }

    public class LimitedPresence : BaseDataHeader
    {
        public LimitedPresence() : base(DATA_TYPES.eLimitedPresence) { }

        [WireInfo(Serialize = false)]
        private static uint s_LIMITED_STATE_MASK = PresDefs.P_STATE_MASK_TITLEID_CHANGED |
                                                    PresDefs.P_STATE_MASK_PARTY_PLAYING |
                                                    PresDefs.P_STATE_FLAG_CLOAKED |
                                                    PresDefs.P_STATE_FLAG_ONLINE;

        [WireInfo(ArraySize = PresDefs.XONLINE_GAMERTAG_SIZE)]
        public string sGamertag;
        public uint dwTitleID;
        public uint mtLastSeen;
        public uint dwState;

        public void SetState(uint State)
        {
            dwState = ((State & PresDefs.P_STATE_FLAG_CLOAKED) != 0) ? 0 : (State & s_LIMITED_STATE_MASK);
        }

        public static bool WriteRequired(uint stateChange)
        {
            return ((stateChange & s_LIMITED_STATE_MASK) > 0);
        }
    }

    public class MachineUserList : BaseDataHeader
    {
        public MachineUserList() : base(DATA_TYPES.eMachineUserList){}

        public SGADDR sgaddr;

        public int rgUsersLen;
        [WireInfo(SizeParam="rgUsersLen")]
        public ulong[] rgUsers;
    }

    public class NeverList : BaseDataHeader
    {
        public NeverList() : base(DATA_TYPES.eUserNeverList){}

        public int rgNeversLen;
        [WireInfo(SizeParam="rgNeversLen")]
        public ulong[] rgNevers;

        public bool ContainsUser(ulong qwUser)
        {
            int index = Array.BinarySearch(rgNevers, qwUser);
            if (index >= 0)
            {
                return true;
            }

            return false;
        }
    }

    public class UserPrivileges : BaseDataHeader
    {
        [WireInfo(ArraySize=XOn.XONLINE_NUM_PRIVILEGE_DWORDS)]
        public uint[] rgdwPrivileges;

        public bool HasPrivilege(byte priv)
        {
            // find the DWORD containing this bit
            int dwordIndex = priv / 32;

            // find the bit offset within the DWORD
            int bitIndex = priv - dwordIndex*32;

            // create the mask
            uint mask = ((uint)1) << bitIndex;

            return ((rgdwPrivileges[dwordIndex] & mask) == mask);
        }

        public UserPrivileges() : base(DATA_TYPES.eUserPrivileges) {}

        public unsafe UserPrivileges(ulong qwUserID, byte[] rgbPrivileges)
            : this()
        {
            this.OwnerID = qwUserID;
            this.rgdwPrivileges = new uint[XOn.XONLINE_NUM_PRIVILEGE_DWORDS];

            fixed (byte *pBuf = rgbPrivileges)
            {
                uint *pUint = (uint *)pBuf;
                for (int i = 0; i < XOn.XONLINE_NUM_PRIVILEGE_DWORDS; i++)
                {
                    this.rgdwPrivileges[i] = pUint[i];
                }
            }
        }
    }

    public class Invitation : BaseDataHeader
    {
        public Invitation()
            : base(DATA_TYPES.eInvitation)
        {
            dwTitleID = 0;
            qwMatchSessionID = 0;
            ftSent = 0;
            cInvitees = 0;
            qwInvitees = null;
        }

        public Invitation(ulong qwOwnerID)
            : base(DATA_TYPES.eInvitation)
        {
            dwTitleID = 0;
            qwMatchSessionID = 0;
            ftSent = 0;
            cInvitees = 0;
            qwInvitees = null;
            OwnerID = qwOwnerID;
        }

        public uint dwTitleID;

        public ulong qwMatchSessionID;

        public ulong ftSent;

        public uint cInvitees;

        [WireInfo(SizeParam = "cInvitees")]
        public ulong[] qwInvitees;

        public ulong[] AddInvitees(ulong[] qwAddInviteeIDs)
        {
            ulong[] qwNewInvitees = null;

            // Get all invitees that are not already part of this Invite
            var qwUniqueInviteeIDs = new List<ulong>(qwAddInviteeIDs.Length + (qwInvitees != null ? qwInvitees.Length : 0));
            foreach (ulong qwInviteeID in qwAddInviteeIDs)
            {
                if (qwInvitees == null || Array.BinarySearch<ulong>(qwInvitees, qwInviteeID) < 0)
                {
                    qwUniqueInviteeIDs.Add(qwInviteeID);
                }
            }
            // If there are new invitees to add
            if (qwUniqueInviteeIDs.Count > 0)
            {
                // The new invitees are returned to the caller
                qwNewInvitees = qwUniqueInviteeIDs.ToArray();
                // Now also add the existing invitees
                if (qwInvitees != null)
                {
                    qwUniqueInviteeIDs.AddRange(qwInvitees);
                }
                // Don't keep going if the total number of invitees exceeds the maxium allowed
                if (qwUniqueInviteeIDs.Count > MsgDefs.XONLINE_MAX_MESSAGE_RECIPIENTS)
                {
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.PRESENCE_INVITE_BAD_NUMBER_INVITEES, String.Format("Invitation::AddInvitees() called for user={0} would exceed maximum recipient count", header.doSpec.qwOwnerXUID));
                }
                // Sort and store values for serialization into Presence Cache
                qwUniqueInviteeIDs.Sort();
                qwInvitees = qwUniqueInviteeIDs.ToArray();
            }
            return qwNewInvitees;
        }

        public bool RemoveInvitee(ulong qwInviteeID)
        {
            int index = Array.BinarySearch<ulong>(qwInvitees, qwInviteeID);
            if (index >= 0)
            {
                if (qwInvitees.Length == 1)
                {
                    qwInvitees = null;
                }
                else
                {
                    for (int i = index; i < qwInvitees.Length - 1; ++i)
                    {
                        qwInvitees[i] = qwInvitees[i+1];
                    }
                    Array.Resize<ulong>(ref qwInvitees, qwInvitees.Length - 1);
                }
                return true;
            }
            return false;
        }

        public bool RemoveInvitees(ulong[] qwInvitees)
        {
            bool fChanged = false;
            foreach (ulong qwInviteeID in qwInvitees)
            {
                fChanged |= RemoveInvitee(qwInviteeID);
            }
            return fChanged;
        }
    }

    public class PresenceUtil
    {
        static TransactionOptions s_txnOptions = new TransactionOptions();

        static PresenceUtil()
        {
            s_txnOptions.IsolationLevel = IsolationLevel.ReadCommitted;
        }

        public static BasicPresence[] GetBasicPresenceForUsers(ulong qwViewerID, ulong[] rgUsers)
        {
            return GetBasicPresenceForUsers(FriendsListUtil.GetFriendsListForXuid(qwViewerID), rgUsers);
        }
        public static unsafe BasicPresence[] GetBasicPresenceForUsers(FriendsList viewerFriends, ulong[] rgUsers)
        {
            if ((rgUsers == null) || (rgUsers.Length == 0))
            {
                return null;
            }

            string[] rgKeys = new string[rgUsers.Length];
            for (int iKey = 0; iKey < rgKeys.Length; iKey++)
            {
                rgKeys[iKey] = CacheUtil.BuildCacheKey(DATA_TYPES.eBasicPresence, rgUsers[iKey]);
            }

            BaseDataHeader[] rgItems = CacheUtil.ReadFromNotificationCache(rgKeys);
            BasicPresence[] rgBasics = new BasicPresence[rgItems.Length];

            // the gamertag is in the basicpresence cache object, but it's possible that we'll have a cache miss.
            // we want to return the gamertag for every user, even if he's offline.  so, just use xcache for all gamertags.
            string[] rgGamertags = XCache.LookupGamerTags(rgUsers);

            for (int iValue = 0; iValue < rgItems.Length; iValue++)
            {
                rgBasics[iValue] = rgItems[iValue] as BasicPresence;

                if ((rgBasics[iValue] == null) ||
                    (!CacheUtil.IsDataAccessible(rgUsers[iValue], viewerFriends.OwnerID, rgBasics[iValue].HeaderFlags, viewerFriends.AreAcceptedBuddies)))
                {
                    // make an empty record.
                    rgBasics[iValue] = new BasicPresence();
                    rgBasics[iValue].OwnerID = rgUsers[iValue];
                }

                // overwrite the gamertag.
                rgBasics[iValue].sGamertag = rgGamertags[iValue];
            }

            return rgBasics;
        }


        // NOTE: this call returns unfiltered private user data, including the cloaked state and the privacy permissions set by the user.
        public static unsafe LimitedPresence[] GetLimitedPresenceForUsers(ulong[] rgUsers)
        {
            if ((rgUsers == null) || (rgUsers.Length == 0))
            {
                return null;
            }

            string[] rgKeys = new string[rgUsers.Length * 2];
            for (int iUser = 0; iUser < rgUsers.Length; iUser++)
            {
                rgKeys[iUser * 2] = CacheUtil.BuildCacheKey(DATA_TYPES.eInternalPresence, rgUsers[iUser]);
                rgKeys[(iUser * 2) + 1] = CacheUtil.BuildCacheKey(DATA_TYPES.eUserPrivileges, rgUsers[iUser]);
            }

            // we're only going to the cache here.  if the user privileges are not found, we will not refresh them from the db.
            // these cache items are both repopulated on login and states, so they should be readily available for online users.
            BaseDataHeader[] rgItems = CacheUtil.ReadFromPresenceCache(rgKeys);

            // the gamertag is in the basicpresence cache object, but it's possible that we'll have a cache miss.
            // we want to return the gamertag for every user, even if he's offline.  so, just use xcache for all gamertags.
            string[] rgGamertags = XCache.LookupGamerTags(rgUsers);

            LimitedPresence[] rgLimiteds = new LimitedPresence[rgUsers.Length];
            for (int iUser = 0; iUser < rgUsers.Length; iUser++)
            {
                rgLimiteds[iUser] = new LimitedPresence();
                rgLimiteds[iUser].OwnerID = rgUsers[iUser];
                rgLimiteds[iUser].sGamertag = rgGamertags[iUser];

                PresenceRecord pres = rgItems[iUser * 2] as PresenceRecord;
                UserPrivileges privs = rgItems[(iUser * 2) + 1] as UserPrivileges;

                if (pres != null)
                {
                    rgLimiteds[iUser].dwState = pres.dwState;
                    rgLimiteds[iUser].dwTitleID = pres.dwTitleID;
                    rgLimiteds[iUser].mtLastSeen = MsgDefs.DateTimeToMsgTime(pres.dtLastSeen);
                }

                if (privs != null)
                {
                    rgLimiteds[iUser].HeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE : 0;
                    rgLimiteds[iUser].HeaderFlags |= privs.HasPrivilege(XOn.XPRIVILEGE_PRESENCE_FRIENDS_ONLY) ? (uint)CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_FRIENDS : 0;
                }
            }

            return rgLimiteds;
        }

        public static string[] GetRichPresenceStringForUsers(ulong qwViewerID, SGInfo sginfoViewer, ulong[] qwTargets)
        {
            return GetRichPresenceStringForUsers(FriendsListUtil.GetFriendsListForXuid(qwViewerID), sginfoViewer.GetUserLocaleList2(qwViewerID, true), qwTargets);
        }
        public static string[] GetRichPresenceStringForUsers(FriendsList viewerFriends, SGInfo sginfoViewer, ulong[] qwTargets)
        {
            return GetRichPresenceStringForUsers(viewerFriends, sginfoViewer.GetUserLocaleList2(viewerFriends.OwnerID, true), qwTargets);
        }
        public static unsafe string[] GetRichPresenceStringForUsers(FriendsList viewerFriends, string[] viewerLocales, ulong[] qwTargets)
        {
            string[] rgRPStrings = new string[qwTargets.Length];

            string[] rgKeys = new string[qwTargets.Length];
            for (int iKey = 0; iKey < rgKeys.Length; iKey++)
            {
                rgKeys[iKey] = CacheUtil.BuildCacheKey(DATA_TYPES.eRichPresenceString, qwTargets[iKey]);
            }

            BaseDataHeader[] rgItems = CacheUtil.ReadFromNotificationCache(rgKeys);

            for (int iValue = 0; iValue < rgItems.Length; iValue++)
            {
                LanguageSpecificData lsBlob = rgItems[iValue] as LanguageSpecificData;

                if ((lsBlob == null) ||
                    (!CacheUtil.IsDataAccessible(qwTargets[iValue], viewerFriends.OwnerID, lsBlob.HeaderFlags, viewerFriends.AreAcceptedBuddies)))
                {
                    // cache miss.  RP gets empty string;
                    rgRPStrings[iValue] = "";
                    continue;
                }

                // find the first matching locale.
                int iLocaleMatch = -1;
                for (int iLocale = 0; (iLocaleMatch == -1) && (iLocale < viewerLocales.Length); iLocale++)
                {
                    for (ushort iSupported = 0; iSupported < lsBlob.rgLocales.Length; iSupported++)
                    {
                        if (lsBlob.rgLocales[iSupported] == viewerLocales[iLocale])
                        {
                            iLocaleMatch = iSupported;
                            break;
                        }
                    }
                }
                if (iLocaleMatch == -1)
                {
                    // no match, use the default.
                    iLocaleMatch = 0;
                }

                RichPresenceData rich = (RichPresenceData)lsBlob.rgInnerBlobs[iLocaleMatch];

                rgRPStrings[iValue] = rich.sRichPresence;
            }

            return rgRPStrings;
        }

        internal static void WriteEmptyRichPresence(ulong qwUserID, uint dwHeaderFlags)
        {
            BaseDataHeader header = new BaseDataHeader(DATA_TYPES.eRichPresenceString);
            header.OwnerID = qwUserID;
            header.HeaderFlags = dwHeaderFlags;

            CacheUtil.OverwriteCache(header);
        }

        internal static unsafe void WriteRichPresence(ulong qwUserID, string[] locales, string[] rgLocalizedStrings, uint dwHeaderFlags)
        {
            LanguageSpecificData lsBlob = new LanguageSpecificData(DATA_TYPES.eRichPresenceString);
            lsBlob.OwnerID = qwUserID;
            lsBlob.HeaderFlags = dwHeaderFlags;
            lsBlob.rgLocales = locales;
            lsBlob.rgInnerBlobs = new BaseDataHeader[rgLocalizedStrings.Length];

            for (int iInner = 0; iInner < lsBlob.rgInnerBlobs.Length; iInner++)
            {
                RichPresenceData rich = new RichPresenceData();
                rich.header = lsBlob.header;
                rich.sRichPresence = rgLocalizedStrings[iInner];

                lsBlob.rgInnerBlobs[iInner] = rich;
            }

            CacheUtil.OverwriteCache(lsBlob);
        }

        public static PresenceRecord GetPresenceRecord(ulong qwUserID)
        {
            PresenceRecord record = new PresenceRecord(qwUserID);
            return (record.DoesExist() ? record : null);
        }

        /// <summary>
        /// Applies privilege bits to figure out if messages are allowed
        /// </summary>
        public static bool IsSharingAllowed(FriendsList senderFriends, ulong qwTarget, bool fShareEveryone, bool fShareFriends)
        {
            if (senderFriends.OwnerID == qwTarget)
            {
                return true;
            }
            if (fShareEveryone)
            {
                return true;
            }
            if (fShareFriends && senderFriends.IsAcceptedBuddy(qwTarget))
            {
                return true;
            }
            return false;
        }

        public static void SetFlushTickets(ulong qwUserID)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.Partition = ws.CalcPartition(qwUserID);
                ws.StoredProc = "dbo.p_pres_set_flush_tickets";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", qwUserID);

                ws.ExecuteNonQuery();

                uint hr = (uint)ws.GetIntParameter("@ret");
                if (hr != HResult.S_OK)
                {
                    throw new Exception("error calling " + ws.StoredProc + ": 0x" + hr.ToString("x"));
                }
            }
        }

        // Updates the user's name in their friends' lists.
        private static HResult UpdateNameOthers(ulong qwUserID, string szAccountName)
        {
            // The managed Webstore interface doesn't support the ALL_PARTITIONS flag, we must iterate over all deployed partitions.
            foreach (int partition in WSClient.GetPhysicalPartitions(ConfigUtil.UodbWebstoreApp))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.PhysicalPartition = partition;
                    ws.StoredProc = "dbo.p_pres_update_name_other";
                    ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                    ws.AddParameter("@bi_user_puid", qwUserID);
                    ws.AddParameter("@vc_gamertag", szAccountName);
                    ws.ExecuteNonQuery();

                    HResult hr = (uint)ws.GetIntParameter("@ret");
                    if (HResult.Failed(hr))
                    {
                        // Best-effort operation. We'll try again on the next Alive/Logon
                        return hr;
                    }
                }
            }

            return HResult.S_OK;
        }

        // Updates the user's own name so the name change routine won't trigger again on next Alive/Logon
        private static HResult UpdateNameSelf(ulong qwUserID, string szAccountName)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.Partition = ws.CalcPartition(qwUserID);
                ws.StoredProc = "dbo.p_pres_update_name_self";
                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", qwUserID);
                ws.AddParameter("@vc_gamertag", szAccountName);
                ws.ExecuteNonQuery();

                HResult hr = (uint)ws.GetIntParameter("@ret");
                if (HResult.Failed(hr))
                {
                    // We'll try again on the next Alive/Logon
                    return hr;
                }
            }

            return HResult.S_OK;
        }

        public static HResult UpdateNameAll(ulong qwUserID, string szAccountName)
        {
            HResult hr;

            try
            {
                hr = UpdateNameOthers(qwUserID, szAccountName);
                if (HResult.Failed(hr))
                {
                    return hr;
                }

                hr = UpdateNameSelf(qwUserID, szAccountName);
                if (HResult.Failed(hr))
                {
                    return hr;
                }

                return HResult.S_OK;
            }
            catch (Exception)
            {
                // don't throw out of this call.
                return HResult.XONLINE_E_DATABASE_ERROR;
            }
        }

        // Remove any related cache items for this user
        public static void PurgeUser(ulong qwUserID)
        {
            // Delete all known types associated to this user, out of the cache
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eInternalPresence, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eUserNeverList, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eUserPrivileges, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eBasicPresence, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eRichPresenceString, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eLimitedPresence, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eInvitation, qwUserID));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eUserQueue, qwUserID, (uint)P_QUEUE_TYPES.PQUEUE_BUDDY_REQ));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eUserQueue, qwUserID, (uint)P_QUEUE_TYPES.PQUEUE_LIST_CHANGE));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eUserQueue, qwUserID, (uint)P_QUEUE_TYPES.PQUEUE_INVITE));
            CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eUserQueue, qwUserID, (uint)P_QUEUE_TYPES.PQUEUE_INVITE_ANSWER));
            for (uint dwListType = 0; dwListType < PresDefs.NUM_STORED_AFFILIATE_LISTS; ++dwListType)
            {
                CacheUtil.RemoveFromCache(CacheUtil.BuildCacheKey(DATA_TYPES.eAffiliateList, qwUserID, dwListType));
            }
        }

        public static void AddAffiliates(ulong qwUserID, uint dwAffiliateType, ulong[] rgqwAffiliates, uint dwTitleID, uint mtDateUpdated)
        {
            AffiliateList list = AffiliateList.Load(qwUserID, dwAffiliateType);
            list.AddAffiliates(rgqwAffiliates, dwTitleID, mtDateUpdated);
            switch(dwAffiliateType)
            {
                case PresDefs.X_AFFILIATE_POSITIVE_FEEDBACK_INDEX:
                    // We like these users now, remove them from the negative feedback list
                    RemoveAffiliates(qwUserID, PresDefs.X_AFFILIATE_NEGATIVE_FEEDBACK_INDEX, rgqwAffiliates);
                    break;

                case PresDefs.X_AFFILIATE_NEGATIVE_FEEDBACK_INDEX:
                    // We don't like these users now, remove them from the positive feedback list
                    RemoveAffiliates(qwUserID, PresDefs.X_AFFILIATE_POSITIVE_FEEDBACK_INDEX, rgqwAffiliates);
                    // Negative feedback is reciprocal. Tell the targets that we're avoiding them now
                    foreach (ulong qwAffiliateID in rgqwAffiliates)
                    {
                        AddAffiliates(qwAffiliateID, PresDefs.X_AFFILIATE_AVOIDING_ME_INDEX, new ulong[] { qwUserID }, dwTitleID, mtDateUpdated);
                    }
                    break;

                case PresDefs.X_AFFILIATE_COMPLETED_GAME_INDEX:
                    // If adding to completed list, also add to the recent list
                    AddAffiliates(qwUserID, PresDefs.X_AFFILIATE_ENCOUNTERED_INDEX, rgqwAffiliates, dwTitleID, mtDateUpdated);
                    break;
            }
        }

        public static void RemoveAffiliates(ulong qwUserID, uint dwAffiliateType, ulong[] rgqwAffiliates)
        {
            AffiliateList list = AffiliateList.Load(qwUserID, dwAffiliateType);
            list.RemoveAffiliates(rgqwAffiliates);
        }

        public static Affiliate[] GetAffiliates(ulong qwUserID, uint dwAffiliateType)
        {
            AffiliateList list = AffiliateList.Load(qwUserID, dwAffiliateType);
            return list.rgAffiliates;
        }

        public static uint IsAffiliate(ulong qwUserID, ulong qwAffiliateID)
        {
            uint dwListFlags = 0;
            for (uint dwListType = 0; dwListType < PresDefs.NUM_STORED_AFFILIATE_LISTS; ++dwListType)
            {
                AffiliateList list = AffiliateList.Load(qwUserID, dwListType);
                if (list.IsAffiliate(qwAffiliateID))
                {
                    dwListFlags |= PresDefs.X_AFFILIATE_INDEX_TO_FLAG(dwListType);
                }
            }
            return dwListFlags;
        }

        public static MachineUserList GetMachineUserList(SGADDR sgaddr)
        {
            string key = CacheUtil.BuildCacheKey(DATA_TYPES.eMachineUserList, ((ulong)sgaddr.inaSg << 32) | sgaddr.dwSpiSg);
            MachineUserList list = (MachineUserList)CacheUtil.ReadFromCache(key);

            if (list == null)
            {
                list = new MachineUserList();
                list.sgaddr = sgaddr;
                list.OwnerID = ((ulong)sgaddr.inaSg << 32) | sgaddr.dwSpiSg;
            }

            return list;
        }

        public static void AddUserToMachine(ulong qwUserID, SGADDR sgaddr)
        {
            MachineUserList list = null;
            uint result;
            do
            {
                list = GetMachineUserList(sgaddr);

                // copy the old list
                ulong[] newlist = new ulong[list.rgUsersLen + 1];
                for (int iUser = 0; iUser < list.rgUsersLen; iUser++)
                {
                    if (list.rgUsers[iUser] == qwUserID)
                    {
                        // user already on this machine.
                        return;
                    }
                    newlist[iUser] = list.rgUsers[iUser];
                }

                // add the new user.
                newlist[list.rgUsersLen] = qwUserID;

                list.rgUsers = newlist;
                list.rgUsersLen = list.rgUsers.Length;

                result = CacheUtil.WriteToCache(list);
            }
            while (result == HResult.E_ACCESSDENIED);
        }

        /// <summary>
        /// This method is the uber method for nuking a user
        /// Clears up user presence and subscriptions and general good stuff
        /// </summary>
        /// <param name="qwUserId"></param>
        public static void KillUser(PresenceRecord record)
        {
            if (null != record)
            {
                RemoveUserFromMachine(record.OwnerID, record.sgaddr);

                record.SetOffline();
                //Notify all friends, should be done above since we wrote the presence record.

                //Unsubscribe from all the buddies, this should be taken care of on the connection server, i.e. whoever
                //called the FD with DeadUser should expect that the connection server has received a disconnect
                //and cleaned up everything for that connection.

                PresenceRecord.ClearQueues(record.OwnerID);
            }
        }

        public static void RemoveUserFromMachine(ulong qwUserID, SGADDR sgaddr)
        {
            MachineUserList list = null;
            uint result;
            do
            {
                list = GetMachineUserList(sgaddr);

                if (list.rgUsersLen == 0)
                {
                    // empty list.
                    return;
                }

                // copy the old list
                ulong[] newlist = new ulong[list.rgUsersLen - 1];
                int iCopy = 0;
                for (int iUser = 0; iUser < list.rgUsersLen; iUser++)
                {
                    // copy the user
                    if (list.rgUsers[iUser] != qwUserID)
                    {
                        if (iCopy == newlist.Length)
                        {
                            // we didnt find the user.
                            return;
                        }

                        newlist[iCopy++] = list.rgUsers[iUser];
                    }
                }

                list.rgUsers = newlist;
                list.rgUsersLen = list.rgUsers.Length;

                result = CacheUtil.WriteToCache(list);
            }
            while (result == HResult.E_ACCESSDENIED);
        }

        // NOTE: the privileges returned here are not titleid specific.  we always pass the xenon dash for titleid.
        public static UserPrivileges GetUserPrivileges(ulong qwUserID)
        {
            return GetUserPrivileges(new ulong[]{qwUserID})[0];
        }

        public static UserPrivileges[] GetUserPrivileges(ulong[] qwUserIDs)
        {
            UserPrivileges[] rgPrivs = GetUserPrivilegesFromCache(qwUserIDs);
            var rgDBPrivs = new List<UserPrivileges>();
            for (int iUser = 0; iUser < qwUserIDs.Length; iUser++)
            {
                if (rgPrivs[iUser] == null)
                {
                    // TODO: this seems like it could be really bad.  perhaps we can come up with a subset of privileges
                    // TODO: and a faster sproc to retrieve them.  until then, oh well...
                    rgPrivs[iUser] = GetUserPrivilegesFromDatabase(qwUserIDs[iUser]);
                    rgDBPrivs.Add(rgPrivs[iUser]);
                }
            }
            if (rgDBPrivs.Count > 0)
            {
                WriteUserPrivilegesToCache(rgDBPrivs.ToArray());
            }

            return rgPrivs;
        }

        private static UserPrivileges[] GetUserPrivilegesFromCache(ulong[] qwUserIDs)
        {
            UserPrivileges[] rgPrivs = new UserPrivileges[qwUserIDs.Length];

            string[] rgKeys = new string[qwUserIDs.Length];
            for (int iKey = 0; iKey < rgKeys.Length; iKey++)
            {
                rgKeys[iKey] = CacheUtil.BuildCacheKey(DATA_TYPES.eUserPrivileges, qwUserIDs[iKey]);
            }

            BaseDataHeader[] rgItems = CacheUtil.ReadFromPresenceCache(rgKeys);
            Array.Copy(rgItems, rgPrivs, rgItems.Length);

            return rgPrivs;
        }

        public static void WriteUserPrivilegesToCache(UserPrivileges privs)
        {
            WriteUserPrivilegesToCache(new UserPrivileges[]{privs});
        }
        private static void WriteUserPrivilegesToCache(UserPrivileges[] rgPrivs)
        {
            CacheUtil.OverwritePresenceCache(rgPrivs);
        }

        private static unsafe UserPrivileges GetUserPrivilegesFromDatabase(ulong qwUserID)
        {
            byte[] privileges = new byte[32];

            using(WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.Partition = ws.CalcPartition(qwUserID);
                ws.StoredProc = "dbo.p_xkdc_get_user_privileges";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", qwUserID);
                ws.AddParameter("@i_title_id", XOn.XENON_DASH_TITLE_ID);
                ws.AddParameter(ParamType.OUTPUT, "@@b_privileges", privileges, 32);

                ws.ExecuteNonQuery();

                privileges = ws.GetByteArrayParameter("@@b_privileges");

                uint hr = (uint)ws.GetIntParameter("@ret");
                if (hr != HResult.S_OK)
                {
                    throw new Exception("error calling " + ws.StoredProc + ": 0x" + hr.ToString("x"));
                }
            }

            UserPrivileges privs = new UserPrivileges(qwUserID, privileges);

            return privs;
        }

        public static NeverList GetNeverList(ulong qwUserID)
        {
            return GetNeverList(new ulong[] { qwUserID })[0];
        }

        public static NeverList[] GetNeverList(ulong[] qwUserIDs)
        {
            NeverList[] rgNevers = GetNeverListFromCache(qwUserIDs);
            var rgDbNevers = new List<NeverList>();
            for (int iUser = 0; iUser < qwUserIDs.Length; iUser++)
            {
                if (rgNevers[iUser] == null)
                {
                    rgNevers[iUser] = GetNeverListFromDatabase(qwUserIDs[iUser]);
                    rgDbNevers.Add(rgNevers[iUser]);
                }
            }
            if (rgDbNevers.Count > 0)
            {
                WriteNeverListToCache(rgDbNevers.ToArray());
            }

            return rgNevers;
        }

        public static void RemoveUsersFromNeverList(ulong qwUserID, ulong[] users)
        {
            if (users == null || 0 == users.Length)
            {
                //There's obviously nothing to be done right?
                return;
            }

            //The DB is the authority, write to DB first.
            //Use a transaction scope for an all or nothing
            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, s_txnOptions))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
                {
                    foreach (ulong user in users)
                    {
                        RemoveUsersFromNeverListInDatabase(ws, qwUserID, user);
                    }
                }
                ts.Complete();
            }

            //Purge cache if removal is successful, next access will force a read from DB
            PurgeNeverListFromCache(qwUserID);
        }

        public static void AddUsersToNeverList(ulong qwUserID, ulong[] users)
        {
            if (users == null || 0 == users.Length)
            {
                //There's obviously nothing to be done right?
                return;
            }

            //The DB is the authority, write to DB first.
            //Use a transaction scope for an all or nothing
            using (TransactionScope ts = new TransactionScope(TransactionScopeOption.Required, s_txnOptions))
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
                {
                    foreach (ulong user in users)
                    {
                        //Cannot block userid 0
                        if (user == 0)
                        {
                            continue;
                        }
                        AddUsersToNeverListInDatabase(ws, qwUserID, user);
                    }
                }
                ts.Complete();
            }

            //Purge cache if removal is successful, next access will force a read from DB
            PurgeNeverListFromCache(qwUserID);
        }

        public static void PurgeNeverListFromCache(ulong qwUserID)
        {
            PurgeNeverListFromCache(new ulong[] { qwUserID });
        }

        public static void PurgeNeverListFromCache(ulong[] qwUserIDs)
        {
            string[] rgKeys = new string[qwUserIDs.Length];
            for (int iKey = 0; iKey < rgKeys.Length; iKey++)
            {
                rgKeys[iKey] = CacheUtil.BuildCacheKey(DATA_TYPES.eUserNeverList, qwUserIDs[iKey]);
            }

            CacheUtil.RemoveFromPresenceCache(rgKeys);
        }

        public static void WriteNeverListToCache(NeverList neverList)
        {
            WriteNeverListToCache(new NeverList[] { neverList });
        }

        public static void WriteNeverListToCache(NeverList[] rgNeverLists)
        {
            CacheUtil.OverwritePresenceCache(rgNeverLists);
        }

        private static NeverList GetNeverListFromCache(ulong qwUserID)
        {
            return GetNeverListFromCache(new ulong[] { qwUserID })[0];
        }

        private static NeverList[] GetNeverListFromCache(ulong[] qwUserIDs)
        {
            NeverList[] rgNevers = new NeverList[qwUserIDs.Length];

            string[] rgKeys = new string[qwUserIDs.Length];
            for (int iKey = 0; iKey < rgKeys.Length; iKey++)
            {
                rgKeys[iKey] = CacheUtil.BuildCacheKey(DATA_TYPES.eUserNeverList, qwUserIDs[iKey]);
            }

            BaseDataHeader[] rgItems = CacheUtil.ReadFromPresenceCache(rgKeys);
            Array.Copy(rgItems, rgNevers, rgItems.Length);

            return rgNevers;
        }

        private static void AddUsersToNeverListInDatabase(WSClient ws, ulong qwUserID, ulong userToAdd)
        {
            ws.Partition = ws.CalcPartition(qwUserID);
            ws.StoredProc = "dbo.p_xmsg_user_block_user";

            ws.AddParameter(ParamType.RETVAL, "@ret", 0);
            ws.AddParameter("@bi_user_puid", qwUserID);
            ws.AddParameter("@bi_block_puid", userToAdd);

            ws.ExecuteNonQuery();

            uint hr = (uint)ws.GetIntParameter("@ret");
            if (hr != HResult.S_OK)
            {
                throw new XRLException(hr, XEvent.Id.PRESENCE_NEVERLIST_ADD_ERROR,
                    "AddUserToNeverList: failed to add user to never list.  userid: {0}, targetid: {1}, hr: {2}",
                    (Puid)qwUserID,
                   (Puid)userToAdd,
                    hr);
            }
            ws.ClearParameters();
        }

        private static void RemoveUsersFromNeverListInDatabase(WSClient ws, ulong qwUserID, ulong userToRemove)
        {
            ws.Partition = ws.CalcPartition(qwUserID);
            ws.StoredProc = "dbo.p_xmsg_user_unblock_user";

            ws.AddParameter(ParamType.RETVAL, "@ret", 0);
            ws.AddParameter("@bi_user_puid", qwUserID);
            ws.AddParameter("@bi_block_puid", userToRemove);

            ws.ExecuteNonQuery();

            uint hr = (uint)ws.GetIntParameter("@ret");
            if (hr != HResult.S_OK)
            {
                throw new XRLException(hr, XEvent.Id.PRESENCE_NEVERLIST_DELETE_ERROR,
                    "AddUserToNeverList: failed to delete user from never list.  userid: {0}, targetid: {1}, hr: {2}",
                    (Puid)qwUserID,
                   (Puid)userToRemove,
                    hr);
            }
            ws.ClearParameters();
        }

        private static NeverList GetNeverListFromDatabase(ulong qwUserID)
        {
            NeverList neverList = new NeverList();
            neverList.OwnerID = qwUserID;
            List<ulong> lNevers = new List<ulong>();

            using(WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.Partition = ws.CalcPartition(qwUserID);
                ws.StoredProc = "dbo.p_xprof_get_never_list";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", qwUserID);

                WstDataReader reader = ws.Execute();

                while (reader.HasRows && reader.Read())
                {
                    ulong qwNever = (ulong)(long)reader["bi_never_puid"];
                    lNevers.Add(qwNever);
                }
            }

            neverList.rgNevers = lNevers.ToArray();
            neverList.rgNeversLen = neverList.rgNevers.Length;

            return neverList;
        }

        #region Handling Invitations - record of users that have been invited to a particular user's session

        public static void ClearSpecificInvitation(ulong qwSenderID, ulong qwSessionID)
        {
            ClearInvitationInternal(qwSenderID, qwSessionID, false);
        }

        public static void PreserveSpecificInvitation(ulong qwSenderID, ulong qwSessionID)
        {
            ClearInvitationInternal(qwSenderID, qwSessionID, true);
        }

        protected static void ClearInvitationInternal(ulong qwSenderID, ulong qwSessionID, bool fKeep)
        {
            Invitation emptyInvite = new Invitation(qwSenderID);
            Invitation oldInvite = null;
            string sInviteKey = CacheUtil.BuildCacheKey(DATA_TYPES.eInvitation, qwSenderID);
            do
            {
                oldInvite = (Invitation)CacheUtil.ReadFromCache(sInviteKey);

                if ((oldInvite == null) || (oldInvite.qwMatchSessionID == 0) ||
                    (fKeep == (oldInvite.qwMatchSessionID == qwSessionID)))
                {
                    return;
                }

                emptyInvite.dwVersion = oldInvite.dwVersion;
            }
            while (CacheUtil.WriteToCache(emptyInvite) == HResult.E_ACCESSDENIED);

            RevokeInvitees(qwSenderID, oldInvite.qwInvitees, oldInvite.qwMatchSessionID);
        }

        public static ulong[] CreateOrAddInvite(ulong qwSenderID, uint dwTitleID, ulong qwMatchSessionID, ulong[] qwInviteeIDs)
        {
            ulong[] qwNewInvitees;
            string sInviteKey = CacheUtil.BuildCacheKey(DATA_TYPES.eInvitation, qwSenderID);
            uint result;
            Invitation oldInvitation;
            do
            {
                Invitation invitation;
                oldInvitation = (Invitation)CacheUtil.ReadFromCache(sInviteKey);
                if ((oldInvitation != null) && (oldInvitation.dwTitleID == dwTitleID) && (oldInvitation.qwMatchSessionID == qwMatchSessionID))
                {
                    // If there's an existing invitation for the current session just add the new invitees
                    invitation = oldInvitation;
                    oldInvitation = null;
                }
                else
                {
                    // If a new invitation is required, clear any previously existing invitation and create a new one
                    invitation = new Invitation(qwSenderID);
                    invitation.dwVersion = (oldInvitation != null) ? oldInvitation.dwVersion : 0;
                    invitation.dwTitleID = dwTitleID;
                    invitation.qwMatchSessionID = qwMatchSessionID;
                }

                qwNewInvitees = invitation.AddInvitees(qwInviteeIDs);

                result = CacheUtil.WriteToCache(invitation);
            }
            while (result == HResult.E_ACCESSDENIED);

            if (oldInvitation != null)
            {
                RevokeInvitees(qwSenderID, oldInvitation.qwInvitees, oldInvitation.qwMatchSessionID);
            }

            return qwNewInvitees;
        }

        public static HResult RevokeInvitees(ulong qwHostID, ulong[] qwInvitees, ulong qwMatchSessionID)
        {
            if ((qwInvitees == null) || (qwInvitees.Length == 0))
            {
                // nothing to revoke.
                return HResult.S_FALSE;
            }

            // For each of the selected invitees, revoke the previous invitation message
            RecipientResult[] rgRecipients = new RecipientResult[qwInvitees.Length];
            for (int i = 0; i < qwInvitees.Length; ++i)
            {
                rgRecipients[i] = new RecipientResult();
                rgRecipients[i].dwMessageID = 0;
                rgRecipients[i].qwUserID = qwInvitees[i];
            }

            uint dwFlags =
                MsgDefs.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_PROP |
                MsgDefs.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_TYPE |
                MsgDefs.XMSG_REVOKE_MESSAGE_EX_FLAG_USE_SENDER;

            MsgReqInternal req = new MsgReqInternal();
            return req.RevokeMessageEx(
                qwHostID,                                           // qwSenderId
                0,                                                  // qwSenderContext
                MsgDefs.XONLINE_MSG_TYPE_GAME_INVITE,               // bMessageType
                dwFlags,                                            // dwFlags
                rgRecipients,                                       // rgRecipients
                MsgDefs.XONLINE_MSG_PROP_SESSION_ID,                // wPropTag
                BitConverter.GetBytes(qwMatchSessionID)             // rgbProp
                );
        }

        public static bool RemoveInvitees(ulong qwHostID, ulong[] qwInvitees, ulong qwMatchSessionID)
        {
            string sInviteKey = CacheUtil.BuildCacheKey(DATA_TYPES.eInvitation, qwHostID);
            bool fChanged;
            uint result;
            do
            {
                fChanged = false;
                result = HResult.S_OK;
                Invitation invitation = (Invitation)CacheUtil.ReadFromCache(sInviteKey);
                if (invitation != null && invitation.qwMatchSessionID == qwMatchSessionID)
                {
                    fChanged = invitation.RemoveInvitees(qwInvitees);
                    if (fChanged)
                    {
                        result = CacheUtil.WriteToCache(invitation);
                    }
                }
            }
            while (result == HResult.E_ACCESSDENIED);
            return fChanged;
        }

        #endregion

        public static bool IsXOnWatchIP(IPAddress addr)
        {
            string sXonWatchIps = Config.GetSetting(Setting.presence_XonWatchIPs);
            string[] rgsXonWatchIps = sXonWatchIps.Split(new string[]{", ", "; "}, StringSplitOptions.None);

            for (int iIp = 0; iIp < rgsXonWatchIps.Length / 2; iIp++)
            {
                IPAddress ip = IPAddress.Parse(rgsXonWatchIps[iIp * 2]);
                IPAddress mask = IPAddress.Parse(rgsXonWatchIps[(iIp * 2) + 1]);

                uint dwip = BitConverter.ToUInt32(ip.GetAddressBytes(), 0);
                uint dwmask = BitConverter.ToUInt32(mask.GetAddressBytes(), 0);
                uint dwaddr = BitConverter.ToUInt32(addr.GetAddressBytes(), 0);

                if ((dwaddr & dwmask) == (dwip & dwmask))
                {
                    return true;
                }
            }

            return false;
        }

        
    }

    public class PresenceEvents
    {
        private static readonly PresenceEvents pe = new PresenceEvents();

        public class LoginChangeEventArgs : EventArgs
        {
            public ulong Xuid;
            public uint TitleId;
            public uint Privacy;
            public uint PlatformType;
            public XBOX_LIBRARY_VERSION ClientVersion;
        }
        public static event EventHandler<LoginChangeEventArgs> LoginChange;
        
        public class AnnounceEventArgs : EventArgs
        {
            public ulong Xuid;
            public uint TitleId;
            public uint Privacy;
            public uint PlatformType;
            public XBOX_LIBRARY_VERSION ClientVersion;
        }
        public static event EventHandler<AnnounceEventArgs> Announce;
        
        public class TitleIdChangeEventArgs : EventArgs
        {
            public ulong Xuid;
            public uint TitleId;
            public uint Privacy;
            public uint PlatformType;
            public XBOX_LIBRARY_VERSION ClientVersion;
        }
        public static event EventHandler<TitleIdChangeEventArgs> TitleIdChange;
        
        public class FriendsChangeEventArgs : EventArgs
        {
            public ulong Xuid1;
            public ulong Xuid2;
            public bool AreFriends;
        }
        public static event EventHandler<FriendsChangeEventArgs> FriendsChange;

        public static void PublishLoginChange(LoginChangeEventArgs args)
        {
            pe.OnLoginChange(args);
        }

        public static void PublishAnnounce(AnnounceEventArgs args)
        {
            pe.OnAnnounce(args);
        }

        public static void PublishTitleIdChange(TitleIdChangeEventArgs args)
        {
            pe.OnTitleIdChange(args);
        }

        public static void PublishFriendsChange(FriendsChangeEventArgs args)
        {
            pe.OnFriendsChange(args);
        }
             
        private void OnLoginChange(LoginChangeEventArgs args)
        {
            EventHandler<LoginChangeEventArgs> temp = LoginChange;
            if (temp != null)
            {
                temp(this, args);
            }
        }

        private void OnAnnounce(AnnounceEventArgs args)
        {
            EventHandler<AnnounceEventArgs> temp = Announce;
            if (temp != null)
            {
                temp(this, args);
            }
        }

        private void OnTitleIdChange(TitleIdChangeEventArgs args)
        {
            EventHandler<TitleIdChangeEventArgs> temp = TitleIdChange;
            if (temp != null)
            {
                temp(this, args);
            }
        }

        private void OnFriendsChange(FriendsChangeEventArgs args)
        {
            EventHandler<FriendsChangeEventArgs> temp = FriendsChange;
            if (temp != null)
            {
                temp(this, args);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\HealthCheck.cs ===
using System;
using System.Collections;
using System.Collections.Generic;

using xonline.common.service;

using xonline.common.community;
using xonline.common.community.socialquery.protocol;

namespace xonline.common.community.socialquery
{
    public abstract class HealthCheckBase : SocialQueryUserListProcessor
    {
        // api specific data
        protected HelloMessage message = null;        
    }

    public enum HealthStatus
    {
        Green = 0,
        Yellow = 1,
        Red = 2,
    }

    // The FD specific version of the ISocialQueryProcessor implementation for the HealthCheck API
    public class HealthCheckFD : HealthCheckBase
    {
        private readonly ISocialCacheProxy scinhProxy;

        private Dictionary<uint, uint> scodes = new Dictionary<uint, uint>(); // map server index to scode it returns
        
        public HealthCheckFD(ISocialCacheProxy proxy)
        {
            scinhProxy = proxy;
            message = new HelloMessage();
        }

        public uint[] Hrs
        {
            get
            {
                if (scodes.Count == 0)
                {
                    ProcessRequest();                    
                }

                uint[] rgScodes = new uint[scodes.Count];
                foreach (KeyValuePair<uint, uint> kvp in scodes)
                {
                    rgScodes[kvp.Key] = rgScodes[kvp.Value];
                }

                return rgScodes;
            }
        }

        public HealthStatus Status
        {
            get
            {
                if (scodes.Count == 0) // no scodes, means the health check hasn't been done yet
                {
                    ProcessRequest();
                }

                if (Failures == 0)
                {
                    return HealthStatus.Green;
                }
                else if (Failures == scodes.Count)
                {
                    return HealthStatus.Red;
                }

                return HealthStatus.Yellow;                
            }
        }

        public uint Failures
        {
            get
            {
                if (scodes.Count == 0) // no scodes, means the health check hasn't been done yet
                {
                    ProcessRequest();
                }

                uint failures = 0;
                foreach (KeyValuePair<uint, uint> kvp in scodes)
                {
                    if (kvp.Value != HResult.S_OK)
                    {
                        failures++;
                    }                        
                }
                
                return failures;
            }
        }
        
        public override void ProcessRequest()
        {
            Gather();            
        }

        public override void Gather()
        {
            // send broadcast message to every INH in rotation via the social cache proxy            
            scinhProxy.BroadcastMessage(message, ProcessConnectionContext);
        }

        // delegate for handling of all of the proxy broadcast responses from each INH
        internal void ProcessConnectionContext(SocialCacheInhConnectionContext context)
        {
            uint hr = HResult.S_OK;

            if (context._wtObject == null)
            {
                hr = HResult.E_FAIL;
            }
            else if (context._wtObject._response == null)
            {
                // we got nothing back from the the social cache INH.
                hr = HResult.E_ABORT;
            }
            else
            {
                try
                {
                    // parse the reply.        
                    HelloReply reply = new HelloReply();
                    reply.ReadBytes(context._wtObject._response);
                    hr = reply.hr;
                }
                catch (Exception e)
                {
                    // Cast ISocialCacheProxy back to SocialCacheProxy so I can call a non-interface 
                    // public method (GetExtendedError). 
                    SocialCacheProxy proxy = (SocialCacheProxy)scinhProxy; 
                    hr = proxy.GetExtendedError(e, context._wtObject._response);
                }
            }

            scodes[context._wtObject._bucket] = hr;                      
        }

        public override void Reply()
        {
            // Currently, the FD doesn't reply... but this is where the FD could put logic to reply to the client (such as the console)
        }
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\socialcacheprot.cs ===
﻿using System;
using System.Collections;
using System.Diagnostics;
using System.IO;
using System.Runtime.InteropServices;
using System.Text;

using xonline.common.service;
using xonline.common.protocol;
using xonline.common.protocol.socialquery;

namespace xonline.common.community.socialquery.protocol
{
    // Schema identifier for messages.
    public enum SOCIALCACHE_MESSAGE_TYPES : uint
    {
        /* IF YOU ADD ANYTHING HERE, ALSO ADD TO SocialCacheDefs.MessageTypeToString() BELOW! */

        // MIN_REQUEST_TYPE
        eHelloINH = 100,
        eGetFriendsINH = 101,
        // MAX_REQUEST_TYPE

        // MIN_REPLY_TYPE
        eErrorINHReply = 300,
        eHelloINHReply = 301,
        eGetFriendsINHReply = 302,
        // MAX_REPLY_TYPE
    };

    public class SocialCacheDefs
    {
        // protocol version.
        public const int CURRENT_PROTOCOL_VERSION = 1;
        public const uint MIN_REQUEST_TYPE = 100;
        public const uint MAX_REQUEST_TYPE = 101;
        public const uint MIN_REPLY_TYPE = 300;
        public const uint MAX_REPLY_TYPE = 302;
        public const uint MESSAGE_HEADER_SIZE = 20; // sizeof(SOCIALCACHE_BASE_MESSAGE_HEADER)

        public static string MessageTypeToString(uint dwMessageType)
        {
            switch (dwMessageType)
            {
                case (uint)SOCIALCACHE_MESSAGE_TYPES.eHelloINH: return "eHelloINH";
                case (uint)SOCIALCACHE_MESSAGE_TYPES.eGetFriendsINH: return "eGetFriendsINH";

                case (uint)SOCIALCACHE_MESSAGE_TYPES.eErrorINHReply: return "eErrorINHReply";
                case (uint)SOCIALCACHE_MESSAGE_TYPES.eHelloINHReply: return "eHelloINHReply";
                case (uint)SOCIALCACHE_MESSAGE_TYPES.eGetFriendsINHReply: return "eGetFriendsINHReply";

                default: return dwMessageType.ToString();
            }
        }
    }

    // header for all API message types in the social cache system.
    // NOTE: THIS NEEDS TO MATCH THE CLASS DEFINITION OF SocialCacheMessageHeader BELOW
    [StructLayout(LayoutKind.Sequential, Pack=1)]
    public struct SOCIALCACHE_BASE_MESSAGE_HEADER
    {
        // Protocol version identifier.
        public uint dwProtocolVersion;

        // API identifier.  see SOCIALCACHE_MESSAGE_TYPES.
        public uint dwMessageType;

        // Sequence number.
        public uint dwSeqNum;

        // Total size of the message, including sizeof(SOCIALCACHE_BASE_MESSAGE_HEADER).
        public uint dwTotalSize;

        // Extra flags for this message.
        public uint dwHeaderFlags;
    };

    // header for all API message types in the social cache system.
    // NOTE: THIS NEEDS TO MATCH THE STRUCT DEFINITION OF SOCIALCACHE_BASE_MESSAGE_HEADER ABOVE
    public class SocialCacheMessageHeader : WireData
    {
        // Protocol version identifier.
        public uint dwProtocolVersion;

        // API identifier.  see SOCIALCACHE_MESSAGE_TYPES.
        public uint dwMessageType;

        // Sequence number.
        public uint dwSeqNum;

        // Total size of the message, including sizeof(SOCIALCACHE_BASE_MESSAGE_HEADER).
        public uint dwTotalSize;

        // Extra flags for this message.
        public uint dwHeaderFlags;

        public SocialCacheMessageHeader()
        {
        }

        public SocialCacheMessageHeader(SOCIALCACHE_MESSAGE_TYPES type)
        {
            dwProtocolVersion = SocialCacheDefs.CURRENT_PROTOCOL_VERSION;
            dwMessageType = (uint)type;
        }

        public override void WriteStream(Stream stream)
        {
            long startPos = stream.Position;
            base.WriteStream(stream);
            ushort cbSize = (ushort)(stream.Position - startPos);

            MemoryStream memoryStream = (MemoryStream)stream;
            byte[] buffer = memoryStream.GetBuffer();
            unsafe
            {
                if(cbSize < sizeof(SOCIALCACHE_BASE_MESSAGE_HEADER))
                {
                    // data integrity error.
                    // TODO: what do we do here? Should we even guard this?
                    throw new Exception("WireData did not serialize the entire message.");
                }
                fixed (byte* pBuffer = &(buffer[startPos]))
                {
                    SOCIALCACHE_BASE_MESSAGE_HEADER* pHeader = (SOCIALCACHE_BASE_MESSAGE_HEADER*)pBuffer;
                    pHeader->dwTotalSize = cbSize;
                }
            }
        }
    }

    public class ErrorReply : SocialCacheMessageHeader
    {
        // return code.
        public uint hr;

        public ErrorReply(SOCIALCACHE_MESSAGE_TYPES type)
            : base(type)
        {
        }
    }

    #region Hello Request

    public class HelloMessage : SocialCacheMessageHeader
    {
        public HelloMessage()
            : base(SOCIALCACHE_MESSAGE_TYPES.eHelloINH)
        {
        }
    }

    public class HelloReply : ErrorReply
    {
        public HelloReply()
            : base(SOCIALCACHE_MESSAGE_TYPES.eHelloINHReply)
        {
        }
    }

    #endregion

    #region GetFriendsINH Request

    public class GetFriendsINHRequest : SocialCacheMessageHeader
    {
        public GetFriendsXrlRequest data;

        public GetFriendsINHRequest()
            : base(SOCIALCACHE_MESSAGE_TYPES.eGetFriendsINH)
        {
        }
    }

    public class GetFriendsINHReply : ErrorReply
    {
        /// <summary>
        /// The version of the friend list
        /// </summary>
        public uint FriendListVersion;

        /// <summary>
        /// The total number of users in the response set
        /// </summary>
        public uint TotalNumUsers;

        /// <summary>
        /// The start index of the page within the total set
        /// </summary>
        public uint PageStartIndex;

        /// <summary>
        /// The number of friends in this page
        /// </summary>
        public uint NumSqFriends;

        /// <summary>
        /// The page of results
        /// </summary>
        [WireInfo(SizeParam = "NumSqFriends")]
        public SocialQueryUser[] Friends;

        public GetFriendsINHReply()
            : base(SOCIALCACHE_MESSAGE_TYPES.eGetFriendsINHReply)
        {
        }
    }

    #endregion

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\SocialCacheInhConnectionContext.cs ===
﻿using System;
using System.Threading;
using xonline.common.community.socialquery.protocol;

using xonline.common.mgmt;

namespace xonline.common.community.socialquery
{
    public class SocialCacheInhConnectionContext 
    {        
        public SocialCacheWaitTableObject _wtObject;
        public ManualResetEvent _event = null;

        public SocialCacheInhConnectionContext(SocialCacheMessageHeader request)
        {
            _wtObject = new SocialCacheWaitTableObject(this, request);
            _event = new ManualResetEvent(false);
        }

        internal uint SequenceNumber
        {
            get
            {
                return _wtObject._seqnum;
            }
            set
            {
                _wtObject._seqnum = value;
            }
        }

        internal long WaitTimeElapsed
        {
            get
            {
                return _wtObject._waitTime.TimeElapsed;
            }
        }

        internal XomRequestTimeElapsed WaitTime
        {
            get
            {
                return _wtObject._waitTime;
            }
            set
            {
                _wtObject._waitTime = value;
            }
        }

        internal SocialCacheMessageHeader Message
        {
            get
            {
                return _wtObject._request;
            }
            set
            {
                _wtObject._request = value;
            }
        } 
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\socialcacheproxy.cs ===
﻿using System;
using System.Threading;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.community.socialquery.protocol;

[assembly: XomAreaDefinition(XomAreaName.SocialCacheConnection)]

namespace xonline.common.community.socialquery
{
    public delegate void ProcessConnectionContext(SocialCacheInhConnectionContext context);

    public interface ISocialCacheProxy
    {
        uint Query(ulong xuid, SocialCacheMessageHeader message, out ErrorReply reply);
        void BroadcastMessage(SocialCacheMessageHeader message, ProcessConnectionContext processConnectionContext);
    }


    public class SocialCacheProxy : ISocialCacheProxy
    {        
        static private ReaderWriterLock _rwlProxyInstance = new ReaderWriterLock();
        static private ReaderWriterLock _rwlConnectionPools = new ReaderWriterLock();
        static private ReaderWriterLock _rwlBucketMap = new ReaderWriterLock();

        private SocialCacheInhConnectionHandler[] _connectionPools; // there will be 1 connection pool per INH

        private int[] _bucketMap = null;

        // internal consts
        private const int LOCK_TIMEOUT = 30000; // Should this be configurable?  It's not in other places... If not, perhaps consolidate somewhere then?
        private const int REPLY_TIMEOUT = 5000;

        private static SocialCacheProxy _instance = null;

        public static ISocialCacheProxy Instance
        {
            get
            {
                _rwlProxyInstance.AcquireReaderLock(LOCK_TIMEOUT);
                try
                {
                    if (_instance == null)
                    {
                        LockCookie lc = _rwlProxyInstance.UpgradeToWriterLock(LOCK_TIMEOUT);
                        try
                        {
                            if (_instance == null)
                            {
                                _instance = new SocialCacheProxy();
                            }
                        }
                        finally
                        {
                            _rwlProxyInstance.DowngradeFromWriterLock(ref lc);
                        }
                    }
                }
                finally
                {
                    _rwlProxyInstance.ReleaseReaderLock();
                }

                return _instance;
            }
        }

        private uint GetNumBuckets
        {
            get
            {
                uint cBuckets = 0;
                _rwlBucketMap.AcquireReaderLock(LOCK_TIMEOUT);
                cBuckets = (uint)_bucketMap.Length;
                _rwlBucketMap.ReleaseReaderLock();
                return cBuckets;
            }
        }

        private uint GetNumServers
        {
            get
            {
                uint cServers = 0;
                _rwlConnectionPools.AcquireReaderLock(LOCK_TIMEOUT);
                cServers = (uint)_connectionPools.Length;
                _rwlConnectionPools.ReleaseReaderLock();
                return cServers;
            }
        } 

        // singleton pattern (private ctor -- only can instantiate the proxy via the instance accessor above)
        // which returns only the ISocialCacheProxy interface reference.
        // Also, because this object is a singleton, there is no need to guard data within the ctor against
        // concurrency risks.
        private SocialCacheProxy() 
        {
            // setup config change handlers.
            Config.InterfaceBucketChange += new InterfaceBucketChangeEventHandler(ChangeBucketMap);
            Config.ServerListChange += new ServerListChangeEventHandler(ChangeServerList);            

            // first get the servers.
            string[] serverList = Config.GetServerListByInterface(Interface.SocialCache);

            _connectionPools = new SocialCacheInhConnectionHandler[serverList.Length];

            for (int iServer = 0; iServer < _connectionPools.Length; iServer++)
            {
                IInterfaceInfo iface = Config.GetInterface(serverList[iServer], Interface.SocialCache);

                // create the new InhConnection object
                Xom.Trace(XomAreaName.SocialCacheConnection,
                    LogLevel.L_NORMAL,
                    "SocialCacheInhConnection.InitConnections: creating new InhConnection to Inh server "
                    + iServer.ToString()
                    + ", IP address "
                    + iface.IPAddressString);

                _connectionPools[iServer] = new SocialCacheInhConnectionHandler(serverList[iServer], iServer);
            }

            // now we have to make the bucket map.             
            _bucketMap = new int[Config.GetBucketCount(Interface.SocialCache)];

            for (int iBucket = 0; iBucket < _bucketMap.Length; iBucket++)
            {
                _bucketMap[iBucket] = -1;

                IBucketServer b = Config.GetBucketServer(Interface.SocialCache, (uint)iBucket);

                // find this bucket's server in the list of servers
                for (int iServer = 0; iServer < serverList.Length; iServer++)
                {
                    if (0 == String.Compare(b.CurrentServerName, serverList[iServer], StringComparison.OrdinalIgnoreCase))
                    {
                        // found it.
                        _bucketMap[iBucket] = iServer;
                        break;
                    }
                }

                if (_bucketMap[iBucket] == -1)
                {
                    Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_BUCKET_MAP_FAILED, "Could not map bucket " + iBucket.ToString() + "to server " + b.CurrentServerName);
                }
            }         
        }              

        internal void HashRequestToBucket(ulong xuid, SocialCacheInhConnectionContext context)
        {
            // TODO(joelwi): This is where affinity takes place.  We need to implement our logic here to know what SC INH to hit
            // based on the provided user XUID contained int he request.  For now, just use a modulo based on the number of 
            // social cache INH servers in rotation.  This will be thrown away in lieu of our consistent hashing logic later.   
            context._wtObject._bucket = ((uint)(xuid % GetNumBuckets));
        }

        internal void SendContext(ulong xuid, SocialCacheInhConnectionContext context)
        {
            int timeout;
            try
            {
                timeout = Config.GetIntSetting(Setting.SocialCache_replyTimeoutMS);
                if (timeout == 0)
                {
                    // this means social cache is disabled.  dont bother trying to send anything. 
                    return;
                }
            }
            catch (Exception)
            {
                // If the setting doesn't exist, use default value
                timeout = REPLY_TIMEOUT;
            }

            HashRequestToBucket(xuid, context);

            SocialCacheInhConnectionHandler pool = null;            
            
            int iServer;

            _rwlBucketMap.AcquireReaderLock(LOCK_TIMEOUT);
            try
            {
                iServer = _bucketMap[context._wtObject._bucket];
            }
            finally
            {
                _rwlBucketMap.ReleaseReaderLock();
            }

            _rwlConnectionPools.AcquireReaderLock(LOCK_TIMEOUT);
            try
            {            
                if (iServer != -1)
                {
                    pool = _connectionPools[iServer];
                }
            }
            finally
            {
                _rwlConnectionPools.ReleaseReaderLock();
            }

            if (context._wtObject != null)
            {
                if (pool.InhConnection.PassesFastFailCheck())
                {                    
                    pool.AddToSendQueue(context);   // queue the connection context for processing
                }
                else
                {
                    context._wtObject = null;
                }                
            }

            if (!(context._event.WaitOne(timeout, false)))
            {
                // timed out.  find the missing reply and remove its context from waittables.
                if ((context._wtObject != null) && (context._wtObject._response == null))
                {
                    pool.TimeoutContext(context);
                }
            }            
        }

        public uint GetExtendedError(Exception e, byte[] rgbStream)
        {
            if (e is XRLException)
            {
                XRLException xrle = (XRLException)e;

                // check for a failure code from the inh server.
                if ((xrle.HResult == HResult.XONLINE_E_END_OF_STREAM) &&
                    (rgbStream != null))
                {
                    try
                    {
                        ErrorReply response = new ErrorReply(SOCIALCACHE_MESSAGE_TYPES.eErrorINHReply);
                        response.ReadBytes(rgbStream);

                        // return the hr from the server.
                        return (uint)response.hr;
                    }
                    catch (Exception)
                    {
                        // couldnt get anything more.  we can eat this exception.
                    }
                }

                Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_REQUEST_FAILED, e, "SocialCache caught an XRLException (via GetExtendedError)");

                // return exception failure.
                return xrle.HResult;
            }
            else
            {
                Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_REQUEST_FAILED, e, "SocialCache caught an exception (via GetExtendedError)");

                // generic send failure.
                return HResult.E_ABORT;
            }
        }

        // Send the message to every INH server currently in rotation.
        // No hashing user xuid is required, because every server gets exactly 1 message.
        public void BroadcastMessage(SocialCacheMessageHeader message, ProcessConnectionContext processConnectionContext)
        {
            SocialCacheInhConnectionContext context = new SocialCacheInhConnectionContext(message);

            uint cServers = GetNumServers;

            for (uint iServer = 0; iServer < cServers; iServer++)
            {
                // the server index becomes the "xuid" passed into SendContext because it should hash
                // to a single unique server in rotation just like a xuid does. The difference, is that
                // this loop should send the message to every unique socialcache INH server in rotation, 
                // whereas a non-broadcast message (via Query) would only hit a single INH with its message.
                SendContext(iServer, context);

                processConnectionContext(context);
            }
        }
               
        public uint Query(ulong xuid, SocialCacheMessageHeader message, out ErrorReply reply)
        {
            SocialCacheInhConnectionContext context = new SocialCacheInhConnectionContext(message);

            reply = null;

            SendContext(xuid, context);

            uint hr = HResult.S_OK;

            if (context._wtObject == null)
            {
                hr = HResult.E_FAIL;
            }
            else if (context._wtObject._response == null)
            {
                // we got nothing back from the the social cache INH.
                hr = HResult.E_ABORT;
            }

            if (context._wtObject._response != null)
            {
                try
                {
                    // parse the reply.
                    switch (message.dwMessageType)
                    {
                        case (uint)SOCIALCACHE_MESSAGE_TYPES.eGetFriendsINH:
                            reply = new GetFriendsINHReply();
                            break;

                        default:
                            throw new Exception("Uknown social cache INH message encountered.");
                    }

                    reply.ReadBytes(context._wtObject._response);
                }
                catch (Exception e)
                {
                    reply.hr = GetExtendedError(e, context._wtObject._response);
                }
            }

            if (reply != null)
            {
                hr = reply.hr;
            }

            return hr;
        }

        public void ChangeServerList(object sender, ServerListChangeEventArgs e)
        {
            if (e.Interface != Interface.SocialCache)
            {
                // we're only concerned with socialcache's servers.
                return;
            }

            _rwlConnectionPools.AcquireReaderLock(LOCK_TIMEOUT);
            try
            {
                // build a translation map for the indices.
                int[] iIndexMap = new int[_connectionPools.Length];

                for (int iOldServer = 0; iOldServer < iIndexMap.Length; iOldServer++)
                {
                    iIndexMap[iOldServer] = -1;
                    for (int iNewServer = 0; iNewServer < e.ValueNew.Length; iNewServer++)
                    {
                        if (0 == String.Compare(_connectionPools[iOldServer].ServerName, e.ValueNew[iNewServer], StringComparison.OrdinalIgnoreCase))
                        {
                            iIndexMap[iOldServer] = iNewServer;
                        }
                    }
                }

                LockCookie lc = _rwlConnectionPools.UpgradeToWriterLock(LOCK_TIMEOUT);
                try
                {
                    // make a new connection list and copy over any old connections that still remain.
                    SocialCacheInhConnectionHandler[] newConnections = new SocialCacheInhConnectionHandler[e.ValueNew.Length];
                    for (int iOldServer = 0; iOldServer < _connectionPools.Length; iOldServer++)
                    {
                        if (iIndexMap[iOldServer] == -1)
                        {
                            // not in the map -- we dont need these servers anymore.                            
                            _connectionPools[iOldServer].Shutdown(false); // fWait == false
                        }
                        else
                        {
                            newConnections[iIndexMap[iOldServer]] = _connectionPools[iOldServer];
                        }

                        _connectionPools[iOldServer] = null;  // enable GC to collect old pool
                    }

                    // make new connection pools
                    for (int iNewServer = 0; iNewServer < newConnections.Length; iNewServer++)
                    {
                        if (newConnections[iNewServer] == null)
                        {
                            IInterfaceInfo iface = Config.GetInterface(e.ValueNew[iNewServer], Interface.SocialCache);

                            // create the new InhConnection object
                            Xom.Trace(XomAreaName.SocialCacheConnection,
                                LogLevel.L_NORMAL,
                                "SocialCacheInhConnection.ChangeServerList: creating new InhConnection to Inh server "
                                + iNewServer.ToString()
                                + ", IP address "
                                + iface.IPAddressString);

                            newConnections[iNewServer] = new SocialCacheInhConnectionHandler(e.ValueNew[iNewServer], iNewServer);
                        }
                    }

                    // switch to the new connection list
                    _connectionPools = newConnections;

                    // rearrange the bucket map
                    _rwlBucketMap.AcquireWriterLock(LOCK_TIMEOUT);
                    try
                    {
                        for (int iBucket = 0; iBucket < _bucketMap.Length; iBucket++)
                        {
                            _bucketMap[iBucket] = iIndexMap[_bucketMap[iBucket]];
                            if (_bucketMap[iBucket] == -1)
                            {
                                Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_SERVER_CHANGE_FAILED, "Could not map bucket " + iBucket.ToString() + "to server.  Check config for consistency.");
                            }
                        }
                    }
                    finally
                    {
                        _rwlBucketMap.ReleaseWriterLock();
                    }
                }
                finally
                {
                    _rwlConnectionPools.DowngradeFromWriterLock(ref lc);
                }
            }
            finally
            {
                _rwlConnectionPools.ReleaseReaderLock();
            }
        }

        public void ChangeBucketMap(object sender, InterfaceBucketChangeEventArgs e)
        {
            if (e.Interface != Interface.SocialCache)
            {
                // we're only concerned with socialcache's buckets.
                return;
            }

            if (0 == String.Compare(e.ValueNew.CurrentServerName, e.ValueOld.CurrentServerName, StringComparison.OrdinalIgnoreCase))
            {
                // no change that we care about.
                return;
            }

            bool fChanged = false;

            _rwlConnectionPools.AcquireReaderLock(LOCK_TIMEOUT);
            try
            {
                LockCookie lc = _rwlConnectionPools.UpgradeToWriterLock(LOCK_TIMEOUT);
                try
                {
                    _rwlBucketMap.AcquireWriterLock(LOCK_TIMEOUT);
                    try
                    {
                        for (int iServer = 0; iServer < _connectionPools.Length; iServer++)
                        {
                            if (0 == String.Compare(e.ValueNew.CurrentServerName, _connectionPools[iServer].ServerName, StringComparison.OrdinalIgnoreCase))
                            {
                                _bucketMap[e.Bucket] = iServer;
                                fChanged = true;
                                break;
                            }
                        }
                    }
                    finally
                    {
                        _rwlBucketMap.ReleaseWriterLock();
                    }
                }
                finally
                {
                    _rwlConnectionPools.DowngradeFromWriterLock(ref lc);
                }
            }
            finally
            {
                _rwlConnectionPools.ReleaseReaderLock();
            }

            if (!fChanged)
            {
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.SOCIALCACHE_PROXY_BUCKET_CHANGE_FAILED, "SocialCacheProxy::ChangeBucketMap() could not find a connection to server " + e.ValueNew.CurrentServerName);
            }
        }

        public void ShutdownAll()
        {
            _rwlConnectionPools.AcquireReaderLock(LOCK_TIMEOUT);
            try
            {
                LockCookie lc = _rwlConnectionPools.UpgradeToWriterLock(LOCK_TIMEOUT);
                try
                {
                    Xom.Trace(XomAreaName.SocialCacheConnection, LogLevel.L_NORMAL, "SocialCacheProxy.ShutdownAll: called");

                    foreach (SocialCacheInhConnectionHandler pool in _connectionPools)
                    {
                        pool.Shutdown(true); // fWait

                        Xom.Trace(XomAreaName.SocialCacheConnection, LogLevel.L_NORMAL, "SocialCacheProxy.ShutdownAll: complete");
                    }
                }
                finally
                {
                    _rwlConnectionPools.DowngradeFromWriterLock(ref lc);
                }
            }
            finally
            {
                _rwlConnectionPools.ReleaseReaderLock();
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\SocialCacheInhConnectionHandler.cs ===
﻿using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using System.Net.Sockets;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;

[assembly: XomAreaDefinition(XomAreaName.SocialCacheConnection)]

namespace xonline.common.community.socialquery
{    
    public class SocialCacheInhConnectionHandler
    {
        string                  _serverName;        
        private IInterfaceInfo  _interfaceInfo;        
        private int             _seqNum = 1;

        private XboxLiveThread  _sendThread;
        private XboxLiveThread  _receiveThread;
        private LockFreeQueue<SocialCacheInhConnectionContext> _sendQueue;
        private AutoResetEvent  _sendQueueEvent;
        private bool            _shutdown;
        private Hashtable       _waitTable;                

        SocialCacheInhConnection   _inhConnection = null;

        // useful constants
        private const int SEND_QUEUE_TIMEOUT = 1000;
        
        public SocialCacheInhConnectionHandler(string serverName, int iServer)
        {                        
            _serverName = serverName;
            
            _interfaceInfo = Config.GetInterface(_serverName, Interface.SocialCache);
            
            _shutdown = false;

            // This is a queue of connection contexts to be sent to the INH server.
            _sendQueue = new LockFreeQueue<SocialCacheInhConnectionContext>(false);

            // When a new item is put into the queue, this event is signaled,
            // which will wake up the SendThread if it has gone to sleep
            _sendQueueEvent = new AutoResetEvent(false);

            // This is a table of requests which have been sent to the INH
            // server, and are waiting on a response from the INH server
            // It is syncronized because it is shared between the SendThread,
            // the ReceiveThread, and the calling thread (via the Timeout method)
            _waitTable = Hashtable.Synchronized(new Hashtable());

            _inhConnection = new SocialCacheInhConnection(_interfaceInfo, _serverName);

            // Start the send thread
            _sendThread = new XboxLiveThread(new ThreadStart(this.SendThread));
            _sendThread.IsBackground = true;
            _sendThread.Start();

            // Start the receive thread
            _receiveThread = new XboxLiveThread(new ThreadStart(this.ReceiveThread));
            _receiveThread.IsBackground = true;
            _receiveThread.Start();

        }

        #region Properties

        public string ServerName
        {
            get
            {
                return _serverName;
            }
        }

        internal SocialCacheInhConnection InhConnection
        {
            get
            {
                return _inhConnection;
            }
        }       

        #endregion

        internal void AddToSendQueue(SocialCacheInhConnectionContext context)
        {
            context.WaitTime = new XomRequestTimeElapsed();
            context.SequenceNumber = GetNextSequenceNumber();            
            context._wtObject._request.dwSeqNum = context._wtObject._seqnum;

            _sendQueue.Enqueue(context);   // queue the connection context for processing             
            _sendQueueEvent.Set();         // wake the send queue        
        }

        internal void TimeoutContext(SocialCacheInhConnectionContext context)
        {
            // timed out waiting for a response.  remove it from the wait table.
            SocialCacheWaitTableObject wtoRemoved;
            lock (_waitTable.SyncRoot)
            {
                wtoRemoved = (SocialCacheWaitTableObject)_waitTable[context.SequenceNumber];
                _waitTable.Remove(context.SequenceNumber);
            }

            _inhConnection.ReportConnectionFailure();            
        }      

        internal uint GetNextSequenceNumber()
        {
            return (uint)Interlocked.Increment(ref _seqNum);
        }

        public void Shutdown(bool fWait)
        {
            Xom.Trace(XomAreaName.SocialCacheConnection, LogLevel.L_NORMAL,
                "SocialCache.Shutdown: Shutdown called for InhConnection to "
                + _interfaceInfo.IPAddressString);

            // set the shutdown flag, which will tell the send and receive
            // threads to begin shutting down
            _shutdown = true;

            if (fWait)
            {
                // wait for the send and receive threads to shutdown
                _sendThread.Join();
                _receiveThread.Join();
            }

            Xom.Trace(XomAreaName.SocialCacheConnection, LogLevel.L_LOW,
                "SocialCache.Shutdown: InhConnection successfully shutdown for  "
                + _interfaceInfo.IPAddressString);
        }
        
        public void DrainSendQueue()
        {
            // loop until queue is empty
            while (true)
            {
                SocialCacheInhConnectionContext context;

                context = (SocialCacheInhConnectionContext)_sendQueue.Dequeue();

                if (context != null)
                {
                    bool fSent = false;
                    // queue is syncronized
                    try
                    {
                        // update the queue wait perf counters
                        long elapsed = context.WaitTimeElapsed;

                        // if we are supposed to wait for a response from the
                        // INH server, then put this context into the wait
                        // table.
                        // We want to so this *before* we actually send,
                        // because the INH server could respond before we've 
                        // finished adding the context to the wait table.

                        // store the current time in the context                        
                        context.WaitTime = new XomRequestTimeElapsed();

                        _waitTable.Add(context.SequenceNumber, context._wtObject);

                        // now do the send
                        try
                        {
                            _inhConnection.Connect();                                                     
                        }
                        catch (SocketException se) // but... there are rare times, this might throw a socketexception, so...
                        {                            
                            Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_CONNECT_FAILED, se,
                                "Could not establish socket to {0}. The server is probably not running yet.", _serverName
                            );
                                                        
                            return; 
                        }

                        fSent = _inhConnection.Send((byte[])(context.Message), context.SequenceNumber);
                    }
                    finally
                    {
                        if (!fSent)
                        {
                            // removes the item from the wait table, regardless of if it's there or not.
                            SocialCacheWaitTableObject wtoRemoved;
                            lock (_waitTable.SyncRoot)
                            {
                                wtoRemoved = (SocialCacheWaitTableObject)_waitTable[context.SequenceNumber];
                                _waitTable.Remove(context.SequenceNumber);
                            }

                            context._event.Set(); 
                        }
                    }
                }
                else
                {
                    // queue is empty, break out of the loop and go back to sleep.
                    break;
                }
            }
        }

        public void SendThread()
        {
            // keep processing work items on the queue until we break out of
            // this loop because the _shutdown flag is set
            while (!_shutdown)
            {
                try
                {
                    // Wait for an item to be put on the queue
                    if (_sendQueueEvent.WaitOne(SEND_QUEUE_TIMEOUT, false))
                    {
                        // we have work to do
                        DrainSendQueue();
                    }                     
                }
                catch (Exception e)
                {
                    try
                    {
                        // we don't want an exception to cause this thread to
                        // terminate, so we catch it, log it, and move along
                        Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_SEND_FAILED, e,
                            "Unexpected Exception thrown in SendThread for connection to INH at {0}.",
                            _interfaceInfo.IPAddressString
                        );
                    }
                    catch (Exception)
                    {
                        // eat anything else that could possibly go wrong.
                    }
                }
            }            
        }

        public void ReceiveThread()
        {
            // keep receiving messages from the INH server until we break out of
            // this loop because the _shutdown flag is set
            while (!_shutdown)
            {
                try
                {
                    if (_inhConnection.IsValidConnection())
                    {
                        _inhConnection.ReceiveMessage(_waitTable, _shutdown);                        
                    }
                    else // dont try to receive if the socket is dead.                 
                    {
                        Thread.Sleep(1000);                        
                    }
                }
                catch (Exception e)
                {
                    // we don't want an exception to cause this thread to
                    // terminate, so we catch it, log it, and move along
                    try
                    {
                        Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_RECEIVE_FAILED, e,
                            "Unexpected Exception thrown in ReceiveThread for InhConnection to {0}.", _interfaceInfo.IPAddressString
                        );
                    }
                    catch (Exception)
                    {
                        // eat anything else that could possibly go wrong.
                    }
                }
            }
        }  
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\SocialCacheWaitTableObject.cs ===
﻿using System;

using xonline.common.mgmt;
using xonline.common.community.socialquery.protocol;

namespace xonline.common.community.socialquery
{
    public class SocialCacheWaitTableObject
    {
        public SocialCacheInhConnectionContext _context;
        public SocialCacheMessageHeader     _request;
        public byte[]                       _response;
        public uint                         _seqnum;
        public uint                         _bucket;
        public XomRequestTimeElapsed        _waitTime;

        public SocialCacheWaitTableObject(SocialCacheInhConnectionContext context, SocialCacheMessageHeader request)
        {
            _context = context;            
            _request = request;
            _seqnum = 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\SocialQueryAPIBase.cs ===
using System;

namespace xonline.common.community.socialquery
{   
    public interface ISocialQueryProcessor
    {        
        void ProcessRequest(); // specify the order of the above operational methods within this method.  The implementer doens't ne

        // Reply must always be called last by either the ProcessRequest method
        // or by a worker thread kicked off at the end of ProcessRequest
        void Reply(); 
    }

    public abstract class SocialQueryUserListProcessor : ISocialQueryProcessor
    {
        public abstract void ProcessRequest();
        public abstract void Reply();

        // Override the following methods if/when your derived class needs them

        public virtual void Gather()
        {
        }

        public  virtual void Filter()
        {
        }

        public virtual void Sort()
        {
        }

        public virtual void Page()
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\SocialQueryComparers.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;

using xonline.common.protocol.socialquery;

using xonline.common.community;
using xonline.common.community.socialquery.protocol;
using xonline.common.config;

namespace xonline.common.community.socialquery
{
    public class SocialQueryUserGamertagComparer : IComparer<SocialQueryUser>
    {
        // Sort gamertags by string, ignoring case.
        public int Compare(SocialQueryUser user1, SocialQueryUser user2)
        {
            return(string.Compare(user1.Gamertag, user2.Gamertag, true));
        }
    }

    public class SocialQueryUserOnlineStatusComparer : IComparer<SocialQueryUser>
    {
        public int Compare(SocialQueryUser user1, SocialQueryUser user2)
        {
            // To represent the combination of status flags, get the category value to sort on
            uint status1 = GetStatusCategory(user1.Flags);
            uint status2 = GetStatusCategory(user2.Flags);

            if (status1 < status2)
            {
                return -1;
            }
            else if (status1 > status2)
            {
                return 1;
            }

            // If the status is the same, then sort by gamertag (ignoring case)
            return(String.Compare(user1.Gamertag, user2.Gamertag, true));
        }
   
        // Categorize the user's status into three categories that will be used for sorting.  Values are:
        // 0 = Partial friend (sent or received request)
        // 1 = Full friend, online
        // 2 = Full friend, offline
        private uint GetStatusCategory(uint flags)
        {
            // Partial friends, regardless of online status, get ordered first
            if((flags & SocialQueryDefs.SQ_FLAG_SENTREQUEST) != 0 || (flags & SocialQueryDefs.SQ_FLAG_RECEIVEDREQUEST) != 0) {
                return(0);
            }

            // Online friends are next
            if((flags & SocialQueryDefs.SQ_FLAG_ONLINE) != 0) {
                return(1);
            }
             
            // Offline friends sort last
            return(2);
        }
    }

    public class SocialQueryUserActivityComparer : IComparer<SocialQueryUser>
    {
        private uint                _titleId;
        private ushort                _locale;
        private ITitleStringFetcher _fetcher;

        public SocialQueryUserActivityComparer(ITitleStringFetcher fetcher, uint titleId, ushort requestingUserLocale)
        {
            _titleId = titleId;
            _locale = requestingUserLocale;
            _fetcher = fetcher;
        }

        public int Compare(SocialQueryUser user1, SocialQueryUser user2)
        {
            if (user1.Xuid == user2.Xuid) return 0;

            int returnValue = 0;

            // To represent the combination of status flags, get the category value to sort on
            // The values returned here allow us to compare online full friends to offline full and pending friends correctly.
            uint status1 = GetStatusCategory(user1.Flags);
            uint status2 = GetStatusCategory(user2.Flags);

            if (status1 != status2) 
            {
                //Enforce status flag sorting and return.
                returnValue = status1.CompareTo(status2);
                return returnValue;
            }

            // Only compare title strings for online full friends.
            if (status1 == 0)
            {
                returnValue = DoTitleStringComparison(user1, user2);
                if (returnValue != 0) return returnValue;
            }

            returnValue = user1.Gamertag.CompareTo(user2.Gamertag);

            return returnValue;
        }

        private int DoTitleStringComparison(SocialQueryUser user1, SocialQueryUser user2)
        {
            if (user1.TitleId == user2.TitleId) return 0;

            if (user1.TitleId == _titleId) return -1;
            if (user2.TitleId == _titleId) return 1;

            // Get values to foce online full friends playing this title to the front.
            string user1Title = _fetcher.GetTitleString(user1.TitleId, _locale);
            string user2Title = _fetcher.GetTitleString(user2.TitleId, _locale);

            return user1Title.CompareTo(user2Title);
        }

        // Categorize the user's status into two categories that will be used for sorting.  Values are:
        // 0 = Full friend, online
        // 1 = Partial friend (sent or received request) and offline friends
        protected uint GetStatusCategory(uint flags)
        {
            // Online accepted friends sort first
            if ((flags & SocialQueryDefs.SQ_FLAG_SENTREQUEST) == 0 && (flags & SocialQueryDefs.SQ_FLAG_RECEIVEDREQUEST) == 0 && (flags & SocialQueryDefs.SQ_FLAG_ONLINE) != 0)
            {
                return (0);
            }

            // Partial friends, regardless of online status, and offline friends get ordered last
            return (1);
        }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\SocialQuery\SocialCacheInhConnection.cs ===
﻿using System;
using System.Collections;
using System.Net;
using System.Net.Sockets;
using System.Threading;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.community.socialquery.protocol;

[assembly: XomAreaDefinition(XomAreaName.SocialCacheConnection)]

namespace xonline.common.community.socialquery
{
    internal class SocialCacheInhConnection
    {
        // fast fail
        private static FastFailHelper _fastFailHelper = null;

        private Socket              _socket;
        private IInterfaceInfo      _interfaceInfo;        

        static SocialCacheInhConnection()
        {
            // create a fast fail helper.
            _fastFailHelper = new FastFailHelper(
                Setting.SocialCache_fastFailTimeoutThresholdCount,
                Setting.SocialCache_fastFailTimeoutTimespanSeconds,
                Setting.SocialCache_fastFailBlockIntervalSeconds);
        }

        public void ReportConnectionFailure()
        {
            _fastFailHelper.ReportFailure(_interfaceInfo.IPAddressString, "Timed out.");
        }

        public SocialCacheInhConnection(IInterfaceInfo interfaceInfo, string serverName)
        {
            // This contains the IP:port info we need to connect to the
            // INH server.
            _interfaceInfo = interfaceInfo;
            
            // We call Connect() here to create the initial socket and connect
            // it to the INH server. That way, if there are any fundamental
            // communications problems, this thread will see the SocketException
            // right away, and won't have to wait until a Send attempt fails.
            // Keep in mind that Connections are recycled in the connection pools so
            // once a SocialCacheInhConnection is constructed, it stays alive until its 
            // socket dies for some reason and the connection pool kills it off.
            try
            {
                Connect();
            }
            catch (SocketException se)
            {
                // dont puke here if the server isnt up yet.
                Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_CONNECT_FAILED, se,
                    "Could not establish socket to {0}. The server is probably not running yet.", serverName);
            }

            Xom.Trace(XomAreaName.SocialCacheConnection,
                LogLevel.L_NORMAL,
                "SocialCacheInhConnection.ctor: SocialCacheInhConnection creation successful for "
                + _interfaceInfo.IPAddressString);
        }

        public bool IsValidConnection()
        {
            return (_socket != null && _socket.Connected);
        }

        public void Recycle()
        {

        }

        public void Disconnect()
        {
            lock (this)
            {
                if (_socket != null)
                {
                    try
                    {
                        _socket.Shutdown(SocketShutdown.Both);
                        _socket.Close();
                    }
                    catch (SocketException)
                    {
                        // eat any exception here.  we're closing anyway.
                    }

                    _socket = null;
                }
            }
        }

        // Gets the current socket connection, verifying the health of the socket
        // and (re)connecting it if required
        public void Connect()
        {
            if (IsValidConnection())
            {
                return;
            }
            
            // create a new socket
            Xom.Trace(XomAreaName.SocialCacheConnection, LogLevel.L_NORMAL,
                "XPNFD.InhConnection.GetSocket: creating new socket connection to "
                + _interfaceInfo.IPAddressString);

            _socket = new Socket(AddressFamily.InterNetwork, SocketType.Stream,
                ProtocolType.Tcp);

            // connect to the specified INH server
            IPEndPoint ipEndPoint =
                new IPEndPoint(_interfaceInfo.IPAddress, _interfaceInfo.Port);
            _socket.Connect(ipEndPoint);            
        }

        public bool Send(byte[] msg, uint seqNum)
        {
            bool fRetry = true;           
            
            while (IsValidConnection())
            {
                try
                {
                    int cbSent = _socket.Send(
                        msg,
                        0,
                        msg.Length,
                        SocketFlags.None);

                    return true;
                }
                catch (SocketException se)
                {
                    Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_SEND_FAILED, se,
                        (fRetry ? "\nWill attempt 1 retry." : "")
                    );

                    if (fRetry)
                    {
                        fRetry = false;
                        Disconnect();
                        Connect();
                    }
                    else
                    {
                        throw;
                    }
                }
            }
            
            return false;
        }

        public bool PassesFastFailCheck()
        {
            // check fast fail first.
            if (_fastFailHelper.InFastFailState(_interfaceInfo.IPAddressString))
            {
                return false;
            }
            
            return true;
        }

        public byte[] ReceiveSocialCacheMessage(Socket sock)
        {
            // buffer to receive header.
            byte[] headerBuf = new byte[SocialCacheDefs.MESSAGE_HEADER_SIZE];

            int cTotalBytes = 0;
            while (cTotalBytes < headerBuf.Length)
            {
                int cBytes = sock.Receive(headerBuf, cTotalBytes, headerBuf.Length - cTotalBytes, SocketFlags.None);
                if (cBytes == 0)
                {
                    throw new ApplicationException("SocialCacheInhConnection.ReceiveSocialCacheMessage(): Received 0 bytes");
                }
                else
                {
                    cTotalBytes += cBytes;
                }
            }

            SocialCacheMessageHeader msgHeader = new SocialCacheMessageHeader();
            msgHeader.ReadBytes(headerBuf);

            // basic checks on header
            if (msgHeader.dwProtocolVersion != SocialCacheDefs.CURRENT_PROTOCOL_VERSION)
            {
                throw new ApplicationException("SocialCacheInhConnection.ReceiveSocialCacheMessage(): Protocol Mismatch.  protocol received = " + msgHeader.dwProtocolVersion);
            }
            if ((msgHeader.dwMessageType < (uint)SocialCacheDefs.MIN_REPLY_TYPE) ||
                (msgHeader.dwMessageType > (uint)SocialCacheDefs.MAX_REPLY_TYPE))
            {
                throw new ApplicationException("SocialCacheInhConnection.ReceiveSocialCacheMessage(): Unknown response type: " + msgHeader.dwMessageType);
            }

            // make a new buffer for header + data
            byte[] buf = new byte[msgHeader.dwTotalSize];

            // copy the header
            System.Buffer.BlockCopy(headerBuf, 0, buf, 0, headerBuf.Length);

            while (cTotalBytes < buf.Length)
            {
                int cBytes = sock.Receive(buf, cTotalBytes, buf.Length - cTotalBytes, SocketFlags.None);
                if (cBytes == 0)
                {
                    throw new ApplicationException("SocialCacheInhConnection.ReceiveSocialCacheMessage(): Received 0 bytes");
                }
                else
                {
                    cTotalBytes += cBytes;
                }
            }

            return buf;
        }

        public byte[] Recv()
        {
            if (IsValidConnection())
            {
                try
                {
                    return ReceiveSocialCacheMessage(_socket);
                }
                catch (Exception e)
                {
                    Xom.NtEvent(XEvent.Id.SOCIALCACHE_PROXY_RECEIVE_FAILED, e, "Unexpected exception caught in SocialCacheInhConnection.Recv.");
                }
            }

            return null;
        }        

        public bool ReceiveMessage(Hashtable waitTable, bool fShutDown)
        {
            try
            {
                // read a response.
                byte[] rgbResp = Recv();
                if (rgbResp == null)
                {
                    return false;
                }

                // get the sequence number
                SocialCacheMessageHeader response = new SocialCacheMessageHeader();
                response.ReadBytes(rgbResp);

                // find the matching Context in the wait table.
                SocialCacheWaitTableObject wto;
                lock (waitTable.SyncRoot)
                {
                    wto = (SocialCacheWaitTableObject)waitTable[response.dwSeqNum];
                    waitTable.Remove(response.dwSeqNum);
                }

                if (wto == null)
                {
                    // this is expected for contexts that werent waiting (e.g. multi-server remove requests).  do nothing.
                }
                else
                {
                    wto._response = rgbResp;

                    // Update perf counters
                    _fastFailHelper.ReportSuccess(_interfaceInfo.IPAddressString);

                    wto._context._event.Set();
                }
            }
            catch (Exception)
            {
                // Any exceptions at all leave the stream in a bad state. We could be half way
                // through a message, or the socket could have failed, or ?
                // In any of these situations, we invalidate the socket, so we will 
                // reconnect. If there are messages already in the receive buffer,
                // they are going to be lost.
                // Any affected contexts will eventually be timed out and removed from the wait
                // table. Since we didn't successfully receive a complete message
                // we don't really trust the sequence number enough to associate this
                // exception with any particular context, so we don't do anything
                // with the exception except log it.
                // However, during a shutdown, the send thread kills the socket for us,
                // so if we are shutting down, we just eat the exception and move merrily
                // along
                if (!fShutDown)
                {
                    Disconnect();
                    throw;
                }
            }

            return true;
        }        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\community\metro\sharingservicewsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace SharingServiceWSDL {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SharingServiceSoap", Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class SharingService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private ABApplicationHeader aBApplicationHeaderValueField;
        
        private ABAuthHeader aBAuthHeaderValueField;
        
        private ABTestHeader aBTestHeaderValueField;
        
        private ServiceHeader serviceHeaderValueField;
        
        private System.Threading.SendOrPostCallback AddNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindNamespaceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetServicePermissionOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindInverseServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddInverseServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteInverseServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddPrincipalOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeletePrincipalOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindPrincipalOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindIdentityRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback InviteIdentityOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestMembershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestMultipleMembershipsOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestMultipleMembershipsByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback RequestMembershipByEmailOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptMembershipRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeclineMembershipRequestOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendInvitationOperationCompleted;
        
        private System.Threading.SendOrPostCallback AcceptInvitationOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeclineInvitationOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindMembershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindMembershipByRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback CountMembersByRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback PageMembershipByRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindMembershipByMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteMemberOperationCompleted;
        
        private System.Threading.SendOrPostCallback SetMembershipOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberHasRoleOperationCompleted;
        
        private System.Threading.SendOrPostCallback MemberHasRolesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FanOutNotificationOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindMailingListOperationCompleted;
        
        /// <remarks/>
        public SharingService() {
            this.Url = "http://common.pvt-contacts.msn-int.com:81/abservice/sharingservice.asmx";
        }
        
        public ABApplicationHeader ABApplicationHeaderValue {
            get {
                return this.aBApplicationHeaderValueField;
            }
            set {
                this.aBApplicationHeaderValueField = value;
            }
        }
        
        public ABAuthHeader ABAuthHeaderValue {
            get {
                return this.aBAuthHeaderValueField;
            }
            set {
                this.aBAuthHeaderValueField = value;
            }
        }
        
        public ABTestHeader ABTestHeaderValue {
            get {
                return this.aBTestHeaderValueField;
            }
            set {
                this.aBTestHeaderValueField = value;
            }
        }
        
        public ServiceHeader ServiceHeaderValue {
            get {
                return this.serviceHeaderValueField;
            }
            set {
                this.serviceHeaderValueField = value;
            }
        }
        
        /// <remarks/>
        public event AddNamespaceCompletedEventHandler AddNamespaceCompleted;
        
        /// <remarks/>
        public event DeleteNamespaceCompletedEventHandler DeleteNamespaceCompleted;
        
        /// <remarks/>
        public event UpdateNamespaceCompletedEventHandler UpdateNamespaceCompleted;
        
        /// <remarks/>
        public event FindNamespaceCompletedEventHandler FindNamespaceCompleted;
        
        /// <remarks/>
        public event AddServiceCompletedEventHandler AddServiceCompleted;
        
        /// <remarks/>
        public event DeleteServiceCompletedEventHandler DeleteServiceCompleted;
        
        /// <remarks/>
        public event UpdateServiceCompletedEventHandler UpdateServiceCompleted;
        
        /// <remarks/>
        public event SetServicePermissionCompletedEventHandler SetServicePermissionCompleted;
        
        /// <remarks/>
        public event FindServiceCompletedEventHandler FindServiceCompleted;
        
        /// <remarks/>
        public event FindInverseServiceCompletedEventHandler FindInverseServiceCompleted;
        
        /// <remarks/>
        public event AddInverseServiceCompletedEventHandler AddInverseServiceCompleted;
        
        /// <remarks/>
        public event DeleteInverseServiceCompletedEventHandler DeleteInverseServiceCompleted;
        
        /// <remarks/>
        public event AddPrincipalCompletedEventHandler AddPrincipalCompleted;
        
        /// <remarks/>
        public event DeletePrincipalCompletedEventHandler DeletePrincipalCompleted;
        
        /// <remarks/>
        public event FindPrincipalCompletedEventHandler FindPrincipalCompleted;
        
        /// <remarks/>
        public event FindIdentityRolesCompletedEventHandler FindIdentityRolesCompleted;
        
        /// <remarks/>
        public event InviteIdentityCompletedEventHandler InviteIdentityCompleted;
        
        /// <remarks/>
        public event RequestMembershipCompletedEventHandler RequestMembershipCompleted;
        
        /// <remarks/>
        public event RequestMultipleMembershipsCompletedEventHandler RequestMultipleMembershipsCompleted;
        
        /// <remarks/>
        public event RequestMultipleMembershipsByEmailCompletedEventHandler RequestMultipleMembershipsByEmailCompleted;
        
        /// <remarks/>
        public event RequestMembershipByEmailCompletedEventHandler RequestMembershipByEmailCompleted;
        
        /// <remarks/>
        public event AcceptMembershipRequestCompletedEventHandler AcceptMembershipRequestCompleted;
        
        /// <remarks/>
        public event DeclineMembershipRequestCompletedEventHandler DeclineMembershipRequestCompleted;
        
        /// <remarks/>
        public event SendInvitationCompletedEventHandler SendInvitationCompleted;
        
        /// <remarks/>
        public event AcceptInvitationCompletedEventHandler AcceptInvitationCompleted;
        
        /// <remarks/>
        public event DeclineInvitationCompletedEventHandler DeclineInvitationCompleted;
        
        /// <remarks/>
        public event FindMembershipCompletedEventHandler FindMembershipCompleted;
        
        /// <remarks/>
        public event FindMembershipByRoleCompletedEventHandler FindMembershipByRoleCompleted;
        
        /// <remarks/>
        public event CountMembersByRoleCompletedEventHandler CountMembersByRoleCompleted;
        
        /// <remarks/>
        public event PageMembershipByRoleCompletedEventHandler PageMembershipByRoleCompleted;
        
        /// <remarks/>
        public event FindMembershipByMemberCompletedEventHandler FindMembershipByMemberCompleted;
        
        /// <remarks/>
        public event AddMemberCompletedEventHandler AddMemberCompleted;
        
        /// <remarks/>
        public event UpdateMemberCompletedEventHandler UpdateMemberCompleted;
        
        /// <remarks/>
        public event DeleteMemberCompletedEventHandler DeleteMemberCompleted;
        
        /// <remarks/>
        public event SetMembershipCompletedEventHandler SetMembershipCompleted;
        
        /// <remarks/>
        public event MemberHasRoleCompletedEventHandler MemberHasRoleCompleted;
        
        /// <remarks/>
        public event MemberHasRolesCompletedEventHandler MemberHasRolesCompleted;
        
        /// <remarks/>
        public event FanOutNotificationCompletedEventHandler FanOutNotificationCompleted;
        
        /// <remarks/>
        public event FindMailingListCompletedEventHandler FindMailingListCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddNamespace", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Guid AddNamespace(NamespaceInfo nsInfo, ServiceInfo serviceInfo) {
            object[] results = this.Invoke("AddNamespace", new object[] {
                        nsInfo,
                        serviceInfo});
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddNamespace(NamespaceInfo nsInfo, ServiceInfo serviceInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddNamespace", new object[] {
                        nsInfo,
                        serviceInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Guid EndAddNamespace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Guid)(results[0]));
        }
        
        /// <remarks/>
        public void AddNamespaceAsync(NamespaceInfo nsInfo, ServiceInfo serviceInfo) {
            this.AddNamespaceAsync(nsInfo, serviceInfo, null);
        }
        
        /// <remarks/>
        public void AddNamespaceAsync(NamespaceInfo nsInfo, ServiceInfo serviceInfo, object userState) {
            if ((this.AddNamespaceOperationCompleted == null)) {
                this.AddNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddNamespaceOperationCompleted);
            }
            this.InvokeAsync("AddNamespace", new object[] {
                        nsInfo,
                        serviceInfo}, this.AddNamespaceOperationCompleted, userState);
        }
        
        private void OnAddNamespaceOperationCompleted(object arg) {
            if ((this.AddNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddNamespaceCompleted(this, new AddNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeleteNamespace", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteNamespace(NamespaceHandle nsHandle) {
            this.Invoke("DeleteNamespace", new object[] {
                        nsHandle});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteNamespace(NamespaceHandle nsHandle, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteNamespace", new object[] {
                        nsHandle}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteNamespace(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteNamespaceAsync(NamespaceHandle nsHandle) {
            this.DeleteNamespaceAsync(nsHandle, null);
        }
        
        /// <remarks/>
        public void DeleteNamespaceAsync(NamespaceHandle nsHandle, object userState) {
            if ((this.DeleteNamespaceOperationCompleted == null)) {
                this.DeleteNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteNamespaceOperationCompleted);
            }
            this.InvokeAsync("DeleteNamespace", new object[] {
                        nsHandle}, this.DeleteNamespaceOperationCompleted, userState);
        }
        
        private void OnDeleteNamespaceOperationCompleted(object arg) {
            if ((this.DeleteNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteNamespaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateNamespace", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateNamespace(Namespace ns) {
            this.Invoke("UpdateNamespace", new object[] {
                        ns});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateNamespace(Namespace ns, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateNamespace", new object[] {
                        ns}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateNamespace(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateNamespaceAsync(Namespace ns) {
            this.UpdateNamespaceAsync(ns, null);
        }
        
        /// <remarks/>
        public void UpdateNamespaceAsync(Namespace ns, object userState) {
            if ((this.UpdateNamespaceOperationCompleted == null)) {
                this.UpdateNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateNamespaceOperationCompleted);
            }
            this.InvokeAsync("UpdateNamespace", new object[] {
                        ns}, this.UpdateNamespaceOperationCompleted, userState);
        }
        
        private void OnUpdateNamespaceOperationCompleted(object arg) {
            if ((this.UpdateNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateNamespaceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindNamespace", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Namespace[] FindNamespace(NamespaceHandle[] nsHandles) {
            object[] results = this.Invoke("FindNamespace", new object[] {
                        nsHandles});
            return ((Namespace[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindNamespace(NamespaceHandle[] nsHandles, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindNamespace", new object[] {
                        nsHandles}, callback, asyncState);
        }
        
        /// <remarks/>
        public Namespace[] EndFindNamespace(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Namespace[])(results[0]));
        }
        
        /// <remarks/>
        public void FindNamespaceAsync(NamespaceHandle[] nsHandles) {
            this.FindNamespaceAsync(nsHandles, null);
        }
        
        /// <remarks/>
        public void FindNamespaceAsync(NamespaceHandle[] nsHandles, object userState) {
            if ((this.FindNamespaceOperationCompleted == null)) {
                this.FindNamespaceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindNamespaceOperationCompleted);
            }
            this.InvokeAsync("FindNamespace", new object[] {
                        nsHandles}, this.FindNamespaceOperationCompleted, userState);
        }
        
        private void OnFindNamespaceOperationCompleted(object arg) {
            if ((this.FindNamespaceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindNamespaceCompleted(this, new FindNamespaceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public short AddService(NamespaceHandle nsHandle, ServiceInfo serviceInfo) {
            object[] results = this.Invoke("AddService", new object[] {
                        nsHandle,
                        serviceInfo});
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddService(NamespaceHandle nsHandle, ServiceInfo serviceInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddService", new object[] {
                        nsHandle,
                        serviceInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public short EndAddService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((short)(results[0]));
        }
        
        /// <remarks/>
        public void AddServiceAsync(NamespaceHandle nsHandle, ServiceInfo serviceInfo) {
            this.AddServiceAsync(nsHandle, serviceInfo, null);
        }
        
        /// <remarks/>
        public void AddServiceAsync(NamespaceHandle nsHandle, ServiceInfo serviceInfo, object userState) {
            if ((this.AddServiceOperationCompleted == null)) {
                this.AddServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddServiceOperationCompleted);
            }
            this.InvokeAsync("AddService", new object[] {
                        nsHandle,
                        serviceInfo}, this.AddServiceOperationCompleted, userState);
        }
        
        private void OnAddServiceOperationCompleted(object arg) {
            if ((this.AddServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddServiceCompleted(this, new AddServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeleteService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteService(NamespaceHandle nsHandle, ServiceHandle serviceHandle) {
            this.Invoke("DeleteService", new object[] {
                        nsHandle,
                        serviceHandle});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteService(NamespaceHandle nsHandle, ServiceHandle serviceHandle, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteService", new object[] {
                        nsHandle,
                        serviceHandle}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteServiceAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle) {
            this.DeleteServiceAsync(nsHandle, serviceHandle, null);
        }
        
        /// <remarks/>
        public void DeleteServiceAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, object userState) {
            if ((this.DeleteServiceOperationCompleted == null)) {
                this.DeleteServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServiceOperationCompleted);
            }
            this.InvokeAsync("DeleteService", new object[] {
                        nsHandle,
                        serviceHandle}, this.DeleteServiceOperationCompleted, userState);
        }
        
        private void OnDeleteServiceOperationCompleted(object arg) {
            if ((this.DeleteServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateService(NamespaceHandle nsHandle, Service service) {
            this.Invoke("UpdateService", new object[] {
                        nsHandle,
                        service});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateService(NamespaceHandle nsHandle, Service service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateService", new object[] {
                        nsHandle,
                        service}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateServiceAsync(NamespaceHandle nsHandle, Service service) {
            this.UpdateServiceAsync(nsHandle, service, null);
        }
        
        /// <remarks/>
        public void UpdateServiceAsync(NamespaceHandle nsHandle, Service service, object userState) {
            if ((this.UpdateServiceOperationCompleted == null)) {
                this.UpdateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateServiceOperationCompleted);
            }
            this.InvokeAsync("UpdateService", new object[] {
                        nsHandle,
                        service}, this.UpdateServiceOperationCompleted, userState);
        }
        
        private void OnUpdateServiceOperationCompleted(object arg) {
            if ((this.UpdateServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/SetServicePermission", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetServicePermission(NamespaceHandle nsHandle, ServiceHandle service, string authorizationCriteriaName) {
            this.Invoke("SetServicePermission", new object[] {
                        nsHandle,
                        service,
                        authorizationCriteriaName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetServicePermission(NamespaceHandle nsHandle, ServiceHandle service, string authorizationCriteriaName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetServicePermission", new object[] {
                        nsHandle,
                        service,
                        authorizationCriteriaName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetServicePermission(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetServicePermissionAsync(NamespaceHandle nsHandle, ServiceHandle service, string authorizationCriteriaName) {
            this.SetServicePermissionAsync(nsHandle, service, authorizationCriteriaName, null);
        }
        
        /// <remarks/>
        public void SetServicePermissionAsync(NamespaceHandle nsHandle, ServiceHandle service, string authorizationCriteriaName, object userState) {
            if ((this.SetServicePermissionOperationCompleted == null)) {
                this.SetServicePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetServicePermissionOperationCompleted);
            }
            this.InvokeAsync("SetServicePermission", new object[] {
                        nsHandle,
                        service,
                        authorizationCriteriaName}, this.SetServicePermissionOperationCompleted, userState);
        }
        
        private void OnSetServicePermissionOperationCompleted(object arg) {
            if ((this.SetServicePermissionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetServicePermissionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Service[] FindService(NamespaceHandle nsHandle, ServiceFilter serviceFilter) {
            object[] results = this.Invoke("FindService", new object[] {
                        nsHandle,
                        serviceFilter});
            return ((Service[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindService(NamespaceHandle nsHandle, ServiceFilter serviceFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindService", new object[] {
                        nsHandle,
                        serviceFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public Service[] EndFindService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Service[])(results[0]));
        }
        
        /// <remarks/>
        public void FindServiceAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter) {
            this.FindServiceAsync(nsHandle, serviceFilter, null);
        }
        
        /// <remarks/>
        public void FindServiceAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, object userState) {
            if ((this.FindServiceOperationCompleted == null)) {
                this.FindServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindServiceOperationCompleted);
            }
            this.InvokeAsync("FindService", new object[] {
                        nsHandle,
                        serviceFilter}, this.FindServiceOperationCompleted, userState);
        }
        
        private void OnFindServiceOperationCompleted(object arg) {
            if ((this.FindServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindServiceCompleted(this, new FindServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindInverseService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindInverseServiceResult FindInverseService(NamespaceHandle nsHandle, ServiceFilter serviceFilter) {
            object[] results = this.Invoke("FindInverseService", new object[] {
                        nsHandle,
                        serviceFilter});
            return ((FindInverseServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindInverseService(NamespaceHandle nsHandle, ServiceFilter serviceFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindInverseService", new object[] {
                        nsHandle,
                        serviceFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindInverseServiceResult EndFindInverseService(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindInverseServiceResult)(results[0]));
        }
        
        /// <remarks/>
        public void FindInverseServiceAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter) {
            this.FindInverseServiceAsync(nsHandle, serviceFilter, null);
        }
        
        /// <remarks/>
        public void FindInverseServiceAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, object userState) {
            if ((this.FindInverseServiceOperationCompleted == null)) {
                this.FindInverseServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindInverseServiceOperationCompleted);
            }
            this.InvokeAsync("FindInverseService", new object[] {
                        nsHandle,
                        serviceFilter}, this.FindInverseServiceOperationCompleted, userState);
        }
        
        private void OnFindInverseServiceOperationCompleted(object arg) {
            if ((this.FindInverseServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindInverseServiceCompleted(this, new FindInverseServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddInverseService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddInverseService(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations) {
            this.Invoke("AddInverseService", new object[] {
                        nsHandle,
                        serviceLocations});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddInverseService(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddInverseService", new object[] {
                        nsHandle,
                        serviceLocations}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddInverseService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddInverseServiceAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations) {
            this.AddInverseServiceAsync(nsHandle, serviceLocations, null);
        }
        
        /// <remarks/>
        public void AddInverseServiceAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, object userState) {
            if ((this.AddInverseServiceOperationCompleted == null)) {
                this.AddInverseServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInverseServiceOperationCompleted);
            }
            this.InvokeAsync("AddInverseService", new object[] {
                        nsHandle,
                        serviceLocations}, this.AddInverseServiceOperationCompleted, userState);
        }
        
        private void OnAddInverseServiceOperationCompleted(object arg) {
            if ((this.AddInverseServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInverseServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeleteInverseService", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteInverseService(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations) {
            this.Invoke("DeleteInverseService", new object[] {
                        nsHandle,
                        serviceLocations});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteInverseService(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteInverseService", new object[] {
                        nsHandle,
                        serviceLocations}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteInverseService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteInverseServiceAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations) {
            this.DeleteInverseServiceAsync(nsHandle, serviceLocations, null);
        }
        
        /// <remarks/>
        public void DeleteInverseServiceAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, object userState) {
            if ((this.DeleteInverseServiceOperationCompleted == null)) {
                this.DeleteInverseServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteInverseServiceOperationCompleted);
            }
            this.InvokeAsync("DeleteInverseService", new object[] {
                        nsHandle,
                        serviceLocations}, this.DeleteInverseServiceOperationCompleted, userState);
        }
        
        private void OnDeleteInverseServiceOperationCompleted(object arg) {
            if ((this.DeleteInverseServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteInverseServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddPrincipal", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddPrincipal(NamespaceHandle nsHandle, ServiceHandle serviceHandle, AddPrincipalOptions addOptions, Principal[] principals) {
            this.Invoke("AddPrincipal", new object[] {
                        nsHandle,
                        serviceHandle,
                        addOptions,
                        principals});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddPrincipal(NamespaceHandle nsHandle, ServiceHandle serviceHandle, AddPrincipalOptions addOptions, Principal[] principals, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddPrincipal", new object[] {
                        nsHandle,
                        serviceHandle,
                        addOptions,
                        principals}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddPrincipal(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddPrincipalAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, AddPrincipalOptions addOptions, Principal[] principals) {
            this.AddPrincipalAsync(nsHandle, serviceHandle, addOptions, principals, null);
        }
        
        /// <remarks/>
        public void AddPrincipalAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, AddPrincipalOptions addOptions, Principal[] principals, object userState) {
            if ((this.AddPrincipalOperationCompleted == null)) {
                this.AddPrincipalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddPrincipalOperationCompleted);
            }
            this.InvokeAsync("AddPrincipal", new object[] {
                        nsHandle,
                        serviceHandle,
                        addOptions,
                        principals}, this.AddPrincipalOperationCompleted, userState);
        }
        
        private void OnAddPrincipalOperationCompleted(object arg) {
            if ((this.AddPrincipalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddPrincipalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeletePrincipal", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeletePrincipal(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Principal[] principals) {
            this.Invoke("DeletePrincipal", new object[] {
                        nsHandle,
                        serviceHandle,
                        principals});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeletePrincipal(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Principal[] principals, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeletePrincipal", new object[] {
                        nsHandle,
                        serviceHandle,
                        principals}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeletePrincipal(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeletePrincipalAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Principal[] principals) {
            this.DeletePrincipalAsync(nsHandle, serviceHandle, principals, null);
        }
        
        /// <remarks/>
        public void DeletePrincipalAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Principal[] principals, object userState) {
            if ((this.DeletePrincipalOperationCompleted == null)) {
                this.DeletePrincipalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePrincipalOperationCompleted);
            }
            this.InvokeAsync("DeletePrincipal", new object[] {
                        nsHandle,
                        serviceHandle,
                        principals}, this.DeletePrincipalOperationCompleted, userState);
        }
        
        private void OnDeletePrincipalOperationCompleted(object arg) {
            if ((this.DeletePrincipalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePrincipalCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindPrincipal", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Rolemap[] FindPrincipal(NamespaceHandle nsHandle, ServiceFilter serviceFilter, PrincipalFilter principalFilter) {
            object[] results = this.Invoke("FindPrincipal", new object[] {
                        nsHandle,
                        serviceFilter,
                        principalFilter});
            return ((Rolemap[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindPrincipal(NamespaceHandle nsHandle, ServiceFilter serviceFilter, PrincipalFilter principalFilter, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindPrincipal", new object[] {
                        nsHandle,
                        serviceFilter,
                        principalFilter}, callback, asyncState);
        }
        
        /// <remarks/>
        public Rolemap[] EndFindPrincipal(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Rolemap[])(results[0]));
        }
        
        /// <remarks/>
        public void FindPrincipalAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, PrincipalFilter principalFilter) {
            this.FindPrincipalAsync(nsHandle, serviceFilter, principalFilter, null);
        }
        
        /// <remarks/>
        public void FindPrincipalAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, PrincipalFilter principalFilter, object userState) {
            if ((this.FindPrincipalOperationCompleted == null)) {
                this.FindPrincipalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindPrincipalOperationCompleted);
            }
            this.InvokeAsync("FindPrincipal", new object[] {
                        nsHandle,
                        serviceFilter,
                        principalFilter}, this.FindPrincipalOperationCompleted, userState);
        }
        
        private void OnFindPrincipalOperationCompleted(object arg) {
            if ((this.FindPrincipalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindPrincipalCompleted(this, new FindPrincipalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindIdentityRoles", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Principal[] FindIdentityRoles(NamespaceHandle nsHandle, ServiceHandle serviceHandle, IdentityHandle identityHandle) {
            object[] results = this.Invoke("FindIdentityRoles", new object[] {
                        nsHandle,
                        serviceHandle,
                        identityHandle});
            return ((Principal[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindIdentityRoles(NamespaceHandle nsHandle, ServiceHandle serviceHandle, IdentityHandle identityHandle, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindIdentityRoles", new object[] {
                        nsHandle,
                        serviceHandle,
                        identityHandle}, callback, asyncState);
        }
        
        /// <remarks/>
        public Principal[] EndFindIdentityRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Principal[])(results[0]));
        }
        
        /// <remarks/>
        public void FindIdentityRolesAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, IdentityHandle identityHandle) {
            this.FindIdentityRolesAsync(nsHandle, serviceHandle, identityHandle, null);
        }
        
        /// <remarks/>
        public void FindIdentityRolesAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, IdentityHandle identityHandle, object userState) {
            if ((this.FindIdentityRolesOperationCompleted == null)) {
                this.FindIdentityRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindIdentityRolesOperationCompleted);
            }
            this.InvokeAsync("FindIdentityRoles", new object[] {
                        nsHandle,
                        serviceHandle,
                        identityHandle}, this.FindIdentityRolesOperationCompleted, userState);
        }
        
        private void OnFindIdentityRolesOperationCompleted(object arg) {
            if ((this.FindIdentityRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindIdentityRolesCompleted(this, new FindIdentityRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/InviteIdentity", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void InviteIdentity(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, IdentityHandle[] identityHandles) {
            this.Invoke("InviteIdentity", new object[] {
                        nsHandle,
                        serviceHandle,
                        inviteOptions,
                        identityHandles});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInviteIdentity(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, IdentityHandle[] identityHandles, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InviteIdentity", new object[] {
                        nsHandle,
                        serviceHandle,
                        inviteOptions,
                        identityHandles}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndInviteIdentity(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void InviteIdentityAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, IdentityHandle[] identityHandles) {
            this.InviteIdentityAsync(nsHandle, serviceHandle, inviteOptions, identityHandles, null);
        }
        
        /// <remarks/>
        public void InviteIdentityAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, IdentityHandle[] identityHandles, object userState) {
            if ((this.InviteIdentityOperationCompleted == null)) {
                this.InviteIdentityOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInviteIdentityOperationCompleted);
            }
            this.InvokeAsync("InviteIdentity", new object[] {
                        nsHandle,
                        serviceHandle,
                        inviteOptions,
                        identityHandles}, this.InviteIdentityOperationCompleted, userState);
        }
        
        private void OnInviteIdentityOperationCompleted(object arg) {
            if ((this.InviteIdentityCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InviteIdentityCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/RequestMembership", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestMembership(NamespaceHandle containingNamespace, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.Invoke("RequestMembership", new object[] {
                        containingNamespace,
                        requestedService,
                        requestOptions,
                        requestingMember});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestMembership(NamespaceHandle containingNamespace, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestMembership", new object[] {
                        containingNamespace,
                        requestedService,
                        requestOptions,
                        requestingMember}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequestMembership(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequestMembershipAsync(NamespaceHandle containingNamespace, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.RequestMembershipAsync(containingNamespace, requestedService, requestOptions, requestingMember, null);
        }
        
        /// <remarks/>
        public void RequestMembershipAsync(NamespaceHandle containingNamespace, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember, object userState) {
            if ((this.RequestMembershipOperationCompleted == null)) {
                this.RequestMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestMembershipOperationCompleted);
            }
            this.InvokeAsync("RequestMembership", new object[] {
                        containingNamespace,
                        requestedService,
                        requestOptions,
                        requestingMember}, this.RequestMembershipOperationCompleted, userState);
        }
        
        private void OnRequestMembershipOperationCompleted(object arg) {
            if ((this.RequestMembershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestMembershipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/RequestMultipleMemberships", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestMultipleMemberships(ServiceLocation[] serviceLocations, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.Invoke("RequestMultipleMemberships", new object[] {
                        serviceLocations,
                        requestOptions,
                        requestingMember});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestMultipleMemberships(ServiceLocation[] serviceLocations, MembershipRequestOptions requestOptions, Member requestingMember, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestMultipleMemberships", new object[] {
                        serviceLocations,
                        requestOptions,
                        requestingMember}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequestMultipleMemberships(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequestMultipleMembershipsAsync(ServiceLocation[] serviceLocations, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.RequestMultipleMembershipsAsync(serviceLocations, requestOptions, requestingMember, null);
        }
        
        /// <remarks/>
        public void RequestMultipleMembershipsAsync(ServiceLocation[] serviceLocations, MembershipRequestOptions requestOptions, Member requestingMember, object userState) {
            if ((this.RequestMultipleMembershipsOperationCompleted == null)) {
                this.RequestMultipleMembershipsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestMultipleMembershipsOperationCompleted);
            }
            this.InvokeAsync("RequestMultipleMemberships", new object[] {
                        serviceLocations,
                        requestOptions,
                        requestingMember}, this.RequestMultipleMembershipsOperationCompleted, userState);
        }
        
        private void OnRequestMultipleMembershipsOperationCompleted(object arg) {
            if ((this.RequestMultipleMembershipsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestMultipleMembershipsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/RequestMultipleMembershipsByEmail", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestMultipleMembershipsByEmail(NamespaceHandle requestorNamespace, string[] emailAddresses, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.Invoke("RequestMultipleMembershipsByEmail", new object[] {
                        requestorNamespace,
                        emailAddresses,
                        requestedService,
                        requestOptions,
                        requestingMember});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestMultipleMembershipsByEmail(NamespaceHandle requestorNamespace, string[] emailAddresses, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestMultipleMembershipsByEmail", new object[] {
                        requestorNamespace,
                        emailAddresses,
                        requestedService,
                        requestOptions,
                        requestingMember}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequestMultipleMembershipsByEmail(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequestMultipleMembershipsByEmailAsync(NamespaceHandle requestorNamespace, string[] emailAddresses, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.RequestMultipleMembershipsByEmailAsync(requestorNamespace, emailAddresses, requestedService, requestOptions, requestingMember, null);
        }
        
        /// <remarks/>
        public void RequestMultipleMembershipsByEmailAsync(NamespaceHandle requestorNamespace, string[] emailAddresses, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember, object userState) {
            if ((this.RequestMultipleMembershipsByEmailOperationCompleted == null)) {
                this.RequestMultipleMembershipsByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestMultipleMembershipsByEmailOperationCompleted);
            }
            this.InvokeAsync("RequestMultipleMembershipsByEmail", new object[] {
                        requestorNamespace,
                        emailAddresses,
                        requestedService,
                        requestOptions,
                        requestingMember}, this.RequestMultipleMembershipsByEmailOperationCompleted, userState);
        }
        
        private void OnRequestMultipleMembershipsByEmailOperationCompleted(object arg) {
            if ((this.RequestMultipleMembershipsByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestMultipleMembershipsByEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/RequestMembershipByEmail", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RequestMembershipByEmail(NamespaceHandle requestorNamespace, string recipientEmail, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.Invoke("RequestMembershipByEmail", new object[] {
                        requestorNamespace,
                        recipientEmail,
                        requestedService,
                        requestOptions,
                        requestingMember});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRequestMembershipByEmail(NamespaceHandle requestorNamespace, string recipientEmail, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RequestMembershipByEmail", new object[] {
                        requestorNamespace,
                        recipientEmail,
                        requestedService,
                        requestOptions,
                        requestingMember}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRequestMembershipByEmail(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RequestMembershipByEmailAsync(NamespaceHandle requestorNamespace, string recipientEmail, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember) {
            this.RequestMembershipByEmailAsync(requestorNamespace, recipientEmail, requestedService, requestOptions, requestingMember, null);
        }
        
        /// <remarks/>
        public void RequestMembershipByEmailAsync(NamespaceHandle requestorNamespace, string recipientEmail, ServiceHandle requestedService, MembershipRequestOptions requestOptions, Member requestingMember, object userState) {
            if ((this.RequestMembershipByEmailOperationCompleted == null)) {
                this.RequestMembershipByEmailOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRequestMembershipByEmailOperationCompleted);
            }
            this.InvokeAsync("RequestMembershipByEmail", new object[] {
                        requestorNamespace,
                        recipientEmail,
                        requestedService,
                        requestOptions,
                        requestingMember}, this.RequestMembershipByEmailOperationCompleted, userState);
        }
        
        private void OnRequestMembershipByEmailOperationCompleted(object arg) {
            if ((this.RequestMembershipByEmailCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RequestMembershipByEmailCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AcceptMembershipRequest", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AcceptMembershipRequest(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, RoleId[] acceptedRoles, Member recipientPlaceholder, Member recipientReplacement, string validationToken) {
            this.Invoke("AcceptMembershipRequest", new object[] {
                        containingNamespace,
                        requestedService,
                        requestingMember,
                        acceptedRoles,
                        recipientPlaceholder,
                        recipientReplacement,
                        validationToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAcceptMembershipRequest(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, RoleId[] acceptedRoles, Member recipientPlaceholder, Member recipientReplacement, string validationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AcceptMembershipRequest", new object[] {
                        containingNamespace,
                        requestedService,
                        requestingMember,
                        acceptedRoles,
                        recipientPlaceholder,
                        recipientReplacement,
                        validationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAcceptMembershipRequest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AcceptMembershipRequestAsync(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, RoleId[] acceptedRoles, Member recipientPlaceholder, Member recipientReplacement, string validationToken) {
            this.AcceptMembershipRequestAsync(containingNamespace, requestedService, requestingMember, acceptedRoles, recipientPlaceholder, recipientReplacement, validationToken, null);
        }
        
        /// <remarks/>
        public void AcceptMembershipRequestAsync(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, RoleId[] acceptedRoles, Member recipientPlaceholder, Member recipientReplacement, string validationToken, object userState) {
            if ((this.AcceptMembershipRequestOperationCompleted == null)) {
                this.AcceptMembershipRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptMembershipRequestOperationCompleted);
            }
            this.InvokeAsync("AcceptMembershipRequest", new object[] {
                        containingNamespace,
                        requestedService,
                        requestingMember,
                        acceptedRoles,
                        recipientPlaceholder,
                        recipientReplacement,
                        validationToken}, this.AcceptMembershipRequestOperationCompleted, userState);
        }
        
        private void OnAcceptMembershipRequestOperationCompleted(object arg) {
            if ((this.AcceptMembershipRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptMembershipRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeclineMembershipRequest", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeclineMembershipRequest(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, bool blockRequestingMember, Member recipientPlaceholder, Member recipientReplacement, string validationToken) {
            this.Invoke("DeclineMembershipRequest", new object[] {
                        containingNamespace,
                        requestedService,
                        requestingMember,
                        blockRequestingMember,
                        recipientPlaceholder,
                        recipientReplacement,
                        validationToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeclineMembershipRequest(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, bool blockRequestingMember, Member recipientPlaceholder, Member recipientReplacement, string validationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeclineMembershipRequest", new object[] {
                        containingNamespace,
                        requestedService,
                        requestingMember,
                        blockRequestingMember,
                        recipientPlaceholder,
                        recipientReplacement,
                        validationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeclineMembershipRequest(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeclineMembershipRequestAsync(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, bool blockRequestingMember, Member recipientPlaceholder, Member recipientReplacement, string validationToken) {
            this.DeclineMembershipRequestAsync(containingNamespace, requestedService, requestingMember, blockRequestingMember, recipientPlaceholder, recipientReplacement, validationToken, null);
        }
        
        /// <remarks/>
        public void DeclineMembershipRequestAsync(NamespaceHandle containingNamespace, ServiceHandle requestedService, Member requestingMember, bool blockRequestingMember, Member recipientPlaceholder, Member recipientReplacement, string validationToken, object userState) {
            if ((this.DeclineMembershipRequestOperationCompleted == null)) {
                this.DeclineMembershipRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeclineMembershipRequestOperationCompleted);
            }
            this.InvokeAsync("DeclineMembershipRequest", new object[] {
                        containingNamespace,
                        requestedService,
                        requestingMember,
                        blockRequestingMember,
                        recipientPlaceholder,
                        recipientReplacement,
                        validationToken}, this.DeclineMembershipRequestOperationCompleted, userState);
        }
        
        private void OnDeclineMembershipRequestOperationCompleted(object arg) {
            if ((this.DeclineMembershipRequestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeclineMembershipRequestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/SendInvitation", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SendInvitation(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, Member[] members) {
            this.Invoke("SendInvitation", new object[] {
                        nsHandle,
                        serviceHandle,
                        inviteOptions,
                        members});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendInvitation(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, Member[] members, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendInvitation", new object[] {
                        nsHandle,
                        serviceHandle,
                        inviteOptions,
                        members}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSendInvitation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SendInvitationAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, Member[] members) {
            this.SendInvitationAsync(nsHandle, serviceHandle, inviteOptions, members, null);
        }
        
        /// <remarks/>
        public void SendInvitationAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, InviteOptions inviteOptions, Member[] members, object userState) {
            if ((this.SendInvitationOperationCompleted == null)) {
                this.SendInvitationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendInvitationOperationCompleted);
            }
            this.InvokeAsync("SendInvitation", new object[] {
                        nsHandle,
                        serviceHandle,
                        inviteOptions,
                        members}, this.SendInvitationOperationCompleted, userState);
        }
        
        private void OnSendInvitationOperationCompleted(object arg) {
            if ((this.SendInvitationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendInvitationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AcceptInvitation", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AcceptInvitation(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken, AcceptInviteOptions acceptInviteOptions) {
            this.Invoke("AcceptInvitation", new object[] {
                        nsHandle,
                        serviceLocations,
                        recipientPlaceholder,
                        validationToken,
                        acceptInviteOptions});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAcceptInvitation(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken, AcceptInviteOptions acceptInviteOptions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AcceptInvitation", new object[] {
                        nsHandle,
                        serviceLocations,
                        recipientPlaceholder,
                        validationToken,
                        acceptInviteOptions}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAcceptInvitation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AcceptInvitationAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken, AcceptInviteOptions acceptInviteOptions) {
            this.AcceptInvitationAsync(nsHandle, serviceLocations, recipientPlaceholder, validationToken, acceptInviteOptions, null);
        }
        
        /// <remarks/>
        public void AcceptInvitationAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken, AcceptInviteOptions acceptInviteOptions, object userState) {
            if ((this.AcceptInvitationOperationCompleted == null)) {
                this.AcceptInvitationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptInvitationOperationCompleted);
            }
            this.InvokeAsync("AcceptInvitation", new object[] {
                        nsHandle,
                        serviceLocations,
                        recipientPlaceholder,
                        validationToken,
                        acceptInviteOptions}, this.AcceptInvitationOperationCompleted, userState);
        }
        
        private void OnAcceptInvitationOperationCompleted(object arg) {
            if ((this.AcceptInvitationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptInvitationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeclineInvitation", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeclineInvitation(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken) {
            this.Invoke("DeclineInvitation", new object[] {
                        nsHandle,
                        serviceLocations,
                        recipientPlaceholder,
                        validationToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeclineInvitation(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeclineInvitation", new object[] {
                        nsHandle,
                        serviceLocations,
                        recipientPlaceholder,
                        validationToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeclineInvitation(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeclineInvitationAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken) {
            this.DeclineInvitationAsync(nsHandle, serviceLocations, recipientPlaceholder, validationToken, null);
        }
        
        /// <remarks/>
        public void DeclineInvitationAsync(NamespaceHandle nsHandle, ServiceLocation[] serviceLocations, Member recipientPlaceholder, string validationToken, object userState) {
            if ((this.DeclineInvitationOperationCompleted == null)) {
                this.DeclineInvitationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeclineInvitationOperationCompleted);
            }
            this.InvokeAsync("DeclineInvitation", new object[] {
                        nsHandle,
                        serviceLocations,
                        recipientPlaceholder,
                        validationToken}, this.DeclineInvitationOperationCompleted, userState);
        }
        
        private void OnDeclineInvitationOperationCompleted(object arg) {
            if ((this.DeclineInvitationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeclineInvitationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindMembership", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MembershipResult FindMembership(NamespaceHandle nsHandle, ServiceFilter serviceFilter, MembershipView view, bool expandMembership, bool deltasOnly, System.DateTime lastChange) {
            object[] results = this.Invoke("FindMembership", new object[] {
                        nsHandle,
                        serviceFilter,
                        view,
                        expandMembership,
                        deltasOnly,
                        lastChange});
            return ((MembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindMembership(NamespaceHandle nsHandle, ServiceFilter serviceFilter, MembershipView view, bool expandMembership, bool deltasOnly, System.DateTime lastChange, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindMembership", new object[] {
                        nsHandle,
                        serviceFilter,
                        view,
                        expandMembership,
                        deltasOnly,
                        lastChange}, callback, asyncState);
        }
        
        /// <remarks/>
        public MembershipResult EndFindMembership(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public void FindMembershipAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, MembershipView view, bool expandMembership, bool deltasOnly, System.DateTime lastChange) {
            this.FindMembershipAsync(nsHandle, serviceFilter, view, expandMembership, deltasOnly, lastChange, null);
        }
        
        /// <remarks/>
        public void FindMembershipAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, MembershipView view, bool expandMembership, bool deltasOnly, System.DateTime lastChange, object userState) {
            if ((this.FindMembershipOperationCompleted == null)) {
                this.FindMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindMembershipOperationCompleted);
            }
            this.InvokeAsync("FindMembership", new object[] {
                        nsHandle,
                        serviceFilter,
                        view,
                        expandMembership,
                        deltasOnly,
                        lastChange}, this.FindMembershipOperationCompleted, userState);
        }
        
        private void OnFindMembershipOperationCompleted(object arg) {
            if ((this.FindMembershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindMembershipCompleted(this, new FindMembershipCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindMembershipByRole", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MembershipResult FindMembershipByRole(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership) {
            object[] results = this.Invoke("FindMembershipByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        view,
                        expandMembership});
            return ((MembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindMembershipByRole(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindMembershipByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        view,
                        expandMembership}, callback, asyncState);
        }
        
        /// <remarks/>
        public MembershipResult EndFindMembershipByRole(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public void FindMembershipByRoleAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership) {
            this.FindMembershipByRoleAsync(nsHandle, serviceFilter, includedRoles, view, expandMembership, null);
        }
        
        /// <remarks/>
        public void FindMembershipByRoleAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership, object userState) {
            if ((this.FindMembershipByRoleOperationCompleted == null)) {
                this.FindMembershipByRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindMembershipByRoleOperationCompleted);
            }
            this.InvokeAsync("FindMembershipByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        view,
                        expandMembership}, this.FindMembershipByRoleOperationCompleted, userState);
        }
        
        private void OnFindMembershipByRoleOperationCompleted(object arg) {
            if ((this.FindMembershipByRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindMembershipByRoleCompleted(this, new FindMembershipByRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/CountMembersByRole", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountInfo CountMembersByRole(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, bool expandMembership, CountInfo countInfo) {
            object[] results = this.Invoke("CountMembersByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        expandMembership,
                        countInfo});
            return ((CountInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCountMembersByRole(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, bool expandMembership, CountInfo countInfo, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CountMembersByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        expandMembership,
                        countInfo}, callback, asyncState);
        }
        
        /// <remarks/>
        public CountInfo EndCountMembersByRole(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CountInfo)(results[0]));
        }
        
        /// <remarks/>
        public void CountMembersByRoleAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, bool expandMembership, CountInfo countInfo) {
            this.CountMembersByRoleAsync(nsHandle, serviceFilter, includedRoles, expandMembership, countInfo, null);
        }
        
        /// <remarks/>
        public void CountMembersByRoleAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, bool expandMembership, CountInfo countInfo, object userState) {
            if ((this.CountMembersByRoleOperationCompleted == null)) {
                this.CountMembersByRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCountMembersByRoleOperationCompleted);
            }
            this.InvokeAsync("CountMembersByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        expandMembership,
                        countInfo}, this.CountMembersByRoleOperationCompleted, userState);
        }
        
        private void OnCountMembersByRoleOperationCompleted(object arg) {
            if ((this.CountMembersByRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CountMembersByRoleCompleted(this, new CountMembersByRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/PageMembershipByRole", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PagedMembershipResult PageMembershipByRole(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership, PageContext pageContext) {
            object[] results = this.Invoke("PageMembershipByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        view,
                        expandMembership,
                        pageContext});
            return ((PagedMembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPageMembershipByRole(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership, PageContext pageContext, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PageMembershipByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        view,
                        expandMembership,
                        pageContext}, callback, asyncState);
        }
        
        /// <remarks/>
        public PagedMembershipResult EndPageMembershipByRole(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PagedMembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public void PageMembershipByRoleAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership, PageContext pageContext) {
            this.PageMembershipByRoleAsync(nsHandle, serviceFilter, includedRoles, view, expandMembership, pageContext, null);
        }
        
        /// <remarks/>
        public void PageMembershipByRoleAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, RoleId[] includedRoles, MembershipView view, bool expandMembership, PageContext pageContext, object userState) {
            if ((this.PageMembershipByRoleOperationCompleted == null)) {
                this.PageMembershipByRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPageMembershipByRoleOperationCompleted);
            }
            this.InvokeAsync("PageMembershipByRole", new object[] {
                        nsHandle,
                        serviceFilter,
                        includedRoles,
                        view,
                        expandMembership,
                        pageContext}, this.PageMembershipByRoleOperationCompleted, userState);
        }
        
        private void OnPageMembershipByRoleOperationCompleted(object arg) {
            if ((this.PageMembershipByRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PageMembershipByRoleCompleted(this, new PageMembershipByRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindMembershipByMember", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MembershipResult FindMembershipByMember(NamespaceHandle nsHandle, ServiceFilter serviceFilter, Member member, MembershipView view) {
            object[] results = this.Invoke("FindMembershipByMember", new object[] {
                        nsHandle,
                        serviceFilter,
                        member,
                        view});
            return ((MembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindMembershipByMember(NamespaceHandle nsHandle, ServiceFilter serviceFilter, Member member, MembershipView view, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindMembershipByMember", new object[] {
                        nsHandle,
                        serviceFilter,
                        member,
                        view}, callback, asyncState);
        }
        
        /// <remarks/>
        public MembershipResult EndFindMembershipByMember(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MembershipResult)(results[0]));
        }
        
        /// <remarks/>
        public void FindMembershipByMemberAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, Member member, MembershipView view) {
            this.FindMembershipByMemberAsync(nsHandle, serviceFilter, member, view, null);
        }
        
        /// <remarks/>
        public void FindMembershipByMemberAsync(NamespaceHandle nsHandle, ServiceFilter serviceFilter, Member member, MembershipView view, object userState) {
            if ((this.FindMembershipByMemberOperationCompleted == null)) {
                this.FindMembershipByMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindMembershipByMemberOperationCompleted);
            }
            this.InvokeAsync("FindMembershipByMember", new object[] {
                        nsHandle,
                        serviceFilter,
                        member,
                        view}, this.FindMembershipByMemberOperationCompleted, userState);
        }
        
        private void OnFindMembershipByMemberOperationCompleted(object arg) {
            if ((this.FindMembershipByMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindMembershipByMemberCompleted(this, new FindMembershipByMemberCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/AddMember", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddMember(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, InviteOptions inviteOptions) {
            this.Invoke("AddMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships,
                        inviteOptions});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddMember(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, InviteOptions inviteOptions, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships,
                        inviteOptions}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddMember(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddMemberAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, InviteOptions inviteOptions) {
            this.AddMemberAsync(nsHandle, serviceHandle, memberships, inviteOptions, null);
        }
        
        /// <remarks/>
        public void AddMemberAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, InviteOptions inviteOptions, object userState) {
            if ((this.AddMemberOperationCompleted == null)) {
                this.AddMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddMemberOperationCompleted);
            }
            this.InvokeAsync("AddMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships,
                        inviteOptions}, this.AddMemberOperationCompleted, userState);
        }
        
        private void OnAddMemberOperationCompleted(object arg) {
            if ((this.AddMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/UpdateMember", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateMember(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships) {
            this.Invoke("UpdateMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateMember(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateMember(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateMemberAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships) {
            this.UpdateMemberAsync(nsHandle, serviceHandle, memberships, null);
        }
        
        /// <remarks/>
        public void UpdateMemberAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, object userState) {
            if ((this.UpdateMemberOperationCompleted == null)) {
                this.UpdateMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateMemberOperationCompleted);
            }
            this.InvokeAsync("UpdateMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships}, this.UpdateMemberOperationCompleted, userState);
        }
        
        private void OnUpdateMemberOperationCompleted(object arg) {
            if ((this.UpdateMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/DeleteMember", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteMember(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships) {
            this.Invoke("DeleteMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteMember(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteMember(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DeleteMemberAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships) {
            this.DeleteMemberAsync(nsHandle, serviceHandle, memberships, null);
        }
        
        /// <remarks/>
        public void DeleteMemberAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Membership[] memberships, object userState) {
            if ((this.DeleteMemberOperationCompleted == null)) {
                this.DeleteMemberOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteMemberOperationCompleted);
            }
            this.InvokeAsync("DeleteMember", new object[] {
                        nsHandle,
                        serviceHandle,
                        memberships}, this.DeleteMemberOperationCompleted, userState);
        }
        
        private void OnDeleteMemberOperationCompleted(object arg) {
            if ((this.DeleteMemberCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteMemberCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/SetMembership", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SetMembership(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member[] members, RoleId[] roleIds) {
            this.Invoke("SetMembership", new object[] {
                        nsHandle,
                        serviceHandle,
                        members,
                        roleIds});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSetMembership(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member[] members, RoleId[] roleIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SetMembership", new object[] {
                        nsHandle,
                        serviceHandle,
                        members,
                        roleIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSetMembership(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void SetMembershipAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member[] members, RoleId[] roleIds) {
            this.SetMembershipAsync(nsHandle, serviceHandle, members, roleIds, null);
        }
        
        /// <remarks/>
        public void SetMembershipAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member[] members, RoleId[] roleIds, object userState) {
            if ((this.SetMembershipOperationCompleted == null)) {
                this.SetMembershipOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSetMembershipOperationCompleted);
            }
            this.InvokeAsync("SetMembership", new object[] {
                        nsHandle,
                        serviceHandle,
                        members,
                        roleIds}, this.SetMembershipOperationCompleted, userState);
        }
        
        private void OnSetMembershipOperationCompleted(object arg) {
            if ((this.SetMembershipCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SetMembershipCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/MemberHasRole", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool MemberHasRole(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member member, RoleId[] roles) {
            object[] results = this.Invoke("MemberHasRole", new object[] {
                        nsHandle,
                        serviceHandle,
                        member,
                        roles});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMemberHasRole(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member member, RoleId[] roles, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MemberHasRole", new object[] {
                        nsHandle,
                        serviceHandle,
                        member,
                        roles}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndMemberHasRole(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void MemberHasRoleAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member member, RoleId[] roles) {
            this.MemberHasRoleAsync(nsHandle, serviceHandle, member, roles, null);
        }
        
        /// <remarks/>
        public void MemberHasRoleAsync(NamespaceHandle nsHandle, ServiceHandle serviceHandle, Member member, RoleId[] roles, object userState) {
            if ((this.MemberHasRoleOperationCompleted == null)) {
                this.MemberHasRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberHasRoleOperationCompleted);
            }
            this.InvokeAsync("MemberHasRole", new object[] {
                        nsHandle,
                        serviceHandle,
                        member,
                        roles}, this.MemberHasRoleOperationCompleted, userState);
        }
        
        private void OnMemberHasRoleOperationCompleted(object arg) {
            if ((this.MemberHasRoleCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberHasRoleCompleted(this, new MemberHasRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/MemberHasRoles", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public HasRoleResults MemberHasRoles(Member member, ServiceMembership[] serviceMemberships) {
            object[] results = this.Invoke("MemberHasRoles", new object[] {
                        member,
                        serviceMemberships});
            return ((HasRoleResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMemberHasRoles(Member member, ServiceMembership[] serviceMemberships, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MemberHasRoles", new object[] {
                        member,
                        serviceMemberships}, callback, asyncState);
        }
        
        /// <remarks/>
        public HasRoleResults EndMemberHasRoles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((HasRoleResults)(results[0]));
        }
        
        /// <remarks/>
        public void MemberHasRolesAsync(Member member, ServiceMembership[] serviceMemberships) {
            this.MemberHasRolesAsync(member, serviceMemberships, null);
        }
        
        /// <remarks/>
        public void MemberHasRolesAsync(Member member, ServiceMembership[] serviceMemberships, object userState) {
            if ((this.MemberHasRolesOperationCompleted == null)) {
                this.MemberHasRolesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMemberHasRolesOperationCompleted);
            }
            this.InvokeAsync("MemberHasRoles", new object[] {
                        member,
                        serviceMemberships}, this.MemberHasRolesOperationCompleted, userState);
        }
        
        private void OnMemberHasRolesOperationCompleted(object arg) {
            if ((this.MemberHasRolesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MemberHasRolesCompleted(this, new MemberHasRolesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FanOutNotification", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void FanOutNotification(NamespaceHandle nsHandle, NotificationData[] notifications, bool sendAlert) {
            this.Invoke("FanOutNotification", new object[] {
                        nsHandle,
                        notifications,
                        sendAlert});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFanOutNotification(NamespaceHandle nsHandle, NotificationData[] notifications, bool sendAlert, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FanOutNotification", new object[] {
                        nsHandle,
                        notifications,
                        sendAlert}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndFanOutNotification(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void FanOutNotificationAsync(NamespaceHandle nsHandle, NotificationData[] notifications, bool sendAlert) {
            this.FanOutNotificationAsync(nsHandle, notifications, sendAlert, null);
        }
        
        /// <remarks/>
        public void FanOutNotificationAsync(NamespaceHandle nsHandle, NotificationData[] notifications, bool sendAlert, object userState) {
            if ((this.FanOutNotificationOperationCompleted == null)) {
                this.FanOutNotificationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFanOutNotificationOperationCompleted);
            }
            this.InvokeAsync("FanOutNotification", new object[] {
                        nsHandle,
                        notifications,
                        sendAlert}, this.FanOutNotificationOperationCompleted, userState);
        }
        
        private void OnFanOutNotificationOperationCompleted(object arg) {
            if ((this.FanOutNotificationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FanOutNotificationCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABAuthHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABTestHeaderValue")]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ServiceHeaderValue", Direction=System.Web.Services.Protocols.SoapHeaderDirection.Out)]
        [System.Web.Services.Protocols.SoapHeaderAttribute("ABApplicationHeaderValue")]
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.msn.com/webservices/AddressBook/FindMailingList", RequestNamespace="http://www.msn.com/webservices/AddressBook", ResponseNamespace="http://www.msn.com/webservices/AddressBook", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FindMailingListResult FindMailingList(Member sender, string recipientDLEmailAddress) {
            object[] results = this.Invoke("FindMailingList", new object[] {
                        sender,
                        recipientDLEmailAddress});
            return ((FindMailingListResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindMailingList(Member sender, string recipientDLEmailAddress, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindMailingList", new object[] {
                        sender,
                        recipientDLEmailAddress}, callback, asyncState);
        }
        
        /// <remarks/>
        public FindMailingListResult EndFindMailingList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FindMailingListResult)(results[0]));
        }
        
        /// <remarks/>
        public void FindMailingListAsync(Member sender, string recipientDLEmailAddress) {
            this.FindMailingListAsync(sender, recipientDLEmailAddress, null);
        }
        
        /// <remarks/>
        public void FindMailingListAsync(Member sender, string recipientDLEmailAddress, object userState) {
            if ((this.FindMailingListOperationCompleted == null)) {
                this.FindMailingListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindMailingListOperationCompleted);
            }
            this.InvokeAsync("FindMailingList", new object[] {
                        sender,
                        recipientDLEmailAddress}, this.FindMailingListOperationCompleted, userState);
        }
        
        private void OnFindMailingListOperationCompleted(object arg) {
            if ((this.FindMailingListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindMailingListCompleted(this, new FindMailingListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace="http://www.msn.com/webservices/AddressBook", IsNullable=false)]
    public partial class ABAuthHeader : System.Web.Services.Protocols.SoapHeader {
        
        private bool managedGroupRequestField;
        
        private IdentificationHeader callerIdentificationField;
        
        private string ticketTokenField;
        
        private System.Xml.XmlAttribute[] anyAttrField;
        
        /// <remarks/>
        public bool ManagedGroupRequest {
            get {
                return this.managedGroupRequestField;
            }
            set {
                this.managedGroupRequestField = value;
            }
        }
        
        /// <remarks/>
        public IdentificationHeader CallerIdentification {
            get {
                return this.callerIdentificationField;
            }
            set {
                this.callerIdentificationField = value;
            }
        }
        
        /// <remarks/>
        public string TicketToken {
            get {
                return this.ticketTokenField;
            }
            set {
                this.ticketTokenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAnyAttributeAttribute()]
        public System.Xml.XmlAttribute[] AnyAttr {
            get {
                return this.anyAttrField;
            }
            set {
                this.anyAttrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class IdentificationHeader {
        
        private long callerPassportIdField;
        
        private string callerPassportNameField;
        
        /// <remarks/>
        public long CallerPassportId {
            get {
                return this.callerPassportIdField;
            }
            set {
                this.callerPassportIdField = value;
            }
        }
        
        /// <remarks/>
        public string CallerPassportName {
            get {
                return this.callerPassportNameField;
            }
            set {
                this.callerPassportNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class FindMailingListResult {
        
        private NamespaceHandle namespaceHandleField;
        
        private ServiceHandle serviceHandleField;
        
        private Member senderField;
        
        /// <remarks/>
        public NamespaceHandle NamespaceHandle {
            get {
                return this.namespaceHandleField;
            }
            set {
                this.namespaceHandleField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle ServiceHandle {
            get {
                return this.serviceHandleField;
            }
            set {
                this.serviceHandleField = value;
            }
        }
        
        /// <remarks/>
        public Member Sender {
            get {
                return this.senderField;
            }
            set {
                this.senderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NamespaceHandle {
        
        private System.Guid idField;
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private long cIDField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceHandle {
        
        private short idField;
        
        private ServiceType typeField;
        
        private string foreignIdField;
        
        /// <remarks/>
        public short Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ServiceType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public string ForeignId {
            get {
                return this.foreignIdField;
            }
            set {
                this.foreignIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ServiceType {
        
        /// <remarks/>
        Namespace,
        
        /// <remarks/>
        Calendar,
        
        /// <remarks/>
        Folder,
        
        /// <remarks/>
        ContactInfo,
        
        /// <remarks/>
        AddressBook,
        
        /// <remarks/>
        Favorites,
        
        /// <remarks/>
        Messenger,
        
        /// <remarks/>
        Space,
        
        /// <remarks/>
        MessageContainer,
        
        /// <remarks/>
        PhotoAlbum,
        
        /// <remarks/>
        List,
        
        /// <remarks/>
        ABCHInternal,
        
        /// <remarks/>
        Invitation,
        
        /// <remarks/>
        SocialNetwork,
        
        /// <remarks/>
        Profile,
        
        /// <remarks/>
        EmailNotifications,
        
        /// <remarks/>
        BlindEmail,
        
        /// <remarks/>
        Classifieds,
        
        /// <remarks/>
        CommunityQuestionAnswer,
        
        /// <remarks/>
        OfficeLiveWebNotification,
        
        /// <remarks/>
        SharedCircles,
        
        /// <remarks/>
        Custom,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        Subscriber,
        
        /// <remarks/>
        ContentSet,
        
        /// <remarks/>
        TryStar,
        
        /// <remarks/>
        MessengerApplications,
        
        /// <remarks/>
        MailingList,
        
        /// <remarks/>
        MessengerPrivate,
        
        /// <remarks/>
        LiveFolder,
        
        /// <remarks/>
        Match,
        
        /// <remarks/>
        Contoso,
        
        /// <remarks/>
        Reserved01,
        
        /// <remarks/>
        Reserved02,
        
        /// <remarks/>
        Reserved03,
        
        /// <remarks/>
        Reserved04,
        
        /// <remarks/>
        Reserved05,
        
        /// <remarks/>
        Reserved06,
        
        /// <remarks/>
        Reserved07,
        
        /// <remarks/>
        Reserved08,
        
        /// <remarks/>
        Reserved09,
        
        /// <remarks/>
        Reserved10,
        
        /// <remarks/>
        PEO01,
        
        /// <remarks/>
        PEO02,
        
        /// <remarks/>
        PEO03,
        
        /// <remarks/>
        PEO04,
        
        /// <remarks/>
        PEO05,
        
        /// <remarks/>
        PEO06,
        
        /// <remarks/>
        PEO07,
        
        /// <remarks/>
        PEO08,
        
        /// <remarks/>
        PEO09,
        
        /// <remarks/>
        PEO10,
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(CircleMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(DomainMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PhoneMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GroupMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GuidMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EveryoneMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(PassportMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(EmailMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceMember))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RoleMember))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public abstract partial class Member {
        
        private int membershipIdField;
        
        private MemberType typeField;
        
        private NamespaceHandle locationField;
        
        private string displayNameField;
        
        private MemberState stateField;
        
        private RoleId newRoleField;
        
        private bool newRoleFieldSpecified;
        
        private Annotation[] annotationsField;
        
        private bool deletedField;
        
        private System.DateTime lastChangedField;
        
        private MemberPropertyTypes changesField;
        
        /// <remarks/>
        public int MembershipId {
            get {
                return this.membershipIdField;
            }
            set {
                this.membershipIdField = value;
            }
        }
        
        /// <remarks/>
        public MemberType Type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public NamespaceHandle Location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public MemberState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public RoleId NewRole {
            get {
                return this.newRoleField;
            }
            set {
                this.newRoleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool NewRoleSpecified {
            get {
                return this.newRoleFieldSpecified;
            }
            set {
                this.newRoleFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public Annotation[] Annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
        
        /// <remarks/>
        public MemberPropertyTypes Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberType {
        
        /// <remarks/>
        Passport,
        
        /// <remarks/>
        Everyone,
        
        /// <remarks/>
        Phone,
        
        /// <remarks/>
        Email,
        
        /// <remarks/>
        Group,
        
        /// <remarks/>
        Guid,
        
        /// <remarks/>
        Role,
        
        /// <remarks/>
        Service,
        
        /// <remarks/>
        Circle,
        
        /// <remarks/>
        Domain,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberState {
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        Declined,
        
        /// <remarks/>
        Accepted,
        
        /// <remarks/>
        Removed,
        
        /// <remarks/>
        Tentative,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum RoleId {
        
        /// <remarks/>
        Admin,
        
        /// <remarks/>
        AssistantAdmin,
        
        /// <remarks/>
        Member,
        
        /// <remarks/>
        Guest,
        
        /// <remarks/>
        Banned,
        
        /// <remarks/>
        Delegate,
        
        /// <remarks/>
        Allow,
        
        /// <remarks/>
        Block,
        
        /// <remarks/>
        Reverse,
        
        /// <remarks/>
        Pending,
        
        /// <remarks/>
        CalFreeBusy,
        
        /// <remarks/>
        Contributor,
        
        /// <remarks/>
        NamespaceQuota,
        
        /// <remarks/>
        TwoWayRelationship,
        
        /// <remarks/>
        OneWayRelationship,
        
        /// <remarks/>
        ProfileCareer,
        
        /// <remarks/>
        ProfileDating,
        
        /// <remarks/>
        ProfileEducation,
        
        /// <remarks/>
        ProfileGaming,
        
        /// <remarks/>
        ProfileGeneral,
        
        /// <remarks/>
        ProfilePersonalContact,
        
        /// <remarks/>
        ProfileProfessionalContact,
        
        /// <remarks/>
        ProfileSocial,
        
        /// <remarks/>
        ProfileExpression,
        
        /// <remarks/>
        CircleProfileGeneral,
        
        /// <remarks/>
        CircleProfileEvent,
        
        /// <remarks/>
        Custom,
        
        /// <remarks/>
        AllMember,
        
        /// <remarks/>
        AllAdmin,
        
        /// <remarks/>
        Partner,
        
        /// <remarks/>
        CircleContactProfile1,
        
        /// <remarks/>
        CircleContactProfile2,
        
        /// <remarks/>
        PostPending,
        
        /// <remarks/>
        VoteAsSpammer,
        
        /// <remarks/>
        Reader,
        
        /// <remarks/>
        ReadWrite,
        
        /// <remarks/>
        ReadOnly,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Annotation {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum MemberPropertyTypes {
        
        /// <remarks/>
        State = 1,
        
        /// <remarks/>
        Annotations = 2,
        
        /// <remarks/>
        DisplayName = 4,
        
        /// <remarks/>
        NewRole = 8,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class CircleMember : Member {
        
        private long circleIdField;
        
        /// <remarks/>
        public long CircleId {
            get {
                return this.circleIdField;
            }
            set {
                this.circleIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class DomainMember : Member {
        
        private string domainNameField;
        
        /// <remarks/>
        public string DomainName {
            get {
                return this.domainNameField;
            }
            set {
                this.domainNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PhoneMember : Member {
        
        private string phoneNumberField;
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GroupMember : Member {
        
        private System.Guid idField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class GuidMember : Member {
        
        private System.Guid idField;
        
        /// <remarks/>
        public System.Guid Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class EveryoneMember : Member {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PassportMember : Member {
        
        private string passportNameField;
        
        private bool isPassportNameHiddenField;
        
        private long passportIdField;
        
        private long cIDField;
        
        private PassportMemberPropertyTypes passportChangesField;
        
        /// <remarks/>
        public string PassportName {
            get {
                return this.passportNameField;
            }
            set {
                this.passportNameField = value;
            }
        }
        
        /// <remarks/>
        public bool IsPassportNameHidden {
            get {
                return this.isPassportNameHiddenField;
            }
            set {
                this.isPassportNameHiddenField = value;
            }
        }
        
        /// <remarks/>
        public long PassportId {
            get {
                return this.passportIdField;
            }
            set {
                this.passportIdField = value;
            }
        }
        
        /// <remarks/>
        public long CID {
            get {
                return this.cIDField;
            }
            set {
                this.cIDField = value;
            }
        }
        
        /// <remarks/>
        public PassportMemberPropertyTypes PassportChanges {
            get {
                return this.passportChangesField;
            }
            set {
                this.passportChangesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum PassportMemberPropertyTypes {
        
        /// <remarks/>
        IsPassportNameHidden = 1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class EmailMember : Member {
        
        private string emailField;
        
        /// <remarks/>
        public string Email {
            get {
                return this.emailField;
            }
            set {
                this.emailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceMember : Member {
        
        private ServiceHandle serviceField;
        
        /// <remarks/>
        public ServiceHandle Service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class RoleMember : Member {
        
        private RoleId idField;
        
        private ServiceHandle definingServiceField;
        
        private int maxRoleRecursionDepthField;
        
        private int maxDegreesSeparationField;
        
        /// <remarks/>
        public RoleId Id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle DefiningService {
            get {
                return this.definingServiceField;
            }
            set {
                this.definingServiceField = value;
            }
        }
        
        /// <remarks/>
        public int MaxRoleRecursionDepth {
            get {
                return this.maxRoleRecursionDepthField;
            }
            set {
                this.maxRoleRecursionDepthField = value;
            }
        }
        
        /// <remarks/>
        public int MaxDegreesSeparation {
            get {
                return this.maxDegreesSeparationField;
            }
            set {
                this.maxDegreesSeparationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NotificationData {
        
        private Service storeServiceField;
        
        private StoreStatusTypes statusField;
        
        private bool statusFieldSpecified;
        
        private System.DateTime lastChangedField;
        
        private bool lastChangedFieldSpecified;
        
        private System.DateTime lastViewedField;
        
        private bool lastViewedFieldSpecified;
        
        private bool gleamField;
        
        private bool gleamFieldSpecified;
        
        private byte instanceIdField;
        
        /// <remarks/>
        public Service StoreService {
            get {
                return this.storeServiceField;
            }
            set {
                this.storeServiceField = value;
            }
        }
        
        /// <remarks/>
        public StoreStatusTypes Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool StatusSpecified {
            get {
                return this.statusFieldSpecified;
            }
            set {
                this.statusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChanged {
            get {
                return this.lastChangedField;
            }
            set {
                this.lastChangedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastChangedSpecified {
            get {
                return this.lastChangedFieldSpecified;
            }
            set {
                this.lastChangedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastViewed {
            get {
                return this.lastViewedField;
            }
            set {
                this.lastViewedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool LastViewedSpecified {
            get {
                return this.lastViewedFieldSpecified;
            }
            set {
                this.lastViewedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public bool Gleam {
            get {
                return this.gleamField;
            }
            set {
                this.gleamField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GleamSpecified {
            get {
                return this.gleamFieldSpecified;
            }
            set {
                this.gleamFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public byte InstanceId {
            get {
                return this.instanceIdField;
            }
            set {
                this.instanceIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Service {
        
        private Membership[] membershipsField;
        
        private ServiceInfo infoField;
        
        private ServicePropertyType changesField;
        
        private System.DateTime lastChangeField;
        
        private bool deletedField;
        
        /// <remarks/>
        public Membership[] Memberships {
            get {
                return this.membershipsField;
            }
            set {
                this.membershipsField = value;
            }
        }
        
        /// <remarks/>
        public ServiceInfo Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public ServicePropertyType Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        public bool Deleted {
            get {
                return this.deletedField;
            }
            set {
                this.deletedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Membership {
        
        private RoleId memberRoleField;
        
        private Member[] membersField;
        
        private bool membershipIsCompleteField;
        
        /// <remarks/>
        public RoleId MemberRole {
            get {
                return this.memberRoleField;
            }
            set {
                this.memberRoleField = value;
            }
        }
        
        /// <remarks/>
        public Member[] Members {
            get {
                return this.membersField;
            }
            set {
                this.membersField = value;
            }
        }
        
        /// <remarks/>
        public bool MembershipIsComplete {
            get {
                return this.membershipIsCompleteField;
            }
            set {
                this.membershipIsCompleteField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceInfo {
        
        private Annotation[] annotationsField;
        
        private AliasInfo[] aliasesField;
        
        private ServiceHandle handleField;
        
        private string displayNameField;
        
        private bool inverseRequiredField;
        
        private string urlField;
        
        private string rSSUrlField;
        
        private string authorizationCriteriaField;
        
        private bool isBotField;
        
        /// <remarks/>
        public Annotation[] Annotations {
            get {
                return this.annotationsField;
            }
            set {
                this.annotationsField = value;
            }
        }
        
        /// <remarks/>
        public AliasInfo[] Aliases {
            get {
                return this.aliasesField;
            }
            set {
                this.aliasesField = value;
            }
        }
        
        /// <remarks/>
        public ServiceHandle Handle {
            get {
                return this.handleField;
            }
            set {
                this.handleField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public bool InverseRequired {
            get {
                return this.inverseRequiredField;
            }
            set {
                this.inverseRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string Url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
        
        /// <remarks/>
        public string RSSUrl {
            get {
                return this.rSSUrlField;
            }
            set {
                this.rSSUrlField = value;
            }
        }
        
        /// <remarks/>
        public string AuthorizationCriteria {
            get {
                return this.authorizationCriteriaField;
            }
            set {
                this.authorizationCriteriaField = value;
            }
        }
        
        /// <remarks/>
        public bool IsBot {
            get {
                return this.isBotField;
            }
            set {
                this.isBotField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class AliasInfo {
        
        private string aliasField;
        
        private AliasChangeInfo changeInfoField;
        
        /// <remarks/>
        public string Alias {
            get {
                return this.aliasField;
            }
            set {
                this.aliasField = value;
            }
        }
        
        /// <remarks/>
        public AliasChangeInfo ChangeInfo {
            get {
                return this.changeInfoField;
            }
            set {
                this.changeInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class AliasChangeInfo {
        
        private string newAliasField;
        
        private AliasChangeType changeTypeField;
        
        /// <remarks/>
        public string NewAlias {
            get {
                return this.newAliasField;
            }
            set {
                this.newAliasField = value;
            }
        }
        
        /// <remarks/>
        public AliasChangeType ChangeType {
            get {
                return this.changeTypeField;
            }
            set {
                this.changeTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum AliasChangeType {
        
        /// <remarks/>
        Add,
        
        /// <remarks/>
        Delete,
        
        /// <remarks/>
        Update,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum ServicePropertyType {
        
        /// <remarks/>
        DisplayName = 1,
        
        /// <remarks/>
        Url = 2,
        
        /// <remarks/>
        Annotation = 4,
        
        /// <remarks/>
        RSSUrl = 8,
        
        /// <remarks/>
        IsBot = 16,
        
        /// <remarks/>
        Alias = 32,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum StoreStatusTypes {
        
        /// <remarks/>
        Exist = 1,
        
        /// <remarks/>
        Access = 2,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class HasRoleResult {
        
        private bool hasRoleField;
        
        /// <remarks/>
        public bool HasRole {
            get {
                return this.hasRoleField;
            }
            set {
                this.hasRoleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class HasRoleResults {
        
        private HasRoleResult[] resultsField;
        
        /// <remarks/>
        public HasRoleResult[] Results {
            get {
                return this.resultsField;
            }
            set {
                this.resultsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceMembership {
        
        private ServiceLocation serviceLocationField;
        
        private Membership membershipField;
        
        /// <remarks/>
        public ServiceLocation ServiceLocation {
            get {
                return this.serviceLocationField;
            }
            set {
                this.serviceLocationField = value;
            }
        }
        
        /// <remarks/>
        public Membership Membership {
            get {
                return this.membershipField;
            }
            set {
                this.membershipField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class ServiceLocation {
        
        private NamespaceHandle namespaceHandleField;
        
        private ServiceInfo serviceInfoField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public NamespaceHandle NamespaceHandle {
            get {
                return this.namespaceHandleField;
            }
            set {
                this.namespaceHandleField = value;
            }
        }
        
        /// <remarks/>
        public ServiceInfo ServiceInfo {
            get {
                return this.serviceInfoField;
            }
            set {
                this.serviceInfoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PagedMember {
        
        private Member memberField;
        
        private RoleId roleField;
        
        /// <remarks/>
        public Member Member {
            get {
                return this.memberField;
            }
            set {
                this.memberField = value;
            }
        }
        
        /// <remarks/>
        public RoleId Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PagedService {
        
        private ServiceInfo infoField;
        
        private System.DateTime lastChangeField;
        
        private PagedMember[] membersField;
        
        /// <remarks/>
        public ServiceInfo Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
        
        /// <remarks/>
        public PagedMember[] Members {
            get {
                return this.membersField;
            }
            set {
                this.membersField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PagedMembershipResult {
        
        private PagedService serviceField;
        
        private PageContext pageContextField;
        
        /// <remarks/>
        public PagedService Service {
            get {
                return this.serviceField;
            }
            set {
                this.serviceField = value;
            }
        }
        
        /// <remarks/>
        public PageContext PageContext {
            get {
                return this.pageContextField;
            }
            set {
                this.pageContextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class PageContext {
        
        private StartToken startTokenField;
        
        private int pageSizeField;
        
        private PageDirection directionField;
        
        private SortOption[] sortOptionsField;
        
        private CountInfo countInfoField;
        
        /// <remarks/>
        public StartToken StartToken {
            get {
                return this.startTokenField;
            }
            set {
                this.startTokenField = value;
            }
        }
        
        /// <remarks/>
        public int PageSize {
            get {
                return this.pageSizeField;
            }
            set {
                this.pageSizeField = value;
            }
        }
        
        /// <remarks/>
        public PageDirection Direction {
            get {
                return this.directionField;
            }
            set {
                this.directionField = value;
            }
        }
        
        /// <remarks/>
        public SortOption[] SortOptions {
            get {
                return this.sortOptionsField;
            }
            set {
                this.sortOptionsField = value;
            }
        }
        
        /// <remarks/>
        public CountInfo CountInfo {
            get {
                return this.countInfoField;
            }
            set {
                this.countInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class StartToken {
        
        private int roleMappingIdField;
        
        private string displayNameField;
        
        private RoleId roleField;
        
        /// <remarks/>
        public int RoleMappingId {
            get {
                return this.roleMappingIdField;
            }
            set {
                this.roleMappingIdField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public RoleId Role {
            get {
                return this.roleField;
            }
            set {
                this.roleField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum PageDirection {
        
        /// <remarks/>
        Forward,
        
        /// <remarks/>
        Backward,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class SortOption {
        
        private SortField sortFieldField;
        
        private SortOrder sortOrderField;
        
        /// <remarks/>
        public SortField SortField {
            get {
                return this.sortFieldField;
            }
            set {
                this.sortFieldField = value;
            }
        }
        
        /// <remarks/>
        public SortOrder SortOrder {
            get {
                return this.sortOrderField;
            }
            set {
                this.sortOrderField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum SortField {
        
        /// <remarks/>
        Role,
        
        /// <remarks/>
        DisplayName,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum SortOrder {
        
        /// <remarks/>
        Ascending,
        
        /// <remarks/>
        Descending,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class CountInfo {
        
        private int totalField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public int Total {
            get {
                return this.totalField;
            }
            set {
                this.totalField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class MembershipResult {
        
        private Service[] servicesField;
        
        private Namespace ownerNamespaceField;
        
        /// <remarks/>
        public Service[] Services {
            get {
                return this.servicesField;
            }
            set {
                this.servicesField = value;
            }
        }
        
        /// <remarks/>
        public Namespace OwnerNamespace {
            get {
                return this.ownerNamespaceField;
            }
            set {
                this.ownerNamespaceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class Namespace {
        
        private NamespaceInfo infoField;
        
        private NamespacePropertyTypes changesField;
        
        private System.DateTime createDateField;
        
        private System.DateTime lastChangeField;
        
        /// <remarks/>
        public NamespaceInfo Info {
            get {
                return this.infoField;
            }
            set {
                this.infoField = value;
            }
        }
        
        /// <remarks/>
        public NamespacePropertyTypes Changes {
            get {
                return this.changesField;
            }
            set {
                this.changesField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastChange {
            get {
                return this.lastChangeField;
            }
            set {
                this.lastChangeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class NamespaceInfo {
        
        private NamespaceHandle handleField;
        
        private string displayNameField;
        
        private long creatorPuidField;
        
        private long creatorCIDField;
        
        private string creatorPassportNameField;
        
        private CircleAttributes circleAttributesField;
        
        private bool messengerApplicationServiceCreatedField;
        
        /// <remarks/>
        public NamespaceHandle Handle {
            get {
                return this.handleField;
            }
            set {
                this.handleField = value;
            }
        }
        
        /// <remarks/>
        public string DisplayName {
            get {
                return this.displayNameField;
            }
            set {
                this.displayNameField = value;
            }
        }
        
        /// <remarks/>
        public long CreatorPuid {
            get {
                return this.creatorPuidField;
            }
            set {
                this.creatorPuidField = value;
            }
        }
        
        /// <remarks/>
        public long CreatorCID {
            get {
                return this.creatorCIDField;
            }
            set {
                this.creatorCIDField = value;
            }
        }
        
        /// <remarks/>
        public string CreatorPassportName {
            get {
                return this.creatorPassportNameField;
            }
            set {
                this.creatorPassportNameField = value;
            }
        }
        
        /// <remarks/>
        public CircleAttributes CircleAttributes {
            get {
                return this.circleAttributesField;
            }
            set {
                this.circleAttributesField = value;
            }
        }
        
        /// <remarks/>
        public bool MessengerApplicationServiceCreated {
            get {
                return this.messengerApplicationServiceCreatedField;
            }
            set {
                this.messengerApplicationServiceCreatedField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class CircleAttributes {
        
        private bool isPresenceEnabledField;
        
        private bool isEventField;
        
        private CircleDomain domainField;
        
        /// <remarks/>
        public bool IsPresenceEnabled {
            get {
                return this.isPresenceEnabledField;
            }
            set {
                this.isPresenceEnabledField = value;
            }
        }
        
        /// <remarks/>
        public bool IsEvent {
            get {
                return this.isEventField;
            }
            set {
                this.isEventField = value;
            }
        }
        
        /// <remarks/>
        public CircleDomain Domain {
            get {
                return this.domainField;
            }
            set {
                this.domainField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum CircleDomain {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        WindowsLive,
        
        /// <remarks/>
        OfficeLive,
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public enum NamespacePropertyTypes {
        
        /// <remarks/>
        DisplayName = 1,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class AcceptInviteOptions {
        
        private MemberState stateField;
        
        /// <remarks/>
        public MemberState State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.msn.com/webservices/AddressBook")]
    public partial class MembershipRequestOptions {
        
        private string userTextField;
        
        private string marketField;
        
        private string requestorNameField;
        
        private string customMarketingField;
        
        private string coBrandField;
        
        private string partnerEmailServiceUrlField;
        
        private string[] customStringsField;
        
        private DeliveryType typeField;
        
        /// <remarks/>
        public string UserText {
            get {
                return this.userTextField;
            }
            set {
                this.userTextField = value;
            }
        }
        
        /// <remarks/>
        public string Market {
            get {
                return this.marketField;
            }
            set {
                this.marketField = value;
            }
        }
        
        /// <remarks/>
        public string RequestorName {
            get {
                return this.requestorNameField;
            }
            set {
                this.requestorNameField = value;
            }
        }
        
        /// <remarks/>
        public string CustomMarketing {
            get {
                return this.customMarketingField;
            }
            set {
                this.customMarketingField = value;
            }
        }
        
        /// <remarks/>
        public string CoBrand {
   