eCounters.Counters[instance].WriteFileTotal.Increment();
                StorageCounters.Counters[instance].WriteFilePerSecond.Increment();
                StorageCounters.Counters[instance].WriteFileTotalBytes.IncrementBy(blob.Length);
                StorageCounters.Counters[instance].WriteFileBytesPerSecond.IncrementBy(blob.Length);
                StorageCounters.Counters[instance].WriteFileAvgBytes.IncrementBy(blob.Length);
                StorageCounters.Counters[instance].WriteFileAvgBytesBase.Increment();
                StorageCounters.Counters[instance].WriteFileAvgTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[instance].WriteFileAvgTimeBase.Increment();


                hr = HResult.S_OK;
            }
            finally
            {
            }

        lDone:

            string logMsg =
                "WRF"                                    + "|" +
                hr                                       + "|" +
                req._titleId.ToString("X")               + "|" +
                req._titleVersion.ToString("X")          + "|" +
                (req._accessToken == null ? "0" : req._accessToken._userPuid.ToString("X")) + "|" +
                req._userCountryId                       + "|" +
                (req._accessToken == null ? "0" : req._accessToken._xboxPuid.ToString("X")) + "|" +
                (SGInfo.Current != null ? SGInfo.Current.Nonce.ToString("X") : "") + "|" +
                ((path != null && path.Domain != null) ? ((int)path.Domain.Id).ToString() : "") + "|" +
                (path != null ? ((int)path.KeyType).ToString() : "") + "|" +
                (path != null ? path.KeyValue.ToString("X") : "")    + "|" +
                req._blobSize                            + "|" +
                pathName;

            Xom.Log(XomAreaName.log, logMsg);
            Xom.Log(XomAreaName.Reporting_v2, logMsg);

            // Set the response and exit
            XRLUtil.SetXRLResponse(ctx.Response, XOService.Storage, hr);

            if (HResult.Failed(hr))
            {
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_NORMAL, "WriteFile: returning hr = " + hr);
                StorageCounters.Counters.WriteFileFailedTotal.Increment();
                StorageCounters.Counters.WriteFileFailedPerSecond.Increment();

                if ( instance != null )
                {
                    StorageCounters.Counters[instance].WriteFileFailedTotal.Increment();
                    StorageCounters.Counters[instance].WriteFileFailedPerSecond.Increment();
                }
            }
        }

        // DbWriteFile
        // Write file to database
        private void DbWriteFile(
            StorageDomain domain,// domain. E.g. stats, title, etc.
            IdType  keyType,  // key type. E.g. UserId for user puid
            ulong   ulKey,    // key
            string  pathName, // pathname minus partitioning metadata
            ReqHdrWriteFile req,
            byte[]  blob // file blob
            )
        {
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            SqlParameter    ret     = null;

            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            try
            {
                // Open a connection
                conn = new WstConnection(domain._webstoreApp);
                conn.Open();
                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, "DbWriteFile: opened connection to: " + domain._webstoreApp);

                // Create a command to call the stored procedure
                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_file_put";
                cmd.CommandTimeout = _writeFileSqlTimeout;
                cmd.WstFailoverMode = WstFailoverMode.PrimaryOnly;

                // Data is partitioned by user puid
                cmd.PartitionType = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition(ulKey, domain._webstoreApp);

                // compute SHA1 hash of blob for ref counting
                SHA1 sha1 = new SHA1CryptoServiceProvider();
                byte[] blobHash = sha1.ComputeHash(blob);

                // Files in the pics domain are always owned by the custom
                // picture titleid.  This allows them to the deleted from
                // any title without changes on the client.
                uint titleId = req._titleId;

                if (StorageDomainConstants.PICS == domain.Id)
                    titleId = XOn.X_CUSTOM_PICTURE_TITLEID;

                // Set the stored procedure parameters
                ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);
                cmd.Parameters.Add("@i_domain_id", SqlDbType.Int).Value             = (int) domain.Id;
                cmd.Parameters.Add("@i_key_type", SqlDbType.Int).Value              = (int) keyType;
                cmd.Parameters.Add("@bi_key_value", SqlDbType.BigInt).Value         = (long) ulKey;
                cmd.Parameters.Add("@vc_name", SqlDbType.NVarChar, 256).Value       = pathName;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value              = (int) titleId;
                cmd.Parameters.Add("@i_title_version", SqlDbType.Int).Value         = (int) req._titleVersion;
                cmd.Parameters.Add("@bi_user_puid", SqlDbType.BigInt).Value         = (long) req._accessToken._userPuid;
                cmd.Parameters.Add("@ti_user_country_id", SqlDbType.Int).Value      = req._userCountryId;
                cmd.Parameters.Add("@bi_xbox_puid", SqlDbType.BigInt).Value         = (long) req._accessToken._xboxPuid;
                cmd.Parameters.Add("@bin_client_hash", SqlDbType.Binary, ProtocolConstants.sizeHash).Value = req._blobHash;
                cmd.Parameters.Add("@bin_client_signature", SqlDbType.Binary, ProtocolConstants.sizeSignature).Value = (byte[]) req._blobSignature;
                cmd.Parameters.Add("@i_size", SqlDbType.Int).Value                  = blob.Length;
                cmd.Parameters.Add("@i_size_uncompressed", SqlDbType.Int).Value     = (int) req._blobSizeUncompressed;
                cmd.Parameters.Add("@i_compression_type", SqlDbType.Int).Value      = req._compressionType;
                cmd.Parameters.Add("@i_content_type", SqlDbType.Int).Value          = (int) req._contentType;

                // if no parameter is given, dt_expires defaults to Dec 31, 9999
                
                DateTime d = DateTime.MinValue;
                if ( req._accessToken._fileExpirationDate != 0 ) 
                {
                    d = DateTime.FromFileTime(req._accessToken._fileExpirationDate).ToUniversalTime();                    
                } else if (domain.Policy.DefaultExpiryInDays != Int32.MaxValue)
                {
                    d = DateTime.UtcNow.AddDays( domain.Policy.DefaultExpiryInDays );
                }
                if (d!= DateTime.MinValue) 
                    cmd.Parameters.Add("@dt_expires", SqlDbType.DateTime).Value = d;

                cmd.Parameters.Add("@bin_attributes", SqlDbType.Binary, req._attributesSize).Value = req._attributes;
                cmd.Parameters.Add("@bin_server_hash", SqlDbType.Binary, ProtocolConstants.sizeHash).Value = blobHash;
                cmd.Parameters.Add("@bin_blob", SqlDbType.Image, blob.Length).Value = blob;
                cmd.Parameters.Add("@si_Hash_Bucket", SqlDbType.Int).Value          = (int) cmd.Partition;

                cmd.Parameters.Add("@f_overwrite_existing", SqlDbType.Int).Value    = (int) ( domain.Policy.AllowOverwrites ? 1 : 0);

                cmd.Parameters.Add("@f_quota_update", SqlDbType.Int).Value          = (int) ( domain.Policy.QuotaEnabled ? 1 : 0);

                // Execute stored procedure
                cmd.ExecuteNonQuery();

                Xom.Trace(XomAreaName.wrfTrace, LogLevel.L_LOW, "DbWriteFile: executed stored procedure p_file_put for file: " + pathName);

                // Check return code
                if ((int)ret.Value != 0)
                {
                    HResult hr = (uint) ((int)ret.Value);
                    throw new XRLException(hr, XEvent.Id.STORAGE_CODE_14, "DbWriteFile: stored procedure p_file_put failed with hr = " + hr);
                }
            }
            catch (SqlException e)
            {
                // for timeouts, try and add the server information to the event log message
                if (cmd != null && cmd.Database != null)
                {
                    throw new Exception(string.Format(
                        "SqlException thrown while connecting to sql machine '{0}' after {1} milliseconds",
                        cmd.Database.Server, timeElapsed.MillisecondsElapsed), e);
                }

                throw;
            }
            finally
            {
                if (conn != null)
                {
                    conn.Close();
                    conn = null;
                }

                StorageCounters.Counters.WriteFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters.WriteFileAvgSQLTimeBase.Increment();

                Debug.Assert( domain.Name != null && domain.Name.Length > 0 );
                StorageCounters.Counters[domain.Name].WriteFileAvgSQLTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
                StorageCounters.Counters[domain.Name].WriteFileAvgSQLTimeBase.Increment();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\Module\StorageModuleUtils.cs ===
// 
// StorageModuleUtils.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Storage Module
// Xbox Online Service
//
// Storage utilities and constants
//
// Author: ganeshg 6/2008
//

using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Web;

using xonline.common.service;

namespace xonline.server.storage.module
{

    // -----------------------------------------------------------------------------------
    // Class for holding constants, static utility functions, etc.
    // -----------------------------------------------------------------------------------
    public class StorageModuleConstants
    {
        //HTTPContext.Items Keys
        public const string StoragePathKey = "StorageModule-StoragePathKey";
        public const string FilePathKey = "StorageModule-FilePathKey";
        public const string ReturnDefaultPicKey = "StorageModule-ReturnDefaultPicKey";
        public const string StorageDomainKey = "StorageModule-StorageDomainKey";
        public const string FileUpdatedFromFDKey = "StorageModule-UpdateCachedFileInfoKey";
        public const string CachedFileInfoModifiedDateKey = "StorageModule-CachedFileInfoModifiedDateKey";
        public const string IsStoragePathKey = "StorageModule-IsStoragePathKey";

        //Caching Key PerfCounter Instance names for different calls to XBanc
        public const string CacheQueryInstance = "StorageModule-Query";
        public const string CacheAddInstance = "StorageModule-Add";
        public const string CacheRemoveInstance = "StorageModule-Remove";

    }



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\fd\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\constants.cs ===
using System;

namespace xonline.server.storage.test.console 
{
    class Constants
    {
        public const uint   TitleId         = 0xDEAD5B17;
        public const uint   TitleVersion    = 0xFEEDFACE;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\trace.cs ===
#define TRACE_FUNCTION_DECORATION

using System;
using System.Diagnostics;

namespace xonline.server.storage.test.console 
{
    class Trace
    {
        // Message output methods
        
        public static void Out(string msg)
        {
            Console.WriteLine(msg);
        }

        public static void Info(string msg)
        {
            OutWithGoodies(msg);
        }

        public static void Warn(string msg)
        {
            OutWithGoodies(msg);
        }

        public static void Error(string msg)
        {
            OutWithGoodies(msg);
        }

        public static void AdjustIndentation()
        {
            _iIndentationAdjustment = (new StackTrace()).FrameCount;
            
        }
        
        // Output messages with indentation and function name decoration
            
        private static void OutWithGoodies(string msg)
        {
#if TRACE_FUNCTION_DECORATION             
            string fmtMsg = (new String(' ', (new StackTrace()).FrameCount - _iIndentationAdjustment)) + 
                (new StackFrame(2)).GetMethod().Name + ": " + msg;
#else
            string fmtMsg = (new String(' ', _iIndentation)) + msg;
#endif
            
            Out(fmtMsg);
        }


        private static int _iIndentationAdjustment = 0;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\xrl.cs ===
/*
 * StatsUnitest
 * xrl.cs
 * xrl request
*/

using System;
using System.Collections;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using xonline.common.service;

namespace xonline.server.storage.test.console 
{
    class XRLBundledAuth
    {
        public XRLBundledAuth(uint uiTitleId, ulong[] puids)
        {
            _uiTitleId  = uiTitleId;
            _puids      = puids;
        }
        
        public uint     _uiTitleId;
        public ulong[]  _puids;
    }
    
    // XRL
    // Handles XRL requests 
    class XRL
    {
        public const ushort DefaultPort=80;
        
        // SetSGSession
        // Sets the SGSession context object to be used on all AddSession requests originating from the same thread.
        static public void SetSGSession(SGSession session)
        {
            Thread.SetData(_currentSessionSlot, session);
        }
        
        static public void SetBundledAuth(XRLBundledAuth bundledAuth)
        {
            Thread.SetData(_bundledAuthSlot, bundledAuth);
        }
        
        static public void SetPort(ushort usPort)
        {
            Thread.SetData(_portSlot, (object)usPort);
        }
        
        // Post
        // XRL post.
        public static uint Post(
            int serviceId, 
            string URL, 
            byte[] request, 
            out byte[] response)
        {
            Socket xrlSocket = null;
            response = null;
            uint hr = 0;
            IPEndPoint localEndPoint = null;

            // Parse URL
            string destHost;
            string destPort;
            string destPath;
            
            Match match = _urlParser.Match(URL);

            if(match.Groups.Count == 0)
            {
                throw new Exception("URL " + URL + " is invalid.");
            }

            destHost = match.Groups["host"].Value;
            destPort = match.Groups["port"].Value;
            destPath = match.Groups["path"].Value;            

            // Dest port
            ushort usPort;
            
            if(destPort.Length > 0)
            {
                usPort = Convert.ToUInt16(destPort, 10);
            }
            else
            {
                object port = Thread.GetData(_portSlot);
                
                if(port != null)
                {
                    usPort = (ushort) port;
                }
                else
                {
                    usPort = DefaultPort;
                }
            }
            
            // Resolve host name
            IPAddress destIPAddress;
            try
            {
                destIPAddress = IPAddress.Parse(destHost);
            }
            catch (FormatException) // thrown if destHost is not an IP address
            {
                IPHostEntry hostEntry = Dns.Resolve(destHost);
                destIPAddress = hostEntry.AddressList[0];
            }
            IPEndPoint destEndPoint = new IPEndPoint(destIPAddress, usPort);
            
            
            try
            {
                // Create the xrlSocket and bind it to one of the available dynamic ports
                localEndPoint = new IPEndPoint(0, 0);
                xrlSocket = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp);
                xrlSocket.Bind(localEndPoint);

#if false // not working
                // Don't linger
                LingerOption lingerOption = new LingerOption(true, 10);
                xrlSocket.SetSocketOption(SocketOptionLevel.Tcp, SocketOptionName.Linger, lingerOption);
#endif

                // Build bundled auth header
                string bundledAuthHeader;
                XRLBundledAuth bundledAuth = (XRLBundledAuth) Thread.GetData(_bundledAuthSlot);
                
                if(bundledAuth != null)
                {   
                    XUIDAndTrust[] xuidAndTrust = new XUIDAndTrust[bundledAuth._puids.Length];
                    
                    for(int i=0; i < xuidAndTrust.Length && i < bundledAuth._puids.Length; i++)
                    {
                        xuidAndTrust[i] = new XUIDAndTrust(bundledAuth._puids[i], 0, 0.0f);
                    }
                    
                    BundledAuthData bundledAuthData = new BundledAuthData(bundledAuth._uiTitleId, xuidAndTrust);
                    bundledAuthHeader = BundledAuthData.HTTP_HEADER_BUNDLED_AUTH_DATA + ":" + 
                        bundledAuthData.GetBase64EncodedString() + "\r\n";
                }
                else
                {
                    bundledAuthHeader = String.Empty;
                }
                
                // build request header
                string serviceHeader = 
                    "POST "+destPath+" HTTP/1.0\r\n" + 
                    "User-Agent: "+serviceId+"/1.0.0\r\n" +
                    "Content-Type: xon/"+serviceId+"\r\n" +
                    bundledAuthHeader +
                    "Content-Length: "+request.Length+"\r\n" +
                    "\r\n";

                // Connect 
                xrlSocket.Connect(destEndPoint);

                // Prepare auth
                SGSession session = (SGSession) Thread.GetData(_currentSessionSlot);
                
                if(session != null)
                {
                    localEndPoint = (IPEndPoint) xrlSocket.LocalEndPoint;
                    SGAuth.AddSession(localEndPoint, session);
                }
                else
                {
                    localEndPoint = null;
                }
                
                // Send request                
                xrlSocket.Send(Encoding.ASCII.GetBytes(serviceHeader));
                xrlSocket.Send(request);

                // Read the response
                int iWrittenResponse = 0;
                int iContentLength = 0;
                string responseHeader = String.Empty;
                byte[] responseBuffer = new Byte[2048];
                
                while(response == null || iWrittenResponse < iContentLength)
                {
                    // Any data available?
                    if(xrlSocket.Poll(100000, SelectMode.SelectRead))
                    {
                        int iReceived = xrlSocket.Receive(responseBuffer);
                        
                        // If response is null, then we're still parsing the http header
                        if(response == null)
                        {
                            // Add recently written buffer to header
                            responseHeader += Encoding.ASCII.GetString(responseBuffer, 0, iReceived);
                            
                            // Did we read the entire header?
                            int endOfHeader = responseHeader.IndexOf("\r\n\r\n");

                            if(endOfHeader == -1)
                                throw new Exception(
                                    "Failed to parse http response header. Can't find CRLF last pairs.");

                            endOfHeader += 4;
                            
                            // Parse the header. First the status.
                            match = _regexHTTPStatus.Match(responseHeader);
                            
                            if(! match.Success)
                                throw new Exception("Failed to parse http response header. "+
                                    "Failed part: status. Http header:\n"+responseHeader);

                            int status = Convert.ToInt32((string)match.Groups["status"].Value, 10);
                            
                            // X-Err
                            match = _regexXErr.Match(responseHeader);

                            if(match.Success)
                                hr = HResult.Parse((string)match.Groups["xerr"].Value);

                            if(status != 200 && HResult.Succeeded(hr))
                                hr = HResult.E_FAIL;

                            // Content-lenth
                            match = _regexContentLength.Match(responseHeader);
                            
                            if(match.Success)
                                iContentLength = Convert.ToInt32(match.Groups["len"].Value);
                            else
                                iContentLength = 0;

                            // Allocate response 
                            response = new byte[iContentLength];
                            Array.Copy(responseBuffer, endOfHeader, response, 0, iReceived - endOfHeader);
                            iWrittenResponse = iReceived - endOfHeader;
                        }
                        else
                        {
                            // Copy more of the response
                            Array.Copy(responseBuffer, 0, response, iWrittenResponse, iReceived);
                            iWrittenResponse += iReceived;
                        }
                    }
                }

                xrlSocket.Shutdown(SocketShutdown.Both);
            }
            finally
            {
                if(xrlSocket != null)
                {
                    xrlSocket.Close();
                    xrlSocket = null;
                }

                if(localEndPoint != null)
                {
                    SGAuth.DropSession(localEndPoint);
                }
            }

            return hr;
        }

        private static LocalDataStoreSlot   _currentSessionSlot = Thread.AllocateDataSlot();
        private static LocalDataStoreSlot   _portSlot           = Thread.AllocateDataSlot();
        private static LocalDataStoreSlot   _bundledAuthSlot    = Thread.AllocateDataSlot();
        private static Regex                _urlParser          = new Regex(@"http:\/\/(?<host>[\w-\.]+)(:(?<port>\d+))?(?<path>\/.*)?", RegexOptions.Compiled);
        private static Regex                _regexHTTPStatus    = new Regex(@"HTTP\/(?<httpver>\d+.\d+)\s(?<status>\d+)\s\w+.*", RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.Multiline);
        private static Regex                _regexXErr          = new Regex(@"^X-Err: (?<xerr>[A-Za-z0-9]+)", RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.Multiline);
        private static Regex                _regexContentLength = new Regex(@"^Content-Length: (?<len>\d+)", RegexOptions.Compiled | RegexOptions.Singleline | RegexOptions.Multiline);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\fd\Randomizer.cs ===
// Randomizer: Random values generator
// Written Erez Amir (Erezam) Feb 2003
//////////////////////////////////////////


using System;
using System.Collections;

namespace xonline.server.storage.test.fd 
{

	/* DOCUMENTATION:
	 ****************
	 
		Usage sample:
		=============
		(1)	Number generator: 
			Randomizer Rand = new Randomizer("{0-100}U{200-250}", eDistribution.Normal, 777);
			for(int i = 0; i < 20; ++i) 
				Console.Write( (long)Rand.Next() + " " );
			output: 
				76 82 76 75 68 76 75 76 79 75 76 75 76 75 80 75 76 76 75 73
			
		(2)	String generator: Specify the set of string lengths and the set of characters 
			seperated by an "X"
				Randomizer S = new Randomizer("{13}X{'1','2','X'}");
				for(int i = 0; i < 5; ++i) 
					Console.WriteLine( (string)S.Next());
			output:
				1X2XXX221XX12
				1111X2X211X22
				11212X112XX21
				2222122121XXX
				21122221222X2
				2222121X211X2				
				...
				
		(3)	Generate random permutations of a set of values:
				foreach(object C in new Randomizer("{ASCII}*{ALPHANUMERIC}-{'A'}") )
					Console.Write((char)C);
			output:
				hd6Z2VyRuNqJmFiBe7a3WzSvOrKnGjCf8b4X0TwPsLoHkDg9c5Y1UxQtMpIlE
			Note: "foreach" is only supported for ordinal types, trying to enumerate
			      strings or doubles will raise an exception
		
		(4)	Verify membership
				Randomizer S = new Randomizer("{13}X{'1','2','X'}");
				string Candidate Console.ReadLine();
				if( !S.isMember(Password) ) Fail();
				...
			
				
		// Format specifier string documentation:
		=========================================
		
		General explenations:
		---------------------
		"{" and "}" denote a set of values, within the set there are ranges or items seperated with commas
		ranges are simply two items with an hyphen (e.g "{1-2}" )
		Items are either 
			longs (numbers w\o decimal point. e.g "{-7}" or "{0x7ffa}"
			doubles (numbers with a decimal point. e.g "{-1.23})
			chars are serounded with single quates. e.g "{'x'-'z'}"
			strings are serounded with double quates. e.g "{'HELLO","THERE"}" and cannot be ranges
		Sets can be joined by "U" (UNION), "*" (INTERSECTION) or "-" (SUBTRUCT}
			e.g. {0-15}*{10-20} <=> {10-15}. 
			"X" is a special operator between set of longs and set of chars to generate strings:
			e.g. {10-12}X{HEX} denotes 10 to 12 hexedecimal chars e.g. "1A3FCB7649"
		Operations are evaluated from left to right S1 * S2 U S3 - S4 <=> ((S1 * S2) U S3) - S4
		There is a list of predefined sets, which is usually used with 
			intersect: e.g "{ASCII}*{DIGITS}"
			and subtruct: e.g. {uint}-{0-7} 
		
		Examples:
		---------
		{-123.456}				: A single negative double value
		{0x10-118}				: Any number between 16 and 118 (inclusive, type long)
		{1,2,3,5}				: either 1, 2, 3 or 5 (type long)
		{0-10,12-20}			: Any value between 0 and 10 or 12 to 20 (inclusive, type long)
		{0-10}U{12-20}			: exactly the same set as the above
		{0-20}-{11-19}			: exactly the same set as the above
		{0-10,7,8,100-1000}		: any value between 0 to 10, or 7 or 8 or any value between 10 to 1000
		{int}-{1,2,3,5,8}		: any int value except 1,2,3,5 or 8
		{'a'-'z'}-{'c'-'g'}		: either 'a', 'b' or 'h' to 'z' (type char)
		{0.0-2.0}				: any number between 0 to 2 (type double)
		{ASCII}*{ALPHANUMERIC}-{DIGITS} : 'A'-'Z' or 'a'-'z'
		{ANSII}*{DIGITS}U{'A'-'F'} : '0'-'9', 'A'-'F' (Hex digits, equivalent to {HEX})
		{UNICODE}				: Any unicode character
		{10-12}X{HEX}			: a string of 10 to 12 hex digits

		Notes:
		------
		* double values MUST have a decimal point (e.g. 12.45 or 1.0)
		* Numbers w\o decimal point are always of type long. You may cast to smaller ordinal types
		* A format may never mix different types (e.g. WRONG {1-2.0} WRONG {0-'z'} )
		* chars must be within single quotes (e.g 'a' or '#' or '\'')

	    BNF Syntax:
		-----------
		Format		  ::= Set | SetList U Set | SetList - Set | SetList * Set | SetList X SetList
		Set			  ::= { RangeList } | PredefinedSet
		PredefinedSet ::= "{int}" | "{uint}" | "{long}" | "{ulong}" | "{double}" |
		                  "{UNICODE}" | "{ANSII}" | "{ASCII}" | "{HEX}" | "{DIGITS}" | "{WHITESPACE}" | 
						  "{ALPHANUMERIC}" | "{CONTROL}" | "{LOWERCASE}" | "{UPPERCASE}" | 
		RangeList	  ::= Range | Range,RangeList		
		Range		  ::= item | item-item	
		itemlist	  ::= item | item,itemlist
		item		  ::= number | string | char
		string		  ::= "<anychar>*"
		char		  ::= '<char>' | '\''
		number		  ::= +unsigned | -unsigned | unsigned | 0x HexDigits
		unsigned	  ::= digits | digits.digits
		digits		  ::= {0...9}*	
		HexDigits	  ::= {0...9, A..F, a..f}*
		

	
	 **************************************************************************************************/

	/// <summary>
	/// Specify the distribution of value picking within the set of values
	/// </summary>
	public enum eDistribution
	{
		/// <summary>
		/// Uniform distribution, all values have same chance to be picked
		/// </summary>
		Uniform,
		/// <summary>
		/// Lower edge values have higher chance to be picked
		/// </summary>
		FavorLow,
		/// <summary>
		/// Upper edge values have higher chance to be picked
		/// </summary>
		FavorHigh,
		/// <summary>
		/// Extreeme values have higher chance to be picked
		/// </summary>
		FavorEdge,
		/// <summary>
		/// Normal distribution (Bell-shape)
		/// </summary>
		Normal
	}

	/// <summary>
	/// A set of values wich can be parsed from a convinient string format
	/// Supports union (U) and subtruct (\)
	/// and can pick a value according to the specified distribution
	/// </summary>
	public class Randomizer : IEnumerable
	{
		/// <summary>
		/// Picks a random number from a set according to wanted distribution
		/// </summary>
		/// <param name="Format">Set specifier. Examples: "{1-7}", "{1,10,100}", "{int}-{0-0xFF}", "{0.1-0.9}", "{'a'-'z'}"</param>
		/// <param name="Distribution">The way the random pickings are distributed</param>
		/// <param name="Seed">Random seed</param>
		public Randomizer(string Format, eDistribution Distribution, int Seed)
		{
			Init(Format, Distribution, Seed);
		}

		/// <summary>
		/// Picks a random number from a set according to wanted distribution, with a default seed
		/// </summary>
		/// <param name="Format">Set specifier. Examples: "{1-7}", "{double}", "{'a'-'z'}", {0.1-0.9}</param>
		/// <param name="Distribution">The way the random pickings are distributed</param>
		public Randomizer(string Format, eDistribution Distribution)
		{
			Init(Format, Distribution, 0);
		}

		/// <summary>
		/// Picks a random number from a set with uniform distribution and default seed
		/// </summary>
		/// <param name="Format">Set specifier. Examples: "{1-7}", "{1,10,100}", "{int}-{0-0xFF}", {0.1-0.9}</param>
		public Randomizer(string Format)
		{
			Init(Format, eDistribution.Uniform, 0);
		}

		/// <summary>
		/// Picks a random number from a set with uniform distribution and default seed
		/// </summary>
		/// <param name="Format">Set specifier. Examples: "{1-7}", "{1,10,100}", "{int}-{0-0xFF}", {0.1-0.9}</param>
		/// <param name="Seed">Random seed</param>
		public Randomizer(string Format, int Seed)
		{
			Init(Format, eDistribution.Uniform, Seed);
		}

		/// <summary>
		/// Gets or sets the distribution of value picking within the set
		/// </summary>
		public eDistribution Distribution { get { return m_Distribution; } set { m_Distribution = value;} }

		/// <summary>
		/// convert to canonical string representation
		/// </summary>
		public override string ToString() 
		{ 
			if( m_isString )
			{
				return string.Format("{0}X{1}", 
						m_StringLengthSet.ToString(),m_Set.ToString());
			}
			return m_Set.ToString(); 
		}

		public bool isMember(object Candidate)
		{
			if( m_isString )
			{
				string S = (string)Candidate;
				// string length must be matching
				if( !m_StringLengthSet.isMember(S.Length) )
					return false;
				// and each character must be valid
				foreach( char C in S )
					if( !m_Set.isMember(C) ) return false; 
				return true;
			}
			return m_Set.isMember(Candidate);	
		}

		/// <summary>
		/// picks a numberrs from 0.0 to 1.0 according to the current distribution
		/// </summary>
		/// <returns></returns>
		private double RandByDistribution()
		{
			double Result;
			switch( m_Distribution )
			{
				case eDistribution.FavorEdge:
					Result = rand > 0.5 ? lowRand : 1.0 - lowRand;
					break;
				case eDistribution.FavorLow :
					Result = lowRand;
					break;
				case eDistribution.FavorHigh:
					Result = 1.0 - lowRand;
					break;
				case eDistribution.Normal:
					Result = ((rand2*rand2*rand2*rand2*rand2*rand2) + 1.0) * 0.5;
					break;
				case eDistribution.Uniform:
					Result = rand;
					break;
				default:
					Result = 0;
					throw new Exception("How did I get here?");
			}
			return Result;
		}

		public object Next()
		{
			if( m_isString )
			{
				double LengthPosition = m_StringLengthSet.Size * RandByDistribution();
				long Length = (long)m_StringLengthSet.GetValueByPosition(LengthPosition);
				char[] Result = new char[Length];
				int Size = (int)m_Set.Size;
				for(int i = 0; i < Length; ++i)
				{
					Result[i] = (char)m_Set.GetValueByPosition(rand * Size);
				}
				return new string(Result);
			}
			double Position = RandByDistribution();
			return m_Set.GetValueByPosition(Position * m_Set.Size);
		}

		/// <summary>
		/// Performs a UNION of two sets
		/// </summary>
		/// <param name="r1">first set</param>
		/// <param name="r2">second set</param>
		/// <returns></returns>
		static public Randomizer operator +(Randomizer r1, Randomizer r2)
		{
			Randomizer Result = r1;
			Result.m_Set = CSet.UNION(r1.m_Set,r2.m_Set);
			Result.m_StringLengthSet = CSet.UNION(r1.m_StringLengthSet, r2.m_StringLengthSet);
			return Result;
		}

		/// <summary>
		/// Performs a subtruct of two sets
		/// </summary>
		/// <param name="r1">first set</param>
		/// <param name="r2">second set</param>
		/// <returns></returns>
		static public Randomizer operator -(Randomizer r1, Randomizer r2)
		{
			Randomizer Result = r1;
			Result.m_Set = CSet.SUBTRUCT(r1.m_Set,r2.m_Set);
			Result.m_StringLengthSet = CSet.SUBTRUCT(r1.m_StringLengthSet,r2.m_StringLengthSet);
			return Result;
		}

		/// <summary>
		/// Performs an INTERSECT of two sets
		/// </summary>
		/// <param name="r1">first set</param>
		/// <param name="r2">second set</param>
		/// <returns></returns>
		static public Randomizer operator *(Randomizer r1, Randomizer r2)
		{
			Randomizer Result = r1;
			Result.m_Set = CSet.INTERSECT(r1.m_Set,r2.m_Set);
			Result.m_StringLengthSet = CSet.INTERSECT(r1.m_StringLengthSet,r2.m_StringLengthSet);
			return Result;
		}

		private void Init(string Format, eDistribution Distribution, int Seed)
		{
			m_Distribution = Distribution;
			int p = Format.IndexOf("}X{");
			if( p > 0 )
			{
				m_isString = true;
				string LHS = Format.Substring(0,p+1); // all before the "X" - should be longs
				string RHS = Format.Substring(p+2);   // all after the "X"  - should be chars
				m_StringLengthSet = new CSet(LHS);
				if( !(m_StringLengthSet.GetValueByPosition(0) is long) )
				{
					throw new Exception(Format + " denotes a string, but " + LHS + " is not a set of LONGs");
				}
				m_Set = new CSet(RHS);
				if( !(m_Set.GetValueByPosition(0) is char) )
				{
					throw new Exception(Format + " denotes a string, but " + RHS + " is not a set of CHARs");
				}
			}
			else
			{
				m_isString = false;
				m_Set = new CSet(Format);
			}
			m_Random = ( Seed == 0 ) ? new Random() : new Random(Seed);
		}

		/// <summary>
		/// Gives an enumerator that can be foreach'ed to get all the elements of the set (Shuffled)
		/// </summary>
		public IEnumerator GetEnumerator()
		{
			return new RandEnumerator(this);
		}

		private bool m_isString; // if string, m_Set is type chars and m_StringLength is type long
		private CSet m_Set;
		private CSet m_StringLengthSet;
		private Random m_Random;
		private eDistribution m_Distribution;
		private double rand { get { return m_Random.NextDouble(); } }
		private double rand2 { get { return 2 * (m_Random.NextDouble() - 0.5); } }
		private double lowRand { get { return rand*rand*rand*rand*rand*rand; } }

		public class RandEnumerator : IEnumerator
		{
			private Randomizer m_Rand;
			private double m_Position;
			private int    m_Size;
			private int    m_Seed;
			private int    m_Start;
			object m_First;
			public RandEnumerator(Randomizer R)
			{
				m_Position = -1;
				m_Rand = R;
				m_First = R.m_Set.GetValueByPosition(0);
				if( m_First is double  || m_First is string ) 
					throw new Exception("Only ordinal sets (int,long/char) can be enumerated");
				m_Size = (int)m_Rand.m_Set.Size;
				m_Seed = CalcSeed(m_Size);
				m_Start = m_Rand.m_Random.Next(0,m_Size - 1);
			}
			public bool MoveNext()
			{
				m_Position++;
				return m_Position < m_Size;
			}

			// Declare the Reset method required by IEnumerator:
			public void Reset()
			{
				m_Position = -1;
			}

			// Declare the Current property required by IEnumerator:
			public object Current
			{
				get
				{
					return m_Rand.m_Set.GetValueByPosition((m_Start + m_Position * m_Seed) % m_Size);
				}
			}

			//
			// a seed is a number around size/2 which is prime, and not a factor of Size
			// for example - 3 and 7 are a good seeds for 10
			//		5 is not a seed for 10 because it is a factor of 10
			//		6 is not a seed for 10 because it is not prime
			//
			private int CalcSeed(int Size)
			{
				for(int i = 1; i < Size / 2; ++i)
				{
					int Result = Size / 2 + i;
					if( isPrime(Result) && (Size % Result != 0) ) return Result;
					Result = Size / 2 - i;
					if( isPrime(Result) && (Size % Result != 0) ) return Result;
				}
				throw new Exception("Should never get here");
			}

			private bool isPrime(int P)
			{
				if( P % 2 == 0 ) return false;
				long Max = (long)Math.Sqrt(P) + 1;
				for(int i = 3; i < Max; i+=2)
					if(P % i == 0) return false;
				return true;
			}
		}

		private class CItem
		{
			public static object Succ(object o)
			{
				if( o is double ) 
				{
					// add the smallest possible amount to o to make it distiguishable
					double e = double.Epsilon;
					double res;
					for(;;)
					{
						res = (double)o + e;
						if( res != (double)o ) return res;
						e = e * 2;
					}
				}
				if( o is long ) return (long)o + 1;
				if( o is int )  return (int)o  + 1;
				if( o is char ) return (char)((char)o + 1) ;
				return null;
			}
			public static object Pred(object o)
			{
				if( o is double ) 
				{
					// add the smallest possible amount to o to make it distiguishable
					double e = double.Epsilon;
					double res;
					for(;;)
					{
						res = (double)o - e;
						if( res != (double)o ) return res;
						e = e * 2;
					}
				}
				if( o is long ) return (long)o - 1;
				if( o is int )  return (int)o  - 1;
				if( o is char ) return (char)((char)o - 1) ;
				return null;
			}
		}
		/// <summary>
		/// A range of values
		/// </summary>
		private class CRange : IComparable 
		{
			public CRange(object Min, object Max)
			{
				m_Min = Min;
				m_Max = Max;
				if( Min.GetType() != Max.GetType() ) 
				{
					throw new Exception("Min and Max types dont match");
				}
				if( GreaterThan(Min, Max) )
				{
					throw new Exception("Min must be <= Max");
				}
			}
			public CRange(object SingleValue)
			{
				m_Min = SingleValue;
				m_Max = SingleValue;
			}
			private object m_Min;
			private object m_Max;
			public object Min { get { return m_Min; } }
			public object Max { get { return m_Max; } }
			public bool isNumeric { get { return m_Min is double || m_Min is long || m_Min is int || m_Min is char; } }
			public bool isOrdinal { get { return m_Min is long || m_Min is int || m_Min is char; } }
			public bool isMember(object Candidate)
			{
				bool Result;
				if( Candidate is double )    Result = ((double)Candidate <= (double)m_Max) && ((double)Candidate >= (double)m_Min);
				else if( Candidate is long ) Result = ((long)Candidate <= (long)m_Max) && ((long)Candidate >= (long)m_Min);
				else if( Candidate is int  ) Result = ((int )Candidate <= (long)m_Max) && ((int )Candidate >= (long)m_Min);
				else if( Candidate is char ) Result = ((char)Candidate <= (char)m_Max) && ((char)Candidate >= (char)m_Min);
				else Result = false;
				return Result;
			}
			private string Decorate(object o)
			{
				if( o is string ) return "\"" + o + "\"";
				if( o is char   ) return "'" + o + "'";
				return o.ToString();

			}
			public override string ToString() 
			{ 
			
				if( m_Min.ToString()  == m_Max.ToString() ) 
				{
					return Decorate(m_Min); 
				}
				else
				{
					return Decorate(m_Min) + "-" + Decorate(m_Max); 
				}
			}

			static public bool LessThan(object lhs, object rhs)
			{
				if( lhs is double ) return (double)lhs < (double)rhs;
				if( lhs is long ) return (long)lhs < (long)rhs;
				if( lhs is int ) return (int)lhs < (int)rhs;
				if( lhs is char ) return (char)lhs < (char)rhs;
				if( lhs is string ) return string.Compare((string)lhs, (string)rhs) < 0;
				return false;
			}
			static public bool GreaterThan(object lhs, object rhs) { return LessThan(rhs, lhs); }
			static public object Succ(object o)
			{
				return CItem.Succ(o);
			}
			static public object Pred(object o)
			{
				return CItem.Pred(o);
			}
			public int CompareTo(object R) 
			{ 
				if( LessThan(Min, ((CRange)R).Min ) ) return -1;
				if( GreaterThan(Min, ((CRange)R).Min ) ) return +1;
				return 0;
			}
			//
			// return the size of the range (Meaning changes with type)
			//  Doubles - width of the area
			//  Ordinals: Number of elements
			public double Size
			{
				get
				{
					double Result;
					if( m_Min is double )      Result = 0 + (double)m_Max    - (double)m_Min;
					else if( m_Min is long )   Result = 1 + (long)m_Max      - (long)m_Min;
					else if( m_Min is int )    Result = 1 + (int)m_Max       - (int)m_Min;
					else if( m_Min is char )   Result = 1 + (int)(char)m_Max - (int)(char)m_Min;
					else Result = 0;
					return Result;
				}
			}
			public object GetValueByPosition(double Position)
			{
				if( Position < 0 || Position > Size) throw new Exception("Invalid position");
				object Result;
				if( m_Min is double ) Result = (double)m_Min + Position;
				else if( m_Min is long )   Result = (long)m_Min   + (long)Position;
				else if( m_Min is int )    Result = (int)m_Min    + (int)Position;
				else if( m_Min is char )   Result = (char)((int)(char)m_Min + (int)Position);
				else Result = m_Min;
				return Result;
			}
		}
	

		/// <summary>
		/// A set of ranges with Parse(), Union(), Subtruct() and Get() operations
		/// </summary>
		private class CSet
		{
			public CSet() 
			{
				m_Ranges = new ArrayList(1);
			}
			public CSet(CRange R)
			{
				m_Ranges = new ArrayList(1);
				AddRange(R);
			}
			public CSet(ArrayList Ranges)
			{
				if( Ranges.Count == 0 ) 
				{
					throw new Exception("Cannot have an empty set");
				}
				m_Ranges = new ArrayList();
				foreach( object o in Ranges )
				{
					if( o is CRange )
					{
						AddRange((CRange)o);
					}
					else
					{
						AddRange(new CRange(o));
					}
				}
			}

			public CSet(string Format)
			{
				bool Result = Parse(Format);
				if( !Result ) throw new Exception(
								  "Bad format\n" + m_Format + "\n" + m_Format.Substring(0,m_Position) +  " <-- " + m_gle);
			}

			void AddRange(CRange newRange)
			{
				if( m_Ranges.Count == 0 )
				{
					m_Type = newRange.Max.GetType().ToString();
				}
				if( newRange.Max.GetType().ToString() != m_Type )
				{
					throw new Exception("All ranges in set must be of the same type");
				}
				if( !newRange.isNumeric )
				{
					m_Ranges.Add(newRange);
					return;
				}
				for( int i = m_Ranges.Count -1 ; i >= 0 ; --i )
				{
					CRange R = (CRange)m_Ranges[i];
					if( CRange.LessThan(CRange.Succ(R.Max), newRange.Min) ) continue; // no overlap
					if( CRange.LessThan(CRange.Succ(newRange.Max), R.Min) ) continue; // no overlap
					if( CRange.LessThan(newRange.Max,R.Max) &&
						CRange.GreaterThan(newRange.Min, R.Min) ) return; // new range totally contained in existing one
					newRange = new CRange( CRange.LessThan(R.Min, newRange.Min) ? R.Min : newRange.Min,
						CRange.GreaterThan(R.Max, newRange.Max) ? R.Max : newRange.Max);
					m_Ranges.RemoveAt(i);
				}
				m_Ranges.Add(newRange);			
				m_Ranges.Sort();
			}
	
			void RemoveRange(CRange Exclude)
			{
				if( m_Ranges.Count == 0 ) return;
				string ExcludeType = Exclude.Max.GetType().ToString();
				if( ExcludeType != m_Type )
				{
					throw new Exception("All ranges in set must be of the same type. " + ExcludeType + " != " + m_Type);
				}
				if( !Exclude.isNumeric )
				{
					for( int i = 0; i < m_Ranges.Count -1 ; ++i )
					{
						CRange R = (CRange)m_Ranges[i];
						if( Exclude.Max == R.Max && Exclude.Min == R.Min )
						{
							m_Ranges.RemoveAt(i);
							break;
						}
					}
					return;
				}
				for( int i = m_Ranges.Count -1 ; i >= 0 ; --i )
				{
					CRange R = (CRange)m_Ranges[i];
					if( CRange.LessThan(R.Max, Exclude.Min) ) continue; // no overlap
					if( CRange.LessThan(Exclude.Max, R.Min) ) continue; // no overlap
					if( CRange.GreaterThan(Exclude.Min,R.Min) )
					{
						// exclude an overlapping range - cut higher part
						m_Ranges.Add(new CRange(R.Min, CRange.Pred(Exclude.Min)));
					}
					if( CRange.LessThan(Exclude.Max,R.Max) )
					{
						// exclude an overlapping range - cut lower part
						m_Ranges.Add(new CRange(CRange.Succ(Exclude.Max), R.Max));
					}
					m_Ranges.RemoveAt(i);
				}
				m_Ranges.Sort();
			}

			public double Size
			{
				get
				{
					double Result = 0;
					foreach( CRange R in m_Ranges )
					{
						Result += R.Size;
					}
					return Result;
				}
			}
			public object GetValueByPosition(double Position)
			{
				if( Position < 0 ) throw new Exception("Invalid negative position");
				foreach( CRange R in m_Ranges )
				{
					if( Position < R.Size )
					{
						object Result = R.GetValueByPosition(Position);
						return Result;
					}
					Position -= R.Size;
				}
				throw new Exception("Invalid position - too large");
			}

			static public CSet UNION(CSet Set1, CSet Set2)
			{
				CSet Result = new CSet();
				foreach( CRange R in Set1.m_Ranges )
				{
					Result.AddRange(R);
				}
				foreach( CRange R in Set2.m_Ranges )
				{
					Result.AddRange(R);
				}
				return Result;
			}
			static public CSet SUBTRUCT(CSet Set1, CSet Set2)
			{
				CSet Result = new CSet();
				foreach( CRange R in Set1.m_Ranges )
				{
					Result.AddRange(R);
				}
				foreach( CRange R in Set2.m_Ranges )
				{
					Result.RemoveRange(R);
				}
				return Result;
			}

			static public CSet INTERSECT(CSet Set1, CSet Set2)
			{
				CSet U = CSet.UNION(Set1, Set2);
				CSet S1 = CSet.SUBTRUCT(Set1, Set2);
				CSet S2 = CSet.SUBTRUCT(Set2, Set1);
				CSet Result = CSet.SUBTRUCT(U, S1);
				Result = CSet.SUBTRUCT(Result, S2);
				return Result;
			}

			public bool isMember(object Candidate)
			{
				foreach( CRange R in m_Ranges )
					if( R.isMember(Candidate) ) return true;
				return false;
			}
			private ArrayList m_Ranges;
			private string m_Type;
			public ArrayList GetRanges { get { return m_Ranges; } }
			public override string ToString() 
			{ 
				string Result = "";
				foreach( CRange R in m_Ranges )
				{
					if( Result != "" ) Result += ",";
					Result += R.ToString();
				}
				return "{" + Result + "}";
			}
			#region Parsing methods and members
			private string m_Format;
			private string m_gle = "";
			private int m_Position;
			char Next        { get { return m_Format[m_Position]; } } 
			void Skip()      { m_Position++; }
			void Skip(int n) { m_Position+=n; }
			void SkipWS()    { while( !AtEnd && Next == ' ') Skip(); }
			bool AtEnd       { get { return m_Format.Length <= m_Position; } }
			bool Match(String str) { return m_Format.Substring(m_Position).ToUpper().StartsWith(str.ToUpper()); }
			bool SetLastError(string str) { if( m_gle == "") m_gle = str; return false;}
			private bool Parse(string Format)
			{
				m_Format = Format;
				m_Position = 0;
				return ParseSetList();
			}
			private bool ParseSetList()
			{
				// SetList ::= Set | SetList U Set | SetList - Set
				ArrayList Ranges;
				bool Result = ParseSet(out Ranges);
				if( !Result ) return false;
				m_Ranges = new ArrayList(Ranges.Count);
				foreach( CRange R in Ranges )
				{
					AddRange(R);
				}
				for(;;)
				{
					SkipWS();
					if( AtEnd   ) return true;
					switch( Next )
					{
						case 'U' : // UNION
						{
							Skip();
							SkipWS();
							ArrayList RangesToUnion;
							Result = ParseSet(out RangesToUnion);
							if( !Result ) return false;
							foreach( CRange R in RangesToUnion )
							{
								AddRange(R);
							}
							break;
						}
						case '-' : // subtruct: e.g {1-10}-{5} => {1-4,6-10}
						{
							Skip();
							SkipWS();
							ArrayList RangesToSubtruct;
							Result = ParseSet(out RangesToSubtruct);
							if( !Result ) return false;
							foreach( CRange R in RangesToSubtruct)
							{
								RemoveRange(R);
							}
							break;
						}
						case '*' : // INTERSECT: eg {ASCII}*{LOWERCASE} => {'a'-'z'}
						{
							Skip();
							SkipWS();
							ArrayList RangesToIntersect;
							Result = ParseSet(out RangesToIntersect);
							if( !Result ) return false;
							CSet LHS = new CSet(m_Ranges);           // everything left of '*' 
							CSet RHS = new CSet(RangesToIntersect);  // next set right of '*'
							m_Ranges = CSet.INTERSECT(LHS, RHS).m_Ranges;
							break;
						}
						default:
							return SetLastError("Expected 'U', '-' or end of format");
					}
				}
			}
			
			// collect sequances of characters that match a condition
			private delegate bool CharClassifier(char c);
			private void CollectRanges(ref ArrayList Ranges, CharClassifier Cond)
			{
				char FirstC = '\0';
				char LastC  = '\0';
				bool Sequance = false;
				for( char c = char.MinValue; c < char.MaxValue; ++c)
				{
					if( Cond(c) )
					{
						if( !Sequance )
							FirstC = c;
						LastC = c;
						Sequance = true;
					}
					else
					{
						if( Sequance ) 
							Ranges.Add(new CRange(FirstC, LastC));
						Sequance = false;
					}
				}
				if( Sequance ) 
					Ranges.Add(new CRange(FirstC, LastC));

			}

			private bool ParseSet(out ArrayList Ranges)
			{
				// Set ::= { RangeList }
				Ranges = null;
				bool Result = true;
				if( AtEnd   ) return false;
				if( Next != '{' ) return SetLastError("'{' Expected ");
				Ranges = new ArrayList();
				#region predefined sets
				if( Match("{int}") )
				{
					Skip(5);
					Ranges.Add( new CRange((long)int.MinValue, (long)int.MaxValue) );
					return true;
				}
				if( Match("{long}") )
				{
					Skip(6);
					Ranges.Add( new CRange(long.MinValue, long.MaxValue));
					return true;
				}
				if( Match("{uint}") )
				{
					Skip(6);
					Ranges.Add( new CRange((long)uint.MinValue, (long)uint.MaxValue));
					return true;
				}
				if( Match("{ulong}") )
				{
					Skip(7);
					Ranges.Add( new CRange(ulong.MinValue, ulong.MaxValue));
					return true;
				}
				if( Match("{double}") )
				{
					Skip(8);
					Ranges.Add( new CRange(double.MinValue, double.MaxValue));
					return true;
				}
				if( Match("{UNICODE}") )
				{
					Skip(9);
					Ranges.Add( new CRange(char.MinValue, char.MaxValue));
					return true;
				}
				if( Match("{ASCII}") )
				{
					Skip(7);
					Ranges.Add( new CRange(char.MinValue, (char)127));
					return true;
				}
				if( Match("{ANSII}") )
				{
					Skip(7);
					Ranges.Add( new CRange(char.MinValue, (char)255));
					return true;
				}
				if( Match("{UPPERCASE}") )
				{
					Skip(11);
					CollectRanges(ref Ranges, new CharClassifier(char.IsUpper));
					return true;
				}
				if( Match("{LOWERCASE}") )
				{
					Skip(11);
					CollectRanges(ref Ranges, new CharClassifier(char.IsLower));
					return true;
				}
				if( Match("{CONTROL}") )
				{
					Skip(9);
					CollectRanges(ref Ranges, new CharClassifier(char.IsControl));
					return true;
				}
				if( Match("{ALPHANUMERIC}") )
				{
					Skip(14);
					CollectRanges(ref Ranges, new CharClassifier(char.IsLetterOrDigit));
					return true;
				}
				if( Match("{WHITESPACE}") )
				{
					Skip(12);
					CollectRanges(ref Ranges, new CharClassifier(char.IsWhiteSpace));
					return true;
				}
				if( Match("{DIGITS}") )
				{
					Skip(8);
					CollectRanges(ref Ranges, new CharClassifier(char.IsDigit));
					return true;
				}
				if( Match("{HEX}") )
				{
					Skip(5);
					Ranges.Add( new CRange('0','9'));
					Ranges.Add( new CRange('A','F'));
					return true;
				}
				#endregion
				Skip();
				SkipWS();
				Result = ParseRangeList(out Ranges);
				if( !Result ) return false;
				SkipWS();
				if( AtEnd   ) return SetLastError("Unexpected end-of-format");
				if( Next != '}' ) return SetLastError("'}' expected");
				Skip();
				return Result;
			}

			private bool ParseRangeList(out ArrayList Ranges)
			{
				// RangeList ::= Range | Range,RangeList
				Ranges = null;
				CRange Range;
				bool Result = ParseRange(out Range);
				if( !Result ) return false;
				Ranges = new ArrayList();
				for(;;)
				{
					Ranges.Add(Range);
					SkipWS();
					if( Next != ',') return true;
					Skip();
					Result = ParseRange(out Range);
					if( !Result ) return false;
				}
			}

			private bool ParseRange(out CRange Range)
			{
				// Range     ::= item | item-item
				Range = null;
				object Item1;
				bool Result = ParseItem(out Item1);
				if( !Result) return false;
				SkipWS();
				if( Next == '-') 
				{
					Skip();
					SkipWS();
					object Item2;
					Result = ParseItem(out Item2);
					if( !Result) return false;
					Range = new CRange(Item1, Item2);
					return true;
				}
				Range = new CRange(Item1);
				return true;
			}

			private bool ParseItemList(out ArrayList ItemList)
			{
				// itemlist ::= item | item,itemlist
				ItemList = new ArrayList();
				if( AtEnd   ) return false;
				bool Result = true;
				object Item;
				SkipWS();
				Result = ParseItem(out Item);
				if( !Result ) return false;
				ItemList.Add(Item);
				while( Next == ',' )
				{
					Skip();
					Result = ParseItem(out Item);
					if( !Result ) return false;
					ItemList.Add(Item);
				}
				return Result;
			}
			private bool ParseItem(out object Item)
			{
				// item ::= number | string | char
				Item = null;
				if( AtEnd   ) return false;
				bool Result = true;
				string Str;
				char C;
				Result = ParseString(out Str);
				if( Result )
				{
					Item = Str;
				}
				else
				{
					Result = ParseNumber(out Item);
					if( !Result ) 
					{
						Result = ParseChar(out C);
						Item = C;
					}
				}
				if( !Result ) SetLastError("Expected item");
				return Result;
			}
			private bool ParseString(out string String)
			{
				// string ::= "<anychar>*"
				String = "";
				if( AtEnd   ) return false;
				if( Next != '"' ) return false;
				Skip();
				do
				{
					String += Next;
					Skip();
					if( AtEnd   ) return SetLastError("(\") expected");
				} while( Next != '"');
				Skip();
				return true;
			}
			private bool ParseChar(out char C)
			{
				// char ::= '<char>' | '\''
				C = '\0';
				if( AtEnd   ) return false;
				if( Next != '\'' ) return false;
				Skip();
				if( AtEnd   ) return SetLastError("character expected");
				if( Next == '\\' ) 
				{
					Skip();
					if( AtEnd   ) return SetLastError("(') expected");
					if( Next != '\'' ) return SetLastError("(') expected");
					Skip();
					C = '\'';
				}
				else
				{
					C = Next;
					Skip();
					if( AtEnd   ) return SetLastError("(') expected");
				}
				if( Next != '\'' ) return SetLastError("(') expected");;
				Skip();
				return true;
			}

			private bool ParseNumber(out object Number)
			{
				// number ::= +unsigned | -unsigned | unsigned | 0x HexDigits
				Number = 0;
				if( AtEnd   ) return false;

				
				// special treatment for hex numbers
				if( Match("0x") ) 
				{
					Skip(2);
					try
					{
						string HexDigits;
						ParseHexDigits(out HexDigits);
						Number = long.Parse(HexDigits,System.Globalization.NumberStyles.HexNumber);
						return true;
					}
					catch
					{
						return SetLastError("Invalid hex format (Too large?)");
					}
				}

				int sign = 1;
				switch( Next )
				{
					case '+' : 
					{
						Skip();
						break;
					}
					case '-' : 
					{
						Skip();
						sign = -1;
						break;
					}
					default:
						break;
				}
				object Unsigned = 0;
				bool Result = ParseUnsigned(out Unsigned);
				if( !Result ) return false;
				if( Unsigned is double )
				{
					Number = sign * (double)Unsigned;
				}
				else
				{
					Number = sign * (long)Unsigned;
				}
				return true;
			}

			private bool ParseUnsigned(out Object Unsigned)
			{
				// unsigned  ::= digits | digits.digits
				Unsigned = 0;
				if( AtEnd   ) return SetLastError("Unexpected end-of-format");
				string BeforeDecimal;
				string AfterDecimal = "";
				bool Result = ParseDigits(out BeforeDecimal);
				if( !Result ) return false;
				
				// if we see a decimal point - it's a double
				if( Next == '.' )
				{
					Skip();
					Result = ParseDigits(out AfterDecimal);
					if( !Result ) return SetLastError("Unexpected digits after (.)");
					try
					{
						Unsigned = double.Parse(BeforeDecimal + "." + AfterDecimal);
						return true;
					}
					catch
					{
						return SetLastError("Invalid numerical format (Too large?)");
					}
				}

				// it's an ordinal - use long
				try
				{
					Unsigned = long.Parse(BeforeDecimal);
					return true;
				}
				catch
				{
					Unsigned = 0;
					return SetLastError("Invalid numerical format");
				}
			}

			private bool ParseDigits(out string Digits)
			{
				// digits ::= {0...9}*
				Digits = "";
				if( AtEnd ) return SetLastError("Unexpected end-of-format");;
				if( !char.IsDigit(Next) ) return false;
				do
				{
					Digits = Digits + Next;
					Skip();
				} while( char.IsDigit(Next) );
				return true;
			}

			private bool ParseHexDigits(out string Digits)
			{
				// HexDigits ::= {0...9, A..F, a..f}*
				const string Hex = "0123456789abcdefABCDEF";
				Digits = "";
				if( AtEnd ) return SetLastError("Unexpected end-of-format");;
				if( Hex.IndexOf(Next) < 0 ) return false;
				do
				{
					Digits = Digits + Next;
					Skip();
				} while( Hex.IndexOf(Next) >= 0 );
				return true;
			}

			#endregion
		}

	
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\sgauth.cs ===
using System;
using System.Collections;
using System.Diagnostics;
using System.Net;
using System.Net.Sockets;
using System.IO;
using System.Reflection;
using System.Threading;
using xonline.common.service;

namespace xonline.server.storage.test.console 
{
    // SGSession
    // Pass it to SGAuth so it knows what to simulate
    class SGSession
    {
        public SGSession(ulong ulMachineId, ulong[] users)
        {
            Debug.Assert(users != null && users.Length >= 1 && users.Length <= 4);
            _ulMachineId = ulMachineId;

            for(int ndx=0; ndx < users.Length; ndx++)
                _users[ndx] = users[ndx];
        }
        
        public uint     _uiTitleId      = Constants.TitleId;
        public ulong    _ulMachineId;
        public ulong[]  _users = new ulong[4];
        public ulong    _fileTimeSessionStarted = (ulong) DateTime.Now.AddHours(-1).ToFileTime();
    }
    
    // SGAuth
    // Handles SG auth stuff 
    class SGAuth
    {
        private const ushort sgMessagePort = 0xFFFF;
            // That's where SG receives UDP messages
        
        // Start
        // Start the auth thread. Call it at the beginning of the app.
        static public void Start()
        {
            _authThread = new Thread(new ThreadStart((new SGAuth()).AuthThread));
            _authThread.Name = "Auth thread";
            _authThread.Start();
        }
        
        // Shutdown
        // Stop the auth thread and do clean up. Call it at the end of the app.
        static public void Shutdown()
        {
            if(_authThread != null)
            {
                // Signal auth thread to stop
                _fShutdown = true;
                
                // Wait until it finishes
                while(_authThread.IsAlive)
                {
                    Thread.Sleep(500);
                }
            }
        }

        // AddSession
        // Add a session to the list of stuff to be simulated
        static public void AddSession(IPEndPoint endPoint, SGSession session)
        {
            _sessionTable.Add(endPoint, session);
        }

        // DropSession
        // Drop a session from the list
        static public void DropSession(IPEndPoint endPoint)
        {
            _sessionTable.Remove(endPoint);
        }

        // AuthThread
        // Does the real work
        private void AuthThread()
        {
            byte[] authStuff = new Byte[4096];
            Socket authSocket = new Socket(AddressFamily.InterNetwork, SocketType.Dgram, ProtocolType.Udp);
            authSocket.Bind(new IPEndPoint(0, sgMessagePort));
            EndPoint endPointRequester = new IPEndPoint(0, 0);            
            
            while(!_fShutdown)
            {
                if(!authSocket.Poll(500000, SelectMode.SelectRead))
                {
                    continue;
                }
                
                int iSize = authSocket.ReceiveFrom(authStuff, ref endPointRequester);
                MemoryStream memStream = new MemoryStream(authStuff, 0, iSize);
                BinaryReader reader = new BinaryReader(memStream);

                // Read message header
                SGMsgHdr hdr = new SGMsgHdr();
                hdr.ReadFrom(reader);

                if(hdr._wType != SGMsgHdr.SGMSG_TYPE_SPIDATA_REQ2)
                {
                    throw new Exception("Invalid SG message type " + hdr._wType);
                }
                
                // Read SPI request
                SGMsgSpiReq2 spiReq = new SGMsgSpiReq2();
                spiReq.ReadFrom(reader);

                // Look for the session
                IPEndPoint sessionEndPoint = new IPEndPoint(spiReq._ipaZ, IPAddress.NetworkToHostOrder((short)spiReq._ipportZ));
                SGSession session = (SGSession) _sessionTable[sessionEndPoint];
                
                // Prepare to send reply
                memStream = new MemoryStream(authStuff);
                BinaryWriter writer = new BinaryWriter(memStream);

                // SPI reply
                SGMsgSpiRep2 spiRep = new SGMsgSpiRep2();
                hdr._wType                  = SGMsgHdr.SGMSG_TYPE_SPIDATA_REP2;
                hdr._cbEnt                  = (ushort) (SGMsgHdr.Size + SGMsgSpiRep2.Size);
                hdr.WriteTo(writer);
                spiRep._dwReqNum            = spiReq._dwReqNum;
                spiRep._ipaZ                = spiReq._ipaZ;
                spiRep._ipportZ             = spiReq._ipportZ;
                spiRep._fNotFound           = (byte) (session != null ? 0 : 1);
                spiRep.WriteTo(writer);

                if(session != null)
                {
                    // SPI data
                    hdr._wType                  = SGMsgHdr.SGMSG_TYPE_SPIDATA2;
                    hdr._cbEnt                  = (ushort) (SGMsgHdr.Size + SGMsgSpiData2.Size);
                    hdr.WriteTo(writer);
                    
                    SGMsgSpiData2 spiData       = new SGMsgSpiData2();
                    spiData._ipportI            = 0;
                    spiData._ipaI               = 0;
                    spiData._sgaddr             = new byte[20];
                    spiData._wVersionKeyEx      = 1;
                    spiData._wFlagsKeyEx        = 1;
                    spiData._liNonce            = 123;
                    spiData._liTimeInit         = (ulong) DateTime.Now.ToFileTime();
                    spiData._fCs                = 1;
                    spiData.WriteTo(writer);  
                    
                    hdr._wType                  = SGMsgHdr.SGMSG_TYPE_AUTHDATA2;
                    hdr._cbEnt                  = SGAuthData2.Size;
                    hdr.WriteTo(writer);
                    
                    SGAuthData2 authdata        = new SGAuthData2();
                    authdata._dwTitleID         = session._uiTitleId;
                    authdata._qwXboxID          = session._ulMachineId;
                    authdata._users[0]._userId  = session._users[0];
                    authdata._users[1]._userId  = session._users[1];
                    authdata._users[2]._userId  = session._users[2];
                    authdata._users[3]._userId  = session._users[3];

                    // fake a storage service ticket
                    authdata._dwNumServices = 1;
                    authdata._dwServiceID = new uint[12];
                    authdata._dwServiceID[0] = (uint) XOService.Storage;

                    // use a fake key of all 1's
                    for (int i = 0; i < authdata._key.Length; i++)
                        authdata._key[i] = 1;
                    
                    authdata.WriteTo(writer);
                }
                
                authSocket.SendTo(memStream.ToArray(), endPointRequester);
            }
        }
        
        private static Thread               _authThread         = null;
        private static bool                 _fShutdown          = false;
        private static Hashtable            _sessionTable       = new Hashtable();
    }

    // *** SG Protocol stuff ***
    
    // SGMsgHdr
    // SG message header 
    class SGMsgHdr 
    {
        public const int    Size                    = 4;

        public const int    SGMSG_TYPE_SPIDATA_REQ2 = 0x4710;  // CSgMsgSpiReq2
        public const int    SGMSG_TYPE_SPIDATA_REP2 = 0x4711;  // CSgMsgSpiRep2
        public const int    SGMSG_TYPE_SPIDATA2     = 0x4782;  // CSgMsgSpiData2 in the payload
        public const int    SGMSG_TYPE_AUTHDATA2    = 0x4783;  // SGAuthData2
    
        public ushort       _wType = 0;
        public ushort       _cbEnt = 0;

        public void ReadFrom(BinaryReader reader)
        {
            _wType = reader.ReadUInt16();
            _cbEnt = reader.ReadUInt16();
        }

        public void WriteTo(BinaryWriter writer)
        {
            writer.Write(_wType);
            writer.Write(_cbEnt);
        }
    }

    // SGMsgSpiReq
    // SPI request
    class SGMsgSpiReq2
    {
        public const int    Size                    = 10;

        public uint         _dwReqNum               = 0;        // Request number from requester
        public uint         _ipaZ                   = 0;        // IP address of the client on the DMZ
        public ushort       _ipportZ                = 0;        // IP port of the client on the DMZ

        public void ReadFrom(BinaryReader reader)
        {
            _dwReqNum = reader.ReadUInt32();
            _ipaZ = reader.ReadUInt32();
            _ipportZ = reader.ReadUInt16();
        }

        public void WriteTo(BinaryWriter writer)
        {
            writer.Write(_dwReqNum);
            writer.Write(_ipaZ);
            writer.Write(_ipportZ);
        }
    }

    // SGMsgSpiRep
    // SPI response
    class SGMsgSpiRep2
    {
        public const int    Size                    = 11;

        public uint         _dwReqNum               = 0;        // Copy of _dwReqNum from request
        public uint         _ipaZ                   = 0;        // IP address of the client on the DMZ
        public ushort       _ipportZ                = 0;        // IP port of the client on the DMZ
        public byte         _fNotFound              = 0;        // TRUE if client not found (no auth-data enclosed)

        public void ReadFrom(BinaryReader reader)
        {
            _dwReqNum = reader.ReadUInt32();
            _ipaZ = reader.ReadUInt32();
            _ipportZ = reader.ReadUInt16();
            _fNotFound = reader.ReadByte();
        }

        public void WriteTo(BinaryWriter writer)
        {
            writer.Write(_dwReqNum);
            writer.Write(_ipaZ);
            writer.Write(_ipportZ);
            writer.Write(_fNotFound);
        }
    }

    // SGMsgSpiData
    class SGMsgSpiData2
    {
        public const int    Size                = 50;
        
        public ushort       _ipportI            = 0;        // IP port of the client on the Internet
        public uint         _ipaI               = 0;        // IP address of the client on the Internet
        public byte[/*20*/] _sgaddr             = new byte[20];     // SGADDR of the client (size = 20 bytes)
        public ushort       _wVersionKeyEx      = 1;        // KeyEx version of the client
        public ushort       _wFlagsKeyEx        = 1;        // Flags sent in KeyEx initiator
        public ulong        _liNonce            = 0;        // A random nonce associated with this session
        public ulong        _liTimeInit         = 0;        // FILETIME marking session initiation
        public uint         _fCs                = 0;        // TRUE if SG is providing connection services

        public void ReadFrom(BinaryReader reader)
        {
            _ipportI        = reader.ReadUInt16();
            _ipaI           = reader.ReadUInt32();
            _sgaddr         = reader.ReadBytes(20);
            _wVersionKeyEx  = reader.ReadUInt16();
            _wFlagsKeyEx    = reader.ReadUInt16();
            _liNonce        = reader.ReadUInt64();
            _liTimeInit     = reader.ReadUInt64();
            _fCs            = reader.ReadUInt32();
        }

        public void WriteTo(BinaryWriter writer)
        {
            writer.Write(_ipportI);
            writer.Write(_ipaI);
            writer.Write(_sgaddr);
            writer.Write(_wVersionKeyEx);
            writer.Write(_wFlagsKeyEx);
            writer.Write(_liNonce);
            writer.Write(_liTimeInit);
            writer.Write(_fCs);
        }
    }

    // SGAuthData
    class SGAuthData2
    {
        public const int    Size                    = 44 + (4*SGXUID.Size) + (12*4) + (4*4);
        public const ushort XONLINE_AUTHDATA_VERSION = 2;

        public ushort       _wAuthDataVersion       = 2;
        public ushort       _wAuthDataSize          = Size;
        public ushort       _wMajorVersion          = 1;
        public ushort       _wMinorVersion          = 2;
        public ushort       _wBuildNumber           = 3;
        public ushort       _wQFENumber             = 4;
        public uint         _dwTitleID              = 0;
        public uint         _dwTitleVersion         = 0;
        public uint         _dwTitleRegion          = 0;
        public ulong        _qwXboxID               = 0;
        public SGXUID[]     _users                  = new SGXUID[4];
        public uint         _dwNumServices          = 0;
        public uint[]       _dwServiceID            = new uint[12];
        public float[]      _afltTrustFactor        = new float[4];
        public uint[]       _dwAltTitleIds = new uint[4];
        public byte[]       _key = new byte[16];

        public void ReadFrom(BinaryReader reader)
        {
            _wAuthDataVersion = reader.ReadUInt16();
            _wAuthDataSize = reader.ReadUInt16();
            _wMajorVersion = reader.ReadUInt16();
            _wMinorVersion = reader.ReadUInt16();
            _wBuildNumber = reader.ReadUInt16();
            _wQFENumber = reader.ReadUInt16();
            _dwTitleID = reader.ReadUInt32();
            _dwTitleVersion = reader.ReadUInt32();
            _dwTitleRegion = reader.ReadUInt32();
            _qwXboxID = reader.ReadUInt64();

            for(int iUser=0; iUser < _users.Length; iUser++)
            {
                _users[iUser].ReadFrom(reader);
            }

            _dwNumServices = reader.ReadUInt32();
            
            for(int iService=0; iService < _dwServiceID.Length; iService++)
            {
                _dwServiceID[iService] = reader.ReadUInt32();
            }
            
            _afltTrustFactor = new float[4];
            
            for(int iTrustFactor=0; iTrustFactor < _afltTrustFactor.Length; iTrustFactor++)
            {
                _afltTrustFactor[iTrustFactor] = reader.ReadSingle();
            }
        }

        public void WriteTo(BinaryWriter writer)
        {
            writer.Write(_wAuthDataVersion);
            writer.Write(_wAuthDataSize);
            writer.Write(_wMajorVersion);
            writer.Write(_wMinorVersion);
            writer.Write(_wBuildNumber);
            writer.Write(_wQFENumber);
            writer.Write(_dwTitleID);
            writer.Write(_dwTitleVersion);
            writer.Write(_dwTitleRegion);
            writer.Write(_qwXboxID);

            for(int iUser=0; iUser < _users.Length; iUser++)
            {
                _users[iUser].WriteTo(writer);
            }

            writer.Write(_dwNumServices);
            
            for(int iService=0; iService < _dwServiceID.Length; iService++)
            {
                writer.Write(_dwServiceID[iService]);
            }
            
            for(int iTrustFactor=0; iTrustFactor < _afltTrustFactor.Length; iTrustFactor++)
            {
                writer.Write(_afltTrustFactor[iTrustFactor]);
            }
            
            for(int altTitleId=0; altTitleId < _dwAltTitleIds.Length; altTitleId++)
            {
                writer.Write(_dwAltTitleIds[altTitleId]);
            }


            writer.Write(_key);            
        }
    } 

    // SGXUID
    // user id
    struct SGXUID 
    {
        public const int    Size                    = 12;

        public ulong        _userId;
        public uint         _userFlags;
 
        public void ReadFrom(BinaryReader reader)
        {
            _userId = reader.ReadUInt64();
            _userFlags = reader.ReadUInt32();
        }
        
        public void WriteTo(BinaryWriter writer)
        {
            writer.Write(_userId);
            writer.Write(_userFlags);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\fd\stfdunit.cs ===
using NUnit.Framework;
using System;
using System.Text;
using System.IO;
using System.Net;
using System.Web;
using System.Web.Services.Protocols;
using System.Xml;
using System.Threading;
using xonline.common.protocol;
using XBOX.Online.nUnit;
using xonline.common.service;

using xonline.server.storage.test.fd;

/*
    Not tested:
    
        case HResult.XONLINE_E_STORAGE_FILE_ALREADY_EXISTS:
*/    

namespace xonline.server.storage.test.fd 
{
    [TestFixture]
    public class StfdUnit
    {             
        static Random m_random = new Random();
        
        public const uint c_readOnlyTitleID = 400000;
        public const uint c_readWriteTitleID = 400001;

        public const int c_userStorageByteQuota = 65536;
        public const int c_userStorageFileQuota = 8;

        public const int c_titleStorageMaxFileSize = 5242880;

        private class WriteFileRequest
        {
            public ReqHdrWriteFile m_request;

            public WriteFileRequest(uint titleID, ulong userPuid, string pathName, 
                byte [] data, ContentType contentType, DateTime expirationDate)
            {
                m_request = new ReqHdrWriteFile();
                
                // Set up the base access token
                WriteFileToken token = new WriteFileToken();
                token._operation = (ushort) Operation.FileWrite;
                token._serviceId = (uint) XOService.Storage;
                token._flags = 0;
                token._userPuid = userPuid;
                token._xboxPuid = 0;
                token._pathName = pathName; // _pathNameSize is set automatically based on this
                
                // Set up the write access token
                token._tokenExpirationDate = 0;
                
                try
                {
                    token._fileExpirationDate = expirationDate.ToFileTimeUtc();
                }
                catch (System.ArgumentOutOfRangeException)
                {
                    token._fileExpirationDate = 0; // 0 indicates that there is no expiration date for this file
                }                     
                
                token._maxFileSize = ProtocolConstants.maxFileSize;
                
                m_request._accessToken = token;
                
                // Set up the request body
                m_request._titleId = titleID;
                m_request._titleVersion = 0;
                m_request._userCountryId = 0;
                m_request._compressionType = (byte) CompressionType.Uncompressed;
                
                // Set the content type appropriately
                m_request._contentType = (uint) contentType;
                
                m_request._blobHash = null;
                m_request._blobSignature = null;
                
                m_request._blobSizeUncompressed = (uint) data.Length;
                m_request._blobSize = (uint) data.Length;
                m_request._attributes = null; // _attributesSize is set automatically based on this
                
                // Make the request to Storage, which returns nothing if successfull
                FrontDoorRequest(XOService.Storage, req.GetXRL(), userPuid, titleID, ostream.ToArray());
            }

            public void Sign()
            {
                // Compute a digest of the attachment data
                SHA1CryptoServiceProvider sha1 = new SHA1CryptoServiceProvider();
                m_request._blobHash = sha1.ComputeHash(data);
                m_request._blobSignature = SignHashOnBehalf(titleID, userPuid, m_request._blobHash);
            }

            public byte [] ToByteArray()
            {
                // Write the full request into a binary stream
                MemoryStream ostream = new MemoryStream();
                BinaryWriter writer = new BinaryWriter( ostream );
                
                // Write out the request header
                m_request.WriteTo( writer );
                
                // Write out the attachment data
                writer.Write(data);
                
                // Make sure the BinaryWriter is finished writing
                writer.Flush();

                return ostream.ToArray();
            }
        }

        public class ClientContext
        {
            static const DefaultClientIP = 1 + (1 << 8) + (1 << 16) + (1 << 24);
            static const DefaultClientPort = 0xAAAA;
            static const DefaultRequestID = 0xBBBB;
            static const DefaultXboxID = 0xCCCC;
            static const DefaultUserPuid = 0xDDDD;
            static const DefaultTitleID = 0xEEEE;
            
            public uint ClientIP;
            public ushort ClientPort;
            public ulong RequestID;
            
            public ulong XboxID;
            public XUIDAndTrust [] Users;
            public uint TitleID;

            public ClientContext(uint clientIP, ushort clientPort, ulong requestID,
                ulong xboxID, XUIDAndTrust [] users, uint titleID)
            {
                ClientIP = clientIP;
                ClientPort = clientPort;
                RequestID = requestID;
                XboxID = xboxID;
                Users = users;
                TitleID = titleID;
            }

            public ClientContext() : this(DefaultClientIP, DefaultClientPort, DefaultRequestID
                DefaultXboxID
            {
                ClientIP = DefaultClientIP;
                ClientPort = DefaultClientPort;
                RequestID = DefaultRequestID;       
                XboxID = DefaultXboxID;
                
                Users = new XUIDAndTrust[4];
                Users[0] = new XUIDAndTrust(DefaultUserPuid, 0, 0.0F);
                for( int i = 1; i < 4; i++)
                {   
                    Users[i] = new XUIDAndTrust(0, 0, 0.0F);
                }

                TitleID = DefaultTitleID;
            }
        }
        
        private byte [] FrontDoorRequest(ClientContext context, XOService service, 
            string path, byte [] postData)
        {
            byte [] response;
            
            uint hr = FrontDoorRequest(context, service, path, postData, out response);
            if (hr != HResult.S_OK)
                throw new TestException(string.Format(
                    "Storage front door returned unexpected HResult {0:x8}", hr));
            
            return response;
        }

        private uint FrontDoorRequest(ClientContext context, XOService service, 
            string path, byte [] postData, out byte[] responseData)
        {
            uint serviceID = (uint) XOService.Storage;
            
            UriBuilder uri = new UriBuilder(XRLUtil.GetServiceAddress(service));
            uri.Scheme = "http";
            uri.Path = path;

            string url = uri.ToString();
            
            HTTPAuthData authData = new HTTPAuthData(context.ClientPort, context.ClientIP, 
                context.RequestID, context.XboxID, context.Users, context.TitleID, serviceID, 0);
            
            WebClient client = new WebClient();
            client.Headers.Add(XHttpHdr.HTTPAUTHDATA, authData.GetBase64EncodedString());
            client.Headers.Add("Content-Type", "xon/" + serviceID);
            client.Headers.Add("User-Agent", serviceID.ToString("x")+"/1.00.65535");

            uint hr;
            string xErr = null;
            try
            {
                responseData = client.UploadData(url, "POST", postData);

                // we may get a success code back, such as XONLINE_S_STORAGE_FILE_NOT_MODIFIED
                xErr = client.ResponseHeaders["X-Err"];
                
                hr = (xErr == null) ? (HResult) HResult.S_OK : HResult.Parse(xErr);
            }
            catch (WebException e)
            {
                if (e.Response != null && e.Response.Headers != null)
                {
                    xErr = e.Response.Headers["X-Err"];
                }
                
                hr = (xErr == null) ? (HResult) HResult.S_OK : HResult.Parse(xErr);
            }
            
            return hr;
        }


        [Test]
        public void PTitleEndToEnd()
        {
            Console.WriteLine();
        }

        private string GenerateTestFileName(int folderNameLength)
        {
            StringBuilder fileName = new StringBuilder(folderNameLength + 1);
            
            Test.Tools.Randomizer randomizer = new Randomizer("{" + folderNameLength + 
                "}X{ASCII}*{ALPHANUMERIC}");
                
            return randomizer.Next().ToString();
        }

        private string GenerateTestFileName(int maxTreeDepth, int maxFolderNameLength)
        {
            StringBuilder fileName = new StringBuilder(maxTreeDepth * maxFolderNameLength);
            
            Test.Tools.Randomizer randomizer = new Randomizer("{0-" + maxFolderNameLength + 
                "}X{ASCII}*{ALPHANUMERIC}");
                
            int folders = m_random.Next(maxTreeDepth);
            for(int i = 0; i < folders; i++)
            {
                if (fileName.Length != 0)
                    fileName.Append('/');
        
                fileName.Append(randomizer.Next());
            }
        
            return fileName.ToString();
        }
        
        private TestFile [] GenerateTestFiles(int numTestFiles, int fileMaxSize, string baseFileName)
        {
            TestFile [] files = new TestFile[numTestFiles];
        
            for (int i = 0; i < numTestFiles; i++)
            {
                // append guid to gaurantee unique name
                string fileName = baseFileName + GenerateTestFileName(5, 15) + Guid.NewGuid().ToString();
                    
                // generate a file of size [0, fileMaxSize) filled with random bytes
                int fileSize = m_random.Next(fileMaxSize);
        
                // generate an expiration date some time within the next week
                int days = m_random.Next(7) + 1;
                DateTime expirationDate = DateTime.UtcNow.AddDays(days);
        
                files[i] = GenerateTestFile(fileName, fileSize, expirationDate);
            }
        
            return files;     
        }

        private TestFile GenerateTestFile(string fileName, int fileSize, DateTime expirationDate)
        {
            byte [] data = new byte[fileSize];
            m_random.NextBytes(data);

            return new TestFile(fileName, data, expirationDate);
        }
        
        private TestFile GenerateTestFile(int fileSize, string baseFileName)
        {
            // append guid to gaurantee unique name
            string fileName = baseFileName + GenerateTestFileName(5, 15) + Guid.NewGuid().ToString();

            byte [] data = new byte[fileSize];
            m_random.NextBytes(data);

            // generate an expiration date some time within the next week
            int days = m_random.Next(7) + 1;
            DateTime expirationDate = DateTime.UtcNow.AddDays(days);

            return new TestFile(fileName, data, expirationDate);
        }
        
        private TestFile GenerateTestFile(int fileSize, int fileNameLength)
        {
            // append guid to gaurantee unique name
            string fileName = GenerateTestFileName(fileNameLength);

            byte [] data = new byte[fileSize];
            m_random.NextBytes(data);

            // generate an expiration date some time within the next week
            int days = m_random.Next(7) + 1;
            DateTime expirationDate = DateTime.UtcNow.AddDays(days);

            return new TestFile(fileName, data, expirationDate);
        }
    }
    
    public class TestFile
    {
        public TestFile(string fileName, byte [] data, DateTime expirationDate)
        {
            FileName = fileName;
            Data = data;
            ExpirationDate = expirationDate;
            Revoked = false;
        }
        
        public string FileName;
        public byte [] Data;
        public DateTime ExpirationDate;
        public bool Revoked;
    }

    public class TestException : Exception
    {
        public TestException(string msg) : base(msg)
        {
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\req.cs ===
using System;
using System.Collections;
using System.IO;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Web;
using xonline.common.protocol;
using xonline.common.service;

namespace xonline.server.storage.test.console 
{
    class XRLUtil
    {
        [DllImport("kernel32.dll")]
        public static extern void GetSystemTimeAsFileTime(out long t);
    }

    class XRLWriteFile
    {
        // SHA1 object for computing blob hashes
        protected static SHA1 _sha1 = new SHA1CryptoServiceProvider();
        
        public XRLWriteFile(uint titleId, uint titleVersion, ulong userPuid, ulong xboxPuid, TeamTickets teamTickets, string name, byte[] blob)
        {
            _titleId = titleId;
            _titleVersion = titleVersion;
            _userPuid = userPuid;
            _xboxPuid = xboxPuid;
            _teamTickets = teamTickets;
            _name = name;
            _blob = blob;
        }

        public uint Post(string host, int port)
        {
            uint hr = HResult.S_OK;

            WriteFileToken t = new WriteFileToken();
            t._operation = (ushort) Operation.FileWrite;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = _userPuid;
            t._xboxPuid = _xboxPuid;
            t._pathName = _name;
            
            t._tokenExpirationDate = 0;
            //XRLUtil.GetSystemTimeAsFileTime(out t._fileExpirationDate);
            //t._fileExpirationDate = DateTime.Now.ToFileTime();
            t._fileExpirationDate = (new DateTime(2333, 11, 15)).ToLocalTime().ToFileTime();
            t._maxFileSize = Int32.MaxValue;

            // only stats uses signed access tokens
            if ( _name.StartsWith("//stats") )
            {
                if (StorageUnitest._verifyAccessTokens)
                {
                    XSigAuthData authData = new XSigAuthData();
                    authData._titleID = _titleId;
                    authData._titleVersion = _titleVersion;
                    authData._userID1 = _userPuid;
                    authData._userID2 = 0;
                    authData._userID3 = 0;
                    authData._userID4 = 0;
                    authData._XboxID = _xboxPuid;
                    t.SignOnBehalf(XOService.Storage, authData);
                
                    t.VerifySignature(XOService.Storage);
                    t.VerifySignature();
                    t._signatureSize = (ushort) t._signature.Length;
                }
            }
            
            t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );
            
            //t._signature = new byte[ProtocolConstants.sizeSignature];
            //t._signature[4] = 7;
            //t._signature[82] = 42;
            //t._signature[83] = 42;
            //t._signature[84] = 42;
            //t._signature[85] = 42;
            
            ReqHdrWriteFile msg     = new ReqHdrWriteFile();
            msg._titleId            = _titleId;
            msg._titleVersion       = _titleVersion;
            msg._userCountryId      = 0;
            
            msg._compressionType    = 0;
            //msg._compressionType    = 42;
            msg._contentType        = 0;
            //msg._contentType        = 13;
            msg._blobHash           = _sha1.ComputeHash(_blob);
            msg._blobSignature      = new byte[ProtocolConstants.sizeSignature];
            msg._blobSizeUncompressed = (uint) _blob.Length;
            msg._blobSize           = (uint) _blob.Length;
            msg._attributes         = new byte[] {42, 3, 5, 7, 11, 13, 17, 19};
            //msg._attributes         = new byte[999];
            msg._accessToken        = t;
            msg._teamTickets        = _teamTickets;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);
            writer.Write(_blob);
            
            byte[] req = memStream.ToArray();
            byte[] resp = null;
            
            string url = "http://" + host + ":" + port + "/stfd/writefile.ashx";
            hr = XRL.Post((int)XOService.Storage, url, 
                req, out resp);

            return hr;
        }

        protected uint      _titleId;
        protected uint      _titleVersion;
        protected ulong     _userPuid;
        protected ulong     _xboxPuid;
        protected TeamTickets _teamTickets;
        protected string    _name;
        protected byte[]    _blob;
    }

    class XRLReadFile
    {
        public XRLReadFile(uint titleId, uint titleVersion, ulong ulUserPuid, ulong ulXboxPuid, TeamTickets teamTickets, string name, DateTime ifModifiedSince)
        {
            _titleId = titleId;
            _titleVersion = titleVersion;
            _userPuid = ulUserPuid;
            _xboxPuid = ulXboxPuid;
            _teamTickets = teamTickets;
            _name = name;
            _ifModifiedSince = ifModifiedSince;
        }

        public uint Post(string host, int port)
        {
            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileRead;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = _userPuid;
            t._xboxPuid = _xboxPuid;
            t._pathName = _name;

            t._tokenExpirationDate = 0;
            t._signature = null;
            
            t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );
            
            ReqReadFile msg          = new ReqReadFile();
            msg._titleId             = _titleId;
            msg._titleVersion        = _titleVersion;
            msg._userCountryId       = 0;
            msg._rangeStart          = 0;
            msg._rangeEnd            = 0;
            try 
            {
                msg._ifModifiedSinceDate = _ifModifiedSince.ToFileTimeUtc();
            }
            catch (System.ArgumentOutOfRangeException)
            {
                msg._ifModifiedSinceDate = 0;
            }           
            msg._accessToken         = t;
            msg._teamTickets         = _teamTickets;
            
            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] req = memStream.ToArray();
            byte[] resp = null;
            uint hr = HResult.S_OK;
            
            string url = "http://" + host + ":" + port + "/stfd/readfile.ashx";
            hr = XRL.Post((int)XOService.Storage, url, 
                req, out resp);

            if ( HResult.Succeeded(hr) )
            {
                RepHdrReadFile rep      = new RepHdrReadFile();
                memStream               = new MemoryStream(resp);
                BinaryReader reader     = new BinaryReader(memStream);
                rep.ReadFrom(reader);
                _blob = reader.ReadBytes((int)rep._blobSize);
            }
            return hr;
        }

        public byte[] Blob
        {
            get { return _blob; }
        }

        protected uint      _titleId;
        protected uint      _titleVersion;
        protected ulong     _userPuid;
        protected ulong     _xboxPuid;
        protected TeamTickets _teamTickets;
        protected string    _name;
        protected byte[]    _blob;
    protected DateTime _ifModifiedSince;
    }

    class XRLRemoveFile
    {
        public XRLRemoveFile(uint titleId, uint titleVersion, ulong userPuid, ulong xboxPuid, TeamTickets teamTickets, string name)
        {
            _titleId = titleId;
            _titleVersion = titleVersion;
            _userPuid = userPuid;
            _xboxPuid = xboxPuid;
            _teamTickets = teamTickets;
            _name = name;
        }

        public uint Post(string host, int port)
        {
            RemoveFileToken t  = new RemoveFileToken();
            t._operation = (ushort) Operation.FileRemove;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = _userPuid;
            t._xboxPuid = _xboxPuid;
            t._pathName = _name;

            t._tokenExpirationDate = 0;

            if ( _name.StartsWith("//stats") )
            {
                if (StorageUnitest._verifyAccessTokens)
                {
                    XSigAuthData authData = new XSigAuthData();
                    authData._titleID = _titleId;
                    authData._titleVersion = _titleVersion;
                    authData._userID1 = _userPuid;
                    authData._userID2 = 0;
                    authData._userID3 = 0;
                    authData._userID4 = 0;
                    authData._XboxID = _xboxPuid;
                    t.SignOnBehalf((XOService)Int32.MinValue, authData);
                    
                    t._signatureSize = ProtocolConstants.sizeSignature;
                    //t._signature = new byte[ProtocolConstants.sizeSignature];
                }
            }
            t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );
            
            ReqRemoveFile msg       = new ReqRemoveFile();
            msg._titleId            = _titleId;
            msg._titleVersion       = _titleVersion;
            msg._accessToken        = t;
            msg._teamTickets        = _teamTickets;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] req = memStream.ToArray();
            byte[] resp = null;
            uint hr = HResult.S_OK;
            
            string url = "http://" + host + ":" + port + "/stfd/removefile.ashx";
            hr = XRL.Post((int)XOService.Storage, url, 
                req, out resp);

            return hr;
        }

        protected uint      _titleId;
        protected uint      _titleVersion;
        protected ulong     _userPuid;
        protected ulong     _xboxPuid;
        protected TeamTickets _teamTickets;
        protected string    _name;
    }
    
    class XRLEnumerateFiles
    {
        public XRLEnumerateFiles(uint titleId, uint titleVersion, ulong userPuid, ulong xboxPuid, string path, uint resultsStart, uint resultsEnd)
        {
            _titleId = titleId;
            _titleVersion = titleVersion;
            _userPuid = userPuid;
            _xboxPuid = xboxPuid;
            _path = path;
            _resultsStart = resultsStart;
            _resultsEnd = resultsEnd;
        }

        public XRLEnumerateFiles(uint titleId, uint titleVersion, ulong userPuid, ulong xboxPuid, string path)
        {
            _titleId = titleId;
            _titleVersion = titleVersion;
            _userPuid = userPuid;
            _xboxPuid = xboxPuid;
            _path = path;
            _resultsStart = 0;
            _resultsEnd = 0;
        }
    
        public uint Post(string host, int port)
        {
            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileEnumerate;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = _userPuid;
            t._xboxPuid = _xboxPuid;
            t._pathName = _path;

            t._tokenExpirationDate = 0;
            t._signatureSize = 0;
            
            ReqEnumerateFiles msg    = new ReqEnumerateFiles();
            msg._titleId             = _titleId;
            msg._titleVersion        = _titleVersion;
            msg._resultsStart        = _resultsStart;
            msg._resultsEnd          = _resultsEnd;
            msg._ifModifiedSinceDate = 0;
            msg._accessToken         = t;

            MemoryStream memStream   = new MemoryStream();
            BinaryWriter writer      = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] req = memStream.ToArray();
            byte[] resp = null;
            uint hr = HResult.S_OK;
            
            string url = "http://" + host + ":" + port + "/stfd/enumeratefiles.ashx";
            hr = XRL.Post((int)XOService.Storage, url, 
                req, out resp);

            if ( HResult.Succeeded(hr) )
            {
                memStream = new MemoryStream(resp);
                BinaryReader reader = new BinaryReader(memStream);
                
                uint totalFiles = reader.ReadUInt32();
                uint numFiles = reader.ReadUInt32();
                RepEnumerateFiles[] files = new RepEnumerateFiles[numFiles];

                Console.WriteLine("XRLEnumerateFiles: totalFiles: " + totalFiles);
                Console.WriteLine("XRLEnumerateFiles: numFiles: " + numFiles);
                
                for (int i=0; i<numFiles; i++)
                {
                    files[i] = new RepEnumerateFiles();
                    files[i].ReadFrom(reader);
                    Console.WriteLine("XRLEnumerateFiles: file " + i + ": " + files[i].ToString());
                    Console.WriteLine("");
                }
            }
            
            
            return hr;
        }

        protected uint      _titleId;
        protected uint      _titleVersion;
        protected ulong     _userPuid;
        protected ulong     _xboxPuid;
        protected string    _path;
        protected uint      _resultsStart;
        protected uint      _resultsEnd;
    }
    
    class XRLResolveName
    {
    
        //
        // these are ripped off from ..\ResolveName.cs
        //
    
        public class Request : XRLObject
        {
            public ushort pathnameLen;
            
            public string pathname;            
        }

        public class Response : XRLObject
        {
            public uint     primaryIP = 0;
            public ushort   primaryPort = 0;
            public uint     alternateIP = 0;
            public ushort   alternatePort = 0;
            public DateTime expiration = DateTime.MinValue;
            public ushort   ruleLen =0;
            public string   rule = null;
        }                        
        
        public XRLResolveName(string name)
        {
            _name = name;
        }
        
        public uint Post(string host, int port)
        {
            Request  req  = new Request();     
            _resp = new Response();

            req.pathnameLen = 0;
            req.pathname = _name;                                     
                                     
            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            req.WriteToResponse(writer, new System.Text.UTF8Encoding());
            
            byte[] reqbytes = memStream.ToArray();
            byte[] respbytes = null;
            uint hr;
            
            string url = "http://" + host + ":" + port + "/stfd/resolvename.ashx";
            hr = XRL.Post((int)XOService.Name_Resolution, url, reqbytes, out respbytes);

            if(hr == 0)
            {
                memStream               = new MemoryStream(respbytes);
                BinaryReader reader     = new BinaryReader(memStream);
                _resp.ReadFromRequest(reader, new System.Text.UTF8Encoding(), respbytes.Length, null);             
            }
            
            return hr;
        }
        
        public string Rule
        {
            get { return _resp.rule; }
        }

        public string Primary
        {
            get { return (new IPAddress(_resp.primaryIP).ToString()) + ":" + _resp.primaryPort; }
        }
        
        public string Alternate
        {
            get { return (new IPAddress(_resp.alternateIP).ToString()) + ":" + _resp.alternatePort; }
        }
                
        public string Expiration
        {
            get { return _resp.expiration.ToString(); }
        }
                
        protected string    _name;        
        protected Response  _resp;
    }

    class XRLReadFileHash
    {
        public XRLReadFileHash(string name)
        {
            _name = name;
        }

        public uint Post(string host, int port)
        {
            ReadFileHashRequest req = new ReadFileHashRequest();
            req.pathName = _name;
            
            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            req.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            byte[] reqBytes = memStream.ToArray();
            byte[] respBytes = null;
            uint hr = HResult.S_OK;
            
            string url = "http://" + host + ":" + port + "/stfd/readfilehash.ashx";
            hr = XRL.Post((int)XOService.Storage, url, 
                reqBytes, out respBytes);

            if ( HResult.Succeeded(hr) )
            {
                ReadFileHashResponse resp = new ReadFileHashResponse();
                memStream               = new MemoryStream(respBytes);
                BinaryReader reader     = new BinaryReader(memStream);
                resp.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, 0, null);
                _hash = resp.hash;
            }
            return hr;
        }

        public uint Post2(string host, int port)
        {
            uint hr = HResult.S_OK;
            try
            {
                string url = "http://" + host + ":" + port + "/stfd/readfilehash.ashx";
                //string path = "//stats/u:" + '\0'+ new Random().Next().ToString("x") + "/" + Guid.NewGuid().ToString();
                //string path = "//stats/u:" + '\0'+'\0'+ new Random().Next().ToString("x") + "/"+Guid.NewGuid().ToString();
                //string path = "//stats/u:" + new Random().Next().ToString("x") + "/"+Guid.NewGuid().ToString()+ '\0'+'\0';
                string path = "//stats/u:" + new Random().Next().ToString("x") + "/"+Guid.NewGuid().ToString();
                MemoryStream memStream = new MemoryStream();
                BinaryWriter w = new BinaryWriter(memStream);
                byte[] encName = Encoding.UTF8.GetBytes(path);
                w.Write((ushort)encName.Length);
                w.Write(encName);
                byte[] postBytes = memStream.ToArray();
                
                WebRequest req = WebRequest.Create(url);
                req.Timeout = 9999;
                req.Method = "POST";
                req.ContentType = "xon/" + ((int)XOService.Storage).ToString("x");
                //req.ContentLength = 2;
                //req.ContentLength = 4 + digest.Length + authData.Length;
                req.ContentLength = postBytes.Length;
                Stream reqStream = req.GetRequestStream();
                w = new BinaryWriter(reqStream);
                w.Write(postBytes);
                reqStream.Close();

                WebResponse resp = req.GetResponse();
                Stream respStream = resp.GetResponseStream();
                BinaryReader r = new BinaryReader(respStream);
                hr = r.ReadUInt32();
                Console.WriteLine("Post2: hr = 0x" + hr.ToString("X"));
                // TODO: retrieve X-Err if present
            }
            catch (Exception e)
            {
                if ( e is WebException )
                {
                    WebException we = ((WebException) e);
                    StreamReader sr = new StreamReader(we.Response.GetResponseStream());
                    string responseText = sr.ReadToEnd();
                    Console.WriteLine("Post2: caught exception: " + we + ", response: " + responseText);
                    
                    string xerr = we.Response.Headers["X-Err"];
                    if ( xerr != null && xerr != "" )
                    {
                        Console.WriteLine("Post2: X-Err: " + xerr);
                        hr = HResult.Parse(xerr);
                    }
                    else
                    {
                        Console.WriteLine("Post2: No X-Err header found.");
                        hr = HResult.XONLINE_E_SERVER_ERROR;
                    }
                }
                else
                {
                    Console.WriteLine("Post2: caught exception: " + e);
                    hr = HResult.XONLINE_E_SERVER_ERROR;
                }
            }

            if ( HResult.Failed(hr) )
            {
                Console.WriteLine("Post2: failed with hr: 0x" + hr.ToString("X"));
                throw new Exception("Post2: failed with hr: 0x" + hr.ToString("X"));
            }
            
            return hr;
        }
    
        public byte[] Hash
        {
            get { return _hash; }
        }

        protected string _name;
        protected byte[] _hash;
    }

    class XRLGetQuota
    {
        public XRLGetQuota(uint domainId, uint titleId, ulong keyVal)
        {
            _domainId = domainId;
            _titleId = titleId;
            _keyVal = keyVal;
        }
    
        public uint Post(string host, int port)
        {
            GetQuotaRequest req = new GetQuotaRequest();
            req._domainId = _domainId;
            req._titleId = _titleId;
            if ( _domainId == StorageDomain.TITLE )
            {
                req._keyType = (uint) IdType.TitleId;
            }
            else
            {
                req._keyType = (uint) IdType.UserId;
            }
            req._keyValue = _keyVal;
        
            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            req.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            byte[] reqBytes = memStream.ToArray();
            byte[] respBytes = null;
            uint hr = HResult.S_OK;
            
            string url = "http://" + host + ":" + port + "/stfd/getquota.ashx";
            hr = XRL.Post((int)XOService.Storage, url, 
                reqBytes, out respBytes);

            if ( HResult.Succeeded(hr) )
            {
                GetQuotaResponse resp   = new GetQuotaResponse();
                memStream               = new MemoryStream(respBytes);
                BinaryReader reader     = new BinaryReader(memStream);
                resp.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, 0, null);
                _maxFileSize = resp._maxFileSize;
                _totalBytesMax = resp._totalBytesMax;
                _totalBytesUsed = resp._totalBytesUsed;
                _totalFilesMax = resp._totalFilesMax;
                _totalFilesUsed = resp._totalFilesUsed;
            }
            return hr;
        }

        public uint _domainId;
        public uint _titleId;
        public ulong _keyVal;
        public ulong _maxFileSize;
        public ulong _totalBytesMax;
        public ulong _totalBytesUsed;
        public uint _totalFilesMax;
        public uint _totalFilesUsed;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_storagedevtests_none_12.4.56.0_none_d9cca37dac7a1136
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=storagedevtests
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.manifest
XP_MANIFEST_PATH=manifests\msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.cat
XP_CATALOG_PATH=manifests\msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.cat
XP_PAYLOAD_PATH=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=storagedevtests,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\console\tst.cs ===
using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Security.Cryptography;
using System.Threading;
using System.Text.RegularExpressions;
using System.Diagnostics;
using xonline.common.protocol;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.tools.console;
using Microsoft.Webstore.WstClient;

// trace area for StfdHandler code
[assembly: XomAreaDefinition(XomAreaName.stfdTrace)]
[assembly: XomAreaDefinition(XomAreaName.wrfTrace)]

namespace xonline.server.storage.test.console 
{
    class StorageUnitest
    {
        public static bool _verifyAccessTokens = true;
        static uint titleId = Constants.TitleId;
        static uint titleVersion = 0;
        static string iisfd = "localhost";
        static int iisport = 80;
        static RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

        static uint WriteRandomFile(string name)
        {
            uint hr = HResult.S_OK;
            byte[] v = new byte[4];
            rng.GetBytes(v);

            uint blobSize = BitConverter.ToUInt32(v, 0) % 262144;

            byte[] blob = new byte[blobSize];
            rng.GetBytes(blob);

            hr = WriteFile(name, blob);
            return hr;
        }

        static uint WriteFile(string name, byte[] blob)
        {
            return WriteFile(name, blob, 1, 1);
        }

        static uint WriteFile(string name, byte[] blob, ulong userPuid, ulong xboxPuid)
        {
            uint hr = HResult.S_OK;
            XRLWriteFile wreq = new XRLWriteFile(titleId, titleVersion, userPuid, xboxPuid, null, name, blob);
            hr = wreq.Post(iisfd, iisport);
            return hr;
        }

        static uint WriteTeamFile(string name, byte[] blob)
        {
            uint hr = HResult.S_OK;
            TeamTicket t = new TeamTicket(1, 0x0baddeed);
            TeamTicket[] tt = new TeamTicket[]{t};
            TeamTickets tickets = new TeamTickets(tt);

            MemoryStream m = new MemoryStream(100);
            BinaryWriter w = new BinaryWriter(m);

            w.Write(t.userID);
            w.Write((short)t.rgqwTeamIDs.Length);
            w.Write((short)TeamTicket.TEAM_TICKET_SIGNATURE_LENGTH);
            foreach(ulong ticket in t.rgqwTeamIDs)
            {
                w.Write(ticket);
            }
            byte[] teamTicket = m.ToArray();

            byte[] key = new byte[16];
            for (int i =0; i < key.Length; i++)
                key[i] = 1;
            HMACSHA1 shaM = new HMACSHA1(key);

            byte[] fullSignature = shaM.ComputeHash(teamTicket, 0, teamTicket.Length);

            byte[] signature = new byte[TeamTicket.TEAM_TICKET_SIGNATURE_LENGTH];
            Array.Copy(fullSignature,signature,TeamTicket.TEAM_TICKET_SIGNATURE_LENGTH);

            t.cbSignature = (short) signature.Length;
            t.rgbSignature = signature;

            XRLWriteFile wreq = new XRLWriteFile(titleId, titleVersion, 1, 1, tickets, name, blob);
            hr = wreq.Post(iisfd, iisport);
            return hr;
        }

        static uint ReadFile(string name, out byte[] blob)
        {
            return ReadFile(name, DateTime.MinValue, out blob);
        }

        static uint ReadFile(string name, DateTime ifModifiedSince, out byte[] blob)
        {
            uint hr = HResult.S_OK;
            blob = null;

            XRLReadFile  rreq = new XRLReadFile(titleId, titleVersion, 1, 1, null, name, ifModifiedSince);
            hr = rreq.Post(iisfd, iisport);
            if (HResult.Succeeded(hr))
            {
                blob = rreq.Blob;
            }

            return hr;
        }

        static uint ReadTeamFile(string name, out byte[] blob)
        {
            uint hr = HResult.S_OK;
            blob = null;
            TeamTicket t = new TeamTicket(1, 0x0baddeed);
            TeamTicket[] tt = new TeamTicket[]{t};
            TeamTickets tickets = new TeamTickets(tt);


            XRLReadFile  rreq = new XRLReadFile(titleId, titleVersion, 1, 1, tickets, name, DateTime.MinValue);
            hr = rreq.Post(iisfd, iisport);
            if (HResult.Succeeded(hr))
            {
                blob = rreq.Blob;
            }

            return hr;
        }

        static uint ReadFileHash(string name, out byte[] hash)
        {
            uint hr = HResult.S_OK;
            hash = null;

            XRLReadFileHash  rreq = new XRLReadFileHash(name);
            hr = rreq.Post(iisfd, iisport);
            if (HResult.Succeeded(hr))
            {
                hash = rreq.Hash;
            }

            return hr;
        }

    static uint GetQuota(uint domainId, uint titleId, ulong keyVal, out ulong maxFileSize, out ulong bytesMax, out ulong bytesUsed, out uint filesMax, out uint filesUsed)
        {
            uint hr = HResult.S_OK;

            maxFileSize = bytesMax = bytesUsed = filesMax = filesUsed = 0;
            
            XRLGetQuota  rreq = new XRLGetQuota(domainId, titleId, keyVal);
            hr = rreq.Post(iisfd, iisport);
            if (HResult.Succeeded(hr))
            {
                maxFileSize = rreq._maxFileSize;
                bytesMax = rreq._totalBytesMax;
                bytesUsed = rreq._totalBytesUsed;
                filesMax = rreq._totalFilesMax;
                filesUsed = rreq._totalFilesUsed;
            }

            return hr;
        }
    
        static uint RemoveFile(string name)
        {
            uint hr = HResult.S_OK;
            XRLRemoveFile rmreq = new XRLRemoveFile(titleId, titleVersion, 1, 1, null, name);
            hr = rmreq.Post(iisfd, iisport);
            return hr;
        }

        static uint RemoveTeamFile(string name)
        {
            uint hr = HResult.S_OK;
            TeamTicket t = new TeamTicket(1, 0x0baddeed);
            TeamTicket[] tt = new TeamTicket[]{t};
            TeamTickets tickets = new TeamTickets(tt);

            MemoryStream m = new MemoryStream(100);
            BinaryWriter w = new BinaryWriter(m);

            w.Write(t.userID);
            w.Write((short)t.rgqwTeamIDs.Length);
            w.Write((short)TeamTicket.TEAM_TICKET_SIGNATURE_LENGTH);
            foreach(ulong ticket in t.rgqwTeamIDs)
            {
                w.Write(ticket);
            }
            byte[] teamTicket = m.ToArray();

            byte[] key = new byte[16];
            for (int i =0; i < key.Length; i++)
                key[i] = 1;
            HMACSHA1 shaM = new HMACSHA1(key);

            byte[] fullSignature = shaM.ComputeHash(teamTicket, 0, teamTicket.Length);

            byte[] signature = new byte[TeamTicket.TEAM_TICKET_SIGNATURE_LENGTH];
            Array.Copy(fullSignature,signature,TeamTicket.TEAM_TICKET_SIGNATURE_LENGTH);

            t.cbSignature = (short) signature.Length;
            t.rgbSignature = signature;

            XRLRemoveFile rmreq = new XRLRemoveFile(titleId, titleVersion, 1, 1, tickets, name);
            hr = rmreq.Post(iisfd, iisport);
            return hr;
        }

        static uint EnumerateFiles(string path)
        {
            uint hr = HResult.S_OK;
            XRLEnumerateFiles enumreq = new XRLEnumerateFiles(titleId, titleVersion, 1, 1, path);
            hr = enumreq.Post(iisfd, iisport);
            return hr;
        }

        static uint EnumerateFiles(string path, uint resultsStart, uint resultsEnd)
        {
            uint hr = HResult.S_OK;
            XRLEnumerateFiles enumreq = new XRLEnumerateFiles(titleId, titleVersion, 1, 1, path, resultsStart, resultsEnd);
            hr = enumreq.Post(iisfd, iisport);
            return hr;
        }

        static uint ResolveName(string name, out string rule, out string primary, out string alternate, out string exp)
        {
            uint hr = HResult.S_OK;
            XRLResolveName req = new XRLResolveName(name);
            hr = req.Post(iisfd, iisport);

            if (HResult.Failed(hr))
            {
                rule = null;
                primary = null;
                alternate = null;
                exp = null;
            }
            else
            {
                rule = req.Rule;
                primary = req.Primary;
                alternate = req.Alternate;
                exp = req.Expiration;
            }

            return hr;
        }

        class AccessTokenTestThread
        {
            public static int sigCount = 0;
            public static void DoWork()
            {
                do
                {
                    WriteFileToken at = new WriteFileToken();

                    at._pathName = "//Stats/u:9900112233445566/abc123/" + Guid.NewGuid();
                    at._serviceId = (uint) XOService.Stats;
                    at._maxFileSize = 9999999;
                    try
                    {
                        at.SignOnBehalf(XOService.Stats);
                        at.VerifySignature(XOService.Stats);
                        Interlocked.Increment(ref sigCount);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine("DoWork: caught exception: " + e);
                    }
                    if ((sigCount % 100) == 0)
                    {
                        Console.WriteLine("AccessTokenTestThread: " + sigCount);
                    }
                } while (true);
            }
        }


        static void AccessTokenTest()
        {
            ThreadStart myThreadStart = new ThreadStart(AccessTokenTestThread.DoWork);
            for (int i=0; i<100; i++)
            {
                Thread testThread = new Thread(myThreadStart);
                testThread.Name = "TestThread_" + i.ToString();
                testThread.Start();
            }
            Thread.Sleep(100000000);
        }

        static void WriteReadPerfTest()
        {
            uint hr = HResult.S_OK;
            int blobLen = 102400;
            string name = "//Stats/u:90aabbccddeeff00/deadbeef/" + Guid.NewGuid();
            byte[] inBlob = new byte[blobLen];
            StorageUnitest.rng.GetBytes(inBlob);

            Console.WriteLine("WriteReadPerfTest: starting...");
            hr = WriteFile(name, inBlob);
            Console.WriteLine("WriteReadPerfTest: reading...");
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            for (int i=0; i<100; i++)
            {
                byte[] outBlob;
                hr = ReadFile(name, out outBlob);
                if (HResult.Succeeded(hr))
                {
                    if (outBlob[i] != inBlob[i])
                    {
                        throw new Exception("WriteReadPerfTest: file: " + name + ", download differs from upload at byte: " + i + " of " + outBlob.Length);
                    }
                }
            }

            Console.WriteLine("WriteReadPerfTest: read time: " + timeElapsed.MillisecondsElapsed);
        }

        static void WritePerfTest()
        {
            uint hr = HResult.S_OK;
            int blobLen = 102400;
            int uploaded = 0;

            for (;;)
            {
                string name = "//Stats/u:90aabbccddeeff00/deadbeef/" + Guid.NewGuid();
                byte[] inBlob = new byte[blobLen];
                byte[] outBlob = null;
                StorageUnitest.rng.GetBytes(inBlob);

                hr = WriteFile(name, inBlob);
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                hr = ReadFile(name, out outBlob);
                if (HResult.Succeeded(hr))
                {
                    for (int i=0; i<outBlob.Length; i++)
                    {
                        if (outBlob[i] != inBlob[i])
                        {
                            throw new Exception("WritePerfTest: file: " + name + ", download differs from upload at byte: " + i + " of " + outBlob.Length);
                        }
                    }
                    uploaded++;
                }

                if (uploaded % 10 == 0)
                {
                    Console.WriteLine("WritePerfTest: read time: " + timeElapsed.MillisecondsElapsed);
                    Console.WriteLine("WritePerfTest: uploaded: " + uploaded + " files.");
                }
            }
        }

        class ReadWriteThread
        {
            public static void DoRealWork()
            {
                int blobLen = 102400;
                byte[] inBlob = new byte[blobLen];
                byte[] outBlob = null;
                string name = "//Stats/u:90aabbccddeeff00/deadbeef/" + Guid.NewGuid();
                uint hr = HResult.S_OK;
                StorageUnitest.rng.GetBytes(inBlob);
                hr = WriteFile(name, inBlob);

                hr = ReadFile(name, out outBlob);
                if (HResult.Succeeded(hr))
                {
                    if (outBlob == null || inBlob.Length != outBlob.Length)
                    {
                        throw new Exception("ReadWriteThread: error reading: " + name );
                    }
                    for (int i=0; i<outBlob.Length; i++)
                    {
                        if (outBlob[i] != inBlob[i])
                        {
                            throw new Exception("ReadWriteThread: file: " + name + ", download differs from upload at byte: " + i + " of " + outBlob.Length);
                        }
                    }
                }
            }

            public static void DoWork()
            {
                while (true)
                {
                    DoRealWork();
                    Thread.Sleep(1000);
                }
            }
        }

        static void ReadWriteThreadTest()
        {
            ThreadStart myThreadStart = new ThreadStart(ReadWriteThread.DoWork);
            for (int i=0; i < 10; i++)
            {
                byte[] b = new byte[3];
                StorageUnitest.rng.GetNonZeroBytes(b);
                Thread.Sleep(b[0] + b[1] + b[2]);

                Thread newThread = new Thread(myThreadStart);
                newThread.Name = "ReadWriteThread_" + i;
                newThread.Start();
            }
            Thread.Sleep(100000000);
        }

        class AccessTokenThread
        {
            public static void DoRealWork()
            {
                byte[] r = new byte[2];
                StorageUnitest.rng.GetNonZeroBytes(r);

                int sigCount = r[0] + r[1];
                WriteFileToken t = new WriteFileToken();
                t._operation = (ushort) Operation.FileWrite;
                t._version = AccessToken.accessTokenVersion;
                t._serviceId = (uint) XOService.Stats;
                t._userPuid = 123;
                t._xboxPuid = 456;
                t._pathName = "//Stats/abc123/" + Guid.NewGuid().ToString();
                t._maxFileSize = Int32.MaxValue;
                t._fileExpirationDate = 0;
                t._tokenExpirationDate = 0;
                for (;;)
                {
                    try
                    {
                        t.SignOnBehalf(XOService.Stats);
                        break;
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(Thread.CurrentThread.Name + ": DoRealWork: caught exception during SignOnBehalf: " + e);
                    }
                }
                for (int i=0; i < sigCount; i++)
                {
                    try
                    {
                        t.VerifySignature(XOService.Stats);
                    }
                    catch (Exception e)
                    {
                        Console.WriteLine(Thread.CurrentThread.Name + ": DoRealWork: caught exception during VerifySignature: " + e);
                    }
                }
                Console.WriteLine(Thread.CurrentThread.Name + ": DoRealWork: Verified " + sigCount + " signatures.");
            }

            public static void DoWork()
            {
                for (;;)
                {
                    DoRealWork();
                    Thread.Sleep(1000);
                }
            }
        }

        static void AccessTokenThreadTest()
        {
            Console.WriteLine("AccessTokenThreadTest: starting...");
            ThreadStart myThreadStart = new ThreadStart(AccessTokenThread.DoWork);
            int maxThreads = 100;
            for (int i=0; i < maxThreads; i++)
            {
                Thread newThread = new Thread(myThreadStart);
                newThread.Name = "AccessTokenThread_" + i;
                newThread.Start();
            }

            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
            Thread.Sleep(100000000);
        }

        static void Help()
        {
            Console.WriteLine("usage:");
            Console.WriteLine("    StfdTest <options>");
            Console.WriteLine("");
            Console.WriteLine("    /host:<host>          Specifies the host.  Default is localhost.");
            Console.WriteLine("    /port:<port>          Specifies the port.  Default is 80.");
            Console.WriteLine("    /name:<name>          Name of the file to write.  Defaults to a new guid.");
            Console.WriteLine("    /size:<size>          Size of the file in bytes.  Default is 131072.");
            Console.WriteLine("    /titleid:<tid>        Specifies the title id.  Default is 0xdeadbeef.");
            Console.WriteLine("    /titleversion:<ver>   Specifies the title version.  Default is 1.");
            Console.WriteLine("    /remove               Removes the created file after reading.");
            Console.WriteLine("    /resolvename:<domain> Runs a test of the name resolver ONLY for a given domain.");
            Console.WriteLine("");
            Console.WriteLine("Examples:");
            Console.WriteLine("");
            Console.WriteLine("StfdTest /host:XonDeXXXXIIS002 /port:8092");
            Console.WriteLine("");
            Console.WriteLine("StfdTest /host:GARYT2 /size:12345");
            Console.WriteLine("");
            Console.WriteLine("StfdTest /resolvename:stats /host:XonDeXXXXIIS002 /port:8092");
            Console.WriteLine("");
        }

        static bool Verify(uint hr)
        {
            if (HResult.Failed(hr))
            {
                Console.WriteLine("Error: 0x" + hr.ToString("X"));
                return false;
            }

            return true;
        }

        static bool Verify(uint hr, string s)
        {
            Console.Write(s + ": ");
            if (HResult.Failed(hr))
            {
                Console.WriteLine("Error: 0x" + hr.ToString("X"));
                return false;
            }
            else
                Console.WriteLine("succeeded");

            return true;
        }


        static bool Verify(uint actual, uint expected)
        {
            if (expected != actual)
            {
                Console.WriteLine("Error: expected: 0x" + expected.ToString("X") + ", actual: 0x" + actual.ToString("X"));
                return false;
            }

            return true;
        }

        static void PathInfoTest()
        {
            string path="//Stats/u:99b6db6db6d64/ffed19fb/4e2f7c06-0fb4-489f-bf59-917b66a6d4d2";
            Console.WriteLine("path: " + path);
            Console.WriteLine("path.Length: " + path.Length);
            //string path="//Stats/u:99b6db6db6d60/ffed19fb/923ffa1a-d322-46c8-a56d-746ebd32bf63";
            PathInfo pi = PathInfo.Parse(path);
            pi.Validate();
            Console.WriteLine("PathInfo.pathName: pi._pathName: " + pi._pathName);
            Console.WriteLine("PathInfo.keyValue: pi._keyValue:" + pi._keyValue);
        }

        static void IfModifiedSinceTest()
        {
            int filesize = 1;
            ulong teamId = 0x0baddeed;
            ulong userId = 0;
            uint hr = 0;

            byte[] blob = new byte[filesize];
            rng.GetBytes(blob);

            byte[] newBlob = null;

            string fileName = "//tteam." + titleId.ToString("x") + "/u:" + teamId.ToString("x") + "/" +
                titleId.ToString("x") + "/" + userId.ToString("x") + "/" + Guid.NewGuid().ToString();

            Verify(WriteTeamFile(fileName, blob), "writeteamfile A");
            Verify(ReadFile(fileName, out newBlob), "vanilla readfile A");

            DateTime oneMinuteAgoUTC = DateTime.UtcNow.AddMinutes(-1);
            Console.WriteLine("cached readfile A with 1 minute ago modifiedSince: " + oneMinuteAgoUTC.ToLocalTime().ToString("G"));
            hr = ReadFile(fileName, oneMinuteAgoUTC, out newBlob);
            if (hr == HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED)
                Console.WriteLine("file A not modified: FAILURE CASE");
            else if (hr == HResult.S_OK)
                Console.WriteLine("downloaded newly modified file A");

            DateTime oneMinuteFromNowUTC = DateTime.UtcNow.AddMinutes(1);
            Console.WriteLine("cached readfile A with 1 minute from now modifiedSince: " + oneMinuteFromNowUTC.ToLocalTime().ToString("G"));
            hr = ReadFile(fileName, oneMinuteFromNowUTC, out newBlob);
            if (hr == HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED)
                Console.WriteLine("file A not modified");
            else if (hr == HResult.S_OK)
                Console.WriteLine("downloaded newly modified file A: FAILURE CASE");
            newBlob = null;

            Verify(RemoveTeamFile(fileName), "remove file A");

            fileName = "//tteam." + titleId.ToString("x") + "/u:" + teamId.ToString("x") + "/" +
                titleId.ToString("x") + "/" + userId.ToString("x") + "/" + Guid.NewGuid().ToString();

            Verify(WriteTeamFile(fileName, blob), "writeteamfile B");
            oneMinuteAgoUTC = DateTime.UtcNow.AddMinutes(-1);
            Console.WriteLine("non-cached readfile B with 1 minute ago modifiedSince: " + oneMinuteAgoUTC.ToLocalTime().ToString("G"));
            hr = ReadFile(fileName, oneMinuteAgoUTC, out newBlob);
            if (hr == HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED)
                Console.WriteLine("file B not modified: FAILURE CASE");
            else if (hr == HResult.S_OK)
                Console.WriteLine("downloaded newly modified file B");
            Verify(RemoveTeamFile(fileName), "remove file B");

            fileName = "//tteam." + titleId.ToString("x") + "/u:" + teamId.ToString("x") + "/" +
                titleId.ToString("x") + "/" + userId.ToString("x") + "/" + Guid.NewGuid().ToString();

            Verify(WriteTeamFile(fileName, blob), "writeteamfile C");
            oneMinuteFromNowUTC = DateTime.UtcNow.AddMinutes(1);
            Console.WriteLine("non-cached readfile C with 1 minute from now modifiedSince: " + oneMinuteFromNowUTC.ToLocalTime().ToString("G"));
            hr = ReadFile(fileName, oneMinuteFromNowUTC, out newBlob);
            if (hr == HResult.XONLINE_S_STORAGE_FILE_NOT_MODIFIED)
                Console.WriteLine("file C not modified");
            else if (hr == HResult.S_OK)
                Console.WriteLine("downloaded newly modified file C: FAILURE CASE");
            Verify(RemoveTeamFile(fileName), "remove file C");
        }

        static int Main(string[] args)
        {
            int readcount = 5;
            string fileName = null;
            int filesize = 65535;
            ulong userId = 1;
            ulong teamId = 0x0baddeed;
            bool removeFile = false;
            string nametoresolve = "";
            string hashName = "";
            ulong maxFileSize = 0;
            ulong bytesMax = 0;
            ulong bytesUsed = 0;
            uint filesMax = 0;
            uint filesUsed = 0;
            uint hr = HResult.S_OK;

            //AccessToken.SignatureIpAddress = "192.168.86.135";
            //AccessToken.SignaturePort = 9090;
            //AccessToken.SignatureTimeout = 20000;

            string[] tags = {
                "?",
                "host",
                "user",
                "team",
                "port",
                "titleid",
                "titleversion",
                "name",
                "size",
                "readcount",
                "remove",
                "resolvename",
                "hash"
            };

            NamedArgParser ap = new NamedArgParser(tags);

            if (args.Length > 0 && !ap.Parse(args))
            {
                Help();
                return 1;
            }

            if (ap["?"] != null)
            {
                Help();
                return 0;
            }

            if (ap["titleid"] != null && ap["titleid"] != "")
            {
                titleId = UInt32.Parse(ap["titleid"]);
            }

            if (ap["titleversion"] != null && ap["titleversion"] != "")
            {
                titleVersion = UInt32.Parse(ap["titleversion"]);
            }

            if (ap["host"] != null && ap["host"] != "")
            {
                iisfd = ap["host"];
            }

            if (ap["port"] != null && ap["port"] != "")
            {
                iisport = Int32.Parse(ap["port"]);
            }

            if (ap["readcount"] != null && ap["readcount"] != "")
            {
                readcount = Int32.Parse(ap["readcount"]);
            }

            if (ap["name"] != null && ap["name"] != "")
            {
                fileName = ap["name"];
            }

            if (ap["size"] != null && ap["size"] != "")
            {
                filesize = Int32.Parse(ap["size"]);
            }

            if (ap["remove"] != null)
            {
                removeFile = true;
            }

            if (ap["user"] != null)
            {
                userId = Convert.ToUInt64(ap["user"], 16);
            }

            if (ap["team"] != null)
            {
                teamId = Convert.ToUInt64(ap["team"], 16);
            }

            if (ap["hash"] != null)
            {
                hashName = ap["hash"];
            }

            if (ap["resolvename"] != null && ap["resolvename"] != String.Empty)
            {
                nametoresolve = ap["resolvename"];
            }

            if (nametoresolve != String.Empty)
            {
                string rule, pri, alt, exp;
                if (Verify(ResolveName(nametoresolve, out rule, out pri, out alt, out exp)))
                {
                    Console.WriteLine("Resolved '" + nametoresolve + "' as [" + rule + ".*] at " + pri + " (" + alt + ") until " + exp);
                }

                return 0;                
            }

#if false
            WriteFileCmdTest();
            return 0;
#endif

            if (hashName != null && hashName != "")
            {
                byte[] hash;
                hr = ReadFileHash(hashName, out hash);
                if (HResult.Succeeded(hr))
                {
                    Console.WriteLine("ReadFileHash: hash of {0} is: {1}", hashName, ByteConvert.ToString(hash));
                }
                else
                {
                    Console.WriteLine("ReadFileHash: failed; hr: 0x" + hr.ToString("X"));
                }
                return 0;
            }

            string s = Config.GetSetting("Storage", "VerifyAccessTokens");
            if (s != null)
            {
                s = s.ToUpper();
                if (s == "FALSE" || s == "NO" || s == "OFF" || s == "0")
                {
                    _verifyAccessTokens = false;
                }
            }

            byte[] blob = new byte[filesize];
            rng.GetBytes(blob);

            SGSession session = new SGSession(1, new ulong[4]{userId,0,0,0});
            XRL.SetSGSession(session);

            Console.WriteLine("SGAuth: starting...");
            SGAuth.Start();
            Console.WriteLine("SGAuth: started.");

            if (fileName == null || fileName == "")
            {
                fileName = "//stats/u:" + userId.ToString("x") + "/" + titleId.ToString("x") + "/" + Guid.NewGuid().ToString();
            }

            if (true)
            {
                byte[] v = new byte[4];
                byte[] newBlob = null;

                rng.GetBytes(v);
                uint val = BitConverter.ToUInt32(v, 0);

#if false
                fileName = "//stats/u:" + userId.ToString("x") + "/" + titleId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteFile(fileName, blob));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                Console.WriteLine("ReadFile: starting download: " + fileName + "...");
                Verify(ReadFile(fileName, out newBlob));
                Console.WriteLine("ReadFile: completed download: " + fileName);
                newBlob = null;
#endif

#if false
                fileName = "//title." + titleId.ToString("x") + "/t:" + titleId.ToString("x") + "/roster/" + val.ToString("x") + ".dat";
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                maxFileSize = bytesMax = bytesUsed = filesMax = filesUsed = 0;
                GetQuota(StorageDomain.TITLE, titleId, titleId, out maxFileSize, out bytesMax, out bytesUsed, out filesMax, out filesUsed);
                Console.WriteLine("Title Quota: maxFileSize=" + maxFileSize + ", bytesMax=" + bytesMax + ", bytesUsed=" + bytesUsed + ", filesMax=" + filesMax + ", filesUsed=" + filesUsed);
                
                Verify(WriteFile(fileName, blob));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                Console.WriteLine("ReadFile: starting download: " + fileName + "...");
                Verify(ReadFile(fileName, out newBlob));
                Console.WriteLine("ReadFile: completed download: " + fileName);
                newBlob = null;
                
                maxFileSize = bytesMax = bytesUsed = filesMax = filesUsed = 0;
                GetQuota(StorageDomain.TITLE, titleId, titleId, out maxFileSize, out bytesMax, out bytesUsed, out filesMax, out filesUsed);
                Console.WriteLine("Title Quota: maxFileSize=" + maxFileSize + ", bytesMax=" + bytesMax + ", bytesUsed=" + bytesUsed + ", filesMax=" + filesMax + ", filesUsed=" + filesUsed);
                
#endif

#if false
                ulong puid = 0x6; // fake SG contains user puid 0x1
                fileName = "//tuser." + "103" + "/u:" + puid.ToString("x") + "/" + titleId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteFile(fileName, blob, puid, puid));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                Console.WriteLine("ReadFile: starting download: " + fileName + "...");
                Verify(ReadFile(fileName, out newBlob));
                Console.WriteLine("ReadFile: completed download: " + fileName);
                newBlob = null;
                
                fileName = "//tuser." + "103" + "/u:" + puid.ToString("x") + "/" + titleId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteFile(fileName, blob, puid, puid));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                fileName = "//tuser." + "103" + "/u:" + puid.ToString("x") + "/" + titleId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteFile(fileName, blob, puid, puid));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                fileName = "//tuser." + "103" + "/u:" + puid.ToString("x") + "/" + titleId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteFile(fileName, blob, puid, puid));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

#endif

#if false

                fileName = "//msg" + "/u:" + userId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteFile(fileName, blob));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                Console.WriteLine("ReadFile: starting download: " + fileName + "...");
                Verify(ReadFile(fileName, out newBlob));
                Console.WriteLine("ReadFile: completed download: " + fileName);
                newBlob = null;
#endif
                IfModifiedSinceTest();

#if false
                maxFileSize = bytesMax = bytesUsed = filesMax = filesUsed = 0;
                GetQuota(StorageDomain.TTEAM, titleId, teamId, out maxFileSize, out bytesMax, out bytesUsed, out filesMax, out filesUsed);
                Console.WriteLine("Team Quota: maxFileSize=" + maxFileSize + ", bytesMax=" + bytesMax + ", bytesUsed=" + bytesUsed + ", filesMax=" + filesMax + ", filesUsed=" + filesUsed);
                
                fileName = "//tteam." + titleId.ToString("x") + "/u:" + teamId.ToString("x") + "/" + titleId.ToString("x") + "/" + userId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
                Verify(WriteTeamFile(fileName, blob));
                Console.WriteLine("WriteFile: completed upload: " + fileName);

                Console.WriteLine("ReadFile: starting download: " + fileName + "...");
                Verify(ReadFile(fileName, out newBlob));
                Console.WriteLine("ReadFile: completed download: " + fileName);
                newBlob = null;

                maxFileSize = bytesMax = bytesUsed = filesMax = filesUsed = 0;
                GetQuota(StorageDomain.TTEAM, titleId, teamId, out maxFileSize, out bytesMax, out bytesUsed, out filesMax, out filesUsed);
                Console.WriteLine("Team Quota: maxFileSize=" + maxFileSize + ", bytesMax=" + bytesMax + ", bytesUsed=" + bytesUsed + ", filesMax=" + filesMax + ", filesUsed=" + filesUsed);

                Console.WriteLine("RemoveFile: removing: " + fileName);
                Verify(RemoveFile(fileName));
                Console.WriteLine("RemoveFile: removed: " + fileName);
                
                GetQuota(StorageDomain.TTEAM, titleId, teamId, out maxFileSize, out bytesMax, out bytesUsed, out filesMax, out filesUsed);
                Console.WriteLine("Team Quota: maxFileSize=" + maxFileSize + ", bytesMax=" + bytesMax + ", bytesUsed=" + bytesUsed + ", filesMax=" + filesMax + ", filesUsed=" + filesUsed);
#endif
                
/*
                // try again using team tickets
                Verify(WriteTeamFile(fileName, blob));
                Console.WriteLine("WriteFile: completed upload: " + fileName);
                
                Console.WriteLine("ReadFile: starting download: " + fileName + "...");
                Verify(ReadTeamFile(fileName, out newBlob));
                Console.WriteLine("ReadFile: completed download: " + fileName);
                newBlob = null;
                
                Console.WriteLine("RemoveFile: removing: " + fileName);
                Verify(RemoveTeamFile(fileName));
                Console.WriteLine("RemoveFile: removed: " + fileName);


#if true
                Console.WriteLine("EnumerateFiles: starting enumeration: " + fileName);
                Verify(EnumerateFiles(fileName));
                Console.WriteLine("EnumerateFiles: completed enumeration: " + fileName);
                Console.WriteLine("");
                
                fileName = "//tteam." + titleId.ToString("x") + "/u:" + teamId.ToString("x") + "/" + titleId.ToString("x") + "/" + userId.ToString("x") + "/" + Guid.NewGuid().ToString();
                Console.WriteLine("EnumerateFiles: starting enumeration: " + fileName);
                Verify(EnumerateFiles(fileName));
                Console.WriteLine("EnumerateFiles: completed enumeration: " + fileName);
                
                fileName = "//tteam." + titleId.ToString("x") + "/u:" + teamId.ToString("x") + "/" + titleId.ToString("x") + "/" + userId.ToString("x") + "/*";
                Console.WriteLine("EnumerateFiles: starting partial enumeration: " + fileName);
                Verify(EnumerateFiles(fileName, 1, 3));
                Console.WriteLine("EnumerateFiles: completed partial enumeration: " + fileName);
#endif                
*/
                goto lDone;
            }

            Console.WriteLine("WriteFile: starting upload: " + fileName + "...");
            Verify(WriteFile(fileName, blob));
            Console.WriteLine("WriteFile: completed upload: " + fileName);

            byte[] blobRead;
            Console.WriteLine("ReadFile: starting download: " + fileName + "...");
            Verify(ReadFile(fileName, out blobRead));
            Console.WriteLine("ReadFile: completed download: " + fileName + "...");

            if (blobRead != null && blobRead.Length > 0)
            {
                for (int i=0; i < blob.Length; i++)
                {
                    if (blob[i] != blobRead[i])
                    {
                        throw new Exception("Blobs don't match");
                    }
                }
                Console.WriteLine("successfully verified: " + fileName);
            }

            // read the file a few more times to tweak the perfcounters
            for (int i=0; i<readcount; i++)
            {
                byte[] b;
                Verify(ReadFile(fileName, out b));
            }

            if (removeFile)
            {
                Verify(RemoveFile(fileName));
                Verify(RemoveFile(fileName), HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);

                try
                {
                    blobRead = null;
                    hr = ReadFile(fileName, out blobRead);
                    if (HResult.Failed(hr))
                    {
                        Console.WriteLine("successfully removed: " + fileName);
                    }
                }
                catch (Exception)
                {
                    Console.WriteLine("successfully removed: " + fileName);
                }
            }

            lDone:          
            SGAuth.Shutdown();

            return 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\obj\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=msil_storagedevtests_none_12.4.56.0_none_d9cca37dac7a1136
ASSEMBLY_IDENTITY_XP_KEY_FORM=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=storagedevtests
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=msil
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.manifest
XP_MANIFEST_PATH=manifests\msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.cat
XP_CATALOG_PATH=manifests\msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a.cat
XP_PAYLOAD_PATH=msil_storagedevtests_no-public-key_12.4.56.0_x-ww_e9fd2f8a
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=storagedevtests,processorArchitecture=msil,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\StorageUnitTests.cs ===
using System;
using System.Net;
using System.Text;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Storage;
using xonline.common.config;
using System.Diagnostics;

using xonline.common.protocol;
using xonline.server.storage.module;
using System.Collections.Specialized;
using System.Collections.Generic;
using System.IO;
using xonline.server.storage.common;

namespace xonline.server.storage.test.StorageUnitTests
{

 [TestGroup]
    class TestStoragePath : TestNode
    {
     

        [TestCase, Description("UnitTest - Test Path ")]
        class TestPath : TestBase
        {
            override protected void Execute()
            {

                string pathName;
                               
                //pathName = "//title.fffe07d1/t:fffe07d1/mediasite.xzp";         
                //pathName = "//title/t:fffe07d1/mediasite.xzp";                  
                                
                pathName = "//avatar/u:12345/body.png";                  


                PathInfo path = PathInfo.Parse(pathName);

                Console.WriteLine("\n\n Succesfully created Storage Path " + pathName);

                //Assert.IsTrue(a != null);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, Description("UnitTest - Test Path Translation ")]
        class TestPathTranslation : TestBase
        {
            override protected void Execute()
            {

                string translatedPath;
                Uri uri;
                string domain = "";
                bool defaultPic;
                string fPath = "";

                uri = new Uri("http://localhost/avatar/gamertag/avatar-body.png");
                translatedPath = StorageModule.ConstructStoragePath(uri.AbsolutePath, false, out domain, out fPath, out defaultPic);
                Console.WriteLine(String.Format("\n\n Original path {0} \n Translated Path = {1}", uri.AbsolutePath, translatedPath));
                if (translatedPath != "//avatar/u:gamertag/avatar-body.png")
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }

                uri = new Uri("http://localhost/global/t.FFFFF/avatar-body.png");
                translatedPath = StorageModule.ConstructStoragePath(uri.AbsolutePath, false, out domain, out fPath, out defaultPic);
                Console.WriteLine(String.Format("\n\n Original path {0} \n Translated Path = {1}", uri.AbsolutePath, translatedPath));
                if (translatedPath != "//global/t:fffff/avatar-body.png")
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }
              

                ResultCode = TEST_RESULTS.PASSED;
            }
        }


        [TestCase, Description("UnitTest - Parsing Path ")]
        class TestPathParsing: TestBase
        {
            override protected void Execute()
            {

                string translatedPath;
                Dictionary<string, string> dict = new Dictionary<string, string>();

                string domain, path, gamertag, keyType, keyVal;

                translatedPath = "//avatar/u.gamertag/avatar-body.png";
                dict = StorageModule.Parse(translatedPath);
                dict.TryGetValue(RegExpKeys.DOMAIN, out domain);
                dict.TryGetValue(RegExpKeys.PATH, out path);
                dict.TryGetValue(RegExpKeys.GAMERTAG, out gamertag);
                dict.TryGetValue(RegExpKeys.KEYTYPE, out keyType);
                dict.TryGetValue(RegExpKeys.KEYVAL, out keyVal);
                Console.WriteLine(String.Format("\n\n Domain={0} , Path={1} , Gamertag={2} , KeyType={3}  , KeyVal={4}", domain, path, gamertag, keyType, keyVal));
                if ( (domain  != "avatar") ||  (keyVal != "gamertag"))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }


                translatedPath = "//global/t.fffff/avatar-body.png";
                dict = StorageModule.Parse(translatedPath);
                dict.TryGetValue(RegExpKeys.DOMAIN, out domain);
                dict.TryGetValue(RegExpKeys.PATH, out path);
                dict.TryGetValue(RegExpKeys.GAMERTAG, out gamertag);
                dict.TryGetValue(RegExpKeys.KEYTYPE, out keyType);
                dict.TryGetValue(RegExpKeys.KEYVAL, out keyVal);
                Console.WriteLine(String.Format("\n\n Domain={0} , Path={1} , Gamertag={2} , KeyType={3}  , KeyVal={4}", domain, path, gamertag, keyType, keyVal));
                if ((domain != "global") || (keyVal != "fffff"))
                {
                    ResultCode = TEST_RESULTS.FAILED;
                    return;
                }



                //Assert.IsTrue(purchaseOrder != null);


                ResultCode = TEST_RESULTS.PASSED;
            }
        }



        [TestCase, Description("UnitTest - Test EnumeratedFileInfo serial/deserial")]
        public class PEnumeratedReadFileInfo : TestBase
        {
            override protected void Execute()
            {
                ASCIIEncoding encoding = new ASCIIEncoding();

                string path = "TestValue";

                EnumeratedReadFileInfo fileInfo = new EnumeratedReadFileInfo();
                EnumeratedReadFileInfo fileInfo2 = new EnumeratedReadFileInfo();


                // FileInfo
                fileInfo = new EnumeratedReadFileInfo( path, DateTime.Now);
                Console.WriteLine("Before = " + fileInfo.ToString());

                //In
                byte[] inByte = encoding.GetBytes(fileInfo._pathName);


                //Translate
                byte[] byteArray = new byte[fileInfo.Size()];
                fileInfo.WriteTo(byteArray);
                fileInfo2.ReadFrom(byteArray);
                Console.WriteLine("After = " + fileInfo2.ToString());

                if (fileInfo.ToString() == fileInfo2.ToString() )
                    ResultCode = TEST_RESULTS.PASSED;
                else
                    ResultCode = TEST_RESULTS.FAILED;

            }

        }


        [TestCase, Description("UnitTest - Module / XBanc integration")]
        public class PStorageModuleXBancIntegration : TestBase
        {
            override protected void Execute()
            {
                string path = "/avatar/u:12345/Avatar-body.png";

                EnumeratedReadFileInfo fileInfo2;
                EnumeratedReadFileInfo fileInfo = new EnumeratedReadFileInfo( path, DateTime.Now );

                StorageUtils.AddFileInfoToCache(path, fileInfo, true, "StorageTest");
                StorageUtils.IsFileInCache(path, out fileInfo2, true, "StorageTest");

                Console.WriteLine(fileInfo.ToString());
                Console.WriteLine(fileInfo2.ToString());

                if (fileInfo.ToString() == fileInfo2.ToString())
                    ResultCode = TEST_RESULTS.PASSED;
                else
                    ResultCode = TEST_RESULTS.FAILED;


            }

        }

    }



}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("Microsoft(R) Xbox(TM)")]
[assembly:System.Reflection.AssemblyCopyright("Copyright (c) Microsoft Corporation. All rights reserved.")]
[assembly:System.Reflection.AssemblyCompany("Microsoft Corporation")]
[assembly:System.Reflection.AssemblyFileVersion("12.4.56.0")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\stfdvt\storagedvt.cs ===
using System;
using System.IO;
using System.Text;
using System.Threading;
using System.Security.Cryptography;

using ServerTestFramework;
using LiveService = ServerTestFramework.LiveService;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService.FakeSG;

using xonline.common.diagnostics;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.stfutil;
using xonline.common.config;

namespace xonline.server.storage.test.dvt
{
    [TestGroup, DVT]
    public class StorageDevTest : TestNode
    {
        public const uint TITLE_ID = 0x00004d2;

         // SHA1 object for computing blob hashes
        protected static SHA1 _sha1 = new SHA1CryptoServiceProvider();

        public uint WriteFile(bool fromConsole, ulong userId, ulong xboxId, string path, byte[] file)
        {
            uint hr = HResult.S_OK;

            WriteFileToken t = new WriteFileToken();
            t._operation = (ushort) Operation.FileWrite;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._fileExpirationDate = (new DateTime(2333, 11, 15)).ToLocalTime().ToFileTime();
            t._maxFileSize = Int32.MaxValue;

            // only stats uses signed access tokens
            if ( path.StartsWith("//stats") )
            {
                XSigAuthData authData = new XSigAuthData();
                authData._titleID = TITLE_ID;
                authData._titleVersion = 1;
                authData._userID1 = userId;
                authData._userID2 = 0;
                authData._userID3 = 0;
                authData._userID4 = 0;
                authData._XboxID = xboxId;
                t.SignOnBehalf(XOService.Storage, authData);

                t.VerifySignature(XOService.Storage);
                t.VerifySignature();
                t._signatureSize = (ushort) t._signature.Length;
            }

            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );

            //t._signature = new byte[ProtocolConstants.sizeSignature];
            //t._signature[4] = 7;
            //t._signature[82] = 42;
            //t._signature[83] = 42;
            //t._signature[84] = 42;
            //t._signature[85] = 42;

            ReqHdrWriteFile msg     = new ReqHdrWriteFile();
            msg._titleId            = TITLE_ID;
            msg._titleVersion       = 1;
            msg._userCountryId      = 103;

            msg._compressionType    = 0;
            msg._contentType        = 0;
            msg._blobHash           = _sha1.ComputeHash(file);
            msg._blobSignature      = new byte[ProtocolConstants.sizeSignature];
            msg._blobSizeUncompressed = (uint) file.Length;
            msg._blobSize           = (uint) file.Length;
            msg._attributes         = new byte[] {42, 3, 5, 7, 11, 13, 17, 19};
            //msg._attributes         = new byte[999];
            msg._accessToken        = t;
            //msg._teamTickets        = _teamTickets;
            msg._teamTickets        = null;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);
            writer.Write(file);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;

            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;
                // override default version of 1. this is a mismatch, but the new 
                // sginfo_verifyTestTitleVersion setting will allow 0xFFFFFFFF through in 
                // development environments.
                slot.titleVersion = 0xFFFFFFFF;

                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);
            }
            else
            {
                // this usually comes from arbitration, send it via the internal port
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;

                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;

                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();

                hr = req.Send();

            }



            return hr;
        }

        uint ReadFile(bool fromConsole, ulong userId, ulong xboxId, string path, out byte[] file)
        {
            file = null;

            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileRead;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = (uint) XOService.Storage;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._signature = null;

            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );

            ReqReadFile msg          = new ReqReadFile();
            msg._titleId             = TITLE_ID;
            msg._titleVersion        = 1;
            msg._userCountryId       = 103;
            msg._rangeStart          = 0;
            msg._rangeEnd            = 0;
            msg._ifModifiedSinceDate = 0;
            msg._accessToken         = t;
            //msg._teamTickets         = _teamTickets;
            msg._teamTickets         = null;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            uint hr = HResult.S_OK;


            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;

                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);

                if ( HResult.Succeeded(hr) )
                {
                    RepHdrReadFile rep      = new RepHdrReadFile();
                    memStream               = new MemoryStream(respbuf);
                    BinaryReader reader     = new BinaryReader(memStream);
                    rep.ReadFrom(reader);

                    file = reader.ReadBytes((int)rep._blobSize);
                }
            }
            else
            {
                // this usually comes from arbitration, send it via the internal port
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;

                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;

                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();

                hr = req.Send();

                if (HResult.Succeeded(hr))
                {
                    RepHdrReadFile rep      = new RepHdrReadFile();
                    memStream               = new MemoryStream(req.ResponseData);
                    BinaryReader reader     = new BinaryReader(memStream);
                    rep.ReadFrom(reader);

                    file = reader.ReadBytes((int)rep._blobSize);
                }

            }

            return hr;

        }

        uint RemoveFile(bool fromConsole, ulong userId, ulong xboxId, string path)
        {
            RemoveFileToken t  = new RemoveFileToken();
            t._operation = (ushort) Operation.FileRemove;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = userId;
            t._xboxPuid = xboxId;
            t._pathName = path;

            t._tokenExpirationDate = 0;

/*
            if ( path.StartsWith("//stats") )
            {
                if (StorageUnitest._verifyAccessTokens)
                {
                    XSigAuthData authData = new XSigAuthData();
                    authData._titleID = TITLE_ID;
                    authData._titleVersion = 1;
                    authData._userID1 = userId;
                    authData._userID2 = 0;
                    authData._userID3 = 0;
                    authData._userID4 = 0;
                    authData._XboxID = xboxId;
                    t.SignOnBehalf((XOService)Int32.MinValue, authData);

                    t._signatureSize = ProtocolConstants.sizeSignature;
                    //t._signature = new byte[ProtocolConstants.sizeSignature];
                }
            }
*/
            //t._flags    = (uint) ( _teamTickets == null ? 0 : (uint) FlagType.TeamTicket );

            ReqRemoveFile msg       = new ReqRemoveFile();
            msg._titleId            = TITLE_ID;
            msg._titleVersion       = 1;
            msg._accessToken        = t;
            //msg._teamTickets        = _teamTickets;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            uint hr = HResult.S_OK;

            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;

                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);

            }
            else
            {
                // this usually comes from arbitration, send it via the internal port
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;

                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;

                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();

                hr = req.Send();

            }

            return hr;
        }

        uint EnumerateFiles(bool fromConsole, ulong xboxId, ulong userId, string path, uint start, uint end, out RepEnumerateFiles[] files)
        {
            files = null;

            ReadFileToken t  = new ReadFileToken();
            t._operation = (ushort) Operation.FileEnumerate;
            t._version = AccessToken.accessTokenVersion;
            t._serviceId = 0;
            t._userPuid = userId;
            t._xboxPuid = xboxId;

            t._pathName = path;

            t._tokenExpirationDate = 0;
            t._signatureSize = 0;

            ReqEnumerateFiles msg    = new ReqEnumerateFiles();
            msg._titleId             = TITLE_ID;
            msg._titleVersion        = 1;
            msg._resultsStart        = start;
            msg._resultsEnd          = end;
            msg._ifModifiedSinceDate = 0;
            msg._accessToken         = t;
            msg._userCountryId       = 103;

            MemoryStream memStream   = new MemoryStream();
            BinaryWriter writer      = new BinaryWriter(memStream);
            msg.WriteTo(writer);

            byte[] reqbuf = memStream.ToArray();
            byte[] respbuf = null;
            uint hr = HResult.S_OK;

            if (fromConsole)
            {
                CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
                slot.titleId = TITLE_ID;
                slot.userPuid0 = userId;
                slot.userFlag0 = 0x00006700;
                slot.machinePuid = xboxId;

                hr = StfXrlUtil.PostXrlRequest(ref slot, XOService.Storage, false, msg.GetXRL(), reqbuf, out respbuf);

                if ( HResult.Succeeded(hr) )
                {
                    memStream = new MemoryStream(respbuf);
                    BinaryReader reader = new BinaryReader(memStream);

                    uint totalFiles = reader.ReadUInt32();
                    uint numFiles = reader.ReadUInt32();
                    files = new RepEnumerateFiles[numFiles];


                    Global.RO.Info("XRLEnumerateFiles: totalFiles: " + totalFiles);
                    Global.RO.Info("XRLEnumerateFiles: numFiles: " + numFiles);

                    for (int i=0; i<numFiles; i++)
                    {
                        files[i] = new RepEnumerateFiles();
                        files[i].ReadFrom(reader);
                        Global.RO.Info("XRLEnumerateFiles: file " + i + ": " + files[i].ToString());
                        Global.RO.Info("");
                    }

                }

            }
            else
            {
                XrlRequest req = new XrlRequest();
                req.TargetVirtualInterface= VirtualInterface.stfd_storage_int;
                req.PostData = reqbuf;

                HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, xboxId, userId, TITLE_ID, (uint)XOService.Storage, 0);
                authdata.OverrideXUsers[0].dwUserFlags = 0x00006700;
                authdata.OverrideTitleVersion = 1;

                req.AuthData = authdata.GetBase64EncodedString();
                req.Path = msg.GetXRL();

                hr = req.Send();

                if ( HResult.Succeeded(hr) )
                {
                    memStream = new MemoryStream(req.ResponseData);
                    BinaryReader reader = new BinaryReader(memStream);

                    uint totalFiles = reader.ReadUInt32();
                    uint numFiles = reader.ReadUInt32();
                    files = new RepEnumerateFiles[numFiles];


                    Global.RO.Info("XRLEnumerateFiles: totalFiles: " + totalFiles);
                    Global.RO.Info("XRLEnumerateFiles: numFiles: " + numFiles);

                    for (int i=0; i<numFiles; i++)
                    {
                        files[i] = new RepEnumerateFiles();
                        files[i].ReadFrom(reader);
                        Global.RO.Info("XRLEnumerateFiles: file " + i + ": " + files[i].ToString());
                        Global.RO.Info("");
                    }

                }
            }

            return hr;
        }

        private uint GetQuota(uint domainId, uint titleId, uint keyType, ulong keyValue, out GetQuotaResponse resp)
        {
            uint hr = HResult.S_OK;
            GetQuotaRequest msg = new GetQuotaRequest();
            resp = null;

            msg._domainId = domainId;
            msg._titleId = titleId;
            msg._keyType = keyType;
            msg._keyValue = keyValue;

            MemoryStream memStream  = new MemoryStream();
            BinaryWriter writer     = new BinaryWriter(memStream);
            msg.WriteStream(writer);

            // Serialize and send to the datacenter port
            byte[] reqbuf = memStream.ToArray();
            XrlRequest req = new XrlRequest();
            req.TargetVirtualInterface = VirtualInterface.stfd_storage_int;
            req.PostData = reqbuf;

            HTTPAuthData authdata = new HTTPAuthData(0, 0, 0, 0, 0, titleId, (uint)XOService.Storage, 0);
            authdata.OverrideXUsers[0].dwUserFlags = 0;
            authdata.OverrideTitleVersion = 1;

            req.AuthData = authdata.GetBase64EncodedString();
            req.Path = msg.GetXRL();

            hr = req.Send();

            if ( HResult.Succeeded(hr) )
            {
                memStream = new MemoryStream(req.ResponseData);
                BinaryReader reader = new BinaryReader(memStream);

                resp = new GetQuotaResponse();
                resp.ReadStream(reader);

                Global.RO.Info("GetQuota TitleId: 0x{0:x}:", titleId);
                Global.RO.Info(" MaxFileSize:    {0}",      resp._maxFileSize);
                Global.RO.Info(" TotalBytesMax:  {0}",      resp._totalBytesMax);
                Global.RO.Info(" TotalBytesUsed: {0}",      resp._totalBytesUsed);
                Global.RO.Info(" TotalFilesMax:  {0}",      resp._totalFilesMax);
                Global.RO.Info(" TotalFilesUsed: {0}",      resp._totalFilesUsed);
            }

            return hr;
        }



        [TestCase]
        public void TestXeStatsWriteFile()
        {
            RandomEx rex = new RandomEx();
            ulong userId1 = rex.NextPuid();
            ulong xboxId1 = rex.NextPuid();
            byte[] file1 = rex.GenerateRandomBlob(100);

            ulong userId2 = rex.NextPuid();
            ulong xboxId2 = rex.NextPuid();
            byte[] file2 = rex.GenerateRandomBlob(100);

            byte[] serverFile1;

            string path1 = "//xestats/u:" + userId1.ToString("x") + "/" + TITLE_ID.ToString("x") + "/1";

            Global.RO.Info("Writing file 1 to " + path1);
            uint hr = WriteFile(true, userId1, xboxId1, path1, file1);
            Assert.AreEqual(hr, HResult.S_OK);


            string path2 = "//xestats/u:" + userId2.ToString("x") + "/" + TITLE_ID.ToString("x") + "/1";

            Global.RO.Info("Writing file 2 to " + path2);
            hr = WriteFile(true, userId2, xboxId2, path2, file2);
            Assert.AreEqual(hr, HResult.S_OK);


            Global.RO.Info("Reading file 1 from " + path1);
            hr = ReadFile(true, userId2, xboxId2, path1, out serverFile1);
            Assert.AreEqual(hr, HResult.S_OK);

            Assert.AreEqual(file1, serverFile1);

        }

        [TestCase]
        public void TestGlobalDomain()
        {
            RandomEx rex = new RandomEx();
            ulong userId1 = rex.NextPuid();
            ulong xboxId1 = rex.NextPuid();
            byte[] file1 = rex.GenerateRandomBlob(100);
            byte[] serverFile1 = null;
            string mgmtresp;

            string path1 = "//global/t:" + XOn.DASH_TITLE_ID.ToString("x") + "/icon/1/1";

            Global.RO.Info("Removing file " + path1);
            uint hr = RemoveFile(false, userId1, xboxId1, path1);
            Assert.IsTrue(hr == HResult.S_OK || hr == HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);

            IInterfaceInfo server = Config.GetSingleInterface(Interface.storedb);
            LiveService.ManagementConsole.Execute(server.IPAddressString, "e :stfd cacheflush", out mgmtresp);


            Global.RO.Info("Writing file 1 to " + path1);
            hr = WriteFile(false, userId1, xboxId1, path1, file1);
            Assert.AreEqual(hr, HResult.S_OK);

            Global.RO.Info("Enumerating files..");
            RepEnumerateFiles[] files;
            hr = EnumerateFiles(false, xboxId1, userId1, "//global/t:" + XOn.DASH_TITLE_ID.ToString("x") + "/icon/1/*", 0, 100, out files);
            Assert.AreEqual(hr, HResult.XONLINE_E_STORAGE_ACCESS_DENIED);


            Global.RO.Info("Reading file 1 from " + path1);
            hr = ReadFile(true, userId1, xboxId1, path1, out serverFile1);
            Assert.AreEqual(hr, HResult.S_OK);
            Assert.AreEqual(file1, serverFile1);



        }


        [TestCase]
        public void TestReadFile_NotFound()
        {
            RandomEx rex = new RandomEx();
            ulong userId1 = rex.NextPuid();
            ulong xboxId1 = rex.NextPuid();
            byte[] file1 = rex.GenerateRandomBlob(100);
            byte[] serverFile1 = null;
            string mgmtresp;

            string path1 = "//global/t:" + XOn.DASH_TITLE_ID.ToString("x") + "/icon/666/666";

            Global.RO.Info("Removing file " + path1);
            uint hr = RemoveFile(false, userId1, xboxId1, path1);
            Assert.IsTrue(hr == HResult.S_OK || hr == HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);

            IInterfaceInfo server = Config.GetSingleInterface(Interface.storedb);
            LiveService.ManagementConsole.Execute(server.IPAddressString, "e :stfd cacheflush", out mgmtresp);


            Global.RO.Info("Reading file 1 from " + path1);
            hr = ReadFile(true, userId1, xboxId1, path1, out serverFile1);
            Assert.AreEqual(hr, HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);



        }

        [TestCase]
        public void ZeroLengthFileUpdate()
        {
            uint hr;
            RandomEx rex = new RandomEx();
            ulong userId1 = rex.NextPuid();
            ulong xboxId1 = rex.NextPuid();
            byte[] file1  = new byte[1];
            string strTitleId1 = TITLE_ID.ToString("x");

            StorageDomain domain = StorageDomainList.GetDomain("title");

            // Initialize the quota for the domain and check for consistency
            GetQuotaResponse quotaResp1;
            hr = GetQuota(domain.Id, TITLE_ID, (uint)IdType.TitleId, TITLE_ID, out quotaResp1);
            ValueCheck.TestHR("GetQuota HR", HResult.S_OK, hr);


            // 
            // Validate normal behavior
            //
            string path1= "//title."+strTitleId1+"/t:"+strTitleId1+"/" + Guid.NewGuid().ToString();

            // Make sure no file exists
            Global.RO.Info("Removing file (preclean)" + path1);
            hr = RemoveFile(false, userId1, xboxId1, path1);
            Assert.IsTrue(hr == HResult.S_OK || hr == HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);

            // Create the file
            Global.RO.Info("Writing file 1 to " + path1);
            hr = WriteFile(false, userId1, xboxId1, path1, file1);
            Assert.AreEqual(hr, HResult.S_OK);

            // Post write quota check 1
            GetQuotaResponse quotaResp2;
            hr = GetQuota(domain.Id, TITLE_ID, (uint)IdType.TitleId, TITLE_ID, out quotaResp2);
            ValueCheck.TestHR("GetQuota HR", HResult.S_OK, hr);
            Assert.IsTrue((ulong)file1.Length == (quotaResp2._totalBytesUsed - quotaResp1._totalBytesUsed));
            Assert.IsTrue(1 == quotaResp2._totalFilesUsed - quotaResp1._totalFilesUsed);

            // Overwrite the file
            Global.RO.Info("Overwrite file 1 to " + path1);
            hr = WriteFile(false, userId1, xboxId1, path1, file1);
            Assert.AreEqual(hr, HResult.S_OK);

            // Post write quota check 2 (should be same as results in 1)
            hr = GetQuota(domain.Id, TITLE_ID, (uint)IdType.TitleId, TITLE_ID, out quotaResp2);
            ValueCheck.TestHR("GetQuota HR", HResult.S_OK, hr);
            Assert.IsTrue((ulong)file1.Length == (quotaResp2._totalBytesUsed - quotaResp1._totalBytesUsed));
            Assert.IsTrue(1 == quotaResp2._totalFilesUsed - quotaResp1._totalFilesUsed);

            // 
            // Validate 0-length behavior (bug Xenon: 48202)
            //
            string path2 = "//title."+strTitleId1+"/t:"+strTitleId1+"/" + Guid.NewGuid().ToString();
            byte[] file2 = new byte[0];

            // Reset the quota1 mark
            hr = GetQuota(domain.Id, TITLE_ID, (uint)IdType.TitleId, TITLE_ID, out quotaResp1);
            ValueCheck.TestHR("GetQuota HR", HResult.S_OK, hr);

            // Make sure no file exists
            Global.RO.Info("Removing file (preclean)" + path2);
            hr = RemoveFile(false, userId1, xboxId1, path2);
            Assert.IsTrue(hr == HResult.S_OK || hr == HResult.XONLINE_E_STORAGE_FILE_NOT_FOUND);

            // Create the file
            Global.RO.Info("Writing file 1 to " + path2);
            hr = WriteFile(false, userId1, xboxId1, path2, file2);
            Assert.AreEqual(hr, HResult.S_OK);

            // Post write quota check 1
            hr = GetQuota(domain.Id, TITLE_ID, (uint)IdType.TitleId, TITLE_ID, out quotaResp2);
            ValueCheck.TestHR("GetQuota HR", HResult.S_OK, hr);
            Assert.IsTrue((ulong)file2.Length == (quotaResp2._totalBytesUsed - quotaResp1._totalBytesUsed));
            Assert.IsTrue(1 == quotaResp2._totalFilesUsed - quotaResp1._totalFilesUsed);

            // Overwrite the file
            Global.RO.Info("Overwrite file 1 to " + path2);
            hr = WriteFile(false, userId1, xboxId1, path2, file2);
            Assert.AreEqual(hr, HResult.S_OK);

            // Post write quota check 2 (should be same as results in 1)
            hr = GetQuota(domain.Id, TITLE_ID, (uint)IdType.TitleId, TITLE_ID, out quotaResp2);
            ValueCheck.TestHR("GetQuota HR", HResult.S_OK, hr);
            Assert.IsTrue((ulong)file2.Length == (quotaResp2._totalBytesUsed - quotaResp1._totalBytesUsed));
            Assert.IsTrue(1 == quotaResp2._totalFilesUsed - quotaResp1._totalFilesUsed);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\fd\wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
namespace xonline.server.storage.test.fd  {    using System.Diagnostics;
    using System.Xml.Serialization;
    using System;
    using System.Web.Services.Protocols;
    using System.ComponentModel;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="StorageSoap", Namespace="http://websvc.xboxlive.com/Storage/")]
    public class Storage : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public Storage() {
            this.Url = "https://websvc.xboxlive.com/storage/storage.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/GetTitleQuota", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public QuotaInfo GetTitleQuota(System.UInt32 titleID) {
            object[] results = this.Invoke("GetTitleQuota", new object[] {
                        titleID});
            return ((QuotaInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTitleQuota(System.UInt32 titleID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTitleQuota", new object[] {
                        titleID}, callback, asyncState);
        }
        
        /// <remarks/>
        public QuotaInfo EndGetTitleQuota(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((QuotaInfo)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/ReadUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReadFileInfo ReadUserFile(System.UInt32 titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] webID, string gamerTag, string fileName, System.DateTime ifModifiedSinceDate) {
            object[] results = this.Invoke("ReadUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        ifModifiedSinceDate});
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadUserFile(System.UInt32 titleID, System.Byte[] webID, string gamerTag, string fileName, System.DateTime ifModifiedSinceDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        ifModifiedSinceDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReadFileInfo EndReadUserFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/ReadTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReadFileInfo ReadTitleFile(System.UInt32 titleID, string fileName, System.DateTime ifModifiedSinceDate) {
            object[] results = this.Invoke("ReadTitleFile", new object[] {
                        titleID,
                        fileName,
                        ifModifiedSinceDate});
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReadTitleFile(System.UInt32 titleID, string fileName, System.DateTime ifModifiedSinceDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReadTitleFile", new object[] {
                        titleID,
                        fileName,
                        ifModifiedSinceDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReadFileInfo EndReadTitleFile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReadFileInfo)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/WriteUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteUserFile(System.UInt32 titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] webID, string gamerTag, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] data, System.DateTime expirationDate) {
            this.Invoke("WriteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        data,
                        expirationDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWriteUserFile(System.UInt32 titleID, System.Byte[] webID, string gamerTag, string fileName, System.Byte[] data, System.DateTime expirationDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WriteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName,
                        data,
                        expirationDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndWriteUserFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/WriteTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void WriteTitleFile(System.UInt32 titleID, string fileName, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] data, System.DateTime expirationDate) {
            this.Invoke("WriteTitleFile", new object[] {
                        titleID,
                        fileName,
                        data,
                        expirationDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWriteTitleFile(System.UInt32 titleID, string fileName, System.Byte[] data, System.DateTime expirationDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WriteTitleFile", new object[] {
                        titleID,
                        fileName,
                        data,
                        expirationDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndWriteTitleFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/DeleteUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteUserFile(System.UInt32 titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] webID, string gamerTag, string fileName) {
            this.Invoke("DeleteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteUserFile(System.UInt32 titleID, System.Byte[] webID, string gamerTag, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteUserFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/DeleteTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DeleteTitleFile(System.UInt32 titleID, string fileName) {
            this.Invoke("DeleteTitleFile", new object[] {
                        titleID,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteTitleFile(System.UInt32 titleID, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteTitleFile", new object[] {
                        titleID,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDeleteTitleFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/RevokeTitleFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeTitleFile(System.UInt32 titleID, string fileName) {
            this.Invoke("RevokeTitleFile", new object[] {
                        titleID,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeTitleFile(System.UInt32 titleID, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeTitleFile", new object[] {
                        titleID,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRevokeTitleFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/RevokeUserFile", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeUserFile(System.UInt32 titleID, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] webID, string gamerTag, string fileName) {
            this.Invoke("RevokeUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeUserFile(System.UInt32 titleID, System.Byte[] webID, string gamerTag, string fileName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeUserFile", new object[] {
                        titleID,
                        webID,
                        gamerTag,
                        fileName}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRevokeUserFile(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://websvc.xboxlive.com/Storage/EnumerateTitleFiles", RequestNamespace="http://websvc.xboxlive.com/Storage/", ResponseNamespace="http://websvc.xboxlive.com/Storage/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)]
        public FileEnumerationInfo[] EnumerateTitleFiles(System.UInt32 titleID, string fileQuery, System.DateTime ifModifiedSince) {
            object[] results = this.Invoke("EnumerateTitleFiles", new object[] {
                        titleID,
                        fileQuery,
                        ifModifiedSince});
            return ((FileEnumerationInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEnumerateTitleFiles(System.UInt32 titleID, string fileQuery, System.DateTime ifModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EnumerateTitleFiles", new object[] {
                        titleID,
                        fileQuery,
                        ifModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public FileEnumerationInfo[] EndEnumerateTitleFiles(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FileEnumerationInfo[])(results[0]));
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public class QuotaInfo {
        
        /// <remarks/>
        public System.UInt64 MaxFileSize;
        
        /// <remarks/>
        public System.UInt64 TotalBytesMax;
        
        /// <remarks/>
        public System.UInt64 TotalBytesUsed;
        
        /// <remarks/>
        public System.UInt32 TotalFilesMax;
        
        /// <remarks/>
        public System.UInt32 TotalFilesUsed;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public class FileEnumerationInfo {
        
        /// <remarks/>
        public System.UInt32 TitleID;
        
        /// <remarks/>
        public System.UInt32 TitleVersion;
        
        /// <remarks/>
        public string GamerTag;
        
        /// <remarks/>
        public System.Byte UserCountryID;
        
        /// <remarks/>
        public System.UInt32 FileSize;
        
        /// <remarks/>
        public System.DateTime CreationDate;
        
        /// <remarks/>
        public System.DateTime ModifiedDate;
        
        /// <remarks/>
        public string FileName;
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://websvc.xboxlive.com/Storage/")]
    public class ReadFileInfo {
        
        /// <remarks/>
        public bool FileNotModified;
        
        /// <remarks/>
        public System.UInt32 TitleID;
        
        /// <remarks/>
        public System.UInt32 TitleVersion;
        
        /// <remarks/>
        public string GamerTag;
        
        /// <remarks/>
        public System.Byte UserCountryID;
        
        /// <remarks/>
        public System.UInt32 FileSize;
        
        /// <remarks/>
        public System.DateTime CreationDate;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public System.Byte[] FileData;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\AssemblyInfo.cs ===
[assembly: System.Reflection.AssemblyTitle("Xbox Live String Server")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\storage\test\StorageModuleTest\App_Code\Service.cs ===
using System;
using System.Web;
using System.Web.Services;
using System.Web.Services.Protocols;

[WebService(Namespace = "http://tempuri.org/")]
[WebServiceBinding(ConformsTo = WsiProfiles.BasicProfile1_1)]
public class Service : System.Web.Services.WebService
{
    public Service () {

        //Uncomment the following line if using designed components 
        //InitializeComponent(); 
    }

    [WebMethod]
    public string HelloWorld() {
        return "Hello World";
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\flushcache.cs ===
// 
// flushcache.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// A resusable cache of name/count pairs that provide an atomic 
//  means to take a snapshot of the cache to flush 
// 

using System;
using System.Collections;
using System.Data;
using System.Threading;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;


namespace xonline.server.stringsvr 
{
    public class FlushCache
    {
        // Setup the object and locals
        public FlushCache()
        {
            m_hashtable = Hashtable.Synchronized(new Hashtable());
            m_rwlock = new ReaderWriterLock();
        }

        // Obtain the integer value of 
        public static int Value(object o)
        {  
            return ((int [])o)[0];
        }
        
        // Take a snapshot of the current state of the cache and return the 
        //  contents in a Hashtable. The cache is cleared at the point of 
        //  of the Flush call, so new calls rebuild the table from scratch. 
        public Hashtable Flush()
        {
            Hashtable flushed = null;
            m_rwlock.AcquireWriterLock(Timeout.Infinite);
            try
            {

                // Guaranteed to have everyone else locked out now
                flushed = m_hashtable;
                m_hashtable = Hashtable.Synchronized(new Hashtable());
            }
            finally
            {
                m_rwlock.ReleaseWriterLock();
            }
            
            return flushed;
        }

        // Increment a counter in the cache associated with a given key
        public virtual void Increment(object key)
        {
            m_rwlock.AcquireReaderLock(Timeout.Infinite);            
            try
            {

                if (m_hashtable.Contains(key))
                {
                    Interlocked.Increment(ref ((int [])m_hashtable[key])[0]);
                }
                else
                {
                    LockCookie lc = m_rwlock.UpgradeToWriterLock(Timeout.Infinite);
                    try
                    {
                        // If someone got the writer lock ahead of us and inserted the same
                        //  key value, we need to catch that
                        if (m_hashtable.Contains(key))
                        {
                            Interlocked.Increment(ref ((int [])m_hashtable[key])[0]);
                        }
                        else
                        {
                            m_hashtable[key] = new int [1] {1};
                        }
                    }
                    finally
                    {
                        m_rwlock.DowngradeFromWriterLock(ref lc);
                    }
                }
            }
            finally
            {
                m_rwlock.ReleaseReaderLock();
            }
        }
      
        private Hashtable m_hashtable;
        private ReaderWriterLock m_rwlock;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\addstring.cs ===
// 
// AddString.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
// 
// Author: masonb
//

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Web;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities;


namespace xonline.server.stringsvr 
{
    public class AddString : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest( HttpContext ctx )
        {
            bool                IsV1Request = true;
            HResult             hr = HResult.S_OK;
            HResult             hrLogged = HResult.S_OK; // log HR for last invalid string
            StringAdd2Request   request = new StringAdd2Request();
            StringAdd2Response  response = new StringAdd2Response();
            
            try
            {
                // validate service request on XRL post
                if( !XRLUtil.IsValidXOnlineRequest( ctx.Request, XOService.StringService ) )
                {
                    // The service ID in the request is incorrect
                    throw new XRLException(HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, XEvent.Id.STRINGSVR_HACK_0, "StringSvr.AddString: Request is invalid" );                                        
                }

                StringServiceCounter.Counters.AddStringRequestsPerSecond.Increment();
                StringServiceCounter.Counters.AddStringRequestsTotal.Increment();

                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);

                // Figure out which method is being called so we can interpret the data on the wire
                if (ctx.Request.Path.ToLower().EndsWith(request.GetXRL()))
                {
                    IsV1Request = false;                
                    
                    request.ReadFromRequest( ctx.Request );            
                }
                else
                {
                    IsV1Request = true;

                    StringAddRequest v1Request = new StringAddRequest();
                    v1Request.ReadFromRequest( ctx.Request );

                    // Copy the data to the v2 request object so we can just deal with 
                    //  one instance in most cases
                    request.dwTitleID       = v1Request.dwTitleID;
                    request.dwStringID      = v1Request.dwStringID;
                    request.dtExpire        = v1Request.dtExpire;
                    request.szDefaultLocale = Locale.LocaleFromv1LanguageId( v1Request.wDefaultLanguage );
                    request.cLocaleStrings  = v1Request.cLangStrings;
                    request.fVetText        = v1Request.fVetText;
                    
                    request.rgLocaleStrings   = new LocaleString[v1Request.rgLangStrings.Length];

                    for(int i=0; i<v1Request.rgLangStrings.Length; i++)
                    {
                        request.rgLocaleStrings[i] = new LocaleString();
                        request.rgLocaleStrings[i].szLocale = Locale.LocaleFromv1LanguageId( v1Request.rgLangStrings[i].wLanguage );
                        request.rgLocaleStrings[i].szString = v1Request.rgLangStrings[i].szString;                   
                    }
                }                

                // TODO: stricter validation of allowed locales for strings for v2 requests
                if (StringSvrApp.DefaultLocale == request.szDefaultLocale)
                {
                    throw new XRLException(HResult.XONLINE_E_STRING_INVALID_LANGUAGE, XEvent.Id.STRINGSVR_CODE_0, "StringSvr.AddString: String contains invalid default language." );                                        
                }

                // Loop through the strings once and do validation.  Also find the index of the default string.
                ushort iDefaultString = 0xFFFF;
                Hashtable languages = new Hashtable();

                // Setup the response internals
                response.wNumStrings = request.cLocaleStrings;
                response.rghrString = new uint[request.cLocaleStrings];            
                
                for( ushort iString = 0; iString < request.cLocaleStrings; iString++ )
                {
                    if( request.rgLocaleStrings[ iString ].szString.Length > StringDefs.MAX_STRINGSVR_STRING_LEN )
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: String is longer than the max allowed length (" + request.rgLocaleStrings[ iString ].szString.Length.ToString() + " != " + StringDefs.MAX_STRINGSVR_STRING_LEN.ToString() + ")" );
                        hrLogged = response.rghrString[ iString ] = HResult.XONLINE_E_STRING_TOO_LONG;
                    }

                    // If not adding by ID, there are some additional restrictions
                    if( 0xFFFFFFFF == request.dwStringID )
                    {
                        // If adding by ID, zero is allowed as a language, otherwise no
                        if( StringSvrApp.DefaultLocale == request.rgLocaleStrings[ iString ].szLocale )
                        {
                            Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: String contains invalid language." );
                            hrLogged = response.rghrString[ iString ] = HResult.XONLINE_E_STRING_INVALID_LANGUAGE;
                        }
                    }
        
                    if (languages.Contains(request.rgLocaleStrings[ iString ].szLocale))
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: Request contains one language more than once" );
                        hrLogged = response.rghrString[ iString ] = HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE;
                    }
                    else
                    {
                        languages.Add(request.rgLocaleStrings[ iString ].szLocale, null);
                    }
                    
                    string strExact = "";
                    string strSubstr = "";
                    if( request.fVetText && !StringSvrApp.VetText( request.rgLocaleStrings[ iString ].szLocale, request.rgLocaleStrings[ iString ].szString, ref strExact, ref strSubstr ) )
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: Offensive text found, string='" + request.rgLocaleStrings[ iString ].szString + "', Exact='" + strExact + "', Substring='" + strSubstr + "'" );
                        hrLogged = response.rghrString[ iString ] = HResult.XONLINE_E_STRING_OFFENSIVE_TEXT;
                    }

                    if( request.rgLocaleStrings[ iString ].szLocale == request.szDefaultLocale )
                    {
                        iDefaultString = iString;
                    }
                }

                if( hrLogged != HResult.S_OK )
                {
                    // For V2 requests, detailed failure information is in the individual string HRs,
                    //  which are only returned if the XRL Response has a success code. 
                    hr = HResult.S_FALSE;
                }
                
                // Make sure we found the default string if we aren't adding by ID
                if( 0xFFFF == iDefaultString && 0xFFFFFFFF == request.dwStringID )
                {
                    Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: Language chosen as default is not present in request" );
                    hr = hrLogged = HResult.XONLINE_E_STRING_NO_DEFAULT_STRING;
                }

                if( hrLogged != HResult.S_OK )
                {
                    // Abort the request before we go to the database
                    goto lbReturn;            
                }
                
                SqlConnection cxn = null;
                SqlCommand cmd = null;
                SqlParameter param = null;

                try
                {
                    // If the caller is asking us to generate a string ID, then call p_stringsvr_string_add_default to get one
                    if( 0xFFFFFFFF == request.dwStringID )
                    {
                        // Open a connection to the NPDB
                        cxn = new SqlConnection( ConfigUtil.NpdbConnectionString );
                        cxn.Open();
                        
                        // Create a new query command
                        cmd = new SqlCommand( "p_stringsvr_string_add_default", cxn );
                        cmd.CommandType = CommandType.StoredProcedure;
        
                        // Build up the parameters
                        param = new SqlParameter();
                        param.ParameterName = "@retval";
                        param.Direction = ParameterDirection.ReturnValue;
                        param.DbType = DbType.Int32;
                        cmd.Parameters.Add(param);
        
                        param = new SqlParameter();
                        param.ParameterName = "@i_title_id";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.Int32;
                        param.Value = (int) request.dwTitleID;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@dt_expire";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.DateTime;
                        param.Value = request.dtExpire;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@nvc_text";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.String;
                        param.Value = request.rgLocaleStrings[ iDefaultString ].szString;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@i_string_id";
                        param.Direction = ParameterDirection.Output;
                        param.DbType = DbType.Int32;
                        param.Value = 0;
                        cmd.Parameters.Add( param );

                        // Execute the command
                        cmd.ExecuteNonQuery();

                        // Retrieve out values
                        request.dwStringID = (uint)(int) cmd.Parameters[ "@i_string_id" ].Value;
                    }
                    else if (0xFFFF != iDefaultString)    // Otherwise, just store the default string if we have the default id
                    {
                        // Open a connection to the NPDB
                        cxn = new SqlConnection( ConfigUtil.NpdbConnectionString );
                        cxn.Open();
                    
                        // Create a new query command
                        cmd = new SqlCommand( "p_stringsvr_string_add_by_id", cxn );
                        cmd.CommandType = CommandType.StoredProcedure;

                        // Build up the parameters
                        param = new SqlParameter();
                        param.ParameterName = "@retval";
                        param.Direction = ParameterDirection.ReturnValue;
                        param.DbType = DbType.Int32;
                        cmd.Parameters.Add(param);

                        param = new SqlParameter();
                        param.ParameterName = "@i_title_id";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.Int32;
                        param.Value = (int) request.dwTitleID;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@i_string_id";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.Int32;
                        param.Value = (int) request.dwStringID;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@vc_locale";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.String;
                        param.Value = StringSvrApp.DefaultLocale;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@dt_expire";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.DateTime;
                        param.Value = request.dtExpire;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@nvc_text";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.String;
                        param.Value = request.rgLocaleStrings[ iDefaultString ].szString;
                        cmd.Parameters.Add( param );
        
                        // Execute the command
                        cmd.ExecuteNonQuery();
                    
                    }
                }
                catch( Exception e )
                {
                    Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: SQL request failed (1)" );

                    throw new XRLException(
                        e.InnerException is SqlException ? HResult.XONLINE_E_DATABASE_EXECUTE_ERROR : HResult.XONLINE_E_DATABASE_RESULT_ERROR,
                        XEvent.Id.STRINGSVR_CONFIG_0, "Failed to execute p_stringsvr_string_add_default in the NPDB", e
                    );
                }
                finally
                {
                    if( cmd != null )
                    {
                        cmd.Cancel();
                    }
                    if( cxn != null )
                    {
                        cxn.Close();
                    }
                }

                // Loop through the strings and add each language string.
                for( ushort iString = 0; iString < request.cLocaleStrings; iString++ )
                {
                    try
                    {
                        // Open a connection to the NPDB
                        cxn = new SqlConnection( ConfigUtil.NpdbConnectionString );
                        cxn.Open();
                    
                        // Create a new query command
                        cmd = new SqlCommand( "p_stringsvr_string_add_by_id", cxn );
                        cmd.CommandType = CommandType.StoredProcedure;

                        // Build up the parameters
                        param = new SqlParameter();
                        param.ParameterName = "@retval";
                        param.Direction = ParameterDirection.ReturnValue;
                        param.DbType = DbType.Int32;
                        cmd.Parameters.Add(param);

                        param = new SqlParameter();
                        param.ParameterName = "@i_title_id";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.Int32;
                        param.Value = (int) request.dwTitleID;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@i_string_id";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.Int32;
                        param.Value = (int) request.dwStringID;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@vc_locale";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.String;
                        param.Value = request.rgLocaleStrings[ iString ].szLocale;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@dt_expire";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.DateTime;
                        param.Value = request.dtExpire;
                        cmd.Parameters.Add( param );

                        param = new SqlParameter();
                        param.ParameterName = "@nvc_text";
                        param.Direction = ParameterDirection.Input;
                        param.DbType = DbType.String;
                        param.Value = request.rgLocaleStrings[ iString ].szString;
                        cmd.Parameters.Add( param );
        
                        // Execute the command
                        cmd.ExecuteNonQuery();
                    }
                    catch (Exception e)
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: SQL request failed (2)" );

                        throw new XRLException(
                            e.InnerException is SqlException ? HResult.XONLINE_E_DATABASE_EXECUTE_ERROR : HResult.XONLINE_E_DATABASE_RESULT_ERROR,
                            XEvent.Id.STRINGSVR_CONFIG_1, "Failed to execute p_stringsvr_string_add_by_id in the NPDB", e
                        );
                    }
                    finally
                    {
                        if( cmd != null )
                        {
                            cmd.Cancel();
                        }
                        if( cxn != null )
                        {
                            cxn.Close();
                        }
                    }
                }

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: success, returning ID=" + request.dwStringID.ToString("X") );
                
    lbReturn:                                            
                if (IsV1Request)
                {
                    // Send the appropriate HTTP response
                    StringAddResponse v1Response = new StringAddResponse();

                    v1Response.dwStringID = request.dwStringID;

                    // for V1 requests, pass the last failure HR, if any
                    XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, hrLogged, v1Response );
                }
                else // v2 request
                {
                    response.dwStringID = request.dwStringID;

                    // num strings and per-string hrs are already filled out. 
                    
                    XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, hr, response );
                }
            }
            catch( XRLException e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: XrlException, hr = " + e.HResult + ", msg=" + e.Message );
                hrLogged = e.HResult;
                
                StringServiceCounter.Counters.AddStringFailedRate.Increment();
                StringServiceCounter.Counters.AddStringFailedTotal.Increment();                

                throw;
            }
            catch( Exception e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.AddString: Unexpected failure, msg=" + e.Message );
                hrLogged = HResult.XONLINE_E_STRING_ADD_STRING_ERROR;

                StringServiceCounter.Counters.AddStringFailedRate.Increment();
                StringServiceCounter.Counters.AddStringFailedTotal.Increment();

                throw;
            }
            finally
            {
                // Log line: AddString|TitleID|StringID|ExpireTime|DefaultLocale|LangCount|Vet|HR
                Xom.Log(XomAreaName.stringLog, "AddString"
                    + "|" + request.dwTitleID.ToString("X")
                    + "|" + request.dwStringID.ToString("X")
                    + "|" + request.dtExpire.ToString() 
                    + "|" + request.szDefaultLocale
                    + "|" + request.cLocaleStrings.ToString()
                    + "|" + request.fVetText.ToString()
                    + "|" + hrLogged
                    );
            }

        }

        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }              
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\getstring.cs ===
// 
// GetString.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
// 
// Author: masonb
//

using System;
using System.IO;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities;


namespace xonline.server.stringsvr 
{
    public class GetString : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest( HttpContext ctx )
        {
            HResult                 hr = HResult.S_OK;
            StringLookup2Request    request = new StringLookup2Request();

            try
            {
                StringLookupResponse response = new StringLookupResponse();
                
                // validate service request on XRL post                
                if( !XRLUtil.IsValidXOnlineRequest( ctx.Request, XOService.StringService ) )
                {
                    // The service ID in the request is incorrect
                    throw new XRLException(HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, XEvent.Id.STRINGSVR_HACK_1, "StringSvr.GetString: Request is invalid" );                                        
                }

                StringServiceCounter.Counters.LookupStringRequestsPerSecond.Increment();
                StringServiceCounter.Counters.LookupStringRequestsTotal.Increment();

                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);

                if (ctx.Request.Path.ToLower().EndsWith(request.GetXRL()))
                {
                    request.ReadFromRequest( ctx.Request );            
                }
                else // v1Request?
                {
                    StringLookupRequest v1Request = new StringLookupRequest();
                    v1Request.ReadFromRequest( ctx.Request );

                    request.dwTitleID = v1Request.dwTitleID;
                    request.wNumStrings = v1Request.wNumStrings;
                    request.szLocale = Locale.LocaleFromv1LanguageId( v1Request.wLanguage );
                    request.rgdwStringIDs = v1Request.rgdwStringIDs;
                }
            
                response.rgStringData = new StringData[ request.wNumStrings ];
                response.wNumStrings = request.wNumStrings;
                
                for( int iString = 0; iString < request.wNumStrings; iString++ )
                {
                    string tmpstring = "";

                    // Try to get the string from the cache
                    string strKey = StringSvrApp.BuildKey( request.dwTitleID, request.rgdwStringIDs[ iString ], request.szLocale );
                    object o = ctx.Cache.Get( strKey );
                    if( null == o )
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.GetString: String not found in requested language, trying default, ID=" + request.rgdwStringIDs[ iString ].ToString("X") );
                        strKey = StringSvrApp.BuildKey( request.dwTitleID, request.rgdwStringIDs[ iString ], StringSvrApp.DefaultLocale);
                        o = ctx.Cache.Get( strKey );
                        if( null == o )
                        {
                            Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.GetString: String not found even after trying default, ID=" + request.rgdwStringIDs[ iString ].ToString("X") );
                        }
                    }
                    if( null != o )
                    {
                        tmpstring = o.ToString();
                    }
      
                    response.rgStringData[ iString ] = new StringData();
                    response.rgStringData[ iString ].wStringSize = (ushort) tmpstring.Length;
                    response.rgStringData[ iString ].szString = tmpstring;
                }

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr.GetString: Success" );
                
                XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, request.dwTitleID, hr, response );
            }
            catch( XRLException e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.GetString: XrlException, hr = " + e.HResult + ", msg=" + e.Message );
                hr = e.HResult;

                StringServiceCounter.Counters.LookupStringFailedRate.Increment();
                StringServiceCounter.Counters.LookupStringFailedTotal.Increment();
                
                throw;
            }
            catch( Exception e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.GetString: Unexpected failure, msg=" + e.Message );
                hr = HResult.XONLINE_E_STRING_GET_STRING_ERROR;

                StringServiceCounter.Counters.LookupStringFailedRate.Increment();
                StringServiceCounter.Counters.LookupStringFailedTotal.Increment();
                
                throw;
            }
            finally
            {
                // Log line: GetString|TitleID|Locale|Count|StringID0|HR
                Xom.Log(XomAreaName.stringLog, "GetString"
                    + "|" + request.dwTitleID.ToString("X")
                    + "|" + request.szLocale
                    + "|" + request.wNumStrings.ToString()
                    + "|" + ( ( (0 == request.wNumStrings) || (request.rgdwStringIDs == null) ) ? "0" : request.rgdwStringIDs[0].ToString("X") ) 
                    + "|" + hr
                    );
            }
            
        }
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }              
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\loadstrings.cs ===
// 
// LoadStrings.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
// 

using System;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Security.Principal;
using System.Text;
using System.Web;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;


namespace xonline.server.stringsvr 
{
    public class LoadStrings : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest( HttpContext ctx )
        {
            HResult hr = HResult.S_OK;
            
            try
            {
                // validate service request on XRL post
                if( !XRLUtil.IsValidXOnlineRequest( ctx.Request, XOService.StringService ) )
                {
                    // The service ID in the request is incorrect
                    Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LoadStrings: Request is invalid" );
                    XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, HResult.XONLINE_E_MSGSVR_INVALID_REQUEST );
                    return;
                }

                CallSource.Check(VirtualInterface.stringsvr_int);
                
                // Load strings
                WindowsIdentity Id = WindowsIdentity.GetCurrent();
                StringSvrApp.LoadStringsProc(Id);

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LoadStrings complete");
                XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, HResult.S_OK );
            }
            catch( XRLException e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LoadStrings: XrlException, hr = " + e.HResult + ", msg=" + e.Message );
                hr = e.HResult;
                
                throw;
            }
            catch( Exception e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LoadStrings: Unexpected failure, msg=" + e.Message );
                hr = HResult.XONLINE_E_STRING_LOAD_STRING_ERROR;

                throw;
            }
            finally
            {
                // Log line: LoadStrings|HR
                Xom.Log(XomAreaName.stringLog, "LoadStrings"
                    + "|" + hr
                    );
            }
          
        }
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }              
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\logstring.cs ===
// 
// LogString.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
//

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Web;
using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;

namespace xonline.server.stringsvr 
{
    internal class LogStringHandler
    {
        //-----------------------------------------------------
        //
        // Handle the raw request
        //
        public static uint ProcessLogLines( string logLines )
        {
            // multiple lines from the client are carriage return delimited
            //  and packed in a single string. Split them here
            string [] lines = logLines.Split(new char[] {'\n'});

            // Now process each logline
            foreach (string line in lines)
            {
                int firstPipe = line.IndexOf("|");

                string key = -1 == firstPipe ? line : line.Substring(0, firstPipe);


                if(StringSvrApp.Prefixes.ContainsKey(key))
                {
                    Dictionary<string, string> prefixInfo = StringSvrApp.Prefixes[key];
                    switch(prefixInfo["type"])
                    {
                        case "failure":
                            ProcessFailureLogLine(key, line);
                            break;

                        case "measurement":
                            ProcessMeasurementLogLine(key, line);
                            break;

                        default:
                            break;
                    }
                }
                // If this is an aggregate linetype, aggregate it in our cache
                // Otherwise fire a logline to reporting.
                else if(StringSvrApp.Keys.Contains(key))
                {
                    ProcessReportingAggregate(line);
                }                
                else if (key.Length > 0)
                {
                    string logline = line.Replace('~', '|');
                    
                    // Reporting Log line: LS-LogString
                    Xom.Log(XomAreaName.Reporting, "LS-" + logline );         
                }       
            }

            return (uint)lines.Length;
        }

        private static short GetLoggedOnUserIndex()
        {
            for(short currentUser = 0; currentUser < SGInfo.Current.LogonUsers.Length; ++currentUser)
            {
                if (SGInfo.Current.LogonUsers[currentUser].qwUserID != 0 &&
                    !SGInfo.Current.LogonUsers[currentUser].IsGuest())
                {
                    return currentUser;
                }
            }

            return -1;
        }

        private static string AppendSgInfo(string line)
        {
            return string.Format(
                "LS-{0}|{1}|{2}|{3}|{4}",
                line.Replace('~', '|'),
                SGInfo.Current.ClientIP,
                SGInfo.Current.MachineId.ToString("X"),
                GetLoggedOnUserIndex() != -1
                    ? SGInfo.Current.GetUserCountry(SGInfo.Current.LogonUsers[GetLoggedOnUserIndex()].qwUserID).ToString("X")
                    : "0",
                SGInfo.Current.TitleId.ToString("X"));
        }

        private static string AppendAAInfo(string line)
        {
            AAInfo aaInfo = AAInfoMiddleTier.Current;

            return string.Format(
                "LS-{0}|{1}",
                line.Replace('~', '|'),
                aaInfo.IpAddressInternet);
        }

        private static string AppendRequestInfo(string line)
        {
            return AAInfo.IsActiveAuthAvailable ? AppendAAInfo(line) : (SGInfo.IsInternal() ? line : AppendSgInfo(line) );
        }

        /// <summary>
        /// Processing an API failure log line involves incrementing
        /// the associated perf counter instance, and then forwarding
        /// the log line on to reporting (with some pieces of data
        /// attached).
        /// </summary>
        /// <param name="prefix"></param>
        /// <param name="line"></param>
        private static void ProcessFailureLogLine(string prefix, string line)
        {
            //  Always log the line, no matter what.
            string logline = AppendRequestInfo(line);
            Xom.Log(XomAreaName.Reporting, logline);

            FailureMonitoringCounter currentCounter =
                (FailureMonitoringCounter)FailureMonitoringCounter.Counters.GetInstance(prefix);
            currentCounter.FailedAPIsByServiceIdRate.Increment();
        }

        private static void ProcessMeasurementLogLine(string prefix, string line)
        {
            //  Always log the line, no matter what.
            string logline = AppendRequestInfo(line);
            Xom.Log(XomAreaName.Reporting, logline);

            //  The second field of the log line is a number that we need to
            //  compare against the configured threshold.
            string[] fields = line.Replace('~', '|').Split('|');

            if(fields.Length < 2)
            {
                string errString = string.Format(
                    "LogString() received a log line whose prefix indicated that it " +
                    "was a measurement log line, but did not contain at least " +
                    "two fields.  The log line received was \"{0}\".",
                    line);
                Xom.NtEvent(XEvent.Id.STRINGSVR_INVALID_MEASUREMENT_LINE, errString);
                return;
            }

            int measuredValue;
            if(!Int32.TryParse(fields[1], NumberStyles.AllowHexSpecifier, null, out measuredValue))
            {
                string errString = string.Format(
                    "LogString() received a log line whose prefix indicated that it " +
                    "was a measurement log line, but the second field did not parse " +
                    "correctly as a hexadecimal integer value.  The log line received was \"{0}\".",
                    line);

                Xom.NtEvent(XEvent.Id.STRINGSVR_INVALID_MEASUREMENT_LINE, errString);
                return;
            }

            if (measuredValue <= StringSvrApp.Thresholds[prefix]) return;

            MeasurementThresholdMonitoringCounter currentCounter =
                (MeasurementThresholdMonitoringCounter)
                MeasurementThresholdMonitoringCounter.Counters.GetInstance(prefix);
            currentCounter.MeasurementThresholdsExceededRate.Increment();
        }

        private static void ProcessReportingAggregate(string line)
        {
            int tilde = line.IndexOf("~");

            string cacheline = -1 == tilde ? line : line.Substring(0, tilde);

            StringSvrApp.logCache.Increment(cacheline);
        }
    }
    
    public class LogString : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            HResult hr = HResult.S_OK;
            uint loglines = 0;
            StringLogRequest request = new StringLogRequest();

            try
            {
                // validate service request on XRL post
                if (!XRLUtil.IsValidXOnlineRequest(ctx.Request, XOService.StringService))
                {
                    // The service ID in the request is incorrect
                    throw new XRLException(HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, XEvent.Id.STRINGSVR_HACK_3, "StringSvr.LogString: Request is invalid");
                }

                StringServiceCounter.Counters.LogStringRequestsPerSecond.Increment();
                StringServiceCounter.Counters.LogStringRequestsTotal.Increment();

                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);

                request.ReadFromRequest(ctx.Request);

                if ((request.logLinesLength > 0) && (request.logLines.Length > 0))
                {
                    loglines = LogStringHandler.ProcessLogLines(request.logLines);
                }

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr.LogString: Success");

                // Perf Change: In order to make this API screaming fast, we want to avoid
                //  making the SGINFO call to get the CurrentTitleID() in the request which 
                //  is irrelevant anyway so we hardcode it to 0 here to prevent the default lookup
                XRLUtil.SetXRLResponse(HttpContext.Current, ctx.Response, XOService.StringService, 0, hr);
            }
            catch (XRLException e)
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LogString: XrlException, hr = " + e.HResult + ", msg=" + e.Message);
                hr = e.HResult;

                StringServiceCounter.Counters.LogStringFailedRate.Increment();
                StringServiceCounter.Counters.LogStringFailedTotal.Increment();

                throw;
            }
            catch (Exception e)
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LogString: Unexpected failure, msg=" + e.Message);
                hr = HResult.XONLINE_E_STRING_LOG_STRING_ERROR;

                StringServiceCounter.Counters.LogStringFailedRate.Increment();
                StringServiceCounter.Counters.LogStringFailedTotal.Increment();

                throw;
            }
            finally
            {
                // Log line: LogString|LogLines|LogLength|HR
                Xom.Log(XomAreaName.stringLog, "LogString"
                    + "|" + loglines
                    + "|" + request.logLinesLength
                    + "|" + hr
                    );
            }
        }

        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\logbinary.cs ===
// 
// LogBinary.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
//

using System;
using System.Collections.Generic;
using System.Web;
using System.Text;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;

namespace xonline.server.stringsvr 
{
    public class LogBinary : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            HResult hr = HResult.S_OK;
            int eventCount = 0;
            uint loglinesCount = 0;

            try
            {
                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);

                var inputEvents = VxProtocol.ReadStream(ctx.Request.InputStream);
                eventCount = inputEvents.Count;
                foreach (VxEvent evt in inputEvents)
                {
                    // Because this is stringsvr's version of LogBinary, we have to assume 
                    // all events include the LogStringId as field ordinal #1. That means 
                    // we never want to print the "ProducerId@EventId" notation as the 
                    // first field.
                    //
                    // We should also ignore the timestamp in this StringSvr version. We don't 
                    // care about client times. Sorry.
                    //
                    // This all means we bypass the VxEvent ToString() and go straight to 
                    // the datafields.

                    string strEvt = evt.EventFields.ToString();
                    loglinesCount += LogStringHandler.ProcessLogLines(strEvt);
                }

                // Perf Change: In order to make this API screaming fast, we want to avoid
                //  making the SGINFO call to get the CurrentTitleID() in the request which 
                //  is irrelevant anyway so we hardcode it to 0 here to prevent the default lookup
                XRLUtil.SetXRLResponse(HttpContext.Current, ctx.Response, XOService.StringService, 0, hr);
            }
            catch (XRLException e)
            {
                hr = e.HResult;
                throw;
            }
            catch (Exception)
            {
                hr = HResult.XONLINE_E_STRING_LOG_STRING_ERROR;
                throw;
            }
            finally
            {
                // Log line: LogString|LogLines|LogLength|HR
                Xom.Log(XomAreaName.stringLog, "LogBinary"
                    + "|" + loglinesCount
                    + "|" + eventCount
                    + "|" + ctx.Request.ContentLength
                    + "|" + hr
                    );
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\perfcounters.cs ===
using System;
using System.Threading;
using System.Diagnostics;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.stringsvr 
{

    [XomPerformanceCounterCategoryAttr( "String FD", "Xbox Live: String Service performance counters" )]
    public class StringServiceCounter : XomPerformanceCounterCategory
    {
        // Perf counters for each entry point
        [XomPerformanceCounterAttr(
             "LookupString requests per second", 
             "Number of LookupString requests executed per second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter LookupStringRequestsPerSecond;

        [XomPerformanceCounterAttr(
             "LookupString requests total", 
             "Total LookupString requests recorded in the the current AppDomain.", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter LookupStringRequestsTotal;

        [XomPerformanceCounterAttr(
            "Failed LookupString Requests", 
            "Total number of failed LookupString requests processed by the server.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter LookupStringFailedTotal;

        [XomPerformanceCounterAttr(
            "Failed LookupString Requests Rate", 
            "Total number of failed LookupString requests per second processed by the server.", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter LookupStringFailedRate;


        [XomPerformanceCounterAttr(
             "AddString requests per second", 
             "Number of AddString requests executed per second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter AddStringRequestsPerSecond;

        [XomPerformanceCounterAttr(
             "AddString requests total", 
             "AddString requests recorded in the the current AppDomain.", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter AddStringRequestsTotal;

        [XomPerformanceCounterAttr(
            "Failed AddString Requests", 
            "Total number of failed AddString requests processed by the server.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter AddStringFailedTotal;

        [XomPerformanceCounterAttr(
            "Failed AddString Requests Rate", 
            "Total number of failed AddString requests per second processed by the server.", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter AddStringFailedRate;


        [XomPerformanceCounterAttr(
             "VetString requests per second", 
             "Number of VetString requests executed per second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter VetStringRequestsPerSecond;

        [XomPerformanceCounterAttr(
             "VetString requests total", 
             "Total VetString requests recorded in the the current AppDomain.", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter VetStringRequestsTotal;

        [XomPerformanceCounterAttr(
            "Failed VetString Requests", 
            "Total number of failed VetString requests processed by the server.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter VetStringFailedTotal;

        [XomPerformanceCounterAttr(
            "Failed VetString Requests Rate", 
            "Total number of failed VetString requests per second processed by the server.", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter VetStringFailedRate;


        [XomPerformanceCounterAttr(
             "TitleIDLookup requests per second", 
             "Number of TitleIDLookup requests executed per second", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter TitleIDLookupRequestsPerSecond;

        [XomPerformanceCounterAttr(
             "TitleIDLookup requests total", 
             "Total TitleIDLookup requests recorded in the the current AppDomain.", 
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter TitleIDLookupRequestsTotal;

        [XomPerformanceCounterAttr(
            "Failed TitleIDLookup Requests", 
            "Total number of failed TitleIDLookup requests processed by the server.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter TitleIDLookupFailedTotal;

        [XomPerformanceCounterAttr(
            "Failed TitleIDLookup Requests Rate", 
            "Total number of failed TitleIDLookup requests per second processed by the server.", 
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter TitleIDLookupFailedRate;


        [XomPerformanceCounterAttr(
             "LogString requests per second",
             "Number of LogString requests executed per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter LogStringRequestsPerSecond;

        [XomPerformanceCounterAttr(
             "LogString requests total",
             "LogString requests recorded in the the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter LogStringRequestsTotal;

        [XomPerformanceCounterAttr(
            "Failed LogString Requests",
            "Total number of failed LogString requests processed by the server.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter LogStringFailedTotal;

        [XomPerformanceCounterAttr(
            "Failed LogString Requests Rate",
            "Total number of failed LogString requests per second processed by the server.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter LogStringFailedRate;

        [XomPerformanceCounterAttr(
             "LogString2 requests per second",
             "Number of LogString2 requests executed per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter LogString2RequestsPerSecond;

        [XomPerformanceCounterAttr(
             "LogString2 requests total",
             "LogString2 requests recorded in the the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter LogString2RequestsTotal;

        [XomPerformanceCounterAttr(
            "Failed LogString2 Requests",
            "Total number of failed LogString2 requests processed by the server.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter LogString2FailedTotal;

        [XomPerformanceCounterAttr(
            "Failed LogString2 Requests Rate",
            "Total number of failed LogString2 requests per second processed by the server.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter LogString2FailedRate;

        static public StringServiceCounter Counters = new StringServiceCounter();
    }

    [XomPerformanceCounterCategoryAttr( "String FD - Failure Monitoring", "Xbox Live: Failure Monitoring performance counters" )]
    public class FailureMonitoringCounter : XomPerformanceCounterCategory
    {
        [XomPerformanceCounterAttr(
            "Failures Seen Rate",
            "Total number of failures reported by the client per second.",
            PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter FailedAPIsByServiceIdRate;

        static public FailureMonitoringCounter Counters = new FailureMonitoringCounter();
    }

    [XomPerformanceCounterCategoryAttr( "String FD - Measurement Threshold Monitoring", "Xbox Live: Measurement Threshold Monitoring performance counters" )]
    public class MeasurementThresholdMonitoringCounter : XomPerformanceCounterCategory
    {
        [XomPerformanceCounterAttr(
            "Measurement Thresholds Exceeded Rate",
            "Total number of measurements received from Xbox 360 consoles that exceeded the configured threshold.",
            PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter MeasurementThresholdsExceededRate;

        static public MeasurementThresholdMonitoringCounter Counters = new MeasurementThresholdMonitoringCounter();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\logstring2.cs ===
// 
// LogString2.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
//

using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;

namespace xonline.server.stringsvr 
{
    public class LogString2 : IHttpHandler
    {
        /// <summary>
        /// Reformat the query string parameters into the LogString format, and
        /// send the LogString request.
        /// </summary>
        /// <param name="ctx"></param>
        private static void ProcessLogRequest(HttpContext ctx)
        {
            StringBuilder logString = new StringBuilder();

            foreach (string queryStringParamName in ctx.Request.QueryString)
            {
                // v1 is a special case.  The value (sans name) for v1 must be the first field in the log string
                // since it is used as the prefix by the core log string code.
                if (queryStringParamName == "v1")
                {
                    logString.Insert(0, string.Format(
                            "{0}{1}", 
                            HttpUtility.UrlDecode(ctx.Request.QueryString[queryStringParamName]), 
                            logString.Length != 0 ? "|" : ""));
                }
                else
                {
                    if (logString.Length != 0)
                    {
                        logString.Append("|");
                    }

                    logString.AppendFormat(
                        "{0}={1}",
                        queryStringParamName,
                        HttpUtility.UrlDecode(ctx.Request.QueryString[queryStringParamName]));
                }
            }

            LogStringHandler.ProcessLogLines(logString.ToString());
        }

        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest( HttpContext ctx )
        {
            HResult            hr = HResult.S_OK;

            try
            {
                StringServiceCounter.Counters.LogString2RequestsPerSecond.Increment();
                StringServiceCounter.Counters.LogString2RequestsTotal.Increment();

                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);
                
                ProcessLogRequest(ctx);

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr.LogString2: Success" );

                // Perf Change: In order to make this API screaming fast, we want to avoid
                //  making the SGINFO call to get the CurrentTitleID() in the request which 
                //  is irrelevant anyway so we hardcode it to 0 here to prevent the default lookup
                XRLUtil.SetXRLResponse( HttpContext.Current, ctx.Response, XOService.StringService, 0, hr );
            }
            catch( XRLException e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LogString2: XrlException, hr = " + e.HResult + ", msg=" + e.Message );
                hr = e.HResult;
                
                StringServiceCounter.Counters.LogStringFailedRate.Increment();
                StringServiceCounter.Counters.LogStringFailedTotal.Increment();

                throw;
            }
            catch( Exception e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.LogString2: Unexpected failure, msg=" + e.Message );
                hr = HResult.XONLINE_E_STRING_LOG_STRING_ERROR;

                StringServiceCounter.Counters.LogStringFailedRate.Increment();
                StringServiceCounter.Counters.LogStringFailedTotal.Increment();

                throw;
            }
            finally
            {
                // Log line: LogString2|QueryString|HR
                Xom.Log(XomAreaName.stringLog, "LogString2"
                    + "|" + ctx.Request.ServerVariables["QUERY_STRING"]
                    + "|" + hr
                    );
            }
        }
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }              
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\StringSvrHealthChecks.cs ===
// 
// StringSvrHealthChecks.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// StringSvr Front Door - HealthCheck
// Xbox Online Service
// 
//

using System.Text;
using System.Collections.Generic;
using System.Collections.Specialized;
using xonline.common.health;
using xonline.common.mgmt;

// trace area for StorageDomain code
[assembly: XomAreaDefinition(XomAreaName.stringSvrHealthTrace)]

namespace xonline.server.stringsvr 
{

    public class StringSvrHealthBlock : IHealthBlock
    {
        public ResourceTypeEnum ResourceType 
        { 
            get { return ResourceTypeEnum.Local; }
        }
       

        public void DoCheck(
            HealthBlockManager blockManager,
            NameValueCollection blockParams,
            HealthReport        report
        )
        {
            Xom.Trace(XomAreaName.stringSvrHealthTrace, LogLevel.L_NORMAL, "Starting StringSvr health checks");

            StringSvrHealthReport stringSvrReport = new StringSvrHealthReport(StringSvrApp.Prefixes);
            report.ExtendedReport = stringSvrReport;

            //Increment all performance counters
            foreach(KeyValuePair<string, Dictionary<string, string>> prefixEntry in StringSvrApp.Prefixes)
            {
                switch(prefixEntry.Value["type"])
                {
                    case "failure":
                        FailureMonitoringCounter failureMonitoringCounter =
                            (FailureMonitoringCounter)
                            FailureMonitoringCounter.Counters.GetInstance(prefixEntry.Key);
                        failureMonitoringCounter.FailedAPIsByServiceIdRate.Increment();
                        break;

                    case "measurement":
                        MeasurementThresholdMonitoringCounter measurementThresholdMonitoringCounter =
                            (MeasurementThresholdMonitoringCounter)
                            MeasurementThresholdMonitoringCounter.Counters.GetInstance(prefixEntry.Key);
                        measurementThresholdMonitoringCounter.MeasurementThresholdsExceededRate.Increment();
                        break;
                }
            }

            //On Success
            report.HealthStatus = HealthStatusEnum.Green;

        }
    }


    
    public class StringSvrHealthReport : IExtendedHealthReport
    {
        public SerializableDictionary< string, string> prefixOutput = new SerializableDictionary<string,string>();

        public StringSvrHealthReport(Dictionary<string, Dictionary<string, string>> prefixes)
        {
            foreach (KeyValuePair<string, Dictionary<string, string>> prefixEntry in StringSvrApp.Prefixes)
            {
                StringBuilder prefixOutputLine = new StringBuilder();
                bool firstPair = true;

                foreach(KeyValuePair<string,string> prefixSetting in prefixEntry.Value)
                {
                    if(!firstPair) prefixOutputLine.Append(";");

                    prefixOutputLine.AppendFormat("{0}={1}", prefixSetting.Key, prefixSetting.Value);
                    firstPair = false;
                }

                prefixOutput.Add(prefixEntry.Key, prefixOutputLine.ToString());
            }
        }

        //Parameter less contructor for enabling Serialization
        public StringSvrHealthReport()
        {            
        }

    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\v1titleid.cs ===
// 
// V1TitleID.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
// 
// Author: masonb
//

using System;
using System.IO;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities;

namespace xonline.server.stringsvr 
{
    public class V1TitleID : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest( HttpContext ctx )
        {
            // V1 requests allowed system messages to be checked and title IDs to be looked up on similar protocols.  The first WORD
            // distinguished the two, zero was for messages, and 1 for title ID look-ups.  In Tsunami, messages are no longer checked
            // this way and since the Dash was the only consumer and will be updated, that protocol is not supported.  Title ID look-ups
            // on the other hand shipped in many titles and we continue to support them.
            HResult             hr = HResult.S_OK;
            V1TitleIDRequest    request = new V1TitleIDRequest();
            
            try
            {
                StringLookupResponse response = new StringLookupResponse();
                
                // validate service request on XRL post
                if( !XRLUtil.IsValidXOnlineRequest( ctx.Request, XOService.StringService ) )
                {
                    // The service ID in the request is incorrect
                    throw new XRLException(HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, XEvent.Id.STRINGSVR_HACK_2, "StringSvr.V1TitleID: Request is invalid" );                                        
                }

                StringServiceCounter.Counters.TitleIDLookupRequestsPerSecond.Increment();
                StringServiceCounter.Counters.TitleIDLookupRequestsTotal.Increment();

                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);

                BinaryReader reader = new BinaryReader( ctx.Request.InputStream );
                ushort type = reader.ReadUInt16();
                if( 1 != type )
                {
                    // They are trying to make a V1 request other than a title ID look-up.
                    Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.V1TitleID: Request is invalid, non-titleID lookup" );
                    XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, HResult.XONLINE_E_MSGSVR_INVALID_REQUEST );
                    return;
                }

                // We have to reset the input stream back to the beginning or V1TitleIDRequest will be read from the wrong location.
                ctx.Request.InputStream.Position = 0;

                request.ReadFromRequest( ctx.Request );
                
                response.rgStringData = new StringData[ request.wNumTitles ];
                response.wNumStrings = request.wNumTitles;
                
                for( int iString = 0; iString < request.wNumTitles; iString++ )
                {
                    string tmpstring = "";

                    // Try to get the string from the cache
                    string strKey = StringSvrApp.BuildKey( request.rgdwTitleIDs[ iString ], 0, Locale.LocaleFromv1LanguageId(request.wLanguage) );
                    object o = ctx.Cache.Get( strKey );
                    if( null == o )
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.V1TitleID: String not found in requested language, trying default, ID=" + request.rgdwTitleIDs[ iString ].ToString("X") );
                        strKey = StringSvrApp.BuildKey( request.rgdwTitleIDs[ iString ], 0, StringSvrApp.DefaultLocale);
                        o = ctx.Cache.Get( strKey );
                        if( null == o )
                        {
                            Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.V1TitleID: String not found even after trying default, ID=" + request.rgdwTitleIDs[ iString ].ToString("X") );
                        }
                    }
                    if( null != o )
                    {
                        tmpstring = o.ToString();
                    }

                    response.rgStringData[ iString ] = new StringData();
                    response.rgStringData[ iString ].wStringSize = (ushort) tmpstring.Length;
                    response.rgStringData[ iString ].szString = tmpstring;
                }

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.V1TitleID: success" );

                XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, hr, response );
            }
            catch( XRLException e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.V1TitleID: XrlException, hr = " + e.HResult + ", msg=" + e.Message );
                hr = e.HResult;
                
                StringServiceCounter.Counters.TitleIDLookupFailedRate.Increment();
                StringServiceCounter.Counters.TitleIDLookupFailedTotal.Increment();

                throw;
            }
            catch( Exception e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.V1TitleID: Unexpected failure, msg=" + e.Message );
                hr = HResult.XONLINE_E_STRING_TITLE_ID_ERROR;

                StringServiceCounter.Counters.TitleIDLookupFailedRate.Increment();
                StringServiceCounter.Counters.TitleIDLookupFailedTotal.Increment();

                throw;
            }
            finally
            {
                // Log line: V1TitleID|Lang|Count|TitleID0|HR
                Xom.Log(XomAreaName.stringLog, "V1TitleID"
                    + "|" + request.wLanguage.ToString("X")
                    + "|" + request.wNumTitles.ToString() 
                    + "|" + ( ( (0 == request.wNumTitles) || (request.rgdwTitleIDs == null) ) ? "0" : request.rgdwTitleIDs[0].ToString("X") ) 
                    + "|" + hr);

            }
        }
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }              
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\AssemblyInfo.cs ===
using System.Reflection;

[assembly: AssemblyTitle("Xbox Live LogCollector Module")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\stringapp.cs ===
//
// app.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
//
// Author: masonb
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Security.Principal;
using System.Threading;
using System.Web;
using System.Web.Caching;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.service;
using xonline.common.user; // For vetting with ForbiddenNames
using xonline.common.mgmt;

[assembly: XomIisInstallerAttribute( Interface.stringsvr )]
[assembly: XomIisInstallerAttribute( Interface.stringsvr_int )]
[assembly: ConfigAttribute(xonline.common.config.Component.stringsvr)]

[assembly: XomAreaDefinition(XomAreaName.Reporting)]
[assembly: XomAreaDefinition(XomAreaName.stringLog)]
[assembly: XomAreaDefinition(XomAreaName.stringTrace)]

namespace xonline.server.stringsvr
{
    public class StringSvrApp : FrontEndApp
    {
        protected override void OnApplicationStart()
        {
            // Register our event handler for the CacheFlush event
            FlushCacheEvent += FlushHandler;

            ForbiddenNameList.Initialize();
        }

        public override void Application_BeginRequest( object sender, EventArgs e )
        {
            base.Application_BeginRequest( sender, e );

            // we have to do initalization here instead of Application_Start, because
            // the former isn't yet impersonating the iis application's credentials.

            if (m_fInitialized == false)
            {
                lock(this)
                {
                    if (m_fInitialized == false)
                    {
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr: Initializing..." );

                        m_id = WindowsIdentity.GetCurrent();

                        LoadConfigSettings();

                        Config.SettingChange += OnSettingChange;
                        Config.MultiSettingChange += OnMultiSettingChange;

                        // Save off the cache object so we can use it on the update thread
                        m_cache = HttpContext.Current.Cache;

                        m_logCache = new FlushCache();

                        // Setup periodic timer to call LoadStringsProc every configured # of minutes
                        m_loadStringsTimer = new Timer(LoadStringsProc, m_id, 0, m_loadStringsInterval);

                        // Setup periodic timer to call FlushStringsProc every configured # of minutes
                        m_flushStringsTimer = new Timer(FlushStringsProc, m_id, 0, m_flushStringsInterval);

                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr: Initializing...Done" );
                        m_fInitialized = true;
                    }
                }
            }
        }

        public static bool UpdateAggregateKeys(string keyString)
        {
            string [] splitKeys = keyString.Split(new char[] {' ', '|', ','});

            foreach (string key in splitKeys)
            {
                // Cannot tolerate 0 length keys. Fix the config setting.
                if (key.Length == 0)
                {
                    return false;
                }
            }

            m_aggregateKeys = new ArrayList(splitKeys);

            return true;
        }

        /// <summary>
        /// Parse a single prefix multisetting into a string dictionary of name/value pairs.
        /// If "prefix" or "type" are not found, return null and log an event.
        /// If any parameter in the line is not in the form "name=value" then throw an event
        /// and ignore the entire multisetting line.
        /// </summary>
        /// <param name="line">name1=value1;name2=value2;...etc.</param>
        /// <returns></returns>
        private static Dictionary<string,string> ParsePrefixLine(string line)
        {
            Dictionary<string,string> prefixLineValues = new Dictionary<string,string>();

            string[] prefixPairs = line.Split(';');

            foreach (string prefixPair in prefixPairs)
            {
                string[] pairNameValue = prefixPair.Split('=');
                if (pairNameValue.Length != 2)
                {
                    string errString = string.Format(
                        "Stringsvr:  Encountered a stringsvr_LogStringPrefix multisetting that " +
                        "did not conform to the correct format.  The required format is " +
                        "\"name1=value1;name2=value2;...\".  This multisetting will be skipped " +
                        "and initialization will continue, but this multisetting should be corrected.  " +
                        "Until corrected, it is possible that some log lines passed to the LogString " +
                        "API will not be handled correctly.  The multisetting value seen was \"{0}\".", line);
                    Xom.NtEvent(XEvent.Id.STRINGSVR_CONFIG_PREFIX_LINE_INVALID, errString);
                    Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString);
                    return null;
                }

                prefixLineValues.Add(pairNameValue[0], pairNameValue[1]);
            }

            if(!prefixLineValues.ContainsKey("prefix"))
            {
                string errString = string.Format(
                    "Stringsvr:  Encountered a stringsvr_LogStringPrefix multisetting that " +
                    "did not specify the prefix name.  This multisetting will be skipped and " +
                    "not loaded, but the problem in this multisetting should be identified and " +
                    "corrected.  Until corrected, it is possible that some log lines passed to " +
                    "the LogString API will not be handled correctly.  The multisetting value seen " +
                    "was \"{0}\".", 
                    line);
                Xom.NtEvent(XEvent.Id.STRINGSVR_CONFIG_PREFIX_LINE_MISSING_PREFIX, errString);
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString);
                return null;
            }

            if(!prefixLineValues.ContainsKey("type"))
            {
                string errString = string.Format(
                    "Stringsvr:  Encountered a stringsvr_LogStringPrefix multisetting that " +
                    "did not specify the prefix type.  This multisetting will be skipped and " +
                    "not loaded, but the problem in this multisetting should be identified and " +
                    "corrected.  Until corrected, it is possible that some log lines passed to " +
                    "the LogString API will not be handled correctly.  The multisetting value seen " +
                    "was \"{0}\".", 
                    line);
                Xom.NtEvent(XEvent.Id.STRINGSVR_CONFIG_PREFIX_LINE_MISSING_TYPE, errString);
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString);
                return null;
            }

            return prefixLineValues;
        }

        /// <summary>
        /// Gets an array of all stringsvr_logStringPrefix multisettings and parses them
        /// into a new dictionary, which then replaces the existing m_prefixes.
        /// </summary>
        /// <param name="prefixes"></param>
        /// <returns></returns>
        public static void UpdatePrefixes(string [] prefixes)
        {
            Dictionary<string, Dictionary<string,string>> loadedPrefixes = new Dictionary<string, Dictionary<string,string>>();
            Dictionary<string, int> loadedThresholds = new Dictionary<string, int>();

            foreach(string prefixConfig in prefixes)
            {
                Dictionary<string,string> prefixLineValues = ParsePrefixLine(prefixConfig);
                if(prefixLineValues == null)
                {
                    // ParsePrefixLine already threw an event, we can just
                    // ignore this line and continue.
                    continue;
                }

                if(loadedPrefixes.ContainsKey(prefixLineValues["prefix"]))
                {
                    string errString = string.Format(
                        "Stringsvr:  Encountered a stringsvr_LogStringPrefix multisetting that contained " +
                        "a prefix that was a duplicate of a previously seen multisetting.  " +
                        "This multisetting will be skipped and " +
                        "not loaded, but the problem in this multisetting should be identified and " +
                        "corrected.  Until corrected, it is possible that some log lines passed to " +
                        "the LogString API will not be handled correctly.  The multisetting value seen " +
                        "was \"{0}\".",
                        prefixConfig);
                    Xom.NtEvent(XEvent.Id.STRINGSVR_CONFIG_PREFIX_LINE_BAD_THRESHOLD, errString);
                    Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString);
                    continue;
                }

                if(prefixLineValues["type"] == "measurement")
                {
                    int threshold;
                    if(!Int32.TryParse(prefixLineValues["threshold"], out threshold))
                    {
                        string errString = string.Format(
                            "Stringsvr:  Encountered a stringsvr_LogStringPrefix multisetting of type "+
                            "\"measurement\" whose \"threshold\" value could not be parsed into an Int32.  " +
                            "This multisetting will be skipped and " +
                            "not loaded, but the problem in this multisetting should be identified and " +
                            "corrected.  Until corrected, it is possible that some log lines passed to " +
                            "the LogString API will not be handled correctly.  The multisetting value seen " +
                            "was \"{0}\".",
                            prefixConfig);
                        Xom.NtEvent(XEvent.Id.STRINGSVR_CONFIG_PREFIX_LINE_BAD_THRESHOLD, errString);
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString);
                        continue;
                    }

                    loadedThresholds.Add(prefixLineValues["prefix"], threshold);

                }

                loadedPrefixes.Add(prefixLineValues["prefix"], prefixLineValues);
            }

            m_prefixes = loadedPrefixes;
            m_thresholds = loadedThresholds;
        }

        public static void LoadConfigSettings()
        {
            // loadstrings interval: controls how often new strings are loaded from UODB into the string cache. Expressed in milliseconds
            m_loadStringsInterval = Config.GetUIntSetting(Setting.stringsvr_loadStringsInterval);
            if( m_loadStringsInterval < 10000)
            {
                const string errString = "Stringsvr: Invalid loadStrings Interval setting found in configuration data";
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString  );
                Xom.NtEvent( XEvent.Id.STRINGSVR_CONFIG_2, errString );
            }

            // reporting interval: controls how often loglines in the cache are flushed to reporting. Expressed in milliseconds
            m_flushStringsInterval = Config.GetUIntSetting(Setting.stringsvr_flushStringsInterval);
            if( m_flushStringsInterval < 10000)
            {
                const string errString = "Stringsvr: Invalid Reporting Interval setting found in configuration data";
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString );
                Xom.NtEvent( XEvent.Id.STRINGSVR_CONFIG_2, errString );
            }

            // Aggregate Keys
            string Keys = Config.GetSetting(Setting.stringsvr_reportingAggregateKeys);
            if (!UpdateAggregateKeys(Keys))
            {
                const string errString = "Stringsvr: Failed to parse reporting aggregate keys.";
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, errString);
                Xom.NtEvent( XEvent.Id.STRINGSVR_CONFIG_3, errString );
            }

            string[] prefixes = Config.GetMultiSetting(MultiSetting.stringsvr_LogStringPrefix);
            UpdatePrefixes(prefixes);
        }

        public static void OnSettingChange(object sender, SettingChangeEventArgs e)
        {
            switch (e.Setting)
            {
            case Setting.stringsvr_loadStringsInterval:
                if (UInt32.Parse(e.ValueNew) < 10000)
                {
                    throw new Exception("Stringsvr: LoadStrings Interval setting change is invalid. Must be greater than 10000ms. Rejected.");
                }
                m_loadStringsInterval = UInt32.Parse(e.ValueNew);
                m_loadStringsTimer.Change(m_loadStringsInterval, m_loadStringsInterval);
                break;

            case Setting.stringsvr_flushStringsInterval:
                if (UInt32.Parse(e.ValueNew) < 10000)
                {
                    throw new Exception("Stringsvr: Flush Interval setting change is invalid. Must be greater than 10000ms. Rejected.");
                }
                m_flushStringsInterval = UInt32.Parse(e.ValueNew);
                m_flushStringsTimer.Change(m_flushStringsInterval, m_flushStringsInterval);
                break;

            case Setting.stringsvr_reportingAggregateKeys:
                if (!UpdateAggregateKeys(e.ValueNew))
                {
                    throw new Exception("Stringsvr: ReportingFlushInterval setting change is invalid. Rejected.");
                }
                break;
            }
        }

        public static void OnMultiSettingChange(object sender, MultiSettingChangeEventArgs e)
        {
            if(e.MultiSetting != MultiSetting.stringsvr_LogStringPrefix) return;

            UpdatePrefixes(e.ValueNew);
        }

        public override void Application_End( object sender, EventArgs e )
        {
            // Do application termination here
            Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr: Shutting down..." );
            m_loadStringsTimer.Dispose();
            m_flushStringsTimer.Dispose();

            base.Application_End( sender, e );
        }

        public static string DefaultLocale
        {
            get { return "default"; }
        }

        public static string BuildKey( uint dwTitleID, uint dwStringID, string locale )
        {
            string key = dwTitleID + ":" + dwStringID + ":" + locale;
            return key;
        }

        public static bool VetText( string locale, string str, ref string strExact, ref string strSubstr )
        {
            // NOTE: ForbiddenNames doesn't currently have language specific functionality
            return ForbiddenNameList.VetName( str, ref strExact, ref strSubstr );
        }

        private static void LoadNewStrings( DateTime dtLastUpdateTime )
        {
            // Go to SQL and load new strings since the last update into the HTTP cache
            Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr: Loading from SQL, new strings since " + dtLastUpdateTime.ToString() );

            SqlConnection cxn = null;
            SqlCommand cmd = null;
            SqlParameter param = null;
            SqlDataReader reader = null;

            try
            {
                cxn = new SqlConnection( ConfigUtil.NpdbConnectionString );
                cxn.Open();

                cmd = new SqlCommand( "p_stringsvr_strings_get", cxn );
                cmd.CommandType = CommandType.StoredProcedure;

                param = new SqlParameter();
                param.ParameterName = "@dt_lastcheck";
                param.Direction = ParameterDirection.Input;
                param.DbType = DbType.Date;
                param.Value = dtLastUpdateTime;
                cmd.Parameters.Add( param );

                reader = cmd.ExecuteReader();

                int titleIDOrd = reader.GetOrdinal("i_title_id");
                int stringIDOrd = reader.GetOrdinal("i_string_id");
                int languageOrd = reader.GetOrdinal("vc_locale");
                int stringOrd = reader.GetOrdinal("nvc_text");
                int expireOrd = reader.GetOrdinal("dt_expire");

                while( reader.Read() )
                {
                    // Add results to the HTTP cache
                    uint dwTitleID = (uint) reader.GetInt32( titleIDOrd );
                    uint dwStringID = (uint) reader.GetInt32( stringIDOrd );
                    string language = reader.GetString( languageOrd );
                    string strText = reader.GetString( stringOrd );
                    DateTime dtExpire = (DateTime) reader.GetDateTime( expireOrd );

                    string strKey = BuildKey( dwTitleID, dwStringID, language );

                    // Cache expiration is expressed in server local time and dtExpire is UTC
                    m_cache.Insert( strKey, strText, null, dtExpire.ToLocalTime(), Cache.NoSlidingExpiration, CacheItemPriority.NotRemovable, CacheItemRemovedCallback);
                }
             }
            catch (Exception e)
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr: Loading from SQL failed" );
                Xom.NtEvent(XEvent.Id.STRINGSVR_CODE_1, e, "StringSvr: Loading from SQL failed.");

                throw;
            }
            finally
            {
                if( cmd != null )
                {
                    cmd.Cancel();
                }
                if( reader != null )
                {
                    reader.Close();
                }
                if( cxn != null )
                {
                    cxn.Close();
                }
            }
        }

        public static void CacheItemRemovedCallback(string key, object value, CacheItemRemovedReason reason)
        {
            if ((reason != CacheItemRemovedReason.Expired) &&
                (reason != CacheItemRemovedReason.Removed))
            {
                // not removed on purpose.  why was it removed?
                Xom.NtEvent(XEvent.Id.STRINGSVR_CODE_3, "Item removed from string server cache!\r\nKey = " + key + "\r\nValue = " + ((value == null) ? "" : (string)value) + "\r\nReason = " + reason.ToString());
            }
        }

        public static void FlushAggregateLogStrings()
        {
            // Get the set of cached log entries to flush from the logCache.
            Hashtable flushingLog = logCache.Flush();

            if (flushingLog.Count > 0)
            {
                foreach (DictionaryEntry de in flushingLog)
                {
                    Xom.Log(XomAreaName.Reporting, "LSA-" + (string)de.Key + "|" + ( FlushCache.Value(de.Value) ) );
                }
            }
        }

        public static void LoadStringsProc(object o)
        {
            WindowsIdentity id = (WindowsIdentity)o;
            WindowsImpersonationContext impctx = null;
            DateTime dtNow = DateTime.UtcNow;

            try
            {
                impctx = id.Impersonate();
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "LoadStringsProc called at " + m_dtLastUpdateTime.ToString());

                // Load new strings into the cache
                LoadNewStrings( m_dtLastUpdateTime );
                m_dtLastUpdateTime = dtNow;
                
                impctx.Undo();
            }
            catch(Exception e)
            {
                Xom.NtEvent( XEvent.Id.STRINGSVR_CODE_2, e, "Failed to execute LoadStringsProc.");
            }
        }

        public static void FlushStringsProc(object o)
        {
            WindowsIdentity id = (WindowsIdentity)o;
            WindowsImpersonationContext impctx = null;

            try
            {
                impctx = id.Impersonate();

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "FlushStringsProc called at " + DateTime.UtcNow.ToString());

                // Flush the log cache to reporting
                FlushAggregateLogStrings();

                impctx.Undo();
            }
            catch(Exception e)
            {
                Xom.NtEvent( XEvent.Id.STRINGSVR_CODE_2, e, "Failed to execute FlushStringsProc.");
            }
        }

        public static void FlushHandler(object o, EventArgs e)
        {
            // Flush the cache. Since we only have a handle to the HttpContext cache
            //  object, and we can't destroy or replace that cache, we are forced
            //  to cycle through the cache and remove each item individually.
            // For this reason, the FlushHandler simply refreshes the data in the cache.
            //  it does NOT ensure that expired strings are removed from the cache.
            //  Only restaring the appdomain will ensure that the cache is clean.

            m_dtLastUpdateTime = new DateTime( 2001, 1, 1, 0, 0, 0, 0 );

            // Load new strings
            LoadStringsProc(m_id);

            // Flush the cache
            FlushStringsProc(m_id);
        }

        public static FlushCache logCache
        {
            get { return m_logCache; }
        }

        public static ArrayList Keys
        {
            get { return m_aggregateKeys; }
        }

        public static Dictionary<string, Dictionary<string,string>> Prefixes
        {
            get { return m_prefixes; }
        }

        public static Dictionary<string, int> Thresholds
        {
            get { return m_thresholds; }
        }

        private static WindowsIdentity  m_id;
        private static Cache            m_cache;

        private static FlushCache       m_logCache;

        private static uint             m_loadStringsInterval = 5*60*1000; // 5 minutes default, expressed in milliseconds
        private static uint             m_flushStringsInterval = 5*60*1000;  // 5 minutes default, expressed in milliseconds
        private static ArrayList        m_aggregateKeys;
        private static Dictionary<string, Dictionary<string,string>> m_prefixes;
        private static Dictionary<string, int> m_thresholds;

        private static Timer            m_loadStringsTimer;
        private static Timer            m_flushStringsTimer;
        private static bool             m_fInitialized;
        private static DateTime         m_dtLastUpdateTime = new DateTime( 2001, 1, 1, 0, 0, 0, 0 );
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\fd\vetstring.cs ===
// 
// VetString.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// String Service Front Door
// Xbox Online Service
// 
// Author: masonb
//

using System;
using System.IO;
using System.Text;
using System.Web;
using xonline.common.config;
using xonline.common.installer;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.utilities;


[assembly: XomIisInstallerAttribute( Interface.stringsvr )]
[assembly: XomIisInstallerAttribute( Interface.stringsvr_int )]

namespace xonline.server.stringsvr 
{
    public class VetString : IHttpHandler
    {
        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //      
        //      the main entry point for http requests.
        //
        public void ProcessRequest( HttpContext ctx )
        {
            HResult             hr = HResult.S_OK; // becomes false if failures occur for individual strings
            HResult             hrLogged = HResult.S_OK; // log HR for last invalid string
            StringVet2Request   request = new StringVet2Request();

            try
            {
                StringVetResponse response = new StringVetResponse();
                
                // validate service request on XRL post
                if( !XRLUtil.IsValidXOnlineRequest( ctx.Request, XOService.StringService ) )
                {
                    // The service ID in the request is incorrect
                    throw new XRLException(HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, XEvent.Id.STRINGSVR_HACK_3, "StringSvr.VetString: Request is invalid" );                                        
                }

                StringServiceCounter.Counters.VetStringRequestsPerSecond.Increment();
                StringServiceCounter.Counters.VetStringRequestsTotal.Increment();

                CallSource.Check(VirtualInterface.stringsvr, VirtualInterface.stringsvr_int);
                
                if (ctx.Request.Path.ToLower().EndsWith(request.GetXRL()))
                {
                    request.ReadFromRequest( ctx.Request );            
                }
                else // v1Request?
                {
                    StringVetRequest v1Request = new StringVetRequest();
                    v1Request.ReadFromRequest( ctx.Request );

                    request.dwTitleID = v1Request.dwTitleID;
                    request.wNumStrings = v1Request.wNumStrings;
                    request.szLocale = Locale.LocaleFromv1LanguageId( v1Request.wLanguage );
                    request.rgStringData = v1Request.rgStringData;
                }

                response.rghrString = new uint[ request.wNumStrings ];
                response.wNumStrings = request.wNumStrings;
                
                for( int iString = 0; iString < request.wNumStrings; iString++ )
                {
                    string strExact = "";
                    string strSubstr = "";

                    if( request.rgStringData[ iString ].szString.Length > StringDefs.MAX_STRINGSVR_STRING_LEN )
                    {
                        hrLogged = response.rghrString[iString] = HResult.XONLINE_E_STRING_TOO_LONG;
                    }
                    else if( !StringSvrApp.VetText( request.szLocale, request.rgStringData[ iString ].szString, ref strExact, ref strSubstr ) )
                    {
                        hrLogged = response.rghrString[iString] = HResult.XONLINE_E_STRING_OFFENSIVE_TEXT;
                        Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.VetString: Offensive text found, string='" + request.rgStringData[iString].szString + "', Exact='" + strExact + "', Substring='" + strSubstr + "'");
                    }
                    else
                    {
                        response.rghrString[ iString ] = HResult.S_OK;
                    }
                }

                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_NORMAL, "StringSvr.VetString: Success" );

                // TODO: pass S_FALSE if there's at least one failure HR; details will be in individual HRs
                //if( hrLogged != HResult.S_OK ) { // if any strings have failed, return false; individual HRs can be checked
                //    hr = HResult.S_FALSE;
                //}
                XRLUtil.SetXRLResponse( ctx.Response, XOService.StringService, request.dwTitleID, hr, response );
            }
            catch( XRLException e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.VetString: XrlException, hr = " + e.HResult + ", msg=" + e.Message );
                hrLogged = e.HResult;
                
                StringServiceCounter.Counters.VetStringFailedRate.Increment();
                StringServiceCounter.Counters.VetStringFailedTotal.Increment();

                throw;
            }
            catch( Exception e )
            {
                Xom.Trace(XomAreaName.stringTrace, LogLevel.L_ERROR, "StringSvr.VetString: Unexpected failure, msg=" + e.Message );
                hrLogged = HResult.XONLINE_E_STRING_VET_STRING_ERROR;

                StringServiceCounter.Counters.VetStringFailedRate.Increment();
                StringServiceCounter.Counters.VetStringFailedTotal.Increment();

                throw;
            }
            finally
            {
                // Log line: VetString|TitleID|Locale|Count|HR
                Xom.Log(XomAreaName.stringLog, "VetString"
                    + "|" + request.dwTitleID.ToString("X")
                    + "|" + request.szLocale
                    + "|" + request.wNumStrings.ToString()
                    + "|" + hrLogged
                    );
            }
        }
        
        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so 
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }              
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\ModuleMgmt.cs ===
// 
// ModuleMgmt.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Log Collector Module
// Xbox Online Service
//
// Provides XMGMT command handling, output wrappers, etc.
//
//

using System;
using xonline.common.mgmt;

[assembly: XomAreaDefinition(XomAreaName.LogCollectorModuleTrace)]

namespace xonline.server.stringsvr.module
{


    // -----------------------------------------------------------------------------------
    // ModuleXomCallback class - XMgmt callback handler class
    // -----------------------------------------------------------------------------------
    public class ModuleXomCallback
    {
        private const string c_HelpText = @"
LogCollector Module help:
  healthcheck -- Returns information about the state of the module
";

        // -------------------------------------------------------------------------------
        // OnControlRequest - called by XMgmt when a control request is sent
        // -------------------------------------------------------------------------------
        public static void OnControlRequest( object sender, ControlRequestEventArgs args )
        {
            string str = null;
            try
            {
                switch(args.Command)
                {

                case "help":
                    str = c_HelpText;
                    break;

                case "healthcheck":
                    str = LogCollectorModule.HealthCheck();
                    break;

                }
            }
            catch(Exception e)
            {
                str = "Error: " + e;
            }

            if (str != null)
            {
                XomControlConnection.SendMessage( str + "\r\n\r\n", args.RequestId );
                args.Handled = true;
            }
        }
    } 


    // -------------------------------------------------------------------------------
    // Trace class - handy wrappers for making tracing prettier and easier
    //
    // Bloody Xom.Trace macro means I have to copy & paste this class to use different 
    // tracing areas.
    // -------------------------------------------------------------------------------
    internal static class Trace
    {
        internal static void Low(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.LogCollectorModuleTrace, LogLevel.L_LOW, Timestamp + String.Format(format, args));
        }

        internal static void Normal(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.LogCollectorModuleTrace, LogLevel.L_NORMAL, Timestamp + String.Format(format, args));
        }

        internal static void High(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.LogCollectorModuleTrace, LogLevel.L_HIGH, Timestamp + String.Format(format, args));
        }

        internal static void Error(string format, params object[] args)
        {
            Xom.Trace(XomAreaName.LogCollectorModuleTrace, LogLevel.L_ERROR, Timestamp + String.Format(format, args));
        }

        private static string Timestamp
        {
            get 
            {
                DateTime dt = DateTime.Now;
                return dt.ToString(@"hh:mm:ss.fff ");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\RequestCategory.cs ===
//
// RequestCategory.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Log Collector Module
// Xbox Online Service
//
// This file exposes the IFLC request categorization functionality.
//
// Author: jojohn 3/2011
//

using System;
using System.Web;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.stringsvr.module
{
    internal enum RequestCategory : int
    {
        PassThrough             = 0,
        
        // Message handlers
        LogString2              = 0x0001,
        LogBinary               = 0x0002,
        LogWeb_v1               = 0x0003,

        // Message servers
        StringSvr               = 0x10000,
        Vortex                  = 0x20000,

        // Message server entry points
        StringSvr_LogString2    = StringSvr | LogString2,
        StringSvr_LogBinary     = StringSvr | LogBinary,
        StringSvr_LogWeb_v1     = StringSvr | LogWeb_v1 ,
        Vortex_LogString2       = Vortex | LogString2,
        Vortex_LogBinary        = Vortex | LogBinary,
        Vortex_LogWeb_v1        = Vortex | LogWeb_v1 
    }

    internal static class RequestCategoryUtility 
    {
        internal static int s_MaskOfMessageHandler = 0xFFFF;

        private const string HandlerForLogString2 = "logstring2.ashx";
        private const string HandlerForLogBinary  = "logbinary.ashx";
        private const string HandlerForLogWebV1   = "logweb_v1.ashx";

        /// <summary>
        /// Determines the category associated with the request url. This category will be used
        /// to drive processing logic.
        /// </summary>
        /// <param name="ctx">Context associated with the request url that will be examined.</param>
        /// <returns>Returns the RequestCategory associated with the request.</returns>
        internal static RequestCategory GetRequestCategory(HttpContext ctx)
        {
            return GetRequestCategory(ctx.Request.Url);
        }

        /// <summary>
        /// Determines the category associated with the specified url. This category will be used
        /// to drive processing logic.
        /// </summary>
        /// <param name="url">Url to categorize.</param>
        /// <returns>Returns the request category associated with the url.</returns>
        internal static RequestCategory GetRequestCategory(Uri url)
        {
            IVirtualInterfaceInfo stringsvr;
            IVirtualInterfaceInfo vortexfd;

            if (url.Segments.Length < 3)
            {
                return RequestCategory.PassThrough;
            }

            try
            {
                RequestCategory result;

                string handler = url.Segments[2];
                string server  = url.Segments[1];

                stringsvr = Config.GetVirtualInterface(VirtualInterface.stringsvr);
                vortexfd = Config.GetVirtualInterface(VirtualInterface.vortexfd);

                // identify the request handler
                if (handler.StartsWith(HandlerForLogString2, StringComparison.OrdinalIgnoreCase))
                {
                    result = RequestCategory.LogString2;
                }
                else if (handler.StartsWith(HandlerForLogBinary, StringComparison.OrdinalIgnoreCase))
                {
                    result = RequestCategory.LogBinary;
                }
                else if (handler.StartsWith(HandlerForLogWebV1, StringComparison.OrdinalIgnoreCase))
                {
                    result = RequestCategory.LogWeb_v1;
                }
                else
                {
                    return RequestCategory.PassThrough;
                }

                // identify the request server
                if (String.Equals(server, stringsvr.VDir + "/", StringComparison.OrdinalIgnoreCase))
                {
                    result = (RequestCategory)((int)result | (int)RequestCategory.StringSvr);
                }
                else if (String.Equals(server, vortexfd.VDir + "/", StringComparison.OrdinalIgnoreCase))
                {
                    result = (RequestCategory)((int)result | (int)RequestCategory.Vortex);
                }
                else
                {
                    return RequestCategory.PassThrough;
                }

                return result;
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.LOGCOLLECTOR_MODULE_URL_PROCESSING_FAILED, e, "Unable to determine request category, the request will not be processed by this module.");
            }

            return RequestCategory.PassThrough;
        }

        /// <summary>
        /// Determines whether the specified RequestCategory value is associated with the
        /// supplied handler.
        /// </summary>
        /// <param name="val">Value to check.</param>
        /// <param name="handler">Handler to check against.  This parameter cannot have a server associated with it.</param>
        /// <returns>Returns true when the value is associated with the specified handler; otherwise false.</returns>
        internal static bool IsMessageHandler(this RequestCategory val, RequestCategory handler)
        {
            if (handler.IsMessageServerDefined())
            {
                throw new ArgumentException("handler cannot container server information: " + handler, "handler");
            }

            return ((int)val & s_MaskOfMessageHandler) == (int)handler;
        }

        /// <summary>
        /// Determines whether the specified RequestCategory value is associated with the
        /// supplied server.
        /// </summary>
        /// <param name="val">Value to check.</param>
        /// <param name="server">Server to check against.  This parameter cannot have a handler associated with it.</param>
        /// <returns>Returns true when the value is associated with the specified server; otherwise false.</returns>
        internal static bool IsMessageServer(this RequestCategory val, RequestCategory server)
        {
            if (server.IsMessageHandlerDefined())
            {
                throw new ArgumentException("server cannot contain handler information: " + server, "server");
            }

            return (int)server == ((int)val & (int)server);
        }

        /// <summary>
        /// Determines whether the specified value has any handler defined.
        /// </summary>
        /// <param name="val">Value to check.</param>
        /// <returns>Returns true when the value has a handler associated with it; otherwise false.</returns>
        internal static bool IsMessageHandlerDefined(this RequestCategory val)
        {
            return 0 != (s_MaskOfMessageHandler & (int)val);
        }

        /// <summary>
        /// Determines whether the specified value has any server defined.
        /// </summary>
        /// <param name="val">Value to check.</param>
        /// <returns>Returns true when the value has a server associated with it; otherwise false.</returns>
        internal static bool IsMessageServerDefined(this RequestCategory val)
        {
            int inverseMask = -1 ^ s_MaskOfMessageHandler;

            return 0 != (inverseMask & (int)val);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\PerfCounters.cs ===
// 
// PerfCounters.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Log Collector Module
// Xbox Online Service
// 
// Author: darrenan 3/2009
//

using System.ComponentModel;
using System.Diagnostics;
using xonline.common.mgmt;

namespace xonline.server.stringsvr.module
{
    [RunInstaller(true)]
    public class LogCollectorModuleCountersInstall : XomPerformanceCounterInstall {}

    [XomPerformanceCounterCategoryAttr( "LogCollector Module", "Xbox Live - Log Collector Module Performance Counters " )]
    public class LogCollectorModuleCounters : XomPerformanceCounterCategory
    {
        static public LogCollectorModuleCounters Counters = new LogCollectorModuleCounters();

        public virtual LogCollectorModuleCounters this[string instance]
        {
            get
            {
                return (LogCollectorModuleCounters) GetInstance(instance);
            }
        }

        //Instance Counters
        [XomPerformanceCounterAttr(
             "LogCollectorModule: Total instances",
             "Number of active instance of this LogCollectorModule",
             PerformanceCounterType.NumberOfItems64)]
         public PerformanceCounter TotalInstances;


        //Requests Counters
        [XomPerformanceCounterAttr(
             "Requests: In Progress",
             "Number of requests in progress",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RequestsInProgress;

        [XomPerformanceCounterAttr(
             "Requests: Per Sec",
             "Number of requests completed per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RequestsPerSec;

        [XomPerformanceCounterAttr(
            "Requests: Total Requests",
            "Total Requests Processed",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RequestsTotal;

        [XomPerformanceCounterAttr(
             "Time: BeginRequest Avg. Execution Time",
             "Average BeginRequest() execution time in milliseconds",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageBeginExecutionTime;

        [XomPerformanceCounterAttr(
             "Time: BeginRequest Avg. Execution Time Base",
             "Base for the average BeginRequest() excution time",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageBeginExecutionTimeBase;

        [XomPerformanceCounterAttr(
             "Time: EndRequest Avg. Execution Time",
             "Average EndRequest() execution time in milliseconds",
         PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageEndExecutionTime;

        [XomPerformanceCounterAttr(
             "Time: EndRequest Avg. Execution Time Base",
             "Base for the average EndRequest() excution time",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageEndExecutionTimeBase;

        //Response Counters

        [XomPerformanceCounterAttr(
            "Response: 200 OKs Per Second",
            "Response: 200 OKs Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter Response200PerSecond;

        [XomPerformanceCounterAttr(
            "Response: 200 OKs Total",
            "Response: 200 OKs Total",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Response200Total;

        [XomPerformanceCounterAttr(
            "Responses: Non 200 Per Second",
            "Responses: Non 200 Per Second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ResponseOtherPerSecond;

        [XomPerformanceCounterAttr(
            "Responses: Non 200 Total Errors",
            "Responses: Non 200 Total Errors",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ResponseOtherTotal;

        // Digest counters
        [XomPerformanceCounterAttr(
            "Request: Missing Digest Total Errors",
            "Total requests to the LogCollectorModule that did not contain an X-IFLCDIGEST header",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter MissingDigestTotal;

        [XomPerformanceCounterAttr(
            "Request: Missing Digest Per Second",
            "Requests per second to the LogCollectorModule that did not contain an X-IFLCDIGEST header",
            PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter MissingDigestPerSecond;

        [XomPerformanceCounterAttr(
            "Request: Invalid Digest Total Errors",
            "Total requests to the LogCollectorModule that contained an invalid digest in the X-IFLCDIGEST header",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter InvalidDigestTotal;

        [XomPerformanceCounterAttr(
            "Request: Invalid Digest Per Second",
            "Requests per second to the LogCollectorModule that contained an invalid digest in the X-IFLCDIGEST header",
            PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter InvalidDigestPerSecond;
    } 


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\LogCollectorModule.cs ===
//
// LogCollectorModule.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Log Collector Module
// Xbox Online Service
//
// Translates the input URL request to a StringSvrFD call.
//
// Author: darrenan 3/2009
//

using System;
using System.Globalization;
using System.IO;
using System.Text;
using System.Web;
using System.Net;
using System.Threading;
using System.Diagnostics;
using System.Text.RegularExpressions;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.utilities2;

[assembly: XomAreaDefinition(XomAreaName.LogCollectorModuleLog)]


namespace xonline.server.stringsvr.module
{
    // "a reference to a volatile field will not be treated as volatile"
    #pragma warning disable 420

    // -----------------------------------------------------------------------------------
    // LogCollectorModule class - the main http module class
    // -----------------------------------------------------------------------------------
    public class LogCollectorModule : IHttpModule
    {

        #region Construction / Handling / Dispose

        public LogCollectorModule()
        {
            StaticInit();

            Trace.Normal("----------------------------------------");
            Trace.Normal("LogCollectorModule instantiated");
            Trace.Normal("----------------------------------------");

            LogCollectorModuleCounters.Counters[AppPoolId].TotalInstances.RawValue = _RefCount;
        }

        public String ModuleName
        {
            get { return "LogCollectorModule"; }
        }

        public void Dispose()
        {
            Trace.Normal("----------------------------------------");
            Trace.Normal("LogCollectorModule disposed");
            Trace.Normal("----------------------------------------");

            InstanceDispose();

        }


        // -------------------------------------------------------------------------------
        // InstanceDispose - the once-per-object-instance dispose routine
        // -------------------------------------------------------------------------------
        private void InstanceDispose()
        {
            if (_IsDisposed)
                return;

            lock (_InstanceDisposeLock)
            {
                if (_IsDisposed)
                    return;


                int refcount = Interlocked.Decrement(ref _RefCount);
                LogCollectorModuleCounters.Counters[AppPoolId].TotalInstances.RawValue = _RefCount;

                if (refcount == 0)
                {
                    XomLoggingControl.Close();
                    PerformanceCounter.CloseSharedResources();
                }

                _IsDisposed = true;
            }
        }


        #endregion Construction / Handling / Dispose



        #region Init

        // -------------------------------------------------------------------------------
        // Init - called by ASP.NET upon init time. We should register for callbacks here if
        // we want to do real work.
        // -------------------------------------------------------------------------------
        public void Init(HttpApplication application)
        {
            Trace.Normal("LogCollectorModule.Init called");

            // Event hooks always need to be added to the application state
            application.BeginRequest += Application_BeginRequest;
            application.EndRequest += Application_EndRequest;
        }


        // -------------------------------------------------------------------------------
        // StaticInit - the once-per-module init routine
        // -------------------------------------------------------------------------------
        private static void StaticInit()
        {
            if (_RefCount > 0)
            {
                // Add ourself and get out, someone else has already done the initialization
                Interlocked.Increment(ref _RefCount);
                return;
            }

            // We may be one of the first people to come in. Whether we are or not, we want to
            // block until initialization is done.

            lock (_LockObject)
            {
                if (_RefCount > 0)
                {
                    // Someone else snuck in
                    Interlocked.Increment(ref _RefCount);
                    return;
                }

                try
                {

                    // Our events should not retrieve SGInfo. Duh.
                    EventBuilder.ShowSGInfo = false;

                    Trace.Normal("----------------------------------------");
                    Trace.Normal("Initializing XOM controls & performance counters ");
                    Trace.Normal("----------------------------------------");

                    // FEAPP normally does these
                    XomLoggingControl.Init();
                    XomPerformanceCounterCategory.InitPerfCtrs();

                    Trace.Normal("----------------------------------------");
                    Trace.Normal("LogCollectorModule.StaticInit running");
                    Trace.Normal("----------------------------------------");

                    // Tell XMgmt that we want our handler called for control requests
                    XomControl.ControlRequestEvent += ModuleXomCallback.OnControlRequest;
                }
                catch (Exception e)
                {
                    Xom.NtEvent(XEvent.Id.LOGCOLLECTOR_MODULE_INVALID_CONFIGURATION, e,
                               "Error initializing the LogCollectorModule base components.");
                    throw;
                }

                try
                {
                    //Load any info we want from DB

                    //// Register for setting changes
                    //Config.SettingChange += OnSettingsChanged;

                    // Done!
                    Interlocked.Increment(ref _RefCount);

                    Xom.NtEvent(XEvent.Id.LOGCOLLECTOR_MODULE_CONFIG_INFO, "Successfully initialized the LogCollector module.");
                }
                catch (Exception e)
                {
                  Xom.NtEvent(XEvent.Id.LOGCOLLECTOR_MODULE_INVALID_CONFIGURATION, e,
                               "Error initializing the LogCollectorModule specific components.");

                    // Import to release resources, unsubscribe from xmgmt callbacks and clean
                    // up anything we did above. I really hate xmgmt.
                    XomLoggingControl.Close();
                    PerformanceCounter.CloseSharedResources();
                    XomControl.ControlRequestEvent -= ModuleXomCallback.OnControlRequest;

                    throw;
                }
            }
        }




        #endregion Init




        #region HTTP methods



        private void Application_BeginRequest(object source, EventArgs e)
        {
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            //cast the sender to an HttpApplication object
            HttpApplication application = (HttpApplication) source;
            HttpContext ctx = application.Context;
            RequestCategory rc;
                        
            if (ctx == null)
            {
                Trace.High("Application_BeginRequest: HttpContext is null, aborting");
                return;
            }

            try
            {
                // @@@ It's a bit dicey that we're failing open -- maybe we should do some
                // more rigorous checks, and if anything is "odd" let's block the request? 
                if (RequestCategory.PassThrough == (rc = RequestCategoryUtility.GetRequestCategory(ctx)))
                    return;

                LogCollectorModuleCounters.Counters.RequestsInProgress.Increment();

                Trace.Normal("Application_BeginRequest: Processing LogCollector Call");

                //  FixedResponses are used in dire times. In those cases, we dont want to spend cycles calculating the FilePath. Hence using String.Empty
                if (ReturnFixedResponse(ctx))
                {
                    Trace.Normal("Application_BeginRequest: Returning fixed response " + ctx.Response.StatusCode);
                    return;
                }

                Trace.Normal("Application_BeginRequest: Query string = " + ctx.Request.ServerVariables["QUERY_STRING"]);

                //  Supply headers for protocol compliance with sls routing service
                SupplyRoutingHeaders(application);

                //  When we aren't dealing with LogWeb_v1 traffic, make sure we have a valid signature.
                if(!rc.IsMessageHandler(RequestCategory.LogWeb_v1) && !VerifySignature(ctx.Request))
                {
                    Trace.Normal("Application_BeginRequest:  Signature was not verified, aborting request.");
                    application.Response.StatusCode = Config.GetIntSetting(Setting.logCollectorModule_badDigestResponseCode);
                    application.CompleteRequest();
                    return;
                }

                if (rc.IsMessageServer(RequestCategory.StringSvr))
                {
                    RouteToVortex(application);
                }
            }
            catch (Exception ex)
            {
                HResult hr = HandleErrors(application.Context, ex);
                Log("STMERR", ctx , hr);

                //Don't return any indication of a problem to the caller.
                application.Response.StatusCode = (int)HttpStatusCode.OK;

                //Bypass AuthSG
                application.CompleteRequest();
            }
            finally
            {
                LogCollectorModuleCounters.Counters.AverageBeginExecutionTimeBase.Increment();
                LogCollectorModuleCounters.Counters.AverageBeginExecutionTime.IncrementBy(timeElapsed.TimeElapsed * 1000);
            }
        }
                
        private void Application_EndRequest(object source, EventArgs e)
        {
            HttpApplication application = (HttpApplication) source;
            HttpContext ctx = application.Context;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

            UpdatePerfCounters(ctx, timeElapsed);
        }

        #endregion HTTP methods

        private const string API_VER_HEADER = "x-xbl-contract-version";
        private const uint DIGEST_BYTE_LEN = 20;
        private const uint DIGEST_ENCODED_LEN = 40;
        
        /// <summary>
        /// Retrieve the encoded signature from the request header, and convert it into the raw
        /// signature bytes.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private static byte[] GetSignatureBytesFromRequest(HttpRequest request)
        {
            // Do we have the header?
            if(request.Headers[digestHeaderName] == null)
            {
                LogCollectorModuleCounters.Counters.MissingDigestTotal.Increment();
                LogCollectorModuleCounters.Counters.MissingDigestPerSecond.Increment();
                return null;
            }

            // Get the encoded signature.
            string signatureHeader = request.Headers[digestHeaderName];

            // Make sure it has the correct length (20 bytes == 40 hex digits)
            if(signatureHeader.Length != DIGEST_ENCODED_LEN)
            {
                LogCollectorModuleCounters.Counters.InvalidDigestTotal.Increment();
                LogCollectorModuleCounters.Counters.InvalidDigestPerSecond.Increment();
                return null;
            }

            // Using Blob to parse the string versus the custom code that was here before 
            // is 20X faster.
            Blob signatureBytes;
            if (!Blob.TryParse(signatureHeader, out signatureBytes))
            {
                LogCollectorModuleCounters.Counters.InvalidDigestTotal.Increment();
                LogCollectorModuleCounters.Counters.InvalidDigestPerSecond.Increment();
                return null;
            }

            return (byte[])signatureBytes;
        }

        
        private static UTF8Encoding queryStringEncoder = new UTF8Encoding();

        /// <summary>
        /// Verify that this request has a valid signature.
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        private static bool VerifySignature(HttpRequest request)
        {
            // Retrieve the signature.
            byte[] signature = GetSignatureBytesFromRequest(request);
            if(signature == null)
            {
                return false;
            }

            // For a GET, we use the query string for the signature.
            // For a POST, we use the body for the signature.
            // We're actually just going to use the query string, if present, then
            // the post body, if present, and ignore the actual verb.

            MemoryStream queryStringStream = new MemoryStream(1000);
            
            if (!String.IsNullOrEmpty(request.Url.Query))
            {
                //  Read the query string into a memory stream as UTF8 bytes
                string queryString = request.Url.Query.Substring(1);
                byte[] queryStringBytes = queryStringEncoder.GetBytes(queryString);
                queryStringStream.Write(queryStringBytes, 0, queryStringBytes.Length);
            }

            if (request.ContentLength > 0)
            {
                // Read the body, reset stream
                // @@@ request.ContentLength or request.TotalBytes?
                byte[] queryStringBytes = request.BinaryRead(request.ContentLength);
                request.InputStream.Seek(0, SeekOrigin.Begin);
                queryStringStream.Write(queryStringBytes, 0, queryStringBytes.Length);
            }

            bool isValidSignature = LogCollectorCrypto.VerifySignature(signature, queryStringStream);

            if(!isValidSignature)
            {
                LogCollectorModuleCounters.Counters.InvalidDigestTotal.Increment();
                LogCollectorModuleCounters.Counters.InvalidDigestPerSecond.Increment();
            }

            return isValidSignature;
        }

        /// <summary>
        /// Check to see if we're returning hard-coded response codes instead of really processing requests.
        /// </summary>
        /// <param name="ctx"></param>
        /// <returns></returns>
        private static bool ReturnFixedResponse(HttpContext ctx)
        {
            string responseValue = Config.GetSetting(Setting.logCollectorModule_returnFixedResponseCodeForAllCalls);
            if (String.IsNullOrEmpty(responseValue))
            {
                return false;
            }

            try
            {
                ctx.Response.StatusCode = Convert.ToInt32(responseValue);
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.LOGCOLLECTOR_MODULE_INVALID_CONFIGURATION, e, ("Incorrect value for setting logCollectorModule_returnFixedResponseCodeForAllCalls=" + responseValue));
                return false;
            }

            return true;
        }

        /// <summary>
        /// Modifies the request header collection to include SLS Routing Service required 
        /// headers.
        /// </summary>
        /// <param name="app">Provides access to request modifying API.</param>
        private static void SupplyRoutingHeaders(HttpApplication app)
        {
            if (string.IsNullOrEmpty(app.Request.Headers[API_VER_HEADER]))
            {
                app.Request.Headers[API_VER_HEADER] = "1";
            }
        }        

        /// <summary>
        /// Modifies the request path to point to vortexfd instead of stringsvr (msgserver).
        /// </summary>
        /// <param name="application">Provides access to request modifying API.</param>
        private static void RouteToVortex(HttpApplication app)
        {
            // usually works out to /vortexfd/logstring2.ashx
            string query = app.Request.Url.Query;
            string path  = string.Format("/{0}/{1}",
                    Config.GetVirtualInterface(VirtualInterface.vortexfd).VDir,
                    app.Request.Url.Segments[2]);

            Trace.Normal("Rewriting URL. Old Url={0} New Url={1}", app.Request.Url, path);

            app.Context.RewritePath(
                    path, 
                    app.Request.PathInfo, 
                    query.StartsWith("?") ? query.Substring(1) : query);
        }

        // -------------------------------------------------------------------------------
        // HandleError - called to handle exceptions
        // -------------------------------------------------------------------------------

        private static HResult HandleErrors(HttpContext ctx, Exception ex)
        {
            if (ctx == null || ex == null)
            {
                return HResult.S_OK;
            }

            StringBuilder eventText = new StringBuilder();
            eventText.Append("\r\n------------");
            eventText.Append("\r\nRequest URL Path: ");
            try
            {
                eventText.Append(ctx.Request.Url.ToString());
            }
            catch (UriFormatException)
            {
                eventText.Append("null");
            }
            eventText.Append("\r\n------------");

            string msg = "";
            bool fireEvent = true;
            HResult hr = HResult.XONLINE_E_STRING_ERROR;
            XEvent.Id eventId = XEvent.Id.LOGCOLLECTOR_DEFAULT_EVENT;


            try
            {
                Trace.Error("LogCollectorModule: Unhandled exception: {0}", ex.Message);

                msg = ex.Message;

                if (ex is ExceptionWithEvent)
                {
                    eventId = ((ExceptionWithEvent)ex).EventId;

                    // grab the hr
                    if (ex is XRLException)
                    {
                        hr = ((XRLException)ex).HResult;
                    }
                }
                else if (ex is ExceptionWithoutEvent)
                {
                    fireEvent = false;

                }
            }
            catch (Exception ex2)
            {
                eventText.Append("\r\n******************\r\n");
                eventText.Append("A new exception was thrown in the global error handler!\r\n");
                eventText.Append(ex2.ToString());
                eventText.Append("\r\n******************\r\n");

                fireEvent = true;
            }
            finally
            {
                msg = msg + eventText;
                Trace.Error("LogCollectorModule: Error: {0}", msg);

                if (fireEvent)
                {
                    Xom.NtDataDynEvent(eventId, ex, null, msg);
                }

            }

            return hr;
        }


        private static void UpdatePerfCounters(HttpContext ctx, XomRequestTimeElapsed timeElapsed)
        {
            int statusCode = ctx.Response.StatusCode;

            LogCollectorModuleCounters.Counters.RequestsInProgress.Decrement();
            LogCollectorModuleCounters.Counters.RequestsPerSec.Increment();
            LogCollectorModuleCounters.Counters.RequestsTotal.Increment();

            LogCollectorModuleCounters.Counters.AverageEndExecutionTimeBase.Increment();
            LogCollectorModuleCounters.Counters.AverageEndExecutionTime.IncrementBy(timeElapsed.TimeElapsed * 1000);

            //Response Counters
            if ( statusCode == (int) HttpStatusCode.OK)
            {
                //Counters: Update 200
                LogCollectorModuleCounters.Counters.Response200PerSecond.Increment();
                LogCollectorModuleCounters.Counters.Response200Total.Increment();
            }
            else
            {
                //Counters: Update Others
                LogCollectorModuleCounters.Counters.ResponseOtherPerSecond.Increment();
                LogCollectorModuleCounters.Counters.ResponseOtherTotal.Increment();
            }
        }
                
        private static void Log(string key, HttpContext ctx, HResult hr)
        {
            XomRequestTimeElapsed elapsedTime = new XomRequestTimeElapsed();

            string urlpath = string.Empty;
            string urlport = string.Empty;

            try
            {
                urlpath = ctx.Request.Url.AbsolutePath;
                urlport = ctx.Request.Url.Port.ToString();
            }
            catch(UriFormatException)
            {
            }
            // Logfile
            string[] fields = new string[]
            {
                // Log fields:
                // LCM | clientip | rawurl
                // | storage path | redirected url | redirected Port
                // | statuscode | cache header | hr | time elapsed(ms)

                key,
                ctx.Request.UserHostAddress,
                ctx.Request.RawUrl,
                urlpath,
                urlport,
                ctx.Response.StatusCode.ToString(),
                hr.ToString(),
                elapsedTime.MillisecondsElapsed.ToString()
            };
            string szLog = String.Join("|", fields);


            //logging
            Xom.Log(XomAreaName.LogCollectorModuleLog, szLog);

        }

        // -------------------------------------------------------------------------------
        // Status - are we in a good state?
        // -------------------------------------------------------------------------------
        internal static string HealthCheck()
        {
            StringBuilder sb = new StringBuilder();

            sb.Append("\r\n");
            sb.AppendFormat("AppPoolId             : {0}\r\n", AppPoolId);
            sb.AppendFormat("Returning fixed value : {0}\r\n", Config.GetSetting(Setting.logCollectorModule_returnFixedResponseCodeForAllCalls));
            sb.AppendFormat("Bad Digest Response   : {0}\r\n", Config.GetSetting(Setting.logCollectorModule_badDigestResponseCode));

            return sb.ToString();
        }

        #region Properties

        // -------------------------------------------------------------------------------
        // Static properties to access HttpApplication, HttpContext, etc items
        // -------------------------------------------------------------------------------

        internal static string AppPoolId
        {
            get
            {
                if (_AppPoolId == null)
                {
                    // Get name of app pool to use as instance name in global counters. No
                    // need to worry about multi-threaded problems here, we can stomp this all
                    // we want. We have to use the env variable because the httprequest isn't
                    // available when we are initializing some perf counters.
                    _AppPoolId = Environment.GetEnvironmentVariable("APP_POOL_ID");
                }
                return _AppPoolId;
            }
        }

        // Static vars

        private static readonly object _LockObject = new object();
        private static volatile int _RefCount;
        private static string _AppPoolId;
        public static volatile Regex FilePathRegex;

        private const string digestHeaderName = "X-IFLCDIGEST";

        // Instance vars

        private readonly object _InstanceDisposeLock = new object();
        private volatile bool _IsDisposed;

        #endregion Properties
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\Module\LogCollectorCrypto.cs ===
﻿using System.IO;
using System.Security.Cryptography;


namespace xonline.server.stringsvr.module
{
    internal class LogCollectorCrypto
    {

        private static readonly byte[] keyMask = new byte[] 
        {
            0xbb, 0xe9, 0x98, 0x69, 0xb9, 0x8d, 0xc8, 0xfd, 
            0x8a, 0x69, 0x19, 0xb9, 0x09, 0x88, 0xc8, 0xfd,
            0x2b, 0x09, 0xd9, 0x69, 0x39, 0xa9
        };
        private static readonly byte[] protectedKey = new byte[]
        {
            0xa7, 0x80, 0xa9, 0x04, 0x22, 0x4f, 0xd6, 0x1e, 0x03, 0x5f, 0x51, 0x02, 0xae, 0x34, 0xcb, 0x7a
        };

        private static byte[] GetKey()
        {
            byte[] signingKey = new byte[protectedKey.Length];

            for (int i = 0; i < protectedKey.Length; i++)
            {
                signingKey[i] = (byte)(keyMask[i] ^ protectedKey[i]);
            }

            return signingKey;
        }

        public static bool VerifySignature(byte[] signature, Stream content)
        {
            using (HMACSHA1 hasher = new HMACSHA1(GetKey(), true))
            {
                content.Seek(0, SeekOrigin.Begin);
                byte[] computedSignature = hasher.ComputeHash(content);

                if (computedSignature.Length != signature.Length)
                {
                    return false;
                }

                for (uint currentByte = 0; currentByte < computedSignature.Length; ++currentByte)
                {
                    if (signature[currentByte] != computedSignature[currentByte])
                    {
                        return false;
                    }
                }
            }
            return true;
        }

        public static string CreateSignature(Stream content)
        {
            using (HMACSHA1 hasher = new HMACSHA1(GetKey(), true))
            {
                byte[] computedSignature = hasher.ComputeHash(content);

                System.Text.StringBuilder sb = new System.Text.StringBuilder();
                foreach (byte chunk in computedSignature)
                {
                    sb.Append(chunk.ToString("X2"));
                }

                return sb.ToString();
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\dvt\moduletest.cs ===
using System;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Threading;
using System.Web;
using System.Net;
using System.Net.Cache;
using System.Xml;
using System.Collections.Generic;


using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;

using xonline.server.stringsvr.module;

namespace xonline.server.stringsvr.test.dvt 
{
    [TestGroup, DVT]
    public class IFLCRequestCategory : TestNode
    {
        [TestCase]
        public void Identify_StringSvr_LogString2()
        {
            Uri uri = new Uri("http://piflc.xbox.com/msgserver/LogString2.ashx");
            RequestCategory rc;

            rc = RequestCategoryUtility.GetRequestCategory(uri);

            if (rc != RequestCategory.StringSvr_LogString2)
            {
                throw new Exception(string.Format("Unexpected RequestCategory returned: {0} for url: {1}", rc, uri));
            }
        }

        [TestCase]
        public void Identify_StringSvr_LogBinary()
        {
            Uri uri = new Uri("http://piflc.xbox.com/msgserver/LogBinary.ashx");
            RequestCategory rc;

            rc = RequestCategoryUtility.GetRequestCategory(uri);

            if (rc != RequestCategory.StringSvr_LogBinary)
            {
                throw new Exception(string.Format("Unexpected RequestCategory returned: {0} for url: {1}", rc, uri));
            }
        }

        [TestCase]
        public void Identify_StringSvr_LogWeb_v1()
        {
            Uri uri = new Uri("http://piflc.xbox.com/msgserver/LogWeb_v1.ashx");
            RequestCategory rc;

            rc = RequestCategoryUtility.GetRequestCategory(uri);

            if (rc != RequestCategory.StringSvr_LogWeb_v1)
            {
                throw new Exception(string.Format("Unexpected RequestCategory returned: {0} for url: {1}", rc, uri));
            }
        }

        [TestCase]
        public void Identify_Vortex_LogString2()
        {
            Uri uri = new Uri("http://piflc.xbox.com/vortex/LogString2.ashx");
            RequestCategory rc;

            rc = RequestCategoryUtility.GetRequestCategory(uri);

            if (rc != RequestCategory.Vortex_LogString2)
            {
                throw new Exception(string.Format("Unexpected RequestCategory returned: {0} for url: {1}", rc, uri));
            }
        }

        [TestCase]
        public void Identify_Vortex_LogBinary()
        {
            Uri uri = new Uri("http://piflc.xbox.com/vortex/LogBinary.ashx");
            RequestCategory rc;

            rc = RequestCategoryUtility.GetRequestCategory(uri);

            if (rc != RequestCategory.Vortex_LogBinary)
            {
                throw new Exception(string.Format("Unexpected RequestCategory returned: {0} for url: {1}", rc, uri));
            }
        }

        [TestCase]
        public void Identify_Vortex_LogWeb_v1()
        {
            Uri uri = new Uri("http://piflc.xbox.com/vortex/LogWeb_v1.ashx");
            RequestCategory rc;

            rc = RequestCategoryUtility.GetRequestCategory(uri);

            if (rc != RequestCategory.Vortex_LogWeb_v1)
            {
                throw new Exception(string.Format("Unexpected RequestCategory returned: {0} for url: {1}", rc, uri));
            }
        }

        [TestCase]
        public void Server_StringSvr()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.StringSvr_LogString2,
                RequestCategory.StringSvr_LogWeb_v1
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                RequestCategory.Vortex_LogBinary,
                RequestCategory.Vortex_LogString2,
                RequestCategory.Vortex_LogWeb_v1
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageServer(RequestCategory.StringSvr))
                {
                    throw new Exception("Category did not pass server check: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageServer(RequestCategory.StringSvr))
                {
                    throw new Exception("Category should not pass server check: " + cat);
                }
            }
        }

        [TestCase]
        public void Server_Vortex()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.Vortex_LogBinary,
                RequestCategory.Vortex_LogString2,
                RequestCategory.Vortex_LogWeb_v1
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.StringSvr_LogString2,
                RequestCategory.StringSvr_LogWeb_v1
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageServer(RequestCategory.Vortex))
                {
                    throw new Exception("Category did not pass server check: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageServer(RequestCategory.Vortex))
                {
                    throw new Exception("Category should not pass server check: " + cat);
                }
            }
        }

        [TestCase]
        public void Handler_LogString2()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.StringSvr_LogString2,
                RequestCategory.Vortex_LogString2
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.Vortex_LogBinary,
                RequestCategory.StringSvr_LogWeb_v1,
                RequestCategory.Vortex_LogWeb_v1
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageHandler(RequestCategory.LogString2))
                {
                    throw new Exception("Category did not pass handler check: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageHandler(RequestCategory.LogString2))
                {
                    throw new Exception("Category should not pass handler check: " + cat);
                }
            }
        }

        [TestCase]
        public void Handler_LogBinary()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.Vortex_LogBinary
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                RequestCategory.StringSvr_LogString2,
                RequestCategory.Vortex_LogString2,
                RequestCategory.StringSvr_LogWeb_v1,
                RequestCategory.Vortex_LogWeb_v1
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageHandler(RequestCategory.LogBinary))
                {
                    throw new Exception("Category did not pass handler check: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageHandler(RequestCategory.LogBinary))
                {
                    throw new Exception("Category should not pass handler check: " + cat);
                }
            }
        }

        [TestCase]
        public void Handler_LogWeb_v1()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.StringSvr_LogWeb_v1,
                RequestCategory.Vortex_LogWeb_v1
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.Vortex_LogBinary,
                RequestCategory.StringSvr_LogString2,
                RequestCategory.Vortex_LogString2,
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageHandler(RequestCategory.LogWeb_v1))
                {
                    throw new Exception("Category did not pass handler check: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageHandler(RequestCategory.LogWeb_v1))
                {
                    throw new Exception("Category should not pass handler check: " + cat);
                }
            }
        }

        [TestCase]
        public void Handler_Defined()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.Vortex_LogBinary,
                RequestCategory.StringSvr_LogString2,
                RequestCategory.Vortex_LogString2,
                RequestCategory.StringSvr_LogWeb_v1,
                RequestCategory.Vortex_LogWeb_v1,

                RequestCategory.LogString2,
                RequestCategory.LogBinary,
                RequestCategory.LogWeb_v1,
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                
                RequestCategory.StringSvr,
                RequestCategory.Vortex
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageHandlerDefined())
                {
                    throw new Exception("Handler should be defined for: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageHandlerDefined())
                {
                    throw new Exception("Handler should not be defined for: " + cat);
                }
            }
        }

        [TestCase]
        public void Server_Defined()
        {
            RequestCategory[] expected = new RequestCategory[]
            {
                RequestCategory.StringSvr_LogBinary,
                RequestCategory.Vortex_LogBinary,
                RequestCategory.StringSvr_LogString2,
                RequestCategory.Vortex_LogString2,
                RequestCategory.StringSvr_LogWeb_v1,
                RequestCategory.Vortex_LogWeb_v1,

                RequestCategory.StringSvr,
                RequestCategory.Vortex
            };

            RequestCategory[] unexpected = new RequestCategory[]
            {
                RequestCategory.PassThrough,
                
                RequestCategory.LogString2,
                RequestCategory.LogBinary,
                RequestCategory.LogWeb_v1,
            };

            foreach (var cat in expected)
            {
                if (!cat.IsMessageServerDefined())
                {
                    throw new Exception("Server should be defined for: " + cat);
                }
            }

            foreach (var cat in unexpected)
            {
                if (cat.IsMessageServerDefined())
                {
                    throw new Exception("Server should not be defined for: " + cat);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\DBHelper.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using ServerTestFramework;
using ServerTestFramework.Database;
using xonline.common.config;

namespace StringServTest
{
	/// <summary>
	/// Summary description for DBHelper.
	/// </summary>
	public class DBHelper
	{
		public static void AddTitleMsg(int title,int StringID,string locale,DateTime Expire,string MsgTest)
		{
            Npdb npdb = new Npdb();
            npdb.ConnectToServer();

            try
			{

                SqlCommand cmd = npdb.CreateCommand();

				// Execute the decay stored procedure
				cmd.CommandText = "p_stringsvr_string_add_by_id";
				cmd.CommandType = CommandType.StoredProcedure;

				cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value =title;
				cmd.Parameters.Add("@i_string_id", SqlDbType.Int).Value = StringID;
				cmd.Parameters.Add("@vc_locale", SqlDbType.VarChar).Value = locale;
				cmd.Parameters.Add("@dt_expire", SqlDbType.DateTime).Value = Expire;
				cmd.Parameters.Add("@nvc_text", SqlDbType.NVarChar).Value = MsgTest;

                npdb.ExecuteScalar(cmd);
			}
			catch(System.Exception e)
			{
				System.Console.WriteLine(e);
			}
			finally
			{
                npdb.Close();
			}

		}

		public static string GetTitleMsg(int title,int StringID,string locale)
		{
			string text=null ;

			// Execute the decay stored procedure
			string sql = "SELECT [nvc_text] FROM [t_stringsvr_strings]"+
				"where i_title_id="+title+"and i_string_id="+StringID+" and vc_locale='"+locale+"'";

			try
			{
				text = (string ) StaticNpdb.ExecuteScalar(sql);
			}
			catch( Exception e)
			{
				System.Console.WriteLine(e);
			}

            return text;

		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\dvt\stringtest.cs ===
using System;
using System.Diagnostics;
using System.Text;
using System.IO;
using System.Threading;
using System.Net;
using System.Xml;
using System.Collections.Generic;


using ServerTestFramework;
using xonline.common.diagnostics;
using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;


namespace xonline.server.stringsvr.test.dvt 
{
    [TestGroup, DVT]
    public class StringSvr : TestNode
    {                                 
        const int c_titleId = 0x00000673;
        
        public static string GetSGInfoString(uint titleId, ulong userId)
        {
            HTTPAuthData authData = new HTTPAuthData(0, 0, 0, userId, titleId, 0, 0);
            return authData.ConstructBase64String();
        }    
        
        public uint SendAddStringRequest( uint titleId, uint stringId, DateTime dtExpire, ushort language, bool vetText, string stringData )
        {
            StringAddRequest   request = new StringAddRequest();
            StringAddResponse  response = new StringAddResponse();
            MemoryStream       stream = new MemoryStream();
            BinaryWriter       writer = new BinaryWriter(stream);
            BinaryReader       reader;
            byte[]             respBuf;
        
            request.dwTitleID = titleId;            
            request.dwStringID = stringId;            
            request.dtExpire = dtExpire;            
            request.wDefaultLanguage = language;
            request.cLangStrings = 1;
            request.fVetText = vetText;
            request.rgLangStrings = new LanguageString[1];

            request.rgLangStrings[0] = new LanguageString();
            request.rgLangStrings[0].wLanguage = language;
            request.rgLangStrings[0].szString = stringData;

            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, request.GetXRL(), GetSGInfoString(titleId, 1), stream.ToArray(), null, out respBuf);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendAddStringRequest failed with hr = " + hr.ToString("x8"));
            }

            reader = new BinaryReader(new MemoryStream(respBuf));
            response.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);
            
            return response.dwStringID;                   
        }
        
        public uint SendAddString2Request( StringAdd2Request request, out StringAdd2Response response)
        {
            MemoryStream       stream = new MemoryStream();
            BinaryWriter       writer = new BinaryWriter(stream);
            BinaryReader       reader;
            byte[]             respBuf;
        
            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);
            response = new StringAdd2Response();
            
            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, request.GetXRL(), GetSGInfoString(request.dwTitleID, 1), stream.ToArray(), null, out respBuf);

            if ( HResult.Succeeded(hr) )
            {
                reader = new BinaryReader(new MemoryStream(respBuf));
                response.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);
            }
            
            return hr;                   
        }
        
        public string SendLookupStringRequest( uint titleId, ushort language, uint stringId )
        {
            StringLookupRequest   request = new StringLookupRequest();
            StringLookupResponse  response = new StringLookupResponse();
            MemoryStream          stream = new MemoryStream();
            BinaryWriter          writer = new BinaryWriter(stream);
            BinaryReader          reader;
            byte[]                respBuf;
        
            request.dwTitleID = titleId;            
            request.wLanguage = language;
            request.rgdwStringIDs = new uint[1];
            request.rgdwStringIDs[0] = stringId;

            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, request.GetXRL(), GetSGInfoString(titleId, 1), stream.ToArray(), null, out respBuf);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendLookupStringRequest failed with hr = " + hr.ToString("x8"));
            }

            reader = new BinaryReader(new MemoryStream(respBuf));
            response.ReadFromRequest(reader, (UTF8Encoding)Encoding.UTF8, respBuf.Length, null);
            
            return response.rgStringData[0].szString;                   
        }
        
        public void SendVetStringRequest( ulong userPUID, uint titleID, ushort language, string stringData )
        {
            StringVetRequest  request = new StringVetRequest();
            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            byte[]           respBuf;
        
            request.dwTitleID = titleID;            
            request.wLanguage = language;
            request.wNumStrings = 1;
            request.rgStringData = new StringData[1];

            request.rgStringData[0] = new StringData();
            request.rgStringData[0].szString = stringData;

            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, request.GetXRL(), GetSGInfoString(titleID, userPUID), stream.ToArray(), null, out respBuf);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendVetStringRequest failed with hr = " + hr.ToString("x8"));
            }
        
        }
        
        public void SendVetString2Request( ulong userPUID, uint titleID, string locale, string stringData )
        {
            StringVet2Request  request = new StringVet2Request();
            MemoryStream     stream = new MemoryStream();
            BinaryWriter     writer = new BinaryWriter(stream);
            byte[]           respBuf;
        
            request.dwTitleID = titleID;            
            request.szLocale = locale;
            request.wNumStrings = 1;
            request.rgStringData = new StringData[1];

            request.rgStringData[0] = new StringData();
            request.rgStringData[0].szString = stringData;

            request.WriteToResponse(writer, (UTF8Encoding)Encoding.UTF8);

            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, request.GetXRL(), GetSGInfoString(titleID, userPUID), stream.ToArray(), null, out respBuf);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendVetString2Request failed with hr = " + hr.ToString("x8"));
            }
        
        }
        public void SendLoadStringsRequest(  )
        {
            MemoryStream     stream = new MemoryStream();
            byte[]           respBuf;
        
            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, "/msgserver/loadstrings.ashx", GetSGInfoString(0, 0), stream.ToArray(), null, out respBuf);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendLoadStringsRequest failed with hr = " + hr.ToString("x8"));
            }
        
        }

        public void SendLogBinaryRequest( byte[] payload )
        {
            byte[] respBuf;
            uint hr = XRLUtil.PostXrlRequest(VirtualInterface.stringsvr_int, "/msgserver/logbinary.ashx", GetSGInfoString(0xFFFE07D1, 0x0009000012345678), payload, null, out respBuf);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendLogBinaryRequest failed with hr = " + hr.ToString("x8"));
            }
        
        }

        public VxEvent MakeVxEvent(uint msgid, params object[] fields)
        {
            byte[] producerId = Encoding.UTF8.GetBytes("stringtest");
            DateTime now = DateTime.UtcNow;
            VxEvent ve = new VxEvent(
                producerId,
                msgid,
                now);

            uint fieldOrdinal = 1;
            foreach (object o in fields)
            {
                ve.EventFields.AddField(fieldOrdinal, o);
                fieldOrdinal++;
            }

            return ve;
        }

        public byte[] MakeVxMessage(VxEvent ve)
        {
            return MakeVxMessage(new List<VxEvent>() { ve });
        }

        public byte[] MakeVxMessage(IEnumerable<VxEvent> eventList)
        {
            MemoryStream ms = new MemoryStream();
            VortexBinaryWriter bw = new VortexBinaryWriter(ms);

            // Protocol
            bw.Write((byte)VxProtocol.VxProtocolType.Etx);  // 1=Etx

            // Etx headers
            //bw.Write((long)DateTime.UtcNow.ToFileTimeUtc());
            bw.Write((long)0);

            foreach (VxEvent ve in eventList)
            {
                ve.WriteStream(bw);
            }

            return ms.ToArray();
        }
        

        [TestCase]
        public void VetStringTest()
        {
            SendVetStringRequest( 1, c_titleId, 1, "This is not a bad string");     
        }

        [TestCase]
        public void TestStringExpiration()
        {
            uint stringId;
            string stringData;

            stringId = SendAddStringRequest( c_titleId, 0xFFFFFFFF, DateTime.UtcNow, 1, false, "This string expires right now");     

            // Force the FD to reload the string just added into the cache
            SendLoadStringsRequest();
            
            stringData = SendLookupStringRequest( c_titleId, 1, stringId);

            if (stringData != "")
            {
                throw new Exception("TestStringExpiration failed. String returned for string that should be expired");
            }            
        }

        [TestCase]
        public void TestStringExpireMaxValue()
        {
            uint stringId;
            string stringData;

            stringId = SendAddStringRequest( c_titleId, 0xFFFFFFFF, DateTime.MaxValue, 1, false, "This string expires right now");     

            // Force the FD to reload the string just added into the cache
            SendLoadStringsRequest();
            
            stringData = SendLookupStringRequest( c_titleId, 1, stringId);

            if (stringData != "This string expires right now")
            {
                throw new Exception("TestStringExpiration failed. String returned did not match the string that was added for string id " + stringId);
            }
        }

        [TestCase]
        public void TestAddStringErrors()
        {
            StringAdd2Request   request = new StringAdd2Request();
            StringAdd2Response  response;
            uint                hr;

            //
            // First construct a valid multi-string add request using the new protocol
            //
            request.dwTitleID = c_titleId;            
            request.dwStringID = 0xFFFFFFFF;            
            request.dtExpire = DateTime.UtcNow.AddMinutes(15);            
            request.cLocaleStrings = 2;
            request.fVetText = false;
            request.szDefaultLocale = "en-US";
            
            request.rgLocaleStrings = new LocaleString[request.cLocaleStrings];
            
            request.rgLocaleStrings[0] = new LocaleString();
            request.rgLocaleStrings[0].szLocale = "en-US";
            request.rgLocaleStrings[0].szString = "This is a string in en-US";

            request.rgLocaleStrings[1] = new LocaleString();
            request.rgLocaleStrings[1].szLocale = "en-CA";
            request.rgLocaleStrings[1].szString = "This is the string in en-CA, eh?";

            hr = SendAddString2Request(request, out response);

            if (HResult.Failed(hr))
            {
                throw new Exception("SendAddString2Request failed with hr = " + hr.ToString("x8") + response.ToString());
            }

            //
            // Make 1 string greater than 512 chars
            //
            request.rgLocaleStrings[1].szLocale = "en-CA";
            request.rgLocaleStrings[1].szString = "This is the string in en-CA, eh? But in Canada, we'd have to cut a hole in the ice field,  fish up " +
                                           "the undersea telephone cable that carries internet traffic from the US to the rest of the civilized " +
                                           "world, and tap into it with an ice pick if we wanted to actually do something useful like communicate with " +
                                           "the xbox live string server and attempt to add a really really long string that would cause an error similar " +
                                           "to the error that this string is going to cause when it hits the server because it is over 512 characters eh?";

            hr = SendAddString2Request(request, out response);

            if (hr != HResult.S_FALSE)
            {
                throw new Exception("SendAddString2Request did not fail with the expected HResult.XONLINE_E_STRING_TOO_LONG. hr = " + hr.ToString("x8") + ", Response = " +response.ToString());
            }

            if ( (response.rghrString[0] != 0) || (response.rghrString[1] != HResult.XONLINE_E_STRING_TOO_LONG) )
            {
                throw new Exception("SendAddString2Request has individual string HR value that is not HResult.XONLINE_E_STRING_TOO_LONG. Response = " + response.ToString());
            }          
            
            //
            // Duplicate locales
            //
            request.rgLocaleStrings[1].szLocale = "en-US";
            request.rgLocaleStrings[1].szString = "This is the string in en-CA, eh?";

            hr = SendAddString2Request(request, out response);

            if (hr != HResult.S_FALSE)
            {
                throw new Exception("SendAddString2Request did not fail with the expected HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE. hr = " + hr.ToString("x8") + ", Response = " +response.ToString());
            }

            if ( (response.rghrString[0] != 0) || (response.rghrString[1] != HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE) )
            {
                throw new Exception("SendAddString2Request has individual string HR value that is not HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE. Response = " + response.ToString());
            }  
            
            //
            // No default locale string
            //
            request.szDefaultLocale = "jp-JP";
            request.rgLocaleStrings[1].szLocale = "en-CA";

            hr = SendAddString2Request(request, out response);

            if (hr != HResult.XONLINE_E_STRING_NO_DEFAULT_STRING)
            {
                throw new Exception("SendAddString2Request did not fail with the expected HResult.XONLINE_E_STRING_NO_DEFAULT_STRING. hr = " + hr.ToString("x8") + ", Response = " +response.ToString());
            }

            //
            // Offensive string
            //
            request.szDefaultLocale = "en-US";
            request.fVetText = true;
            request.rgLocaleStrings[1].szString = "shit eh?";

            hr = SendAddString2Request(request, out response);

            if (hr != HResult.S_FALSE)
            {
                throw new Exception("SendAddString2Request did not fail with the expected HResult.XONLINE_E_STRING_OFFENSIVE_TEXT. hr = " + hr.ToString("x8") + ", Response = " +response.ToString());
            }

            if ( (response.rghrString[0] != 0) || (response.rghrString[1] != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT) )
            {
                throw new Exception("SendAddString2Request has individual string HR value that is not HResult.XONLINE_E_STRING_OFFENSIVE_TEXT. Response = " + response.ToString());
            }  
        }

        [TestCase]
        public void TestVetStringPunctuation()
        {
            StringAdd2Request   request = new StringAdd2Request();
            StringAdd2Response  response;
            uint                hr;

            //
            // First construct a valid multi-string add request using the new protocol
            //
            request.dwTitleID = c_titleId;            
            request.dwStringID = 0xFFFFFFFF;            
            request.dtExpire = DateTime.UtcNow.AddMinutes(15);            
            request.cLocaleStrings = 1;
            request.fVetText = true;
            request.szDefaultLocale = "en-US";
            
            request.rgLocaleStrings = new LocaleString[request.cLocaleStrings];
            
            request.rgLocaleStrings[0] = new LocaleString();
            request.rgLocaleStrings[0].szLocale = "en-US";
            request.rgLocaleStrings[0].szString = "Shit!";

            hr = SendAddString2Request(request, out response);

            if ( (hr != HResult.S_FALSE) || (response.rghrString[0] != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT) )
            {
                throw new Exception("SendAddString2Request did not fail with the expected HResult.XONLINE_E_STRING_OFFENSIVE_TEXT. hr = " + hr.ToString("x8") + ", Response = " +response.ToString());
            }

            SendVetString2Request( 1, c_titleId, "en-US", "message" );
        }        

        [TestCase]
        public void TestLogBinary()
        {
            // No specialfield as field 1 means we'll see an ugly producer id and event id 
            // in logs.
            VxEvent ve = MakeVxEvent(1, "STRINGSVRDVT", "HelloWorld", (byte)10, (int)-2, (uint)0xFFFF0001);
            byte[] message = MakeVxMessage(ve);
            SendLogBinaryRequest(message);
        }        

        [TestCase]
        public void TestLogBinaryBatch()
        {
            SpecialField sf1 = new SpecialField()
            {
                Id = 1, // 1=LogStringId
                Value = "STRINGSVRDVTBATCH1"
            };

            SpecialField sf2 = new SpecialField()
            {
                Id = 1, // 1=LogStringId
                Value = "STRINGSVRDVTBATCH2"
            };

            SpecialField sfrandom = new SpecialField()
            {
                Id = 2, // 2=undefined
                Value = "XE.1234567890"
            };

            // Having the specialfield[1] as first ordinal means we'll get a pretty prefix 
            // in the logs.
            List<VxEvent> eventList = new List<VxEvent>();
            eventList.Add(MakeVxEvent(10, sf1, (uint)255, sfrandom, "EOM", (float)-1.5));
            eventList.Add(MakeVxEvent(20, sf2, (int)255, DateTime.UtcNow));
            eventList.Add(MakeVxEvent(10, sf1, (uint)128, sfrandom, "", (float)-0.75));
            byte[] message = MakeVxMessage(eventList);
            SendLogBinaryRequest(message);
        }        
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\PutGetString.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Text;
using System.Xml;
using System.Threading;
using xonline.common.config;

namespace StringServTest
{
    [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
	public class M2_Put_Get_string_Pos_Cases : TestNode
	{
        [TestCase, Description("M2 - Add One String to Database"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Single_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110000;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110000;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}


        [TestCase, Description("M2 - Add Three Strings to Database of different locales"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Multiple_String: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString1 = "THIS IS A STRING";
				string DataString2 = "IS A STRING, this?";
				string DataString3 = "A STRING is this?";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110001;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 3;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString1;
            			addrequest.rgLocaleStrings[1] = new LocaleString();
            			addrequest.rgLocaleStrings[1].szLocale =  "en-CA";
            			addrequest.rgLocaleStrings[1].szString = DataString2;
            			addrequest.rgLocaleStrings[2] = new LocaleString();
            			addrequest.rgLocaleStrings[2].szLocale =  "en-UK";
            			addrequest.rgLocaleStrings[2].szString = DataString3;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");


				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110001;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings",  1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString1, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-UK";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110001;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString3, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-CA";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110001;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString2, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add Three Strings to Database of different locales"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class Multiple_Max_Length_String: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				int maxStringLen = addrequest.MaxStringLen;
				string DataString = new string('c',addrequest.MaxStringLen);

				if (DataString.Length != addrequest.MaxStringLen)
				{
					throw new UnexpectedTestResultException( "stringlength is " + DataString.Length.ToString() );
				}

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110017;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 8;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				for (int i = 0; i < addrequest.cLocaleStrings; i++)
				{
					addrequest.rgLocaleStrings[i] = new LocaleString();
					addrequest.rgLocaleStrings[i].szLocale =  "en-US";
					addrequest.rgLocaleStrings[i].szString = DataString;
				}
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				int resultCounter = 0;
				//Verify(addresponse);
				foreach ( uint hr in addresponse.rghrString )
				{
					if (resultCounter == 0)
					{
                        ValueCheck.Test("HResult", HResult.S_OK, hr);
					}
					else
					{
                        ValueCheck.Test("HResult", HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE, hr);
					}
					resultCounter++;
				}

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");


				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110017;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					// BUG 38316
					//By the string server design, if any of the strings passed in have validation errors, the entire request is aborted. This is why the result appears unexpected - the add string request has 254 strings with duplicate locales specified which prevents string 0 from being committed to the database.


					//
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("Retrieved string ", String.Empty, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add Zero Strings to Database"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Zero_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110002;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 0;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[0];

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 0;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110002;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", "", str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}


        [TestCase, Description("M2 - Add One String to Database - use unknown ID"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Single_String_Unknown_ID : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING - UNKNOWN ID";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0xFFFFFFFF;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 0;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = addresponse.dwStringID;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database - use unknown ID"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Expiry_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
                // cache flushing takes time -- take that into account when choosing an expiration time
                TimeSpan cacheFlushDuration;
                DateTime cacheFlushStartingTime = DateTime.Now;
                StringServTest.ExecuteXmgmtCommand(Interface.stringsvr, "e :stringsvr cacheflush");
                cacheFlushDuration = DateTime.Now - cacheFlushStartingTime;

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING - expiry";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110004;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddSeconds(10) + cacheFlushDuration;
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110004;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}
				Thread.Sleep(20000);

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110004;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
                    ValueCheck.TestDifferent("String Expired", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}
        [TestCase, Description("M2 - Add One String to Database which has already expired"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Expired_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING : Expired";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110005;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddSeconds(0);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;
				Thread.Sleep(1000);
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110005;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
                    ValueCheck.TestDifferent("String Expired", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database which has expiry time elapsing twice"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Expiry_String_Update_Twice : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
                // cache flushing takes time -- take that into account when choosing an expiration time
                TimeSpan cacheFlushDuration;
                DateTime cacheFlushStartingTime = DateTime.Now;
                StringServTest.ExecuteXmgmtCommand(Interface.stringsvr, "e :stringsvr cacheflush");
                cacheFlushDuration = DateTime.Now - cacheFlushStartingTime;

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING - expiry";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110004;
				addrequest.dtExpire =System.DateTime.UtcNow.AddSeconds(10) + cacheFlushDuration;
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110004;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", DataString, str.szString);
				}

				// Update String expiry time again
				Thread.Sleep(1000);
				addrequest.dtExpire =System.DateTime.UtcNow.AddSeconds(10) + cacheFlushDuration;
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110004;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", DataString, str.szString);
				}


				Thread.Sleep(20000);
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110004;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
                    ValueCheck.TestDifferent("String Expired", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add Multiple Strings to Database - No explicit content"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Multiple_No_Explicit_Content: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING : No explicit content";
				string DataString2 = "THIS : No explicit content";
				string DataString3 = "STRING : No explicit content";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110006;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 3;
            			addrequest.fVetText = true ;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;
            			addrequest.rgLocaleStrings[1] = new LocaleString();
            			addrequest.rgLocaleStrings[1].szLocale =  "en-CA";
            			addrequest.rgLocaleStrings[1].szString = DataString2;
            			addrequest.rgLocaleStrings[2] = new LocaleString();
            			addrequest.rgLocaleStrings[2].szLocale =  "en-UK";
            			addrequest.rgLocaleStrings[2].szString = DataString3;
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110006;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				        ValueCheck.Test("String", DataString, str.szString);
				}
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-CA";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110006;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				        ValueCheck.Test("String", DataString2, str.szString);
				}
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-UK";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110006;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				        ValueCheck.Test("String", DataString3, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}


        [TestCase, Description("M2 - Add One String to Database, then replace it"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Update_Single_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "STRING IS A THING";


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110010;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110010;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}

				// Try updating the string
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110010;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110010;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString2, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database, Append another string."), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Append_Single_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "STRING IS A THING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110011;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110011;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}

				// Try updating the string
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110012;
		            	addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
		            	addrequest.cLocaleStrings = 2;
		            	addrequest.fVetText = false;
		            	addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
		            	addrequest.rgLocaleStrings[0].szLocale =  "en-UK";
		            	addrequest.rgLocaleStrings[0].szString = DataString2;
				addrequest.rgLocaleStrings[1] = new LocaleString();
				addrequest.rgLocaleStrings[1].szLocale =  "en-US";
				addrequest.rgLocaleStrings[1].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Make sure both requests are valid
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110012;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-UK";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110012;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString2, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database, Append another string."), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Same_String_Unknown_ID : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				uint StringID;

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0xFFFFFFFF;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				StringID = addresponse.dwStringID;
				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = StringID;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}

				// Try updating the string
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0xFFFFFFFF;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

                ValueCheck.TestDifferent("String ID", StringID, addresponse.dwStringID);

				// Make sure both requests are valid
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = StringID;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database, Append another string using a multistring request."), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Appending_String : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "THIS IS A STRING: append";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110013;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110013;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}

				// Try updating the string
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110013;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-UK";
            			addrequest.cLocaleStrings = 2;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;
            			addrequest.rgLocaleStrings[1] = new LocaleString();
            			addrequest.rgLocaleStrings[1].szLocale =  "en-UK";
            			addrequest.rgLocaleStrings[1].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Make sure both requests are valid
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110013;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-UK";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110013;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				        ValueCheck.Test("String", DataString2, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110013;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("String", DataString, str.szString);
				}


				ResultCode=TEST_RESULTS.PASSED;
			}
		}
        [TestCase, Description("M2 - Add One String to Database, Append another string."), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Default_Locale_Change: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "THIS IS A STRING: UK locale";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110014;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 2;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;
            			addrequest.rgLocaleStrings[1] = new LocaleString();
            			addrequest.rgLocaleStrings[1].szLocale =  "en-UK";
            			addrequest.rgLocaleStrings[1].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "fr-FR";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110014;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					// Since the default locale should be US, the returned string should be of US locale
					ValueCheck.Test("Expected Default locale String", DataString, str.szString);
				}

				// Try updating the string

				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110014;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-UK";
				addrequest.cLocaleStrings = 2;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString;
				addrequest.rgLocaleStrings[1] = new LocaleString();
				addrequest.rgLocaleStrings[1].szLocale =  "en-UK";
				addrequest.rgLocaleStrings[1].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Make sure both requests are valid
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "fr-FR";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110014;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("Expected Default locale String", DataString2, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\sigtest\sigtest.cs ===
﻿using System;
using System.Globalization;
using System.IO;
using System.Text;
using xonline.server.stringsvr.module;

namespace xonline.server.stringsvr.sigtest
{
    public class SigTestApp
    {
        private static UTF8Encoding encoder = new UTF8Encoding();

        private static void Sign(string content)
        {
            MemoryStream contentStream = new MemoryStream(encoder.GetBytes(content));

            Console.WriteLine(LogCollectorCrypto.CreateSignature(contentStream));
        }

        private static void Verify(string signature, string content)
        {
            if(signature.Length != 40) throw new ArgumentException("Invalid signature length.", "signature");

            byte[]signatureBytes = new byte[20];
            for(ushort currentByte = 0; currentByte < 20; ++currentByte)
            {
                string byteString = signature.Substring(currentByte*2, 2);
                                
                if(!byte.TryParse(byteString, NumberStyles.AllowHexSpecifier, null, out signatureBytes[currentByte]))
                {
                    throw new ArgumentException("Found invalid byte characters in signature: " + byteString, "signature");
                }
            }

            MemoryStream contentStream = new MemoryStream(encoder.GetBytes(content));
            Console.WriteLine(LogCollectorCrypto.VerifySignature(signatureBytes, contentStream) ? "Verified" : "Not Verified");
        }

        private static void Usage()
        {
            Console.WriteLine("sigtest sign <string>");
            Console.WriteLine("sigtest verify <signature> <string>");
        }

        public static int Main(string[] args)
        {
            if(args.Length == 0 || args[0].IndexOf('?') != -1)
            {
                Usage();
                return 0;
            }
            switch(args[0].ToLower())
            {
                case "sign":
                    Sign(args[1]);
                    break;

                case "verify":
                    Verify(args[1], args[2]);
                    break;
            }

            return 0;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\GetStringTest.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Text;
using System.Xml;
using System.Threading;
using xonline.common.config;

namespace StringServTest
{
    [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
	public class M2_Get_string_Pos_Cases : TestNode
	{

        [TestCase, Description("M2 - Get Strings - Zero"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class Get_XeDashString : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLGet2String request = new XRLGet2String();
				XRLGetStringResponse response;
				
				// Perform GetString
				request.dwTitleID = 0xFFFE07D1;
				request.wNumStrings = 0;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[]{1};

				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 1, response.wNumStrings);
				System.Console.WriteLine(response.rgStringData[0].szString);

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Get Strings - Zero"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Get_String_Zero : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110020;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 0;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = null;

				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 0, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
				        if (str != null)
				        {
				       		throw new UnexpectedTestResultException("Zero requested strings returned results");
					}
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Get Strings - Single"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Get_String_Single : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110021;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110021;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 1, response.wNumStrings);
				ValueCheck.Test("String Data", DataString, response.rgStringData[0].szString);
				ResultCode=TEST_RESULTS.PASSED;
			}
		}


        [TestCase, Description("M2 - Get Strings - Single"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Get_String_Single_Wrong_Locale : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110022;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-UK";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-UK";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}

				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110022;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 1, response.wNumStrings);
				ValueCheck.Test("Default locale String", DataString, response.rgStringData[0].szString);
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Get Strings - Multiple"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Get_String_Multiple : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "IS IT REALLY A STRING";
				string DataString3 = "LOOKS LIKE A STRING";
				string DataString4 = "READS LIKE A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110023;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110024;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110025;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString3;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110026;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString4;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);




				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 4;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[request.wNumStrings];
				request.rgdwStringIDs[0] = 0x11110023;
				request.rgdwStringIDs[1] = 0x11110024;
				request.rgdwStringIDs[2] = 0x11110025;
				request.rgdwStringIDs[3] = 0x11110026;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 4, response.wNumStrings);
				ValueCheck.Test("String 1", DataString, response.rgStringData[0].szString);
				ValueCheck.Test("String 2", DataString2, response.rgStringData[1].szString);
				ValueCheck.Test("String 3", DataString3, response.rgStringData[2].szString);
				ValueCheck.Test("String 4", DataString4, response.rgStringData[3].szString);

				ResultCode=TEST_RESULTS.PASSED;
			}

		}

        [TestCase, Description("M2 - Get Strings - Single"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class Get_String_Single_Large_Packet : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = new string ('d',512);

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString;

				for (uint i = 0; i < 100; i++)
				{
					addrequest.dwStringID = 0x11110200 + i;

					if (!addrequest.Execute(out addresponse))
					{
						//DEBUG
						throw new UnexpectedTestResultException( addrequest.GetDumpString() );
					}

					Verify(addresponse);
				}

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[100];
				for (uint i = 0; i <100; i++)
				{
					request.rgdwStringIDs[i] = 0x11110200 + i;
				}
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 100, response.wNumStrings);
				for (uint i = 0; i < 100; i++)
				{
					ValueCheck.Test("String Data", DataString, response.rgStringData[i].szString);
				}

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\StressGlobal.cs ===
using System;

namespace StringServTest
{
	/// <summary>
	/// Summary description for StressGlobal.
	/// </summary>
	public class StressGlobal
	{
		

		public static void Initialize()
		{
			// Create 100 title starting from titleid 11 to 110.

			DateTime today = DateTime.Now;
			today.AddDays(3);
			for( int i=11;i<110;i++)
			{
				string Titlename ="Title ID "+i;
				DBHelper.AddTitleMsg(i,0,"default",today,Titlename);
				// load 100 Strings for  title 11,12,13,14,15.
				if(i<16)
				{
					for( int j=1;j<100;j++)
					{
						string Stringname ="String"+i;
						DBHelper.AddTitleMsg(i,j,"default",today,Stringname);
					}
				}
			}

			
	


		}

		

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\PutGetString_Neg.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Text;
using System.Xml;
using System.Threading;
using xonline.common.config;

namespace StringServTest
{
    [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
	public class M2_Put_Get_string_Neg_Cases : TestNode
	{
        [TestCase, Description("M2 - Add One String to Database"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Invalid_Default_Locale : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0xFFFFFFFF;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "fr-FR";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				//addrequest.Execute(out addresponse);
				if (addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Addstring Request Unexpectedly Passed" );

				}

                ValueCheck.Test("XErr", HResult.XONLINE_E_STRING_NO_DEFAULT_STRING, addrequest.XErr);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String too long to Database"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class String_Too_Long: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				int maxStringLen = addrequest.MaxStringLen;
				string DataString = String.Empty;

				for (int i = 0; i < maxStringLen; i++)
				{
					DataString += i.ToString();
				}
				DataString += "1";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110009;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;
				//addrequest.Execute(out addresponse);
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}

				ValueCheck.Test("String Error", HResult.XONLINE_E_STRING_TOO_LONG, addresponse.rghrString[0]);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111009;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
                    ValueCheck.TestDifferent("String entered into database", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Invalid_Locale : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110010;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "default";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				//addrequest.Execute(out addresponse);
				if (addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Addstring Request Unexpectedly Passed" );

				}

				ValueCheck.Test("XErr", HResult.XONLINE_E_STRING_INVALID_LANGUAGE, addrequest.XErr);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111010;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
                    ValueCheck.TestDifferent("String entered into database", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add Three Strings to Database, two with the same locales"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Multiple_String_Same_Locale: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString1 = "THIS IS A STRING";
				string DataString2 = "IS A STRING, this?";
				string DataString3 = "A STRING is this?";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x1111000A;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 3;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString1;
            			addrequest.rgLocaleStrings[1] = new LocaleString();
            			addrequest.rgLocaleStrings[1].szLocale =  "en-CA";
            			addrequest.rgLocaleStrings[1].szString = DataString2;
            			addrequest.rgLocaleStrings[2] = new LocaleString();
            			addrequest.rgLocaleStrings[2].szLocale =  "en-CA";
            			addrequest.rgLocaleStrings[2].szString = DataString3;

				//addrequest.Execute(out addresponse);
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}

				ValueCheck.Test("First String HR", HResult.S_OK, addresponse.rghrString[0]);
				ValueCheck.Test("Second String HR", HResult.S_OK, addresponse.rghrString[1]);
                ValueCheck.Test("Third String HR", HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE, addresponse.rghrString[2]);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString - Check to see that none of the strings get added to the database
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000A;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
                    ValueCheck.TestDifferent("String", DataString1, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-CA";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000A;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
				    ValueCheck.TestDifferent("String", DataString2, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Locale_Default : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				string DataString = "THIS IS A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0xFFFFFFFF;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-UK";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "default";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				//addrequest.Execute(out addresponse);
				if (addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Addstring Request Unexpectedly Passed" );

				}

				ValueCheck.Test("XErr", HResult.XONLINE_E_STRING_NO_DEFAULT_STRING, addrequest.XErr);
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add One String to Database with explicit content"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class Single_String_Explicit_Content : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING, fuck";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110007;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = true;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString;

				//addrequest.Execute(out addresponse);
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );
				}

                ValueCheck.Test("String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, addresponse.rghrString[0]);
				//Verify (addresponse);
				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x11110007;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.TestDifferent("String", DataString, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}


        [TestCase, Description("M2 - Add Three Strings to Database, two with the same locales"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Multiple_String_Vet_String: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString1 = "THIS IS A STRING";
				string DataString2 = "IS A STRING, this?, shit";
				string DataString3 = "A STRING is this?";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x1111000B;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 3;
            			addrequest.fVetText = true;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString1;
            			addrequest.rgLocaleStrings[1] = new LocaleString();
            			addrequest.rgLocaleStrings[1].szLocale =  "en-CA";
            			addrequest.rgLocaleStrings[1].szString = DataString2;
            			addrequest.rgLocaleStrings[2] = new LocaleString();
            			addrequest.rgLocaleStrings[2].szLocale =  "en-UK";
            			addrequest.rgLocaleStrings[2].szString = DataString3;


				//addrequest.Execute(out addresponse);
				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				ValueCheck.Test("First String HR", HResult.S_OK, addresponse.rghrString[0]);
				ValueCheck.Test("Second String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, addresponse.rghrString[1]);
				ValueCheck.Test("Third String HR", HResult.S_OK, addresponse.rghrString[2]);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString - Check to see that none of the strings get added to the database
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000B;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
				        ValueCheck.Test("String", "", str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-UK";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000B;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
				        ValueCheck.Test("String", "", str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-CA";
		        	request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000B;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
				        ValueCheck.Test("String", "", str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add Three Strings to Database of different locales with a XRL packet too large"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class TooLargePacket: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String_TooLarge addrequest = new XRLAdd2String_TooLarge ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString1 = "THIS IS A STRING";
				string DataString2 = "IS A STRING, this?";
				string DataString3 = "A STRING is this?";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x1111000C;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 10;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[3];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString1;
				addrequest.rgLocaleStrings[1] = new LocaleString();
				addrequest.rgLocaleStrings[1].szLocale =  "en-CA";
				addrequest.rgLocaleStrings[1].szString = DataString2;
				addrequest.rgLocaleStrings[2] = new LocaleString();
				addrequest.rgLocaleStrings[2].szLocale =  "en-UK";
				addrequest.rgLocaleStrings[2].szString = DataString3;

				if (addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Test case unexpectedly passed, expected XErr: XONLINE_E_END_OF_STREAM" );
				}

                ValueCheck.Test("XErr", HResult.XONLINE_E_END_OF_STREAM, addrequest.XErr);


				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");


				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000C;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", String.Empty, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-UK";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000C;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", String.Empty, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-CA";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000C;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", String.Empty, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Add Three Strings to Database of different locales with a XRL packet too large"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class TooSmallPacket: PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				XRLAdd2String_TooSmall addrequest = new XRLAdd2String_TooSmall ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString1 = "THIS IS A STRING";
				string DataString2 = "IS A STRING, this?";
				string DataString3 = "A STRING is this?";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x1111000D;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 4;
				// removed field - addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[3];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString1;
				addrequest.rgLocaleStrings[1] = new LocaleString();
				addrequest.rgLocaleStrings[1].szLocale =  "en-CA";
				addrequest.rgLocaleStrings[1].szString = DataString2;
				addrequest.rgLocaleStrings[2] = new LocaleString();
				addrequest.rgLocaleStrings[2].szLocale =  "en-UK";
				addrequest.rgLocaleStrings[2].szString = DataString3;

				if (addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Test case unexpectedly passed, expected XErr: XONLINE_E_END_OF_STREAM" );
				}

                ValueCheck.Test("XErr", HResult.XONLINE_E_END_OF_STREAM, addrequest.XErr);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");


				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000D;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", String.Empty, str.szString);

				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-UK";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000D;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", String.Empty, str.szString);
				}

				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
				request.szLocale = "en-CA";
				request.rgdwStringIDs = new uint[1];
				request.rgdwStringIDs[0] = 0x1111000D;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );
				}
				ValueCheck.Test("Returned Number of Strings", 1, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
					ValueCheck.Test("String", String.Empty, str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\StressRequests.cs ===
using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using ServerTestFramework.Utilities;

namespace StringServTest
{
	/// <summary>
	/// Summary description for StressRequests.
	/// </summary>
    [StressInstantiate]
    public abstract class StringStressTestBase : TestBase
    {
        protected RandomEx random = new RandomEx();
    }
    
	public class GetString :StringStressTestBase
	{
		override protected void	Execute()
		{
			XRLGetString Req= new XRLGetString();

			Req.dwTitleID= (uint)random.Next(11,110);
			Req.wLanguage=0;
			Req.rgdwStringIDs= new uint[1];
			Req.rgdwStringIDs[0]=(uint) random.Next(1,100);

			XRLGetStringResponse resp;
			if(Req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
	}

	public class GetMultipleString :StringStressTestBase
	{
		override protected void	Execute()
		{
			XRLGetString Req= new XRLGetString();

			Req.dwTitleID= (uint)random.Next(11,110);
			Req.wLanguage=0;

			int len = random.Next(2,10);
			Req.rgdwStringIDs= new uint[len];

			for( int i=0;i<len;i++)
				Req.rgdwStringIDs[i]= (uint)random.Next(1,100);

			XRLGetStringResponse resp;
			if(Req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
	}

	public class AddString :StringStressTestBase
	{
		override protected void	Execute()
		{
			XRLAddString req= new XRLAddString();
			req.dwTitleID= (uint)random.Next(11,110);
			req.dwStringID=(uint)random.Next(1,110);
			req.dtExpire=DateTime.Now.AddHours(1);
			req.wDefLanguage=1;
			req.cLangStrings=1;
			req.fVetText=true;

			int len = random.Next(1,5);
			req.rgLangStrings = new LanguageString[len];
			for(int i=0;i<len;i++)
			{
				req.rgLangStrings[i]= new LanguageString();
				req.rgLangStrings[i].wLanguage=(ushort)(i+1);
				string Stringval=random.GenerateRandomString(random.Next(50,100));
				if(random.Next(1,20)>17)
					Stringval = "Fuc k"+Stringval+ "shit";

				req.rgLangStrings[i].szString=Stringval;
				
			}

			req.Execute();
			if(req.XErr== HResult.S_OK || req.XErr== HResult.XONLINE_E_STRING_OFFENSIVE_TEXT)
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

			
		
		}
	}

	public class VetString :StringStressTestBase
	{
		override protected void	Execute()
		{

			XRLVetString req = new XRLVetString();
			req.dwTitleID=(uint)random.Next(11,110);
			req.wLanguage=0;
			int len = random.Next(1,5);
			req.rgStringData = new StringData[len];
			for(int i=0;i<len;i++)
			{
				req.rgStringData[i]= new StringData();
				
				string Stringval=random.GenerateRandomString(random.Next(50,100));
				if(random.Next(1,20)>17)
					Stringval = "Fuc k"+Stringval+ "shit";

				req.rgStringData[i].szString=Stringval;
				
			}

			XRLVetResponse resp;
			if(req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;
			


		
		}
	}

	public class GetTitle :StringStressTestBase
	{
		override protected void	Execute()
		{

			XRLTitleIDRequest req= new XRLTitleIDRequest();
			req.wType=1;
			req.wLanguage=0;
			req.rgdwTitleIDs= new uint[1];
			req.rgdwTitleIDs[0] = (uint)random.Next(11,110);

			XRLTitleIDResponse resp;

			if(req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;
		
		}
	}

	public class GetMultipleTitle :StringStressTestBase
	{
		override protected void	Execute()
		{

			XRLTitleIDRequest req= new XRLTitleIDRequest();
			req.wType=1;
			req.wLanguage=0;
			int len = random.Next(2,10);
			req.rgdwTitleIDs= new uint[len];

			for( int i=0;i<len;i++)
                req.rgdwTitleIDs[i] = (uint)random.Next(11,110);
			
			XRLTitleIDResponse resp;
			if(req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;
		
			}
	}


	// new Xenon stress cases.

	public class XeGetString :StringStressTestBase
	{
		override protected void	Execute()
		{
			XRLGet2String Req= new XRLGet2String();

			Req.dwTitleID= (uint)random.Next(11,110);
			Req.szLocale= "en-US";
			Req.rgdwStringIDs= new uint[1];
			Req.rgdwStringIDs[0]=(uint) random.Next(1,100);

			XRLGetStringResponse resp;
			if(Req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
	}

	public class XeGetMultipleString :StringStressTestBase
	{
		override protected void	Execute()
		{
			XRLGet2String Req= new XRLGet2String();

			Req.dwTitleID= 11;// (uint)random.Next(11,110);
			Req.szLocale= "en-US";

			int len = random.Next(2,10);
			Req.rgdwStringIDs= new uint[len];

			for( int i=0;i<len;i++)
				Req.rgdwStringIDs[i]= 1;//(uint)random.Next(1,100);

			XRLGetStringResponse resp;
			if(Req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

		}
	}

	public class XeAddString :StringStressTestBase
	{

		public static string[] locals = new string[]{"en-US","en-CA","en-UK","fr-FR","fr-CA"};
		override protected void	Execute()
		{
			XRLAdd2String req= new XRLAdd2String();
			req.dwTitleID= (uint)random.Next(11,110);
			req.dwStringID=(uint) random.Next(1,100);
			req.dtExpire=DateTime.Now.AddHours(10);
			req.szDefaultLocale = "en-US";
			
			int len = random.Next(1,5);
			req.rgLocaleStrings = new LocaleString[len];
			for(int i=0;i<len;i++)
			{
				req.rgLocaleStrings[i] = new LocaleString();
				req.rgLocaleStrings[i].szLocale = locals[i];   //(ushort)(i+1);
				string Stringval=random.GenerateRandomString(random.Next(50,100));
				if(random.Next(1,20)>17)
					Stringval = "Fuc k"+Stringval+ "shit";

				req.rgLocaleStrings[i].szString=Stringval;
				
			}

			// XRLAdd2Response response;
			//req.Execute(out response);
			req.Execute();
			if(req.XErr== HResult.S_OK || req.XErr== HResult.XONLINE_E_STRING_OFFENSIVE_TEXT)
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;

			
		
		}
	}

	public class XeVetString :StringStressTestBase
	{
		override protected void	Execute()
		{
			XRLVet2String req = new XRLVet2String();
			req.dwTitleID=(uint)random.Next(11,110);
			req.szLocale = "en-US";
			int len = random.Next(1,5);
			req.rgStringData = new StringData[len];
			for(int i=0;i<len;i++)
			{
				req.rgStringData[i]= new StringData();
				
				string Stringval=random.GenerateRandomString(random.Next(50,100));
				if(random.Next(1,20)>17)
					Stringval = "Fuc k"+Stringval+ "shit";

				req.rgStringData[i].szString=Stringval;
				
			}

			XRLVetResponse resp;
			if(req.Execute(out resp))
				ResultCode=TEST_RESULTS.PASSED;
			else
				ResultCode=TEST_RESULTS.FAILED;
		}
	}

    public class XeLogString : StringStressTestBase
    {
        public static int FusionTitleCount = 500;
        public static int FusionErrorCodeCount = 50;
        public static int BannerOfferIdCount = 10000;
        public static int BannerCount = 10000;
        public static int UserCount = 1000000;
        public static int SequenceNumberCount = 200;

   		public ulong GenerateUlong(int leftHex, int rightMax)
		{
			ulong puid = (ulong)leftHex;
			puid = puid << 60;
			puid |= (uint)random.Next(rightMax);

			return puid;
		}
        
        public string TitleId()
        {
            string log = random.Next((int)0x50000000, (int)0x50000000 + FusionTitleCount).ToString("X");
            return log;
        }

        public string ErrorCode()
        {
            string log = random.Next(FusionErrorCodeCount).ToString("X");
            return log;
        }

        public string BannerHash()
        {
            string log = GenerateUlong(14, BannerCount).ToString("X");
            return log;
        }

        public string OfferId()
        {
            string log = GenerateUlong(15, BannerOfferIdCount).ToString("X");
            return log;
        }

        public string UserPuid()
        {
            string log = GenerateUlong(9, UserCount).ToString("X");
            return log;
        }

        public string TimeStamp()
        {
            string log = DateTime.UtcNow.Ticks.ToString("X");
            return log;
        }

        public string SequenceNumber()
        {
            string log = random.Next(SequenceNumberCount).ToString();
            return log;
        }

        public string FU()
        {
            return "FU|" + TitleId() + "|" + ErrorCode() + "~" + UserPuid() + "|" + TimeStamp();
        }

        public string MP_P()
        {
            return "MP_P|" + BannerHash() + "|" + OfferId() + "~" + UserPuid() + "|" + TimeStamp();
        }

        public string BAN_VW()
        {
            return "BAN_VW|" + BannerHash() + "~" + UserPuid() + "|" + TimeStamp() + "|" + SequenceNumber();
        }

        public string BAN_CL()
        {
            return "BAN_CL|" + BannerHash() + "~" + UserPuid() + "|" + TimeStamp() + "|" + SequenceNumber();
        }
       
        protected override void Execute()
        {
            XRLLogString req = new XRLLogString();

            int[] logs = new int[] { 3, 6, 86, 100 };

            string szLogLine = "";

            //int len = random.Next(1, 9);
            //for ( int i = 0; i < len; i++)
            {
                int func = random.Next(0, 100);
                if ( func < logs[0])
                    szLogLine += FU() + "\n";
                else if ( func < logs[1])
                    szLogLine += MP_P() + "\n";
                else if ( func < logs[2])
                    szLogLine += BAN_VW() + "\n";
                else
                    szLogLine += BAN_CL() + "\n";
            }

            //Global.RO.Info(szLogLine);
            req.logLinesLength = (ushort)szLogLine.Length;
            req.logLine = szLogLine;

            if (req.Execute())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;
        }
    }

    /// <summary>
    /// Submits failure-typed log lines to the string server. The prefixes these log lines use have been registered ahead of time.
    /// The NumSiteIds constant changes the number of configured failure prefixes.
    /// Log lines are batched and submitted according to the ConsoleBufferSize constant.
    /// </summary>
    public class XeFailureLogString : StringStressTestBase
    {
        protected override void Execute()
        {
            XRLLogString req = new XRLLogString();
            StringBuilder logLineBuffer = new StringBuilder(XboxLiveDistMonConstants.ConsoleBufferSize);

            bool exceedsBufferSize = false;
            while (!exceedsBufferSize)
            {
                string separator = "";
                if (logLineBuffer.Length != 0)
                    separator = "\n";

                // Choose a random 'failed' server between S01 and S[numServers]
                string szLogLine = String.Format("{0}TestStressAPIFail_S{1:00}|{2}|{3}|{4}", separator, random.Next(1, XboxLiveDistMonConstants.NumSiteIds + 1),
                    "DummyServerName", XboxLiveDistMonConstants.ExampleHresult, XboxLiveDistMonConstants.ExampleTimestamp);
                if (logLineBuffer.Length + szLogLine.Length < XboxLiveDistMonConstants.ConsoleBufferSize)
                    logLineBuffer.Append(szLogLine);
                else
                    exceedsBufferSize = true;
            }

            req.logLinesLength = (ushort)logLineBuffer.Length;
            req.logLine = logLineBuffer.ToString();

            if (req.Execute())
            {
                ResultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error(req.GetDumpString());
                ResultCode = TEST_RESULTS.FAILED;
            }
        }
    }

    /// <summary>
    /// Submits measurement-typed log lines to the string server. The prefixes these log lines use have been registered ahead of time.
    /// Only two hard-coded prefixes are available. In either case, the measurement numbers are dynamically generated.
    /// Log lines are batched and submitted according to the ConsoleBufferSize constant.
    /// </summary>
    public class XeMeasurementLogString : StringStressTestBase
    {
        protected override void Execute()
        {
            XRLLogString req = new XRLLogString();
            StringBuilder logLineBuffer = new StringBuilder(XboxLiveDistMonConstants.ConsoleBufferSize);

            bool exceedsBufferSize = false;
            while (!exceedsBufferSize)
            {
                string separator = "";
                if (logLineBuffer.Length != 0)
                    separator = "\n";

                string szLogLine;
                switch (random.Next(1))
                {
                    case 0:
                        // Choose a random CDNTime between defined lower-bound and upper-bound
                        szLogLine = String.Format("{0}TestStressCDNTime|{1}|{2}", separator, 
                            random.Next(XboxLiveDistMonConstants.TestCDNTimeLowerBound, XboxLiveDistMonConstants.TestCDNTimeUpperBound), 
                            XboxLiveDistMonConstants.ExampleTimestamp);
                        break;
                    default:
                        // Choose a random SigninTime between defined lower-bound and upper-bound
                        szLogLine = String.Format("{0}TestStressSigninTime|{1}|{2}", separator,
                            random.Next(XboxLiveDistMonConstants.TestSigninTimeLowerBound, XboxLiveDistMonConstants.TestSigninTimeUpperBound),
                            XboxLiveDistMonConstants.ExampleTimestamp);
                        break;
                }
                if (logLineBuffer.Length + szLogLine.Length < XboxLiveDistMonConstants.ConsoleBufferSize)
                    logLineBuffer.Append(szLogLine);
                else
                    exceedsBufferSize = true;
            }

            req.logLinesLength = (ushort)logLineBuffer.Length;
            req.logLine = logLineBuffer.ToString();

            if (req.Execute())
            {
                ResultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error(req.GetDumpString());
                ResultCode = TEST_RESULTS.FAILED;
            }
        }
    }

    public class XeLogBinary : XeLogString
    {
        protected override void Execute()
        {
            XRLLogBinary req = new XRLLogBinary();

            int[] logs = new int[] { 3, 6, 86, 100 };

            string szLogLine = "";

            //int len = random.Next(1, 9);
            //for ( int i = 0; i < len; i++)
            {
                int func = random.Next(0, 100);
                if (func < logs[0])
                    szLogLine += FU() + "\n";
                else if (func < logs[1])
                    szLogLine += MP_P() + "\n";
                else if (func < logs[2])
                    szLogLine += BAN_VW() + "\n";
                else
                    szLogLine += BAN_CL() + "\n";
            }

            //Global.RO.Info(szLogLine);
            req.logLinesLength = (ushort)szLogLine.Length;
            req.logLine = szLogLine;

            if (req.Execute())
                ResultCode = TEST_RESULTS.PASSED;
            else
                ResultCode = TEST_RESULTS.FAILED;
        }
    }

    /// <summary>
    /// Submits failure-typed log lines to the string server. The prefixes these log lines use have been registered ahead of time.
    /// The NumSiteIds constant changes the number of configured failure prefixes.
    /// Log lines are batched and submitted according to the ConsoleBufferSize constant.
    /// </summary>
    public class XeFailureLogBinary : XeFailureLogString
    {
        protected override void Execute()
        {
            XRLLogBinary req = new XRLLogBinary();
            StringBuilder logLineBuffer = new StringBuilder(XboxLiveDistMonConstants.ConsoleBufferSize);

            bool exceedsBufferSize = false;
            while (!exceedsBufferSize)
            {
                string separator = "";
                if (logLineBuffer.Length != 0)
                    separator = "\n";

                // Choose a random 'failed' server between S01 and S[numServers]
                string szLogLine = String.Format("{0}TestStressAPIFail_S{1:00}|{2}|{3}|{4}", separator, random.Next(1, XboxLiveDistMonConstants.NumSiteIds + 1),
                    "DummyServerName", XboxLiveDistMonConstants.ExampleHresult, XboxLiveDistMonConstants.ExampleTimestamp);
                if (logLineBuffer.Length + szLogLine.Length < XboxLiveDistMonConstants.ConsoleBufferSize)
                    logLineBuffer.Append(szLogLine);
                else
                    exceedsBufferSize = true;
            }

            req.logLinesLength = (ushort)logLineBuffer.Length;
            req.logLine = logLineBuffer.ToString();

            if (req.Execute())
            {
                ResultCode = TEST_RESULTS.PASSED;
            }
            else
            {
                Global.RO.Error(req.GetDumpString());
                ResultCode = TEST_RESULTS.FAILED;
            }
        }
    }    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\GetStringTest_Neg.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Text;
using System.Xml;
using System.Threading;
using xonline.common.config;

namespace StringServTest
{
    [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
	public class M2_Get_string_Neg_Cases : TestNode
	{
        [TestCase, Description("M2 - Get Strings - Zero"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Get_String_Zero : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLGet2String request = new XRLGet2String();
				XRLGetStringResponse response;

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 1;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = null;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 0, response.wNumStrings);
				foreach (StringData str in response.rgStringData)
				{
					//throw new UnexpectedTestResultException( str.szString );
				    ValueCheck.Test("Returned String", "", str.szString);
				}
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Get Strings - Multiple"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
		class Get_String_Multiple : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String request = new XRLGet2String();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "IS IT REALLY A STRING";
				string DataString3 = "LOOKS LIKE A STRING";
				string DataString4 = "READS LIKE A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110028;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x11110029;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x1111002A;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString3;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
			        addrequest.dwStringID = 0x1111002B;
            			addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
            			addrequest.szDefaultLocale = "en-US";
            			addrequest.cLocaleStrings = 1;
            			addrequest.fVetText = false;
            			addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

            			addrequest.rgLocaleStrings[0] = new LocaleString();
            			addrequest.rgLocaleStrings[0].szLocale =  "en-US";
            			addrequest.rgLocaleStrings[0].szString = DataString4;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);

				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 4;
				request.wLocaleLen = 5;
        			request.szLocale = "en-US";
		        	request.rgdwStringIDs = new uint[request.wNumStrings];
				request.rgdwStringIDs[0] = 0x11110028;
				request.rgdwStringIDs[1] = 0x11110029;
				request.rgdwStringIDs[2] = 0x1111002C;
				request.rgdwStringIDs[3] = 0x1111002B;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 4, response.wNumStrings);
				ValueCheck.Test("String 1", DataString, response.rgStringData[0].szString);
				ValueCheck.Test("String 2", DataString2, response.rgStringData[1].szString);
				ValueCheck.Test("String 3", "", response.rgStringData[2].szString);
				ValueCheck.Test("String 4", DataString4, response.rgStringData[3].szString);

				ResultCode=TEST_RESULTS.PASSED;
			}

		}
        [TestCase, Description("M2 - Get Strings - Multiple"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class Get_String_Multiple_TooLarge : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String_TooLarge request = new XRLGet2String_TooLarge();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "IS IT REALLY A STRING";
				string DataString3 = "LOOKS LIKE A STRING";
				string DataString4 = "READS LIKE A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110030;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110031;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110032;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString3;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110033;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString4;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);




				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				request.wNumStrings = 2;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[5];
				request.rgdwStringIDs[0] = 0x11110030;
				request.rgdwStringIDs[1] = 0x11110031;
				request.rgdwStringIDs[2] = 0x11110032;
				request.rgdwStringIDs[3] = 0x11110033;
				request.rgdwStringIDs[4] = 0x11110033;
				if (!request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( request.GetDumpString() );

				}
				ValueCheck.Test("wNumStrings", 2, response.wNumStrings);
				ValueCheck.Test("String 1", DataString, response.rgStringData[0].szString);
				ValueCheck.Test("String 2", DataString2, response.rgStringData[1].szString);

				ResultCode=TEST_RESULTS.PASSED;
			}

		}

        [TestCase, Description("M2 - Get Strings - Multiple"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
			class Get_String_Multiple_TooSmall : PutGetVetStringTestBase
		{
			override protected void Execute()
			{

				XRLAdd2String addrequest = new XRLAdd2String ();
				XRLGet2String_TooSmall request = new XRLGet2String_TooSmall();
				XRLAdd2Response addresponse;
				XRLGetStringResponse response;
				string DataString = "THIS IS A STRING";
				string DataString2 = "IS IT REALLY A STRING";
				string DataString3 = "LOOKS LIKE A STRING";
				string DataString4 = "READS LIKE A STRING";

				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110034;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110035;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString2;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110036;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString3;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);


				// Perform AddString
				addrequest.dwTitleID = 0xFFFE0000;
				addrequest.dwStringID = 0x11110037;
				addrequest.dtExpire =System.DateTime.UtcNow.AddMinutes(20);
				addrequest.szDefaultLocale = "en-US";
				addrequest.cLocaleStrings = 1;
				addrequest.fVetText = false;
				addrequest.rgLocaleStrings = new LocaleString[addrequest.cLocaleStrings];

				addrequest.rgLocaleStrings[0] = new LocaleString();
				addrequest.rgLocaleStrings[0].szLocale =  "en-US";
				addrequest.rgLocaleStrings[0].szString = DataString4;

				if (!addrequest.Execute(out addresponse))
				{
					//DEBUG
					throw new UnexpectedTestResultException( addrequest.GetDumpString() );

				}
				Verify(addresponse);




				// Force SQL database to update.
				StringServTest.ExecuteXmgmtCommand(Interface.stringsvr ,"e :stringsvr cacheflush");

				// Perform GetString
				request.dwTitleID = 0xFFFE0000;
				//request.wNumStrings = 4;
				request.wLocaleLen = 5;
				request.szLocale = "en-US";
				request.rgdwStringIDs = new uint[4];
				request.rgdwStringIDs[0] = 0x11110034;
				request.rgdwStringIDs[1] = 0x11110035;
				request.rgdwStringIDs[2] = 0x11110036;
				request.rgdwStringIDs[3] = 0x11110037;
				if (request.Execute(out response))
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Test expectedly passed, expected XErr: XONLINE_E_END_OF_STREAM" );
				}
				ValueCheck.Test("XErr", HResult.XONLINE_E_END_OF_STREAM, request.XErr);

				ResultCode=TEST_RESULTS.PASSED;
			}

		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\PutGetStringTestBase.cs ===
using System;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Text;
using System.Xml;

namespace StringServTest
{
    abstract public class PutGetVetStringTestBase : TestBase
    {
        static public void Verify(XRLAdd2Response response)
        {
            foreach ( uint hr in response.rghrString )
            {
                if (hr != HResult.S_OK)
                {
                    ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, hr);
                    ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_INVALID_LANGUAGE, hr);
                    ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_TOO_LONG, hr);
                    ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE, hr);
                    ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, hr);
                    ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_NO_DEFAULT_STRING, hr);
                }
            }
            //COMMENT FOR NOW   Check ( response.dwStringID == 0xFFFFFFFF, "Returned StringID == 0xFFFFFFFF");
        }

        static public void Verify(XRLVetResponse response)
        {
            foreach ( uint hr in response.rghrString )
            {
                ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_MSGSVR_INVALID_REQUEST, hr);
                ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_INVALID_LANGUAGE, hr);
                ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_TOO_LONG, hr);
                ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE, hr);
                ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, hr);
                ValueCheck.TestDifferent("HResult", HResult.XONLINE_E_STRING_NO_DEFAULT_STRING, hr);
            }

        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\StringServ.cs ===
using System;
using System.IO;
using System.Net;
using System.Text;
using System.Xml;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Data.SqlClient;

using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;

using xonline.common.config;
using System.Text.RegularExpressions;
using ServerTestFramework.LiveService.Vortex;

[assembly: RootNode(typeof(StringServTest.StringServTest))]

namespace StringServTest
{
    // Xbox Live DistMon Constants
    public class XboxLiveDistMonConstants
    {
        public const int NumSiteIds = 25;
        public const int TestCDNTimeLowerBound = 5;
        public const int TestCDNTimeUpperBound = 1000;
        public const int TestCDNTimeThreshold = 800;
        public const int TestSigninTimeLowerBound = 100;
        public const int TestSigninTimeUpperBound = 4200;
        public const int TestSigninTimeThreshold = 3600;
        public const String ExampleTimestamp = "0100";
        public const String ExampleHresult = "80155110";
        
        /// <summary>
        /// This constant represents the buffer size, in bytes, used on the Xbox 360 client for distributed monitoring.
        /// </summary>
        public const int ConsoleBufferSize = 400;

        // Category names used specifically for distributed monitoring
        public const string FailureCounterCategoryName = "XBL String FD - Failure Monitoring";
        public const string MeasurementCounterCategoryName = "XBL String FD - Measurement Threshold Monitoring";

    };

    /// <summary>
    /// Client-side test of String Server front door service
    /// </summary>
    public class StringServTest : ServerTestFramework.TestNode
    {
        // these constants are determined by ops/sitecfg/xrlscan.mess
        // which limits the number of bytes XRLScan will allow in URL payloads
        const uint MAXNUMTITLES = 1027;
        const uint MAXNUMSTRINGS = 7;

        const uint MAXSTRINGLENID = 9994;

        // determined by  max size of string in DB  (update: now set in ini file)
        const uint MAXSTRINGLEN = 512;
        const uint MAXVETLEN = 512;
        const int XMGMTTIMETOWAIT = 20 * 60 * 1000; // 20 minutes

        public StringServTest()
        {
            //functional tests
            foreach (TestNode n in GetTests())
            {
                AddChild(n);
            }

            //stress tests
            foreach (System.Type t in GetStressTests())
            {
                TestNode n=TestNode.ConstructFromType(t);
                n.Name="StringServTest "+n.Name;
                AddChild(n, false, true);
            }
        }

        // See Xbox 360 Console Software #32453. Xmgmt commands take a really long time
        // due to poor npdb performance. To get good results we increase the timeout values.
        public static void ExecuteXmgmtCommand(string InterfaceName, string Command)
        {
            int sendTimeout = ManagementConsole.sendTimeout = XMGMTTIMETOWAIT;
            int receiveTimeout = ManagementConsole.receiveTimeout = XMGMTTIMETOWAIT;

            Global.XEnv.ExecuteXmgmtCommand(InterfaceName, Command);

            ManagementConsole.sendTimeout = sendTimeout;
            ManagementConsole.receiveTimeout = receiveTimeout;
        }

        public static void ExecuteXmgmtCommandOneServer(string serverName, string Command)
        {
            int sendTimeout = ManagementConsole.sendTimeout = XMGMTTIMETOWAIT;
            int receiveTimeout = ManagementConsole.receiveTimeout = XMGMTTIMETOWAIT;

            Global.XEnv.ExecuteXmgmtCommandOneServer(serverName, Command);

            ManagementConsole.sendTimeout = sendTimeout;
            ManagementConsole.receiveTimeout = receiveTimeout;
        }

        private static string NpdbConnectionString
        {
            get
            {
                return "Data Source=" + Config.NpdbServer + ";Initial Catalog=" + Config.NpdbDatabase + ";Integrated Security=SSPI;Application Name=StringServTest;Pooling=false";
            }
        }

        public override void PreRun(RUN_TYPE runType)
        {
            if (runType == RUN_TYPE.FUNCTIONAL)
            {
                InitializeFunctional();
            }
            else if (runType == RUN_TYPE.STRESS)
            {
                InitializeStress();
            }
        }

        public void InitializeStress()
        {
            StressGlobal.Initialize();

            // Add Distributed Monitoring Multisettings
            using (SqlConnection cxn = new SqlConnection(NpdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();
                // Create S01 through S[numServers]
                for (int n = 1; n < XboxLiveDistMonConstants.NumSiteIds + 1; n++)
                {
                    sqlCommand.CommandText = "INSERT INTO t_multisetting_overrides (vc_environment, vc_component, i_site_id, vc_server, vc_multisetting, vc_value) VALUES ('" + xonline.common.config.Config.Environment + "', 'ALL', -1, 'ALL', 'stringsvr_logStringPrefix', 'prefix=TestStressAPIFail_S" + n.ToString("00") + ";type=failure')";
                    sqlCommand.ExecuteNonQuery();
                }
                // Create CDNTime and SigninTime
                sqlCommand.CommandText = "INSERT INTO t_multisetting_overrides (vc_environment, vc_component, i_site_id, vc_server, vc_multisetting, vc_value) VALUES ('" + xonline.common.config.Config.Environment + "', 'ALL', -1, 'ALL', 'stringsvr_logStringPrefix', 'prefix=TestStressCDNTime;type=measurement;threshold=" + XboxLiveDistMonConstants.TestCDNTimeThreshold.ToString() + "')";
                sqlCommand.ExecuteNonQuery();
                sqlCommand.CommandText = "INSERT INTO t_multisetting_overrides (vc_environment, vc_component, i_site_id, vc_server, vc_multisetting, vc_value) VALUES ('" + xonline.common.config.Config.Environment + "', 'ALL', -1, 'ALL', 'stringsvr_logStringPrefix', 'prefix=TestStressSigninTime;type=measurement;threshold=" + XboxLiveDistMonConstants.TestSigninTimeThreshold.ToString() + "')";
                sqlCommand.ExecuteNonQuery();

                cxn.Close();
            }
        }

        public override void PostRun(RUN_TYPE runType)
        {
            if (runType != RUN_TYPE.STRESS)
            {
                return;
            }

            // Add Distributed Monitoring Multisettings
            using (SqlConnection cxn = new SqlConnection(NpdbConnectionString))
            {
                cxn.Open();

                SqlCommand sqlCommand = cxn.CreateCommand();
                // Delete S01 through S[numServers]
                for (int n = 1; n < XboxLiveDistMonConstants.NumSiteIds + 1; n++)
                {
                    sqlCommand.CommandText = "DELETE FROM t_multisetting_overrides WHERE vc_multisetting = 'stringsvr_logStringPrefix' AND vc_value = 'prefix=TestStressAPIFail_S" + n.ToString("00") + ";type=failure'";
                    sqlCommand.ExecuteNonQuery();
                }
                // Delete CDNTime and SigninTime
                sqlCommand.CommandText = "DELETE FROM t_multisetting_overrides WHERE vc_multisetting = 'stringsvr_logStringPrefix' AND vc_value = 'prefix=TestStressCDNTime;type=measurement;threshold=" + XboxLiveDistMonConstants.TestCDNTimeThreshold.ToString() + "'";
                sqlCommand.ExecuteNonQuery();
                sqlCommand.CommandText = "DELETE FROM t_multisetting_overrides WHERE vc_multisetting = 'stringsvr_logStringPrefix' AND vc_value = 'prefix=TestStressSigninTime;type=measurement;threshold=" + XboxLiveDistMonConstants.TestSigninTimeThreshold.ToString() + "'";
                sqlCommand.ExecuteNonQuery();

                cxn.Close();
            }
        }

        public void InitializeFunctional()
        {
            //-- Default, used when a language is requested that we don't have text for
            DBHelper.AddTitleMsg(1,0,"default",new System.DateTime(2023,11,22),"ENGL Title 1.");

            //-- English
            DBHelper.AddTitleMsg(1,0,"en-US",new System.DateTime(2023,11,22),"ENGL Title 1.");
            DBHelper.AddTitleMsg(2,0,"en-US",new System.DateTime(2023,11,22),"ENGL Title 2.");
            DBHelper.AddTitleMsg(2,1,"en-US",new System.DateTime(2023,11,22),"ENGL Title 2 - String1.");
            DBHelper.AddTitleMsg(2,0,"jp-JP",new System.DateTime(2023,11,22),"NON-ENGL Title 2.");

        }

        public System.Collections.Generic.List<System.Type> GetStressTests()
        {
            System.Collections.Generic.List<System.Type> Tests = new System.Collections.Generic.List<System.Type>();
            Tests.Add(typeof(GetString));
            Tests.Add(typeof(GetMultipleString));
            Tests.Add(typeof(AddString));
            Tests.Add(typeof(VetString));
            Tests.Add(typeof(GetTitle));
            Tests.Add(typeof(GetMultipleTitle));

            Tests.Add(typeof(XeAddString));
            Tests.Add(typeof(XeGetString));
            Tests.Add(typeof(XeGetMultipleString));
            Tests.Add(typeof(XeVetString));
            Tests.Add(typeof(XeLogString));
            Tests.Add(typeof(XeLogBinary));

            Tests.Add(typeof(XeFailureLogString));
            Tests.Add(typeof(XeMeasurementLogString));
            Tests.Add(typeof(XeFailureLogBinary));            

            return Tests;
        }

        public System.Collections.Generic.List<TestNode> GetTests()
        {
            System.Collections.Generic.List<TestNode> tl=new System.Collections.Generic.List<TestNode>();
            tl.Add(new FuncAddString());
            tl.Add(new FuncGetString());
            tl.Add(new FuncVetString());
            tl.Add(new FuncMsgServer());
            tl.Add(new FuncTestXRLScan());
            tl.Add(new M2_Put_Get_string_Pos_Cases());
            tl.Add(new M2_Put_Get_string_Neg_Cases());
            tl.Add(new M2_Vet_string_Pos_Cases());
            tl.Add(new M2_Vet_string_Neg_Cases());
            tl.Add(new M2_Get_string_Pos_Cases());
            tl.Add(new M2_Get_string_Neg_Cases());
            tl.Add(new FuncXServerHeaderCheck());
            tl.Add(new FuncLogString());

            return tl;
        }

        [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
        public class FuncGetString : TestNode
        {
            public  FuncGetString()
            {
                AddChild(new GetKnownString() );
                AddChild(new GetDefaultKnownString() );
                AddChild(new GetMultipleKnownStrings() );
                AddChild(new GetMAXStrings() );
                AddChild(new GetAddedString() );
                AddChild(new GetMAXStringLen() );
                AddChild(new GetZeroStrings() );
                AddChild(new GetMissingStringIDs() );

                AddChild(new GetExpiringString() );          // FAIL case

                AddChild(new NegXRLUnderflow() );
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetKnownString : TestBase
            {
                // get known existing string from server
                protected override void Execute()
                {

                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    // this string is defined by the site config file
                    // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                    request.dwTitleID = 0xFFFE0000;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[1];
                    request.rgdwStringIDs[0] = 1;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( response.wNumStrings > 0)
                    {
                        //TODO: Check string return results
                        // DEBUG
                        foreach ( StringData str in response.rgStringData )
                        {
                            Console.WriteLine(str.wStringSize.ToString());
                            Console.WriteLine( "Stringout: " + str.szString );
                        }

                    }
                    else  // error
                        return;

                    ResultCode=TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetDefaultKnownString : TestBase
            {
                // get known existing string from server
                protected override void Execute()
                {

                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    // this string is defined by the site config file
                    // \ops\sitecfg\npdb_stringsvr_populate_common.sql

                    request.dwTitleID = 0xFFFE0000;     //DASH
                    request.wLanguage = 999;            // this language should not exist
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[1];
                    request.rgdwStringIDs[0] = 1;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( response.wNumStrings > 0)
                    {
                        //TODO: Check string return results?
                        // DEBUG
                        //foreach ( StringData str in response.rgStringData )
                        //{
                        //  Console.WriteLine(str.wStringSize.ToString());
                        //  Console.WriteLine( "Stringout: " + str.szString );
                        //}

                    }
                    else  // error
                        return;

                    ResultCode=TEST_RESULTS.PASSED;
                }
            }


            // BUG 34176 -- there is some debate as to what exactly the max string size is
            // Update: Now controlled by string server INI file, set to 512 chars
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetMAXStringLen : TestBase
            {
                // get known existing string from server which is of maximum size
                protected override void Execute()
                {

                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    request.dwTitleID = 1111;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[1];
                    request.rgdwStringIDs[0] = MAXSTRINGLENID;
                    //TODO: update this in the test data

                    // force reload server cache
                    StringServTest.ExecuteXmgmtCommand(Interface.stringsvr,"e :stringsvr CacheFlush");

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( (response.wNumStrings != 1) || (response.rgStringData[0].wStringSize != MAXSTRINGLEN) )
                    {
                        // FAILED!
                throw new UnexpectedTestResultException( " GetStringLength: "+ response.rgStringData[0].wStringSize.ToString() + " does not match length of " + MAXSTRINGLEN.ToString() );
                    }

                    //TODO: Check string returned against known value?
                    ResultCode=TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetMultipleKnownStrings : TestBase
            {
                protected override void Execute()
                {
                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    // this string is defined by the site config file
                    // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                    request.dwTitleID = 0xFFFE0000;
                    request.wLanguage = 1;
                    request.wNumStrings = 6;
                    request.rgdwStringIDs = new uint[6];
                    request.rgdwStringIDs[0] = 1;
                    request.rgdwStringIDs[1] = 2;
                    request.rgdwStringIDs[2] = 3;
                    request.rgdwStringIDs[3] = 4;
                    request.rgdwStringIDs[4] = 5;
                    request.rgdwStringIDs[5] = 6;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( response.wNumStrings > 0)
                    {
                        //TODO: Check string return results
                        // DEBUG
                        foreach ( StringData str in response.rgStringData )
                        {
                            Console.WriteLine( str.wStringSize.ToString() );
                            Console.WriteLine( "Stringout: " + str.szString );
                        }

                    }
                    else  // error
                        return;

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetMissingStringIDs : TestBase
            {
                protected override void Execute()
                {
                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    // this string is defined by the site config file
                    // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                    request.dwTitleID = 0xFFFE0000;
                    request.wLanguage = 1;
                    request.wNumStrings = 3;
                    request.rgdwStringIDs = null;

                    // Request should return OK, but have no strings
                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( response.wNumStrings > 0)
                    {
                        // FAILED
                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetZeroStrings : TestBase
            {
                protected override void Execute()
                {
                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    // this string is defined by the site config file
                    // \ops\sitecfg\npdb_stringsvr_populate_common.sql
                    request.dwTitleID = 0xFFFE0000;
                    request.wLanguage = 1;
                    request.wNumStrings = 0;
                    request.rgdwStringIDs = null;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( response.wNumStrings != 0)
                    {
                        //How did this happen??? FAILED
                        foreach ( StringData str in response.rgStringData )
                        {
                            Console.WriteLine( str.wStringSize.ToString() );
                            Console.WriteLine( "Stringout: " + str.szString );
                        }

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }


            // Wha the heck, let's get A LOT of strings
            // From 0 up to MAX strings
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetMAXStrings : TestBase
            {
                protected override void Execute()
                {
                    uint nNumStrings = MAXNUMSTRINGS;

                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    request.dwTitleID = 1;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[MAXNUMSTRINGS];
                    for ( int i = 0; i < MAXNUMSTRINGS; i++ )
                    {
                        request.rgdwStringIDs[i] = 1;
                    }

                    if (!request.Execute(out response,600000))
                    {
                        //DEBUG
                        //Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( response.wNumStrings != nNumStrings)
                    {
                        Console.WriteLine("Requested: " + nNumStrings );
                        Console.WriteLine("Received: " + response.wNumStrings.ToString() );
                        return;
                    }



                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // RAID 33858
            // TODO: Move this test to AddString area so test are not inter-dependent?
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetAddedString : TestBase
            {
                // get known existing string from server
                protected override void Execute()
                {

                    // first, need to sleep for refresh time?   5 minutes
                    // TODO: Gotta be a better way to do this!

                    //System.Threading.Thread.Sleep(1000 * 60 * 5);

                    string addedstr = "Very simple AddbyID.";

                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    // added by AddStringByID test
                    request.dwTitleID = 1111;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[1];
                    request.rgdwStringIDs[0] = 9999;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( (response.wNumStrings != 1) ||
                        (response.rgStringData[0].szString.CompareTo(addedstr) != 0) )
                    {
                        // didn't get our expected string back
                        return;
                    }



                    ResultCode=TEST_RESULTS.PASSED;
                }
            }

            // BUG 35262
            // Strings don't expire.  This test will fail for the forseeable future
            // Best to not run it at all, since it takes too much time
            // However, I've commented out the wait times so it doesn't really matter
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetExpiringString : TestBase
            {

                public void AddExpiringString (string val)
                {
                    // cache flushing takes time -- take that into account when choosing an expiration time
                    TimeSpan cacheFlushDuration;
                    DateTime cacheFlushStartingTime = DateTime.Now;
                    StringServTest.ExecuteXmgmtCommand(Interface.stringsvr, "e :stringsvr cacheflush");
                    cacheFlushDuration = DateTime.Now - cacheFlushStartingTime;

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.szString = val;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddSeconds(15) + cacheFlushDuration;
                    request.dwStringID = 9985;
                    request.fVetText = false;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;

                    XRLAddResponse response=null;


                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        throw new System.Exception("Add string failed ");
                    }

                    if(response!=null)
                    {
                        Console.WriteLine("string id ="+response.dwStringID);
                    }



                }

                // get known existing string from server
                protected override void Execute()
                {
                    // added by AddExpiringString test
                    string addedstr = "Add then expire string";

                    AddExpiringString(addedstr);
                    // force reload server cache
                    StringServTest.ExecuteXmgmtCommand(Interface.stringsvr,"e :stringsvr CacheFlush");

                    System.Threading.Thread.Sleep(2000);

                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    request.dwTitleID = 1111;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[1];
                    request.rgdwStringIDs[0] = 9985;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if ( (response.wNumStrings != 1) ||
                        (response.rgStringData[0].szString.CompareTo(addedstr) != 0) )
                    {
                        // didn't get our expected string back
                        Console.WriteLine("Unexpected string on initial compare: \n");
                        Console.WriteLine(response.rgStringData[0].szString);
                        return;
                    }

                    // the added string will expire in 30 sec
                    System.Threading.Thread.Sleep(20000);

                    // Now repeat, but string should be gone

                    request = new XRLGetString();

                    request.dwTitleID = 1111;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[1];
                    request.rgdwStringIDs[0] = 9985;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }

                    if (response.wNumStrings != 1)
                    {
                        // FAILED!  We should get back 1 empty  strings
                        Console.WriteLine(" FAILED!  We should get back 1 strings but server is returned "+response.wNumStrings );

                        return;
                    }

                    if(response.rgStringData[0].szString.Length>0)
                        Console.WriteLine(" string  value =  "+response.rgStringData[0].szString );


                    ResultCode=TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class NegXRLUnderflow : TestBase
            {
                protected override void Execute()
                {

                    // TODO:  host address and headers are hard-coded here because we cannot
                    //    rely on the ServerTestFramework XRL wrapper to do them for us


                    MemoryStream        reqStream = new MemoryStream();
                    BinaryWriter        bw = new BinaryWriter(reqStream);
                    HttpWebRequest httpreq;
                    HttpWebResponse response;
                    Stream httpStream;

                    // Construct request stream
                    RandomEx random = new RandomEx();
                    bw.Write((uint)random.Next());

                    bw.Write((ushort) 1 );  // title ID
                    bw.Write((ushort) 1 );  // lang
                    bw.Write((ushort) 100 );    // num strings              // TEST XRL UNDERFLOW



                    // Create an HTTP request and add headers
                    string url = "http://"+Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr).Address.ToString()+":"+Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr).Port.ToString()+"/msgserver/addstring.ashx";
                    httpreq = (HttpWebRequest) WebRequest.Create(url);
                    httpreq.Method = "POST";
                    httpreq.ProtocolVersion = HttpVersion.Version10;
                    httpreq.Headers.Add("Relja: true");
                    httpreq.ContentType = "xon/2";
                    httpreq.UserAgent = "2/0.10.4715";
                    httpreq.ContentLength = reqStream.Length;

                    // attach the request data we wrote to the HTTP request
                    httpStream = httpreq.GetRequestStream();
                    reqStream.WriteTo(httpStream);
                    httpStream.Close();

                    httpreq.Timeout = 2000;

                    try
                    {
                        response = (HttpWebResponse) httpreq.GetResponse();
                    }
                    catch( System.Net.WebException e )
                    {
                        // GetResponse() throws exception on HTTP 500
                        response = (HttpWebResponse) e.Response;
                        if ( (response != null) && (response.StatusCode == HttpStatusCode.InternalServerError) )
                        {
                            ResultCode=TEST_RESULTS.PASSED;
                            return;
                        }
                    }

                    // FAILED -- either request succeeded unexpectedly or we got back the wrong code
                    if ( response != null )
                        ConsoleX.WriteLine("\nRESPONSE: " + response.StatusCode.ToString() + " " + response.GetResponseHeader("XErr") );
                }
            }

        }

        [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
        public class FuncAddString : TestNode
        {
            public FuncAddString()
            {
                AddChild(new AddSimpleString() );
                AddChild(new AddDashString() );
                AddChild(new AddNewTitle() );
                AddChild(new AddSimpleDefault() );
                AddChild(new AddMultiLangString() );
                AddChild(new AddEmptyString() );
                AddChild(new AddExpiredString() );
                AddChild(new AddMaxExpireString() );
                AddChild(new AddNonASCIIString() );
                AddChild(new AddMaxString() );
                AddChild(new NegAddMaxPlusOneString() );
                AddChild(new AddGoodVetString() );
                AddChild(new AddTroubleString() );

                AddChild(new NegAddDefaultLangString() );
                AddChild(new NegAddBadVetString() );
                AddChild(new NegXRLUnderflow() );
                AddChild(new TryToAddTitleWithLang0());
                AddChild(new TryToAddStringWithLang0IDAuto() );
                AddChild(new TryToAddStringWithLang0ID555() );
                AddChild(new AddmultStringsWithDupLang() );
                AddChild(new AddStringsWithDefaultLang() );
                AddChild(new AddStringsWithDefaultLangIDSpecified());

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddSimpleString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "Very simple AddbyID.";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(10).ToUniversalTime();

                    request.dwStringID = 9999;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                    //if ( !request.Execute() );
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }


            // BUG: 34172
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class AddDashString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "This is a new Dash string.";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 0xFFFE0000;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1).ToUniversalTime();

                    request.dwStringID = 9998;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                        //if ( !request.Execute() );
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddNewTitle : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Title";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1).ToUniversalTime();
                    // StringID == 0 for Titles
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    if (!request.Execute())
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddSimpleDefault : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "Add string with unknown ID";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = new System.DateTime(2025, 1, 1, 0, 0, 0, 0);

                    request.dwStringID = 0xFFFFFFFF;
                    request.wDefLanguage = 1;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                    //if ( !request.Execute() )
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    if (response.dwStringID == 0)
                    {
                        // new StringID was not returned!
                        ConsoleX.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else
                        //ConsoleX.WriteLine("StringID: " + response.dwStringID);

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddMultiLangString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "Add string with unknown ID";
                    string addstr2 = "Ici le francaise.  Oui oui!";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    LanguageString langstr2 = new LanguageString();
                    langstr2.wLanguage = 3;
                    langstr2.wStringSize= (ushort) addstr2.Length;
                    langstr2.szString = addstr2;


                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = new System.DateTime(2025, 1, 1, 0, 0, 0, 0);

                    request.dwStringID = 0xFFFFFFFF;
                    request.wDefLanguage = 1;
                    request.cLangStrings = 2;
                    request.rgLangStrings = new LanguageString[2];
                    request.rgLangStrings[0] = langstr;
                    request.rgLangStrings[1] = langstr2;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                        //if ( !request.Execute() )
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    if (response.dwStringID == 0)
                    {
                        // new StringID was not returned!
                        ConsoleX.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else
                        //ConsoleX.WriteLine("StringID: " + response.dwStringID);

                        ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // String server should not allow language 0
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class NegAddDefaultLangString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "Attempt to add this string as language 0";
                    string addstr2 = "This is an English string for a Neg test.";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 0;
                    langstr.wStringSize = (ushort) addstr.Length;
                    langstr.szString = addstr;

                    LanguageString langstr2 = new LanguageString();
                    langstr2.wLanguage = 1;
                    langstr2.wStringSize = (ushort) addstr2.Length;
                    langstr2.szString = addstr2;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddMinutes(60).ToUniversalTime();

                    request.dwStringID = 0xFFFFFFFF;
                    request.wDefLanguage = 1;
                    request.cLangStrings = 2;
                    request.rgLangStrings = new LanguageString[2];
                    request.rgLangStrings[0] = langstr;
                    request.rgLangStrings[1] = langstr2;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (request.Execute(out response))
                    {
                        Console.WriteLine("Unexpecte pass.  Got stringID: " + response.dwStringID);
                        return;
                    }

                    if (request.XErr != HResult.XONLINE_E_STRING_INVALID_LANGUAGE)
                    {
                        Console.WriteLine("Incorrect error code.");
                        return;
                    }


                    ResultCode = TEST_RESULTS.PASSED;
                }
            }


            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddEmptyString : TestBase
            {
                protected override void Execute()
                {

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= 100;
                    langstr.szString = null;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1).ToUniversalTime();

                    request.dwStringID = 9995;
                    request.fVetText = false;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;

                    if (!request.Execute())
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    //TODO: Move GetAddedString test here?

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddExpiredString : TestBase
            {
                protected override void Execute()
                {

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= 100;
                    langstr.szString = "This string should be expired.";

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(-1).ToUniversalTime();

                    request.dwStringID = 9988;
                    request.fVetText = false;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;

                    // Should add OK, but not show up in DB/cache

                    if (!request.Execute())
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddMaxExpireString : TestBase
            {
                protected override void Execute()
                {

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= 100;
                    langstr.szString = "This string expires at the end of time..";

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.MaxValue.AddDays(-1);

                    request.dwStringID = 9987;
                    request.fVetText = false;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;

                    if (!request.Execute())
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    // force reload server cache
                    StringServTest.ExecuteXmgmtCommand(Interface.stringsvr,"e :stringsvr CacheFlush");

                    // do a get to make sure the string is added.
                    XRLGetString Grequest = new XRLGetString();
                    XRLGetStringResponse Gresponse;

                    Grequest.dwTitleID = 1111;
                    Grequest.wLanguage = 1;
                    Grequest.wNumStrings = 1;
                    Grequest.rgdwStringIDs = new uint[1];
                    Grequest.rgdwStringIDs[0] = 9987;

                    if (!Grequest.Execute(out Gresponse))
                    {
                        //DEBUG
                        Console.WriteLine( "XRLGetString failed :"+Grequest.GetDumpString() );
                        return;
                    }

                    if ( (Gresponse.wNumStrings != 1) ||
                        (Gresponse.rgStringData[0].szString.CompareTo(langstr.szString) != 0) )
                    {
                        // didn't get our expected string back
                        Console.WriteLine("Unexpected string : \n");
                        Console.WriteLine(Gresponse.rgStringData[0].szString);
                        return;
                    }


                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // BUG 35262 -- Strings don't expire
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddExpiringString : TestBase
            {
                protected override void Execute()
                {

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= 100;
                    langstr.szString = "Add then expire string.";

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddSeconds(30).ToUniversalTime();
                        // gives enough time for cache to load it, then expire

                    request.dwStringID = 9986;
                    request.fVetText = false;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;


                    if (!request.Execute())
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddMaxString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = new string('Z', (int) MAXSTRINGLEN);

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1).ToUniversalTime();

                    request.dwStringID = MAXSTRINGLENID;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                        //if ( !request.Execute() );
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class NegAddMaxPlusOneString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = new string('Z', (int) MAXSTRINGLEN+1);

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1).ToUniversalTime();

                    request.dwStringID = 9993;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (request.Execute())
                    {
                        // no error code from Execute() is a failure
                        Console.WriteLine("Unexpected success: " + request.GetDumpString() );

                        return;
                    }

                    if (request.XErr != HResult.XONLINE_E_STRING_TOO_LONG)
                    {
                        Console.WriteLine("Incorrect error code.");
                        return;
                    }


                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class AddGoodVetString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "This string should be accepted by vetting";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(10).ToUniversalTime();

                    request.dwStringID = 9992;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = true;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddNonASCIIString : TestBase
            {
                protected override void Execute()
                {

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= 100;
                    langstr.szString = "Pi \u03a0 and Sigma \u03a3 are non-ASCII characters.";;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1).ToUniversalTime();

                    request.dwStringID = 9989;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    if (!request.Execute())
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    //TODO: Move GetAddedString test here?

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class NegAddBadVetString : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "This string should be rejected by vetting, shit.";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(10).ToUniversalTime();

                    request.dwStringID = 9991;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = true;

                    XRLAddResponse response = new XRLAddResponse();

                    if (request.Execute())
                    {
                        Console.WriteLine("Unexpected pass: " + request.GetDumpString() );

                        return;
                    }

                    if (request.XErr != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT)
                    {
                        Console.WriteLine("Incorrect error code.");
                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddTroubleString : TestBase
            {
                protected override void Execute()
                {

                    string addstr = @"This string uses traditional 'trouble'
                        characters, -- ""hope""fully the \\backend will have no

                        problem using this string anway";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(10);

                    request.dwStringID = 9990;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    XRLAddResponse response = new XRLAddResponse();

                    if (!request.Execute(out response))
                        //if ( !request.Execute() );
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class NegXRLUnderflow : TestBase
            {
                protected override void Execute()
                {

                    // TODO:  host address and headers are hard-coded here because we cannot
                    //    rely on the ServerTestFramework XRL wrapper to do them for us


                    MemoryStream        reqStream = new MemoryStream();
                    BinaryWriter        bw = new BinaryWriter(reqStream);
                    HttpWebRequest httpreq;
                    HttpWebResponse response;
                    Stream httpStream;

                    //string strdata="rawtest";
                    //ASCIIEncoding enc = new ASCIIEncoding();
                    //byte[] strBytes = enc.GetBytes(strdata);

                    // Construct request stream
                    RandomEx random = new RandomEx();
                    bw.Write((uint)random.Next()); //title ID
                    bw.Write((uint) 9996 );         //string ID
                    bw.Write((ushort) 1);           // lang                 // TEST:  XRL Underflow
                    bw.Write((ushort) 3);           // expire
                    bw.Write((ushort) 0);           // string size
                    //bw.Write( don't write this


                    // Create and HTTP request and add headers
                    string url = "http://"+Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr).Address.ToString()+":"+Global.XEnv.GetVirtualInterface(VirtualInterface.stringsvr).Port.ToString()+"/msgserver/addstring.ashx";
                    httpreq = (HttpWebRequest) WebRequest.Create(url);
                    httpreq.Method = "POST";
                    httpreq.ProtocolVersion = HttpVersion.Version10;
                    httpreq.Headers.Add("Relja: true");
                    httpreq.ContentType = "xon/2";
                    httpreq.UserAgent = "2/0.10.4715";
                    httpreq.ContentLength = reqStream.Length;

                    // attach the request data we wrote to the HTTP request
                    httpStream = httpreq.GetRequestStream();
                    reqStream.WriteTo(httpStream);
                    httpStream.Close();

                    httpreq.Timeout = 2000;


                    try
                    {
                        response = (HttpWebResponse) httpreq.GetResponse();
                    }
                    catch( System.Net.WebException e )
                    {
                        // GetResponse() throws exception on HTTP 500
                        response = (HttpWebResponse) e.Response;
                        if ( (response != null) && (response.StatusCode == HttpStatusCode.InternalServerError) )
                        {
                            ResultCode=TEST_RESULTS.PASSED;
                            return;
                        }
                    }

                    // FAILED -- either request succeeded unexpectedly or we got back the wrong code
                    if ( response != null )
                        ConsoleX.WriteLine("\nRESPONSE: " + response.StatusCode.ToString() + " " + response.GetResponseHeader("XErr") );
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class TryToAddTitleWithLang0 :TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Title with Lang 0";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 0;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1);
                    request.wDefLanguage=0;
                    // StringID == 0 for Titles
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    if (!request.Execute())
                    {
                        //DEBUG

                        if(request.XErr == HResult.XONLINE_E_STRING_INVALID_LANGUAGE)
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            ResultCode = TEST_RESULTS.FAILED;
                            Console.WriteLine( request.GetDumpString() );
                            throw new System.Exception(request.GetDumpString());
                        }


                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        Console.WriteLine( "Expected  X-Err ="+HResult.XONLINE_E_STRING_INVALID_LANGUAGE+"Recived 0");
                        throw new System.Exception("Expected  X-Err ="+HResult.XONLINE_E_STRING_INVALID_LANGUAGE+"Recived 0");
                    }


                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class TryToAddStringWithLang0IDAuto :TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Title with Lang 0";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 0;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.wDefLanguage=0;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1);
                    request.dwStringID=0xFFFFFFFF;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    if (!request.Execute())
                    {
                        //DEBUG

                        if(request.XErr == HResult.XONLINE_E_STRING_INVALID_LANGUAGE)
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            ResultCode = TEST_RESULTS.FAILED;
                            Console.WriteLine( request.GetDumpString() );
                            throw new System.Exception(request.GetDumpString());
                        }


                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        Console.WriteLine( "Expected  X-Err ="+HResult.XONLINE_E_STRING_INVALID_LANGUAGE+"Recived 0");
                        throw new System.Exception("Expected  X-Err ="+HResult.XONLINE_E_STRING_INVALID_LANGUAGE+"Recived 0");
                    }


                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class TryToAddStringWithLang0ID555 :TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Title with Lang 0";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 0;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.wDefLanguage=0;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1);
                    request.dwStringID=555;
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    if (!request.Execute())
                    {
                        //DEBUG

                        if(request.XErr == HResult.XONLINE_E_STRING_INVALID_LANGUAGE)
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            ResultCode = TEST_RESULTS.FAILED;
                            Console.WriteLine( request.GetDumpString() );
                            throw new System.Exception(request.GetDumpString());
                        }


                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        Console.WriteLine( "Expected  X-Err ="+HResult.XONLINE_E_STRING_INVALID_LANGUAGE+"Recived 0");
                        throw new System.Exception("Expected  X-Err ="+HResult.XONLINE_E_STRING_INVALID_LANGUAGE+"Recived 0");
                    }


                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddmultStringsWithDupLang : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Title with Lang 0";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;

                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1111;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1);
                    // StringID == 0 for Titles
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[2];
                    request.rgLangStrings[0] = langstr;
                    request.rgLangStrings[1] = langstr;
                    request.fVetText = false;

                    if (!request.Execute())
                    {
                        //DEBUG

                        if(request.XErr == HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE)
                        {
                            ResultCode = TEST_RESULTS.PASSED;
                        }
                        else
                        {
                            ResultCode = TEST_RESULTS.FAILED;
                            Console.WriteLine( request.GetDumpString() );
                            throw new System.Exception(request.GetDumpString());
                        }


                    }
                    else
                    {
                        ResultCode = TEST_RESULTS.FAILED;
                        Console.WriteLine( "Expected  X-Err ="+HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE+"Recived 0");
                        throw new System.Exception("Expected  X-Err ="+HResult.XONLINE_E_STRING_LANGUAGE_DUPLICATE+"Recived 0");
                    }


                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddStringsWithDefaultLang : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Titlewith lang 1 and default to 1";

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 1;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;


                    XRLAddResponse response;
                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1221;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1);
                    request.dwStringID=0xFFFFFFFF;
                    request.wDefLanguage=1;

                    // StringID == 0 for Titles
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[1];
                    request.rgLangStrings[0] = langstr;
                    request.fVetText = false;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    string text =DBHelper.GetTitleMsg((int)request.dwTitleID,(int)response.dwStringID,"en-US");
                    if(text!= langstr.szString)
                        throw new Exception ("String Mixmatch Expected :"+langstr.szString+" but Recived "+text);

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class AddStringsWithDefaultLangIDSpecified : TestBase
            {
                protected override void Execute()
                {
                    string addstr = "An English Titlewith lang 1 and default to 1";

                    LanguageString langstr1 = new LanguageString();
                    langstr1.wLanguage = 1;
                    langstr1.wStringSize= (ushort) addstr.Length;
                    langstr1.szString = addstr;

                    LanguageString langstr = new LanguageString();
                    langstr.wLanguage = 0;
                    langstr.wStringSize= (ushort) addstr.Length;
                    langstr.szString = addstr;


                    XRLAddResponse response;
                    XRLAddString request = new XRLAddString();
                    request.dwTitleID = 1221;
                    request.dtExpire = System.DateTime.UtcNow.AddDays(1);
                    request.dwStringID=9984;
                    request.wDefLanguage=1;

                    // StringID == 0 for Titles
                    request.cLangStrings = 1;
                    request.rgLangStrings = new LanguageString[2];
                    request.rgLangStrings[0] = langstr;
                    request.rgLangStrings[1] = langstr1;
                    request.fVetText = false;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    string text =DBHelper.GetTitleMsg((int)request.dwTitleID,(int)response.dwStringID,"default");
                    if(text!= langstr.szString)
                        throw new Exception ("String Mixmatch Expected :"+langstr.szString+" but Recived "+text);

                    // force reload server cache
                    StringServTest.ExecuteXmgmtCommand(Interface.stringsvr,"e :stringsvr CacheFlush");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
        public class FuncVetString : TestNode
        {

            public FuncVetString()
            {
                AddChild(new VetKnownGoodString() );
                AddChild(new VetKnownBadString() );
                AddChild(new VetMaxString() );
                AddChild(new VetTooLongString() );
                AddChild(new VetGoodLongString() );
                AddChild(new VetMultipleStrings() );
                AddChild(new VetTableStrings() );
//              AddChild(new VetBadLongString() );
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetKnownGoodString : TestBase
            {
                protected override void Execute()
                {
                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;

                    string vetstr = "This should be harmless";

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 1;
                    request.rgStringData = new StringData[1];
                    request.rgStringData[0] = new StringData();
                    request.rgStringData[0].szString = vetstr;
                    request.rgStringData[0].wStringSize = (ushort) vetstr.Length;

                    if (!request.Execute(out response))
                    {
                        Console.WriteLine("\nSTRING: " + request.rgStringData[0].szString);
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else   // check response
                    {
                        if ( response.rghrString[0] != HResult.S_OK )  // 0 == OK string
                        {
                            Console.WriteLine(response.rghrString[0]);
                            return;
                        }
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetKnownBadString : TestBase
            {
                protected override void Execute()
                {
                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;

                    string vetstr = "fuck is an offensive word";

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 1;
                    request.rgStringData = new StringData[1];
                    request.rgStringData[0] = new StringData();
                    request.rgStringData[0].szString = vetstr;
                    request.rgStringData[0].wStringSize = (ushort) vetstr.Length;

                    if (!request.Execute(out response))
                    {
                        Console.WriteLine("\nSTRING: " + request.rgStringData[0].szString);
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else   // check response
                    {

                        if ( response.rghrString[0] != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT)
                        {
                            Console.WriteLine("Unexpected response: " + response.rghrString[0]);
                            return;
                        }
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // any single-string vet test case should just be added here for simplicity
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetTableStrings : TestBase
            {
                public struct strTableEntry
                {
                    public string   strData;
                    public uint retExpected;

                    public strTableEntry(string data, uint retval) { strData = data; retExpected = retval; }
                }

                protected override void Execute()
                {
                    strTableEntry[] StringTable = {
                        // FORMAT: test word or phrase , expected return result

                        // nominal test cases
                        new strTableEntry(  "test",             HResult.S_OK ),
                        new strTableEntry(  "shit",             HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry(  "test string",      HResult.S_OK ),
                        new strTableEntry(  " leading space",   HResult.S_OK ),
                        new strTableEntry(  "fuck",             HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),   //i_flag case

                        // substring i_flag match words -- should remove all non-alpha(?) and check
                        new strTableEntry( "fuck!",             HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( "f u    ck",         HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),

                        //possible trouble characters or situations
                        new strTableEntry( "",                  HResult.S_OK ),
                        new strTableEntry( "-- SQL comment",    HResult.S_OK ),
                        new strTableEntry( "-- SQL comment shit",   HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( "'single innner quote",          HResult.S_OK ),
                        new strTableEntry( " 'again but offensive shit",    HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( " 'again but iflag: fuck",       HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( "this time 'full innerquotes' string",   HResult.S_OK ),
                        new strTableEntry( "this time 'full inner shit offensive' string",  HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( "fu'ck", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( "fu\nck", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),
                        new strTableEntry( "\nfuck", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT ),

                        new strTableEntry( "#@$#%@!",   HResult.S_OK ),
                        new strTableEntry( "#f@u$#c%@k!",   HResult.S_OK ),

                        };

                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 1;
                    request.rgStringData = new StringData[ StringTable.Length ];

                    for (uint index = 0; index < StringTable.Length; index++)
                    {
                        request.rgStringData[index] = new StringData();
                        request.rgStringData[index].szString = StringTable[index].strData;
                        request.rgStringData[index].wStringSize = (ushort) StringTable[index].strData.Length;
                    }

                    if (!request.Execute(out response))
                    {
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else   // check responses
                    {
                        if (response.wNumStrings != StringTable.Length)
                        {
                            Console.WriteLine("Incorrect number of return vals: " + request.GetDumpString() );
                        }
                        else
                        {
                            ResultCode = TEST_RESULTS.PASSED;   // default to pass now

                            for (uint index = 0; index < StringTable.Length; index++)
                            {
                                if (response.rghrString[index] != StringTable[index].retExpected)
                                {
                                    Console.WriteLine("Bad retval, entry  " + index);
                                    Console.WriteLine(StringTable[index].strData);
                                    Console.WriteLine(request.GetDumpString() );
                                    ResultCode = TEST_RESULTS.FAILED;
                                }
                            }
                        }
                    }
                }
            }


            // test max string size
            // TODO: this was throwing an exception in FDTransaction... resource collection issue?  Fix this.
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetMaxString : TestBase
            {
                protected override void Execute()
                {
                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;
                    string vetstr = "";
                    char [] alpha = {' ',' ',' ',' ','a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'};

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 1;

                    uint nStringSize = 0;

                    // let's vet lots of really long strings
                    while( nStringSize < MAXVETLEN )
                    {
                        //there is a small chance we'll randomly create a word on the ban list  :)
                        vetstr = vetstr + alpha[nStringSize % 30];

                        request.rgStringData = new StringData[1];
                        request.rgStringData[0] = new StringData();
                        request.rgStringData[0].szString = vetstr;
                        request.rgStringData[0].wStringSize = (ushort) vetstr.Length;

                        if (!request.Execute(out response))
                        {
                            Console.WriteLine("\nSTRING: " + request.rgStringData[0].szString);
                            Console.WriteLine( request.GetDumpString() );
                            return;
                        }
                        else   // check response
                        {
                            //DEBUG
                            //Console.WriteLine("\n" + vetstr.Length + " " + vetstr);
                            //Console.WriteLine("Ret: " + response.rghrString[0]);
                        }

                        nStringSize++;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // WORK ITEM: Bug 82013
            // Update: Bug fixed, this should now throw OFFENSIVE_TEXT error
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetTooLongString : TestBase
            {
                protected override void Execute()
                {
                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;

                    string vetstr = "this string should return S_OK right now even if it has bad text because it's over the 64 character limit.  Shit!";

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 1;
                    request.rgStringData = new StringData[1];
                    request.rgStringData[0] = new StringData();
                    request.rgStringData[0].szString = vetstr;
                    request.rgStringData[0].wStringSize = (ushort) vetstr.Length;

                    if (!request.Execute(out response))
                    {
                        Console.WriteLine("\nSTRING: " + request.rgStringData[0].szString);
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else   // check response
                    {

                        if ( response.rghrString[0] != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT)
                        {
                            Console.WriteLine("Unexpected response: " + response.rghrString[0] );
                            return;
                        }
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetGoodLongString : TestBase
            {
                protected override void Execute()
                {
                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;

                    string vetstr = "this string should return S_OK.  It also exceeds the original max of 64 characters.  In fact, it's quite a bit longer In fact, it's quite a bit longer.In fact, it's quite a bit longer.In fact, it's quite a bit longer..";

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 1;
                    request.rgStringData = new StringData[1];
                    request.rgStringData[0] = new StringData();
                    request.rgStringData[0].szString = vetstr;
                    request.rgStringData[0].wStringSize = (ushort) vetstr.Length;

                    if (!request.Execute(out response))
                    {
                        Console.WriteLine("\nSTRING: " + request.rgStringData[0].szString);
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else   // check response
                    {

                        if ( response.rghrString[0] != HResult.S_OK)
                        {
                            Console.WriteLine("Unexpected response: " + response.rghrString[0] );
                            return;
                        }
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
            public class VetMultipleStrings : TestBase
            {
                protected override void Execute()
                {
                    XRLVetString request = new XRLVetString();
                    XRLVetResponse response;

                    request.dwTitleID = 1;
                    request.wLanguage = 1; // ENGLISH
                    request.wNumStrings = 3;

                    request.rgStringData = new StringData[3];
                    request.rgStringData[0] = new StringData();
                    request.rgStringData[0].szString = "Test string one OK";
                    request.rgStringData[0].wStringSize = (ushort) request.rgStringData[0].szString.Length;
                    request.rgStringData[1] = new StringData();
                    request.rgStringData[1].szString = "Test string two offensive: f u c k";
                    request.rgStringData[1].wStringSize = (ushort) request.rgStringData[1].szString.Length;
                    request.rgStringData[2] = new StringData();
                    request.rgStringData[2].szString = "String three OK";
                    request.rgStringData[2].wStringSize = (ushort) request.rgStringData[2].szString.Length;

                    if (!request.Execute(out response))
                    {
                        Console.WriteLine("\nSTRING: " + request.rgStringData[0].szString);
                        Console.WriteLine( request.GetDumpString() );
                        return;
                    }
                    else   // check response
                    {
                        if ( (response.rghrString[0] != HResult.S_OK) ||
                             (response.rghrString[1] != HResult.XONLINE_E_STRING_OFFENSIVE_TEXT) ||
                             (response.rghrString[2] != HResult.S_OK) )
                        {
                            Console.WriteLine("Unexpected response: " +
                                response.rghrString[0] + " " +
                                response.rghrString[1] + " " +
                                response.rghrString[2] );

                            return;
                        }
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        // V1 compatibility -- get Titles  (but not messages, this is deprecated)
        [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
        public class FuncMsgServer : TestNode
        {
            public FuncMsgServer()
            {
                AddChild( new GetKnownTitle() );
                AddChild( new GetDefaultLangTitle() );
                AddChild( new GetMultipleKnownTitles() );
                AddChild( new GetMAXTitles() );
                AddChild( new NegGetMessage() );
                AddChild( new NegGetInvalidType() );

            }

            // Get a single TitleID. Should behave exactly like V1 feature
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetKnownTitle : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 1;  // TitleID
                    request.wLanguage = 0;  // ?
                    request.wNumTitles = 1;
                    request.rgdwTitleIDs = new uint[1];
                    //request.rgdwTitleIDs[0] = 1;
                    request.rgdwTitleIDs[0] = 0xFFFE0000;

                    //DEBUG
                    //request.Dump();

                    //if (!request.Execute())
                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        //Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    if ( response.wNumStrings != 1)
                        //Console.WriteLine( response.rgStringData[0].szString );
                        return;

                    Console.WriteLine("\nFound Title: " + response.rgStringData[0].szString);

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetDefaultLangTitle : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 1;  // TitleID
                    request.wLanguage = 999;  //  this language should not exist
                    request.wNumTitles = 1;
                    request.rgdwTitleIDs = new uint[1];
                    request.rgdwTitleIDs[0] = 1;

                    //DEBUG
                    //request.Dump();

                    //if (!request.Execute())
                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        //Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    if ( response.wNumStrings != 1)
                        //Console.WriteLine( response.rgStringData[0].szString );
                        return;

                    Console.WriteLine("\nFound Title: " + response.rgStringData[0].szString);

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }


            // get multiple title IDs
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetMultipleKnownTitles : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 1;  // TitleID
                    request.wLanguage = 1;  // ?
                    request.wNumTitles = 2;
                    request.rgdwTitleIDs = new uint[3];
                    request.rgdwTitleIDs[0] = 1;
                    request.rgdwTitleIDs[1] = 3;
                    request.rgdwTitleIDs[2] = 5;

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        //Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    if ( response.wNumStrings != 3)  // don't get back correct num of strings
                    {
                        return;
                    }

                    //TODO: Check string return results

                    // DEBUG
                    foreach ( StringData str in response.rgStringData )
                    {
                        Console.WriteLine("\n" + str.szString );
                    }


                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetMAXTitles : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 1;  // TitleID
                    request.wLanguage = 1;  // ?
                    request.wNumTitles = 2;
                    request.rgdwTitleIDs = new uint[MAXNUMTITLES];
                    for(uint i = 0; i < MAXNUMTITLES; i++)
                    {
                        // doesn't matter if they actually exist or not
                        request.rgdwTitleIDs[i] = i;
                    }

                    if (!request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() );

                        return;
                    }

                    if ( response.wNumStrings != MAXNUMTITLES)  // don't get back correct num of strings
                    {
                        // Log error?
                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class GetAddedTitle : TestBase
            {
                protected override void Execute()
                {
                    // TODO
                    // Get a Title that is dynamically added
                    // Wait for DB refresh time?

                    // BUG 33858

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class NegGetMessage : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 0;  // V1 Message request
                    request.wLanguage = 1;  // ?
                    request.wNumTitles = 1;
                    request.rgdwTitleIDs = new uint[1];
                    request.rgdwTitleIDs[0] = 1;

                    //DEBUG
                    //request.Dump();

                    if (request.Execute(out response))
                    {
                        // test should return HResult.XONLINE_E_MSGSVR_INVALID_REQUEST
                        Console.Write("\n" + request.GetDumpString() );
                        return;
                    }

                    if (request.XErr != HResult.XONLINE_E_MSGSVR_INVALID_REQUEST )
                    {
                        Console.Write("Bad return code: " + request.GetDumpString() );
                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(2)]
            public class NegGetInvalidType : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 65535;  // TitleID
                    request.wLanguage = 1;  // ?
                    request.wNumTitles = 1;
                    request.rgdwTitleIDs = new uint[1];
                    request.rgdwTitleIDs[0] = 1;

                    if (request.Execute(out response))
                    {
                            // test should return HResult.XONLINE_E_MSGSVR_INVALID_REQUEST
                            return;
                    }

                    if (request.XErr !=  HResult.XONLINE_E_MSGSVR_INVALID_REQUEST )
                    {
                        Console.Write("Bad return code: " + request.GetDumpString() );
                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

        }

        [Ignore, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement("")]
        public class FuncTestXRLScan: TestNode
        {
            public FuncTestXRLScan()
            {
                AddChild( new NegGetMAXPlusOneTitles() );
                AddChild( new NegGetMAXPlusOneStrings() );

            }

            [Owner("emzephir"), TestFrequency("DoNotRun"), EnvRequirement("DoNotRun"), TestCasePriority(1)]
            public class NegGetMAXPlusOneTitles : TestBase
            {
                protected override void Execute()
                {
                    XRLTitleIDRequest request = new XRLTitleIDRequest();
                    XRLTitleIDResponse response;

                    request.wType = 1;  // TitleID
                    request.wLanguage = 1;  // ?
                    request.wNumTitles = 2;
                    request.rgdwTitleIDs = new uint[MAXNUMTITLES+1];
                    for(uint i = 0; i < MAXNUMTITLES+1; i++)
                    {
                        // doesn't matter if they actually exist or not
                        request.rgdwTitleIDs[i] = i;
                    }

                    if (request.Execute(out response))
                    {
                        //DEBUG
                        Console.WriteLine( request.GetDumpString() + "\nRequest unexpectedly succeeded." );

                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

            }

            [Owner("emzephir"), TestFrequency("DoNotRun"), EnvRequirement("DoNotRun"), TestCasePriority(1)]
            public class NegGetMAXPlusOneStrings : TestBase
            {
                protected override void Execute()
                {
                    XRLGetString request = new XRLGetString();
                    XRLGetStringResponse response;

                    request.dwTitleID = 1;
                    request.wLanguage = 1;
                    request.wNumStrings = 1;
                    request.rgdwStringIDs = new uint[MAXNUMSTRINGS+1];
                    for ( int i = 0; i < MAXNUMSTRINGS+1; i++ )
                    {
                        request.rgdwStringIDs[i] = 1;
                    }

                    // Should be rejected by XRLScan, because its payload is too big
                    if (request.Execute(out response))
                    {
                        Console.WriteLine(request.GetDumpString() + "\nRequest unexpectedly succeeded.");
                        return;
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
        public class FuncXServerHeaderCheck : TestNode
        {
            public static string _logRoot = "E$\\logroot";
            public static string _stringServer = "xepooliis009";

            public override void PreRun()
            {
                // the setup_logroot from npdb
                _logRoot = Global.XEnv.GetSetting("setup_logroot");

                string[] stringSvrs = Global.XEnv.GetServerListByInterface(Interface.stringsvr);
                _stringServer = stringSvrs[0];
            }

            public FuncXServerHeaderCheck()
            {
                // FD Test Cases
                AddChild(new N_ValidLogStringXbox1NoHeader());
                AddChild(new N_ValidLogStringXbox360XServerHeader());
                AddChild(new N_InvalidLogStringXbox1NoHeader());
                AddChild(new P_InvalidLogStringXbox360XServerHeader());
            }

            public class XServerHeaderTest : TestBase
            {
                // - From UACSGlobal.cs -
                private static Random m_rnd = new Random();

                private static ulong GetRandomULong()
                {
                    int i = m_rnd.Next();
                    int j = m_rnd.Next();
                    return (((ulong)i) << 32) + (ulong)j;
                }

                private static ulong GetRandomXenonMachineUid()
                {
                    return GetRandomULong() & 0x0000ffffffffffff | 0xfa00000000000000;
                }

                protected XRLTitleIDRequest request;
                protected XRLTitleIDResponse response;

                private void SetUpRequest(ushort type, ushort language, ushort numTitles, uint titleID)
                {
                    request.wType = type;  // TitleID
                    request.wLanguage = language;  // ?
                    request.wNumTitles = numTitles;
                    request.rgdwTitleIDs = new uint[1];
                    request.rgdwTitleIDs[0] = titleID;
                }

                protected void GenerateXbox1Request(ushort type, ushort language, ushort numTitles, uint titleID)
                {
                    request = new XRLTitleIDRequest();
                    SetUpRequest(type, language, numTitles, titleID);
                }

                protected void GenerateXbox360Request(ushort type, ushort language, ushort numTitles, uint titleID)
                {
                    GenerateXbox1Request(type, language, numTitles, titleID);
                    // Change into a 360 machine request
                    request.ManualPopulateSlot();
                    request.Slot.machinePuid = GetRandomXenonMachineUid();
                }

                protected static void AssertTrue(Boolean returnValue, String errorString)
                {
                    if (!returnValue)
                    {
                        throw new UnexpectedTestResultException(errorString);
                    }
                }
            }

            // -- FD & Xbox1 + Xbox360 Compat Testing for X-Server HTTP Response --
            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class N_ValidLogStringXbox1NoHeader : XServerHeaderTest
            {
                protected override void Execute()
                {
                    // Taken from GetKnownTitle Test Case
                    GenerateXbox1Request(1, 0, 1, 0xFFFE0000);

                    if (!request.Execute(out response))
                        return;

                    if (response.wNumStrings != 1)
                        return;

                    // Check that X-Server header doesn't exist on success
                    Dictionary<String, String> resp = request.xAct.GetHeader();
                    AssertTrue(!resp.ContainsKey("X-Server"), "X-Server header should not have been included");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class N_ValidLogStringXbox360XServerHeader : XServerHeaderTest
            {
                protected override void Execute()
                {
                    // Taken from GetKnownTitle Test Case
                    GenerateXbox360Request(1, 0, 1, 0xFFFE0000);

                    if (!request.Execute(out response))
                        return;

                    if (response.wNumStrings != 1)
                        return;

                    // Check that X-Server header doesn't exist on success
                    Dictionary<String, String> resp = request.xAct.GetHeader();
                    AssertTrue(!resp.ContainsKey("X-Server"), "X-Server header should not have been included");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(3)]
            public class N_InvalidLogStringXbox1NoHeader : XServerHeaderTest
            {
                protected override void Execute()
                {
                    // Taken from NegGetMessage Test Case
                    GenerateXbox1Request(0, 1, 1, 1);

                    if (request.Execute(out response))
                        return;

                    if (request.XErr != HResult.XONLINE_E_MSGSVR_INVALID_REQUEST)
                        return;

                    // Check that X-Server header doesn't exist on Xbox1
                    Dictionary<String, String> resp = request.xAct.GetHeader();
                    AssertTrue(!resp.ContainsKey("X-Server"), "X-Server header should not have been included");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("DoNotRun"), EnvRequirement("DoNotRun"), TestCasePriority(3)]
            public class P_InvalidLogStringXbox360XServerHeader : XServerHeaderTest
            {
                protected override void Execute()
                {
                    // Unfortunately test clients are not able to identify themselves as Xbox 360s. Because
                    // of that, this test case can't work. (See X360CS #27352 for more info)
                    Global.RO.Info("P_InvalidLogStringXbox360XServerHeader skipped. See X360CS #27352");
                    ResultCode = TEST_RESULTS.NOT_EXECUTED;



                    //// Taken from NegGetMessage Test Case
                    //GenerateXbox360Request(0, 1, 1, 1);

                    //if (request.Execute(out response))
                    //    return;

                    //if (request.XErr != HResult.XONLINE_E_MSGSVR_INVALID_REQUEST)
                    //    return;

                    
                    ////String responseString = "";
                    ////foreach (var keyValuePair in request.xAct.GetHeader())
                    ////{
                    ////    responseString += String.Format("<{0}, {1}>", keyValuePair.Key, keyValuePair.Value);
                    ////}
                    ////Console.WriteLine(responseString);

                    //// Check that X-Server header exists for failures on 360
                    //AssertTrue(request.xAct.GetHeader().ContainsKey("X-Server"), "X-Server header did not exist.");

                    //ResultCode = TEST_RESULTS.PASSED;
                }
            }
        }

        [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement(""), TestCasePriority(2)]
        [CompoundCase("LogString.ashx", false)]
        [CompoundCase("LogBinary.ashx", true)]           
        public class FuncLogString : TestNode
        {
            public static string _logRoot = "E$\\logroot";
            public static string _stringServer = "xepooliis009";
            public static string _fu =       "FU|FFFF0004|0~90000000002A4|1C6BFEA53A160FD";
            public static string _ban_vw =   "BAN_VW|F213421180449836~9000000146A29|1C6BFEDF3B05EF0|0";
            public static string _ban_cl =   "BAN_CL|901B921B594DF660~9000000146A29|1C6BFEDFA598A60|2";
            public static string _mp_p =     "MP_P|901B921B594DF660|FFFE07D18000001B~9000000146A29|1C6BFEDFA598A60";
            public static bool useBinary;

            [TestGroupSetup]
            public void Setup()
            {                
            }
            [TestGroupTearDown]
            public void Shutdown()
            {
            }

            public override void PreRun()
            {
                useBinary = (bool)MyValues[0];

                // the setup_logroot from npdb
                _logRoot = Global.XEnv.GetSetting("setup_logroot");

                string[] stringSvrs = Global.XEnv.GetServerListByInterface(Interface.stringsvr);
                _stringServer = stringSvrs[0];

                // create the new target, and add it to stringsvr
                // the problem here is the same stringSvr name is used on all servers
                StringServTest.ExecuteXmgmtCommand(Interface.stringsvr, "e :stringsvr newtarget reportlog Type=File;Prefix=" + _logRoot + "\\app\\stringsvr\\report\\" + _stringServer + ".stringsvr.;rotationtime=120;rotationsize=1000000000");
                StringServTest.ExecuteXmgmtCommand(Interface.stringsvr, "e :stringsvr addtarget reportlog reporting");
            }

            public FuncLogString()
            {
                AddChild(new P_LogImmediateString() );
                AddChild(new P_LogMultipleStrings() );
                AddChild(new P_LogMultipleStrings_Mixed());

                AddChild(new P_NpdbSettings());
                AddChild(new P_LogAggregatStrings_NpdbSettings());
                AddChild(new P_Xmgmt_FlushCache());

                AddChild(new P_LogLine_VeryLong());
                AddChild(new P_LargeNumberOfLogLines());

                AddChild(new P_LogMultipleStrings_Duplicate());
                AddChild(new P_NoPipeInLogLine());
                AddChild(new P_TwoCarriageReturns());
                //AddChild(new P_NullCharacter());
                AddChild(new P_LogLine_Empty());

                AddChild(new N_NpdbSetting_ReportingFlushInterval());
                AddChild(new N_NpdbSetting_ReportingAggregateKeys());

                // Multisetting Syntax Test Cases
                AddChild(new P_EmptySettingValue());
                AddChild(new P_SingleMeasurementSettingValue());
                AddChild(new P_SingleAPIFailureSettingValue());
                AddChild(new P_DuplicateSettingValues());
                AddChild(new P_MixedSettingValues());

                // Behavior Test Cases
                AddChild(new P_ValidFailLogString());
                AddChild(new P_ValidMeasurementLogString());
                AddChild(new N_InvalidSettingString());
                AddChild(new P_ValidLogString2());
                AddChild(new P_MultipleValidLogStrings());
                AddChild(new P_MultipleValidLogStrings2());
                AddChild(new P_ForeignLogString());

                // Performance Counter Test Cases
                AddChild(new P_PerformanceCounterIncrease());
                AddChild(new P_PerformanceCounterDecrease());

                // Threshold Test Cases
                AddChild(new N_PrefixOnlyMeasurement());
                AddChild(new N_FailureCountWithThreshold());
                AddChild(new P_MeasurementsBelowThreshold());
                AddChild(new P_MeasurementsAboveThreshold());
                AddChild(new P_MeasurementsMoreThanThreeFields());
            }

            #region Multisetting Test Cases

            /// <summary>
            /// Multisetting Test Class
            /// </summary>
            public class MultisettingTests : BaseTests
            {
                // Member Variables
                SqlConnection cxn = null;
                System.Collections.Generic.List<String> multisettingBackup = new System.Collections.Generic.List<String>();

                protected virtual void Process()
                {
                    // Do Nothing in base case
                }

                protected override void Execute()
                {
                    cxn = new SqlConnection(NpdbConnectionString);
                    try
                    {
                        // Backup current settings
                        cxn.Open();
                        BackupMultisettings();
                        cxn.Close();

                        // Execute Test
                        Process();
                    }
                    finally
                    {
                        // Restore backed up settings
                        cxn.Open();
                        RestoreMultisettings();
                        cxn.Close();

                        // clear the settings
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    }
                }

                /// <summary>
                /// Backs up existing multisettings on NPDB
                /// </summary>
                /// <param name="cxn">Open Sql Connection Object</param>
                private void BackupMultisettings()
                {
                    // Clear the current backup list
                    multisettingBackup.Clear();

                    // Backup the current stringsvr_logStringPrefix multisettings
                    SqlCommand sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "SELECT vc_value FROM t_multisetting_overrides WHERE vc_multisetting = 'stringsvr_logStringPrefix'";
                    SqlDataReader sqlDataReader = sqlCommand.ExecuteReader();

                    while (sqlDataReader.Read())
                    {
                        multisettingBackup.Add(sqlDataReader.GetString(0));
                    }

                    sqlDataReader.Close();

                    // Delete the current stringsvr_logStringPrefix multisettings
                    sqlCommand.CommandText = "DELETE FROM t_multisetting_overrides WHERE vc_multisetting = 'stringsvr_logStringPrefix'";
                    sqlCommand.ExecuteNonQuery();
                }

                /// <summary>
                /// Restores backed-up multisettings to NPDB
                /// </summary>
                /// <param name="cxn">Open Sql Connection Object</param>
                private void RestoreMultisettings()
                {
                    // restore the database to the state it was in when we started
                    SqlCommand sqlCommand = cxn.CreateCommand();
                    sqlCommand.CommandText = "DELETE FROM t_multisetting_overrides WHERE vc_multisetting = 'stringsvr_logStringPrefix'";
                    sqlCommand.ExecuteNonQuery();

                    foreach (String s in multisettingBackup)
                    {
                        sqlCommand.CommandText = "INSERT INTO t_multisetting_overrides (vc_environment, vc_component, i_site_id, vc_server, vc_multisetting, vc_value) VALUES ('" + xonline.common.config.Config.Environment + "', 'ALL', -1, 'ALL', 'stringsvr_logStringPrefix', '" + s + "')";
                        sqlCommand.ExecuteNonQuery();
                    }
                }

                /// <summary>
                /// Adds a multsetting value on NPDB
                /// </summary>
                /// <param name="cxn">Open Sql Connection Object</param>
                /// <param name="value">Multisetting Value to Add</param>
                protected void AddMultisettingValue(params String[] args)
                {
                    cxn.Open();
                    SqlCommand sqlCommand = cxn.CreateCommand();
                    foreach (String value in args)
                    {
                        sqlCommand.CommandText = "INSERT INTO t_multisetting_overrides (vc_environment, vc_component, i_site_id, vc_server, vc_multisetting, vc_value) VALUES ('" + xonline.common.config.Config.Environment + "', 'ALL', -1, 'ALL', 'stringsvr_logStringPrefix', '" + value + "')";
                        sqlCommand.ExecuteNonQuery();
                    }
                    cxn.Close();
                }

                /// <summary>
                /// Invokes Health URL to force-create performance counters
                /// </summary>
                protected void CallHealthURL()
                {
                    // Invoke Health Check URL
                    StringBuilder sbURL = new StringBuilder();
                    Global.RO.Info("Calling HealthURL http://" + _stringServer + ":" + Global.XEnv.GetInterface(Interface.stringsvr_int)[0].Port + "/msgserver/health.ashx?op=status");
                    sbURL.Append("http://");
                    sbURL.Append(_stringServer + ":" + Global.XEnv.GetInterface(Interface.stringsvr_int)[0].Port + "/msgserver/health.ashx?op=status");

                    HttpWebRequest httpReq = (HttpWebRequest)WebRequest.Create(sbURL.ToString());
                    HttpWebResponse httpResp = null;
                    httpReq.ProtocolVersion = HttpVersion.Version11;
                    httpReq.Method = "GET";
                    httpReq.UserAgent = ((int)XOService.StringService).ToString("x") + "/1.0.5849";

                    httpResp = (HttpWebResponse)httpReq.GetResponse();
                }

                /// <summary>
                /// Executes a LogString request to the string server
                /// </summary>
                /// <param name="request"></param>
                /// <param name="logLine"></param>
                protected void ExecuteLogRequest(ref XRLLogString request, String logLine)
                {                    
                    request.logLinesLength = (ushort)logLine.Length;
                    request.logLine = logLine;
                    // Valid log
                    if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                        throw new UnexpectedTestResultException("XRLLogString execute failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK)
                        throw new UnexpectedTestResultException(String.Format("XRLLogString execute returned XErr=0x{0:x}", request.XErr));                    
                }

                protected static void AssertTrue(Boolean returnValue, String errorString)
                {
                    if (!returnValue)
                    {
                        throw new UnexpectedTestResultException(errorString);
                    }
                }

                protected static void AssertInstanceExists(PerformanceCounterCategory cat, String instance, String errorString)
                {
                    if (!cat.InstanceExists(instance))
                    {
                        throw new UnexpectedTestResultException(errorString);
                    }
                }

                protected static void AssertInstanceDoesntExist(PerformanceCounterCategory cat, String instance, String errorString)
                {
                    if (cat.InstanceExists(instance))
                    {
                        throw new UnexpectedTestResultException(errorString);
                    }
                }
            }

            // -- BVT Test Cases --
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_EmptySettingValue : MultisettingTests
            {
                protected override void Process()
                {
                    PerformanceCounterCategory cat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);
                    String[] original = cat.GetInstanceNames();
                    System.Collections.Generic.List<String> originalInstances = new System.Collections.Generic.List<string>();
                    foreach (String instanceName in original)
                    {
                        originalInstances.Add(instanceName);
                    }

                    // Add Empty Setting Value
                    AddMultisettingValue("");

                    // Refresh and load up stringsvr with the new multisetting
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    // Check that no new instances are created other than _total_
                    // Enumerate the instances and check only defaults created
                    String[] newInstances = cat.GetInstanceNames();
                    
                    for (int n = 0; n < newInstances.Length; n++)
                    {
                        if (newInstances[n] != "_total_")
                            originalInstances.Remove(newInstances[n]);
                    }

                    // Check that there is only 1 default
                    AssertTrue(originalInstances.Count == 1, "Non-default counter instance created");
                    AssertTrue(originalInstances[0] == "_total_", "Non-default counter instance created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_SingleMeasurementSettingValue : MultisettingTests
            {
                protected override void Process()
                {
                    // Add Measurement Setting Value
                    AddMultisettingValue("prefix=TestSingleMeasurement;type=measurement;threshold=4500");

                    // Refresh and load up stringsvr with the new multisetting
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory cat = new PerformanceCounterCategory(XboxLiveDistMonConstants.MeasurementCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(cat, "TestSingleMeasurement", "No Measurement performance counter instance named TestSingleMeasurement created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_SingleAPIFailureSettingValue : MultisettingTests
            {
                protected override void Process()
                {
                    // Add API Failure Setting Value
                    AddMultisettingValue("prefix=TestSingleAPIFailure;type=failure");

                    // Refresh and load up stringsvr with the new multisetting
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory cat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(cat, "TestSingleAPIFailure", "No API Failure performance counter instance named TestSingleAPIFailure created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            /// <summary>
            /// Duplicate Setting Values are ignored
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_DuplicateSettingValues : MultisettingTests
            {
                protected override void Process()
                {
                    // Add Several Mixed Setting Values
                    AddMultisettingValue("prefix=TestDuplicateSettingsFail;type=failure",
                                        "prefix=TestDuplicateSettingsMeasure;type=measurement;threshold=3600",
                                        "prefix=TestDuplicateSettingsFail;type=failure",
                                        "prefix=TestDuplicateSettingsMeasure;type=measurement;threshold=4200",
                                        "prefix=TestDuplicateSettingsMeasure;type=measurement;threshold=4200");

                    // Refresh and load up stringsvr with the new multisetting
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);
                    PerformanceCounterCategory measureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.MeasurementCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(failureCat, "TestDuplicateSettingsFail", "No API Failure performance counter instance named TestDuplicateSettingsFail created");
                    AssertInstanceExists(measureCat, "TestDuplicateSettingsMeasure", "No Measurement performance counter instance named TestDuplicateSettingsMeasure created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_MixedSettingValues : MultisettingTests
            {
                protected override void Process()
                {
                    // Add Several Mixed Setting Values
                    AddMultisettingValue("prefix=TestMixedSettingsFail0;type=failure",
                                        "prefix=TestMixedSettingsMeasure0;type=measurement;threshold=3600",
                                        "prefix=TestMixedSettingsFail1;type=failure",
                                        "prefix=TestMixedSettingsMeasure1;type=measurement;threshold=4200",
                                        "prefix=TestMixedSettingsMeasure2;type=measurement;threshold=4200",
                                        "prefix=TestMixedSettingsFail2;type=failure");

                    // Refresh and load up stringsvr with the new multisetting
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);
                    PerformanceCounterCategory measureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.MeasurementCounterCategoryName, _stringServer);

                    CallHealthURL();

                    for (int n = 0; n < 3; n++)
                    {
                        AssertInstanceExists(failureCat, "TestMixedSettingsFail" + n.ToString(), "No API Failure performance counter instance named TestMixedSettingsFail" + n.ToString() + " created");
                        AssertInstanceExists(measureCat, "TestMixedSettingsMeasure" + n.ToString(), "No Measurement performance counter instance named TestMixedSettingsMeasure" + n.ToString() + " created");
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // -- Functional Test Cases are covered by Behavior --

            #endregion

            #region DistMon Behavior Tests

            // -- BVT Tests --
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_ValidFailLogString : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();
                    
                    // Add TestValid_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestValid_APIFail_S01;type=failure");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    ExecuteLogRequest(ref request, "TestValid_APIFail_S01|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(failureCat, "TestValid_APIFail_S01", "No API Failure performance counter instance named TestValid_APIFail_S01 created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_ValidMeasurementLogString : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValid_CDNTime Setting Value
                    AddMultisettingValue("prefix=TestValid_CDNTime;type=measurement;threshold=4500");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    ExecuteLogRequest(ref request, "TestValid_CDNTime|500~" + XboxLiveDistMonConstants.ExampleTimestamp);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory measureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.MeasurementCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(measureCat, "TestValid_CDNTime", "No Measurement performance counter instance named TestValid_CDNTime created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class N_InvalidSettingString : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestInvalidSetting_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestInvalidSetting_APIFail_S01");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    ExecuteLogRequest(ref request, "TestInvalidSetting_APIFail_S01|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceDoesntExist(failureCat, "TestInvalidSetting_APIFail_S01", "API Failure performance counter instance named TestInvalidSetting_APIFail_S01 should not have been created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            /// <summary>
            /// Tests incomplete logStrings which should still parse and create counters
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_ValidLogString2 : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValidLog2_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestValidLog2_APIFail_S01;type=failure");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    ExecuteLogRequest(ref request, "TestValidLog2_APIFail_S01|");

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(failureCat, "TestValidLog2_APIFail_S01", "No API Failure performance counter instance named TestValidLog2_APIFail_S01 created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_MultipleValidLogStrings : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValid_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestMultipleValid_APIFail_S01;type=failure",
                                        "prefix=TestMultipleValid_APIFail_S02;type=failure",
                                        "prefix=TestMultipleValid_CDNTime;type=measurement;threshold=4500",
                                        "prefix=TestMultipleValid_SigninTime;type=measurement;threshold=3600");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    int n = 0;
                    // TestMultipleValid_APIFail_S01 x 5
                    for (n = 0; n < 5; n++)
                    {
                        ExecuteLogRequest(ref request, "TestMultipleValid_APIFail_S01|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // TestMultipleValid_APIFail_S02 x 10
                    for (n = 0; n < 10; n++)
                    {
                        ExecuteLogRequest(ref request, "TestMultipleValid_APIFail_S02|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // TestMultipleValid_CDNTime x 5
                    for (n = 0; n < 5; n++)
                    {
                        ExecuteLogRequest(ref request, "TestMultipleValid_CDNTime|500~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // TestMultipleValid_SigninTime x 10
                    for (n = 0; n < 10; n++)
                    {
                        ExecuteLogRequest(ref request, "TestMultipleValid_SigninTime|4500~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);
                    PerformanceCounterCategory measureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.MeasurementCounterCategoryName, _stringServer);

                    CallHealthURL();

                    // Check for instance existence
                    AssertInstanceExists(failureCat, "TestMultipleValid_APIFail_S01", "No API Failure performance counter instance named TestMultipleValid_APIFail_S01 created");
                    AssertInstanceExists(failureCat, "TestMultipleValid_APIFail_S02", "No API Failure performance counter instance named TestMultipleValid_APIFail_S02 created");
                    AssertInstanceExists(measureCat, "TestMultipleValid_CDNTime", "No Measurement performance counter instance named TestMultipleValid_CDNTime created");
                    AssertInstanceExists(measureCat, "TestMultipleValid_SigninTime", "No Measurement performance counter instance named TestMultipleValid_SigninTime created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            /// <summary>
            /// Incomplete/Invalid LogStrings should still parse and create counters
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_MultipleValidLogStrings2 : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValid_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestMultipleInvalid_APIFail_S02;type=failure",
                                        "prefix=TestMultipleInvalid_CDNTime;type=measurement;threshold=4500");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    // - These create perf counters -
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_APIFail_S02");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_APIFail_S0");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_APIFail_S02|~~");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_APIFail_S02|~servername~valuehere");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_CDNTim|500");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_CDNTime|~" + XboxLiveDistMonConstants.ExampleTimestamp + "|");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_CDNTime|~~");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_CDNTime|timestamp~valuehere");
                    ExecuteLogRequest(ref request, "TestMultipleInvalid_CDNTime|timestampservername~valuehere");

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);
                    PerformanceCounterCategory measureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.MeasurementCounterCategoryName, _stringServer);

                    CallHealthURL();

                    // Prefixes not registered in Multisetting should not be there
                    AssertInstanceDoesntExist(failureCat, "TestMultipleInvalid_APIFail_S0", "API Failure performance counter instance named TestMultipleInvalid_APIFail_S0 should not have been created");
                    AssertInstanceDoesntExist(measureCat, "TestMultipleInvalid_CDNTim", "Measurement performance counter instance named TestMultipleInvalid_CDNTim should not have been created");

                    // Prefixes registered in Multisetting should be there
                    AssertInstanceExists(failureCat, "TestMultipleInvalid_APIFail_S02", "No API Failure performance counter instance named TestMultipleInvalid_APIFail_S02 created");
                    AssertInstanceExists(measureCat, "TestMultipleInvalid_CDNTime", "No Measurement performance counter instance named TestMultipleInvalid_CDNTime created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // -- Functional Tests --

            /// <summary>
            /// Unicode characters should not stop logString parsing in DistMon
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_ForeignLogString : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValid_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestForeignString;type=failure");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    ExecuteLogRequest(ref request, "TestForeignString|u" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult);

                    // Check that just default perf-counter instances are created and health check passes
                    PerformanceCounterCategory failureCat = new PerformanceCounterCategory(XboxLiveDistMonConstants.FailureCounterCategoryName, _stringServer);

                    CallHealthURL();

                    AssertInstanceExists(failureCat, "TestForeignString", "No API Failure performance counter instance named TestForeignString created");

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // -- Performance Counter Tests --
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_PerformanceCounterIncrease : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValid_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestPerfCounterIncrease;type=failure");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);
                    
                    CallHealthURL();

                    int n = 0;
                    // Send 100 requests
                    for (n = 0; n < 100; n++)
                    {
                        ExecuteLogRequest(ref request, "TestPerfCounterIncrease|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // Record First Counter Value
                    float firstCounterValue = 0;

                    // Check for counter value
                    PerformanceCounter firstCounter = new PerformanceCounter(XboxLiveDistMonConstants.FailureCounterCategoryName, "Failures Seen Rate", "TestPerfCounterIncrease", _stringServer);
                    firstCounterValue = firstCounter.NextValue();

                    // Send 200 requests
                    for (n = 0; n < 200; n++)
                    {
                        ExecuteLogRequest(ref request, "TestPerfCounterIncrease|" + _stringServer + "|" + XboxLiveDistMonConstants.ExampleHresult + "|" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // Record Second Counter Value
                    float secondCounterValue = 0;

                    // Check for counter value
                    PerformanceCounter secondCounter = new PerformanceCounter(XboxLiveDistMonConstants.FailureCounterCategoryName, "Failures Seen Rate", "TestPerfCounterIncrease", _stringServer);
                    secondCounterValue = secondCounter.NextValue();

                    AssertTrue(secondCounterValue >= firstCounterValue, String.Format("Counter Rate did not increase: {0} to {1}", firstCounterValue, secondCounterValue));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_PerformanceCounterDecrease : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestValid_APIFail_S01 Setting Value
                    AddMultisettingValue("prefix=TestPerfCounterDecrease;type=failure");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    int n = 0;
                    // Send 200 requests
                    for (n = 0; n < 200; n++)
                    {
                        ExecuteLogRequest(ref request, "TestPerfCounterDecrease|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // Record First Counter Value
                    float firstCounterValue = 0;

                    // Check for counter value
                    PerformanceCounter firstCounter = new PerformanceCounter(XboxLiveDistMonConstants.FailureCounterCategoryName, "Failures Seen Rate", "TestPerfCounterDecrease", _stringServer);
                    firstCounterValue = firstCounter.NextValue();

                    // Send 100 requests
                    for (n = 0; n < 100; n++)
                    {
                        ExecuteLogRequest(ref request, "TestPerfCounterDecrease|" + _stringServer + "~" + XboxLiveDistMonConstants.ExampleHresult + "~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    // Record Second Counter Value
                    float secondCounterValue = 0;

                    // Check for counter value
                    PerformanceCounter secondCounter = new PerformanceCounter(XboxLiveDistMonConstants.FailureCounterCategoryName, "Failures Seen Rate", "TestPerfCounterDecrease", _stringServer);
                    secondCounterValue = secondCounter.NextValue();

                    AssertTrue(firstCounterValue >= secondCounterValue, String.Format("Counter Rate did not decrease: {0} to {1}", firstCounterValue, secondCounterValue));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            // -- Threshold Tests --
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class N_PrefixOnlyMeasurement : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestPrefixOnlyMeasurement Setting Value
                    AddMultisettingValue("prefix=TestPrefixOnlyMeasurement;type=measurement;threshold=3600");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    int n = 0;
                    // Send 100 requests
                    for (n = 0; n < 100; n++)
                    {
                        ExecuteLogRequest(ref request, "TestPrefixOnlyMeasurement");
                    }

                    // Check for counter value
                    PerformanceCounter counter = new PerformanceCounter(XboxLiveDistMonConstants.MeasurementCounterCategoryName, "Measurement Thresholds Exceeded Rate", "TestPrefixOnlyMeasurement", _stringServer);
                    float counterValue = counter.NextValue();

                    AssertTrue(counterValue < 10.0f, String.Format("Counter Rate increased when it shouldn't have: {0}", counterValue));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class N_FailureCountWithThreshold : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestFailureThreshold Setting Value
                    AddMultisettingValue("prefix=TestFailureThreshold;type=failure;threshold=4200");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    int n = 0;
                    // Check for counter value
                    // NOTE: A before & after of RawValue was taken instead of NextValue() as 
                    //      NextValue kept returning '0' instead of the calculated Rate
                    PerformanceCounter counter = new PerformanceCounter(XboxLiveDistMonConstants.FailureCounterCategoryName, "Failures Seen Rate", "TestFailureThreshold", _stringServer);
                    long counterValue1 = counter.RawValue;

                    // Send 200 requests
                    for (n = 0; n < 200; n++)
                    {
                        // Threshold value is below Multisetting
                        ExecuteLogRequest(ref request, "TestFailureThreshold|200~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    long counterValue2 = counter.RawValue;

                    AssertTrue(counterValue1 < counterValue2, String.Format("Counter Rate did not respond to failure logs: Before Logs {0}, After Logs {1}", counterValue1, counterValue2));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_MeasurementsBelowThreshold : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestFailureThreshold Setting Value
                    // threshold here is in decimal
                    AddMultisettingValue("prefix=TestMeasurementsBelowThreshold;type=measurement;threshold=3600");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    int n = 0;
                    // Check for counter value
                    PerformanceCounter counter = new PerformanceCounter(XboxLiveDistMonConstants.MeasurementCounterCategoryName, "Measurement Thresholds Exceeded Rate", "TestMeasurementsBelowThreshold", _stringServer);
                    long counterValue1 = counter.RawValue;

                    // Send 100 requests. These requests should all be ignored, making the RawValue the same
                    for (n = 0; n < 100; n++)
                    {
                        // threshold here is in hex
                        ExecuteLogRequest(ref request, "TestMeasurementsBelowThreshold|30~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    long counterValue2 = counter.RawValue;

                    AssertTrue(counterValue1 == counterValue2, String.Format("Counter Rate accepted logs below threshold: Before Logs {0}, After Logs {1}", counterValue1, counterValue2));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_MeasurementsAboveThreshold : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestFailureThreshold Setting Value
                    // threshold here is in decimal
                    AddMultisettingValue("prefix=TestMeasurementsAboveThreshold;type=measurement;threshold=3600");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    int n = 0;
                    // Check for counter value
                    PerformanceCounter counter = new PerformanceCounter(XboxLiveDistMonConstants.MeasurementCounterCategoryName, "Measurement Thresholds Exceeded Rate", "TestMeasurementsAboveThreshold", _stringServer);
                    long counterValue1 = counter.RawValue;

                    // Send 100 requests. These requests should all be accepted, raising the RawValue
                    for (n = 0; n < 100; n++)
                    {
                        // threshold here is in hex
                        ExecuteLogRequest(ref request, "TestMeasurementsAboveThreshold|4000~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    long counterValue2 = counter.RawValue;

                    AssertTrue(counterValue1 < counterValue2, String.Format("Counter Rate did not accept logs above threshold: Before Logs {0}, After Logs {1}", counterValue1, counterValue2));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_MeasurementsMoreThanThreeFields : MultisettingTests
            {
                protected override void Process()
                {
                    request = CreateXRLLogStringRequest();

                    // Add TestFailureThreshold Setting Value
                    // threshold here is in decimal
                    AddMultisettingValue("prefix=TestMeasurementsMoreThanThreeFields;type=measurement;threshold=3600");

                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    // sleep 3 second
                    System.Threading.Thread.Sleep(3000);

                    CallHealthURL();

                    int n = 0;
                    // Check for counter value
                    PerformanceCounter counter = new PerformanceCounter(XboxLiveDistMonConstants.MeasurementCounterCategoryName, "Measurement Thresholds Exceeded Rate", "TestMeasurementsMoreThanThreeFields", _stringServer);
                    long counterValue1 = counter.RawValue;

                    // Send 100 requests. These requests should all be accepted, raising the RawValue
                    for (n = 0; n < 100; n++)
                    {
                        // threshold here is in hex
                        ExecuteLogRequest(ref request, "TestMeasurementsMoreThanThreeFields|4000|foo|bar|baz|wahoo~" + XboxLiveDistMonConstants.ExampleTimestamp);
                    }

                    long counterValue2 = counter.RawValue;

                    AssertTrue(counterValue1 < counterValue2, String.Format("Counter Rate did not accept logs above threshold: Before Logs {0}, After Logs {1}", counterValue1, counterValue2));

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            #endregion

            #region Test Cases
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogImmediateString : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    // 1 line
                    szLogLine = _fu;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogMultipleStrings : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    // 3 lines
                    szLogLine = _fu + "\nSTMULTI|1|2|3|4|5|6|P_LogMultipleStrings2\n" + _mp_p;  
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogMultipleStrings_Mixed : BaseTests
            {
                protected override void Init()
                {
                    base.Init();

                    request = CreateXRLLogStringRequest();
                    szLogLine = _mp_p + "\n" + _ban_cl + "\n" + _fu + "\n" + _ban_vw;
                    // CacheFlush Xmgmt command after the call
                    this.runXmgmtCacheFlush = true;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_NpdbSettings : BaseTests
            {
                protected override void Execute()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    //szLogLine = "TESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings00\nREPORTAGG|1|2|3|4|P_LogAggregatStrings_NpdbSettings01";
                    szLogLine = "REPORTAGG|1|2|3|4|P_LogAggregatStrings_NpdbSettings1\nTESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings2\nREPORTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings3";
                    AddUniqueTestId(ref szLogLine);

                    try
                    {
                        // change NPDB settings
                        Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_flushStringsInterval", "10001", -1);
                        Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", "REPORTAGG,TESTAGG", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                        // sleep 3 second
                        System.Threading.Thread.Sleep(3000);

                        request.logLinesLength = (ushort)szLogLine.Length;
                        request.logLine = szLogLine;
                        // first log
                        if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                            throw new UnexpectedTestResultException("XRLLogString first execute failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString first execute returned XErr=0x{0:x}", request.XErr));

                        // second log
                        if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                            throw new UnexpectedTestResultException("XRLLogString second execute failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString second execute returned XErr=0x{0:x}", request.XErr));

                        // verify the result, nothing will be sent to reporting
                        LSALines = null;    // no aggregate lines
                        LSLines = null;
                        Global.RO.Info("First verify");
                        DoSecondRequest();
                        VerifyResponse(szLogLine, ref LSLines, ref LSALines);

                        // sleep 8 second;
                        System.Threading.Thread.Sleep(8000);

                        // verify the result of aggregate log lines, counts: 2, 2, 1
                        LSALines = new ArrayList();
                        //LSALines.Add("REPORTAGG|1|2|3|4|P_LogAggregatStrings_NpdbSettings01|2");
                        //LSALines.Add("TESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings00|2");
                        LSALines.Add("REPORTAGG|1|2|3|4|P_LogAggregatStrings_NpdbSettings1|2");
                        LSALines.Add("TESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings2|2");
                        LSALines.Add("REPORTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings3|2");
                        AddUniqueTestId(LSALines);

                        LSLines = null;     // no immediate lines
                        Global.RO.Info("Second verify");
                        DoSecondRequest();
                        // Verify using only log lines appeared after the last VerifyResponse
                        VerifyResponseAfterLastRequest(szLogLine, ref LSLines, ref LSALines);

                        // sleep 10 second;
                        System.Threading.Thread.Sleep(10000);

                        // verify the result again, all cleared
                        LSALines = null;    // no aggregate lines
                        LSLines = null;     // no immediate lines
                        Global.RO.Info("Third verify");
                        DoSecondRequest();
                        // Verify using only log lines appeared after the last VerifyResponse
                        VerifyResponseAfterLastRequest(szLogLine, ref LSLines, ref LSALines);
                    }
                    finally
                    {
                        // clear the settings
                        Global.XEnv.DeleteOverrideSetting("ALL", "ALL", "stringsvr_flushStringsInterval", -1);
                        Global.XEnv.DeleteOverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogAggregatStrings_NpdbSettings : BaseTests
            {
                protected override void Execute()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "REPORTAGG|1|2|3|4|P_LogAggregatStrings_NpdbSettings1\nTESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings2\nREPORTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings3";
                    AddUniqueTestId(ref szLogLine);

                    try
                    {
                        // change NPDB settings
                        Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_flushStringsInterval", "10001", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                        System.Threading.Thread.Sleep(1000);

                        request.logLinesLength = (ushort)szLogLine.Length;
                        request.logLine = szLogLine;
                        // first log
                        if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                            throw new UnexpectedTestResultException("XRLLogString first execute failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString first execute returned XErr=0x{0:x}", request.XErr));

                        // change npdb settings again
                        Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", "REPORTAGG,BAN_VW,BAN_CL", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                        System.Threading.Thread.Sleep(1000);

                        // second log
                        if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                            throw new UnexpectedTestResultException("XRLLogString second execute failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString second execute returned XErr=0x{0:x}", request.XErr));

                        // verify the result, the log line with TESTAGG should be sent to reporting immediately
                        LSALines = null;    // no aggregate lines
                        LSLines = new ArrayList();
                        LSLines.Add("TESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings2");
                        AddUniqueTestId(LSLines);

                        Global.RO.Info("First verify");
                        DoSecondRequest();
                        VerifyResponse(szLogLine, ref LSLines, ref LSALines);

                        // sleep 8 second;
                        System.Threading.Thread.Sleep(8000);

                        // verify the result of aggregate log lines, counts: 2, 2, 1
                        LSALines = new ArrayList();
                        LSALines.Add("REPORTAGG|1|2|3|4|P_LogAggregatStrings_NpdbSettings1|2");
                        LSALines.Add("TESTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings2|1");
                        LSALines.Add("REPORTAGG|1|2|3|4|TESTING|P_LogAggregatStrings_NpdbSettings3|2");
                        AddUniqueTestId(LSALines);

                        LSLines = null;     // no immediate lines
                        Global.RO.Info("Second verify");
                        DoSecondRequest();
                        // Verify using only log lines appeared after the last VerifyResponse
                        VerifyResponseAfterLastRequest(szLogLine, ref LSLines, ref LSALines);

                        // sleep 10 second;
                        System.Threading.Thread.Sleep(10000);

                        // verify the result again, all cleared
                        LSALines = null;    // no aggregate lines
                        LSLines = null;     // no immediate lines
                        Global.RO.Info("Third verify");
                        DoSecondRequest();
                        // Verify using only log lines appeared after the last VerifyResponse
                        VerifyResponseAfterLastRequest(szLogLine, ref LSLines, ref LSALines);
                    }
                    finally
                    {
                        // clear the settings
                        Global.XEnv.DeleteOverrideSetting("ALL", "ALL", "stringsvr_flushStringsInterval", -1);
                        Global.XEnv.DeleteOverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_Xmgmt_FlushCache : BaseTests
            {
                protected override void Execute()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "REPORTAGG|1|2|3|4|P_Xmgmt_FlushCache1\nBAN_CL|1|2|3|4|TESTING|P_Xmgmt_FlushCache2\nREPORTAGG|1|2|3|4|TESTING|P_Xmgmt_FlushCache3";
                    AddUniqueTestId(ref szLogLine);

                    request.logLinesLength = (ushort)szLogLine.Length;
                    request.logLine = szLogLine;
                    // first log
                    if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                        throw new UnexpectedTestResultException("XRLLogString first execute failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK)
                        throw new UnexpectedTestResultException(String.Format("XRLLogString first execute returned XErr=0x{0:x}", request.XErr));

                    // second log
                    if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                        throw new UnexpectedTestResultException("XRLLogString second execute failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK)
                        throw new UnexpectedTestResultException(String.Format("XRLLogString second execute returned XErr=0x{0:x}", request.XErr));

                    // CacheFlush Xmgmt command
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr cacheflush");

                    // verify the result, counts: 2, 2, 2
                    LSLines = null;
                    LSALines.Add("REPORTAGG|1|2|3|4|P_Xmgmt_FlushCache1|2");
                    LSALines.Add("BAN_CL|1|2|3|4|TESTING|P_Xmgmt_FlushCache2|2");
                    LSALines.Add("REPORTAGG|1|2|3|4|TESTING|P_Xmgmt_FlushCache3|2");
                    AddUniqueTestId(LSALines);

                    DoSecondRequest();
                    VerifyResponse(szLogLine, ref LSLines, ref LSALines);

                    // CacheFlush Xmgmt command the second time
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr cacheflush");

                    // verify the result again, all cleared
                    LSLines = null;
                    LSALines = null;
                    DoSecondRequest();
                    // Verify using only log lines appeared after the last VerifyResponse
                    VerifyResponseAfterLastRequest(szLogLine, ref LSLines, ref LSALines);

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogLine_VeryLong : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "STIMMEDIATE|1|2|3|4|111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111P_LogLine_VeryLong";
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LargeNumberOfLogLines : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "";
                    for (int i = 1; i <= 8; i++)
                    {
                        szLogLine += "STIMMEDIATE";
                        szLogLine += "|1|2|3|4|11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111P_LogLine_VeryLong" + i + "\n";
                    }
                    LSALines = null;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogMultipleStrings_Duplicate : BaseTests
            {
                protected override void Init()
                {
                    base.Init();

                    request = CreateXRLLogStringRequest();
                    szLogLine = "STIMMEDIATE|1|2|3|4|P_LogMultipleStrings_Duplicate1\nREPORTAGG|1|2|3|4|TESTING|P_LogMultipleStrings_Duplicate2\n";
                    szLogLine += "REPORTAGG|1|2|3|4|TESTING|P_LogMultipleStrings_Duplicate2\nSTIMMEDIATE|1|2|3|4|P_LogMultipleStrings_Duplicate1";

                    LSALines.Add("REPORTAGG|1|2|3|4|TESTING|P_LogMultipleStrings_Duplicate2|2");
                    AddUniqueTestId(LSALines);
                    // CacheFlush Xmgmt command after the call

                    this.runXmgmtCacheFlush = true;
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_NoPipeInLogLine : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "STIMMEDIATE";
                }
            }

            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_TwoCarriageReturns : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", "TESTAGG,REPORTAGG", -1);
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    request = CreateXRLLogStringRequest();
                    szLogLine = "\nSTIMMEDIATE|1|2|3|4|P_TwoCarriageReturns1\n\nREPORTAGG|1|2|3|4|TESTING|P_TwoCarriageReturns2\n";

                    // CacheFlush Xmgmt command after the call
                    this.runXmgmtCacheFlush = true;
                }
            }

            // ignored for now
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_NullCharacter : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "STIMMEDIATE|1|2|3|4|P_NullCharacter1\n\0TESTAGG|1|2|3|4|TESTING|P_NullCharacter2";
                }
            }

            /// <summary>
            /// Verified by the NT event log
            /// Bug 65699
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class P_LogLine_Empty : BaseTests
            {
                protected override void Init()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "";
                }
            }

            /////////////////////////////////////////////////////////////////
            // Negative test cases

            /// <summary>
            /// Test will pass. But there is error in NT event log
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class N_NpdbSetting_ReportingFlushInterval : BaseTests
            {
                protected override void Execute()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "Single|1|2|3|4|TESTING|N_NpdbSetting_ReportingFlushInterval";

                    try
                    {
                        Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_flushStringsInterval", "9000", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                        
                        // sleep 5 seconds
                        System.Threading.Thread.Sleep(5000);
                        Global.RO.Info("stringsvr_flushStringsInterval: " + Global.XEnv.GetSetting("stringsvr_flushStringsInterval"));

                        request.logLinesLength = (ushort)szLogLine.Length;
                        request.logLine = szLogLine;
                        if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                            throw new UnexpectedTestResultException("XRLLogString failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString returned XErr=0x{0:x}", request.XErr));
                    }
                    finally // delete the setting from t_setting_overrides
                    {
                        Global.XEnv.DeleteOverrideSetting("ALL", "ALL", "stringsvr_flushStringsInterval", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    }

                    ResultCode = TEST_RESULTS.PASSED;

                }
            }

            /// <summary>
            /// Test will pass. But there is error in NT event log
            /// </summary>
            [Owner("emzephir"), TestFrequency("Daily"), EnvRequirement("")]
            public class N_NpdbSetting_ReportingAggregateKeys : BaseTests
            {
                protected override void Execute()
                {
                    base.Init();
                    request = CreateXRLLogStringRequest();
                    szLogLine = "Single|1|2|3|4|TESTING|N_NpdbSetting_ReportingAggregateKeys";

                    try
                    {
                        Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", "TESTAGG,,", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                        // sleep 5 seconds
                        System.Threading.Thread.Sleep(5000);
                        Global.RO.Info("stringsvr_reportingAggregateKeys: " + Global.XEnv.GetSetting("stringsvr_reportingAggregateKeys"));

                        request.logLinesLength = (ushort)szLogLine.Length;
                        request.logLine = szLogLine;
                        if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                            throw new UnexpectedTestResultException("XRLLogString failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString returned XErr=0x{0:x}", request.XErr));
                    }
                    finally // delete the setting from t_setting_overrides
                    {
                        Global.XEnv.DeleteOverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", -1);
                        StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }
            }

            #endregion

            public class BaseTests : TestBase
            {
                public uint Expected_XErr = 0;   // if > 0, negative test cases and need to verify the exception thrown is correct
                public ArrayList LSLines = null;
                public ArrayList LSALines = null;

                public XRLLogString request = null;
                public string szLogLine = null;

                public bool runXmgmtCacheFlush = false;

                protected string uniqueTestId;

                // Stores the date/time of the last log line request for this test
                // This can be used to limit results to only the log lines after the last request
                protected DateTime lastRequestTime = DateTime.MinValue;

                protected string fixFileBuffer;

                protected const int ID_INDEX = 1; //Index of the id field for a given logline.

                protected virtual void Init()
                {
                    LSLines = new ArrayList();
                    LSALines = new ArrayList();

                    // "BAN_CL" and "BAN_VW" log lines are expected to be coalesced by this test.  This used to be in the database in prod as an
                    // aggregated key, but we make it explicit here to make sure that it's always present.

                    Global.XEnv.OverrideSetting("ALL", "ALL", "stringsvr_reportingAggregateKeys", "TESTAGG,REPORTAGG,BAN_CL,BAN_VW", -1);
                    StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr configcacherefresh");

                    uniqueTestId = String.Format("{0}-{1}", this.GetType().Name, Guid.NewGuid());
                }

                /// <summary>
                /// Adds unique test id to a string
                /// </summary>
                /// <param name="logLine">Log line to add unique test id into</param>
                protected void AddUniqueTestId(ref string logLine)
                {
                    Regex regex = new Regex(@"^(?<key>.*?)\|", RegexOptions.Multiline);
                    string uniqueLogLine;

                    if (regex.IsMatch(logLine))
                    {
                        uniqueLogLine = regex.Replace(logLine, "${key}|" + uniqueTestId + "|");
                    }
                    else
                    {
                        uniqueLogLine = logLine + "-" + uniqueTestId;
                    }

                    logLine = uniqueLogLine;
                }

                protected void AddUniqueTestId(ArrayList logArray)
                {
                    for (int i = 0; i < logArray.Count; i++)
                    {                        
                        string logLine = (string)logArray[i];
                        AddUniqueTestId(ref logLine);
                        logArray[i] = logLine;
                    }
                }

                protected override void Execute()
                {
                    Init();

                    AddUniqueTestId(ref szLogLine);
                    request.logLinesLength = (ushort)szLogLine.Length;
                    request.logLine = szLogLine;

                    // here make the call only hitting one FD, the first one in the VIP
                    // so we can verify the report log files
                    bool ret = request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer));
                    if (Expected_XErr != 0)
                    {
                        if (ret)
                            throw new UnexpectedTestResultException("XRLLogString should have failed.");
                        if (request.XErr != Expected_XErr)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString returned unexpected error XErr=0x{0:X}, expected XErr=0x{1:X}", request.XErr, Expected_XErr));
                    }
                    else
                    {
                        if (!ret)
                            throw new UnexpectedTestResultException("XRLLogString failed: " + request.GetDumpString());
                        if (request.XErr != HResult.S_OK)
                            throw new UnexpectedTestResultException(String.Format("XRLLogString returned XErr=0x{0:x}", request.XErr));

                        // CacheFlush Xmgmt command
                        if (runXmgmtCacheFlush)
                            StringServTest.ExecuteXmgmtCommandOneServer(_stringServer, "e :stringsvr cacheflush");

                        DoSecondRequest();

                        VerifyResponse(szLogLine, ref LSLines, ref LSALines);
                    }

                    ResultCode = TEST_RESULTS.PASSED;
                }

                protected void DoSecondRequest()
                {
                    System.Threading.Thread.Sleep(1500);    // give enough time to verify the results

                    // have to do second request, because the log file buffer
                    fixFileBuffer = "fixfilebuffer|simplelogline";
                    AddUniqueTestId(ref fixFileBuffer);

                    XRLLogString request = CreateXRLLogStringRequest();
                    request.logLinesLength = (ushort)fixFileBuffer.Length;
                    request.logLine = fixFileBuffer;

                    // here make the call only hitting one FD, the first one in the VIP
                    // so we can verify the report log files
                    if (!request.Execute(Global.XEnv.GetInterface(Interface.stringsvr, _stringServer)))
                        throw new UnexpectedTestResultException("XRLLogString simple logline failed: " + request.GetDumpString());
                    if (request.XErr != HResult.S_OK)
                        throw new UnexpectedTestResultException(String.Format("XRLLogString simple logline returned XErr=0x{0:x}", request.XErr));

                    System.Threading.Thread.Sleep(500);    // give enough time to verify the results
                }

                public void VerifyResponse(string szLogLine, ref ArrayList LSLines, ref ArrayList LSALines)
                {
                    VerifyResponse(szLogLine, ref LSLines, ref LSALines, DateTime.MinValue);
                }

                public void VerifyResponseAfterLastRequest(string szLogLine, ref ArrayList LSLines, ref ArrayList LSALines)
                {
                    VerifyResponse(szLogLine, ref LSLines, ref LSALines, lastRequestTime);
                }

                private void VerifyResponse(string szLogLine, ref ArrayList LSLines, ref ArrayList LSALines, DateTime startDateTime)
                {
                    ArrayList lsLines = new ArrayList();
                    ArrayList lsaLines = new ArrayList();
                    GetLogResults(out lsLines, out lsaLines, startDateTime);

                    string[] lines = szLogLine.Split(new char[] { '\n' });
                    string temp = "";
                    if (LSLines == null)
                    {
                        LSLines = new ArrayList();
                    }
                    else if (LSLines.Count == 0)
                    {
                        foreach (string logline in lines)
                        {
                            if (logline.Length <= 0)    // skip empty lines
                                continue;
                            if (logline.IndexOf("TESTAGG") == 0 || logline.IndexOf("REPORTAGG") == 0 || logline.IndexOf("BAN_VW") == 0 || logline.IndexOf("BAN_CL") == 0)
                                continue;
                            else if (logline.Length > 0)
                            {
                                temp = logline.Replace('~', '|');
                                LSLines.Add(temp);
                            }
                        }
                    }

                    if (LSALines == null)
                    {
                        LSALines = new ArrayList();
                    }
                    else if (LSALines.Count == 0)
                    {
                        foreach (string logline in lines)
                        {
                            if (logline.Length <= 0)    // skip empty lines
                                continue;
                            if (logline.IndexOf("TESTAGG") == 0 || logline.IndexOf("REPORTAGG") == 0 || logline.IndexOf("BAN_VW") == 0 || logline.IndexOf("BAN_CL") == 0)
                            {
                                int index = logline.IndexOf('~');
                                temp = logline;
                                if (index >= 0)
                                {
                                    temp = logline.Substring(0, index);
                                }
                                temp = temp + "|1";
                                LSALines.Add(temp);
                            }
                            else
                                continue;
                        }
                    }

                    // compare
                    Global.RO.Info("CompareTwoArrayList(LSLines, lsLines)");
                    CompareTwoArrayList(LSLines, lsLines);
                    Global.RO.Info("CompareTwoArrayList(LSALines, lsaLines)");
                    CompareTwoArrayList(LSALines, lsaLines);

                    Global.RO.Info("CompareTwoArrayList(lsLines, LSLines)");
                    CompareTwoArrayList(lsLines, LSLines);
                    Global.RO.Info("CompareTwoArrayList(lsaLines, LSALines)");
                    CompareTwoArrayList(lsaLines, LSALines);
                }

                public void GetLogResults(out ArrayList lsLines, out ArrayList lsaLines)
                {
                    GetLogResults(out lsLines, out lsaLines, DateTime.MinValue);
                }

                public void GetLogResults(out ArrayList lsLines, out ArrayList lsaLines, DateTime startDateTime)
                {
                    lsLines = new ArrayList();
                    lsaLines = new ArrayList();
                    StreamReader sr = null;
                    FileInfo finfo = null;
                    DateTime newestTime = DateTime.UtcNow.AddYears(-10);
                    string newestFile = "";

                    try
                    {
                        bool fileFound = false;
                        string[] logFiles = null;

                        // replace the C: with C$ for logroot
                        _logRoot = _logRoot.Replace(':', '$');

                        string logPath = @"\\" + _stringServer + @"\" + FuncLogString._logRoot + @"\app\stringsvr\report\";
                        Global.RO.Info("Checking path:" + logPath);

                        logFiles = Directory.GetFiles(logPath, @"*.stringsvr.*.log");
                        if (logFiles.Length != 0)
                        {
                            Global.RO.Info("Found " + logFiles.Length + " files on server " + _stringServer);
                            foreach (string logFile in logFiles)
                            {
                                finfo = new FileInfo(logFile);
                                // Grab all the files within 5 minutes UTC
                                if (finfo.LastWriteTimeUtc < (DateTime.Now.ToUniversalTime() - new TimeSpan(0, 0, 5, 0, 0)))
                                {
                                    continue;
                                }
                                string localFile = @".\" + finfo.Name;
                                File.Copy(logFile, localFile, true);
                                Global.RO.Info("File has been copied over: " + logFile);

                                // get the newest time and local file
                                if (finfo.LastWriteTimeUtc > newestTime)
                                {
                                    newestTime = finfo.LastWriteTimeUtc;
                                    newestFile = localFile;
                                }
                                fileFound = true;
                            }
                        }
                        else
                        {
                            Global.RO.Info("No Files found on server: " + _stringServer);
                        }

                        if (fileFound)
                        {
                            // We found the log file. Search for the log message we're looking for              
                            sr = new StreamReader(newestFile);
                            string line = null;
                            Global.RO.Info("Verify LOG message was received. File: " + newestFile);

                            sr.Close();
                            sr = new StreamReader(newestFile);  // read again
                            while ((line = sr.ReadLine()) != null)
                            {
                                // Format of log line
                                // 2006/08/02 06:56:30.196|LS-STIMMEDIATE|1|2|3|4
                                // 2006/08/02 06:56:30.196|LSA-TESTAGG|1|2|3|4|TESTING|4

                                // If there's a start time specified, skip all entries before that time
                                if (startDateTime != DateTime.MinValue)
                                {
                                    DateTime dtMsg = DateTime.Parse(line.Substring(0, line.IndexOf('|')));
                                    if (dtMsg < startDateTime)
                                    {
                                        continue;
                                    }
                                }

                                // Check whether the line contains the uniqueTestId, skip anything not related to this test
                                if (!line.Contains(uniqueTestId))
                                {
                                    continue;
                                }

                                // Save the latest log time for future reference
                                DateTime lineTime = DateTime.Parse(line.Substring(0, line.IndexOf('|')));
                                if (lineTime > lastRequestTime)
                                {
                                    lastRequestTime = lineTime;
                                }

                                Global.RO.Info("LogLine:" + line);                                

                                for (int k = 0; k < ID_INDEX; k++) //Loop over ID_INDEX-1 times to extract the headers before the id.
                                {
                                    line = line.Substring(line.IndexOf('|') + 1);
                                }

                                if (line.IndexOf("LS-" + fixFileBuffer) == 0)
                                {
                                    continue;
                                }
                                else if (line.IndexOf("LS-") == 0)
                                {
                                    lsLines.Add(line.Substring(3));
                                }
                                else if (line.IndexOf("LSA-") == 0)
                                {
                                    lsaLines.Add(line.Substring(4));
                                }
                                else
                                {
                                    throw new UnexpectedTestResultException("Wrong type of log line!!!");
                                }
                            }
                        }
                    }
                    finally
                    {
                        if (sr != null) sr.Close();
                        finfo = null;
                        // Delete file that was copied                
                        //File.Delete(logFile); this is causing a file in use exception
                    }
                }

                public void CompareTwoArrayList(ArrayList first, ArrayList second)
                {
                    ValueCheck.Test("ArrayList count", first.Count, second.Count);
                    for (int i = 0; i < first.Count; i++)
                    {
                        bool found = false;
                        for (int j = 0; j < second.Count; j++)
                        {
                            if ((string)first[i] == (string)second[j])
                            {
                                found = true;
                                break;
                            }
                        }
                        if (!found)
                        {
                            throw new UnexpectedTestResultException("string not found: " + (string)first[i]);
                        }
                    }
                }

                public XRLLogString CreateXRLLogStringRequest()
                {
                    if (FuncLogString.useBinary)
                        return new XRLLogBinary();
                    else
                        return new XRLLogString();
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\VetStringTest.cs ===
u s i n g   S y s t e m ; 
 
 u s i n g   S y s t e m . I O ; 
 
 u s i n g   S y s t e m . N e t ; 
 
 u s i n g   S e r v e r T e s t F r a m e w o r k ; 
 
 u s i n g   S e r v e r T e s t F r a m e w o r k . U t i l i t i e s ; 
 
 u s i n g   S e r v e r T e s t F r a m e w o r k . L i v e S e r v i c e ; 
 
 u s i n g   S e r v e r T e s t F r a m e w o r k . L i v e S e r v i c e . S t r i n g S e r v e r ; 
 
 u s i n g   S y s t e m . T e x t ; 
 
 u s i n g   S y s t e m . X m l ; 
 
 u s i n g   S y s t e m . T h r e a d i n g ; 
 
 
 
 n a m e s p a c e   S t r i n g S e r v T e s t 
 
 { 
 
         [ T e s t G r o u p ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 p u b l i c   c l a s s   M 2 _ V e t _ s t r i n g _ P o s _ C a s e s   :   T e s t N o d e 
 
 	 { 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   S t r i n g s   -   Z e r o " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 c l a s s   V e t _ S t r i n g _ Z e r o   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   0 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V e r i f y ( v e t r e s p o n s e ) ; 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   S t r i n g s   -   S i n g l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 c l a s s   V e t _ S t r i n g _ S i n g l e   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   1 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ 1 ] ; 
 
 	 	 	                 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
                         	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " b s " ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V e r i f y ( v e t r e s p o n s e ) ; 
 
 	 	 	 	 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 
 
 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   b a d   J P   S t r i n g s   -   S i n g l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 	 c l a s s   V e t _ B a d J P S t r i n g _ S i n g l e   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   1 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ 1 ] ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
 	 	 	 	 / / v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " 00000" ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   = " 000" ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 i f ( v e t r e s p o n s e . r g h r S t r i n g [ 0 ]   ! =   H R e s u l t . X O N L I N E _ E _ S T R I N G _ O F F E N S I V E _ T E X T ) 
 
 	 	 	 	 	 t h r o w   n e w   E x c e p t i o n ( " e x p e c t e d   H R e s u l t   =   O F F E N S I V E   T E X T   b u t   r e c i v e d   : " +   v e t r e s p o n s e . r g h r S t r i n g [ 0 ] ) ; 
 
 	 	 	 	 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 
 
 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   g o o d   J P   S t r i n g s   -   S i n g l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 	 c l a s s   V e t _ G o o d J P S t r i n g _ S i n g l e   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   1 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ 1 ] ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " 000000" ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V e r i f y ( v e t r e s p o n s e ) ; 
 
 	 	 	 	 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   S t r i n g s   -   S i n g l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 	 c l a s s   V e t _ B a d _ S i n g l e _ D o u b l e _ B y t e _ S t r i n g   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   1 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ 1 ] ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " AINOKO" ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V a l u e C h e c k . T e s t ( " S t r i n g   H R " ,   H R e s u l t . X O N L I N E _ E _ S T R I N G _ O F F E N S I V E _ T E X T ,   v e t r e s p o n s e . r g h r S t r i n g [ 0 ] ) ; 
 
 	 	 	 	 
 
 
 
 	 	 	 	 / / v e r i f y   a   s i n g l e   b y t e   a l s o   w o r k s 
 
 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t 1   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e 1   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t 1 . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t 1 . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t 1 . w N u m S t r i n g s   =   1 ; 
 
 	 	 	 	 v e t r e q u e s t 1 . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 
 
 	 	 	 	 v e t r e q u e s t 1 . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ 1 ] ; 
 
 	 	 	 	 v e t r e q u e s t 1 . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
 	 	 	 	 v e t r e q u e s t 1 . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " a i n o k o " ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t 1 . E x e c u t e ( o u t   v e t r e s p o n s e 1 ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t 1 . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V a l u e C h e c k . T e s t ( " S t r i n g   H R " ,   H R e s u l t . X O N L I N E _ E _ S T R I N G _ O F F E N S I V E _ T E X T ,   v e t r e s p o n s e 1 . r g h r S t r i n g [ 0 ] ) ; 
 
 	 	 	 	 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 
 
 
 
 
 
 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   b a d   J P   S t r i n g s   -   S i n g l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 	 c l a s s   V e t _ M i x e d J P S t r i n g _ S i n g l e   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   1 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ 1 ] ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " 000000    00000" ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 i f ( v e t r e s p o n s e . r g h r S t r i n g [ 0 ]   ! =   H R e s u l t . X O N L I N E _ E _ S T R I N G _ O F F E N S I V E _ T E X T ) 
 
 	 	 	 	 	 t h r o w   n e w   E x c e p t i o n ( " e x p e c t e d   H R e s u l t   =   O F F E N S I V E   T E X T   b u t   r e c i v e d   : " +   v e t r e s p o n s e . r g h r S t r i n g [ 0 ] ) ; 
 
 	 	 	 	 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   S t r i n g s   -   M u l t i p l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 c l a s s   V e t _ S t r i n g _ M u l t i p l e   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   4 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ v e t r e q u e s t . w N u m S t r i n g s ] ; 
 
 	 	 	                 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
                         	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 0 ] . s z S t r i n g   =   " t h i s   i s   a   s t r i n g ? " ; 
 
 	 	 	                 v e t r e q u e s t . r g S t r i n g D a t a [ 1 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
                         	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 1 ] . s z S t r i n g   =   " i s   i t   r e a l l y   a   s t r i n g " ; 
 
 	 	 	                 v e t r e q u e s t . r g S t r i n g D a t a [ 2 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
                         	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 2 ] . s z S t r i n g   =   " l o o k s   l i k e   a   s t r i n g " ; 
 
 	 	 	                 v e t r e q u e s t . r g S t r i n g D a t a [ 3 ]   =   n e w   S t r i n g D a t a ( ) ; 
 
                         	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ 3 ] . s z S t r i n g   =   " r e a d s   l i k e   a   s t r i n g " ; 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V e r i f y ( v e t r e s p o n s e ) ; 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 
 
                 [ T e s t C a s e ,   D e s c r i p t i o n ( " M 2   -   V e t   S t r i n g s   -   M u l t i p l e " ) ,   O w n e r ( " e m z e p h i r " ) ,   T e s t F r e q u e n c y ( " R e g r e s s i o n " ) ,   E n v R e q u i r e m e n t ( " " ) ,   T e s t C a s e P r i o r i t y ( 1 ) ] 
 
 	 	 	 c l a s s   V e t _ S t r i n g _ L a r g e _ P a c k e t   :   P u t G e t V e t S t r i n g T e s t B a s e 
 
 	 	 { 
 
 	 	 	 o v e r r i d e   p r o t e c t e d   v o i d   E x e c u t e ( ) 
 
 	 	 	 { 
 
 	 	 	 	 
 
 	 	 	 	 X R L V e t 2 S t r i n g   v e t r e q u e s t   =   n e w   X R L V e t 2 S t r i n g   ( ) ; 
 
 	 	 	 	 X R L V e t R e s p o n s e   v e t r e s p o n s e   =   n e w   X R L V e t R e s p o n s e ( ) ; 
 
 	 	 	 	 v e t r e q u e s t . d w T i t l e I D   =   0 x F F F E 0 0 0 0 ; 
 
 	 	 	 	 v e t r e q u e s t . w L o c a l e L e n   =   5 ; 
 
 	 	 	 	 / /   m a x V a l u e *   3 0   i s   t h e   l a r g e s t   p a c k e t   t h a t   c a n   b e   s e n t   t h r o u g h   b e f o r e   g e t t i n g 
 
 	 	 	 	 / / 	 	 	 	 C o u l d n ' t   r e a d   p o s t   s t r e a m : 
 
 	 	 	 	 / / S y s t e m . W e b . H t t p E x c e p t i o n :   M a x i m u m   r e q u e s t   l e n g t h   e x c e e d e d . 
 
 	 	 	 	 / / a t   S y s t e m . W e b . H t t p R e q u e s t . G e t E n t i r e R a w C o n t e n t ( ) 
 
 	 	 	 	 / / a t   S y s t e m . W e b . H t t p R e q u e s t . g e t _ I n p u t S t r e a m ( ) 
 
 	 	 	 	 / / a t   x o n l i n e . c o m m o n . s e r v i c e . E v e n t B u i l d e r . L o g E v e n t ( U I n t 3 2   e v e n t I d ,   S t r i n g   m e s s a g e ,   E x c e p t i o n   e ) 
 
 
 
 	 	 	 	 v e t r e q u e s t . w N u m S t r i n g s   =   1 0 ; 
 
 	 	 	 	 v e t r e q u e s t . s z L o c a l e   =   " e n - U S " ; 
 
 	 	 	 	 s t r i n g   D a t a S t r i n g   =   n e w   s t r i n g ( ' c ' , v e t r e q u e s t . M a x S t r i n g L e n ) ; 
 
 
 
 
 
 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a   =   n e w   S t r i n g D a t a [ v e t r e q u e s t . w N u m S t r i n g s ] ; 
 
 	 	 	 	 f o r   ( u s h o r t   i   =   0 ;   i   <   v e t r e q u e s t . w N u m S t r i n g s   ;   i + + ) 
 
 	 	 	 	 { 
 
 	 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ i ]   =   n e w   S t r i n g D a t a ( ) ; 
 
 	 	 	 	 	 v e t r e q u e s t . r g S t r i n g D a t a [ i ] . s z S t r i n g   =   D a t a S t r i n g ; 
 
 	 	 	 	 } 
 
 	 	 	 	 
 
 	 	 	 	 	 
 
 	 	 	 	 i f   ( ! v e t r e q u e s t . E x e c u t e ( o u t   v e t r e s p o n s e ) )   
 
 	 	 	 	 { 
 
 	 	 	 	 	 / / D E B U G 
 
 	 	 	 	 	 t h r o w   n e w   U n e x p e c t e d T e s t R e s u l t E x c e p t i o n (   v e t r e q u e s t . G e t D u m p S t r i n g ( )   ) ; 
 
 	 	 	 	 	 
 
 	 	 	 	 } 
 
 
 
 	 	 	 	 V e r i f y ( v e t r e s p o n s e ) ; 
 
 	 	 	 	 R e s u l t C o d e = T E S T _ R E S U L T S . P A S S E D ; 	 	 
 
 	 	 	 } 
 
 	 	 } 
 
 	 } 
 
 } 
 
 
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\GetSecurityToken.cs ===
//
// GetSecurityToken.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections.Specialized;
using System.IO;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Security.Cryptography.Xml;
using System.Text;
using System.Web;
using System.Web.Caching;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Xml;
using System.Xml.Serialization;
using System.Globalization;

using xonline.common.health;
using xonline.common.crypto;
using xonline.common.xcrypto;
using xonline.common.config;
using xonline.common.fse;
using xonline.common.feapp;
using xonline.common.installer;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.common.service;
using xonline.common.utilities;

[assembly: XomAreaDefinition(XomAreaName.log)]
[assembly: XomAreaDefinition(XomAreaName.sts)]
[assembly: XomAreaDefinition(XomAreaName.ststrace)]

namespace xonline.server.sts.fd
{

    public class GetSecurityToken : IHttpHandler
    {
        // string constants
        private const string samlNamespace = "urn:oasis:names:tc:SAML:1.0:assertion";

        ////////////////////////////////////////////////
        // Settings

        // TicketWindow Setting
        //  this is the time span that a SAML token is valid
        static private TimeSpan TokenWindow
        { get { return TimeSpan.FromMinutes(Config.GetUIntSetting(Setting.sts_token_window_minutes)); } }

        // TokenIssuerName Setting
        //  this is the issuer name that goes into the SAML token (ie. sts.xboxlive.com)
        static private string TokenIssuerName
        { get { return Config.GetSetting(Setting.sts_token_issuer_name); } }


        // Token Signing Certificate
        //  this is the cert and associated private key that signs the SAML token
        static private X509Certificate2 _certificate = null;
        
        static private X509Certificate2 GetCertificate()
        {
            X509Certificate2 certificate = _certificate;
            
            // do I have a cert
            if (certificate != null)
                return certificate;

            string certSubject = Config.GetSetting(Setting.sts_cert_subject);
            X509Store store = new X509Store(StoreName.My, StoreLocation.LocalMachine);
            store.Open(OpenFlags.ReadOnly);
            try
            {
                // Find the certificate that matches the subject
                X509Certificate2Collection matches = store.Certificates.Find(X509FindType.FindBySubjectName, certSubject, false);
                // Make sure this list doesn't include any "near" matches
                for (int i = 0; i < matches.Count; )
                {
                    X509Certificate2 cert = matches[i];
                    string name = cert.SubjectName.Name;
                    string commonName;

                    int startCommonName = name.IndexOf("CN=") + 3;
                    int endCommonName = name.IndexOf(",", startCommonName);
                    if (-1 == endCommonName)
                    {
                        commonName = name.Substring(startCommonName);
                    }
                    else
                    {
                        commonName = name.Substring(startCommonName, endCommonName - startCommonName);
                    }

                    // Now check for an exact match on the name
                    if (!string.Equals(certSubject, commonName, StringComparison.OrdinalIgnoreCase))
                    {
                        matches.RemoveAt(i);
                        cert.Reset();
                    }
                    else
                    {
                        i++;
                    }
                }

                if (matches == null || matches.Count == 0)
                    throw new XRLException(HResult.XONLINE_E_STS_CONFIGURATION_ERROR, XEvent.Id.STS_FD_CONFIGERROR, "No certificates with subject {0} were found in the specified store", certSubject);
                if (matches.Count > 1)
                    throw new XRLException(HResult.XONLINE_E_STS_CONFIGURATION_ERROR, XEvent.Id.STS_FD_CONFIGERROR, "Multiple certificates with subject {0} were found in the specified store", certSubject);
                if (!matches[0].HasPrivateKey)
                    throw new XRLException(HResult.XONLINE_E_STS_CONFIGURATION_ERROR, XEvent.Id.STS_FD_CONFIGERROR, "Certificate with subject {0} doesn't have a private key", certSubject);
                _certificate = certificate = matches[0];
            }
            finally
            {
                store.Close();
            }
            return certificate;
        }
        
        ////////////////////////////////////////////////
        // Load/Management/Test operations

        public static void StaticInit()
        {
            Load();
        }
        
        public static void Load()
        {
            // force load of settings so we can 'pre-fail' if the config setting is invalid
            _certificate = null; // null this in case we are being called to reload
            X509Certificate2 certificate = GetCertificate();
            TimeSpan ticketWindow = GetSecurityToken.TokenWindow;
            string tokenIssuerName = GetSecurityToken.TokenIssuerName;
        }
               

        public static void Test(HealthReport report)
        {
            try
            {

                if (string.IsNullOrEmpty(GetSecurityToken.TokenIssuerName))
                {
                    report.HealthStatus = HealthStatusEnum.Red;
                    report.ErrorDetails = "Sts Healthcheck failed: ticketIssuerName is invalid";
                    return;
                }
                
                // we are hardcoding that the ticket window must be between 1 minutes and 10 days
                if (GetSecurityToken.TokenWindow > TimeSpan.FromDays(10) || GetSecurityToken.TokenWindow < TimeSpan.FromMinutes(1)) 
                {
                    report.HealthStatus = HealthStatusEnum.Red;
                    report.ErrorDetails = "Sts Healthcheck failed: ticketWindow is invalid";
                    return;
                }

                if (!GetSecurityToken.GetCertificate().HasPrivateKey)
                {
                    report.HealthStatus = HealthStatusEnum.Red;
                    report.ErrorDetails = "Sts Healthcheck failed: certificate doesn't have a private key";
                    return;
                }

                if (!(GetSecurityToken.GetCertificate().PrivateKey is RSACryptoServiceProvider))
                {
                    report.HealthStatus = HealthStatusEnum.Red;
                    report.ErrorDetails = "Sts Healthcheck failed: certificate doesn't have an RSA private key";
                    return;
                }

                // DONT ADD RED REPORTS AFTER THIS LINE OR IT WILL BE MASKED

                report.HealthStatus = HealthStatusEnum.Green;
            }
            catch (Exception e)
            {
                report.HealthStatus = HealthStatusEnum.Red;
                report.ErrorDetails = e.ToString();
            }

        }

        ////////////////////////////////////////////////
        // GetSecurityToken operations


        public bool  IsReusable
        {
            get { return true; }
        }

        public void ProcessRequest(HttpContext context)
        {
            string audience = null;  // the uri the token is target for ie: http://myservice.com
            uint titleID = 0;   // the title id of the calling title
            ulong[] xuids = {0, 0, 0, 0}; // the xuids for players 1-4
            HResult hr = HResult.S_OK;

            try
            {
                StsPerformanceCounters.Counters.GetSecurityTokenRequestsPerSecond.Increment();
                StsPerformanceCounters.Counters.GetSecurityTokenRequestsTotal.Increment();
                
                CallSource.Check(VirtualInterface.sts, VirtualInterface.sts_int);

                // get required titleID param
                if (!uint.TryParse(context.Request["titleID"], NumberStyles.HexNumber, NumberFormatInfo.CurrentInfo, out titleID))
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STS_INVALID_ARGUMENT, "Invalid titleID ({0}) parameter passed to GetSecurityToken.", context.Request["titleID"]);
                SGInfo.VerifyTitleId(titleID);

                // get required audience param
                audience = context.Request["audience"];
                if (audience != null)
                    audience = audience.Trim();
                if (string.IsNullOrEmpty(audience))
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STS_INVALID_ARGUMENT, "Null or Empty audience parameter passed to GetSecurityToken.");
                
                // get xuid params (xuid1, xuid2, xuid3, xuid4)
                xuids[0] = GetXuid(context, 1, true);
                xuids[1] = GetXuid(context, 2, false);
                xuids[2] = GetXuid(context, 3, false);
                xuids[3] = GetXuid(context, 4, false);

                XmlDocument samlToken = CreateSecurityToken(audience, titleID, xuids);
                context.Response.ContentType = "text/xml";
                context.Response.Write(samlToken.OuterXml);
            }
            catch (Exception e)
            {
                StsPerformanceCounters.Counters.GetSecurityTokenRequestsFailedPerSecond.Increment();
                StsPerformanceCounters.Counters.GetSecurityTokenRequestsFailedTotal.Increment();

                if (e is XRLExceptionWithoutEvent || e is XRLException)
                {
                    hr=(uint)((ExceptionWithHResult)e).HResult;
                    throw; // already specifically handled... rethrow
                }
                
                hr = HResult.XONLINE_E_STS_ERROR;
                throw new XRLException(hr, XEvent.Id.STS_FD_ERROR, e, "Unspecified failure in STS GetSecurityToken.");
            }
            finally
            {
                string szLog = string.Format("GetSecurityToken|{0:X8}|{1:X16}|{2:X16}|{3:X16}|{4:X16}|{5}|{6:X8}", 
                                            titleID, xuids[0], xuids[1], xuids[2], xuids[3], audience, hr.ToString());

                // Only go to app log
                Xom.Log(XomAreaName.log, szLog);
            }
        }

        private ulong GetXuid(HttpContext context, int playerNumber, bool isRequired)
        {
            // Returns the xuid passed in on the reqeust context or 0 if nothing was passed in.
            // This will throw if the param is not a valid xuid or not passed in when required.

            ulong xuid = 0;
            string param = "xuid" + playerNumber;
            if (isRequired || context.Request[param] != null)
            {
                if(!ulong.TryParse(context.Request[param], NumberStyles.HexNumber, NumberFormatInfo.CurrentInfo, out xuid))
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STS_INVALID_ARGUMENT, "Invalid parameter ({0}={1}) passed to GetSecurityToken.", param, context.Request[param]);
                SGInfo.VerifyUserId(xuid);
            }
            return xuid;
        }
        
        private XmlDocument CreateSecurityToken(string audience, uint titleID, ulong[] xuids) 
        {
            // Create the Saml token which includes a Saml Assertion that we will later sign

            string assertionID = string.Format("SamlSecurityToken-{0}", Guid.NewGuid().ToString());
            
            DateTime now = DateTime.UtcNow;
            DateTime expires = now.Add(GetSecurityToken.TokenWindow);

            TextWriter textWriter = new StringWriter();
            XmlTextWriter writer = new XmlTextWriter(textWriter);
            
            writer.WriteStartElement("saml", "Assertion", samlNamespace);
            writer.WriteAttributeString("MajorVersion", "1");
            writer.WriteAttributeString("MinorVersion", "1");
            writer.WriteAttributeString("AssertionID", assertionID);
            writer.WriteAttributeString("Issuer", GetSecurityToken.TokenIssuerName);
            writer.WriteAttributeString("IssueInstant", now.ToString("o"));
            
            writer.WriteStartElement("Conditions", samlNamespace);
            writer.WriteAttributeString("NotBefore", now.ToString("o")); 
            writer.WriteAttributeString("NotOnOrAfter", expires.ToString("o"));
            writer.WriteStartElement("AudienceRestrictionCondition", samlNamespace);
            writer.WriteElementString("Audience", samlNamespace, audience);
            writer.WriteEndElement(); //AudienceRestrictionCondition
            writer.WriteEndElement(); // Conditions

            writer.WriteStartElement("AttributeStatement", samlNamespace);
            
            writer.WriteStartElement("Subject", samlNamespace);
            writer.WriteElementString("NameIdentifier", samlNamespace, string.Format("0x{0:X16}", xuids[0])); // primary Subject is player1, in uppercase hex
            writer.WriteEndElement();

            // Write out machineID claim
            WriteClaim(writer, "PlatformType", string.Format("0x{0:X2}", SGInfo.Current.GetPlatformType()));
            WriteClaim(writer, "MachineID", string.Format("0x{0:X16}", SGInfo.Current.MachineId));
            WriteClaim(writer, "ClientVersion", string.Format("0x{0:X8}", SGInfo.Current.ClientVersion));
            WriteClaim(writer, "TitleID", string.Format("0x{0:X8}", titleID));
            WriteClaim(writer, "TitleVersion", string.Format("0x{0:X8}", SGInfo.Current.TitleVersion));
                        
            // Write out player claims
            for (int i=0; i < 4; i++)
                WriteUserClaims(writer, xuids[i], i+1);
                        
            writer.WriteEndElement(); // AttributeStatement
            writer.WriteEndElement(); // Assertion
            
            textWriter.Flush();

            XmlDocument document = new XmlDocument();
            document.LoadXml(textWriter.ToString());
            
            SignXmlViaLocalCert(document, assertionID);
            
            return document;
        }

        private static void WriteClaim(XmlTextWriter writer, string claim, string value)
        {
            writer.WriteStartElement("Attribute", samlNamespace);
            writer.WriteAttributeString("AttributeName", claim);
            writer.WriteAttributeString("AttributeNamespace", "http://xboxlive.com/claims");
            writer.WriteElementString("AttributeValue", samlNamespace, value);
            writer.WriteEndElement();
        }

        private static void WriteUserClaims(XmlTextWriter writer, ulong xuid, int playerNumber)
        {
            // only write out valid players that are present
            if (xuid != 0)
            {
                WriteClaim(writer, "Xuid" + playerNumber, string.Format("0x{0:X16}", xuid)); //always return uppercase hex
                WriteClaim(writer, "Tier" + playerNumber, string.Format("0x{0:X2}", SGInfo.Current.GetUserTier(xuid)));
                WriteClaim(writer, "Country" + playerNumber, string.Format("0x{0:X2}", SGInfo.Current.GetUserCountry(xuid)));
            }
        }

        private void SignXmlViaLocalCert(XmlDocument document, string assertionID)
        {
            // grab the cert so we don't have a race condition with it changing during a reload
            // we need this because we access the cert twice in this function and don't want to take a lock... but need to stay consistant
            X509Certificate2 signingCertificate = GetSecurityToken.GetCertificate();
            
            // Create a CustomSignedXml object.  
            // The CustomSigendXml object lets us change what attribute is used to find the node to sign.
            // The standard SignedXml signs the node identified by the attribute named 'id'.
            // We need to sign the node identified by the attribute named 'AssertionID'. 
            CustomSignedXml signedXml = new CustomSignedXml(document);
            signedXml.SignedInfo.CanonicalizationMethod = SignedXml.XmlDsigExcC14NTransformUrl;
            signedXml.SigningKey = (RSACryptoServiceProvider) signingCertificate.PrivateKey;

            // Create a reference which tells SignedXml what node to sign
            Reference reference = new Reference();
            reference.Uri = "#" + assertionID;

            // Add an enveloped transformation to the reference.
            XmlDsigEnvelopedSignatureTransform transform1 = new XmlDsigEnvelopedSignatureTransform();
            reference.AddTransform(transform1);

            XmlDsigExcC14NTransform transform2 = new XmlDsigExcC14NTransform();
            reference.AddTransform(transform2);

            // Add the reference to the SignedXml object.
            signedXml.AddReference(reference);
            
            // add key info
            KeyInfo keyInfo = new KeyInfo();
            keyInfo.AddClause(new KeyInfoX509Data(signingCertificate));
            signedXml.KeyInfo = keyInfo;

            // Compute the signature.
            signedXml.ComputeSignature();

            // Get the XML representation of the signature and save
            // it to an XmlElement object.
            XmlElement xmlDigitalSignature = signedXml.GetXml();
            
            // Append the element to the XML document.
            document.DocumentElement.AppendChild(document.ImportNode(xmlDigitalSignature, true));
        }

    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\SecurityTicket.cs ===
//
// GetSecurityTicket.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.IdentityModel.Tokens;
using System.ServiceModel.Security;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Xml;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;

namespace xonline.server.sts.fd
{
    [WebService(Namespace="urn:schemas-xbox-com:SecurityTicket-data")]
    public sealed class SecurityTicket
    {
        [WebMethod]
        public string GetPartnerSecurityTicket( 
            ulong xuid, uint titleId, uint titleVersion, string audience
            )
        {
            HResult hr = HResult.S_OK;
            StringBuilder gpstResult = new StringBuilder();
            string platformType = string.Empty;
            XmlWriter xWriter;

            try
            {
                AAInfo aaInfo = AAInfoMiddleTier.Current;

                aaInfo.VerifyXblSamlToken();
                platformType = aaInfo.XblSamlToken.GetAttributeValue(XblSamlToken.name_attribute_platformtype);
                
                // Tickets are only for XPLT_MOBILE or XPLT_WEB_GAMES
                if ( XOn.XPLT_MOBILE != aaInfo.PlatformType && XOn.XPLT_WEB_GAMES != aaInfo.PlatformType )
                {
                    throw new XRLException(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE, XEvent.Id.STS_FD_ERROR, 
                        "VerifyAAInfo: InvalidPlatformType: platformType ({0})", platformType);
                }

                // AAInfo verification
                // Title Parameters
                aaInfo.VerifyTitleId(titleId);
                aaInfo.VerifyTitleVersion(titleVersion);

                // Xuid Parameters
                aaInfo.VerifyUserId(xuid);

                // Perform a deny list check on the audience uri
                if (string.IsNullOrEmpty(audience)) // Todo: dougb Remove before production rollout. Temporary default until integration with WinMO/XNA completed. 
                    audience = "http://test.xboxlive.com";
                else
                if ( !SecurityTicketImpl.VerifyAudience(audience))
                {
                    throw new XRLException(HResult.XONLINE_E_STS_INVALID_ARGUMENT, XEvent.Id.STS_FD_ERROR, 
                        "VerifyAudience: Invalid Audience: audience ({0})", audience);
                }

                SecurityTicketImpl impl = new SecurityTicketImpl();
                
                // Let's try getting the token from XSTS
                SecurityToken samlToken = impl.GetXStsToken(
                    audience                        // AudienceUri
                    );

                if (null == samlToken)
                {
                    samlToken = impl.GetPartnerSecurityTicket(
                        xuid,                           // Xuid0
                        aaInfo.GamerTag,                // gamerTag
                        titleId,                        // TitleID
                        titleVersion,                   // TitleVersion
                        audience,                       // AudienceUri
                        aaInfo.NotAfter                 // NotAfter
                        );

                    xWriter = XmlWriter.Create(gpstResult);
                }
                else
                {
                    XmlWriterSettings writeSettings = new XmlWriterSettings();

                    writeSettings.OmitXmlDeclaration = true;
                    xWriter = XmlWriter.Create(gpstResult, writeSettings);
                    gpstResult.Append(impl.GetXStsTokenPrefix());
                }
                WSSecurityTokenSerializer.DefaultInstance.WriteToken(xWriter, samlToken);
            }
            catch (Exception e)
            {
                FrontEndApp.LogException(e);
                // if the exception has an event or explicitly  does  not
                // want to generate an event then rethrow, otherwise wrap

                hr = XRLException.ToHResult(e, HResult.E_ACCESSDENIED);
                if ((e is ExceptionWithEvent) || (e is ExceptionWithoutEvent)) throw;

                // dougb Todo: Create a new STS Event
                throw new XRLException(hr, XEvent.Id.STS_FD_ERROR, "Access Denied.", e);
            }
            finally
            {
                string logLine = string.Join("|", new string[]
                    {
                        "GetPartnerSecurityTicket", 
                        hr.ToString(),        // the real hr
                        ((Puid)xuid).ToString(),
                        titleId.ToString( "X8" ),
                        titleVersion.ToString( "X8" ),
                        platformType,
                        (audience.Length < 32) ? audience : audience.Substring(0,32),
                    }
                );

                // "log" goes to app log
                Xom.Log(XomAreaName.log, logLine);

                // "sts" goes to reporting cleanser's
                Xom.Log(XomAreaName.sts, logLine);
            }

            return gpstResult.ToString();
        }

        [WebMethod]
        public string GetSecurityTicket( 
            byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId
            )
        {
            HResult hr = HResult.S_OK;
            StringBuilder stringSamlToken = new StringBuilder();
            string tokenType = string.Empty;
            
            try
            {
                AAInfo aaInfo = AAInfoMiddleTier.Current;

                // Tickets are only for XPLT_MOBILE or XPLT_WEB_GAMES
                if (XOn.XPLT_MOBILE != platformType && XOn.XPLT_WEB_GAMES != platformType)
                {
                    throw new XRLException(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE, XEvent.Id.STS_FD_ERROR, 
                        "InvalidPlatformType: platformType ({0})", platformType.ToString());
                }

                if (XOn.XPLT_WEB_GAMES == platformType)
                {
                    deviceId = string.Empty;
                }
                else if (string.IsNullOrEmpty(aaInfo.CertDeviceId) || 0 != string.Compare( aaInfo.CertDeviceId, deviceId, true))
                {
                    if ( string.IsNullOrEmpty(aaInfo.CertDeviceId))
                    {   // Policy not being enforced by aamodule!
                        Xom.NtEvent(XEvent.Id.AAINFO_DATA_VERIFICATION_WARNING, "VerifyDeviceId: AAInfo.CertDeviceId was empty can not verify. This should never be turned off in production.");
                    }
                    else
                    {
                        throw new XRLException(HResult.XONLINE_E_AUTHDATA_MISMATCH, XEvent.Id.AAINFO_DATA_VERIFICATION_ERROR, 
                            "VerifyDeviceId: deviceId ({0}) does not match AAInfo.CertDeviceId ({1})", deviceId, aaInfo.CertDeviceId);
                    }
                }

                SecurityTicketImpl impl = new SecurityTicketImpl();

                SamlSecurityToken samlToken = impl.GetSecurityTicket(
                    platformType,                   // Platform Type
                    deviceId,                       // DeviceID
                    clientVersion,                  // ClientVersion
                    titleId,                        // TitleID
                    titleVersion,                   // TitleVersion
                    aaInfo.PassportPuid,            // Puid0
                    aaInfo.PassportCId,             // CID0
                    aaInfo.NotAfter                 // NotAfter
                    );

                tokenType = impl.TokenTypeString;
                XmlWriter xWriter = XmlWriter.Create( stringSamlToken );

                WSSecurityTokenSerializer.DefaultInstance.WriteToken(xWriter, samlToken); 
            }
            catch (Exception e)
            {
                FrontEndApp.LogException(e);
                // if the exception has an event or explicitly  does  not
                // want to generate an event then rethrow, otherwise wrap

                hr = XRLException.ToHResult(e, HResult.E_ACCESSDENIED);
                if ((e is ExceptionWithEvent) || (e is ExceptionWithoutEvent)) throw;

                // dougb Todo: Create a new STS Event
                throw new XRLException(hr, XEvent.Id.STS_FD_ERROR, "Access Denied.", e);
            }
            finally
            {
                string logLine = string.Join("|", new string[]
                    {
                        "GetSecurityTicket", 
                        hr.ToString(),        // the real hr
                        tokenType, 
                        platformType.ToString(),
                        titleId.ToString( "X8" ),
                        titleVersion.ToString( "X8" ),
                        clientVersion.ToString( "X8" ),
                        deviceId,
                    }
                );

                // Go to app log only
                Xom.Log(XomAreaName.log, logLine);
            }
            
            return stringSamlToken.ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\CustomSignedXml.cs ===
﻿using System;
using System.Collections.Generic;
using System.Web;
using System.Xml;
using System.Xml.Serialization;
using System.Security.Cryptography;
using System.Security.Cryptography.Xml;


namespace xonline.server.sts.fd
{

    // http://blogs.msdn.com/shawnfa/archive/2004/04/05/108098.aspx
    // Searching for Custom ID Tags With Signed XML
    // Excerpt... The biggest limitation with doing this is that you must refer to the nodes that are being signed by ID, 
    // which for v1.1 and 1.0 of the framework was given by an attribute named "Id". The problem there is that 
    // the Id attribute may already have another use in your schema, and you cannot reuse them for creating node names. 
    // Another problem that may come up is that the XML being signed may be generated by a tool or program, 
    // and it's not possible for you to add Id tags. Whidbey reduces this limitation somewhat by also allowing 
    // "id" and "ID", but the fundamental problem still exists.

    // Nodes that are being referred to by ID are resolved in the GetIdElement method of the SignedXml class. 
    // By subclassing SignedXml and overriding this method, its possible to create your own id node resolver. 


    public class CustomSignedXml : SignedXml
    {
        public CustomSignedXml(XmlDocument doc) :
            base(doc)
        {
        }

        public override XmlElement GetIdElement(XmlDocument doc, string id)
        {
            // check to see if it's a standard ID reference
            XmlElement idElem = base.GetIdElement(doc, id);
            if (idElem != null)
                return idElem;

            idElem = doc.SelectSingleNode("//*[@AssertionID=\"" + id + "\"]") as XmlElement;
            return idElem;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\SecurityTicketImpl.cs ===
using System;
using System.Collections.Generic;
using System.IdentityModel.Tokens;
using System.Security.Cryptography.X509Certificates;
using System.ServiceModel.Security;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Text;
using System.Web;
using System.Xml;

using Microsoft.IdentityModel.Claims;
using Microsoft.IdentityModel.Protocols.WSTrust;
using Microsoft.IdentityModel.SecurityTokenService;
using Microsoft.Webstore.WstClient;

using Microsoft.XboxLive.Auth.Claims;
using Microsoft.XboxLive.Auth.Extensions.ServiceModel;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.utilities;
using xonline.config.sts.interfaces;
using xonline.kdc.ManagedProxy;
using xonline.server.billing.useraccount.soap;
using xonline.server.kdc;
using xonline.common.billing;

namespace xonline.server.sts.fd
{
    internal class SecurityTicketImpl
    {
        private enum TokenType
        {
            Machine,
            User,
        }

        // Attributes
        UserAccountAuthorizeInfo _userAuthInfo  = null;
        private string _gamerTag;
        private ulong _machinePuid              = 0;
        private TokenType _tokenType            = TokenType.Machine;
        private ulong _xuid                     = 0;
        private int _tierId                     = 0;

        private string _deviceType              = null;
        private RequestSecurityTokenResponse _rstr;
        private IAppliesTo _appliesTo = null;

        // initialization synchronization
        static private volatile bool _isInitialized     = false;
        static private object _cs = new object();
        
        // static instance of kdc object
        static private Kdc _theKdc                      = new Kdc();

        // static instance of XSts AppliesTos configuration data
        static private IDictionary<Uri, IAppliesTo> _appliesTos;

        // Token Signing Certificate
        //  this is the cert and associated private key that signs the SAML token
        static private X509Certificate2 _certificate    = null;
        // Token Expiration
        static private uint _machine_expiration_seconds = 60*60;
        static private uint _user_expiration_seconds    = 60*60;
        static private uint _partner_expiration_seconds = 60*60;
        
        static private string _token_issuer_name = XblSamlToken.xbl10_samlissuer;
        static private string[] _stsAudienceDenyList;

        // Properties
        
        public string Privileges
        {
            get 
            {
                if (null == _userAuthInfo.AccountInfo.Privileges)
                    return string.Empty;
                
                string privileges = string.Empty;
                
                for (int i=0; i<_userAuthInfo.AccountInfo.Privileges.Length; i++)
                {
                    privileges = string.Concat( privileges, _userAuthInfo.AccountInfo.Privileges[i].ToString(), "," );
                }
                if ( !string.IsNullOrEmpty( privileges ))
                    privileges = privileges.Remove(privileges.Length-1, 1);
                return privileges;
            }
        }

        public string TokenTypeString
        {
            get{ return _tokenType.ToString(); }
        }
        
        // -------------------------------------------------------------------------------
        // Static methods
        // -------------------------------------------------------------------------------

        /*
        static public void HealthCheck(NameValueCollection blockParams, HealthReport report)
        {
            try
            {
                Init();
                bool isThumbprintSuccess = false;

                string[] aamodule_stsThumbprints = Config.GetMultiSetting(MultiSetting.aamodule_stsThumbprints);
                foreach (string aamodule_stsThumbprint in aamodule_stsThumbprints)
                {
                    if ( _certificate.Thumbprint == aamodule_stsThumbprint )
                        isThumbprintSuccess = true;
                }
                
                if (!isThumbprintSuccess)
                {
                    report.HealthStatus = HealthStatusEnum.Red;
                    report.ErrorDetails = "AAModule is not configured to accept the SAML Tokens generated by GetSecurityTicket.  Add thumbprint [" +
                        _certificate.Thumbprint + "] to multisetting aamodule_stsThumbprints.";
                    return;
                }
            }
            catch (Exception e)
            {
                report.HealthStatus = HealthStatusEnum.Red;
                report.ErrorDetails = e.ToString();
            }
        }
        */
        
        static public void Load()
        {
            // Token Expiration Settings
            _machine_expiration_seconds = Config.GetUIntSetting(Setting.sts_machine_token_expiration_seconds);
            _user_expiration_seconds = Config.GetUIntSetting(Setting.sts_user_token_expiration_seconds);
            _partner_expiration_seconds = Config.GetUIntSetting(Setting.sts_partner_token_expiration_seconds);

            _stsAudienceDenyList = Config.GetMultiSetting(MultiSetting.sts_audienceDenyList);

            string certSubject = Config.GetSetting(Setting.sts_cert_subject);

            try
            {
                _certificate = (XblSamlToken.GetCertificateBySubjectName(certSubject, true, true))[0];
            }
            catch (Exception e)
            {
                throw new XRLException(HResult.XONLINE_E_SERVER_CONFIG_ERROR, XEvent.Id.STS_FD_CONFIGERROR, e.Message);
            }

            Kdc.Load();

            ISTSConfiguration XStsConfig = xonline.server.xsts.fd.config.XStsConfiguration.GetSTSConfiguration();
            _appliesTos = XStsConfig.AppliesToes;
        }

        static public bool VerifyAudience( string audience )
        {
            Init();
            
            bool isValid = true;

            if (null != _stsAudienceDenyList)
            {
                try
                {
                    Uri uri = new Uri(audience);

                    foreach (string denyUri in _stsAudienceDenyList)
                    {
                        if (uri.Host.EndsWith(denyUri))
                            return false;
                    }
                }
                catch (UriFormatException)
                {
                    isValid = false;
                }
            }

            return isValid;
        }
        
        // Implementation public

        // -------------------------------------------------------------------------------
        // GetPartnerSecurityTicket
        //
        // Generate a simplified SAML Security Token that can be used to authenticate 
        // subsequent calls to limited services
        // -------------------------------------------------------------------------------
        public SecurityToken GetPartnerSecurityTicket(
            ulong xuid, string gamerTag, uint titleId, uint titleVersion, string audience, DateTime notAfterDateTime
        )
        {
            Init();
            
            _gamerTag = gamerTag;

            // Calculate the maximum Not After Date Time
            DateTime notAfterMax = DateTime.UtcNow.AddSeconds(_partner_expiration_seconds);

            if ( notAfterMax < notAfterDateTime )
                notAfterDateTime = notAfterMax;
            
            // Create SAML attribute statement 
            SamlAttributeStatement samlAttributeStatement = new SamlAttributeStatement(); 

            // Create SAML subject 
            GenerateSamlSubject(samlAttributeStatement, XblSamlToken.subject_name_partner);
            
            // SAML attributes
            // Machine Claims
            GeneratePartnerClaims(samlAttributeStatement, titleId, titleVersion, xuid);

            return (SecurityToken)GenerateSAMLToken( samlAttributeStatement, audience, notAfterDateTime, true);
        }
        
        // -------------------------------------------------------------------------------
        // GetSecurityTicket
        //
        // Perform kdc like validation of Device, Title, and User parameters
        // and if valid generate a SAML Security Token that can be used to authenticate 
        // subsequent calls to services
        // -------------------------------------------------------------------------------
        public SamlSecurityToken GetSecurityTicket(
            byte platformType, string deviceId, uint clientVersion, uint titleId, uint titleVersion, ulong passportPuid0, ulong passportCId0, DateTime notAfterDateTime
        )
        {
            Init();
            
            // Throw exceptions on errors                
            ValidateDeviceId(platformType, deviceId);
            ValidateClientVersion(platformType, clientVersion);   // Must happen after ValidateDeviceId so _machinePuid is valid
            ValidateTitle(titleId, titleVersion, platformType, clientVersion);
            ValidatePassportPuid(passportPuid0);

            // Get additional info required for the ticket
            if (0 != _xuid)
            {
                UserAccountWithAAInfo userAccount = new UserAccountWithAAInfo( (XOn.XPLT_MOBILE == platformType) ? "winmo" : "xna" );
                //_userAuthInfo = userAccount.GetUserAuthorization( (int)xonline.server.billing.useraccount.soap.ServiceTypeEnum.XboxLive, titleId );
                _userAuthInfo = userAccount.UserAccountAuthorize( (int)xonline.server.billing.useraccount.soap.ServiceTypeEnum.XboxLive, titleId );

                if ( HResult.S_OK == _userAuthInfo.ErrorInfo.HResult )
                {
                    _tokenType = TokenType.User;
                    WMMachinesDB.GetUserTier( _xuid, out _tierId );
                }
                else
                {
                    if (  HResult.XONLINE_E_ACCOUNTS_COUNTRY_NOT_AUTHORIZED         == _userAuthInfo.ErrorInfo.HResult
                       || HResult.XONLINE_E_ACCOUNTS_SERVICE_NOT_PROVISIONED        == _userAuthInfo.ErrorInfo.HResult
                       || HResult.XONLINE_E_ACCOUNTS_TAG_CHANGE_REQUIRED            == _userAuthInfo.ErrorInfo.HResult
                       || HResult.XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED              == _userAuthInfo.ErrorInfo.HResult
                       || HResult.XONLINE_E_ACCOUNTS_TERMS_OF_SERVICE_NOT_ACCEPTED  == _userAuthInfo.ErrorInfo.HResult
                       )
                    {   // For "normal" errors let's not spam the NT Event log
                        throw new XRLExceptionWithoutEvent(_userAuthInfo.ErrorInfo.HResult, _userAuthInfo.ErrorInfo.Message);
                    }
                    else
                    {
                        throw new XRLException(_userAuthInfo.ErrorInfo.HResult, XEvent.Id.STS_GETSECURITYTICKET_ERROR, _userAuthInfo.ErrorInfo.Message);
                    }
                }
            }
            else
            {
                if ( XOn.XPLT_MOBILE != platformType )
                   throw new XRLException(HResult.XONLINE_E_LOGON_INVALID_USER, XEvent.Id.STS_GETSECURITYTICKET_ERROR, "Invalid user, can't generate user ticket: {0}", passportPuid0);
            }
                

            // Create SAML attribute statement 
            SamlAttributeStatement samlAttributeStatement = new SamlAttributeStatement(); 

            // Create SAML subject 
            GenerateSamlSubject( samlAttributeStatement, (TokenType.User == _tokenType) ? XblSamlToken.subject_name_user : XblSamlToken.subject_name_machine );
            
            // SAML attributes
            // Machine Claims
            GenerateMachineClaims(samlAttributeStatement, platformType, deviceId, clientVersion, titleId, titleVersion, passportPuid0, passportCId0);

            // User Claims
            if (TokenType.User == _tokenType)
                GenerateUserClaims(samlAttributeStatement);

            // Calculate the maximum Not After Date Time
            DateTime notAfterMax = DateTime.UtcNow.AddSeconds( (TokenType.User == _tokenType)?_user_expiration_seconds:_machine_expiration_seconds);

            if ( notAfterMax < notAfterDateTime )
                notAfterDateTime = notAfterMax;
            
            
            return GenerateSAMLToken( samlAttributeStatement, _token_issuer_name, notAfterDateTime, true);
        }

        // -------------------------------------------------------------------------------
        // GetXStsToken
        //
        // Get the token from the "new hotness" aka XSts
        // -------------------------------------------------------------------------------
        public SecurityToken GetXStsToken(string audience)
        {
            if (string.IsNullOrEmpty(audience)) return null;

            Init();

            SecurityToken token = null;

            if (_appliesTos.TryGetValue(new Uri(audience), out _appliesTo))
            {
                try
                {
                    XRequestSecurityToken rst = new XRequestSecurityToken(audience, new ClaimsPrincipal(GenerateClaimsIdentity()));

                    token = rst.Issue(out _rstr);
                    if (null == token)
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STS_XSTSTOKEN_NULL, "GetXStsToken returned NULL token");
                    }
                }
                catch (Exception e)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_STS_GETXSTSTOKEN_ERROR, e, "GetXStsToken caught exception");
                }
            }

            return token;
        }

        // WinPhone7 parser looks for some specific stuff in the <GetPartnerSecurityTicketResult>.
        // More specifically it must be in the first assertion node in the result xml
        //
        // The following seems to be the minimum xml that will successfully pass the WP7 parser.
        //   <saml:Assertion xmlns:saml="urn:oasis:names:tc:SAML:1.0:assertion">
        //     <saml:Conditions NotBefore="2011-08-12T17:04:28.120Z" NotOnOrAfter="2011-08-12T21:04:28.120Z"></saml:Conditions>
        // </saml:Assertion>
        public string GetXStsTokenPrefix()
        {
            if (AuthDeviceTypes.WindowsPhone7 == _deviceType)
            {
                return string.Format(
                    "<saml:Assertion xmlns:saml=\"urn:oasis:names:tc:SAML:1.0:assertion\">" +
                        "<saml:Conditions NotBefore=\"{0}\" NotOnOrAfter=\"{1}\" >" +
                        "</saml:Conditions>" +  // The WP7 parser needs the closing </saml:Conditions>
                    "</saml:Assertion>",
                    // DateTime formatting duplicated from System.IdentityModel.Tokens.SamlConditions.WriteXml
                    ((DateTime)_rstr.Lifetime.Created).ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.DateTimeFormatInfo.InvariantInfo),
                    ((DateTime)_rstr.Lifetime.Expires).ToString("yyyy-MM-ddTHH:mm:ss.fffZ", System.Globalization.DateTimeFormatInfo.InvariantInfo)
                );
            }

            return null;
        }

        // -------------------------------------------------------------------------------
        // Implementation private
        // -------------------------------------------------------------------------------

        // Static methods

        // -------------------------------------------------------------------------------
        // Init
        //
        // Initilalize settings.
        // -------------------------------------------------------------------------------
        static private void Init()
        {
            if ( _isInitialized )
                return;

            lock( _cs )
            {
                if ( _isInitialized )
                    return;

                Load();                
                _isInitialized = true;
            }
        }

        // Private methods
        
        // -------------------------------------------------------------------------------
        // GetCertificate
        //
        // Used for SAML Token signing
        // -------------------------------------------------------------------------------
        static private X509Certificate2 GetCertificate()
        {
            X509Certificate2 certificate = _certificate;
            
            return certificate;
        }
        
        // -------------------------------------------------------------------------------
        // CreateSigningCredentials
        //
        // Used for SAML Token signing
        // -------------------------------------------------------------------------------
        private static SigningCredentials CreateSigningCredentials( 
            bool useThumbprint )
        {
//              return new SigningCredentials(
//                new X509AsymmetricSecurityKey(GetCertificate(), SecurityAlgorithms.RsaSha256Signature, SecurityAlgorithms.Sha256Digest, new SecurityKeyIdentifier(
//                    new X509RawDataKeyIdentifierClause( GetCertificate() ))); 
//            return new SigningCredentials(
//                new X509AsymmetricSecurityKey(GetCertificate()), SecurityAlgorithms.RsaSha256Signature, SecurityAlgorithms.Sha256Digest); 

          // Create certificate from file. It must contain private key! 
          X509Certificate2 cert = GetCertificate(); 

          // The private key contained in the certificate will be used to sign the token.
          X509AsymmetricSecurityKey signingKey = new X509AsymmetricSecurityKey(cert); 

          /*
          // 
          // Signing credentials are consisted 
          // of private key in the certificate (see above), 
          // the signature algorithm, security algortihm and key identifier. 
          /*if ( useThumbprint )
          {
              return new SigningCredentials(
                signingKey, SecurityAlgorithms.RsaSha1Signature, SecurityAlgorithms.Sha1Digest, new SecurityKeyIdentifier(
                    new X509ThumbprintKeyIdentifierClause( cert ))); 
          }
          else */
          {
              return new SigningCredentials(
                signingKey, SecurityAlgorithms.RsaSha1Signature, SecurityAlgorithms.Sha1Digest, new SecurityKeyIdentifier(
                    new X509RawDataKeyIdentifierClause( cert ))); 
          }
        }

        // Implementation private

        // -------------------------------------------------------------------------------
        // GenerateClaimsIdentity
        //
        // Create claims we are willing to pass along to XSts
        // -------------------------------------------------------------------------------

        private IEnumerable<IClaimsIdentity> GenerateClaimsIdentity()
        {
            AAInfo aaInfo = AAInfoMiddleTier.Current;
            List<IClaimsIdentity> identities = new List<IClaimsIdentity>();
            XblSamlToken authToken = aaInfo.XblSamlToken;

            ClaimsIdentity identity = new ClaimsIdentity(
                "aainfoall",
                AuthClaimTypes.Puid,
                null);
            identities.Add(identity);

            /// <summary>the unique session identifier</summary>
            identity.Claims.Add(new Claim(AuthClaimTypes.FlowToken,
                aaInfo.FlowToken.FlowToken.ToString("X"),
                AuthClaimTypes.ValueTypes[AuthClaimTypes.FlowToken]));

            /// <summary>the unique identifier for the device</summary>
            ulong deviceId = ulong.Parse(authToken.GetAttributeValue(XblSamlToken.name_attribute_machineid));
            identity.Claims.Add(new Claim(AuthClaimTypes.DeviceId,
                deviceId.ToString("X"),
                AuthClaimTypes.ValueTypes[AuthClaimTypes.DeviceId]));

            /// <summary>the device type</summary>
            byte platformType = byte.Parse(authToken.GetAttributeValue(XblSamlToken.name_attribute_platformtype));

            if ( XOn.XPLT_MOBILE == platformType )
            {
                _deviceType = AuthDeviceTypes.WindowsPhone7;
            }
            else if ( XOn.XPLT_WEB_GAMES == platformType )
            {
                _deviceType = AuthDeviceTypes.Web;
            }

            if (!string.IsNullOrEmpty(_deviceType))
            {
                identity.Claims.Add(new Claim(AuthClaimTypes.DeviceType,
                    _deviceType,
                    AuthClaimTypes.ValueTypes[AuthClaimTypes.DeviceType]));
            }

            /// <summary>the title id</summary>
            uint titleId = uint.Parse(authToken.GetAttributeValue(XblSamlToken.name_attribute_titleid), System.Globalization.NumberStyles.AllowHexSpecifier);
            identity.Claims.Add(new Claim(AuthClaimTypes.TitleId,
                titleId.ToString(),
                AuthClaimTypes.ValueTypes[AuthClaimTypes.TitleId]));

            /// <summary>the title version</summary>
            uint titleVersion = uint.Parse(authToken.GetAttributeValue(XblSamlToken.name_attribute_titleversion));
            identity.Claims.Add(new Claim(AuthClaimTypes.TitleVersion,
                titleVersion.ToString(),
                AuthClaimTypes.ValueTypes[AuthClaimTypes.TitleVersion]));

            /// <summary>the xuid of the user</summary>
            ulong xuid = ulong.Parse(authToken.GetAttributeValue(XblSamlToken.name_attribute_xuid0));
            identity.Claims.Add(new Claim(AuthClaimTypes.Xuid,
                xuid.ToString(),
                AuthClaimTypes.ValueTypes[AuthClaimTypes.Xuid]));

            /// <summary>the passport user id (puid) of the user</summary>
            ulong passportPuid = ulong.Parse(authToken.GetAttributeValue(XblSamlToken.name_attribute_puid0));
            identity.Claims.Add(new Claim(AuthClaimTypes.Puid,
                passportPuid.ToString(),
                AuthClaimTypes.ValueTypes[AuthClaimTypes.Puid]));

            /// <summary>the client's external ip address and port</summary>
            identity.Claims.Add(new Claim(AuthClaimTypes.ClientIpPort,
                aaInfo.IpAddressInternet,
                AuthClaimTypes.ValueTypes[AuthClaimTypes.ClientIpPort]));

            // XSts can derive the rest from the puid/xuid:
            /// <summary>the country id of the user</summary>
            /// <summary>the gamertag of the user</summary>
            /// <summary>the xbox live subscription tier of the user</summary>
            /// <summary>the privileges granted to the user (a comma separated list)</summary>
            /// <summary>the user's language</summary>
            /// <summary>the user status</summary>

            return identities;
        }

        // -------------------------------------------------------------------------------
        // GenerateMachineClaims
        //
        // Add all Claims we are willing to vouch for to the Saml Statement
        // -------------------------------------------------------------------------------
        private void GenerateMachineClaims(
            SamlAttributeStatement samlAttributeStatement, 
            byte platformType, string deviceId, uint clientVersion, uint titleId, uint titleVersion, ulong passportPuid0, ulong passportCId0
        )
        {
            // PlatformType 
            SamlAttribute samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_platformtype;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(platformType.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // MachinePuid will be 0 for platformType == XOn.XPLT_WEB_GAMES
            if (0 != _machinePuid)
            {
                // MachineID
                samlAttribute = new SamlAttribute(); 
                samlAttribute.Name = XblSamlToken.name_attribute_machineid;
                samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
                samlAttribute.AttributeValues.Add(_machinePuid.ToString());

                samlAttributeStatement.Attributes.Add( samlAttribute ); 
            }
            
            // DeviceID will be 0 for platformType == XOn.XPLT_WEB_GAMES
            if (!string.IsNullOrEmpty(deviceId))
            {
                samlAttribute = new SamlAttribute(); 
                samlAttribute.Name = XblSamlToken.name_attribute_deviceid;
                samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
                samlAttribute.AttributeValues.Add(deviceId);

                samlAttributeStatement.Attributes.Add( samlAttribute );
            }

            // ClientVersion
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_clientversion;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(clientVersion.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // TitleID
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_titleid;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(titleId.ToString("X8"));

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // TitleVersion
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_titleversion;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(titleVersion.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // Puid0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_puid0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(passportPuid0.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // CId0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_cid0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(passportCId0.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

        }

        // -------------------------------------------------------------------------------
        // GeneratePartnerClaims
        //
        // Add the limited Claims we are willing to vouch for to the Saml Statement
        // -------------------------------------------------------------------------------
        private void GeneratePartnerClaims(
            SamlAttributeStatement samlAttributeStatement,
            uint titleId, uint titleVersion, ulong partnerId0
        )
        {
            // TitleID
            SamlAttribute samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_titleid;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(titleId.ToString("X8"));

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // TitleVersion
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_titleversion;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(titleVersion.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // PartnerID0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_partnerid0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(partnerId0.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 
            
            // Gamertag0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_gamertag0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(_gamerTag);

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

        }
        
        // -------------------------------------------------------------------------------
        // GenerateSamlSubject
        //
        // Add a subject to the Saml Statement
        // -------------------------------------------------------------------------------
        private void GenerateSamlSubject(
            SamlAttributeStatement samlAttributeStatement, 
            string name
            )
        {
            samlAttributeStatement.SamlSubject = new SamlSubject( "/xboxlive/nameFormat", "Microsoft-NameQualifier-domain", name );
        }
            
        // -------------------------------------------------------------------------------
        // GenerateSAMLToken
        //
        // Wrap the provided AttributeStatement (claims) in a SamlSecurityToken with the 
        // perscribed expiration.
        // -------------------------------------------------------------------------------
        private SamlSecurityToken GenerateSAMLToken( 
            SamlAttributeStatement samlAttributeStatement,
            string audience,
            DateTime notAfterDateTime,
            bool useThumbprint 
        )
        {
            DateTime notBeforeDateTime = DateTime.UtcNow;

            if ( notBeforeDateTime > notAfterDateTime )
                throw new XRLException(HResult.XONLINE_E_STS_INVALID_ARGUMENT, XEvent.Id.STS_FD_ERROR, "Not After date has expired: {0} Now: {1}", notAfterDateTime, notBeforeDateTime);
            
            string assertionID = string.Format("SamlSecurityToken-{0}", Guid.NewGuid().ToString());

            // Create the SAML statement Enumerable with one statement. 
            List<SamlStatement> samlStatements = new List<SamlStatement>();
            samlStatements.Add( samlAttributeStatement );
            
            // Create the SAML Conditions and SAML assertion 
            SamlConditions samlConditions = new SamlConditions(
                notBeforeDateTime, notAfterDateTime );
            // Audience Condition
            Uri uriAudience = new Uri( audience );
            SamlAudienceRestrictionCondition samlAudienceRestriction = new SamlAudienceRestrictionCondition();
            samlAudienceRestriction.Audiences.Add( uriAudience );
            samlConditions.Conditions.Add( samlAudienceRestriction );
            // Wrap it up in an assertion
            SamlAssertion samlAssertion = new SamlAssertion( 
                assertionID, _token_issuer_name, notBeforeDateTime, samlConditions, null, samlStatements );

            samlAssertion.SigningCredentials = CreateSigningCredentials(useThumbprint);
            
            // Create the SAML Token 
            SamlSecurityToken samlToken = new SamlSecurityToken( samlAssertion );

            return samlToken;            
        }
        
        // -------------------------------------------------------------------------------
        // GenerateUserClaims
        //
        // Add all Claims we are willing to vouch for to the Saml Statement
        // -------------------------------------------------------------------------------
        private void GenerateUserClaims(
            SamlAttributeStatement samlAttributeStatement
        )
        {
            // Xuid0
            SamlAttribute samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_xuid0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(_xuid.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // Gamertag0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_gamertag0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(_gamerTag);

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // Tier0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_tier0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(_tierId.ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // Country0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_country0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(CountryDictionary.CountryId(_userAuthInfo.AccountInfo.CountryCode).ToString());

            samlAttributeStatement.Attributes.Add( samlAttribute ); 

            // Privileges0
            samlAttribute = new SamlAttribute(); 
            samlAttribute.Name = XblSamlToken.name_attribute_privileges0;
            samlAttribute.Namespace = XblSamlToken.ns_attribute_claims;
            samlAttribute.AttributeValues.Add(Privileges);

            samlAttributeStatement.Attributes.Add( samlAttribute ); 
        }


        // -------------------------------------------------------------------------------
        // ValidateClientVersion
        //
        // Intentionally empty for now
        // -------------------------------------------------------------------------------
        private void ValidateClientVersion(
            byte platformType, uint clientVersion
        )
        {
            if (XOn.XPLT_MOBILE == platformType)
            {
                KdcServiceRequest request = new KdcServiceRequest ();
                request.ClientVersion = clientVersion;
                XkdcSetMachineFlashVersionImpl.XkdcSetMachineFlashVersion( _machinePuid, string.Format( "{0:00}.{1:00}.{2:00000}.{3:000}", request.clientVersion.wMajorVersion, request.clientVersion.wMinorVersion, request.clientVersion.wBuildNumber, request.clientVersion.wQFENumber ));
            }
        }

        // -------------------------------------------------------------------------------
        // ValidateDeviceId
        //
        // kdc like machine verify and account creation.  Adapted from MachineBan.
        // -------------------------------------------------------------------------------
        private void ValidateDeviceId(
            byte platformType, string deviceId
        )
        {
            if (XOn.XPLT_MOBILE == platformType)
            {
                _machinePuid = WMMachinesDB.GetMachinePuid( deviceId );

                if ( 0 == _machinePuid )
                {   // create machine account
                    _machinePuid = WMMachinesDB.CreateMachineAccount( deviceId );
                }
            }
        }

        // -------------------------------------------------------------------------------
        // ValidateTitle
        //
        // "Managed KDC" title validation.
        // -------------------------------------------------------------------------------
        private void ValidateTitle(
            uint titleId, uint titleVersion, byte platformType, uint clientVersion
        )
        {
            // The ServiceRequest should contain the values we are checking
            KdcServiceRequest request = new KdcServiceRequest();
            request.ClientVersion = clientVersion;
            request.titleId = titleId;
            request.titleVersion = titleVersion;
            request.wAutoDiscoverServices = 0;
                
            // The PolicyData should contain the results of the check
            // There is a lot of logic around using Cached results in the kdc, omitting that for now :(
            KdcPolicyData policyData = new KdcPolicyData();
            policyData.ClientVersion = request.ClientVersion;
            policyData.platformType = (uint) platformType;
            policyData.machinePuid = _machinePuid;
                
            _theKdc.PolicyCheck( request, policyData );

            if ( HResult.Failed( policyData.machineAuthorization.BlockStatusCode) )
                throw new XRLExceptionWithoutEvent(policyData.machineAuthorization.BlockStatusCode, "Machine Blocked: {0}", _machinePuid);
        }

        // -------------------------------------------------------------------------------
        // ValidatePassportPuid
        //
        // kdc like user validation.  Depends on XCache which can be stale for accounts
        // just created.  Retrying ~30 seconds after account creation is often required.
        // -------------------------------------------------------------------------------
        private void ValidatePassportPuid(
            ulong passportPuid
        )
        {
           // Get XUID and Gamertag
            XCacheUserResponseData xcurd = XCache.LookupUserByPassport(passportPuid);

            if (0 == xcurd.qwUserID || XCache.InvalidGamertag == xcurd.szGamertag )
            {
                WMMachinesDB.GetUserPuidGamerTag(passportPuid, out _xuid, out _gamerTag);
            }
            else
            {
                _xuid = xcurd.qwUserID;
                _gamerTag = xcurd.szGamertag;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\StsHealthBlock.cs ===
//
// StsHealthBlock.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections.Specialized;

using xonline.common.health;

namespace xonline.server.sts.fd
{

    public class StsHealthBlock : IHealthBlock
    {
        public StsHealthBlock()
        {
            // leave this empty
        }

        public ResourceTypeEnum ResourceType 
        { 
            get { return ResourceTypeEnum.Local; } 
        }

        public void DoCheck(HealthBlockManager blockManager, NameValueCollection blockParams, HealthReport report)
        {
            GetSecurityToken.Test(report);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\stringsvr\test\StringServTest\VetStringTest_Neg.cs ===
using System;
using System.Text;
using System.IO;
using System.Net;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.StringServer;
using System.Xml;
using System.Threading;

namespace StringServTest
{
    [TestGroup, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
	public class M2_Vet_string_Neg_Cases : TestNode
	{
        [TestCase, Description("M2 - Vet Strings - Single"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
		class Vet_String_Single : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				
				XRLVet2String vetrequest = new XRLVet2String ();
				XRLVetResponse vetresponse = new XRLVetResponse();
				vetrequest.dwTitleID = 0xFFFE0000;
				vetrequest.wLocaleLen = 5;
				vetrequest.wNumStrings = 1;
				vetrequest.szLocale = "en-US";
				
				vetrequest.rgStringData = new StringData[1];
			        vetrequest.rgStringData[0] = new StringData();
            			vetrequest.rgStringData[0].szString = "bullshit";
					
				if (!vetrequest.Execute(out vetresponse)) 
				{
					//DEBUG
					throw new UnexpectedTestResultException( vetrequest.GetDumpString() );
					
				}

				ValueCheck.Test("String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[0]);
				
				ResultCode=TEST_RESULTS.PASSED;		
			}
		}
	
        // This workaround has been removed so the testcase is
        // modified to fail string vetting even when titleId is Halo 3.
        [TestCase, Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
		class Vet_String_Single_Halo3_Workaround : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				
				XRLVet2String vetrequest = new XRLVet2String ();
				XRLVetResponse vetresponse = new XRLVetResponse();
				vetrequest.dwTitleID = 0x4D5307E6;
				vetrequest.wLocaleLen = 5;
				vetrequest.wNumStrings = 1;
				vetrequest.szLocale = "en-US";
				
				vetrequest.rgStringData = new StringData[1];
			        vetrequest.rgStringData[0] = new StringData();
            			vetrequest.rgStringData[0].szString = "bullshit";
					
				if (!vetrequest.Execute(out vetresponse)) 
				{
					//DEBUG
					throw new UnexpectedTestResultException( vetrequest.GetDumpString() );
					
				}

				ValueCheck.Test("String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[0]);
				
				ResultCode=TEST_RESULTS.PASSED;		
			}
		}

        [TestCase, Owner("emzephir"), TestFrequency("DoNotRun"), EnvRequirement("DoNotRun"), TestCasePriority(1)]
		class Vet_String_ExactMatch_removed : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
                // This test case does not appear to do anything useful and currently fails.
                // This test doesn't provide enough context to figure out what it is supposed to test
                // or how to fix it. This should be fixed in a future test audit (See X360CS #27353)
                Global.RO.Info("Vet_String_ExactMatch_removed skipped. See X360CS #27353");
                ResultCode = TEST_RESULTS.NOT_EXECUTED;

                //XRLVet2String vetrequest = new XRLVet2String ();
                //XRLVetResponse vetresponse = new XRLVetResponse();
                //vetrequest.dwTitleID = 0xFFFE0000;
                //vetrequest.wLocaleLen = 5;
                //vetrequest.wNumStrings = 1;
                //vetrequest.szLocale = "en-US";
				
                //vetrequest.rgStringData = new StringData[1];
                //    vetrequest.rgStringData[0] = new StringData();
                //        vetrequest.rgStringData[0].szString = "activeagent";
					
                //if (!vetrequest.Execute(out vetresponse)) 
                //{
                //    //DEBUG
                //    throw new UnexpectedTestResultException( vetrequest.GetDumpString() );
					
                //}

                //ValueCheck.Test("String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[0]);	
				
                //ResultCode=TEST_RESULTS.PASSED;		
			}
		}



        [TestCase, Description("M2 - Vet Strings - Multiple"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
		class Vet_String_Multiple_One_Bad : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				
				XRLVet2String vetrequest = new XRLVet2String ();
				XRLVetResponse vetresponse = new XRLVetResponse();
				vetrequest.dwTitleID = 0xFFFE0000;
				vetrequest.wLocaleLen = 5;
				vetrequest.wNumStrings = 4;
				vetrequest.szLocale = "en-US";

				vetrequest.rgStringData = new StringData[vetrequest.wNumStrings];
			        vetrequest.rgStringData[0] = new StringData();
            			vetrequest.rgStringData[0].szString = "this is a string?";
			        vetrequest.rgStringData[1] = new StringData();
            			vetrequest.rgStringData[1].szString = "is it really a string";
			        vetrequest.rgStringData[2] = new StringData();
            			vetrequest.rgStringData[2].szString = "looks like a string";
			        vetrequest.rgStringData[3] = new StringData();
            			vetrequest.rgStringData[3].szString = "reads like a string, no shit";
					
				if (!vetrequest.Execute(out vetresponse)) 
				{
					//DEBUG
					throw new UnexpectedTestResultException( vetrequest.GetDumpString() );
					
				}

				ValueCheck.Test("First String HR", HResult.S_OK, vetresponse.rghrString[0]);
				ValueCheck.Test("Second String HR", HResult.S_OK, vetresponse.rghrString[1]);
				ValueCheck.Test("Third String HR", HResult.S_OK, vetresponse.rghrString[2]);
				ValueCheck.Test("Fourth String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[3]);
				ResultCode=TEST_RESULTS.PASSED;
				
			}
		}
        
        [TestCase, Description("M2 - Vet Strings - Multiple"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
		class Vet_String_Multiple_Many_Bad : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				
				XRLVet2String vetrequest = new XRLVet2String ();
				XRLVetResponse vetresponse = new XRLVetResponse();
				vetrequest.dwTitleID = 0xFFFE0000;
				vetrequest.wLocaleLen = 5;
				vetrequest.wNumStrings = 4;
				vetrequest.szLocale = "en-US";

				vetrequest.rgStringData = new StringData[vetrequest.wNumStrings];
			        vetrequest.rgStringData[0] = new StringData();
            			vetrequest.rgStringData[0].szString = "this is a string?, fuck";
			        vetrequest.rgStringData[1] = new StringData();
            			vetrequest.rgStringData[1].szString = "is it really a string, shit";
			        vetrequest.rgStringData[2] = new StringData();
            			vetrequest.rgStringData[2].szString = "looks like a string, crap";
			        vetrequest.rgStringData[3] = new StringData();
            			vetrequest.rgStringData[3].szString = "reads like a string";
					
				if (!vetrequest.Execute(out vetresponse)) 
				{
					//DEBUG
					throw new UnexpectedTestResultException( vetrequest.GetDumpString() );
					
				}

				ValueCheck.Test("First String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[0]);
				ValueCheck.Test("Second String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[1]);
				ValueCheck.Test("Third String HR", HResult.XONLINE_E_STRING_OFFENSIVE_TEXT, vetresponse.rghrString[2]);
				ValueCheck.Test("Fourth String HR", HResult.S_OK, vetresponse.rghrString[3]);
				ResultCode=TEST_RESULTS.PASSED;
			}
		}

        [TestCase, Description("M2 - Vet Strings - Single"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
			class Vet_TooLargePacket : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				
				XRLVet2String_TooLarge vetrequest = new XRLVet2String_TooLarge ();
				XRLVetResponse vetresponse = new XRLVetResponse();
				vetrequest.dwTitleID = 0xFFFE0000;
				vetrequest.wLocaleLen = 5;
				vetrequest.wNumStrings = 1;
				vetrequest.szLocale = "en-US";
				
				vetrequest.rgStringData = new StringData[2];
				vetrequest.rgStringData[0] = new StringData();
				vetrequest.rgStringData[0].szString = "bs";
				vetrequest.rgStringData[1] = new StringData();
				vetrequest.rgStringData[1].szString = "bs2";
					
				if (!vetrequest.Execute(out vetresponse)) 
				{
					//DEBUG
					throw new UnexpectedTestResultException( vetrequest.GetDumpString() );
					
				}

				Verify(vetresponse);
				
				ResultCode=TEST_RESULTS.PASSED;		
			}
		}

        [TestCase, Description("M2 - Vet Strings - Single"), Owner("emzephir"), TestFrequency("Regression"), EnvRequirement(""), TestCasePriority(1)]
			class Vet_TooSmallPacket : PutGetVetStringTestBase
		{
			override protected void Execute()
			{
				
				XRLVet2String_TooSmall vetrequest = new XRLVet2String_TooSmall ();
				XRLVetResponse vetresponse = new XRLVetResponse();
				vetrequest.dwTitleID = 0xFFFE0000;
				vetrequest.wLocaleLen = 5;
				//vetrequest.wNumStrings = 3;
				vetrequest.szLocale = "en-US";
				
				vetrequest.rgStringData = new StringData[2];
				vetrequest.rgStringData[0] = new StringData();
				vetrequest.rgStringData[0].szString = "bs";
				vetrequest.rgStringData[1] = new StringData();
				vetrequest.rgStringData[1].szString = "bs2";
					
				if (vetrequest.Execute(out vetresponse)) 
				{
					//DEBUG
					throw new UnexpectedTestResultException( "Test case unexpectedly passed, expected XErr: XONLINE_E_END_OF_STREAM" );
					
				}

				ValueCheck.Test("XErr", HResult.XONLINE_E_END_OF_STREAM, vetrequest.XErr);
				
				ResultCode=TEST_RESULTS.PASSED;		
			}
		}

	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\StsFrontEndApp.cs ===
﻿using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Net;
using System.ServiceProcess;
using System.Web;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;

using xonline.common.config;
using xonline.common.utilities;
using xonline.common.feapp;
using xonline.common.health;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.user;
using xonline.common.rating;
using xonline.common.installer;
using xonline.common.msnrr;
using xonline.server.sts.fd;

[assembly: XomIisInstallerAttribute( Interface.sts )]
[assembly: XomIisInstallerAttribute( Interface.sts_int )]
[assembly: ConfigAttribute("sts")]


namespace xonline.server.sts.fd
{    
    public class StsFrontEndApp : FrontEndApp
    {
    
        public StsFrontEndApp() : base()
        {
        }
        
        protected override void OnApplicationStart()
        {
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler( OnControlRequest2 );
            GetSecurityToken.StaticInit();
        }

        /// Event handler for the Xmgmt control request event
        public void OnControlRequest2( object sender, ControlRequestEventArgs args )
        {
            try 
            {
                switch(args.Command)
                {
                    case "help":
                        XomControlConnection.SendMessage("Sts help:\r\n  reload             -- reloads sts settings and keys\r\n\r\n", args.RequestId);
                        args.Handled = true;
                        break;

                    case "reload":
                        GetSecurityToken.Load();
                        SecurityTicketImpl.Load();
                        XomControlConnection.SendMessage("Sts settings, title info, and keys have been reloaded\r\n", args.RequestId);
                        args.Handled = true;
                        break;
                }
            }
            catch (Exception e) 
            {
                HResult hr = XRLException.ToHResult(e, HResult.XONLINE_E_STS_ERROR);
                XomControlConnection.SendMessage(
                    string.Format("Error: {0}, hr = {1}\r\n\r\n", e.ToString(), hr),
                    args.RequestId
                );
            }
        }

    
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\StsPerformanceCounters.cs ===
﻿using System;
using System.Threading;
using System.Diagnostics;
using xonline.common.service;
using xonline.common.mgmt;


namespace xonline.server.sts.fd
{

    [XomPerformanceCounterCategoryAttr(
         "Xbox STS FrontDoor",
         "Xbox Live: STS FrontDoor performance counters")]

    public class StsPerformanceCounters : XomPerformanceCounterCategory
    {
        [XomPerformanceCounterAttr(
             "GetSecurityToken calls per second",
             "Number of operations executed per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter GetSecurityTokenRequestsPerSecond;

        [XomPerformanceCounterAttr(
             "GetSecurityToken calls total",
             "Total requests recorded in the the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter GetSecurityTokenRequestsTotal;

        [XomPerformanceCounterAttr(
            "GetSecurityToken calls failed per second",
            "Number of failed operations executed per second",
            PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter GetSecurityTokenRequestsFailedPerSecond;

        [XomPerformanceCounterAttr(
            "GetSecurityToken calls failed total",
            "Total failed requests recorded in the the current AppDomain.",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter GetSecurityTokenRequestsFailedTotal;

        static public StsPerformanceCounters Counters = new StsPerformanceCounters();
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\WMMachinesdb.cs ===
//
// Machinesdb.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections;
using System.Data;
using System.Data.SqlClient;
using System.IO;
using System.Text;
using System.Transactions;
using System.Web;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;

[assembly: XomAreaDefinition(XomAreaName.sts)]
    
namespace xonline.server.sts.fd
{
    internal class WMMachinesDB
    {
        private const string MOBILE_PREFIX = "WM.";

        // -------------------------------------------------------------------------------
        // Implementation public
        // -------------------------------------------------------------------------------

        public static ulong CreateMachineAccount( string deviceId )
        {
            ulong machinePuid       = WMMachinesDB.GetPuid();

            using (TransactionScope ts = new TransactionScope())
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    // insert the machine into t_machines
                    ws.ClearParameters();
                    ws.StoredProc = "dbo.p_xmacs_insertmachine";
                    ws.SetHashVal(machinePuid);

                    ws.AddParameter("@serialnum", MOBILE_PREFIX + machinePuid.ToString("X16").Substring(4));
                    ws.AddParameter("@machinepuid", machinePuid);
                    ws.AddParameter("@si_hash_bucket", ws.Partition);

                    ws.ExecuteNonQuery();

                    // insert the machine into t_wm_machines
                    ws.ClearParameters();
                    ws.StoredProc = "dbo.p_wm_insert_machine";
                    ws.SetHashVal(deviceId);

                    ws.AddParameter("@vc_WMDevice_id", deviceId);
                    ws.AddParameter("@bi_machine_puid", machinePuid);
                    ws.AddParameter("@si_hash_bucket", ws.Partition);

                    ws.ExecuteNonQuery();
                }
                ts.Complete();
            }
            
            return machinePuid;
        }
        
        public static ulong GetMachinePuid( string deviceId )
        {
            ulong machinePuid       = 0;
            WstConnection   conn    = null;
            WstCommand      cmd     = null;
            WstDataReader   dataset = null;

            try
            {
                conn = new WstConnection(ConfigUtil.UodbWebstoreApp);
                conn.Open();

                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_wm_get_machines";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;
                cmd.PartitionType   = WstPartitionType.Logical;
                cmd.Partition       = WSClient.GetHashPartition( deviceId, ConfigUtil.UodbWebstoreApp);
                cmd.Parameters.Add("@vc_WMDevice_id", SqlDbType.NVarChar, 128).Value = deviceId;

                dataset = cmd.ExecuteReader();

                if (dataset.Read())
                {
                    machinePuid = (ulong) dataset.GetInt64(0);
                }
            }
            finally
            {
                if (null!=dataset)
                    dataset.Close();
                if (null!=conn)
                    conn.Close();
            }

            return machinePuid;
        }


        public static void GetUserPuidGamerTag(
            ulong passportPuid, out ulong xuid, out string gamerTag
        )
        {
            xuid = 0;
            gamerTag = string.Empty;
            // No dice with XCache. Go straight to UODB
            // Code stolen from \private\common\user\User.cs
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_xuacs_get_user_by_passport";
                ws.SetHashVal(passportPuid);

                ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                ws.AddParameter(ParamType.INPUT,  "@bi_user_passport_puid", passportPuid);
                ws.AddParameter(ParamType.OUTPUT, "@bi_user_puid", (ulong)xuid);

                ws.ExecuteNonQuery();

                uint hr = (uint)ws.GetIntParameter("@RETVAL");
                if (HResult.Succeeded(hr))
                {
                    xuid = (ulong)ws.GetLongParameter("@bi_user_puid");
                }
            }
            if (0 != xuid)
            {
                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
                {
                    byte value1 = 0;
                    byte value2 = 0;
                    
                    ws.StoredProc = "dbo.p_xuacs_load_user";
                    ws.SetHashVal(xuid);

                    ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                    ws.AddParameter(ParamType.INPUT, "@bi_user_puid", (ulong)xuid);
                    ws.AddParameter(ParamType.OUTPUT, "@vc_gamertag", gamerTag, 64);
                    ws.AddParameter(ParamType.OUTPUT, "@f_ms_opt_in", value1);
                    ws.AddParameter(ParamType.OUTPUT, "@f_partner_opt_in", value2);

                    ws.ExecuteNonQuery();

                    uint hr = (uint)ws.GetIntParameter("@RETVAL");
                    if (HResult.Succeeded(hr))
                    {
                        gamerTag = ws.GetStringParameter("@vc_gamertag");
                    }
                    else
                    {
                        xuid = 0;
                        gamerTag = string.Empty;
                    }
                }
            }
        }
        
        public static bool GetUserTier( ulong userPuid, out int tierId )
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(userPuid);
                ws.StoredProc = "dbo.p_xuacs_get_user_account_info";
                ws.AddParameter("@bi_user_puid", userPuid);
                ws.AddParameter(ParamType.INPUT, "@ti_backwards_compatibility", (byte) 0);

                using (WstDataReader rdr = ws.Execute())
                {
                    if ( !rdr.Read() )
                    {
                        throw new XRLException(HResult.XONLINE_E_DATABASE_RESULT_ERROR, XEvent.Id.COMMON_CODE_180, "p_xuacs_get_user_account_info failed to return userdata rowset for user: 0x" + userPuid.ToString("x"));
                    }

                    tierId = rdr.GetInt32(rdr.GetOrdinal("i_tier_id"));
                }
            }
            return true;
        }

        public static bool IsTermsOfServiceAcceptedButOutOfDate( ulong userPuid )
        {
            bool isTermsOfServiceAcceptedButOutOfDate = false;
            
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(userPuid);
                ws.StoredProc = "dbo.p_xuacs_get_user_account_info";
                ws.AddParameter("@bi_user_puid", userPuid);

                using (WstDataReader rdr = ws.Execute())
                {
                    if ( !rdr.Read() )
                    {
                        throw new XRLException(HResult.XONLINE_E_DATABASE_RESULT_ERROR, XEvent.Id.COMMON_CODE_180, "p_xuacs_get_user_account_info failed to return userdata rowset for user: 0x" + userPuid.ToString("x"));
                    }

                    if ( rdr.NextResult() )
                    {
                        while ( rdr.Read() && !isTermsOfServiceAcceptedButOutOfDate )
                        {
                            ServiceTypeEnum serviceType = (ServiceTypeEnum) rdr.GetByte(rdr.GetOrdinal("ti_service_type"));

                            isTermsOfServiceAcceptedButOutOfDate = ( ServiceTypeEnum.XboxLive == serviceType );
                        }
                    }
                }
            }
            return isTermsOfServiceAcceptedButOutOfDate;
        }
        
        // -------------------------------------------------------------------------------
        // Implementation private
        // -------------------------------------------------------------------------------

        private static ulong GetPuid()
        {
            int blockSize = 1;
            int bucket = Config.GetIntSetting(Setting.puidmgr_userPuidBucket);

            using (SqlConnection conn = new SqlConnection(ConfigUtil.NpdbConnectionString))
            {
                conn.Open();

                using (SqlCommand cmd = conn.CreateCommand())
                {
                    cmd.CommandText = "dbo.p_puid_get_next_id";
                    cmd.CommandType = CommandType.StoredProcedure;

                    SqlParameter ret = cmd.CreateParameter();
                    ret.Direction = ParameterDirection.ReturnValue;
                    cmd.Parameters.Add(ret);

                    cmd.Parameters.Add("@i_bucket_id", SqlDbType.Int).Value = bucket;
                    cmd.Parameters.Add("@i_req_block_size", SqlDbType.Int).Value = blockSize;
                    cmd.Parameters.Add("@bi_base", SqlDbType.BigInt).Value = unchecked((long)XOn.XboxId.MobileMachineBase);

                    SqlParameter puidParam = cmd.CreateParameter();
                    puidParam.Direction = ParameterDirection.Output;
                    puidParam.DbType = DbType.Int64;
                    puidParam.ParameterName = "@bi_next_id";
                    cmd.Parameters.Add(puidParam);

                    cmd.ExecuteNonQuery();

                    int retVal = (int) ret.Value;

                    // log the result information.
                    Xom.Trace(XomAreaName.puidmgr, LogLevel.L_INFO, "PUID acquistion from NPDB returned :  RETVAL:  " + retVal + "\nBucket = " + bucket + "\nBlock Size = " + blockSize );

                    if (retVal == 0)
                    {
                        return (ulong) ((long) puidParam.Value);
                    }
                    else
                    {
                        throw new XRLException( HResult.XONLINE_E_DATABASE_RESULT_ERROR, XEvent.Id.COMMON_CODE_180, "Failed to attain PUID block from NPDB.  Please investigate. RETVAL:  " + retVal );
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\fd\XRequestSecurityToken.cs ===
using System;
using System.IdentityModel.Tokens;
using System.ServiceModel;
using System.ServiceModel.Security;

using Microsoft.IdentityModel.Claims;
using Microsoft.IdentityModel.Protocols.WSTrust;
using Microsoft.IdentityModel.SecurityTokenService;

using Microsoft.XboxLive.Auth.Extensions.ServiceModel;

using xonline.common.config;

namespace xonline.server.sts.fd
{
    public class XRequestSecurityToken
    {

        // Attributes
        string appliesTo;
        ClaimsPrincipal principal;
        WSTrustChannel trustChannel = null;
        WSTrustChannelFactory trustChannelFactory = null;

        // Properties

        // Constructor
        public XRequestSecurityToken(string audience, ClaimsPrincipal principal)
        {
            this.appliesTo = audience;
            this.principal = principal;
            Init();
        }

        // Not publically usable
        private XRequestSecurityToken()
        {
        }

        // Destructor
        ~XRequestSecurityToken()
        {
            Close();
        }

        // Implementation public

        public void Close()
        {
            if (null != this.trustChannel)
            {
                this.trustChannel.Close();
                this.trustChannel = null;
            }
            if (null != this.trustChannelFactory)
            {
                this.trustChannelFactory.Close();
                this.trustChannelFactory = null;
            }
        }

        // -------------------------------------------------------------------------------
        // Issue
        //
        // Get the token from the "new hotness" aka XSts
        // -------------------------------------------------------------------------------
        public SecurityToken Issue()
        {
            RequestSecurityTokenResponse rstr = null;

            return Issue(out rstr);
        }

        // -------------------------------------------------------------------------------
        // Issue
        //
        // Get the token from the "new hotness" aka XSts
        // -------------------------------------------------------------------------------
        public SecurityToken Issue(out RequestSecurityTokenResponse rstr)
        {
            SecurityToken token = null;
            rstr = null;

            try
            {
                RequestSecurityToken rst = new RequestSecurityToken(WSTrust13Constants.RequestTypes.Issue);

                rst.KeyType = KeyTypes.Bearer;
                rst.AppliesTo = new EndpointAddress(this.appliesTo);

                IContextChannel context = this.trustChannel.Channel as IContextChannel;

                using (new OperationContextScope(context))
                {
                    OperationContext.Current.SetXAuthdata(this.principal);
                    token = trustChannel.Issue(rst, out rstr);
                }
            }
            catch (Exception e)
            {
                if (null != trustChannel)
                {
                    this.trustChannel.Abort();
                    this.trustChannel = null;
                }
                if (null != trustChannelFactory)
                {
                    this.trustChannelFactory.Abort();
                    this.trustChannelFactory = null;
                }

                throw e;
            }

            return token;
        }

        // -------------------------------------------------------------------------------
        // Implementation private
        // -------------------------------------------------------------------------------

        protected void Init()
        {
            IVirtualInterfaceInfo viInfo = Config.GetVirtualInterface(VirtualInterface.xsts_int, Config.SiteId);
            string endpoint = viInfo.Protocol + "://" + viInfo.IPAddressString + ":" + viInfo.Port + "/xsts/xsts.svc/IWSTrust13";
            
            this.trustChannelFactory = new WSTrustChannelFactory(new WS2007HttpBinding(SecurityMode.None), new EndpointAddress(endpoint));
            this.trustChannelFactory.TrustVersion = TrustVersion.WSTrust13;

            this.trustChannel = (WSTrustChannel)this.trustChannelFactory.CreateChannel();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\STF\StsPlugin.cs ===
using System;

using ServerTestFramework;

using STFGui.Plugins;

using PropertyDescription = System.ComponentModel.DescriptionAttribute;

namespace StsTest
{
    public class StsPlugin : IPluginPreferences
    {
        protected class StsPreferences : ICloneable
        {
            public StsPreferences ()
            {
                DisableOutput = false;
                DetailedValidationRate = 1f;
                BasicValidationRate = 1f;
            }

            // If you add new fields, need to add them in here
            #region ICloneable Members

            public object Clone ()
            {
                StsPreferences ans = new StsPreferences();

                // copy every value
                ans.DisableOutput = this.DisableOutput;
                ans.DetailedValidationRate = this.DetailedValidationRate;
                ans.BasicValidationRate = this.BasicValidationRate;

                return ans;
            }

            #endregion

            [PropertyDescription("If true, most test generated output will be disabled. Stress automatically sets this to true.")]
            public bool DisableOutput { get; set; }

            [PropertyDescription("The rate at which in depth validation is done on the SecurityTicket responses. Stress automatically lowers this value.")]
            public float DetailedValidationRate { get; set; }

            [PropertyDescription("The rate at which basic validation is done on the SecurityTicket responses. Stress automatically lowers this value.")]
            public float BasicValidationRate { get; set; }
        }

        #region Test Access

        /// <summary>
        /// If true, most test generated output will be disabled. Stress automatically sets this to true.
        /// </summary>
        public static bool DisableOutput 
        {
            get { return _prefObj.DisableOutput; }
            set { _prefObj.DisableOutput = value; }
        }

        /// <summary>
        /// The rate at which in depth validation is done on the SecurityTicket responses. Stress automatically lowers this value.
        /// </summary>
        public static float DetailedValidationRate
        {
            get { return _prefObj.DetailedValidationRate; }
            set { _prefObj.DetailedValidationRate = value; }
        }

        /// <summary>
        /// The rate at which basic validation is done on the SecurityTicket responses. Stress automatically lowers this value.
        /// </summary>
        public static float BasicValidationRate
        {
            get { return _prefObj.BasicValidationRate; }
            set { _prefObj.BasicValidationRate = value; }
        }

        /// <summary>Levels of validation to perform.</summary>
        public enum ValidationLevel
        {
            None = 0,
            Basic = 1,
            Detailed = 2,
        }

        /// <summary>
        /// Determines the validation level that should be done for a response.
        /// </summary>
        /// <returns>The validation level to perform.</returns>
        public static ValidationLevel GetValidationLevel ()
        {
            float detailed = _prefObj.DetailedValidationRate;

            if (detailed >= 1)
            {
                return ValidationLevel.Detailed;
            }

            float basic = _prefObj.BasicValidationRate;

            if (basic >= 1)
            {
                return ValidationLevel.Basic;
            }

            float rand = ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(1f);

            return (rand < detailed ? ValidationLevel.Detailed : (rand < basic ? ValidationLevel.Basic : ValidationLevel.None));
        }

        #endregion

        #region IPluginPreferences Members

        protected static StsPreferences _prefObj = new StsPreferences();

        ICloneable IPluginPreferences.PluginPreferences
        {
            get
            {
                return _prefObj;
            }
            set
            {
                _prefObj = (StsPreferences)value;
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\STF\StfXrlUtil.cs ===
using System;
using System.Net;
using System.IO;
using System.Text;

using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.config;
using xonline.common.diagnostics;
using xonline.common.service;
using xcs = xonline.common.service;

namespace xonline.common.stfutil
{
    public static class PjsStfXrlUtil
    {
        static PjsStfXrlUtil()
        {
            HttpVersion = "1.0";
            AppendSGIPPort = false;
        }

        // append the SGIPPort header to the xrl reqest?
        public static bool AppendSGIPPort;

        public static string HttpVersion
        {
            get;
            set;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            hr = PostXrlRequest(ref slot, service, false, path, null, requestObj, ref responseObj);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            hr = PostXrlRequest(ref slot, service, useInternal, path, null, requestObj, ref responseObj);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            hr = PostXrlRequest(ref slot, service, false, path, reqHeaders, requestObj, ref responseObj);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj, ref XRLObject2 responseObj)
        {
            uint hr;
            byte[] responseData = null;

            hr = PostXrlRequest(ref slot, service, useInternal, path, reqHeaders, requestObj, out responseData);

            if ( responseObj != null && responseData != null && responseData.Length > 0 )
            {
                BinaryReader r = new BinaryReader(new MemoryStream(responseData));
                responseObj.ReadFromRequest(r, (UTF8Encoding)Encoding.UTF8, responseData.Length, null);
            }

            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, XRLObject2 requestObj)
        {
            uint hr;
            byte[] responseData = null;

            hr = PostXrlRequest(ref slot, service, path, requestObj, out responseData);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj)
        {
            uint hr;
            byte[] responseData = null;

            hr = PostXrlRequest(ref slot, service, false, path, reqHeaders, requestObj, out responseData);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, string path, XRLObject2 requestObj, out byte[] responseData)
        {
            uint hr = PostXrlRequest(ref slot, service, false, path, null, requestObj, out responseData);
            return hr;
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, XRLObject2 requestObj, out byte[] responseData)
        {
            WebHeaderCollection webHeaders = new WebHeaderCollection();
            webHeaders.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(requestObj.SchemaVersion));

            return PostXrlRequest(ref slot, service, useInternal, path, webHeaders, requestObj.GetBytes(), out responseData);
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, XRLObject2 requestObj, out byte[] responseData)
        {
            if (reqHeaders == null)
            {
                reqHeaders = new WebHeaderCollection();
            }
            
            if (reqHeaders["X-Schema-Ver"] == null)
            {
                reqHeaders.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(requestObj.SchemaVersion));
            }

            return PostXrlRequest(ref slot, service, useInternal, path, reqHeaders, requestObj.GetBytes(), out responseData);
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, byte[] requestData, out byte[] responseData)
        {
            return PostXrlRequest(ref slot, service, useInternal, path, null, requestData, out responseData);
        }

        public static uint PostXrlRequest( ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, byte[] requestData, out byte[] responseData)
        {
            uint hr;

            MemoryStream reqStream = new MemoryStream(requestData, 0, requestData.Length, true, true);

            string uri = "POST " + path + " HTTP/" + HttpVersion + "\r\n";

            WebHeaderCollection headers = new WebHeaderCollection();
            headers.Add("Content-Type", "xon/" + ((int)service).ToString("x"));
            headers.Add("User-Agent", ((int)service).ToString("x")+"/1.0.4325");
            headers.Add("Content-Length", reqStream.Length.ToString());
            
            if (reqHeaders != null)
            {
                headers.Add(reqHeaders);
            }

            // if no schema version is present, default to be the current schema version
            if (headers["X-Schema-Ver"] == null)
            {
                headers.Add("X-Schema-Ver", WireInfoAttribute.VersionToString(WireData.CurrentSchemaVersion));
            }

            FDTransaction xAct = new FDTransaction();
            xAct.endPoint = GetServiceEndPoint(service, useInternal);
            xAct.AppendSGIPPort = AppendSGIPPort;

            if (HttpVersion.Equals("1.1", StringComparison.OrdinalIgnoreCase))
                headers.Add("Host", String.Format("{0}:{1}", xAct.endPoint.Address, xAct.endPoint.Port));

            string headerString = uri + headers.ToString();
            ASCIIEncoding ascii = new ASCIIEncoding();
            byte[] headerBytes = ascii.GetBytes(headerString);

            bool retValue = xAct.Execute(headerBytes, reqStream, ref slot);

            hr = xAct.XErr;

            responseData = xAct.ResponseContents;

            if ( !retValue && xcs.HResult.Succeeded(hr) )
            {
                throw new Exception("PjsStfXrlUtil.PostXrlRequest: failed request: " + headerString);
            }

            return hr;
        }

        public static uint GetXrlRequest(ref CSGInfo slot, xcs.XOService service, string path, out byte[] response)
        {
            HttpStatusCode httpStatus;            
            //ServerTestFramework.Utilities.PuidPool
            return GetXrlRequest(ref slot, service, false, path, null, out response, out httpStatus);
        }

        public static uint GetXrlRequest (ref CSGInfo slot, xcs.XOService service, string path, out byte[] response, out HttpStatusCode httpStatus)
        {
            return GetXrlRequest(ref slot, service, false, path, null, out response, out httpStatus);
        }

        public static uint GetXrlRequest(ref CSGInfo slot, xcs.XOService service, bool useInternal, string path, WebHeaderCollection reqHeaders, out byte[] response, out HttpStatusCode httpStatus )
        {            
            string uri = "GET " + path + " HTTP/" + HttpVersion + "\r\n";

            WebHeaderCollection headers = new WebHeaderCollection();
            headers.Add("Content-Type", "xon/" + ((int)service).ToString("x"));
            headers.Add("User-Agent", ((int)service).ToString("x") + "/1.0.4325");

            if (reqHeaders != null)
            {
                headers.Add(reqHeaders);
            }

            FDTransaction xAct = new FDTransaction();
            xAct.endPoint = GetServiceEndPoint(service, useInternal);
            xAct.AppendSGIPPort = AppendSGIPPort;

            //HTTP 1.1 requires a Host header
            if (HttpVersion.Equals("1.1", StringComparison.OrdinalIgnoreCase))
                headers.Add("Host", String.Format("{0}:{1}", xAct.endPoint.Address, xAct.endPoint.Port));

            string headerString = uri + headers.ToString();
            byte[] headerBytes = Encoding.UTF8.GetBytes(headerString);
            bool retValue = xAct.Execute(headerBytes, null, ref slot, true, useInternal);
            uint hr = xAct.XErr;

            httpStatus = xAct.httpStatus;
            response = xAct.ResponseContents;

            //don't throw if the HR != 0 - logic higher up the stack should
            //decide if an exception should be raised, and fail the case
            //if (!retValue && xcs.HResult.Succeeded(hr))
            //{
            //    throw new Exception("PjsStfXrlUtil.PostXrlRequest: failed request: " + headerString);
            //}

            return hr;
        }

        public static IPEndPoint GetServiceEndPoint( xcs.XOService service, bool useInternal )
        {
            string addr = GetServiceAddress(service, useInternal);
            LiveServer ls = new LiveServer(service.ToString(), addr);
            return ls.EPDefault;
        }

        //-----------------------------------------------------
        // GetServiceAddress
        //
        //      Returns an address from the service configuration
        //      that can be used to contact the given service id.
        //
        public static string GetServiceAddress( xcs.XOService service, bool useInternal )
        {
            string viface;

            switch (service)
            {
            case xcs.XOService.PresNotification:
                viface = useInternal ? VirtualInterface.xpnfd_presence_int : VirtualInterface.xpnfd_presence;
                break;

            case xcs.XOService.StringService:
                viface = useInternal ? VirtualInterface.stringsvr_int : VirtualInterface.stringsvr;
                break;

            case xcs.XOService.Auto_Update:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.xbos_autoupdate;
                break;

            case xcs.XOService.Base_Subscription:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.xbos_base_subscription;
                break;

            case xcs.XOService.User_Account:
                viface = useInternal ? VirtualInterface.xuacs_int : VirtualInterface.xuacs;
                break;

            case xcs.XOService.Matchmaking:
                viface = useInternal ? VirtualInterface.xmatchfd_int : VirtualInterface.xmatchfd;
                break;

            case xcs.XOService.Stats:
                viface = useInternal ? VirtualInterface.xstatsfd_int : VirtualInterface.xstatsfd;
                break;

            case xcs.XOService.Feedback:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.fbserver;
                break;

            case xcs.XOService.Billing_Offering:
                Assert.AreEqual( false, useInternal ); // no internal interface
                viface = VirtualInterface.xbos_billing_offering;
                break;

            case xcs.XOService.Signature_Server:
                viface = useInternal ? VirtualInterface.xsig_int : VirtualInterface.xsig;
                break;

            case xcs.XOService.Query:
                viface = useInternal ? VirtualInterface.xqry_int : VirtualInterface.xqry;
                break;

            case xcs.XOService.Name_Resolution:
                viface = useInternal ? VirtualInterface.stfd_name_resolution_int : VirtualInterface.stfd_name_resolution;
                break;

            case xcs.XOService.Storage:
                //TODO: VirtualInterface has no internal interface for storage
                // but needs one
                viface = VirtualInterface.stfd_storage;
                break;

            case xcs.XOService.Arbitration:
                viface = useInternal ? VirtualInterface.xarb_int : VirtualInterface.xarb;
                break;

            case xcs.XOService.Cron:
                Assert.IsTrue( useInternal ); // no external interface
                viface = VirtualInterface.cron_int;
                break;

            case xcs.XOService.MessagingService:
                //TODO: VirtualInterface has no internal interface for
                // messaging but needs one
                viface = VirtualInterface.xpnfd_messaging;
                break;

            case xcs.XOService.Teams:
                //TODO: VirtualInterface has no internal interface for
                // teams but needs one
                viface = VirtualInterface.xpnfd_teams;
                break;

            case xcs.XOService.DRM:
                viface = useInternal ? VirtualInterface.xbos_drm_int : VirtualInterface.xbos_drm;
                break;

            case xcs.XOService.Crypto:
                Assert.AreEqual(true, useInternal); // no external interface
                viface = VirtualInterface.xcrypto_int;
                break;
            case xcs.XOService.Sts:
                viface = useInternal ? VirtualInterface.sts_int : VirtualInterface.sts;
                break;

            case xcs.XOService.Reflector:
                viface = VirtualInterface.authsg;
                break;
                
            default:
                throw new XRLException(xcs.HResult.XONLINE_E_INTERNAL_ERROR, XEvent.Id.COMMON_CODE_86, "Setting name for service " + service + " not found!   Add it to PjsStfXrlUtil.GetServiceAddress.");
            }

            IPEndPoint fdInfo = ServerTestFramework.Global.XEnv.GetVirtualInterface(viface, Config.MainSiteId);
            if ( fdInfo == null )
            {
                throw new XRLException(xcs.HResult.XONLINE_E_INTERNAL_ERROR, XEvent.Id.COMMON_CONFIG_283, "Virtual interface for service " + viface.ToString() + " not found!  Check the config database.");
            }

            return fdInfo.Address + ":" + fdInfo.Port;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\STF\StsTestBase.cs ===
﻿using System;
using System.Text;
using System.Reflection;
using ServerTestFramework;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    public class StsTestBase : TestNode
	{
        /// <summary>
        /// 
        /// </summary>
        static StsTestBase()
        {
            //set the logging level, as per the config, from the start
            Global.RO.SetLevelFilter((uint)Config.GetIntSetting("LoggingLevel"));
        }

        private static char[] whitespaceChars;
        private static char[] WhitespaceChars
        {
            get
            {
                if (whitespaceChars == null)
                {
                    // This is a large, strange set of chars
                    // and number parsing does not use them
                    Type stringType = typeof(string);
                    object chars = stringType.InvokeMember("WhitespaceChars", BindingFlags.GetField | BindingFlags.NonPublic | BindingFlags.Static, null, null, null);
                    whitespaceChars = chars as char[];
                }

                return whitespaceChars;
            }
        }

        public static char[] WhitespaceForNumberParsing = new char[] { ' ', '\t', '\n', '\v', '\f', '\r' };

        /// <summary>
        /// 
        /// </summary>
        public override void PreRun()
        {
            Output.Info("Starting: {0}", this.Name);
            if (Config.GetBoolSetting("LaunchDebugger"))
                System.Diagnostics.Debugger.Launch();
        }
        
        /// <summary>
        /// 
        /// </summary>
        /// <param name="expected"></param>
        /// <param name="actual"></param>
        public static void VerifyHResult(uint expected, uint actual)
        {
            if (expected != actual)
                throw new StsFailureException(String.Format("Expected STS to return HR={0}, but got HR={1}", 
                    expected.ToString("X"), actual.ToString("X")));
        }

        /// <summary>
        /// Helper function for checking HTTP status codes.
        /// </summary>
        public void VerifyHttpStatus (System.Net.HttpStatusCode expected, System.Net.HttpStatusCode actual)
        {
            if (expected != actual)
            {
                throw new StsFailureException(String.Format("Expected HTTP status {0} [{1}], but got {2} [{3}]",
                    expected, (int)expected, actual, (int)actual));
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public static string GenerateRandomString(int length)
        {
            Random rnd = new Random(unchecked((int)DateTime.Now.Ticks));
            StringBuilder data = new StringBuilder();

            for (int i = 0; i < length; i++)
            {
                char temp = (char)rnd.Next(255);    //includes both ASCII 0-127 and high ASCII 128 - 254
                if (!char.IsControl(temp))          //exclude any control (esc, null, etc) chars
                    data.Append(temp);
            }
            
            return data.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="length"></param>
        /// <returns></returns>
        public static string WhitespaceString(int length)
        {
            return WhitespaceString(length, WhitespaceChars);
        }

        public static string WhitespaceString (int length, char[] chars)
        {
            StringBuilder whitespace = new StringBuilder(length);
            Random rnd = new Random(unchecked((int)DateTime.Now.Ticks));

            for (int i = 0; i < length; i++)
                whitespace.Append(chars[rnd.Next(chars.Length)]);
            return whitespace.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="input"></param>    
        /// <returns></returns>
        public static string AppendWhitespace(object input)
        {
            return AppendWhitespace(input, true, true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="input"></param>
        /// <param name="before"></param>
        /// <param name="after"></param>
        /// <returns></returns>
        public static string AppendWhitespace(object input, bool before, bool after)
        {
            return AppendWhitespace(input, before, after, WhitespaceChars);
        }

        public static string AppendWhitespace (object input, bool before, bool after, char[] chars)
        {
            StringBuilder newString = new StringBuilder(input.ToString());
            Random rnd = new Random(unchecked((int)DateTime.Now.Ticks));

            if (before)
                newString.Insert(0, WhitespaceString(rnd.Next(1, 5), chars));
            if (after)
                newString.Append(WhitespaceString(rnd.Next(1, 5), chars));
            return newString.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static uint GetRandomXboxTitle()
        {
            Random rnd = new Random(unchecked((int)DateTime.Now.Ticks));
            Array values = Enum.GetValues(typeof(XboxTitle));
            uint[] titles = new uint[values.Length];
            Array.Copy(values, titles, values.Length);
            return titles[rnd.Next(titles.Length)];
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\BVT_GetSecurityTokenTests.cs ===
/******************************************************************************
*
* Copyright (C) Microsoft Corporation.  All rights reserved.
* 
* File: BVT_GetSecurityTokenTests.cs
*
* Description: BVTs for STS FD service.
*
* Author: peterl
* 
* Date Created: 06/15/2009
* 
******************************************************************************/

using System;
using ServerTestFramework;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    [TestGroup, Owner("wisgt"), TestCasePriority(1), TestFrequency("BVT"), Description("Contains the BVT cases for the STS GetSecurityToken FD interface.")]
    public class BVT_GetSecurityTokenTests : StsTestBase
    {
        [TestCase, Description("Gets a SAML token for a randomly generated xuid1 and default title ID."), BVT]
        public void GetSamlToken()
        {
            StsRequest request = new StsRequest();
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response);
        }

        [TestCase, Description("Gets a SAML token for a randomly generated xuid and default title ID, using the internal STS interface."), BVT]
        public void GetSamlToken_Internal()
        {
            StsRequest request = new StsRequest();
            request.Platform = xonline.common.service.XOn.XPLT_INTERNAL;
            StsResponse response = StsXrlRequest.GetSecurityToken(request, true, true);
            SamlUtil.ValidateSamlToken(request, response);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\STF\StsTestSuite.cs ===
﻿using System;
using ServerTestFramework;

[assembly: RootNode(typeof(StsTest.StsTestSuite))]

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public class StsTestSuite: TestNode
	{
        public override void PreRun (RUN_TYPE runType)
        {
            if (runType == RUN_TYPE.STRESS)
            {
                StsPlugin.DisableOutput = true;
                StsPlugin.DetailedValidationRate = 0.01f;
                StsPlugin.BasicValidationRate = 0.25f;
            }
        }

        public override void PostRun (RUN_TYPE runType)
        {
            if (runType == RUN_TYPE.STRESS)
            {
                StsPlugin.DisableOutput = false;
                StsPlugin.DetailedValidationRate = 1f;
                StsPlugin.BasicValidationRate = 1f;
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\Config_GetSecurityTokenTests.cs ===
/******************************************************************************
*
* Copyright (C) Microsoft Corporation.  All rights reserved.
* 
* File: BVT_GetSecurityTokenTests.cs
*
* Description: BVTs for STS FD service.
*
* Author: johnmcp
* 
* Date Created: 07/10/2009
* 
******************************************************************************/

using System;
using System.IdentityModel.Tokens;
using System.Security.Cryptography.X509Certificates;
using xonline.common.diagnostics;
using ServerTestFramework;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    [TestGroup, Owner("wisgt"), TestCasePriority(3), TestFrequency("regression"), Description("Contains the configuration cases for the STS GetSecurityToken FD interface.")]
    public class Config_GetSecurityTokenTests : StsTestBase
	{
        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token after updating the time window config value."), TestFrequency("Weekly")]
        public void GetSamlTokenChangeConfigTimeWindow()
        {
            uint oldTimeWindow = NpdbSettingsUtil.TimeWindow;

            try
            {
                StsRequest request = new StsRequest();

                NpdbSettingsUtil.TimeWindow = 5;
                NpdbSettingsUtil.WaitForCacheRefresh();

                StsResponse response = StsXrlRequest.GetSecurityToken(request);
                SamlUtil.ValidateSamlToken(request, response);

                SamlSecurityToken token = SamlUtil.SamlSecurityTokenFromString(response.Token);
                TimeSpan timeWindow = token.ValidTo.Subtract(token.ValidFrom);
                Assert.AreEqual(5, (int)timeWindow.TotalMinutes, String.Format("; Expected a time window of 5 mins, but found {0}.", timeWindow));
            }
            finally
            {
                //no matter what happens, set this value back to its default
                NpdbSettingsUtil.TimeWindow = oldTimeWindow;
                NpdbSettingsUtil.WaitForCacheRefresh();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token after updating the issuer config value."), TestFrequency("Manual")]
        public void GetSamlTokenChangeConfigIssuer()
        {
            string oldIssuer = NpdbSettingsUtil.IssuerName;

            try
            {
                StsRequest request = new StsRequest();

                string newIssuer = "http://AllUrTokenzAreBelongToUz.com";
                NpdbSettingsUtil.IssuerName = newIssuer;
                NpdbSettingsUtil.WaitForCacheRefresh();

                StsResponse response = StsXrlRequest.GetSecurityToken(request);
                SamlUtil.ValidatingIssuer = newIssuer;
                SamlUtil.ValidateSamlToken(request, response);
            }
            finally
            {
                //no matter what happens, set this value back to its default
                NpdbSettingsUtil.IssuerName = oldIssuer;
                NpdbSettingsUtil.WaitForCacheRefresh();
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token after updating the certificate subject.  Note: this may only work on an xblob, TestNet and INT."), TestFrequency("Weekly"), EnvRequirement("xblob")]
        public void GetSamlTokenChangeConfigCertSubject()
        {
            string oldThumb = NpdbSettingsUtil.CertSubject;

            try
            {
                StsRequest request = new StsRequest();

                string thumb = "1c80a33648a9eb62e948c0f81efb14d495b49fe2";  //CN = WMSvc-WIN-AER247ACIJS
                NpdbSettingsUtil.CertSubject = thumb;
                NpdbSettingsUtil.WaitForCacheRefresh();

                StsResponse response = StsXrlRequest.GetSecurityToken(request);
                SamlUtil.ValidateSamlToken(request, response);

                string base64Cert = SamlUtil.GetSamlNodeValue(response.Token, "saml:Assertion/dfltns:Signature/dfltns:KeyInfo/dfltns:X509Data/dfltns:X509Certificate");
                X509Certificate2 cert = new X509Certificate2(Convert.FromBase64String(base64Cert));
                Assert.IsTrue(cert.Subject.Contains("WMSvc-WIN-AER247ACIJS"), String.Format("; Expected a cert subject of WMSvc-WIN-AER247ACIJS, but found '{0}'.", cert.Subject));
            }
            finally
            {
                //no matter what happens, set this value back to its default
                NpdbSettingsUtil.CertSubject = oldThumb;
                NpdbSettingsUtil.WaitForCacheRefresh();
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\AuthSG_GetSecurityTicketTests.cs ===
/******************************************************************************
*
* Copyright (C) Microsoft Corporation.  All rights reserved.
* 
* File: AuthSG_GetSecurityTicketTests.cs
*
* Description: DVTs for STS FD service.
*
* Author: dougb
* 
* Date Created: 06/15/2009
* 
******************************************************************************/

using System;
using System.IO;
using System.Net;
using System.Text;
using System.Threading;
using System.Web;
using System.Xml;

using ServerTestFramework;
using ServerTestFramework.LiveService.Auth;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.LiveService.UserAccount;

using xonline.common.service;
using xonline.common.stfutil;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    [TestGroup, Owner("dougb"), TestCasePriority(3), TestFrequency("manual"), Description("Contains the AuthSG cases for the STS GetSecurityTicket FD interface."), DVT]
    public class AuthSG_GetSecurityTicketTests : StsTestBase
    {
        // static user to use for multiple tests.  Solves XCache timing issue for subsequent tests.
        static private XeUser _xeUser = null;
        //static private UacsCommon.PassportUser _passportUser;
        //static private ServerTestFramework.Database.UserEditor _user;
        static int _isUserReady = 0;    // 0 = no, 1 = yes, -1 = checking
        
        /// <summary>
        /// GetSecurityTicket
        /// Gets a SAML token for a randomly generated xuid and default title ID.
        /// </summary>
        [TestCase, Owner("dougb"), Description("Gets a SAML token for a randomly generated xuid and default title ID.")]
        public void GetSecurityTicket()
        {
            string samlToken = GetSecurityTicket( "15", "1481443286", "1", "1", "" );
        }        

        /// <summary>
        /// GetSecurityTicketUseToGenerateGamertag
        /// Gets a SAML token for a randomly generated xuid and default title ID and then tries to use it to GenerateGamertag.
        /// </summary>
        [TestCase, Owner("dougb"), Description("Gets a SAML token for a randomly generated xuid and default title ID and then tries to use it to GenerateGamertag.")]
        public void GetSecurityTicketUseToGenerateGamertag()
        {
            HttpStatusCode httpStatus;
            uint hresult;
            //                                                     0xFFFE07D1        
            string path = "/sts/sts.asmx/GetSecurityTicket?platformType=15&titleId=1481443286&titleVersion=1&clientVersion=1&deviceId=";
            StsRequest request = new StsRequest();
            CSGInfo slot = request.FakeSGSlot;

            // Ready check
            StaticUserXCacheCheck();
            
            // Create the WLID1.0 Web Headers
            WebHeaderCollection headers = new WebHeaderCollection();
            XeUser user = _xeUser;
            string ticket=AuthClientBase.GetAAPassportTicket(user.PassportMemberName, user.PassportPassword, "MBI");
            headers.Add( "Authorization: WLID1.0 t=" + ticket );
            Output.Info("Authorization: WLID1.0 t={0} ", ticket);

            path = path + user.Gamertag;
            
            byte[] response;
            StsResponse stsResponse = new StsResponse();
            Output.Info("Calling STS: {0} ", path);

            stsResponse.RequestSent = DateTime.UtcNow;
            hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, path, headers, out response, out httpStatus);
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("STS request took: {0}", stsResponse.RequestTime);

            string token = String.Empty;
            if (response != null && response.Length > 0)
            {
                token = Encoding.UTF8.GetString(response);
                Output.Debug("SAML token returned:\r\n{0}", token);
            }
            stsResponse.Token = token;

            if (stsResponse.Succeeded && !String.IsNullOrEmpty(stsResponse.Token))
            {
                Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
                SamlUtil.ValidateSamlTokenFromWebMethod(request, stsResponse, false, false);
            }
            else
            {
                Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), StsXrlRequest.MapHResultToString(hresult));
                throw new StsFailureException("No SAML token!");
            }

            Output.Debug("Calling GenerateGamertag with the Token:\r\n" );

            //////////////////////////////////////////////////////////////
            // Now use the token to get GenerateGamertag
            
            response = null;
            // Clean the token
            string samlToken;
            using (XmlReader readerPre = XmlReader.Create(new StringReader(stsResponse.Token)))
            {
                readerPre.IsStartElement( "saml" );
                samlToken = HttpUtility.HtmlDecode( readerPre.ReadInnerXml() );
            }

            // Create the XBL1.0 Web Headers
            headers.Clear();
            headers.Add( "Authorization: XBL1.0 x=" + samlToken );
            
            stsResponse.RequestSent = DateTime.UtcNow;
            // This call requires a change in the xuacs: web.config
            //        <add name="HttpGet" />
            hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, "/xuacs/useraccount.asmx/GenerateGamertag?seed=blamo&userPuid=0&machinePuid=0&gamertagSuggestionType=1", headers, out response, out httpStatus);
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("GenerateGamertag request took: {0}", stsResponse.RequestTime);

            string gamerTag = "";
            try
            {
                gamerTag = Encoding.UTF8.GetString(response);
            }
            catch (ArgumentNullException)
            {
                Output.Error("This test requires xuacs web.config to allow HTTP GET!");
                Output.Error("webroot\\xuacs\\web.config should contain <add name=\"HttpGet\" />");
            }
            if ( 0 < gamerTag.Length )
            {
                Output.Debug("Gamertag returned:\r\n{0}", gamerTag);
                Output.Success("Successfully generated gamertag\r\n" );
            }
            else
            {
                Output.Error("Error No Gamertag!");
                throw new StsFailureException("GenerateGamertag no gamertag!");
            }
        }        

        /// <summary>
        /// GetSecurityTicketUseToGetPartnerSecurityTicket
        /// Gets a SAML token for a randomly generated xuid and default title ID and then tries to use it to GenerateGamertag.
        /// </summary>
        [TestCase, Owner("dougb"), Description("Gets a SAML token for a randomly generated xuid and default title ID and then tries to use it to GeneratePartnerSecurityTicket.")]
        public void GetSecurityTicketUseToGetPartnerSecurityTicket()
        {
            XblSamlToken xblSamlToken = null;
            string samlToken = GetSecurityTicket( "15", "1481443286", "1", "1", "" );

            if ( !string.IsNullOrEmpty( samlToken ))
            {
                // Check the token
                xblSamlToken = new XblSamlToken(samlToken);
            }

            Output.Debug("Calling GetPartnerSecurityTicket with the Token:\r\n" );

            //////////////////////////////////////////////////////////////
            // Now use the token to get GetPartnerSecurityTicket

            if (null != xblSamlToken)
            {
                HttpStatusCode httpStatus;
                WebHeaderCollection headers = new WebHeaderCollection();
                byte[] response;
                StsResponse stsResponse = new StsResponse();
                uint hresult;
                StsRequest request = new StsRequest();
                CSGInfo slot = request.FakeSGSlot;
                
                response = null;

                // Create the XBL1.0 Web Headers
                headers.Clear();
                headers.Add( "Authorization: XBL1.0 x=" + samlToken );
                
                stsResponse.RequestSent = DateTime.UtcNow;
                // This call requires a change in the xuacs: web.config
                //        <add name="HttpGet" />
                hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, "/sts/sts.asmx/GetPartnerSecurityTicket?xuid=" + xblSamlToken.GetAttributeValue(XblSamlToken.name_attribute_xuid0) + "&titleId=1481443286&titleVersion=1&audience=http%3A%2F%2Fblamo.com", headers, out response, out httpStatus);
                stsResponse.ResponseRecieved = DateTime.UtcNow;
                stsResponse.HResult = hresult;
                stsResponse.HttpStatus = httpStatus;
                Output.Info("GetPartnerSecurityTicket request took: {0}", stsResponse.RequestTime);

                string token = String.Empty;
                if (response != null && response.Length > 0)
                {
                    token = Encoding.UTF8.GetString(response);
                    Output.Debug("SAML token returned:\r\n{0}", token);
                }
                stsResponse.Token = token;

                if (stsResponse.Succeeded && !String.IsNullOrEmpty(stsResponse.Token))
                {
                    Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
                    SamlUtil.ValidateSamlTokenFromWebMethod(request, stsResponse, false, false);
                }
                else
                {
                    Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), StsXrlRequest.MapHResultToString(hresult));
                    throw new StsFailureException("No SAML token!");
                }
            }
        }        

        /// <summary>
        /// GetSecurityTicketUseToGetPartnerSecurityTicketWebClient
        /// Gets a SAML token for a randomly generated xuid and default title ID and then tries to use it to GenerateGamertag.
        /// </summary>
        [TestCase, Owner("dougb"), Description("Gets a SAML token for a randomly generated xuid and default title ID and then tries to use it to GeneratePartnerSecurityTicket.")]
        public void GetSecurityTicketUseToGetPartnerSecurityTicketWebClient()
        {
            XblSamlToken xblSamlToken = null;
            string samlToken = GetSecurityTicket( "16", "1481443286", "1", "1", "" );

            if ( !string.IsNullOrEmpty( samlToken ))
            {
                // Check the token
                xblSamlToken = new XblSamlToken(samlToken);
            }

            Output.Debug("Calling GetPartnerSecurityTicket with the Token:\r\n" );

            //////////////////////////////////////////////////////////////
            // Now use the token to get GetPartnerSecurityTicket

            if (null != xblSamlToken)
            {
                HttpStatusCode httpStatus;
                WebHeaderCollection headers = new WebHeaderCollection();
                byte[] response;
                StsResponse stsResponse = new StsResponse();
                uint hresult;
                StsRequest request = new StsRequest();
                CSGInfo slot = request.FakeSGSlot;
                
                response = null;

                // Create the XBL1.0 Web Headers
                headers.Clear();
                headers.Add( "Authorization: XBL1.0 x=" + samlToken );
                
                stsResponse.RequestSent = DateTime.UtcNow;
                // This call requires a change in the xuacs: web.config
                //        <add name="HttpGet" />
                hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, "/sts/sts.asmx/GetPartnerSecurityTicket?xuid=" + xblSamlToken.GetAttributeValue(XblSamlToken.name_attribute_xuid0) + "&titleId=1481443286&titleVersion=1&audience=http%3A%2F%2Fblamo.com", headers, out response, out httpStatus);
                stsResponse.ResponseRecieved = DateTime.UtcNow;
                stsResponse.HResult = hresult;
                stsResponse.HttpStatus = httpStatus;
                Output.Info("GetPartnerSecurityTicket request took: {0}", stsResponse.RequestTime);

                string token = String.Empty;
                if (response != null && response.Length > 0)
                {
                    token = Encoding.UTF8.GetString(response);
                    Output.Debug("SAML token returned:\r\n{0}", token);
                }
                stsResponse.Token = token;

                if (stsResponse.Succeeded && !String.IsNullOrEmpty(stsResponse.Token))
                {
                    Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
                    SamlUtil.ValidateSamlTokenFromWebMethod(request, stsResponse, false, false);
                }
                else
                {
                    Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), StsXrlRequest.MapHResultToString(hresult));
                    throw new StsFailureException("No SAML token!");
                }
            }
        }        

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Owner("dougb"), Description("Get a SAML token for a randomly generated xuid and default title ID and then modify the Issuer and try to use it to GenerateGamertag.")]
        public void GetTamperAndUseTamperedSecurityTicket()
        {
            string path = "/sts/sts.asmx/GetSecurityTicket?titleId=1&titleVersion=1&clientVersion=1&deviceId=1";
            StsRequest request = new StsRequest();
            CSGInfo slot = request.FakeSGSlot;
            WebHeaderCollection headers = new WebHeaderCollection();
            HttpStatusCode httpStatus;

            byte[] response;
            StsResponse stsResponse = new StsResponse();
            Output.Info("Calling STS: {0} ", path);

            // Ready check
            StaticUserXCacheCheck();
            
            // Create the WLID1.0 Web Headers
            XeUser user = _xeUser;
            string ticket=AuthClientBase.GetAAPassportTicket(user.PassportMemberName, user.PassportPassword, "MBI");
            headers.Add( "Authorization: WLID1.0 t=" + ticket );

            stsResponse.RequestSent = DateTime.UtcNow;
            uint hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, path, headers, out response, out httpStatus);
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("STS request took: {0}", stsResponse.RequestTime);

            string token = String.Empty;
            if (response != null && response.Length > 0)
            {
                token = Encoding.UTF8.GetString(response);
                Output.Debug("SAML token returned:\r\n{0}", token);
            }
            stsResponse.Token = token;

            if (stsResponse.Succeeded)
                Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
            else
                Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), StsXrlRequest.MapHResultToString(hresult));
            SamlUtil.ValidateSamlTokenFromWebMethod(request, stsResponse, false, false);

            Output.Debug("Calling GenerateGamertag with the Token:\r\n" );

            //////////////////////////////////////////////////////////////
            // Now use the token to get GenerateGamertag
            
            response = null;
            // Clean the token
            string samlToken;
            using (XmlReader readerPre = XmlReader.Create(new StringReader(stsResponse.Token)))
            {
                readerPre.IsStartElement( "saml" );
                samlToken = HttpUtility.HtmlDecode( readerPre.ReadInnerXml() );
            }

            // Create the XBL1.0 Web Headers
            samlToken = samlToken.Replace( "sts.xboxlive.com", "blamo.com" );
            
            
            headers.Clear();
            headers.Add( "Authorization: XBL1.0 x=" + samlToken );
            
            stsResponse.RequestSent = DateTime.UtcNow;
            hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, "/xuacs/useraccount.asmx/GenerateGamertag?seed=blamo", headers, out response, out httpStatus );
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("GenerateGamertag request took: {0}", stsResponse.RequestTime);

            if ( HttpStatusCode.Unauthorized == httpStatus )
            {
                Output.Success("Successfully reported Unauthorized for Issuer blamo.com in SAML Token\r\n" );
            }
            else
            {
                Output.Error("Error SAML Token authorized!");
                throw new StsFailureException("SAML Token issuer blamo.com authorized by Active Auth!");
            }
        }        

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Owner("dougb"), Description("Get an expired SAML token for a randomly generated xuid and default title ID and try to use it to GenerateGamertag.")]
        public void GetExpiredAndUseExpiredSecurityTicket()
        {
            string path = "/sts/sts.asmx/GetSecurityTicket?titleId=2112&titleVersion=1&clientVersion=666&deviceId=1";
            StsRequest request = new StsRequest();
            CSGInfo slot = request.FakeSGSlot;
            WebHeaderCollection headers = new WebHeaderCollection();
            HttpStatusCode httpStatus;

            byte[] response;
            StsResponse stsResponse = new StsResponse();
            Output.Info("Calling STS: {0} ", path);

            // Ready check
            StaticUserXCacheCheck();
            
            // Create the WLID1.0 Web Headers
            XeUser user = _xeUser;
            string ticket=AuthClientBase.GetAAPassportTicket(user.PassportMemberName, user.PassportPassword, "MBI");
            headers.Add( "Authorization: WLID1.0 t=" + ticket );

            stsResponse.RequestSent = DateTime.UtcNow;
            uint hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, path, headers, out response, out httpStatus);
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("STS request took: {0}", stsResponse.RequestTime);

            string token = String.Empty;
            if (response != null && response.Length > 0)
            {
                token = Encoding.UTF8.GetString(response);
                Output.Debug("SAML token returned:\r\n{0}", token);
            }
            stsResponse.Token = token;

            if (stsResponse.Succeeded)
                Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
            else
                Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), StsXrlRequest.MapHResultToString(hresult));
            SamlUtil.ValidateSamlTokenFromWebMethod(request, stsResponse, false, false);

            Output.Debug("Calling GenerateGamertag with the Token:\r\n" );

            //////////////////////////////////////////////////////////////
            // Now use the token to get GenerateGamertag
            
            response = null;
            // Clean the token
            string samlToken;
            using (XmlReader readerPre = XmlReader.Create(new StringReader(stsResponse.Token)))
            {
                readerPre.IsStartElement( "saml" );
                samlToken = HttpUtility.HtmlDecode( readerPre.ReadInnerXml() );
            }

            // Create the XBL1.0 Web Headers
            samlToken = samlToken.Replace( "sts.xboxlive.com", "blamo.com" );
            
            
            headers.Clear();
            headers.Add( "Authorization: XBL1.0 x=" + samlToken );
            
            stsResponse.RequestSent = DateTime.UtcNow;
            hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, "/xuacs/useraccount.asmx/GenerateGamertag?seed=blamo", headers, out response, out httpStatus );
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("GenerateGamertag request took: {0}", stsResponse.RequestTime);

            if ( HttpStatusCode.Unauthorized == httpStatus )
            {
                Output.Success("Successfully reported Unauthorized for Issuer blamo.com in SAML Token\r\n" );
            }
            else
            {
                Output.Error("Error SAML Token authorized!");
                throw new StsFailureException("SAML Token issuer blamo.com authorized by Active Auth!");
            }
        }        

        [TestCase, Owner("dougb"), Description("Gets a SAML token for a randomly generated xuid and default title ID.")]
        public void GetSecurityTicketTitleVersion67108880()
        {
            string samlToken = GetSecurityTicket( "15", "1297287401", "67108880", "1", "a8b6c7d5e3f0a9b8c6d7e5f3a0b9c8d6e7f5a3b0" );
        }
        
        // -------------------------------------------------------------------------
        // GetSecurityTicket
        //
        /// Gets a SAML token for a randomly generated xuid
        // -------------------------------------------------------------------------
        private string GetSecurityTicket( string platformType, string titleId, string titleVersion, string clientVersion, string deviceId )
        {
            HttpStatusCode httpStatus;
            bool bLog = ( -1 != _isUserReady );
            XblSamlToken xblSamlToken = null;
            
            string path = "/sts/sts.asmx/GetSecurityTicket?platformType=" + platformType + "&titleId=" + titleId + "&titleVersion=" + titleVersion + "&clientVersion=" + clientVersion + "&deviceId=" + deviceId;
            StsRequest request = new StsRequest();
            CSGInfo slot = request.FakeSGSlot;

            // Ready check
            StaticUserXCacheCheck();
            
            // Create the WLID1.0 Web Headers
            WebHeaderCollection headers = new WebHeaderCollection();
            XeUser user = _xeUser;
            string ticket=AuthClientBase.GetAAPassportTicket(user.PassportMemberName, user.PassportPassword, "MBI");
            headers.Add( "Authorization: WLID1.0 t=" + ticket );
            if (bLog) Output.Info("Authorization: WLID1.0 t={0} ", ticket);

            if ( string.IsNullOrEmpty( deviceId ))
                path = path + user.Gamertag;

            byte[] response;
            StsResponse stsResponse = new StsResponse();
            if (bLog) Output.Info("Calling STS: {0} ", path);


            stsResponse.RequestSent = DateTime.UtcNow;
            uint hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Reflector, false, path, headers, out response, out httpStatus);
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            if (bLog) Output.Info("STS request took: {0}", stsResponse.RequestTime);

            string samlToken = string.Empty;
            string token = string.Empty;
            if (response != null && response.Length > 0)
            {
                token = Encoding.UTF8.GetString(response);
                // Clean the token
                using (XmlReader readerPre = XmlReader.Create(new StringReader(token)))
                {
                    readerPre.IsStartElement( "saml" );
                    samlToken = HttpUtility.HtmlDecode( readerPre.ReadInnerXml() );
                }

                // Check the token
                xblSamlToken = new XblSamlToken(samlToken);

                if (xblSamlToken.IsUserTicket)
                {
                    if (bLog) Output.Debug("SAML token returned:\r\n{0}", token);
                    stsResponse.Token = token;
                }
            }
            stsResponse.Token = token;

            if (stsResponse.Succeeded && !String.IsNullOrEmpty(stsResponse.Token))
            {
                if (( null != xblSamlToken ) && ( xblSamlToken.IsUserTicket ))
                    _isUserReady = 1;
                if (bLog) Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
                if (bLog) SamlUtil.ValidateSamlTokenFromWebMethod(request, stsResponse, false, false);
            }
            else
            {
                if (bLog) Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), StsXrlRequest.MapHResultToString(hresult));
                throw new StsFailureException("No SAML token!");
            }

            return samlToken;
        }        

        // -------------------------------------------------------------------------
        // StaticUserXCacheCheck
        //
        // Make the generic user if needed and then keep trying till we think it works
        // i.e. is in XCache
        // -------------------------------------------------------------------------
        private void StaticUserXCacheCheck()
        {
            if ( 0 != _isUserReady )    // 1 = ready, -1 = already checking
                return;

            // Make the generic user
            if ( null == _xeUser )
                _xeUser = AuthContext.MakeNewBillingUser(true, true, true);
                
            Output.Info("Static User ready check...");
            int retries = 6;
            int sleep = 500;
            _isUserReady = -1;

            while (0 < retries)
            {
                GetSecurityTicket();    // ToDo: there's probably a better way to check the user is in XCache
                if ( 1 == _isUserReady )
                {
                    retries = -1;
                }
                else
                {
                    retries--;
                    sleep = sleep*2;
                    Thread.Sleep(sleep);
                }
            }
            if ( 1 == _isUserReady )
            {
                Output.Info("Ready!");
            }
            else
            {
                _isUserReady = 0;
                throw new StsFailureException("Failed GetSecurityTicket. No SAML token.");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\GetSecurityTicketStress.cs ===
using System;

using xonline.common.service;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;

using StsTest.WebService;

namespace StsTest
{

public partial class GetSecurityTicket : TestNode
{

[StressTest]
public class Stress : TestNode
{
    /// <summary>
    /// Gets a WLID puid that shouldn't be an Xbox Live member.
    /// </summary>
    public static ulong CreateNonXuidPuid ()
    {
        return RandomEx.GlobalRandGen.GenerateRandomPuid();
    }

    protected static BulkUserSet _BulkUsers = null;

    /// <summary>
    /// Gets a puid from the bulk user set.
    /// </summary>
    public static ulong GetBulkUser ()
    {
        int index = RandomEx.GlobalRandGen.Next((int)_BulkUsers.Count);
        return _BulkUsers.IndexToPuid((uint)index);
    }

    protected struct KnownDevice
    {
        public string DeviceId;
        public ulong MachineId;

        public KnownDevice (string deviceid, ulong machineid)
        {
            DeviceId = deviceid;
            MachineId = machineid;
        }
    }

    protected const int MaxKnownDevices = 10000;
    protected static KnownDevice[] _KnownDevices = null;
    protected static int _KnownDeviceCount = 0;

    /// <summary>
    /// Adds a device to the list of devices we have created.
    /// </summary>
    protected static void AddKnownDevice (string deviceid, ulong machineid)
    {
        if (_KnownDeviceCount < MaxKnownDevices)
        {
            int i = System.Threading.Interlocked.Increment(ref _KnownDeviceCount) - 1;

            if (i < MaxKnownDevices)
            {
                _KnownDevices[i].DeviceId = deviceid;
                _KnownDevices[i].MachineId = machineid;
            }
        }
    }

    /// <summary>
    /// Gets a device from the list of devices we have created.
    /// </summary>
    protected static KnownDevice GetKnownDevice ()
    {
        if (_KnownDeviceCount == 0)
        {
            throw new UnexpectedTestResultException("No devices have been created yet.  Run a MachineAccountCreation test first.");
        }

        int max = Math.Min(_KnownDeviceCount, MaxKnownDevices);
        return _KnownDevices[RandomEx.GlobalRandGen.Next(max)];
    }

    public override void PreRun ()
    {
        _BulkUsers = null;

        try
        {
            _BulkUsers = STFLiveGlobal.GetUserSet("xenon");
        }
        catch
        {
            Global.RO.Warn("No bulk user set. Creating our own single user.");
        }

        // if we don't have bulk users, make one up real quick
        if (_BulkUsers == null)
        {
            _BulkUsers = new BulkUserSet("BU", 0, 0);
        }

        if (_BulkUsers.Count == 0)
        {
            ulong bu = UserEditor.AllocatePuid();
            UserEditor.CreateOrUseExistingGamerTag(_BulkUsers.PuidToGamertag(bu), UserCreationType.Xbox360, 0, bu);
            _BulkUsers.Base = bu;
            _BulkUsers.Count = 1;
        }

        _KnownDevices = new KnownDevice[MaxKnownDevices];
        _KnownDeviceCount = 0;
    }

    /// <summary>
    /// Stress test base class.
    /// </summary>
    public class GetSecurityTicketStressBase : GetSecurityTicketTestBaseStatic
    {
        public static void SetBulkUser (TestData testData)
        {
            ulong user = GetBulkUser();

            testData.RequestObject.AAInfo.PassportPuid = user;
            testData.ValidExpectations.User = UserEditor.FromPuid(user);
            testData.ValidExpectations.GamerTagOverride = _BulkUsers.PuidToGamertag(user);
        }

        public static void SetKnownDevice (TestData testData)
        {
            KnownDevice kd = GetKnownDevice();

            testData.RequestObject.AAInfo.CertDeviceId = kd.DeviceId;
            testData.ValidExpectations.MachineID = kd.MachineId;
        }
    }

    [StressTest]
    public class MachineAccountCreation_NoXuid : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);
            if (testData.ValidExpectations.Validation == StsPlugin.ValidationLevel.None)
            {
                testData.ValidExpectations.Validation = StsPlugin.ValidationLevel.Basic;
            }

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            aa.PassportPuid = CreateNonXuidPuid();
            aa.PassportCId = GenerateCID();
            aa.CertDeviceId = GenerateDeviceId();
            SetValidAAInfoTimes(testData);

            string result = GetSecurityTicket(testData, XOn.XPLT_MOBILE,
                WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

            SamlUtil.ValidateSecurityTicket(result, testData.ValidExpectations, true);

            AddKnownDevice(aa.CertDeviceId, testData.ValidExpectations.ResultMachineID);
        }
    }

    [StressTest]
    public class MachineAccountCreation_Xuid : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);
            if (testData.ValidExpectations.Validation == StsPlugin.ValidationLevel.None)
            {
                testData.ValidExpectations.Validation = StsPlugin.ValidationLevel.Basic;
            }

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            SetBulkUser(testData);
            aa.PassportCId = GenerateCID();
            aa.CertDeviceId = GenerateDeviceId();
            SetValidAAInfoTimes(testData);

            string result = GetSecurityTicket(testData, XOn.XPLT_MOBILE,
                WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

            SamlUtil.ValidateSecurityTicket(result, testData.ValidExpectations, false);

            AddKnownDevice(aa.CertDeviceId, testData.ValidExpectations.ResultMachineID);
        }
    }

    [StressTest]
    public class Mainline_Foundation : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            SetBulkUser(testData);
            aa.PassportCId = GenerateCID();
            SetKnownDevice(testData);
            SetValidAAInfoTimes(testData);

            string result = GetSecurityTicket(testData, XOn.XPLT_MOBILE,
                WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

            SamlUtil.ValidateSecurityTicket(result, testData.ValidExpectations, false);
        }
    }

    [StressTest]
    public class Mainline_Game : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            SetBulkUser(testData);
            aa.PassportCId = GenerateCID();
            SetKnownDevice(testData);
            SetValidAAInfoTimes(testData);

            string result = GetSecurityTicket(testData, XOn.XPLT_MOBILE,
                WMGameTitleId, WMGameTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

            SamlUtil.ValidateSecurityTicket(result, testData.ValidExpectations, false);
        }
    }

    [StressTest]
    public class Mainline_Web : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            SetBulkUser(testData);
            aa.PassportCId = GenerateCID();
            SetKnownDevice(testData);
            SetValidAAInfoTimes(testData);

            string result = GetSecurityTicket(testData, XOn.XPLT_WEB_GAMES,
                WebGameTitleId, WebGameTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

            SamlUtil.ValidateSecurityTicket(result, testData.ValidExpectations, false);
        }
    }

    [StressTest]
    public class GetPartnerSecurityTicket : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            SetBulkUser(testData);
            aa.PassportCId = GenerateCID();
            SetKnownDevice(testData);
            SetValidAAInfoTimes(testData);

            string result = GetPartnerSecurityTicket(testData, testData.ValidExpectations.User.Puid,
                WMGameTitleId, WMGameTitleVersion, "http://www.contoso.com/");

            SamlUtil.ValidatePartnerSecurityTicket(result, testData.ValidExpectations);
        }
    }

    [StressTest]
    public class GetPartnerSecurityTicket_Web : GetSecurityTicketStressBase
    {
        public override void RunTest ()
        {
            TestData testData = new TestData(RequestMethodEnum.SoapAudience);

            AAInfoWrapper aa = testData.RequestObject.AAInfo;
            SetBulkUser(testData);
            aa.PassportCId = GenerateCID();
            SetKnownDevice(testData);
            SetValidAAInfoTimes(testData);

            string result = GetPartnerSecurityTicket(testData, testData.ValidExpectations.User.Puid,
                WebGameTitleId, WebGameTitleVersion, "http://www.contoso.com/");

            SamlUtil.ValidatePartnerSecurityTicket(result, testData.ValidExpectations);
        }
    }
}

}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\P_GetSecurityTokenTests.cs ===
/******************************************************************************
*
* Copyright (C) Microsoft Corporation.  All rights reserved.
* 
* File: P_GetSecurityTokenTests.cs
*
* Description: Positive test cases for STS FD service.
*
* Author: johnmcp
* 
* Date Created: 06/15/2009
* 
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Utilities;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    [TestGroup, Owner("wisgt"), TestCasePriority(1), TestFrequency("daily"), Description("Contains the positive test cases for the STS GetSecurityToken FD interface.")]
    public class P_GetSecurityTokenTests : StsTestBase
	{
        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for all permutations of xuids; xuid1 is always sent."), TestFrequency("Daily")]
        public void GetSamlTokenForMultipleXuids()
        {
            StsRequest request = new StsRequest(4);
            int iterations = (request.Xuids.Count * request.Xuids.Count) - 1;
            bool failed = false;
            StringBuilder failures = new StringBuilder("The following xuid permutations failed:\r\n");
            StsResponse response = null;

            for (int i = 3; i <= iterations; i++)
            {
                if ((i & 1) == 1)   //the first xuid always needs to be set
                {
                    request.Xuid2.Ignore = (i & 2) == 0;
                    request.Xuid3.Ignore = (i & 4) == 0;
                    request.Xuid4.Ignore = (i & 8) == 0;

                    try
                    {
                        Output.Info(request.Xuids.Print());  //show what user combination we're sending in the request
                        response = StsXrlRequest.GetSecurityToken(request);
                        SamlUtil.ValidateSamlToken(request, response);
                    }
                    catch (Exception e)
                    {
                        failed = true;
                        failures.AppendFormat("\t{0} (0x{1} - {2})\r\n", request.Xuids.Print(), (response != null) ? response.HResult.ToString("X") : "N/A", e.Message);
                    }
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a min ulong (0) xuid1."), TestFrequency("Daily")]
        public void GetSamlTokenWithMinXuid()
        {
            ulong minXuid = 1;  //0 is a special case for both test and product code; we'll consider 1 effectively the first real, min value
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), minXuid);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a max ulong xuid1."), TestFrequency("Daily")]
        public void GetSamlTokenWithMaxXuid()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), ulong.MaxValue);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for two xuids that have the same value."), TestFrequency("Daily")]
        public void GetSamlTokenForMultipleXuidWithSameValue()
        {
            ulong sameXuid = Xuid.GenerateRandomUInt64();
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), sameXuid, sameXuid, sameXuid, sameXuid);
            int iterations = (request.Xuids.Count * request.Xuids.Count) - 1;
            bool failed = false;
            StringBuilder failures = new StringBuilder("The following xuid permuations (all w/ same value) failed:\r\n");
            StsResponse response = null;

            for (int i = 3; i <= iterations; i++)
            {
                if ((i & 1) == 1)   //the first xuid always needs to be set
                {
                    request.Xuid2.Ignore = (i & 2) == 0;
                    request.Xuid3.Ignore = (i & 4) == 0;
                    request.Xuid4.Ignore = (i & 8) == 0;

                    try
                    {
                        Output.Info(request.Xuids.Print());  //show what user combination we're sending in the request
                        response = StsXrlRequest.GetSecurityToken(request);
                        
                        //NOTE: we found that after adding tier/country to the token, that the SG pulls this information on a xuid (ulong) basis
                        //      and does NOT use an index.  Thus tokens returned for multiple xuids, with the same value, always report the same
                        //      country/tier for the first occurrance.  This scenario isn't realistic and is putting the SG in a state that it
                        //      shouldn't (or simply can't) get in.  This overload of ValidateSamlToken skips xuid validation.
                        //SamlUtil.ValidateSamlToken(request, response);
                        SamlUtil.ValidateSamlToken(request, response, true, false);
                    }
                    catch (Exception e)
                    {
                        failed = true;
                        failures.AppendFormat("\t{0} (0x{1} - {2})\r\n", request.Xuids.Print(), (response != null) ? response.HResult.ToString("X") : "N/A", e.Message);
                    }
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a number of valid title IDs, for xuid1."), TestFrequency("Daily")]
        public void GetSamlTokenWithValidTitleIDs()
        {
            Array titles = Enum.GetValues(typeof(XboxTitle));
            bool failed = false;
            StringBuilder failures = new StringBuilder("The following title IDs failed:\r\n");
            StsResponse response = null;

            foreach (uint title in titles)
            {
                try
                {
                    StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, title, 1);
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response);
                }
                catch (Exception e)
                {
                    failed = true;
                    failures.AppendFormat("\tTitle ID {0} (0x{1} - {2})\r\n", (XboxTitle)title, (response != null) ? response.HResult.ToString("X") : "N/A", e.Message);
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a min uint title ID."), TestFrequency("Daily")]
        public void GetSamlTokenWithMinTitleID()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, uint.MinValue, 1);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a max uint title ID."), TestFrequency("Daily")]
        public void GetSamlTokenWithMaxTitleID()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, uint.MaxValue, 1);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a number of valid audience Uris."), TestFrequency("Daily")]
        public void GetSamlTokenWithValidAudienceUris()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 1);
            StsResponse response = null;
            List<ConfigData> validUris = Config.ValidUris;            
            StringBuilder failures = new StringBuilder("The following valid Uris failed:\r\n");
            bool failed = false;
            Output.Info("Attempting to generate and validate SAML tokens with {0} valid audience Uris...", validUris.Count);

            foreach (ConfigData uri in validUris)
            {
                Output.Info("Sending '{0}' as the audience.", uri.Data);
                request.Audience = uri.Data;
                
                try
                {
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response);
                }
                catch(Exception e)
                {
                    failed = true;
                    failures.AppendFormat("\t{0} (0x{1} - {2})\r\n", uri.Data, (response != null) ? response.HResult.ToString("X") : "N/A", e.Message);
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token for a number of invalid audience Uris."), TestFrequency("Daily")]
        public void GetSamlTokenWithInvalidAudienceUris()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 1);
            StsResponse response = null; 
            List<ConfigData> invalidUris = Config.InvalidUris;
            StringBuilder failures = new StringBuilder("The following invalid Uris failed:\r\n");
            bool failed = false;
            Output.Info("Attempting to generate and validate SAML tokens with {0} invalid audience Uris...", invalidUris.Count);

            foreach (ConfigData uri in invalidUris)
            {
                Output.Info("Sending invalid Uri: audience={0}.", uri.Data);
                request.Audience = uri.Data;

                try
                {
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response, false);
                }
                catch (Exception e)
                {
                    failed = true;
                    failures.AppendFormat("\t{0} (0x{1} - {2})\r\n", uri.Data, (response != null) ? response.HResult.ToString("X") : "N/A", e.Message);
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        [TestCase(BugID = 2100), Description("Attempts to get a SAML token with a request that has a xuid that has leading/trailing whitespace."), TestFrequency("Daily")]
        [CompoundCase("Leading", true, false)]
        [CompoundCase("Trailing", false, true)]
        [CompoundCase("Both", true, true)]
        public class GetSamlTokenWithWhitespaceAudience : TestNode
        {
            public override void Run ()
            {
                bool leading = (bool)MyValues[0];
                bool trailing = (bool)MyValues[1];

                StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 1);
                StsResponse response = null;

                string audience = StsTestBase.AppendWhitespace(StsRequest.DefaultStsAudience, leading, trailing);
                Output.Info("Sending request with whitespace: audience='{0}' [{1}]", audience, System.Web.HttpUtility.UrlEncode(audience));
                request.Audience = audience;

                try
                {
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response);
                }
                catch (Exception e)
                {
                    throw new StsFailureException("The following audience with leading/trailing whitespace failed: " +
                        System.Web.HttpUtility.UrlEncode(audience), e);
                }
            }
        }

        [TestCase, Description("Attempts to get a SAML token with a request that has a xuid that has leading/trailing whitespace."), TestFrequency("Daily"), TestCasePriority(1)]
        [CompoundCase("Leading", true, false)]
        [CompoundCase("Trailing", false, true)]
        [CompoundCase("Both", true, true)]
        public class GetSamlTokenWithLeadingTrailingWhitespaceXuid : TestNode
        {
            public override void Run ()
            {
                bool leading = (bool)MyValues[0];
                bool trailing = (bool)MyValues[1];

                StsRequest request = new StsRequest();
                StsResponse response = null;

                string xuid1 = StsTestBase.AppendWhitespace(request.Xuid1.ToString(true), leading, trailing, StsTestBase.WhitespaceForNumberParsing);
                Output.Info("Sending request with whitespace: xuid1='{0}' [{1}]", xuid1, System.Web.HttpUtility.UrlEncode(xuid1));
                request.Xuid1.Value = xuid1;

                try
                {
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response);
                }
                catch (Exception e)
                {
                    throw new StsFailureException("The following xuid with leading/trailing whitespace failed: " +
                        System.Web.HttpUtility.UrlEncode(xuid1), e);
                }
            }
        }

        [TestCase, Description("Attempts to get a SAML token with a request that has a title ID that has leading/trailing whitespace."), TestFrequency("Daily"), TestCasePriority(1)]
        [CompoundCase("Leading", true, false)]
        [CompoundCase("Trailing", false, true)]
        [CompoundCase("Both", true, true)]
        public class GetSamlTokenWithLeadingTrailingWhitespaceTitleID : TestNode
        {
            public override void Run ()
            {
                bool leading = (bool)MyValues[0];
                bool trailing = (bool)MyValues[1];

                StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 1);
                StsResponse response = null;

                string titleID = StsTestBase.AppendWhitespace(StsRequest.GetUInt32Value(request.TitleID), leading, trailing, StsTestBase.WhitespaceForNumberParsing);
                Output.Info("Sending request with whitespace: titleID='{0}' [{1}]", titleID, System.Web.HttpUtility.UrlEncode(titleID));
                request.TitleID = titleID;

                try
                {
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response);
                }
                catch (Exception e)
                {
                    throw new StsFailureException("The following titleID with leading/trailing whitespace failed: " +
                        System.Web.HttpUtility.UrlEncode(titleID), e);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has multiple audience parameters, with different values."), TestFrequency("Daily")]
        public void GetSamlTokenWithMultipleAudience()
        {
            StsRequest request = new StsRequest();
            string requestUrl = request.ToRequestUrl();
            requestUrl += String.Format("&audience={0}&audience={1}", 
                System.Web.HttpUtility.UrlEncode("http://audience.number.two.com"), 
                System.Web.HttpUtility.UrlEncode("http://lolcatz.com"));
            //when presented with multiple QS params with the same name, ASP.NET joins them with commas
            request.Audience = StsRequest.DefaultStsAudience + ",http://audience.number.two.com,http://lolcatz.com";

            CSGInfo slot = request.FakeSGSlot;
            StsResponse response = StsXrlRequest.GetSecurityToken(ref slot, requestUrl);
            SamlUtil.ValidateSamlToken(request, response, false);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with a random string audience (ascii, high ascii)."), TestFrequency("Daily")]
        public void GetSamlTokenWithRandomStringAudience()
        {
            StsRequest request = new StsRequest(GenerateRandomString(50), GetRandomXboxTitle(), 1);            
            Output.Info("Sending request with a junk string: audience={0}", request.Audience);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response, false);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with a unicode audience."), TestFrequency("Daily")]
        public void GetSamlTokenWithUnicodeAudience()
        {
            StsRequest request = new StsRequest(RandomEx.GlobalRandGen.GenerateUnicodeString(50), GetRandomXboxTitle(), 1);
            Output.Info("Sending request with a junk unicode string: audience={0}", request.Audience);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response, false);            
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with an extremely large audience."), TestFrequency("Daily")]
        public void GetSamlTokenWithLargeAudience()
        {
            StsRequest request = new StsRequest(RandomEx.GlobalRandGen.GenerateRandomString(900), GetRandomXboxTitle(), 1);
            Output.Info("Sending request with a large string: audience={0}", request.Audience);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with XSS/xpath/script/SQL injection audience strings."), TestFrequency("Daily")]
        public void GetSamlTokenWithMaliciousAudience()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 1);
            bool failed = false;
            StringBuilder failures = new StringBuilder("The following malicious audience(s) failed:\r\n");
            StsResponse response = null;

            for (int i = 0; i < Config.SecurityStrings.Count; i++)
            {
                string securityCase = Config.SecurityStrings[i].Data;
                Output.Info("Sending request with security string: audience={0}", securityCase);
                request.Audience = securityCase;

                try
                {
                    response = StsXrlRequest.GetSecurityToken(request);
                    SamlUtil.ValidateSamlToken(request, response, false);
                }
                catch (Exception e)
                {
                    failed = true;
                    failures.AppendFormat("\t{0} (0x{1} - {2})\r\n", securityCase, (response != null) ? response.HResult.ToString("X") : "N/A", e.Message);
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with query string names that are mixed case."), TestFrequency("Daily")]
        public void GetSamlTokenWithMixedCaseQueryStringParams()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 1);
            CSGInfo slot = request.FakeSGSlot;
            string path = request.ToRequestUrl().Replace("xuid1", "XuID1").Replace("audience", "AudiencE").Replace("titleID", "TITLEid");
            StsResponse response = StsXrlRequest.GetSecurityToken(ref slot, path);
            SamlUtil.ValidateSamlToken(request, response);                       
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a hex value with leading zeros."), TestFrequency("Daily")]
        public void GetSamlTokenWithLeadingZerosHex()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), "00000000FFFFFFFF");            
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            SamlUtil.ValidateSamlToken(request, response);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a hex value with leading zeros."), TestFrequency("Daily")]
        public void GetSamlTokenWithLowerCaseHex()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), 4);
            CSGInfo slot = request.FakeSGSlot;
            string path = request.ToRequestUrl().ToLower();
            StsResponse response = StsXrlRequest.GetSecurityToken(ref slot, path);
            SamlUtil.ValidateSamlToken(request, response);
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\STF\GetSecurityTicketTestBase.cs ===
﻿using System;
using System.Collections.Generic;
using System.Net;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.service;
using xonline.common.sql.webstore;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.STS;
using ServerTestFramework.Utilities;

using StsTest.WebService;

namespace StsTest
{
    public class GetSecurityTicketTestBaseStatic : TestNode
    {
        #region Constants

        public const ulong NonXuidPuid = 0x0003000000000000;

        public const uint WMFoundationTitleId = 0x584D07D6;
        public const uint WMFoundationTitleVersion = 0x0;
        public const uint WMFoundationClientVersion = 0x1;

        public const uint Xbox360DashboardTitleId = 0xFFFE07D1;
        public const uint Xbox360DashboardTitleVersion = 0x0;

        // title id will be determined in SetUpTitles
        public static uint WMGameTitleId = 0x584D07D8;
        public const uint WMGameTitleVersion = 0x4;
        public const uint WMGameTitleVersionLower = 0x2;
        public const uint WMGameTitleVersionInvalid = 0x3;
        public const byte WMConsoleType = 5;

        public const uint WebGameTitleId = 0x584D07D7;
        public const uint WebGameTitleVersion = 0x1;
        public const byte WebGameConsoleType = 6;

        // title id will be determined in SetUpTitles
        public static uint WMAndWebGameTitleId = 0;
        public const uint WMAndWebGameTitleVersion = 0x10;

        public const uint InvalidTitleId = 0x1F74DEAD;
        public const uint InvalidTitleVersion = 0x0;

        public const string MachineSubject = "XboxLive Machine security ticket";
        public const string UserSubject = "XboxLive User security ticket";
        public const string PartnerSubject = "XboxLive Partner security ticket";

        // TODO: Pull the actual values from the setting
        public static TimeSpan MachineLifetime = new TimeSpan(1, 0, 0);
        public static TimeSpan UserLifetime = new TimeSpan(4, 0, 0);
        public static TimeSpan PartnerLifetime = new TimeSpan(4, 0, 0);

        #endregion

        #region Types

        public enum RequestMethodEnum
        {
            Get,
            Post,
            Soap,
            SoapThroughAA,
            SoapAudience
        }

        public class TestData
        {
            public TestData (RequestMethodEnum requestMethod)
            {
                RequestObject = GetSecurityTicketTestBaseStatic.CreateRequestObject(requestMethod);
                RequestObject.AAInfo = new AAInfoWrapper();
                RequestObject.AAInfo.IpAddressInternet = GetSecurityTicketTestBaseStatic.ActiveAuthFacingIPAddress.ToString();
                RequestMethod = requestMethod;
                ValidExpectations = new GetSecurityTicketExpectations();
                GSTParams = new STSUtil.GetSecurityTicketParameters();
            }

            public IGetSecurityTicket RequestObject = null;
            public RequestMethodEnum RequestMethod = RequestMethodEnum.Soap;
            public GetSecurityTicketExpectations ValidExpectations = null;
            public STSUtil.GetSecurityTicketParameters GSTParams = null;
        }

        #endregion

        #region Test Execution

        public override void Run ()
        {
            RunTest();
        }

        public virtual void RunTest () { }

        #endregion

        #region Requests

        public static IGetSecurityTicket CreateRequestObject (RequestMethodEnum method)
        {
            switch (method)
            {
                case RequestMethodEnum.Get: return new GetSecurityTicketGet();
                case RequestMethodEnum.Post: return new GetSecurityTicketPost();
                case RequestMethodEnum.Soap: return new GetSecurityTicketSoap();
                case RequestMethodEnum.SoapThroughAA: return new GetSecurityTicketSoapThroughAA();
                case RequestMethodEnum.SoapAudience: return new GetSecurityTicketAudienceSoap();
            }

            throw new ArgumentOutOfRangeException("method");
        }

        protected static string GetSecurityTicket (TestData testData, byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId)
        {
            testData.ValidExpectations.SetSecurityTicketExpectations(testData.RequestObject.AAInfo, platformType, titleId, titleVersion, clientVersion);
            return testData.RequestObject.GetSecurityTicket(platformType, titleId, titleVersion, clientVersion, deviceId);
        }

        protected static string GetPartnerSecurityTicket (TestData testData, ulong xuid, uint titleId, uint titleVersion)
        {
            testData.ValidExpectations.SetSecurityTicketExpectations(testData.RequestObject.AAInfo, xuid, titleId, titleVersion);
            if (String.IsNullOrEmpty(testData.RequestObject.AAInfo.SamlToken))
            {
                CreateSamlTokenForAA(testData);
            }
            return testData.RequestObject.GetPartnerSecurityTicket(xuid, titleId, titleVersion);
        }

        protected static string GetPartnerSecurityTicket (TestData testData, ulong xuid, uint titleId, uint titleVersion, string audienceUri)
        {
            testData.ValidExpectations.SetSecurityTicketExpectations(testData.RequestObject.AAInfo, xuid, titleId, titleVersion);

            if (String.IsNullOrEmpty(testData.RequestObject.AAInfo.SamlToken))
            {
                CreateSamlTokenForAA(testData);
            }

            if (audienceUri == null)
            {
                testData.ValidExpectations.AudienceUri = "http://test.xboxlive.com/";
                return testData.RequestObject.GetPartnerSecurityTicket(xuid, titleId, titleVersion);
            }
            else
            {
                testData.ValidExpectations.AudienceUri = audienceUri;
                return testData.RequestObject.GetPartnerSecurityTicket(xuid, titleId, titleVersion, audienceUri);
            }
        }

        #endregion

        #region Test Helpers

        #region Users

        protected static void SetUser (TestData testData, UserEditor user)
        {
            if (testData.ValidExpectations == null)
            {
                throw new GetSecurityTicketTestBaseException("ValidExpectations is null");
            }

            testData.RequestObject.AAInfo.PassportPuid = (ulong)(user.UserPassportPuid);
            testData.ValidExpectations.User = user;
        }

        #region UserCache

        protected class CachedUser { public UserEditor ue; public string env; public DateTime gen; }

        protected static Dictionary<string, CachedUser> _UserCache = new Dictionary<string, CachedUser>();

        protected static readonly TimeSpan _UserCreationWaitTime = new TimeSpan(0, 0, 30);

        protected delegate void UserCreationDelegate (UserEditor ue);

        protected static UserEditor GetCachedUser (string name, UserCreationDelegate ucd)
        {
            CachedUser cu;
            lock (_UserCache)
            {
                if (!_UserCache.TryGetValue(name, out cu))
                {
                    cu = new CachedUser();
                    _UserCache.Add(name, cu);
                }
            }

            if (cu.ue == null || cu.env != Global.CurrentEnvironment.Environment)
            {
                cu.ue = UserEditor.CreateNew(UserCreationType.Xbox360);
                cu.gen = DateTime.UtcNow;
                cu.env = Global.CurrentEnvironment.Environment;
                if (ucd != null)
                {
                    ucd(cu.ue);
                }
            }

            TimeSpan since = DateTime.UtcNow - cu.gen;

            // commenting out wait time as we now go to uodb if needed
            //if (since < _UserCreationWaitTime)
            //{
            //    TimeSpan left = _UserCreationWaitTime - since;
            //    Output.Info("Waiting for XCache ({0} left)", left);
            //    System.Threading.Thread.Sleep(left);
            //}

            return cu.ue;
        }

        #endregion

        #region User Types

        /// <summary>
        /// It's not that he isn't special, he just doesn't have any unique properties.
        /// His mommy still loves him.
        /// </summary>
        public static UserEditor NonSpecialUser
        {
            get
            {
                return GetCachedUser("NonSpecialUser", null);
            }
        }

        public static UserEditor NotAcceptedTOSUser
        {
            get
            {
                UserEditor ue = GetCachedUser("NotAcceptedTOSUser",
                    (UserCreationDelegate)(delegate(UserEditor user) { user.AcceptedTOSDate = (DateTime)System.Data.SqlTypes.SqlDateTime.MinValue; }));
                return ue;
            }
        }

        public static UserEditor NotProvisionedUser
        {
            get
            {
                UserEditor ue = GetCachedUser("NotProvisionedUser",
                    (UserCreationDelegate)(delegate(UserEditor user) { user.RemoveAllPerServiceTypeData(); }));
                return ue;
            }
        }

        public static UserEditor SuspendedUser
        {
            get
            {
                UserEditor ue = GetCachedUser("SuspendedUser",
                    (UserCreationDelegate)(delegate(UserEditor user) { user.BannedUntilDate = DateTime.MaxValue; user.PerServiceBannedUntilDate = DateTime.MaxValue; }));
                return ue;
            }
        }

        public static UserEditor SuspendedUser_KDCBan
        {
            get
            {
                UserEditor ue = GetCachedUser("SuspendedUser_KDCBan",
                    (UserCreationDelegate)(delegate(UserEditor user) { user.BannedUntilDate = DateTime.MaxValue; }));
                return ue;
            }
        }

        public static UserEditor SuspendedUser_PerServiceBan
        {
            get
            {
                UserEditor ue = GetCachedUser("SuspendedUser_PerServiceBan",
                    (UserCreationDelegate)(delegate(UserEditor user) { user.PerServiceBannedUntilDate = DateTime.MaxValue; }));
                return ue;
            }
        }

        public static UserEditor SuspendedUser_ZuneAllowed
        {
            get
            {
                UserEditor ue = GetCachedUser("SuspendedUser_ZuneAllowed",
                    (UserCreationDelegate)(delegate(UserEditor user) {
                        // ban them up and down
                        user.BannedUntilDate = DateTime.MaxValue; user.PerServiceBannedUntilDate = DateTime.MaxValue;

                        // but add zune per service data, allowing them there
                        DateTime now = DateTime.UtcNow;
                        DateTime beforeNow = now.Subtract(new TimeSpan(100));
                        user.AddPerServiceTypeDate((byte)xonline.common.protocol.ServiceTypeEnum.Zune,
                            beforeNow, beforeNow, beforeNow, null, 0, null);
                    }));
                return ue;
            }
        }

        public static UserEditor GamertagChangeRequiredUser
        {
            get
            {
                UserEditor ue = GetCachedUser("GamertagChangeRequiredUser",
                    (UserCreationDelegate)(delegate(UserEditor user) { user.NameChangeRequired = 1; }));
                return ue;
            }
        }

        public static UserEditor GoldUser
        {
            get
            {
                UserEditor ue = GetCachedUser("GoldUser",
                    (UserCreationDelegate)(delegate(UserEditor user)
                    {
                        user.RemoveAllSubscriptions(true);
                        user.AddBaseSubscription(BaseSubscriptions.Xbox360Gold);
                    }));
                return ue;
            }
        }

        public static UserEditor SilverUser
        {
            get
            {
                UserEditor ue = GetCachedUser("SilverUser",
                    (UserCreationDelegate)(delegate(UserEditor user)
                    {
                        user.RemoveAllSubscriptions(true);
                        user.AddBaseSubscription(BaseSubscriptions.Xbox360Silver);
                    }));
                return ue;
            }
        }

        public static UserEditor NewUser
        {
            get
            {
                UserEditor ue = GetCachedUser("NewUser",
                    (UserCreationDelegate)(delegate(UserEditor user)
                    {
                        user.RemoveAllSubscriptions(true);
                    }));
                return ue;
            }
        }

        public static UserEditor ZuneUser
        {
            get
            {
                UserEditor ue = GetCachedUser("ZuneUser",
                    (UserCreationDelegate)(delegate(UserEditor user)
                    {
                        user.RemoveAllPerServiceTypeData();
                        DateTime now = DateTime.UtcNow;
                        user.AddPerServiceTypeDate((byte)xonline.common.protocol.ServiceTypeEnum.Zune,
                            now, now, now.Subtract(new TimeSpan(100)), null, 0, null);
                    }));
                return ue;
            }
        }

        public static UserEditor UnsupportedCountryUser
        {
            get
            {
                UserEditor ue = GetCachedUser("UnsupportedCountryUser",
                    (UserCreationDelegate)(delegate(UserEditor user)
                    {
                        byte[] supportedByXenon = GetUnsupportedCountries((byte)xonline.common.protocol.ServiceTypeEnum.XboxLive,
                            (byte)xonline.common.protocol.ClientTypeEnum.Xenon);
                        byte[] supportedByWM7 = GetUnsupportedCountries((byte)xonline.common.protocol.ServiceTypeEnum.XboxLive,
                            (byte)xonline.common.protocol.ClientTypeEnum.WindowsPhone);
                        byte ans = 0;

                        for (int i = 0; i < supportedByXenon.Length; ++i)
                        {
                            bool found = false;
                            byte currXenon = supportedByXenon[i];

                            for (int j = 0; j < supportedByWM7.Length; ++j)
                            {
                                if (currXenon == supportedByWM7[j])
                                {
                                    found = true;
                                    break;
                                }
                            }

                            if (!found)
                            {
                                ans = currXenon;
                                break;
                            }
                        }

                        if (0 == ans)
                        {
                            throw new UnexpectedTestResultException("Did not find an unsupported country!");
                        }

                        user.CountryId = ans;
                    }));
                return ue;
            }
        }

        public static byte[] GetUnsupportedCountries (byte serviceType, byte clientType)
        {
            List<byte> ans = new List<byte>();

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.Partition = WstCommand.AnyPartition;
                ws.StoredProc = "dbo.p_xuacs_get_country_details_by_service_client_types";

                ws.AddParameter(ParamType.INPUT, "@service_type", serviceType);
                ws.AddParameter(ParamType.INPUT, "@client_type", clientType);

                // call the procedure
                using (WstDataReader rdr = ws.Execute())
                {
                    while (rdr.Read())
                    {
                        ans.Add(rdr.GetByte(rdr.GetOrdinal("ti_country_id")));
                    }
                }
            }

            return ans.ToArray();
        }

        #endregion

        #endregion

        #region AAInfo Helpers

        public static IPAddress _ActiveAuthFacingIPAddress = null;

        public static IPAddress ActiveAuthFacingIPAddress
        {
            get
            {
                if (_ActiveAuthFacingIPAddress == null)
                {
                    IPAddress ans = IpHelper.GetBestInterface(Global.XEnv.GetVirtualInterface(VirtualInterface.authsg).Address);

                    if (ans == null)
                    {
                        IPAddress[] addrs = Dns.GetHostAddresses("");

                        if (addrs.Length > 0)
                        {
                            ans = addrs[0];
                        }
                        else
                        {
                            throw new GetSecurityTicketTestBaseException("Unable to find an IP address.");
                        }
                    }

                    _ActiveAuthFacingIPAddress = ans;
                }

                return _ActiveAuthFacingIPAddress;
            }
        }

        public static string GenerateDeviceId ()
        {
            // Was certificate thumbprint, 20 bytes == 40 hex chars
            //return RandomEx.GlobalRandGen.GenerateHexString(40).Substring(2);

            // now its some base64 data of some length
            byte[] temp = new byte[32];
            RandomEx.GlobalRandGen.NextBytes(temp);
            return Convert.ToBase64String(temp);
        }

        public static ulong GenerateCID ()
        {
            return RandomEx.GlobalRandGen.NextUlong();
        }

        public static void SetValidAAInfoTimes (TestData testData)
        {
            SetValidAAInfoTimes(testData.RequestObject.AAInfo);
        }

        public static void SetValidAAInfoTimes (AAInfoWrapper aa)
        {
            DateTime now = DateTime.UtcNow;
            aa.IssueInstant = now.Subtract(new TimeSpan(1, 0, 0));
            aa.NotAfter = now.Add(new TimeSpan(5, 0, 0));
        }

        #endregion

        #region Validation

        public static void CheckXErr (TestData testData, uint expected)
        {
            if (testData.RequestObject.XErr == null)
            {
                throw new UnexpectedTestResultException(
                    String.Format("X-Err was unexpectedly not present: expected {0}", PrettyHResultString(expected)));
            }

            CheckHR("X-Err", testData.RequestObject.XErr.Value, expected);
        }

        public static void CheckHR (string name, uint got, uint expected)
        {
            if (got != expected)
            {
                throw new UnexpectedTestResultException(
                    String.Format(name + " was not the expected value: expected {0}, got {1}",
                    PrettyHResultString(expected), PrettyHResultString(got)));
            }
        }

        public static string PrettyHResultString (uint hresult)
        {
            string nice_name = HResultReverseLookup(hresult);

            if (nice_name == null)
            {
                return hresult.ToString("X8");
            }
            else
            {
                return (nice_name + " [" + hresult.ToString("X8") + "]");
            }
        }

        protected static Dictionary<uint, string> _HResultReverseLookup = null;

        protected static string HResultReverseLookup (uint hresult)
        {
            if (_HResultReverseLookup == null)
            {
                Dictionary<uint, string> result = new Dictionary<uint, string>();
                FieldInfo[] hresults = GetConstants(typeof(HResult));

                foreach (FieldInfo fi in hresults)
                {
                    uint key = (uint)(fi.GetRawConstantValue());

                    if (result.ContainsKey(key))
                    {
                        //Global.RO.Warn("HResult contains a duplicate entry: First occurance of 0x{0:X8} is {1}, second is {2}",
                        //    key, result[key], fi.Name);
                    }
                    else
                    {
                        result.Add(key, fi.Name);
                    }
                }

                _HResultReverseLookup = result;
            }

            string ans;
            if (_HResultReverseLookup.TryGetValue(hresult, out ans))
            {
                return ans;
            }
            else
            {
                return null;
            }
        }

        protected static FieldInfo[] GetConstants (Type type)
        {
            List<FieldInfo> constants = new List<FieldInfo>();

            FieldInfo[] fieldInfos = type.GetFields(BindingFlags.Public | BindingFlags.Static);

            // Go through the list and only pick out the constants
            foreach (FieldInfo fi in fieldInfos)
                // IsLiteral determines if its value is written at 
                //   compile time and not changeable
                // IsInitOnly determine if the field can be set 
                //   in the body of the constructor
                // for C# a field which is readonly keyword would have both true 
                //   but a const field would have only IsLiteral equal to true
                if (fi.IsLiteral && !fi.IsInitOnly)
                    constants.Add(fi);

            // Return an array of FieldInfos
            return constants.ToArray();
        }

        #endregion

        #region SAML Token Generation

        /// <summary>Backing for SamlSigningCertificate.</summary>
        private static X509Certificate2 _SamlSigningCertificate = null;

        /// <summary>
        /// The certificate used to sign Saml tokens.
        /// </summary>
        protected static X509Certificate2 SamlSigningCertificate
        {
            get
            {
                if (_SamlSigningCertificate == null)
                {
                    try
                    {
                        _SamlSigningCertificate = STSUtil.GetStsSigningCertificate();
                    }
                    catch { }

                    if (_SamlSigningCertificate == null)
                    {
                        Global.RO.Warn("Falling back to local STS signing certificate.  Works only on xblobs and hypernet.");
                        System.IO.Stream certStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("sts.test.xboxlive.com.pfx");
                        System.IO.BinaryReader certReader = new System.IO.BinaryReader(certStream);
                        byte[] certBytes = certReader.ReadBytes((int)(certStream.Length));
                        _SamlSigningCertificate = new X509Certificate2(certBytes);
                    }
                }

                return _SamlSigningCertificate;
            }
        }

        protected static void SetSamlTokenParamDefaults (TestData testData, STSUtil.GetSecurityTicketParameters gstp)
        {
            AAInfoWrapper aa = testData.RequestObject.AAInfo;

            if (!gstp.GenerateUserClaims)
            {
                gstp.SubjectName = XblSamlToken.subject_name_machine;
            }

            //gstp.PlatformType = ValidExpectations.Platform.ToString();
            gstp.DeviceID = aa.CertDeviceId;
            //gstp.ClientVersion = ValidExpectations.ClientVersion.ToString();
            gstp.TitleID = testData.ValidExpectations.TitleId.ToString("X8");
            gstp.TitleVersion = testData.ValidExpectations.TitleVersion.ToString();
            gstp.Puid0 = aa.PassportPuid.ToString();
            gstp.CID0 = aa.PassportCId.ToString();

            if (testData.ValidExpectations.User != null && testData.ValidExpectations.User.Exists)
            {
                gstp.Xuid0 = testData.ValidExpectations.User.Puid.ToString();
                gstp.Gamertag0 = testData.ValidExpectations.User.Gamertag;
            }

            gstp.NotBefore = aa.IssueInstant;
            gstp.NotAfter = aa.NotAfter;
        }

        protected static void CreateSamlTokenForAA (TestData testData)
        {
            SetSamlTokenParamDefaults(testData, testData.GSTParams);
            CreateSamlTokenForAA(testData, testData.GSTParams);
        }

        protected static void CreateSamlTokenForAA (TestData testData, STSUtil.GetSecurityTicketParameters gstp)
        {
            gstp.Certificate = SamlSigningCertificate;

            testData.RequestObject.AAInfo.SamlToken = STSUtil.GetSecurityTicket(gstp);
        }

        #endregion

        protected static string CreateFlashVersionString (uint version)
        {
            return string.Format("{0:00}.{1:00}.{2:00000}.{3:000}", (ushort)((version >> 28) & 0xF), (ushort)((version >> 24) & 0xF),
                (ushort)((version >> 8) & 0xFFFF), (ushort)(version & 0xFF));
        }

        #endregion
    }

    public class GetSecurityTicketTestBase : GetSecurityTicketTestBaseStatic
    {
        #region Test Execution

        public TestData TestDataInstance = null;
        // this method is only used to allow PreRun to set up the value
        public RequestMethodEnum RequestMethod = RequestMethodEnum.Soap;

        public IGetSecurityTicket RequestObject { get { return TestDataInstance.RequestObject; } }
        public GetSecurityTicketExpectations ValidExpectations { get { return TestDataInstance.ValidExpectations; } }
        public STSUtil.GetSecurityTicketParameters GSTParams { get { return TestDataInstance.GSTParams; } }

        public override void Run ()
        {
            TestDataInstance = new TestData(RequestMethod);
            RunTest();
        }

        #endregion

        #region Requests

        protected string GetSecurityTicket (byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId)
        {
            return GetSecurityTicket(TestDataInstance, platformType, titleId, titleVersion, clientVersion, deviceId);
        }

        protected string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion)
        {
            return GetPartnerSecurityTicket (TestDataInstance, xuid, titleId, titleVersion);
        }

        protected string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion, string audienceUri)
        {
            return GetPartnerSecurityTicket (TestDataInstance, xuid, titleId, titleVersion, audienceUri);
        }

        #endregion

        #region Test Helpers

        #region Users

        protected void SetUser (UserEditor user)
        {
            SetUser(TestDataInstance, user);
        }

        #endregion

        #region AAInfo Helpers

        public void SetValidAAInfoTimes ()
        {
            SetValidAAInfoTimes(TestDataInstance);
        }

        #endregion

        #region Validation

        public void CheckXErr (uint expected)
        {
            CheckXErr(TestDataInstance, expected);
        }

        #endregion

        #region SAML Token Generation

        protected void SetSamlTokenParamDefaults (STSUtil.GetSecurityTicketParameters gstp)
        {
            SetSamlTokenParamDefaults(TestDataInstance, gstp);
        }

        protected void CreateSamlTokenForAA ()
        {
            CreateSamlTokenForAA(TestDataInstance);
        }

        protected void CreateSamlTokenForAA (STSUtil.GetSecurityTicketParameters gstp)
        {
            CreateSamlTokenForAA(TestDataInstance, gstp);
        }

        #endregion

        #endregion
    }

    public class GetSecurityTicketExpectations
    {
        public AAInfoWrapper AAInfoWrapper;
        public byte Platform;
        public uint TitleId;
        public uint TitleVersion;
        public uint ClientVersion;
        public UserEditor User;
        public string GamerTagOverride;
        public int? Tier;
        public ulong? MachineID;
        public bool IgnoreCID = false;
        public int? Country;
        public string Privileges;
        public TimeSpan? Lifetime;
        public string AudienceUri = "http://sts.xboxlive.com/";

        public StsPlugin.ValidationLevel Validation = StsPlugin.GetValidationLevel();

        public ulong ResultMachineID;
        public SamlAttributeCollection ResultAttributes;

        public xonline.common.service.AAInfo AAInfo { get { return AAInfoWrapper; } }

        public GetSecurityTicketExpectations () { }

        public GetSecurityTicketExpectations (AAInfoWrapper aainfowrapper, byte platform, uint titleid, uint titleversion, uint clientversion)
        {
            AAInfoWrapper = aainfowrapper;
            Platform = platform;
            TitleId = titleid;
            TitleVersion = titleversion;
            ClientVersion = clientversion;
        }

        public void SetSecurityTicketExpectations (AAInfoWrapper aainfowrapper, byte platform, uint titleid, uint titleversion, uint clientversion)
        {
            AAInfoWrapper = aainfowrapper;
            Platform = platform;
            TitleId = titleid;
            TitleVersion = titleversion;
            ClientVersion = clientversion;
        }

        public void SetSecurityTicketExpectations (AAInfoWrapper aainfowrapper, ulong xuid, uint titleid, uint titleversion)
        {
            AAInfoWrapper = aainfowrapper;
            User = UserEditor.FromPuid(xuid);
            TitleId = titleid;
            TitleVersion = titleversion;
        }
    }

    public class GetSecurityTicketTestBaseException : Exception
    {
        public GetSecurityTicketTestBaseException (string message) : base(message) { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\N_GetSecurityTokenTests.cs ===
/******************************************************************************
*
* Copyright (C) Microsoft Corporation.  All rights reserved.
* 
* File: N_GetSecurityTokenTests.cs
*
* Description: Negative test cases for STS FD service.
*
* Author: johnmcp
* 
* Date Created: 06/20/2009
* 
******************************************************************************/

using System;
using System.Text;
using xonline.common.service;
using xonline.common.diagnostics;
using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Utilities;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    [TestGroup, Owner("wisgt"), TestCasePriority(3), TestFrequency("regression"), Description("Contains the negative test cases for the STS GetSecurityToken FD interface.")]
    public class N_GetSecurityTokenTests : StsTestBase
	{        
        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has no xuids."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithNoXuids()
        {
            StsRequest request = new StsRequest(0);
            Output.Info("Sending request with no xuid(s).");
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has an empty xuid1."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithEmptyXuid()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), String.Empty);
            Output.Info("Sending request with empty xuid1 (xuid1=).");
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that does not have the required xuid1 parameter."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithNoXuid1()
        {
            StsRequest request = new StsRequest(4);
            request.Xuid1.Ignore = true;

            Output.Info(request.Xuids.Print());
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that multiple xuids, but one of them is invalid."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithOneBadXuid()
        {
            StsRequest request = new StsRequest(4);
            string junkXuid = GenerateRandomString(15);
            request.Xuid4.Value = junkXuid;

            Output.Info(request.Xuids.Print());
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has multiple xuid1 parameters, with different values."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithMultipleXuid1()
        {
            StsRequest request = new StsRequest();
            string requestUrl = request.ToRequestUrl();
            requestUrl += String.Format("&xuid1={0}&xuid1={1}", new Xuid().ToString(), new Xuid().ToString());

            CSGInfo slot = request.FakeSGSlot;
            StsResponse response = StsXrlRequest.GetSecurityToken(ref slot, requestUrl);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with a xuid1 that only contains whitespace."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithWhitespaceXuid()
        {
            string whitespaceXuid = WhitespaceString(RandomEx.GlobalRandGen.Next(1, 15));
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), whitespaceXuid);
            
            Output.Info("Sending request with whitespace: xuid1={0}", whitespaceXuid);            
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with a xuid1 that exceeds ulong (unsigned int64)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithBigUlongXuid()
        {
            string bigXuid = ulong.MaxValue.ToString("X") + "FF93A45";
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), bigXuid);            

            Output.Info("Sending request with big ulong: xuid1={0}", bigXuid);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a negative (< 0) xuid1."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithNegativeXuid()
        {
            string negativeXuid = "-" + new Xuid().ToString();
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), negativeXuid);            

            Output.Info("Sending request with negative ulong: xuid1={0}", negativeXuid);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a decimal xuid1."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithDecimalXuid()
        {
            string decimalXuid = Xuid.GenerateRandomUInt64().ToString();
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), decimalXuid);

            Output.Info("Sending request with decimal ulong: xuid1={0}", decimalXuid);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a floating point xuid1."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithFloatXuid()
        {
            string floatingPointXuid = "38917591267395.18396675";
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), floatingPointXuid);            

            Output.Info("Sending request with negative ulong: xuid1={0}", floatingPointXuid);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a valid xuid1, but with a hex prefix of 0x."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithHexPrefixXuid()
        {
            StsRequest request = new StsRequest();
            string hexXuid = "0x" + request.Xuid1.ToString();
            request.Xuid1.Value = hexXuid;

            Output.Info("Sending request in hex format: xuid1={0}", hexXuid);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a random xuid1 string (alphanumberic, including high ascii)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithRandomStringXuid()
        {
            string junkData = GenerateRandomString(50);
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), junkData);

            Output.Info("Sending request with junk string: xuid1={0}", junkData);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a random unicode xuid1 string."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnicodeStringXuid()
        {
            string unicodeString = RandomEx.GlobalRandGen.GenerateUnicodeString(50);
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), unicodeString);

            Output.Info("Sending request with junk unicode string: xuid1={0}", unicodeString);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a xuid1 string that is not escaped (url encoded)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnescapedXuid()
        {
            StsRequest request = new StsRequest();
            string unescapedString = request.Xuid1.ToString();
            int mid = unescapedString.Length / 2;
            unescapedString = unescapedString.Remove(mid, 4);
            unescapedString = unescapedString.Insert(mid, "+>:/@$");
            request.Xuid1.Value = unescapedString;

            Output.Info("Sending request with unescaped string: xuid1={0}", unescapedString);
            StsResponse response = StsXrlRequest.GetSecurityToken(request, false);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with an extremely large xuid1 string."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithLargeXuid()
        {
            string largeString = RandomEx.GlobalRandGen.GenerateRandomString(900);
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), largeString);

            Output.Info("Sending request with large string: xuid1={0}", largeString);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        [TestCase, Description("Attempts to get a SAML token with with XSS/xpath/script/SQL injection xuid1 strings."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithMaliciousXuids()
        {
            StsRequest request = new StsRequest();
            bool failed = false;
            StringBuilder failures = new StringBuilder("The following malicious xuids failed:\r\n");

            for (int i = 0; i < Config.SecurityStrings.Count; i++)
            {
                string securityCase = Config.SecurityStrings[i].Data;
                Output.Info("Sending request with security string: xuid1={0}", securityCase);
                request.Xuid1.Value = securityCase;

                try
                {
                    StsResponse response = StsXrlRequest.GetSecurityToken(request);
                    VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
                }
                catch (Exception e)
                {
                    failed = true;
                    failures.AppendFormat("\t{0}: {1}\r\n", securityCase, e.Message);
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has no title ID."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithNoTitleID()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, null, 1);
            Output.Info("Sending request with no titleID.");

            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has an empty title ID (titleID=)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithEmptyTitleID()
        {
            StsRequest request = new StsRequest();
            request.TitleID = String.Empty;
            
            Output.Info("Sending request with an empty titleID (titleID=).");
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has multiple titleID parameters, with different values."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithMultipleTitleID()
        {
            StsRequest request = new StsRequest();
            string requestUrl = request.ToRequestUrl();
            requestUrl += String.Format("&titleID={0}&titleID={1}", StsRequest.GetUInt32Value((uint)XboxTitle.LastFM), StsRequest.GetUInt32Value((uint)XboxTitle.Facebook));

            CSGInfo slot = request.FakeSGSlot;
            StsResponse response = StsXrlRequest.GetSecurityToken(ref slot, requestUrl);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with a titleID that only contains whitespace."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithWhitespaceTitleID()
        {
            StsRequest request = new StsRequest();
            string whitespaceTitleID = WhitespaceString(RandomEx.GlobalRandGen.Next(1, 15));
            request.TitleID = whitespaceTitleID;

            Output.Info("Sending request with whitespace: titleID={0}", whitespaceTitleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has a title ID that exceeds the capacity of a uint."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithBigUintTitleID()
        {
            StsRequest request = new StsRequest();
            string titleID = StsRequest.GetUInt32Value(uint.MaxValue) + "AA63B73C";
            request.TitleID = titleID;

            Output.Info("Sending request with big uint: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has a negative title ID."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithNegativeTitleID()
        {
            StsRequest request = new StsRequest();
            string titleID = "-" + StsRequest.GetUInt32Value((uint)XboxTitle.Facebook);
            request.TitleID = titleID;

            Output.Info("Sending request with negative uint: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has a floating point title ID."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithFloatTitleID()
        {
            StsRequest request = new StsRequest();
            string titleID = StsRequest.GetUInt32Value((uint)XboxTitle.Twitter);
            titleID = titleID.Insert(titleID.Length / 2, ".");
            request.TitleID = titleID;

            Output.Info("Sending request with floating point: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has a title ID, with a hex prefix."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithHexTitleID()
        {
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, (uint)XboxTitle.LastFM, 1);
            string titleID = "0x" + StsRequest.GetUInt32Value((uint)XboxTitle.LastFM);
            request.TitleID = titleID;
            
            Output.Info("Sending request with a hex prefix: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has random string title ID (ascii, high ascii)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithRandomStringTitleID()
        {
            StsRequest request = new StsRequest();
            string titleID = GenerateRandomString(50);
            request.TitleID = titleID;

            Output.Info("Sending request with junk random string: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has a unicode title ID."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnicodeTitleID()
        {
            StsRequest request = new StsRequest();
            string titleID = RandomEx.GlobalRandGen.GenerateUnicodeString(50);
            request.TitleID = titleID;

            Output.Info("Sending request with junk unicode string: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a titleID string that is not escaped (url encoded)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnescapedTitleID()
        {
            StsRequest request = new StsRequest();
            string unescapedString = StsRequest.GetUInt32Value(request.TitleID);
            int mid = unescapedString.Length / 2;
            unescapedString = unescapedString.Remove(mid, 4);
            unescapedString = unescapedString.Insert(mid, "+:\\>/@$");
            request.TitleID = unescapedString;

            Output.Info("Sending request with unescaped string: titleID={0}", unescapedString);
            StsResponse response = StsXrlRequest.GetSecurityToken(request, false);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with an extremely long titleID string."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithLargeTitleID()
        {
            StsRequest request = new StsRequest();
            string titleID = RandomEx.GlobalRandGen.GenerateRandomString(900);
            request.TitleID = titleID;

            Output.Info("Sending request with large string: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with with XSS/xpath/script/SQL injection titleID strings."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithMaliciousTitleID()
        {
            StsRequest request = new StsRequest();
            bool failed = false;
            StringBuilder failures = new StringBuilder("The following malicious xuids failed:\r\n");

            for (int i = 0; i < Config.SecurityStrings.Count; i++)
            {
                string securityCase = Config.SecurityStrings[i].Data;
                Output.Info("Sending request with security string: titleID={0}", securityCase);
                request.TitleID = securityCase;

                try
                {
                    StsResponse response = StsXrlRequest.GetSecurityToken(request);
                    VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
                }
                catch (Exception e)
                {
                    failed = true;
                    failures.AppendFormat("\t{0}: {1}\r\n", securityCase, e.Message);
                }
            }

            if (failed)
                throw new StsFailureException(failures.ToString());
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request that has no audience."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithNoAudience()
        {
            StsRequest request = new StsRequest(null, GetRandomXboxTitle(), 1);
            Output.Info("Sending request with no audience.");

            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with an empty audience."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithEmptyAudience()
        {
            StsRequest request = new StsRequest(String.Empty, GetRandomXboxTitle(), 1);
            Output.Info("Sending request with an empty audience (audience=).");

            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase(BugID=2100), Description("Attempts to get a SAML token with a request with an audience that only contains whitespace."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithWhitespaceAudience()
        {
            string whitespaceAudience = WhitespaceString(RandomEx.GlobalRandGen.Next(1, 15));
            StsRequest request = new StsRequest(whitespaceAudience, GetRandomXboxTitle(), 1);

            Output.Info("Sending request with whitespace: audience={0}", whitespaceAudience);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a request with an unescaped audience (not Url encoded)."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnescapedAudience()
        {
            string audience = "http://this.uri.wont/be.encoded/?mkt=<xml>;ja-jp";
            StsRequest request = new StsRequest(audience, GetRandomXboxTitle(), 1);
            
            Output.Info("Sending request with an unescaped string: audience={0}", audience);
            StsResponse response = StsXrlRequest.GetSecurityToken(request, false);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }        

        /******************************************************************************
        *           <<<<<<<<<<<<<<<<< Negative SG Tests >>>>>>>>>>>>>>>>              *
        ******************************************************************************/

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a mismatch of a single xuid in the request, when validating with the SG."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnverifiedSGXuid()
        {
            StsRequest request = new StsRequest(4);
            CSGInfo slot = request.FakeSGSlot;
            
            for (int i = 0; i < 4; i++)
            {
                slot = request.ResetFakeSGSLot();    //be sure to reset the slot between iterations
                if (i == 0)
                {
                    slot.userPuid0 = Xuid.GenerateRandomUInt64();
                    request.Xuid2.Ignore = request.Xuid3.Ignore = request.Xuid4.Ignore = true;
                }
                else if (i == 1)
                {
                    slot.userPuid1 = Xuid.GenerateRandomUInt64();
                    request.Xuid2.Ignore = false;
                    request.Xuid3.Ignore = request.Xuid4.Ignore = true;
                }
                else if (i == 2)
                {
                    slot.userPuid2 = Xuid.GenerateRandomUInt64();
                    request.Xuid3.Ignore = false;
                    request.Xuid2.Ignore = request.Xuid4.Ignore = true;
                }
                else if (i == 3)
                {
                    slot.userPuid3 = Xuid.GenerateRandomUInt64();
                    request.Xuid4.Ignore = false;
                    request.Xuid2.Ignore = request.Xuid3.Ignore = true;
                }

                request.FakeSGSlot = slot;
                Output.Info(request.Xuids.Print());  //show what user combination we're sending in the request
                StsResponse response = StsXrlRequest.GetSecurityToken(request);
                VerifyHResult(HResult.XONLINE_E_STS_ERROR, response.HResult);                
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a mismatch of one or more xuids, when validating with the SG."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithUnverifiedSGXuids()
        {
            StsRequest request = new StsRequest(4);
            CSGInfo slot = request.FakeSGSlot;
            int iterations = (request.Xuids.Count * request.Xuids.Count) - 1;

            for (int i = 3; i <= iterations; i++)
            {
                if ((i & 1) == 1)   //the first xuid always needs to be set
                {
                    slot = request.ResetFakeSGSLot();    //be sure to reset the slot between iterations
                    if ((i & 2) == 2)
                        slot.userPuid1 = Xuid.GenerateRandomUInt64();
                    if ((i & 4) == 4)
                        slot.userPuid2 = Xuid.GenerateRandomUInt64();
                    if ((i & 8) == 8)
                        slot.userPuid3 = Xuid.GenerateRandomUInt64();

                    request.FakeSGSlot = slot; 
                    StsResponse response = StsXrlRequest.GetSecurityToken(request);
                    VerifyHResult(HResult.XONLINE_E_STS_ERROR, response.HResult);
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a mismatch of the title ID, when validating with the SG."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenUnverifiedSGTitleID()
        {
            StsRequest request = new StsRequest();
            request.TitleID = (uint)XboxTitle.Halo2;
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_ERROR, response.HResult);
        }

        /******************************************************************************
        *        <<<<<<<<<<<<<<<<< Negative HTTP-level Tests >>>>>>>>>>>>>>>>         *
        ******************************************************************************/

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Attempts to get a SAML token with a ridiculously large GET request."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenWithHugeInputs()
        {
            string audience = RandomEx.GlobalRandGen.GenerateRandomString(1000);
            string titleID = GenerateRandomString(500);
            string xuid1 = RandomEx.GlobalRandGen.GenerateUnicodeString(2000);
            string xuid2 = RandomEx.GlobalRandGen.GenerateTotallyRandomString(1000);    //wtf?
            StsRequest request = new StsRequest(audience, titleID, xuid1, xuid2);            

            Output.Info("Sending a HUGE GET request:\r\n\taudience={0}\r\n\ttitleID={1}\r\n\txuid1={2}\r\n\txuid2={3}", audience, titleID, xuid1, xuid2);
            
            try
            {
                StsResponse stsResponse = StsXrlRequest.GetSecurityToken(request);
            }
            catch (Exception e)
            {
                Assert.IsTrue(e.Message.Contains("414"), String.Format("; Expecting to get HTTP status 414 Request-URI Too Long, but got: {0}", e.Message));
            }
        }

        /******************************************************************************
        *        <<<<<<<<<<<<<<<<< Negative SAML Tests >>>>>>>>>>>>>>>>               *
        ******************************************************************************/

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token and changes the signature value, which breaks SAML validation."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenBadSignature()
        {
            StsRequest request = new StsRequest();
            StsResponse response = StsXrlRequest.GetSecurityToken(request);

            //jerk w/ the signature
            string badSig = SamlUtil.GetSamlNodeValue(response.Token, "saml:Assertion/dfltns:Signature/dfltns:SignatureValue").Insert(8, "nHRys");
            response.Token = SamlUtil.SetSamlNodeValue(response.Token, "saml:Assertion/dfltns:Signature/dfltns:SignatureValue", badSig);

            try
            {
                SamlUtil.ValidateSamlToken(request, response);
                throw new StsFailureException("Expected SAML validation to fail (bad signature)!");
            }
            catch (Exception)
            {

            }
        }

        /// <summary>
        /// 
        /// </summary>
        [TestCase, Description("Gets a SAML token and changes the another value in the signed Xml, which breaks SAML validation."), TestFrequency("Daily"), TestCasePriority(1)]
        public void GetSamlTokenSignatureMismatch()
        {
            StsRequest request = new StsRequest();
            StsResponse response = StsXrlRequest.GetSecurityToken(request);

            //hijack xuid0 to be a different value
            response.Token = SamlUtil.SetSamlNodeValue(response.Token, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Xuid1']/saml:AttributeValue", new Xuid().ToString());

            try
            {
                SamlUtil.ValidateSamlToken(request, response);
                throw new StsFailureException("Expected SAML validation to fail (xuid1 has been modified)!");
            }
            catch (Exception)
            {

            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\Stress_GetSecurityTokenTests.cs ===
/******************************************************************************
*
* Copyright (C) Microsoft Corporation.  All rights reserved.
* 
* File: Stress_GetSecurityTokenTests.cs
*
* Description: stress test cases for STS FD service.
*
* Author: johnmcp
* 
* Date Created: 06/30/2009
* 
******************************************************************************/

using System;
using System.Xml;
using xonline.common.service;
using xonline.common.diagnostics;
using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    [TestGroup, Owner("wisgt"), TestCasePriority(3), TestFrequency("regression"), Description("Contains the stress tests for the STS GetSecurityToken FD interface.")]
    public class Stress_GetSecurityTokenTests : StsTestBase
	{
        /// <summary>
        /// 
        /// </summary>
		[StressTest(Priority = 0, TargetTPS = 300), Description("Basic, positive stress test that gets a SAML token for a randomly generated xuid1 and default title ID.")]
        [TestCase]
		public void GetSamlToken()
		{
            StsRequest request = new StsRequest();
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(0, response.HResult);
            Assert.IsTrue(!String.IsNullOrEmpty(response.Token), "HR=0x0, but no SAML token returned in the response!");
            LoadSamlToken(response.Token);
		}

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 1, TargetTPS = 300), Description("Basic, positive stress test that gets a SAML token for all xuids.")]
        [TestCase]
        public void GetSamlTokenAllXuids()
        {
            StsRequest request = new StsRequest(4);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(0, response.HResult);
            Assert.IsTrue(!String.IsNullOrEmpty(response.Token), "HR=0x0, but no SAML token returned in the response!");
            LoadSamlToken(response.Token);
        }

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 2, TargetTPS = 100), Description("Basic, negative stress test that attempts to get a SAML token, but has a bad title ID.")]
        [TestCase]
        public void GetSamlTokenBadTitleID()
        {
            string titleID = GenerateRandomString(15);
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, titleID);
            
            Output.Info("Sending request with junk string: titleID={0}", titleID);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 2, TargetTPS = 100), Description("Basic, negative stress test that attempts to get a SAML token, but has a bad xuid.")]
        [TestCase]
        public void GetSamlTokenBadXuid()
        {
            string xuid1 = GenerateRandomString(15);
            StsRequest request = new StsRequest(StsRequest.DefaultStsAudience, GetRandomXboxTitle(), xuid1);

            Output.Info("Sending request with junk string: xuid1={0}", xuid1);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_INVALID_ARGUMENT, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 2, TargetTPS = 50), Description("Negative stress test that attempts to get a SAML token, but fails to validate the title ID with the SG.")]
        [TestCase]
        public void GetSamlTokenSGTitleMismatch()
        {
            StsRequest request = new StsRequest();
            request.TitleID = (uint)XboxTitle.Twitter;
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_ERROR, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 2, TargetTPS = 50), Description("Negative stress test that attempts to get a SAML token, but fails to validate the xuids with the SG.")]
        [TestCase]
        public void GetSamlTokenSGXuidMismatch()
        {
            StsRequest request = new StsRequest();
            request.Xuid1.Value = Xuid.GenerateRandomUInt64();
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHResult(HResult.XONLINE_E_STS_ERROR, response.HResult);
        }

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 3, TargetTPS = 10), Description("Negative stress test that attempts to get a SAML token by sending a large request that subsequently fails.")]
        [TestCase]
        public void GetSamlTokenLargeRequest()
        {
            string audience = RandomEx.GlobalRandGen.GenerateRandomString(300);
            string titleID = RandomEx.GlobalRandGen.GenerateRandomString(300);
            string xuid1 = RandomEx.GlobalRandGen.GenerateRandomString(300);
            StsRequest request = new StsRequest(audience, titleID, xuid1);            
            
            Output.Info("Sending a large GET request:\r\n\taudience={0}\r\n\ttitleID={1}\r\n\txuid1={2}", audience, titleID, xuid1);
            StsResponse response = StsXrlRequest.GetSecurityToken(request);
            VerifyHttpStatus(System.Net.HttpStatusCode.NotFound, response.HttpStatus);
        }

        /// <summary>
        /// 
        /// </summary>
        [StressTest(Priority = 3, TargetTPS = 10), Description("Negative stress test that attempts to get a SAML token, but fails at IIS level with a 414.")]
        [TestCase]
        public void GetSamlTokenTooLargeRequest()
        {
            string audience = RandomEx.GlobalRandGen.GenerateRandomString(1000);
            string titleID = GenerateRandomString(500);
            string xuid1 = RandomEx.GlobalRandGen.GenerateUnicodeString(2000);
            string xuid2 = RandomEx.GlobalRandGen.GenerateTotallyRandomString(1000);    //wtf?
            StsRequest request = new StsRequest(audience, titleID, xuid1, xuid2);

            Output.Info("Sending a too large of a GET request:\r\n\taudience={0}\r\n\ttitleID={1}\r\n\txuid1={2}\r\n\txuid2={3}", audience, titleID, xuid1, xuid2);
            
            try
            {
                StsResponse response = StsXrlRequest.GetSecurityToken(request);
            }
            catch (Exception e)
            {
                Assert.IsTrue(e.Message.Contains("414"), String.Format("Expecting to get HTTP status 414 Request-URI Too Long, but got: {0}", e.Message));
            }            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="token"></param>
        /// <returns></returns>
        public static XmlDocument LoadSamlToken(string token)
        {
            try
            {
                XmlDocument samlXml = new XmlDocument();
                samlXml.LoadXml(token);
                return samlXml;
            }
            catch (XmlException e)
            {
                throw new StsFailureException(String.Format("Returned SAML token is not valid Xml:\r\n\r\n{0}", token), e);
            }
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\GetPartnerSecurityTicket.cs ===
﻿using System;
using System.Collections.Generic;

using xonline.common.service;

using ServerTestFramework;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;

using StsTest.WebService;

namespace StsTest
{

[TestGroup, Owner("wisgt"), TestFrequency("Daily")]
public class GetPartnerSecurityTicket : TestNode
{
    public override void PreRun ()
    {
        GetSecurityTicket.SetUpTitles();
    }

    public class GetPartnerSecurityTicketTestBase : GetSecurityTicketTestBase
    {
        public override void PreRun ()
        {
            base.PreRun();

            if (CompoundCaseAudience == null)
            {
                RequestMethod = RequestMethodEnum.Soap;
            }
            else
            {
                RequestMethod = RequestMethodEnum.SoapAudience;
            }
        }

        public string CompoundCaseAudience
        {
            get
            {
                return (string)(Parent.MyValues[0]);
            }
        }
    }

    public class GetPartnerSecurityTicketAudienceTestBase : GetSecurityTicketTestBase
    {
        public GetPartnerSecurityTicketAudienceTestBase ()
        {
            RequestMethod = RequestMethodEnum.SoapAudience;
        }
    }

    [TestGroup, TestCasePriority(1)]
    [CompoundCase("NoAudience", (string)null)]
    [CompoundCase("WithAudience", "http://www.contoso.com")]
    [CompoundCase("XSts", "http://xboxlive.com")]
    public class Mainline : TestNode
    {
        [TestCase]
        public class MachineOnly : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();
                GSTParams.GenerateUserClaims = false;
                
                try
                {
                    string result = GetPartnerSecurityTicket(NonXuidPuid,
                        WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_AAINFO_TOKEN_FIELD_NOTVALID);
                }
            }
        }

        [TestCase]
        public class User : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                    WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                if ("http://xboxlive.com" != CompoundCaseAudience)
                {
                    SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
                }
                else
                {   // Let's try sending it back through the AASG
                    //
                    HttpClient http = new HttpClient("dougbxb", 13100);
                    HttpClient.Request req = new HttpClient.Request("dougbxb", "/xsts/xsts.svc/IWSTrust13");
                    req.OtherHeaders.AddFirst("Authorization: XBL2.0.WP7 x=" + result);

                    http.SendRequest(req);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    [CompoundCase("NoAudience", (string)null)]
    [CompoundCase("WithAudience", "http://www.contoso.com")]
    public class PlatformType : TestNode
    {
        [TestCase]
        public class Xbox360 : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();
                GSTParams.PlatformType = XOn.XPLT_XBOX360.ToString();

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE);
                }
            }
        }

        [TestCase]
        public class Xbox360_360Dashboard : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();
                GSTParams.PlatformType = XOn.XPLT_XBOX360.ToString();

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        Xbox360DashboardTitleId, Xbox360DashboardTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE);
                }
            }
        }

        [TestCase, TestCasePriority(1)]
        public class Web : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = "";
                SetValidAAInfoTimes();
                GSTParams.PlatformType = XOn.XPLT_WEB_GAMES.ToString();

                string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                    WebGameTitleId, WebGameTitleVersion, CompoundCaseAudience);

                SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
            }
        }

        [TestCase]
        public class Invalid : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();
                GSTParams.PlatformType = XOn.XPLT_INVALID.ToString();

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(1)]
    [CompoundCase("NoAudience", (string)null)]
    [CompoundCase("WithAudience", "http://www.contoso.com")]
    public class Title : TestNode
    {
        [TestCase]
        public class WMFoundation : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                    WMFoundationTitleId, WMFoundationTitleVersion, CompoundCaseAudience);

                SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
            }
        }

        [TestCase]
        public class Mismatch : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.SetSecurityTicketExpectations(RequestObject.AAInfo, ValidExpectations.User.Puid,
                    WMGameTitleId, WMGameTitleVersion);
                CreateSamlTokenForAA();

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId + 1, WMGameTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_AUTHDATA_MISMATCH);
                }
            }
        }

        [TestCase]
        public class Version_Mismatch : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.SetSecurityTicketExpectations(RequestObject.AAInfo, ValidExpectations.User.Puid,
                    WMGameTitleId, WMGameTitleVersion);
                CreateSamlTokenForAA();

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId, WMGameTitleVersion + 1, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_AUTHDATA_MISMATCH);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(1)]
    [CompoundCase("NoAudience", (string)null)]
    [CompoundCase("WithAudience", "http://www.contoso.com")]
    public class User : TestNode
    {
        [TestCase]
        public class Mismatch : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.SetSecurityTicketExpectations(RequestObject.AAInfo, ValidExpectations.User.Puid,
                    WMGameTitleId, WMGameTitleVersion);
                CreateSamlTokenForAA();

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid + 1,
                        WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_AUTHDATA_MISMATCH);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(1)]
    [CompoundCase("NoAudience", (string)null)]
    [CompoundCase("WithAudience", "http://www.contoso.com")]
    public class SecurityTicket : TestNode
    {
        [TestCase]
        public class NotAfter_ExpiresSoon : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                aa.IssueInstant = DateTime.UtcNow.AddMinutes(-60);
                // can't guarantee sync with server, but the goal is to model a passport ticket that expires soon
                aa.NotAfter = DateTime.UtcNow.AddMinutes(5);

                ValidExpectations.Lifetime = new TimeSpan(0, 5, 0);

                string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                    WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
            }
        }

        [TestCase]
        public class NotAfter_Expired : GetPartnerSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                aa.IssueInstant = DateTime.UtcNow.AddMinutes(-60);
                // can't guarantee sync with server, but the goal is to model a passport ticket that expires just
                // after passing through AA
                aa.NotAfter = DateTime.UtcNow.AddMinutes(-5);

                try
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId, WMGameTitleVersion, CompoundCaseAudience);

                    throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_ARGUMENT);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(1)]
    public class Audience : TestNode
    {
        [TestCase, Description("Pass an empty string to check the default value.")]
        public class EmptyString : GetPartnerSecurityTicketAudienceTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                    WMGameTitleId, WMGameTitleVersion, "");

                ValidExpectations.AudienceUri = "http://test.xboxlive.com/";

                SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
            }
        }

        [TestGroup]
        [CompoundCase("XboxCom", "xbox.com")]
        [CompoundCase("MicrosoftCom", "microsoft.com")]
        public class DenyList : TestNode
        {
            [TestCase]
            [CompoundCase("{0}_{1}", "", "")]
            [CompoundCase("{0}_{1}", "http://", "")]
            [CompoundCase("{0}_{1}", "http://www.", "")]
            [CompoundCase("{0}_{1}", "http://xbox.", "")]
            [CompoundCase("{0}_{1}", "http://my", "")]
            [CompoundCase("{0}_{1}", "www.", "")]
            [CompoundCase("{0}_{1}", "http://", "/dir")]
            [CompoundCase("{0}_{1}", "http://", "/page.ashx")]
            [CompoundCase("{0}_{1}", "http://www.", "/dir")]
            [CompoundCase("{0}_{1}", "http://www.", "/page.ashx")]
            [CompoundCase("{0}_{1}", "http://", ":80")]
            [CompoundCase("{0}_{1}", "http://", ":443")]
            [CompoundCase("{0}_{1}", "http://", ":12345")]
            public class Blocked : GetPartnerSecurityTicketAudienceTestBase
            {
                public override void RunTest ()
                {
                    // construct the audience
                    string pre = (string)MyValues[0];
                    string post = (string)MyValues[1];
                    string mid = (string)Parent.Parent.MyValues[0];

                    AAInfoWrapper aa = RequestObject.AAInfo;
                    SetUser(NonSpecialUser);
                    aa.PassportCId = GenerateCID();
                    aa.CertDeviceId = GenerateDeviceId();
                    SetValidAAInfoTimes();

                    try
                    {
                        string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                            WMGameTitleId, WMGameTitleVersion, pre + mid + post);

                        throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                    }
                    catch (Exception)
                    {
                        CheckXErr(HResult.XONLINE_E_STS_INVALID_ARGUMENT);
                    }
                }
            }
            
            [TestCase]
            [CompoundCase("{0}_{1}", "http://", ".contoso.com")]
            public class Allowed : GetPartnerSecurityTicketAudienceTestBase
            {
                public override void RunTest ()
                {
                    // construct the audience
                    string pre = (string)MyValues[0];
                    string post = (string)MyValues[1];
                    string mid = (string)Parent.Parent.MyValues[0];

                    AAInfoWrapper aa = RequestObject.AAInfo;
                    SetUser(NonSpecialUser);
                    aa.PassportCId = GenerateCID();
                    aa.CertDeviceId = GenerateDeviceId();
                    SetValidAAInfoTimes();

                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId, WMGameTitleVersion, pre + mid + post);

                    SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
                }
            }
        }

        public class UriTest : GetPartnerSecurityTicketAudienceTestBase
        {
            public string Uri;
            public bool Valid;

            public UriTest (string uri, bool valid)
            {
                Name = uri;
                Uri = uri;
                Valid = valid;
            }

            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                // override the Valid flag if the Uri parses.  We didn't define the good/bad here
                try
                {
                    Uri temp = new Uri(Uri);
                    Valid = true;
                }
                catch (UriFormatException) { }

                if (Valid)
                {
                    string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                        WMGameTitleId, WMGameTitleVersion, Uri);

                    SamlUtil.ValidatePartnerSecurityTicket(result, ValidExpectations);
                }
                else
                {
                    try
                    {
                        string result = GetPartnerSecurityTicket(ValidExpectations.User.Puid,
                            WMGameTitleId, WMGameTitleVersion, Uri);

                        throw new UnexpectedTestResultException("GetPartnerSecurityTicket should have thrown an exception.");
                    }
                    catch (Exception)
                    {
                        CheckXErr(HResult.XONLINE_E_STS_INVALID_ARGUMENT);
                    }
                }
            }
        }

        [TestGroup]
        public class ValidUris : TestNode
        {
            public ValidUris ()
            {
                List<ConfigData> uris = Config.ValidUris;

                foreach (ConfigData cd in uris)
                {
                    AddChild(new UriTest(cd.Data, true), true, false);
                }
            }
        }

        [TestGroup]
        public class InvalidUris : TestNode
        {
            public InvalidUris ()
            {
                List<ConfigData> uris = Config.InvalidUris;

                foreach (ConfigData cd in uris)
                {
                    AddChild(new UriTest(cd.Data, false), true, false);
                }

                uris = Config.SecurityStrings;

                foreach (ConfigData cd in uris)
                {
                    AddChild(new UriTest(cd.Data, false), true, false);
                }
            }
        }
    }
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\AAInfoWrapper.cs ===
using System;

namespace StsTest
{
    /// <summary>
    /// This class exposes the protected fields of an AAInfo object for writing.
    /// </summary>
    public class AAInfoWrapper : xonline.common.service.AAInfo
    {
        // Expose the constructor
        public AAInfoWrapper () : base()
        {
            _ipAddressInternet = "";
            _certDeviceId = "";
            _samlToken = "";            
        }

        public AAInfoWrapper(string ipAddress, xonline.common.service.Floken flowToken) : base()
        {
            _ipAddressInternet = ipAddress;
            _flowToken = flowToken;

            _certDeviceId = "";
            _samlToken = "";            
        }

        
        // These properties are serialized to the AuthZ header
        public new ulong PassportPuid { get { return _passportPuid; } set { _passportPuid = value; } }
        public new string IpAddressInternet { set { _ipAddressInternet = value; } }
        public new ulong? LiveXuid { set { _liveXuid = value; } }
        public new ulong PassportCId { get { return _passportCId; } set { _passportCId = value; } }
        public new DateTime NotAfter { get { return _notAfterDateTime; } set { _notAfterDateTime = value; } }
        public new DateTime IssueInstant { get { return _issueInstantDateTime; } set { _issueInstantDateTime = value; } }
        public new string CertDeviceId { get { return _certDeviceId; } set { _certDeviceId = value; } }
        public string SamlToken { get { return _samlToken; } set { _samlToken = value; } }

        // These properties are not serialized
        public xonline.common.service.XblSamlToken SamlSecurityToken { set { _xblSamlToken = value; } }
        public new System.Net.IPAddress OriginatingIP { set { _originatingIP = value; } }
        public new byte? CountryId { set { _countryId = value; } }
        public new System.Collections.BitArray UserPrivileges { set { _userPrivileges = value; } }

        #region AAInfo Abstract Members

        // No need to implement these.

        protected override void PopulateLiveXuid ()
        {
            throw new NotImplementedException();
        }

        protected override void PopulateUserInfo ()
        {
            throw new NotImplementedException();
        }

        protected override void PopulateUserPrivileges ()
        {
            throw new NotImplementedException();
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\Config.cs ===
﻿using System;
using System.Collections.Generic;
using System.Xml;
using System.IO;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
    public class ConfigData
    {
        /// <summary>
        /// 
        /// </summary>
        /// <param name="data"></param>
        /// <param name="hresult"></param>
        public ConfigData(string data, uint hresult)
        {
            this.Data = data;
            this.ExpectedHResult = hresult;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Data
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public uint ExpectedHResult
        {
            get;
            private set;
        }
    }

    /// <summary>
    /// 
    /// </summary>
	public static class Config
	{
        private static Dictionary<string, string> configSettings;

        /// <summary>
        /// 
        /// </summary>
        static Config()
        {
            configSettings = new Dictionary<string, string>();
            XmlDocument configXml = LoadTestConfig();
            foreach (XmlNode node in configXml.SelectNodes("StsTestConfig/Settings/Setting"))
                configSettings.Add(node.Attributes["name"].Value, node.Attributes["value"].Value);
        }

        /// <summary>
        /// 
        /// </summary>
        public static List<ConfigData> ValidUris
        {
            get
            {
                return GetConfigData("StsTestConfig/ConfigData/ConfigData[@type='ValidUris']/Data");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static List<ConfigData> InvalidUris
        {
            get
            {
                return GetConfigData("StsTestConfig/ConfigData/ConfigData[@type='InvalidUris']/Data");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static List<ConfigData> SecurityStrings
        {
            get
            {
                return GetConfigData("StsTestConfig/ConfigData/ConfigData[@type='Security']/Data");
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static string GetSetting(string name)
        {
            return configSettings[name];
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static bool GetBoolSetting(string name)
        {
            return bool.Parse(configSettings[name]);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="name"></param>
        /// <returns></returns>
        public static int GetIntSetting(string name)
        {
            return int.Parse(configSettings[name]);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xpath"></param>
        /// <returns></returns>
        public static List<ConfigData> GetConfigData(string xpath)
        {
            XmlDocument configXml = LoadTestConfig();
            List<ConfigData> data = new List<ConfigData>();

            foreach (XmlNode node in configXml.SelectNodes(xpath))
                data.Add(new ConfigData(node.InnerText, (node.Attributes["hr"] != null) ? uint.Parse(node.Attributes["hr"].Value) : 0));
            return data;
        }        

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        private static XmlDocument LoadTestConfig()
        {
            FileInfo runningAssembly = new FileInfo(new Uri(System.Reflection.Assembly.GetExecutingAssembly().CodeBase).LocalPath);
            string configFilePath = Path.Combine(runningAssembly.DirectoryName, "StsTestConfig.xml");

            if (!System.IO.File.Exists(configFilePath))
                throw new ServerTestFramework.UnexpectedTestResultException("Unable to find required config settings file StsTestConfig.xml.");

            XmlDocument configXml = new XmlDocument();
            configXml.Load(configFilePath);
            return configXml;
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Tests\GetSecurityTicket.cs ===
﻿using System;
using System.Linq;
using System.Security.Cryptography.X509Certificates;

using xonline.common.config;
using xonline.common.service;

using ServerTestFramework;
using ServerTestFramework.Database;

using StsTest.WebService;

namespace StsTest
{

[TestGroup, Owner("wisgt"), TestFrequency("Daily")]
public partial class GetSecurityTicket : TestNode
{
    private static bool hasSetUpTitles = false;

    public static void SetUpTitles ()
    {
        if (!hasSetUpTitles)
        {
            hasSetUpTitles = true;

            // Title setup
            bool needReload = false;

            // Foundation title id
            TitleEditor fnd_game = TitleEditor.CreateOrUseExistingId(GetSecurityTicketTestBase.WMFoundationTitleId);
            TitleEditor.CultureDetails fnd_cd = fnd_game.GetTitleCultureDetails(1033);

            // we assume that if it is null, we just created the title and need to set it up
            if (fnd_cd == null)
            {
                // add culture details
                fnd_cd = new TitleEditor.CultureDetails();
                fnd_cd.TitleId = (int)GetSecurityTicketTestBase.WMFoundationTitleId;
                fnd_cd.CultureId = 1033;
                fnd_cd.Name = "StsFDTest WM7 Foundation";
                fnd_cd.Publisher = "StsFDTest";
                fnd_cd.Developer = "StsFDTest";
                fnd_cd.Genre = "Dashboard";
                fnd_game.SetTitleCultureDetails(fnd_cd);

                // set up rest of the title
                fnd_game.ConsoleType = GetSecurityTicketTestBase.WMConsoleType;

                fnd_game.RemoveAllVersions();
                fnd_game.AddVersion(GetSecurityTicketTestBase.WMFoundationTitleVersion,
                    GetSecurityTicketTestBase.WMFoundationTitleVersion, 0, GetSecurityTicketTestBase.WMConsoleType);

                needReload = true;
            }

            // Web Game title id
            TitleEditor web_game = TitleEditor.CreateOrUseExistingId(GetSecurityTicketTestBase.WebGameTitleId);
            TitleEditor.CultureDetails web_cd = web_game.GetTitleCultureDetails(1033);

            // we assume that if it is null, we just created the title and need to set it up
            if (web_cd == null)
            {
                // add culture details
                web_cd = new TitleEditor.CultureDetails();
                web_cd.TitleId = (int)GetSecurityTicketTestBase.WebGameTitleId;
                web_cd.CultureId = 1033;
                web_cd.Name = "StsFDTest WM7 Web";
                web_cd.Publisher = "StsFDTest";
                web_cd.Developer = "StsFDTest";
                web_cd.Genre = "Awesome";
                web_game.SetTitleCultureDetails(web_cd);

                // set up rest of the title
                web_game.ConsoleType = GetSecurityTicketTestBase.WebGameConsoleType;

                web_game.RemoveAllVersions();
                web_game.AddVersion(GetSecurityTicketTestBase.WebGameTitleVersion,
                    GetSecurityTicketTestBase.WebGameTitleVersion, 0, GetSecurityTicketTestBase.WebGameConsoleType);

                needReload = true;
            }

        // WM Game title it
        wm_title_retry:
            TitleEditor wm_game = TitleEditor.CreateOrUseExistingId(GetSecurityTicketTestBase.WMGameTitleId);
            TitleEditor.CultureDetails wm_cd = wm_game.GetTitleCultureDetails(1033);

            if (wm_cd == null)
            {
                // add culture details
                wm_cd = new TitleEditor.CultureDetails();
                wm_cd.TitleId = (int)GetSecurityTicketTestBase.WMGameTitleId;
                wm_cd.CultureId = 1033;
                wm_cd.Name = "StsFDTest WM7 Phone";
                wm_cd.Publisher = "StsFDTest";
                wm_cd.Developer = "StsFDTest";
                wm_cd.Genre = "Awesome";
                wm_game.SetTitleCultureDetails(wm_cd);

                // set up rest of the title
                wm_game.ConsoleType = GetSecurityTicketTestBase.WMConsoleType;

                wm_game.RemoveAllVersions();
                // Lower version that has an upgrade to current
                wm_game.AddVersion(GetSecurityTicketTestBase.WMGameTitleVersionLower, GetSecurityTicketTestBase.WMGameTitleVersion, 0,
                    GetSecurityTicketTestBase.WMConsoleType);
                // Current version
                wm_game.AddVersion(GetSecurityTicketTestBase.WMGameTitleVersion, GetSecurityTicketTestBase.WMGameTitleVersion, 0,
                    GetSecurityTicketTestBase.WMConsoleType);

                needReload = true;
            }
            else if (wm_cd.Name != "StsFDTest WM7 Phone")
            {
                GetSecurityTicketTestBase.WMGameTitleId += 1;
                goto wm_title_retry;
            }

            //  add a title with alternate title ids for X360CS 138390
            TitleEditor altid_game = TitleEditor.CreateOrUseExistingId(GetSecurityTicketTestBase.WMGameTitleId + 100);
            altid_game.AddAlternateID(0, 0, altid_game.Id, new uint[] { 1, 2, 3, 4 }, null, null);

        // WM and Web Game title it
        wm_and_web_title_retry:
            GetSecurityTicketTestBase.WMAndWebGameTitleId = GetSecurityTicketTestBase.WMGameTitleId + 1;

            TitleEditor wm_and_web_game = TitleEditor.CreateOrUseExistingId(GetSecurityTicketTestBase.WMAndWebGameTitleId);
            TitleEditor.CultureDetails wm_and_web_cd = wm_and_web_game.GetTitleCultureDetails(1033);

            if (wm_and_web_cd == null)
            {
                // add culture details
                wm_and_web_cd = new TitleEditor.CultureDetails();
                wm_and_web_cd.TitleId = (int)GetSecurityTicketTestBase.WMAndWebGameTitleId;
                wm_and_web_cd.CultureId = 1033;
                wm_and_web_cd.Name = "StsFDTest WM7 Phone and Web";
                wm_and_web_cd.Publisher = "StsFDTest";
                wm_and_web_cd.Developer = "StsFDTest";
                wm_and_web_cd.Genre = "Awesome";
                wm_and_web_game.SetTitleCultureDetails(wm_and_web_cd);

                // set up rest of the title
                wm_and_web_game.ConsoleType = GetSecurityTicketTestBase.WebGameConsoleType;

                wm_and_web_game.RemoveAllVersions();
                // Current version
                wm_and_web_game.AddVersion(GetSecurityTicketTestBase.WMAndWebGameTitleVersion, GetSecurityTicketTestBase.WMAndWebGameTitleVersion, 0,
                    GetSecurityTicketTestBase.WMConsoleType);
                wm_and_web_game.AddVersion(GetSecurityTicketTestBase.WMAndWebGameTitleVersion, GetSecurityTicketTestBase.WMAndWebGameTitleVersion, 0,
                    GetSecurityTicketTestBase.WebGameConsoleType);

                needReload = true;
            }
            else if (wm_and_web_cd.Name != "StsFDTest WM7 Phone and Web")
            {
                GetSecurityTicketTestBase.WMAndWebGameTitleId += 1;
                goto wm_and_web_title_retry;
            }

            // reload STS
            if (needReload)
            {
                Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.Interface.sts, "e :sts reload");
            }
        }
    }

    public override void PreRun ()
    {
        SetUpTitles();
    }

    [TestGroup, TestCasePriority(1)]
    public class Mainline : TestNode
    {
        [TestCase]
        public class MachineAccountCreation_NoXuid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);
            }
        }

        [TestCase]
        public class MachineAccountCreation_Xuid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase]
        public class ExistingMachine_NoXuid : GetSecurityTicketTestBase
        {
            AAInfoWrapper aa;
            ulong MachineID;

            public override void PreRun ()
            {
                // just run the machine account creation test first
                MachineAccountCreation_NoXuid preTest = new MachineAccountCreation_NoXuid();

                preTest.Run();

                aa = preTest.RequestObject.AAInfo;
                MachineID = preTest.ValidExpectations.ResultMachineID;
            }

            public override void RunTest ()
            {
                RequestObject.AAInfo = aa;
                ValidExpectations.MachineID = MachineID;

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);
            }
        }

        [TestCase]
        public class ExistingMachine_Xuid : GetSecurityTicketTestBase
        {
            AAInfoWrapper aa;
            UserEditor ue;
            ulong MachineID;

            public override void PreRun ()
            {
                // just run the machine account creation test first
                MachineAccountCreation_Xuid preTest = new MachineAccountCreation_Xuid();

                preTest.Run();

                aa = preTest.RequestObject.AAInfo;
                ue = preTest.ValidExpectations.User;
                MachineID = preTest.ValidExpectations.ResultMachineID;
            }

            public override void RunTest ()
            {
                RequestObject.AAInfo = aa;
                ValidExpectations.User = ue;
                ValidExpectations.MachineID = MachineID;

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class PlatformType : TestNode
    {
        [TestCase]
        public class Xbox360 : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_XBOX360,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE);
                }
            }
        }

        [TestCase]
        public class Xbox360_360Dashboard : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_XBOX360,
                        Xbox360DashboardTitleId, Xbox360DashboardTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE);
                }
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 120475)]
        public class Web_NoXuid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = "";
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_WEB_GAMES,
                        WebGameTitleId, WebGameTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    // THIS SHOULD BE A BIG OL' ERROR! (Machine ticket for a non-machine platform???)
                    // Just not sure what that error should be, this seems like a good one for now
                    CheckXErr(HResult.XONLINE_E_LOGON_INVALID_USER);
                }
            }
        }

        [TestCase]
        public class Web_Xuid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = "";
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_WEB_GAMES,
                    WebGameTitleId, WebGameTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase]
        public class Invalid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_INVALID,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_PLATFORM_TYPE);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class Title : TestNode
    {
        [TestCase]
        public class Xbox360Dashboard : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        Xbox360DashboardTitleId, Xbox360DashboardTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_LOGON_UNKNOWN_TITLE);
                }
            }
        }

        [TestCase]
        public class WMGame : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMGameTitleId, WMGameTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase]
        [CompoundCase("FromPhone", XOn.XPLT_MOBILE)]
        [CompoundCase("FromWeb", XOn.XPLT_WEB_GAMES)]
        public class WMAndWebGame : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket((byte)MyValues[0],
                    WMAndWebGameTitleId, WMAndWebGameTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase]
        public class Invalid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        InvalidTitleId, InvalidTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_LOGON_UNKNOWN_TITLE);
                }
            }
        }

        [TestCase]
        public class Version_Lower : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMGameTitleId, WMGameTitleVersionLower, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_LOGON_UPDATE_REQUIRED);
                }
            }
        }

        [TestCase]
        public class Version_Invalid : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMGameTitleId, WMGameTitleVersionInvalid, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_LOGON_UNKNOWN_TITLE);
                }
            }
        }

        [TestCase]
        public class Version_Higher : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NonSpecialUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMGameTitleId, WMGameTitleVersion + 1, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_LOGON_UNKNOWN_TITLE);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class Machine : TestNode
    {
        [TestCase]
        public class Device_Mismatch : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, GenerateDeviceId());

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_AUTHDATA_MISMATCH);
                }
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 120657), Description("One ban is active.")]
        public class Banned_OneBanActive : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                // ban the newly created machine account
                MachineEditor machine = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                machine.BanMachine(unchecked((int)0x8015190D), System.DateTime.UtcNow-new System.TimeSpan(0, 0, 5), System.DateTime.MaxValue);

                try
                {
                    result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_LOGON_XBOX_ACCOUNT_BANNED);
                }
            }
        }

        [TestCase, Description("Multiple bans are active.")]
        public class Banned_MultipleBansActive : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                // ban the newly created machine account
                MachineEditor machine = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                machine.BanMachine(unchecked((int)0x80000001), System.DateTime.UtcNow-new System.TimeSpan(5, 0, 0, 0), System.DateTime.UtcNow-new System.TimeSpan(4, 0, 0, 0)); //expired
                machine.BanMachine(unchecked((int)0x80000002), System.DateTime.UtcNow-new System.TimeSpan(5, 0, 0, 0), System.DateTime.MaxValue-new System.TimeSpan(3, 0, 0, 0)); //starting 5 days ago
                machine.BanMachine(unchecked((int)0x80000003), System.DateTime.UtcNow-new System.TimeSpan(1, 0, 0, 0), System.DateTime.MaxValue); //starting 1 days ago
                machine.BanMachine(unchecked((int)0x80000004), System.DateTime.UtcNow-new System.TimeSpan(3, 0, 0, 0), System.DateTime.MaxValue-new System.TimeSpan(4, 0, 0, 0)); //starting 3 days ago
                machine.BanMachine(unchecked((int)0x80000005), System.DateTime.UtcNow+new System.TimeSpan(1, 0, 0, 0), System.DateTime.MaxValue-new System.TimeSpan(2, 0, 0, 0)); //future

                try
                {
                    result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(0x80000003); //should be the ban that ends the latest
                }
            }
        }

        [TestCase, Description("A ban is expired.")]
        public class Banned_Expired : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                // ban the newly created machine account
                MachineEditor machine = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                machine.BanMachine(unchecked((int)0x8015190D), System.DateTime.UtcNow-new System.TimeSpan(10, 0, 0), System.DateTime.UtcNow-new System.TimeSpan(1, 0, 0));

                result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);
            }
        }

        [TestCase, Description("A ban will start in the future.")]
        public class Banned_Future : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                // ban the newly created machine account
                MachineEditor machine = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                machine.BanMachine(unchecked((int)0x8015190D), System.DateTime.UtcNow+new System.TimeSpan(1, 0, 0), System.DateTime.UtcNow+new System.TimeSpan(10, 0, 0));

                result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 124431)]
        [CompoundCase("Lower", false)]
        [CompoundCase("Upper", true)]
        public class DeviceIDCase : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                bool toUpper = (bool)MyValues[0];

                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion,
                    (toUpper ? aa.CertDeviceId.ToUpper() : aa.CertDeviceId.ToLower()));

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class ClientVersion : TestNode
    {
        [TestCase]
        public class ForwardChange : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                MachineEditor me = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                me.UseCaching = false;
                string cfv = null;

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " + 
                        CreateFlashVersionString(WMFoundationClientVersion) + ", got " + cfv);
                }

                // make sure we get the same machine next time
                ValidExpectations.MachineID = ValidExpectations.ResultMachineID;

                result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion + 1, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion + 1))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(WMFoundationClientVersion + 1) + ", got " + cfv);
                }
            }
        }

        [TestCase]
        public class BackwardChange : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion + 1, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                MachineEditor me = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                me.UseCaching = false;
                string cfv = null;

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion + 1))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(WMFoundationClientVersion + 1) + ", got " + cfv);
                }

                // make sure we get the same machine next time
                ValidExpectations.MachineID = ValidExpectations.ResultMachineID;

                result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(WMFoundationClientVersion) + ", got " + cfv);
                }
            }
        }

        [TestCase]
        public class BackwardChange_AfterForward : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                MachineEditor me = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                me.UseCaching = false;
                string cfv = null;

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(WMFoundationClientVersion) + ", got " + cfv);
                }

                // make sure we get the same machine next time
                ValidExpectations.MachineID = ValidExpectations.ResultMachineID;

                result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion + 2, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion + 2))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(WMFoundationClientVersion + 2) + ", got " + cfv);
                }

                result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion + 1, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(WMFoundationClientVersion + 1))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(WMFoundationClientVersion + 1) + ", got " + cfv);
                }
            }
        }

        [TestCase]
        public class RandomVersion : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                uint client_version = (uint)ServerTestFramework.Utilities.RandomEx.GlobalRandGen.NextUlong();

                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, client_version, aa.CertDeviceId);
                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);

                MachineEditor me = MachineEditor.FromId(ValidExpectations.ResultMachineID);
                me.UseCaching = false;
                string cfv = null;

                cfv = me.ClientFlashVersion;
                if (cfv != CreateFlashVersionString(client_version))
                {
                    throw new UnexpectedTestResultException("Flash Version is wrong: expected " +
                        CreateFlashVersionString(client_version) + ", got " + cfv);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class User : TestNode
    {
        [TestCase]
        public class NotAcceptedTOS : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NotAcceptedTOSUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_TERMS_OF_SERVICE_NOT_ACCEPTED);
                }
            }
        }

        [TestCase]
        public class Suspended : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(SuspendedUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED);
                }
            }
        }

        [TestCase]
        public class Suspended_KDCBanOnly : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(SuspendedUser_KDCBan);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED);
                }
            }
        }

        [TestCase]
        public class Suspended_PerServiceBanOnly : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(SuspendedUser_PerServiceBan);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED);
                }
            }
        }

        [TestCase]
        public class Suspended_AllowZune : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(SuspendedUser_ZuneAllowed);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_ACCOUNT_SUSPENDED);
                }
            }
        }

        [TestCase]
        public class Suspended_AllowZune_GetUserAuthDirectForZune : TestNode
        {
            public override void Run ()
            {
                XuacsUserAccountSoap request = new XuacsUserAccountSoap();

                request.AAInfo = new AAInfoWrapper();
                AAInfoWrapper aa = request.AAInfo;
                aa.IpAddressInternet = GetSecurityTicketTestBaseStatic.ActiveAuthFacingIPAddress.ToString();
                aa.PassportPuid = (ulong)(GetSecurityTicketTestBase.SuspendedUser_ZuneAllowed.UserPassportPuid);
                aa.PassportCId = GetSecurityTicketTestBase.GenerateCID();
                aa.CertDeviceId = GetSecurityTicketTestBase.GenerateDeviceId();
                GetSecurityTicketTestBaseStatic.SetValidAAInfoTimes(aa);

                StsTest.WebService.Soap.Xuacs.UserAccountAuthorizeInfo result = 
                    request.UserAccountAuthorize((int)xonline.common.protocol.ServiceTypeEnum.Zune, XOn.CRUX_TITLE_ID);

                GetSecurityTicketTestBaseStatic.CheckHR("GetUserAuth HR", result.ErrorInfo.HResult, 0);
                ServerTestFramework.Utilities.ValueCheck.IsFalse(result.ErrorInfo.AccountSuspended, "GetUserAuth Suspended");
            }
        }

        [TestCase]
        public class Tier_Gold : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(GoldUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.Tier = (int)XOn.XONLINE_TIER_GOLD;

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase]
        public class Tier_Silver : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(SilverUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.Tier = (int)XOn.XONLINE_TIER_SILVER;

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase]
        public class Tier_Silver_Check_Multiplayer : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(SilverUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.Tier = (int)XOn.XONLINE_TIER_SILVER;

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);

                System.Collections.Generic.List<byte> privs =
                    SamlUtil.ParsePriviliegesFromSamlToken(ValidExpectations.ResultAttributes["Privileges0"].Value);

                if (!privs.Contains(XOn.XPRIVILEGE_MULTIPLAYER_SESSIONS))
                {
                    throw new UnexpectedTestResultException("Security Ticket for silver user did not contain the multiplayer privilege.");
                }
            }
        }

        [TestCase]
        public class Tier_New : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NewUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                ValidExpectations.Tier = (int)XOn.XONLINE_TIER_NEWUSER;

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, false);
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 120679)]
        public class NotProvisioned : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(NotProvisionedUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_SERVICE_NOT_PROVISIONED);
                }
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 120685)]
        public class GamertagChangeRequired : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(GamertagChangeRequiredUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_TAG_CHANGE_REQUIRED);
                }
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 123399)]
        public class UnsupportedCountry : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(UnsupportedCountryUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_COUNTRY_NOT_AUTHORIZED);
                }
            }
        }

        [TestCase(BugDatabase = "Xbox 360 Console Software", BugID = 131714)]
        public class Zune : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                SetUser(ZuneUser);
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_ACCOUNTS_SERVICE_NOT_PROVISIONED);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class PassportTicket : TestNode
    {
        [TestCase]
        public class NotAfter_ExpiresSoon : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                aa.IssueInstant = DateTime.UtcNow.AddMinutes(-60);
                // can't guarantee sync with server, but the goal is to model a passport ticket that expires soon
                aa.NotAfter = DateTime.UtcNow.AddMinutes(5);

                ValidExpectations.Lifetime = new TimeSpan(0, 5, 0);

                string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                    WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(result, ValidExpectations, true);
            }
        }

        [TestCase]
        public class NotAfter_Expired : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                aa.IssueInstant = DateTime.UtcNow.AddMinutes(-60);
                // can't guarantee sync with server, but the goal is to model a passport ticket that expires just
                // after passing through AA
                aa.NotAfter = DateTime.UtcNow.AddMinutes(-5);

                try
                {
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        WMFoundationTitleId, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (Exception)
                {
                    CheckXErr(HResult.XONLINE_E_STS_INVALID_ARGUMENT);
                }
            }
        }
    }

    [TestGroup, TestCasePriority(1)]
    public class Security : TestNode
    {
        [TestCase, Description("Checks a known failure to see if the SOAP fault contains a stack trace.")]
        public class CheckForStacktrace : GetSecurityTicketTestBase
        {
            public override void RunTest ()
            {
                AAInfoWrapper aa = RequestObject.AAInfo;
                aa.PassportPuid = NonXuidPuid;
                aa.PassportCId = GenerateCID();
                aa.CertDeviceId = GenerateDeviceId();
                SetValidAAInfoTimes();

                try
                {
                    // bad title guarantees a failure
                    string result = GetSecurityTicket(XOn.XPLT_MOBILE,
                        1, WMFoundationTitleVersion, WMFoundationClientVersion, aa.CertDeviceId);

                    throw new UnexpectedTestResultException("GetSecurityTicket should have thrown an exception.");
                }
                catch (System.Web.Services.Protocols.SoapException ex)
                {
                    // first make sure we got the error we expected
                    CheckXErr(HResult.XONLINE_E_LOGON_UNKNOWN_TITLE);

                    if (ex.Message.Contains("--- End of inner exception stack trace ---"))
                    {
                        string temp = new string('=', 40) + "\n";

                        throw new UnexpectedTestResultException("There seems to be a stack trace returned in the SOAP fault [exception message follows]:\n" +
                            temp + ex.Message + "\n" + temp);
                    }
                }
            }
        }
    }

    [TestGroup, TestCasePriority(2)]
    public class EndToEnd : TestNode
    {
        public static bool UserTicket = true;

        public static void Reset ()
        {
            _PassportUser = null;
            _User = null;
            _WLIDAuth = null;
            _XBLAuth = null;
            _Machine = 0;
            _GamertagOffer = Guid.Empty;
        }

        private static ServerTestFramework.LiveService.UserAccount.UacsCommon.PassportUser _PassportUser;

        public static ServerTestFramework.LiveService.UserAccount.UacsCommon.PassportUser PassportUser
        {
            get
            {
                if (_PassportUser == null)
                {
                    _PassportUser = (new ServerTestFramework.LiveService.UserAccount.UacsCommon()).CreatePassportUser();
                }

                return _PassportUser;
            }
        }

        private static UserEditor _User;

        public static UserEditor User
        {
            get
            {
                if (_User == null)
                {
                    _User = UserEditor.CreateOrUseExistingGamerTag(UserEditor.GenerateRandomGamertag(),
                        UserCreationType.Xbox360, PassportUser.PassportPuid);
                    //_User = UserEditor.CreateOrUseExistingGamerTag("NonRandomSTS2",
                    //    UserCreationType.Xbox360, 844427149399243);

                    // No longer need to wait
                    //Output.Info("Waiting 30 seconds after user creation.");
                    //System.Threading.Thread.Sleep(30000);
                }

                return _User;
            }
        }

        private static string _WLIDAuth;// = "Authorization: WLID1.0 t=EwCYAaATBAAUhBuiS609wDFSJoHl9K5hjiRs+B+AACSWJRUyYJBW4K6xpO7z/BEK0XtxAZjqmNlt/U+fRFHtj42PM1mZOf7F4V/Lh/NGIB33Z9/m09uGmuj8BBpj3rYb7Jl1Qm55FalYFtZc3xcC/AujYRsMCbp/F3syqcfp5vCu38Brq+d+aLPJTgdyB9CXjFVpMT1f184IHTB73syyA2YAAAhLi3k7SL7NnOgAQqAJ02VgMq3P9zsqpHyU10oFhBtSDHW05GNKPogVyC9om7I3on08OPRZLsG9dNtd7UShfXmLDQ5aDAs8GP7ShDO6icXHp6Q7lc0MLgzczPD8yXznR5zk9ITPhamQxETe9naxjGJ5FrmtkT4lP/PXnaeLMp4YHNbwJGxEx8mWIL6M7AoOjF+wD1UHfVz8YJkAsrseS8eILyiSMwXSGYTp2Xz3A8E8/EwLWlrBU8MywhvMFcDfj8cgV5oHn7+DkvN+HqDFedMPilMrMQTV5A4tVFHrCr5LDvO1Or3f/iWXnd2GdduNjd65phwB&p=";

        public static string WLIDAuth
        {
            get
            {
                if (_WLIDAuth == null)
                {
                    _WLIDAuth = "Authorization: WLID1.0 t=" +
                       ServerTestFramework.LiveService.Auth.AuthClientBase.GetAAPassportTicket(EndToEnd.PassportUser.MemberName,
                       EndToEnd.PassportUser.Password, "MBI");
                }

                return _WLIDAuth;
            }
        }

        private static string _XBLAuth;

        public static string XBLAuth
        {
            get
            {
                if (_XBLAuth == null)
                {
                    GetSecurityTicket preTest = new GetSecurityTicket();
                    preTest.Run();
                }

                return _XBLAuth;
            }
            set
            {
                _XBLAuth = value;
            }
        }

        private static ulong _Machine;

        public static ulong Machine
        {
            get
            {
                if (_Machine == 0)
                {
                    GetSecurityTicket preTest = new GetSecurityTicket();
                    preTest.Run();
                }

                return _Machine;
            }
            set
            {
                _Machine = value;
            }
        }

        private static Guid _GamertagOffer;

        public static Guid GamertagOffer
        {
            get
            {
                if (_GamertagOffer.Equals(Guid.Empty))
                {
                    GamertagEnumerate preTest = new GamertagEnumerate();
                    preTest.Run();
                }

                return _GamertagOffer;
            }
            set
            {
                _GamertagOffer = value;
            }
        }

        public static string _ClientDeviceId;

        public static string ClientDeviceId
        {
            get
            {
                if (_ClientDeviceId == null)
                {
                    _ClientDeviceId = GetCertDeviceId(GetSecurityTicketBase.ClientCertificate);
                }

                return _ClientDeviceId;
            }
        }

        public static string GetCertDeviceId (X509Certificate2 cert)
        {
            // extract device id from subject
            string subject = cert.Subject;
            string subjectToken = xonline.common.config.Config.GetSetting(xonline.common.config.Setting.aamodule_sts_deviceId_cert_subject_prefix);
            string deviceId = null;

            int index = subject.IndexOf(subjectToken);

            if (index == -1)
            {
                deviceId = cert.Thumbprint;
            }
            else
            {
                int end = subject.IndexOf(',', index);
                end = (end == -1 ? subject.Length : end);
                if (subject[end - 1] == '"') { --end; }
                deviceId = subject.Substring(index + subjectToken.Length, end - (index + subjectToken.Length));
            }

            return deviceId;
        }

        private const string WM7TestEKU = "1.3.6.1.4.1.311.71.1.1";
        private bool _deleteEKU = false;

        public override void PreRun ()
        {
            // check for and enable test EKU
            string[] ekus = Global.XEnv.MultiSettingRead(MultiSetting.aamodule_XblEnhancedKeyUsages);

            if (!ekus.Contains(WM7TestEKU))
            {
                _deleteEKU = true;

                Global.XEnv.MultiSettingAdd(Global.XEnv.GetEnv(), "ALL", "-1", "ALL", 
                    MultiSetting.aamodule_XblEnhancedKeyUsages, WM7TestEKU);

                // force a reload of the EKUs
                Global.XEnv.ForceConfigReload(Interface.aamodule);
            }

            GetSecurityTicketBase.AddCertChainToStore();
        }

        public override void PostRun ()
        {
            GetSecurityTicketBase.RemoveCertChainFromStore();

            if (_deleteEKU)
            {
                Global.XEnv.MultiSettingDeleteValue(Global.XEnv.GetEnv(), "ALL", "-1", "ALL",
                    MultiSetting.aamodule_XblEnhancedKeyUsages, WM7TestEKU);

                // force a reload of the EKUs
                Global.XEnv.ForceConfigReload(Interface.aamodule);
            }
        }

        [TestCase]
        public class GetPassportTicket : TestNode
        {
            public override void Run ()
            {
                Output.Debug("Authorization: WLID1.0 t=" +
                   ServerTestFramework.LiveService.Auth.AuthClientBase.GetAAPassportTicket("xbltest-614df9c7-e985-463a-b20a-0b9a69a31ccd@xbltest.com",
                   "as13as13!!we421", "MBI"));
            }
        }

        [TestCase]
        public class GetSecurityTicket : TestNode
        {
            public string Response;

            public override void PreRun (RUN_TYPE runType)
            {
                Response = null;
            }

            public override void Run ()
            {
                GetSecurityTicketSoapThroughAA request = new GetSecurityTicketSoapThroughAA();
                GetSecurityTicketExpectations expect = new GetSecurityTicketExpectations();
                AAInfoWrapper aainfo = new AAInfoWrapper();

                if (UserTicket)
                {
                    expect.User = EndToEnd.User;
                }
                aainfo.CertDeviceId = ClientDeviceId;
                expect.SetSecurityTicketExpectations(aainfo, XOn.XPLT_MOBILE,
                    GetSecurityTicketTestBase.WMFoundationTitleId, GetSecurityTicketTestBase.WMFoundationTitleVersion,
                    GetSecurityTicketTestBase.WMFoundationClientVersion);

                aainfo.PassportPuid = PassportUser.PassportPuid;

                // set some stuff for making validation work, even though we don't know them
                aainfo.NotAfter = DateTime.UtcNow.AddDays(15);
                expect.IgnoreCID = true;

                request.Authentication = WLIDAuth;

                Response = request.GetSecurityTicket(XOn.XPLT_MOBILE,
                    GetSecurityTicketTestBase.WMFoundationTitleId, GetSecurityTicketTestBase.WMFoundationTitleVersion,
                    GetSecurityTicketTestBase.WMFoundationClientVersion, aainfo.CertDeviceId);

                SamlUtil.ValidateSecurityTicket(Response, expect, !UserTicket);

                EndToEnd.XBLAuth = "Authorization: XBL1.0 x=" + Response;
                EndToEnd.Machine = expect.ResultMachineID;
            }
        }

        [TestCase]
        public class GetPartnerSecurityTicket : TestNode
        {
            public override void Run ()
            {
                GetSecurityTicketSoapThroughAA request = new GetSecurityTicketSoapThroughAA();
                GetSecurityTicketExpectations expect = new GetSecurityTicketExpectations();
                AAInfoWrapper aainfo = new AAInfoWrapper();

                expect.User = EndToEnd.User;
                expect.SetSecurityTicketExpectations(aainfo, expect.User.Puid,
                    GetSecurityTicketTestBase.WMFoundationTitleId, GetSecurityTicketTestBase.WMFoundationTitleVersion);
                expect.AudienceUri = "http://www.contoso.com/";

                aainfo.PassportPuid = (ulong)(expect.User.UserPassportPuid);

                // set some stuff for making validation work, even though we don't know them
                aainfo.NotAfter = DateTime.UtcNow.AddDays(15);

                request.Authentication = XBLAuth;

                string Response = request.GetPartnerSecurityTicket(expect.User.Puid,
                    GetSecurityTicketTestBase.WMFoundationTitleId, GetSecurityTicketTestBase.WMFoundationTitleVersion,
                    expect.AudienceUri);

                SamlUtil.ValidatePartnerSecurityTicket(Response, expect);
            }
        }

        [TestCase]
        public class GamertagEnumerate : TestNode
        {
            public override void Run ()
            {
                XbosBillingSoapThroughAA request = new XbosBillingSoapThroughAA();

                request.Authentication = XBLAuth;

                StsTest.WebService.Soap.Xbos.GamertagEnumerateResult ger = request.GamertagEnumerate(User.Puid, 
                    StsTest.WebService.Soap.Xbos.PaymentTypeEnum.All, GetSecurityTicketTestBase.WMFoundationTitleId);

                if (ger.offersReturned == 0)
                {
                    Global.RO.Warn("We did not get an offer back, which is bad.");
                    Global.RO.Warn("These tests are meant to exercise the endpoints only though, so not failing.");
                }
                else
                {
                    GamertagOffer = ger.infos[0].offerID;
                }
            }
        }
        
        [TestCase]
        public class PurchaseGamertag : TestNode
        {
            public override void PreRun ()
            {
                if (GamertagOffer.Equals(Guid.Empty))
                {
                    throw new UnexpectedTestResultException("No Gamertag offer available, cannot continue.");
                }
            }

            public override void Run ()
            {
                XbosBillingSoapThroughAA request = new XbosBillingSoapThroughAA();

                request.Authentication = XBLAuth;

                uint response = request.PurchaseGamertag(User.Puid, Machine, GamertagOffer, 
                    StsTest.WebService.Soap.Xbos.PaymentTypeEnum.Token, UserEditor.GenerateRandomGamertag(), "");

                if (response != 0)
                {
                    throw new UnexpectedTestResultException("Expected to get 0!");
                }
            }
        }

        [TestCase]
        public class CreateMobileAccount : TestNode
        {
            public override void PreRun (RUN_TYPE runType)
            {
                EndToEnd.Reset();
                EndToEnd.UserTicket = false;
            }

            public override void Run ()
            {
                XuacsUserAccountSoapThroughAA request = new XuacsUserAccountSoapThroughAA();

                request.Authentication = XBLAuth;

                request.CreateMobileAccount(PassportUser.PassportPuid, PassportUser.SessionToken, Machine,
                    UserEditor.GenerateRandomGamertag(), 103, 1, DateTime.UtcNow.AddYears(-25));
            }

            public override void PostRun (RUN_TYPE runType)
            {
                EndToEnd.Reset();
                EndToEnd.UserTicket = true;
            }
        }

        [TestCase]
        public class GenerateGamertag : TestNode
        {
            public override void Run ()
            {
                XuacsUserAccountSoapThroughAA request = new XuacsUserAccountSoapThroughAA();

                request.Authentication = XBLAuth;

                string response = request.GenerateGamertag("MySeed", Machine, 
                    StsTest.WebService.Soap.Xuacs.GamertagSuggestionType.SeedSuggestion);

                if (String.IsNullOrEmpty(response))
                {
                    throw new UnexpectedTestResultException("Expected to get a string!");
                }
            }
        }
        
        [TestCase]
        public class AcceptTermsOfService : TestNode
        {
            public override void Run ()
            {
                XuacsUserAccountSoapThroughAA request = new XuacsUserAccountSoapThroughAA();

                request.Authentication = WLIDAuth;

                // need to use User to force user creation for this call
                request.AcceptTermsOfService((ulong)(User.UserPassportPuid), PassportUser.SessionToken, 
                    StsTest.WebService.Soap.Xuacs.ServiceTypeEnum.XboxLive);
            }
        }

        [TestCase]
        public class GetSupportedCountries : TestNode
        {
            public override void Run ()
            {
                XuacsUserAccountSoapThroughAA request = new XuacsUserAccountSoapThroughAA();

                request.Authentication = WLIDAuth;

                StsTest.WebService.Soap.Xuacs.CountryInfo[] response = request.GetSupportedCountries(1, 15);

                if (response.Length == 0)
                {
                    throw new UnexpectedTestResultException("Expected to get some countries!");
                }
            }
        }
    }
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\Output.cs ===
using ServerTestFramework;

namespace StsTest
{

public static class Output
{
    public static bool DisableOutput
    {
        get
        {
            return StsPlugin.DisableOutput;
        }
        set
        {
            StsPlugin.DisableOutput = value;
        }
    }

    public static void Debug (string format, params object[] args)
    {
        if (!DisableOutput)
        {
            Global.RO.Debug(format, args);
        }
    }

    public static void Info (string format, params object[] args)
    {
        if (!DisableOutput)
        {
            Global.RO.Info(format, args);
        }
    }

    public static void Success (string format, params object[] args)
    {
        if (!DisableOutput)
        {
            Global.RO.Success(format, args);
        }
    }

    public static void Error (string format, params object[] args)
    {
        if (!DisableOutput)
        {
            Global.RO.Error(format, args);
        }
    }
}

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\SamlAttributeCollection.cs ===
using System;
using System.Collections.Generic;
using System.Xml;

using Microsoft.Live.Test.Common;

namespace StsTest
{
    public class SamlAttributeValue
    {
        public string Name;
        public string Namespace;
        public string Value;
        public bool Checked = false;
    }

    public class SamlAttributeCollection
    {
        protected Dictionary<string, SamlAttributeValue> Values = new Dictionary<string, SamlAttributeValue>();

        public SamlAttributeCollection (XmlDocumentEx xmlDoc)
        {
            XmlNodeList nodes = xmlDoc.SelectNodes("saml:Assertion/saml:AttributeStatement/saml:Attribute", xmlDoc.NamespaceManager);

            foreach (XmlNode node in nodes)
            {
                SamlAttributeValue sav = new SamlAttributeValue();

                XmlNode name = node.SelectSingleNode("@AttributeName", xmlDoc.NamespaceManager);
                if (name == null) { throw new SamlAttributeCollectionException("Attribute does not contain a name!"); }
                sav.Name = name.InnerText;

                XmlNode namespac = node.SelectSingleNode("@AttributeNamespace", xmlDoc.NamespaceManager);
                sav.Namespace = (namespac == null ? null : namespac.InnerText);

                XmlNode val = node.SelectSingleNode("saml:AttributeValue", xmlDoc.NamespaceManager);
                if (val == null) { throw new SamlAttributeCollectionException("Attribute [Name=" + sav.Name + "] does not contain a value!"); }
                sav.Value = val.InnerText;

                Values.Add(sav.Name, sav);
            }
        }

        public SamlAttributeValue this[string name]
        {
            get
            {
                SamlAttributeValue ans;
                return (Values.TryGetValue(name, out ans) ? ans : null);
            }
        }

        public Dictionary<string, SamlAttributeValue>.ValueCollection Attributes
        {
            get
            {
                return Values.Values;
            }
        }
    }

    public class SamlAttributeCollectionException : Exception
    {
        public SamlAttributeCollectionException (string message) : base(message) { }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\NpdbSettingsUtil.cs ===
﻿using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using ServerTestFramework;
using ServerTestFramework.LiveService;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public static class NpdbSettingsUtil
	{
        /// <summary>
        /// 
        /// </summary>
        public static uint TimeWindow
        {
            get
            {
                return xonline.common.config.Config.GetUIntSetting(xonline.common.config.Setting.sts_token_window_minutes);
            }
            set
            {
                UpdateSetting(xonline.common.config.Setting.sts_token_window_minutes, value.ToString());
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static string CertSubject
        {
            get
            {
                return xonline.common.config.Config.GetSetting(xonline.common.config.Setting.sts_cert_subject);
            }
            set
            {
                UpdateSetting(xonline.common.config.Setting.sts_cert_subject, value);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static string IssuerName
        {
            get
            {
                return xonline.common.config.Config.GetSetting(xonline.common.config.Setting.sts_token_issuer_name);
            }
            set
            {
                UpdateSetting(xonline.common.config.Setting.sts_token_issuer_name, value);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static TimeSpan CacheRefreshInterval
        {
            get
            {
                TimeSpan refresh = TimeSpan.FromMilliseconds(xonline.common.config.Config.GetIntSetting(xonline.common.config.Setting.config_cacheRefreshInterval));
                return refresh;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        private static List<byte> countryIds;
        public static List<byte> CountryIDs
        {
            get
            {
                if (countryIds == null)
                {
                    countryIds = new List<byte>(100);
                    using (SqlConnection cxn = new SqlConnection(xonline.common.config.Config.NpdbConnectionString))
                    {
                        cxn.Open();
                        using (SqlCommand sqlCommand = cxn.CreateCommand())
                        {
                            sqlCommand.CommandText = String.Format("select ti_country_id from dbo.t_countries");
                            using (SqlDataReader reader = sqlCommand.ExecuteReader())
                            {
                                while(reader.Read())
                                    countryIds.Add(reader.GetByte(0));
                            }
                        }
                    }
                }
                return countryIds;
            }            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static byte GetRandomCountryID()
        {
            return CountryIDs[ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(CountryIDs.Count)];
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
        public static string CountryIDToString(byte id)
        {
            return xonline.common.utilities.CountryDictionary.CountryCode(id);
        }

        /// <summary>
        /// 
        /// </summary>
        public static void WaitForCacheRefresh()
        {
            //Add 5 secs, for good measure
            Output.Info("Waiting {0} min(s) for the cache to refresh... Next update: {1}", CacheRefreshInterval.TotalMinutes, DateTime.Now.Add(CacheRefreshInterval).ToShortTimeString());
            System.Threading.Thread.Sleep((int)CacheRefreshInterval.TotalMilliseconds + 5000);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="settingName"></param>
        /// <param name="value"></param>
        public static void UpdateSetting(string settingName, string value)
        {
            using (SqlConnection cxn = new SqlConnection(xonline.common.config.Config.NpdbConnectionString))
            {
                cxn.Open();
                using (SqlCommand sqlCommand = cxn.CreateCommand())
                {
                    sqlCommand.CommandText = String.Format("update t_settings set vc_value = '{0}' where vc_setting = '{1}'", value, settingName);
                    sqlCommand.ExecuteNonQuery();
                }
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="settingName"></param>
        /// <param name="value"></param>
        public static SettingState AddOverrideSetting(string settingName, string value)
        {
            return Global.XEnv.OverrideSetting("ALL", "ALL", settingName, value, -1);
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\GetSecurityTicket.cs ===
﻿using System;
using System.Net;
using System.Net.Security;
using System.Net.Sockets;
using System.Reflection;
using System.Security.Cryptography.X509Certificates;

using xonline.common.config;

using ServerTestFramework;
using ServerTestFramework.Utilities;

namespace StsTest.WebService
{
    public interface IGetSecurityTicket : IBaseGetWebRequest
    {
        /// <summary>
        /// The AAInfo that will be used to make the request.
        /// </summary>
        AAInfoWrapper AAInfo { get; set; }

        /// <summary>
        /// The XErr header value from the response, or null if there was none.
        /// </summary>
        uint? XErr { get; set; }

        /// <summary>
        /// The method of the hour.
        /// </summary>
        string GetSecurityTicket (byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId);

        /// <summary>
        /// Almost as good as GetSecurityTicket.
        /// </summary>
        string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion);

        /// <summary>
        /// Almost as good as GetSecurityTicket. And we can specify an audience.
        /// </summary>
        string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion, string audienceUri);
    }

    public interface IBaseGetWebRequest
    {
        /// <summary>
        /// Calls the base GetWebRequest.
        /// </summary>
        WebRequest BaseGetWebRequest (Uri uri);
    }

    static class GetSecurityTicketBase
    {
        static GetSecurityTicketBase ()
        {
            AllGood = delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                            System.Security.Cryptography.X509Certificates.X509Chain chain,
                                            System.Net.Security.SslPolicyErrors sslPolicyErrors)
            {
                return true; // **** Always accept
            };
        }

        public static WebRequest GetWebRequest (IGetSecurityTicket igst, Uri uri)
        {
            // override uri to point at the STS virtual interface
            string new_uri = uri.GetLeftPart(UriPartial.Scheme) + 
                Global.XEnv.GetVirtualInterface(VirtualInterface.sts).ToString() + uri.PathAndQuery;
            Uri newUri = new Uri(new_uri);

            WebRequest ans = igst.BaseGetWebRequest(newUri);

            AAInfoWrapper aa = igst.AAInfo;

            if (aa != null)
            {
                // the same thing that the gateway does
                xonline.common.service.AAInfo.MarshallToHeaders(ans.Headers, aa);
            }

            return ans;
        }

        public static bool _CertCheckDisabled = false;

        /// <summary>Backing for ClientCertificate.</summary>
        private static X509Certificate2 _ClientCertificate = null;

        /// <summary>
        /// The client certificate for E2E tests.
        /// </summary>
        public static X509Certificate2 ClientCertificate
        {
            get
            {
                if (_ClientCertificate == null)
                {
                    System.IO.Stream certStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("WM7Official.pfx");
                    System.IO.BinaryReader certReader = new System.IO.BinaryReader(certStream);
                    byte[] certBytes = certReader.ReadBytes((int)(certStream.Length));
                    _ClientCertificate = new X509Certificate2(certBytes, "udc");
                }

                return _ClientCertificate;
            }
        }

        /// <summary>Backing for ClientCertificateChain.</summary>
        private static X509Certificate2Collection _ClientCertificateChain = null;

        /// <summary>
        /// The client certificate chain for E2E tests.
        /// </summary>
        public static X509Certificate2Collection ClientCertificateChain
        {
            get
            {
                if (_ClientCertificateChain == null)
                {
                    System.IO.Stream p7bStream = Assembly.GetExecutingAssembly().GetManifestResourceStream("WM7Official.p7b");
                    System.IO.BinaryReader p7bReader = new System.IO.BinaryReader(p7bStream);
                    byte[] p7bBytes = p7bReader.ReadBytes((int)(p7bStream.Length));
                    _ClientCertificateChain = Certificates.OpenPKCS7(p7bBytes);
                }

                return _ClientCertificateChain;
            }
        }

        public static void AddCertChainToStore ()
        {
            X509Store store = new X509Store(StoreName.CertificateAuthority, StoreLocation.LocalMachine);
            store.Open(OpenFlags.ReadWrite);
            store.AddRange(ClientCertificateChain);
            store.Close();
        }

        public static void RemoveCertChainFromStore ()
        {
            X509Store store = new X509Store(StoreName.CertificateAuthority, StoreLocation.LocalMachine);
            store.Open(OpenFlags.ReadWrite);
            store.RemoveRange(ClientCertificateChain);
            store.Close();
        }

        public static RemoteCertificateValidationCallback AllGood = null;

        private static X509Certificate PickMyCert (object sender, string targetHost, X509CertificateCollection localCertificates,
            X509Certificate remoteCertificate, string[] acceptableIssuers)
        {
            return ClientCertificate;
        }

        public static WebRequest GetWebRequestForAA (IBaseGetWebRequest igst, Uri uri, string authentication)
        {
            bool useSSL = Config.GetBoolSetting("GSTUseSSL");
            bool useCert = Config.GetBoolSetting("GSTUseCert");

            // override uri to point at the AuthSG virtual interface
            string scheme_part = uri.GetLeftPart(UriPartial.Scheme);
            IPEndPoint authsg_ipe = Global.XEnv.GetVirtualInterface(VirtualInterface.authsg);
            if (useSSL)
            {
                scheme_part = scheme_part.Replace(Uri.UriSchemeHttp, Uri.UriSchemeHttps);
                authsg_ipe = Global.XEnv.GetVirtualInterface(VirtualInterface.authsg_ssl);

                // Also, disable certificate checking
                if (!_CertCheckDisabled)
                {
                    System.Net.ServicePointManager.ServerCertificateValidationCallback +=
                        delegate(object sender, System.Security.Cryptography.X509Certificates.X509Certificate certificate,
                                                System.Security.Cryptography.X509Certificates.X509Chain chain,
                                                System.Net.Security.SslPolicyErrors sslPolicyErrors)
                        {
                            return true; // **** Always accept
                        };
                    _CertCheckDisabled = true;
                }
            }

            string authsg_vi = authsg_ipe.ToString();
            string new_uri = scheme_part + authsg_vi + uri.PathAndQuery;
            Uri newUri = new Uri(new_uri);

            WebRequest ans = igst.BaseGetWebRequest(newUri);

            if (useSSL && useCert && ans is HttpWebRequest)
            {
                {
                    // Use this bit of .Net specific trickery to enable our use of whatever client certificate we want in
                    // HttpWebRequest.  See this documentation on SslStream http://msdn.microsoft.com/en-us/library/ms145057.aspx
                    // The Note down below mentions this "technique" of caching an SSL state
                    TcpClient tcp = new TcpClient(authsg_ipe.Address.ToString(), authsg_ipe.Port);
                    SslStream ssl = new SslStream(tcp.GetStream(), false, AllGood, PickMyCert);
                    ssl.AuthenticateAsClient(authsg_ipe.Address.ToString(), new X509CertificateCollection(new X509Certificate[] { ClientCertificate }),
                        System.Security.Authentication.SslProtocols.Default, false);

                    // create a request that we don't care about
                    HttpClient.Request req = new HttpClient.Request(authsg_vi, uri.PathAndQuery);

                    ssl.Write(req.ToBytes());
                    ssl.Flush();
                    // this read is necessary to force the client certificate
                    ssl.Read(new byte[1], 0, 1);
                    ssl.Close();
                }

                ((HttpWebRequest)ans).ClientCertificates.Add(ClientCertificate);
            }

            ans.Headers.Add(authentication);

            return ans;
        }

        public static void PostProcessWebResponse (IGetSecurityTicket igst, WebResponse response)
        {
            string err_val = response.Headers.Get("X-Err");

            if (err_val == null)
            {
                igst.XErr = null;
            }
            else
            {
                if (!err_val.StartsWith("0x"))
                {
                    throw new UnexpectedTestResultException("X-Err header is an invalid format: " + err_val);
                }

                uint err;
                if (!uint.TryParse(err_val.Substring(2), System.Globalization.NumberStyles.AllowHexSpecifier, null, out err))
                {
                    throw new UnexpectedTestResultException("X-Err header is an invalid uint: " + err_val);
                }

                igst.XErr = err;
            }

            string wwwa_val = response.Headers.Get("WWW-Authenticate");

            if (wwwa_val != null)
            {
                Output.Error(wwwa_val);
            }
        }
    }

    public class GetSecurityTicketPost : StsTest.WebService.Post.SecurityTicket, IGetSecurityTicket
    {
        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequest(this, uri);
        }

        protected override WebResponse GetWebResponse (WebRequest request)
        {
            WebResponse ans = base.GetWebResponse(request);
 	        GetSecurityTicketBase.PostProcessWebResponse(this, ans);
            return ans;
        }

        #region IGetSecurityTicket Members

        public AAInfoWrapper AAInfo { get; set; }

        public uint? XErr { get; set; }

        public string GetSecurityTicket (byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId)
        {
            return base.GetSecurityTicket(platformType.ToString(), titleId.ToString(), titleVersion.ToString(), clientVersion.ToString(), deviceId);
        }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion)
        {
            return base.GetPartnerSecurityTicket(xuid.ToString(), titleId.ToString(), titleVersion.ToString());
        }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion, string audienceUri)
        {
            throw new NotImplementedException();
        }

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }

    public class GetSecurityTicketGet : StsTest.WebService.Get.SecurityTicket, IGetSecurityTicket
    {
        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequest(this, uri);
        }

        protected override WebResponse GetWebResponse (WebRequest request)
        {
            WebResponse ans = base.GetWebResponse(request);
            GetSecurityTicketBase.PostProcessWebResponse(this, ans);
            return ans;
        }

        #region IGetSecurityTicket Members

        public AAInfoWrapper AAInfo { get; set; }

        public uint? XErr { get; set; }

        public string GetSecurityTicket (byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId)
        {
            return base.GetSecurityTicket(platformType.ToString(), titleId.ToString(), titleVersion.ToString(), clientVersion.ToString(), deviceId);
        }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion)
        {
            return base.GetPartnerSecurityTicket(xuid.ToString(), titleId.ToString(), titleVersion.ToString());
        }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion, string audienceUri)
        {
            throw new NotImplementedException();
        }

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }

    public class GetSecurityTicketSoap : StsTest.WebService.Soap.SecurityTicket, IGetSecurityTicket
    {
        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequest(this, uri);
        }

        protected override WebResponse GetWebResponse (WebRequest request)
        {
            WebResponse ans = base.GetWebResponse(request);
            GetSecurityTicketBase.PostProcessWebResponse(this, ans);
            return ans;
        }

        #region IGetSecurityTicket Members

        public AAInfoWrapper AAInfo { get; set; }

        public uint? XErr { get; set; }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion, string audienceUri)
        {
            throw new NotImplementedException();
        }

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }

    public class GetSecurityTicketAudienceSoap : StsTest.WebService.Soap.StsAudience.SecurityTicket, IGetSecurityTicket
    {
        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequest(this, uri);
        }

        protected override WebResponse GetWebResponse (WebRequest request)
        {
            WebResponse ans = base.GetWebResponse(request);
            GetSecurityTicketBase.PostProcessWebResponse(this, ans);
            return ans;
        }

        #region IGetSecurityTicket Members

        public AAInfoWrapper AAInfo { get; set; }

        public uint? XErr { get; set; }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion)
        {
            throw new NotImplementedException();
        }

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }

    public class GetSecurityTicketSoapThroughAA : StsTest.WebService.Soap.StsAudience.SecurityTicket, IGetSecurityTicket
    {
        public string Authentication;

        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequestForAA(this, uri, Authentication);
        }

        protected override WebResponse GetWebResponse (WebRequest request)
        {
            WebResponse ans = base.GetWebResponse(request);
            GetSecurityTicketBase.PostProcessWebResponse(this, ans);
            return ans;
        }

        #region IGetSecurityTicket Members

        public AAInfoWrapper AAInfo { get; set; }

        public uint? XErr { get; set; }

        public string GetPartnerSecurityTicket (ulong xuid, uint titleId, uint titleVersion)
        {
            throw new NotImplementedException();
        }

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }

    public class XbosBillingSoapThroughAA : StsTest.WebService.Soap.Xbos.Billing, IBaseGetWebRequest
    {
        public string Authentication;

        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequestForAA(this, uri, Authentication);
        }

        #region IBaseGetWebRequest Members

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }

    public class XuacsUserAccountSoap : StsTest.WebService.Soap.Xuacs.UserAccount
    {
        public string Authentication;

        protected override WebRequest GetWebRequest (Uri uri)
        {
            // override uri to point at the XUACS virtual interface
            string new_uri = uri.GetLeftPart(UriPartial.Scheme) +
                Global.XEnv.GetVirtualInterface(VirtualInterface.xuacs).ToString() + uri.PathAndQuery;
            Uri newUri = new Uri(new_uri);

            WebRequest ans = base.GetWebRequest(newUri);

            AAInfoWrapper aa = AAInfo;

            if (aa != null)
            {
                // the same thing that the gateway does
                xonline.common.service.AAInfo.MarshallToHeaders(ans.Headers, aa);
            }

            ans.Headers.Add("X-ClientType: zune.net");

            return ans;
        }

        public AAInfoWrapper AAInfo { get; set; }
    }

    public class XuacsUserAccountSoapThroughAA : StsTest.WebService.Soap.Xuacs.UserAccount, IBaseGetWebRequest
    {
        public string Authentication;

        protected override WebRequest GetWebRequest (Uri uri)
        {
            return GetSecurityTicketBase.GetWebRequestForAA(this, uri, Authentication);
        }

        #region IBaseGetWebRequest Members

        public WebRequest BaseGetWebRequest (Uri uri)
        {
            return base.GetWebRequest(uri);
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\SamlUtil.cs ===
﻿using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IdentityModel.Selectors;
using System.IdentityModel.Tokens;
using System.IO;
using System.ServiceModel.Security;
using System.Text;
using System.Web;
using System.Xml;
using System.Xml.Schema;

using Microsoft.Live.Test.Common;

using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.common.service;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public static class SamlUtil
	{
        private static XmlSchema saml11Xsd;
        private static XmlSchema dsigXsd;
        private static bool saml11XsdInit = false;
        private static bool dsigXsdInit = false;

        /// <summary>
        /// 
        /// </summary>
        static SamlUtil()
        {
            ValidatingIssuer = Config.GetSetting("StsSamlIssuer");
        }

        /// <summary>
        /// 
        /// </summary>
        public static string ValidatingIssuer
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public static XmlSchema Saml11Xsd
        {
            get
            {
                if (!saml11XsdInit)
                {
                    try
                    {
                        saml11Xsd = XmlSchema.Read(
                            System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("oasis-sstc-saml-schema-assertion-1.1.xsd"),
                            null);
                        saml11XsdInit = true;
                    }
                    catch (System.Net.WebException)
                    {
                        saml11XsdInit = true;
                        Global.RO.Warn("We could not load the XSDs to validate the SAML token.  Allowing this to pass for now.");
                    }
                }

                return saml11Xsd;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public static XmlSchema DSigXsd
        {
            get
            {
                if (!dsigXsdInit)
                {
                    try
                    {
                        dsigXsd = XmlSchema.Read(
                            System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceStream("xmldsig-core-schema.xsd"),
                            null);
                        dsigXsdInit = true;
                    }
                    catch (System.Net.WebException)
                    {
                        dsigXsdInit = true;
                        Global.RO.Warn("We could not load the XSDs to validate the SAML token.  Allowing this to pass for now.");
                    }
                }

                return dsigXsd;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="stsRequest"></param>
        /// <param name="stsResponse"></param>
        public static void ValidateSamlToken(StsRequest request, StsResponse response)
        {
            ValidateSamlToken(request, response, true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="response"></param>
        /// <param name="doExtensiveValidation"></param>
        public static void ValidateSamlToken(StsRequest request, StsResponse response, bool doExtensiveValidation)
        {
            ValidateSamlToken(request, response, doExtensiveValidation, true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="doExtensiveValidation"></param>
        /// <param name="stsRequest"></param>
        /// <param name="stsResponse"></param>
        public static void ValidateSamlToken(StsRequest request, StsResponse response, bool doExtensiveValidation, bool doXuidValidation)
        {
            if (!response.Succeeded)
                throw new StsFailureException(response.HResult);
            if (String.IsNullOrEmpty(response.Token))
                throw new StsFailureException("STS service previously failed; no SAML token was returned.");

            try
            {
                Output.Info("Validating SAML assertion...");
                using (XmlReader reader = XmlReader.Create(new StringReader(response.Token)))
                {
                    if (doExtensiveValidation)
                    {
                        SecurityTokenResolver outOfBandTokenResolver = SecurityTokenResolver.CreateDefaultSecurityTokenResolver(new ReadOnlyCollection<SecurityToken>(new List<SecurityToken>()), false);
                        SamlSerializer serializer = new SamlSerializer();
                        //this validates the signature and time windows, as well as format of conditions and attributes
                        SamlSecurityToken securityToken = serializer.ReadToken(reader, WSSecurityTokenSerializer.DefaultInstance, outOfBandTokenResolver);
                        Output.Debug("\tValidated SAML format, signature and conditions");

                        if(Config.GetBoolSetting("DoXsdValidation"))
                            //validation against well-known XSD, published by OASIS
                            ValidateSamlTokenAgainstSchema(response.Token);
                    }

                    XmlDocumentEx samlXml = new XmlDocumentEx(response.Token, true);

                    //general saml validation
                    int majorVersion = int.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@MajorVersion"));
                    Assert.AreEqual(Config.GetIntSetting("StsSamlMajorVersion"), majorVersion, String.Format("; SAML MajorVersion attribute is {0}, but {1} is expected.", majorVersion, Config.GetIntSetting("StsSamlMajorVersion")));
                    int minorVersion = int.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@MinorVersion"));
                    Assert.AreEqual(Config.GetIntSetting("StsSamlMinorVersion"), minorVersion, String.Format("; SAML MinorVersion attribute is {0}, but {1} is expected.", minorVersion, Config.GetIntSetting("StsSamlMinorVersion")));
                    Output.Debug("\tValidated SAML Assertion version: v{0}.{1}", majorVersion, minorVersion);
                    string issuer = GetSamlNodeValue(samlXml, "saml:Assertion/@Issuer");
                    Assert.AreEqual(ValidatingIssuer, issuer, String.Format("; SAML Issuer attribute is {0}, but {1} is expected.", issuer, Config.GetSetting("StsSamlIssuer")));
                    Output.Debug("\tValidated SAML issuer: {0}", issuer);

                    //time window validation... this may be redundtant and probably taken care of in SamlSerializer.ReadToken
                    //NOTE: given time sync issues, we extend the time window by 5 mins
                    DateTime utcNow = DateTime.UtcNow;
                    DateTime issueInstant = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@IssueInstant")).ToUniversalTime();
                    DateTime notBefore = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/@NotBefore")).ToUniversalTime();
                    DateTime notOnOrAfter = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/@NotOnOrAfter")).ToUniversalTime();

                    Assert.IsTrue(utcNow.AddMinutes(5) >= notBefore && utcNow.AddMinutes(-5) < notOnOrAfter, String.Format("; SAML assertion appears to be outside of the expected (valid) time window; token is valid from {0} - {1}, but current (system) time is: {2}.", notBefore, notOnOrAfter, utcNow));
                    //issue instant validation.  Because of our implementation, NotBefore and IssueInstant should always be the same...
                    Assert.AreEqual(notBefore, issueInstant, String.Format("; Expecting NotBefore and IssueInstant to be the same, but found NotBefore={0}, IssueInstant={1}.", notBefore.ToString("o"), issueInstant.ToString("o")));
                    double instantDiff = response.ResponseRecieved.Subtract(issueInstant).TotalMilliseconds;
                    if (instantDiff > Config.GetIntSetting("IssueInstantThreshold"))
                        Global.RO.Warn("WARNING: IssueInstant is greater than {0}ms, after receiving the response from the STS service. This may indicate a failure or that the service is performing poorly. This could also be caused by time sync issues between the client/server.", instantDiff);
                    Output.Debug("\tSAML has an effective time window of: {0}", notOnOrAfter.Subtract(notBefore));
                    Output.Debug("\tValidated SAML time threshold: {0} is within {1} - {2} (local: {3}, {4} - {5})", utcNow, notBefore, notOnOrAfter, utcNow.ToLocalTime(), notBefore.ToLocalTime(), notOnOrAfter.ToLocalTime());

                    //Xbox STS-specific validation                    

                    //signature, specifically canonicalization and x509 validation... this may be redundtant and probably taken care of in SamlSerializer.ReadToken
                    string canonicalization = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:CanonicalizationMethod/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("StsCanonicalization"), canonicalization, String.Format("; Canonicalization method is {0}, but expected {1}.", canonicalization, Config.GetSetting("StsCanonicalization")));
                    string signatureAlgorithm = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:SignatureMethod/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("StsSignatureAlgorithm"), signatureAlgorithm, String.Format("; Signature method is {0}, but expected {1}.", signatureAlgorithm, Config.GetSetting("StsSignatureAlgorithm")));

                    string assertionID = GetSamlNodeValue(samlXml, "saml:Assertion/@AssertionID");
                    string referenceUri = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/@URI");
                    referenceUri = referenceUri.TrimStart('#');    //remove the '#' char before comparing
                    Assert.AreEqual(assertionID, referenceUri, String.Format("; Reference URI is {0}, but expected {1}.", referenceUri, assertionID));
                    string envSigTransform = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/dfltns:Transforms/dfltns:Transform[1]/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("EnvelopedSignatureTransform"), envSigTransform, String.Format("; First transform is {0}, but expected {1}.", envSigTransform, Config.GetSetting("EnvelopedSignatureTransform")));
                    string canonTransform = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/dfltns:Transforms/dfltns:Transform[2]/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("StsCanonicalization"), canonTransform, String.Format("; First transform is {0}, but expected {1}.", canonTransform, Config.GetSetting("StsCanonicalization")));
                    string digestMethod = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/dfltns:DigestMethod/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("DigestAlgorithm"), digestMethod, String.Format("; Digest method is {0}, but expected {1}.", digestMethod, Config.GetSetting("DigestAlgorithm")));
                    Output.Debug("\tValidated SAML Signed Info");

                    string base64Cert = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:KeyInfo/dfltns:X509Data/dfltns:X509Certificate");
                    System.Security.Cryptography.X509Certificates.X509Certificate2 signingCert = new System.Security.Cryptography.X509Certificates.X509Certificate2(Convert.FromBase64String(base64Cert));
                    signingCert.Verify();
                    Output.Debug("\tValidated SAML x509 cert: Subject={0}, Issuer={1}, ValidFrom={2}, ValidTo={3}, Thumb={4}", signingCert.Subject, signingCert.Issuer, signingCert.NotBefore, signingCert.NotAfter, signingCert.Thumbprint);

                    //audience
                    string gotAudience = GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/saml:AudienceRestrictionCondition/saml:Audience");
                    Assert.AreEqual(request.Audience.Trim(), gotAudience, String.Format("; SAML audience is {0}, but expected {1}.", gotAudience, request.Audience));
                    Output.Debug("\tValidated audience: {0}", gotAudience);
                    
                    //NOTE: as of 7/16/09, in the saml token we now prefix all hex values with '0x'.  This is only in the output, not in the request...
                    //Title ID
                    string expectedTitleID = "0x" + StsRequest.GetUInt32Value(request.TitleID, true).Trim();
                    string gotTitleID = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='TitleID']/saml:AttributeValue");
                    Assert.AreEqual(expectedTitleID, gotTitleID, String.Format("; SAML titleID is {0}, but expected {1}.", gotTitleID, expectedTitleID));
                    Output.Debug("\tValidated title ID: {0}", gotTitleID);

                    //Title Version
                    string expectedTitleVersion = "0x" + StsRequest.GetUInt32Value(request.FakeSGSlot.titleVersion, true).Trim();
                    string gotTitleVersion = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='TitleVersion']/saml:AttributeValue");
                    Assert.AreEqual(expectedTitleVersion, gotTitleVersion, String.Format("; SAML title Version is {0}, but expected {1}.", gotTitleVersion, expectedTitleVersion));
                    Output.Debug("\tValidated title Version: {0}", gotTitleVersion);
                                        
                    //the subject of the SAML assertion should always be xuid1
                    string expectedSubject = "0x" + request.Xuids[0].ToString(true).Trim();
                    string subject = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Subject/saml:NameIdentifier");
                    Assert.AreEqual(expectedSubject, subject, String.Format("; SAML subject is {0}, but expected xuid1 {1}.", subject, expectedSubject));
                    Output.Debug("\tValidated SAML Subject is xuid1 ({0})", subject);

                    //Machine ID
                    string expectedMachineID = String.Format("0x{0:X16}", request.FakeSGSlot.machinePuid);
                    string gotMachineID = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='MachineID']/saml:AttributeValue");
                    Assert.AreEqual(expectedMachineID, gotMachineID, String.Format("; SAML MachineID is {0}, but expected {1}.", gotMachineID, expectedMachineID));
                    Output.Debug("\tValidated Machine ID: {0}", gotMachineID);

                    //Client Version
                    string expectedClientVersion = String.Format("0x{0:X8}", GetClientVersion(request.FakeSGSlot));
                    string gotClientVersion = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='ClientVersion']/saml:AttributeValue");
                    Assert.AreEqual(expectedClientVersion, gotClientVersion, String.Format("; SAML ClientVersion is {0}, but expected {1}.", gotClientVersion, expectedClientVersion));
                    Output.Debug("\tValidated Client Version: {0} (v{1})", gotClientVersion, ClientVersionToString(GetClientVersion(request.FakeSGSlot)));

                    //Platform Type
                    string expectedPlatformType = String.Format("0x{0:X2}", DeterminePlatform(request.FakeSGSlot.machinePuid, request.Platform));
                    string gotPlatformType = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='PlatformType']/saml:AttributeValue");
                    Assert.AreEqual(expectedPlatformType, gotPlatformType, String.Format("; SAML platform Type is {0}, but expected {1}.", gotPlatformType, expectedPlatformType));
                    Output.Debug("\tValidated Platform Type: {0} ({1})", gotPlatformType, StsRequest.GetPlatformStringFromMachinePuid(request.FakeSGSlot.machinePuid));

                    if (doXuidValidation)
                    {
                        for (int i = 0; i < request.Xuids.Count; i++)
                        {
                            string xuidXpath = string.Format("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Xuid{0}']/saml:AttributeValue", i + 1);
                            string countryXpath = string.Format("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Country{0}']/saml:AttributeValue", i + 1);
                            string tierXpath = string.Format("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Tier{0}']/saml:AttributeValue", i + 1);

                            if (!request.Xuids[i].IsNullOrIgnore())
                            {
                                //xuid
                                string expectedXuid = "0x" + request.Xuids[i].ToString(true).Trim();
                                string gotXuid = GetSamlNodeValue(samlXml, xuidXpath);
                                Assert.AreEqual(expectedXuid, gotXuid, String.Format("; SAML xuid{0} is {1}, but expected {2}.", i + 1, gotXuid, expectedXuid));

                                //country
                                string expectedCountry = String.Format("0x{0:X2}", request.Xuids[i].CountryID);
                                string gotCountry = GetSamlNodeValue(samlXml, countryXpath);
                                Assert.AreEqual(expectedCountry, gotCountry, String.Format("; SAML country{0} is {1}, but expected {2}.", i + 1, gotCountry, expectedCountry));

                                //tier
                                string expectedTier = String.Format("0x{0:X2}", request.Xuids[i].Tier);
                                string gotTier = GetSamlNodeValue(samlXml, tierXpath);
                                Assert.AreEqual(expectedTier, gotTier, String.Format("; SAML tier{0} is {1}, but expected {2}.", i + 1, gotTier, expectedTier));
                                Output.Debug("\tValidated xuid{0}: {1}, country{0}: {2} ({3}), tier{0}: {4} ({5})", i + 1, gotXuid, gotCountry, xonline.common.utilities.CountryDictionary.CountryCode(request.Xuids[i].CountryID), gotTier, StsRequest.GetTierStringFromByte(request.Xuids[i].Tier));
                            }
                            else
                            {
                                XmlNode temp = samlXml.SelectSingleNode(xuidXpath, samlXml.NamespaceManager);
                                Assert.IsTrue(temp == null, String.Format("; Found xuid{0} claim when none was expected!", i + 1));
                                temp = samlXml.SelectSingleNode(countryXpath, samlXml.NamespaceManager);
                                Assert.IsTrue(temp == null, String.Format("; Found country{0} claim when none was expected!", i + 1));
                                temp = samlXml.SelectSingleNode(tierXpath, samlXml.NamespaceManager);
                                Assert.IsTrue(temp == null, String.Format("; Found tier{0} claim when none was expected!", i + 1));
                            }
                        }
                    }
                    
                    Output.Success("Successfully validated SAML assertion!");
                }
            }
            catch (Exception e)
            {
                string message = String.Format("Error validating SAML assertion; {0}", e.Message);
                Output.Error(message);
                throw new Exception(message, e);
            }
        }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="doExtensiveValidation"></param>
        /// <param name="stsRequest"></param>
        /// <param name="stsResponse"></param>
        public static void ValidateSamlTokenFromWebMethod(StsRequest request, StsResponse response, bool doExtensiveValidation, bool doXuidValidation)
        {
            if (!response.Succeeded)
                throw new StsFailureException(response.HResult);
            if (String.IsNullOrEmpty(response.Token))
                throw new StsFailureException("STS service previously failed; no SAML token was returned.");

            try
            {
                Output.Info("Validating SAML assertion...");
                string samlToken;
                using (XmlReader readerPre = XmlReader.Create(new StringReader(response.Token)))
                {
                    readerPre.IsStartElement( "saml" );
                    samlToken = HttpUtility.HtmlDecode( readerPre.ReadInnerXml() );
                }
                using (XmlReader reader = XmlReader.Create(new StringReader(samlToken)))
                {
                    if (doExtensiveValidation)
                    {
                        SecurityTokenResolver outOfBandTokenResolver = SecurityTokenResolver.CreateDefaultSecurityTokenResolver(new ReadOnlyCollection<SecurityToken>(new List<SecurityToken>()), false);
                        SamlSerializer serializer = new SamlSerializer();
                        //this validates the signature and time windows, as well as format of conditions and attributes
                        SamlSecurityToken securityToken = serializer.ReadToken(reader, WSSecurityTokenSerializer.DefaultInstance, outOfBandTokenResolver);
                        Output.Debug("\tValidated SAML format, signature and conditions");

                        if(Config.GetBoolSetting("DoXsdValidation"))
                            //validation against well-known XSD, published by OASIS
                            ValidateSamlTokenAgainstSchema(response.Token);
                    }

                    XmlDocumentEx samlXml = new XmlDocumentEx(samlToken, true);

                    //general saml validation
                    int majorVersion = int.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@MajorVersion"));
                    Assert.AreEqual(Config.GetIntSetting("StsSamlMajorVersion"), majorVersion, String.Format("; SAML MajorVersion attribute is {0}, but {1} is expected.", majorVersion, Config.GetIntSetting("StsSamlMajorVersion")));
                    int minorVersion = int.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@MinorVersion"));
                    Assert.AreEqual(Config.GetIntSetting("StsSamlMinorVersion"), minorVersion, String.Format("; SAML MinorVersion attribute is {0}, but {1} is expected.", minorVersion, Config.GetIntSetting("StsSamlMinorVersion")));
                    Output.Debug("\tValidated SAML Assertion version: v{0}.{1}", majorVersion, minorVersion);
                    string issuer = GetSamlNodeValue(samlXml, "saml:Assertion/@Issuer");
                    Assert.AreEqual(ValidatingIssuer, issuer, String.Format("; SAML Issuer attribute is {0}, but {1} is expected.", issuer, Config.GetSetting("StsSamlIssuer")));
                    Output.Debug("\tValidated SAML issuer: {0}", issuer);

                    //time window validation... this may be redundtant and probably taken care of in SamlSerializer.ReadToken
                    //NOTE: given time sync issues, we extend the time window by 5 mins
                    DateTime utcNow = DateTime.UtcNow;
                    DateTime issueInstant = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@IssueInstant")).ToUniversalTime();
                    DateTime notBefore = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/@NotBefore")).ToUniversalTime();
                    DateTime notOnOrAfter = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/@NotOnOrAfter")).ToUniversalTime();

                    Assert.IsTrue(utcNow.AddMinutes(5) >= notBefore && utcNow.AddMinutes(-5) < notOnOrAfter, String.Format("; SAML assertion appears to be outside of the expected (valid) time window; token is valid from {0} - {1}, but current (system) time is: {2}.", notBefore, notOnOrAfter, utcNow));
                    //issue instant validation.  Because of our implementation, NotBefore and IssueInstant should always be the same...
                    Assert.AreEqual(notBefore, issueInstant, String.Format("; Expecting NotBefore and IssueInstant to be the same, but found NotBefore={0}, IssueInstant={1}.", notBefore.ToString("o"), issueInstant.ToString("o")));
                    double instantDiff = response.ResponseRecieved.Subtract(issueInstant).TotalMilliseconds;
                    if (instantDiff > Config.GetIntSetting("IssueInstantThreshold"))
                        Global.RO.Warn("WARNING: IssueInstant is greater than {0}ms, after receiving the response from the STS service. This may indicate a failure or that the service is performing poorly. This could also be caused by time sync issues between the client/server.", instantDiff);
                    Output.Debug("\tSAML has an effective time window of: {0}", notOnOrAfter.Subtract(notBefore));
                    Output.Debug("\tValidated SAML time threshold: {0} is within {1} - {2} (local: {3}, {4} - {5})", utcNow, notBefore, notOnOrAfter, utcNow.ToLocalTime(), notBefore.ToLocalTime(), notOnOrAfter.ToLocalTime());

                    //Xbox STS-specific validation                    

                    //signature, specifically canonicalization and x509 validation... this may be redundtant and probably taken care of in SamlSerializer.ReadToken
                    string canonicalization = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:CanonicalizationMethod/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("StsCanonicalization"), canonicalization, String.Format("; Canonicalization method is {0}, but expected {1}.", canonicalization, Config.GetSetting("StsCanonicalization")));
                    string signatureAlgorithm = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:SignatureMethod/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("StsSignatureAlgorithm"), signatureAlgorithm, String.Format("; Signature method is {0}, but expected {1}.", signatureAlgorithm, Config.GetSetting("StsSignatureAlgorithm")));

                    string assertionID = GetSamlNodeValue(samlXml, "saml:Assertion/@AssertionID");
                    string referenceUri = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/@URI");
                    referenceUri = referenceUri.TrimStart('#');    //remove the '#' char before comparing
                    Assert.AreEqual(assertionID, referenceUri, String.Format("; Reference URI is {0}, but expected {1}.", referenceUri, assertionID));
                    string envSigTransform = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/dfltns:Transforms/dfltns:Transform[1]/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("EnvelopedSignatureTransform"), envSigTransform, String.Format("; First transform is {0}, but expected {1}.", envSigTransform, Config.GetSetting("EnvelopedSignatureTransform")));
                    string canonTransform = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/dfltns:Transforms/dfltns:Transform[2]/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("StsCanonicalization"), canonTransform, String.Format("; First transform is {0}, but expected {1}.", canonTransform, Config.GetSetting("StsCanonicalization")));
                    string digestMethod = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:SignedInfo/dfltns:Reference/dfltns:DigestMethod/@Algorithm");
                    Assert.AreEqual(Config.GetSetting("DigestAlgorithm"), digestMethod, String.Format("; Digest method is {0}, but expected {1}.", digestMethod, Config.GetSetting("DigestAlgorithm")));
                    Output.Debug("\tValidated SAML Signed Info");

                    /*
                    string base64Cert = GetSamlNodeValue(samlXml, "saml:Assertion/dfltns:Signature/dfltns:KeyInfo/dfltns:X509Data/dfltns:X509Certificate");
                    System.Security.Cryptography.X509Certificates.X509Certificate2 signingCert = new System.Security.Cryptography.X509Certificates.X509Certificate2(Convert.FromBase64String(base64Cert));
                    signingCert.Verify();
                    Output.Debug("\tValidated SAML x509 cert: Subject={0}, Issuer={1}, ValidFrom={2}, ValidTo={3}, Thumb={4}", signingCert.Subject, signingCert.Issuer, signingCert.NotBefore, signingCert.NotAfter, signingCert.Thumbprint);

                    //audience
                    string gotAudience = GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/saml:AudienceRestrictionCondition/saml:Audience");
                    Assert.AreEqual(request.Audience.Trim(), gotAudience, String.Format("; SAML audience is {0}, but expected {1}.", gotAudience, request.Audience));
                    Output.Debug("\tValidated audience: {0}", gotAudience);
                    
                    //NOTE: as of 7/16/09, in the saml token we now prefix all hex values with '0x'.  This is only in the output, not in the request...
                    //Title ID
                    string expectedTitleID = "0x" + StsRequest.GetUInt32Value(request.TitleID, true).Trim();
                    string gotTitleID = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='TitleID']/saml:AttributeValue");
                    Assert.AreEqual(expectedTitleID, gotTitleID, String.Format("; SAML titleID is {0}, but expected {1}.", gotTitleID, expectedTitleID));
                    Output.Debug("\tValidated title ID: {0}", gotTitleID);

                    //Title Version
                    string expectedTitleVersion = "0x" + StsRequest.GetUInt32Value(request.FakeSGSlot.titleVersion, true).Trim();
                    string gotTitleVersion = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='TitleVersion']/saml:AttributeValue");
                    Assert.AreEqual(expectedTitleVersion, gotTitleVersion, String.Format("; SAML title Version is {0}, but expected {1}.", gotTitleVersion, expectedTitleVersion));
                    Output.Debug("\tValidated title Version: {0}", gotTitleVersion);
                                        
                    //the subject of the SAML assertion should always be xuid1
                    string expectedSubject = "0x" + request.Xuids[0].ToString(true).Trim();
                    string subject = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Subject/saml:NameIdentifier");
                    Assert.AreEqual(expectedSubject, subject, String.Format("; SAML subject is {0}, but expected xuid1 {1}.", subject, expectedSubject));
                    Output.Debug("\tValidated SAML Subject is xuid1 ({0})", subject);

                    //Machine ID
                    string expectedMachineID = String.Format("0x{0:X16}", request.FakeSGSlot.machinePuid);
                    string gotMachineID = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='MachineID']/saml:AttributeValue");
                    Assert.AreEqual(expectedMachineID, gotMachineID, String.Format("; SAML MachineID is {0}, but expected {1}.", gotMachineID, expectedMachineID));
                    Output.Debug("\tValidated Machine ID: {0}", gotMachineID);

                    //Client Version
                    string expectedClientVersion = String.Format("0x{0:X8}", GetClientVersion(request.FakeSGSlot));
                    string gotClientVersion = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='ClientVersion']/saml:AttributeValue");
                    Assert.AreEqual(expectedClientVersion, gotClientVersion, String.Format("; SAML ClientVersion is {0}, but expected {1}.", gotClientVersion, expectedClientVersion));
                    Output.Debug("\tValidated Client Version: {0} (v{1})", gotClientVersion, ClientVersionToString(GetClientVersion(request.FakeSGSlot)));

                    //Platform Type
                    string expectedPlatformType = String.Format("0x{0:X2}", GetPlatformFromSlot(request.FakeSGSlot.machinePuid));
                    string gotPlatformType = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='PlatformType']/saml:AttributeValue");
                    Assert.AreEqual(expectedPlatformType, gotPlatformType, String.Format("; SAML platform Type is {0}, but expected {1}.", gotPlatformType, expectedPlatformType));
                    Output.Debug("\tValidated Platform Type: {0} ({1})", gotPlatformType, StsRequest.GetPlatformStringFromMachinePuid(request.FakeSGSlot.machinePuid));

                    if (doXuidValidation)
                    {
                        for (int i = 0; i < request.Xuids.Count; i++)
                        {
                            string xuidXpath = string.Format("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Xuid{0}']/saml:AttributeValue", i + 1);
                            string countryXpath = string.Format("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Country{0}']/saml:AttributeValue", i + 1);
                            string tierXpath = string.Format("saml:Assertion/saml:AttributeStatement/saml:Attribute[@AttributeName='Tier{0}']/saml:AttributeValue", i + 1);

                            if (!request.Xuids[i].IsNullOrIgnore())
                            {
                                //xuid
                                string expectedXuid = "0x" + request.Xuids[i].ToString(true).Trim();
                                string gotXuid = GetSamlNodeValue(samlXml, xuidXpath);
                                Assert.AreEqual(expectedXuid, gotXuid, String.Format("; SAML xuid{0} is {1}, but expected {2}.", i + 1, gotXuid, expectedXuid));

                                //country
                                string expectedCountry = String.Format("0x{0:X2}", request.Xuids[i].CountryID);
                                string gotCountry = GetSamlNodeValue(samlXml, countryXpath);
                                Assert.AreEqual(expectedCountry, gotCountry, String.Format("; SAML country{0} is {1}, but expected {2}.", i + 1, gotCountry, expectedCountry));

                                //tier
                                string expectedTier = String.Format("0x{0:X2}", request.Xuids[i].Tier);
                                string gotTier = GetSamlNodeValue(samlXml, tierXpath);
                                Assert.AreEqual(expectedTier, gotTier, String.Format("; SAML tier{0} is {1}, but expected {2}.", i + 1, gotTier, expectedTier));
                                Output.Debug("\tValidated xuid{0}: {1}, country{0}: {2} ({3}), tier{0}: {4} ({5})", i + 1, gotXuid, gotCountry, xonline.common.utilities.CountryDictionary.CountryCode(request.Xuids[i].CountryID), gotTier, StsRequest.GetTierStringFromByte(request.Xuids[i].Tier));
                            }
                            else
                            {
                                XmlNode temp = samlXml.SelectSingleNode(xuidXpath, samlXml.NamespaceManager);
                                Assert.IsTrue(temp == null, String.Format("; Found xuid{0} claim when none was expected!", i + 1));
                                temp = samlXml.SelectSingleNode(countryXpath, samlXml.NamespaceManager);
                                Assert.IsTrue(temp == null, String.Format("; Found country{0} claim when none was expected!", i + 1));
                                temp = samlXml.SelectSingleNode(tierXpath, samlXml.NamespaceManager);
                                Assert.IsTrue(temp == null, String.Format("; Found tier{0} claim when none was expected!", i + 1));
                            }
                        }
                    }
                    */
                    Output.Success("Successfully validated SAML assertion!");
                }
            }
            catch (Exception e)
            {
                string message = String.Format("Error validating SAML assertion; {0}", e.Message);
                Output.Error(message);
                throw new Exception(message, e);
            }
        }



        /// <summary>
        /// Validates an STS security ticket.
        /// </summary>
        public static void ValidateSecurityTicket (string ticket, GetSecurityTicketExpectations expect, bool machineOnly)
        {
            if (String.IsNullOrEmpty(ticket))
            {
                throw new StsFailureException("Ticket is null or empty.");
            }

            // All of this is everyday SAML validation
            ValidateSamlFormatAndSignature(ticket, expect);

            if (expect.Validation != StsPlugin.ValidationLevel.None)
            {
                XmlDocumentEx samlXml = new XmlDocumentEx(ticket, true);

                ValidateSamlBasics(samlXml);
                ValidateSamlConditions(samlXml, expect.AAInfo.NotAfter, (expect.Lifetime != null ? expect.Lifetime.Value :
                    (machineOnly ? GetSecurityTicketTestBase.MachineLifetime : GetSecurityTicketTestBase.UserLifetime)),
                    expect.AudienceUri);
                ValidateSamlSignatureXml(samlXml, expect);

                // And not some WM7 specifics
                ValidateSamlSubject(samlXml, (machineOnly ? GetSecurityTicketTestBase.MachineSubject : GetSecurityTicketTestBase.UserSubject));

                expect.ResultAttributes = new SamlAttributeCollection(samlXml);

                ValidateSamlMachineAttributes(expect.ResultAttributes, expect);
                if (!machineOnly)
                {
                    ValidateSamlUserAttributes(expect.ResultAttributes, expect);
                }
                ValidateSamlCheckForUnexpectedAttributes(expect.ResultAttributes);

                Output.Success("Successfully validated SAML assertion!");
            }
        }

        /// <summary>
        /// Validates an STS security ticket.
        /// </summary>
        public static void ValidatePartnerSecurityTicket (string ticket, GetSecurityTicketExpectations expect)
        {
            if (String.IsNullOrEmpty(ticket))
            {
                throw new StsFailureException("Ticket is null or empty.");
            }

            // All of this is everyday SAML validation
            ValidateSamlFormatAndSignature(ticket, expect);

            if (expect.Validation != StsPlugin.ValidationLevel.None)
            {
                XmlDocumentEx samlXml = new XmlDocumentEx(ticket, true);

                ValidateSamlBasics(samlXml);
                ValidateSamlConditions(samlXml, expect.AAInfo.NotAfter,
                    (expect.Lifetime != null ? expect.Lifetime.Value : GetSecurityTicketTestBase.PartnerLifetime),
                    expect.AudienceUri);
                ValidateSamlSignatureXml(samlXml, expect);

                // And not some WM7 specifics
                ValidateSamlSubject(samlXml, GetSecurityTicketTestBase.PartnerSubject);

                expect.ResultAttributes = new SamlAttributeCollection(samlXml);

                ValidateSamlPartnerAttributes(expect.ResultAttributes, expect);
                ValidateSamlCheckForUnexpectedAttributes(expect.ResultAttributes);

                Output.Success("Successfully validated SAML assertion!");
            }
        }

        /// <summary>
        /// Validates the basic format and signature of the SAML ticket.
        /// </summary>
        private static void ValidateSamlFormatAndSignature (string ticket, GetSecurityTicketExpectations expect)
        {
            if (expect.Validation == StsPlugin.ValidationLevel.Detailed)
            {
                Output.Info("Validating SAML ticket...");
                using (XmlReader reader = XmlReader.Create(new StringReader(ticket)))
                {
                    SecurityTokenResolver outOfBandTokenResolver =
                        SecurityTokenResolver.CreateDefaultSecurityTokenResolver(
                        new ReadOnlyCollection<SecurityToken>(new List<SecurityToken>()), false);
                    SamlSerializer serializer = new SamlSerializer();
                    //this validates the signature and time windows, as well as format of conditions and attributes
                    SamlSecurityToken securityToken = serializer.ReadToken(reader, WSSecurityTokenSerializer.DefaultInstance, outOfBandTokenResolver);
                    Output.Debug("\tValidated SAML format, signature and conditions");

                    //validation against well-known XSD, published by OASIS
                    ValidateSamlTokenAgainstSchema(ticket);
                }
            }
        }

        /// <summary>
        /// Validates basic SAML based on our expectations.
        /// Uses the base STS config settings for now, as they should match.
        /// </summary>
        private static void ValidateSamlBasics (XmlDocumentEx samlXml)
        {
            // MajorVersion, MinorVersion, Issuer

            // general saml validation
            int majorVersion = int.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@MajorVersion"));
            ValueCheck.Test("SAML MajorVersion", Config.GetIntSetting("StsSamlMajorVersion"), majorVersion);

            int minorVersion = int.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@MinorVersion"));
            ValueCheck.Test("SAML MinorVersion", Config.GetIntSetting("StsSamlMinorVersion"), minorVersion);
            Output.Debug("\tValidated SAML Assertion version: v{0}.{1}", majorVersion, minorVersion);

            string issuer = GetSamlNodeValue(samlXml, "saml:Assertion/@Issuer");
            ValueCheck.Test("SAML Issuer", ValidatingIssuer, issuer);
            Output.Debug("\tValidated SAML issuer: {0}", issuer);
        }

        /// <summary>
        /// Validates SAML times based on our expectations.
        /// Uses the base STS config settings for now, as they should match.
        /// </summary>
        private static void ValidateSamlConditions (XmlDocumentEx samlXml, DateTime passportExpiration, TimeSpan lifetime, string audience)
        {
            // IssueInstant, NotBefore, NotOnOrAfter
            
            // time window validation
            // NOTE: given time sync issues, we extend the time window by 5 mins
            DateTime utcNow = DateTime.UtcNow;
            DateTime issueInstant = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/@IssueInstant")).ToUniversalTime();
            DateTime notBefore = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/@NotBefore")).ToUniversalTime();
            DateTime notOnOrAfter = DateTime.Parse(GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/@NotOnOrAfter")).ToUniversalTime();

            ValueCheck.IsTrue(utcNow.AddMinutes(5) >= notBefore && utcNow.AddMinutes(-5) < notOnOrAfter, 
                "SAML assertion appears to be outside of the expected (valid) time window; token is valid from {0} - {1}, but current (system) time is: {2}.", 
                notBefore, notOnOrAfter, utcNow);
            //issue instant validation.  Because of our implementation, NotBefore and IssueInstant should always be the same...
            ValueCheck.Test("NotBefore and IssueInstant", notBefore, issueInstant);
            double instantDiff = utcNow.Subtract(issueInstant).TotalMilliseconds;
            if (instantDiff > Config.GetIntSetting("IssueInstantThreshold"))
                Global.RO.Warn("WARNING: IssueInstant is greater than {0}ms, after receiving the response from the STS service. This may indicate a failure or that the service is performing poorly. This could also be caused by time sync issues between the client/server.", instantDiff);
            Output.Debug("\tSAML has an effective time window of: {0}", notOnOrAfter.Subtract(notBefore));
            Output.Debug("\tValidated SAML time threshold: {0} is within {1} - {2} (local: {3}, {4} - {5})", utcNow, notBefore, notOnOrAfter, utcNow.ToLocalTime(), notBefore.ToLocalTime(), notOnOrAfter.ToLocalTime());

            // check that the SAML token doesn't live longer than the passport ticket
            ValueCheck.IsTrue(notOnOrAfter <= passportExpiration,
                "SAML ticket lasts longer than Passport ticket; SAML expires {0:o}, Passport expires {1:o}",
                notOnOrAfter, passportExpiration);

            // a positive lifetime means we care about it
            if (lifetime.TotalSeconds > 0)
            {
                TimeSpan ticketLife = notOnOrAfter - notBefore;

                double lifeSkew = Math.Abs(ticketLife.TotalSeconds - lifetime.TotalSeconds);

                // allow 10 seconds of difference
                ValueCheck.IsTrue(lifeSkew <= 10,
                    "SAML ticket lifetime was not the expected duration; SAML life {0}, expected life {1}",
                    ticketLife, lifetime);
            }

            // check the audience
            if (audience != null)
            {
                // compare as Uris, because this is how its done by .Net
                Uri audienceUri = new Uri(audience);
                string samlAudience = GetSamlNodeValue(samlXml, "saml:Assertion/saml:Conditions/saml:AudienceRestrictionCondition/saml:Audience");
                Uri samlAudienceUri = new Uri(samlAudience);
                ValueCheck.Test("SAML audience", audienceUri, samlAudienceUri);
            }
        }

        /// <summary>
        /// Validates SAML signature XML based on our expectations, not the actual signature (see ValidateSamlFormatAndSignature).
        /// Uses the base STS config settings for now, as they should match.
        /// </summary>
        private static void ValidateSamlSignatureXml (XmlDocumentEx samlXml, GetSecurityTicketExpectations expect)
        {
            XmlNode assertion = GetSamlNode(samlXml, samlXml, "saml:Assertion");
            XmlNode signedInfo = GetSamlNode(samlXml, assertion, "dfltns:Signature/dfltns:SignedInfo");

            // CanonicalizationMethod, SignatureMethod, Reference/@URI, Transforms, DigestMethod, X509Certificate

            //signature, specifically canonicalization and x509 validation
            string canonicalization = GetSamlNodeValue(samlXml, signedInfo, "dfltns:CanonicalizationMethod/@Algorithm");
            ValueCheck.Test("Canonicalization method", Config.GetSetting("StsCanonicalization"), canonicalization);
            string signatureAlgorithm = GetSamlNodeValue(samlXml, signedInfo, "dfltns:SignatureMethod/@Algorithm");
            ValueCheck.Test("Signature method", Config.GetSetting("StsSignatureAlgorithm"), signatureAlgorithm);

            string assertionID = GetSamlNodeValue(samlXml, assertion, "@AssertionID");
            string referenceUri = GetSamlNodeValue(samlXml, signedInfo, "dfltns:Reference/@URI");
            referenceUri = referenceUri.TrimStart('#');    //remove the '#' char before comparing
            ValueCheck.Test("Reference URI", assertionID, referenceUri);

            string envSigTransform = GetSamlNodeValue(samlXml, signedInfo, "dfltns:Reference/dfltns:Transforms/dfltns:Transform[1]/@Algorithm");
            ValueCheck.Test("First transform", Config.GetSetting("EnvelopedSignatureTransform"), envSigTransform);
            string canonTransform = GetSamlNodeValue(samlXml, signedInfo, "dfltns:Reference/dfltns:Transforms/dfltns:Transform[2]/@Algorithm");
            ValueCheck.Test("Second transform", Config.GetSetting("StsCanonicalization"), canonTransform);

            string digestMethod = GetSamlNodeValue(samlXml, signedInfo, "dfltns:Reference/dfltns:DigestMethod/@Algorithm");
            ValueCheck.Test("Digest method", Config.GetSetting("DigestAlgorithm"), digestMethod);
            Output.Debug("\tValidated SAML Signed Info");

            if (expect.Validation == StsPlugin.ValidationLevel.Detailed)
            {
                string base64Cert = GetSamlNodeValue(samlXml, assertion, "dfltns:Signature/dfltns:KeyInfo/dfltns:X509Data/dfltns:X509Certificate");
                System.Security.Cryptography.X509Certificates.X509Certificate2 signingCert = 
                    new System.Security.Cryptography.X509Certificates.X509Certificate2(Convert.FromBase64String(base64Cert));
                signingCert.Verify();

                string certSubject = signingCert.Subject;
                ValueCheck.IsTrue(certSubject.StartsWith(Config.GetSetting("GSTSigningCertificateSubject")),
                    "Signing certificate subject did not match; expected {0}, got {1}",
                    Config.GetSetting("GSTSigningCertificateSubject"), certSubject);
                // TODO: Validate that the certificate is actually the right one (check issuer, chain if possible, etc)

                Output.Debug("\tValidated SAML x509 cert: Subject={0}, Issuer={1}, ValidFrom={2}, ValidTo={3}, Thumb={4}", signingCert.Subject, 
                    signingCert.Issuer, signingCert.NotBefore, signingCert.NotAfter, signingCert.Thumbprint);
            }
        }

        /// <summary>
        /// Validates SAML subject based on our expectations.
        /// </summary>
        private static void ValidateSamlSubject (XmlDocumentEx samlXml, string subject)
        {
            // Subject

            string format = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Subject/saml:NameIdentifier/@Format");
            string formatExpect = Config.GetSetting("GSTSubjectFormat");
            ValueCheck.Test("SAML subject format", format, formatExpect);

            string nameQualifier = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Subject/saml:NameIdentifier/@NameQualifier");
            string nameQualifierExpect = Config.GetSetting("GSTSubjectNameQualifier");
            ValueCheck.Test("SAML subject name qualifier", nameQualifier, nameQualifierExpect);

            string ticketSubject = GetSamlNodeValue(samlXml, "saml:Assertion/saml:AttributeStatement/saml:Subject/saml:NameIdentifier");
            ValueCheck.Test("SAML subject", subject, ticketSubject);
            Output.Debug("\tValidated SAML Subject ({0})", ticketSubject);
        }

        /// <summary>
        /// Validates SAML attributes based on our expectations.
        /// </summary>
        private static SamlAttributeValue ValidateSamlAttributeBasics (SamlAttributeCollection attrs, string name)
        {
            string attrNamespace = "http://xboxlive.com/claims";

            SamlAttributeValue ans = attrs[name];

            if (ans == null) { throw new UnexpectedTestResultException("SAML attributes did not contain '" + name + "'"); }

            // mark it so we know it was expected and checked
            ans.Checked = true;

            ValueCheck.Test("SAML attribute [Name=" + name + "] namespace", attrNamespace, ans.Namespace);

            return ans;
        }

        /// <summary>
        /// Validates SAML attributes for machine tickets based on our expectations.
        /// </summary>
        private static void ValidateSamlMachineAttributes (SamlAttributeCollection attrs, GetSecurityTicketExpectations expect)
        {
            SamlAttributeValue sav = ValidateSamlAttributeBasics(attrs, "PlatformType");
            byte platform;
            if (!byte.TryParse(sav.Value, out platform))
            {
                throw new UnexpectedTestResultException("Unable to parse PlatformType attribute value as byte; value " + sav.Value);
            }
            ValueCheck.Test("PlatformType", expect.Platform, platform);

            // only expect a machine for mobile
            if (expect.Platform == XOn.XPLT_MOBILE)
            {
                sav = ValidateSamlAttributeBasics(attrs, "MachineID");
                ulong machineid;
                if (!ulong.TryParse(sav.Value, out machineid))
                {
                    throw new UnexpectedTestResultException("Unable to parse MachineID attribute value as ulong; value " + sav.Value);
                }
                if (expect.MachineID != null)
                {
                    ValueCheck.Test("MachineID", expect.MachineID.Value, machineid);
                }
                else
                {
                    ValueCheck.IsTrue(XOn.XboxId.IsMobileMachinePuid(machineid),
                        "MachineID was not expected; got {0:X16}, expected to start with {1:X16}", machineid, XOn.XboxId.MobileMachineBase);

                    // I'm so lazy
                    expect.ResultMachineID = machineid;
                }

                sav = ValidateSamlAttributeBasics(attrs, "DeviceID");
                string saml_device_upper = sav.Value.ToUpper();
                string expect_device_upper = expect.AAInfo.CertDeviceId.ToUpper();
                ValueCheck.Test("DeviceID", expect_device_upper, saml_device_upper);
            }

            sav = ValidateSamlAttributeBasics(attrs, "ClientVersion");
            uint clientversion;
            if (!uint.TryParse(sav.Value, out clientversion))
            {
                throw new UnexpectedTestResultException("Unable to parse ClientVersion attribute value as uint; value " + sav.Value);
            }
            ValueCheck.Test("ClientVersion", expect.ClientVersion, clientversion);

            sav = ValidateSamlAttributeBasics(attrs, "TitleID");
            uint titleid;
            if (!uint.TryParse(sav.Value, System.Globalization.NumberStyles.AllowHexSpecifier, null, out titleid))
            {
                throw new UnexpectedTestResultException("Unable to parse TitleID attribute value as uint; value " + sav.Value);
            }
            ValueCheck.Test("TitleID", expect.TitleId, titleid);

            sav = ValidateSamlAttributeBasics(attrs, "TitleVersion");
            uint titleversion;
            if (!uint.TryParse(sav.Value, out titleversion))
            {
                throw new UnexpectedTestResultException("Unable to parse TitleVersion attribute value as uint; value " + sav.Value);
            }
            ValueCheck.Test("TitleVersion", expect.TitleVersion, titleversion);

            sav = ValidateSamlAttributeBasics(attrs, "Puid0");
            ulong puid0;
            if (!ulong.TryParse(sav.Value, out puid0))
            {
                throw new UnexpectedTestResultException("Unable to parse Puid0 attribute value as ulong; value " + sav.Value);
            }
            ValueCheck.Test("Puid0", expect.AAInfo.PassportPuid, puid0);

            sav = ValidateSamlAttributeBasics(attrs, "CID0");
            ulong cid0;
            if (!ulong.TryParse(sav.Value, out cid0))
            {
                throw new UnexpectedTestResultException("Unable to parse CID0 attribute value as ulong; value " + sav.Value);
            }
            if (!expect.IgnoreCID)
            {
                ValueCheck.Test("CID0", expect.AAInfo.PassportCId, cid0);
            }
        }

        /// <summary>
        /// Validates SAML attributes for user tickets based on our expectations.
        /// </summary>
        private static void ValidateSamlUserAttributes (SamlAttributeCollection attrs, GetSecurityTicketExpectations expect)
        {
            SamlAttributeValue sav = ValidateSamlAttributeBasics(attrs, "Xuid0");
            ulong xuid0;
            if (!ulong.TryParse(sav.Value, out xuid0))
            {
                throw new UnexpectedTestResultException("Unable to parse Xuid0 attribute value as ulong; value " + sav.Value);
            }
            ValueCheck.Test("Xuid0", expect.User.Puid, xuid0);

            string expectedGamertag = expect.GamerTagOverride ?? expect.User.Gamertag;
            sav = ValidateSamlAttributeBasics(attrs, "Gamertag0");
            ValueCheck.Test("Gamertag0", expectedGamertag, sav.Value);

            sav = ValidateSamlAttributeBasics(attrs, "Tier0");
            int tier0;
            if (!int.TryParse(sav.Value, out tier0))
            {
                throw new UnexpectedTestResultException("Unable to parse Tier0 attribute value as int; value " + sav.Value);
            }
            if (expect.Tier != null)
            {
                ValueCheck.Test("Tier0", expect.Tier.Value, tier0);
            }
            else
            {
                if (tier0 < 0 || tier0 > 6)
                {
                    throw new UnexpectedTestResultException("Tier0 was outside of the range [0,6]: " + tier0.ToString());
                }
            }

            sav = ValidateSamlAttributeBasics(attrs, "Country0");
            int country0;
            if (!int.TryParse(sav.Value, out country0))
            {
                throw new UnexpectedTestResultException("Unable to parse Country0 attribute value as int; value " + sav.Value);
            }
            if (expect.Country != null)
            {
                ValueCheck.Test("Country0", expect.Country.Value, country0);
            }
            else
            {
                if (country0 == 0)
                {
                    throw new UnexpectedTestResultException("Country0 was 0");
                }
            }

            // simply validate that the privileges parse correctly here
            sav = ValidateSamlAttributeBasics(attrs, "Privileges0");
            if (expect.Privileges != null)
            {
                ValueCheck.Test("Privileges0", expect.Privileges, sav.Value);
            }
            else
            {
                ParsePriviliegesFromSamlToken(sav.Value);
            }
        }

        /// <summary>
        /// Validates SAML attributes for partner tickets based on our expectations.
        /// </summary>
        private static void ValidateSamlPartnerAttributes (SamlAttributeCollection attrs, GetSecurityTicketExpectations expect)
        {
            SamlAttributeValue sav = ValidateSamlAttributeBasics(attrs, "PartnerID0");
            ulong xuid0;
            if (!ulong.TryParse(sav.Value, out xuid0))
            {
                throw new UnexpectedTestResultException("Unable to parse Xuid0 attribute value as ulong; value " + sav.Value);
            }
            ValueCheck.Test("Xuid0", expect.User.Puid, xuid0);

            string expectedGamertag = expect.GamerTagOverride ?? expect.User.Gamertag;
            sav = ValidateSamlAttributeBasics(attrs, "Gamertag0");
            ValueCheck.Test("Gamertag0", expectedGamertag, sav.Value);

            sav = ValidateSamlAttributeBasics(attrs, "TitleID");
            uint titleid;
            if (!uint.TryParse(sav.Value, System.Globalization.NumberStyles.AllowHexSpecifier, null, out titleid))
            {
                throw new UnexpectedTestResultException("Unable to parse TitleID attribute value as uint; value " + sav.Value);
            }
            ValueCheck.Test("TitleID", expect.TitleId, titleid);

            sav = ValidateSamlAttributeBasics(attrs, "TitleVersion");
            ushort titleversion;
            if (!ushort.TryParse(sav.Value, out titleversion))
            {
                throw new UnexpectedTestResultException("Unable to parse TitleVersion attribute value as ushort; value " + sav.Value);
            }
            ValueCheck.Test("TitleVersion", expect.TitleVersion, titleversion);
        }

        public static List<byte> ParsePriviliegesFromSamlToken (string privileges)
        {
            if (String.IsNullOrEmpty(privileges))
            {
                throw new UnexpectedTestResultException("Privileges is " + (privileges == null ? "null" : "empty"));
            }

            List<byte> ans = new List<byte>();

            int begin = 0;
            int end = 0;

            while (true)
            {
                end = privileges.IndexOf(',', begin);

                if (end == begin)
                {
                    throw new UnexpectedTestResultException("Privileges has an empty element: " + privileges);
                }

                if (end == (privileges.Length - 1))
                {
                    throw new UnexpectedTestResultException("Privileges string ended with a ,: " + privileges);
                }

                string sub = (end == -1 ? privileges.Substring(begin) : privileges.Substring(begin, end - begin));
                byte val;
                if (!byte.TryParse(sub, out val))
                {
                    throw new UnexpectedTestResultException("Unable to parse privilege as a byte: " + sub + "\nAll privileges: " + privileges);
                }
                ans.Add(val);

                if (end == -1)
                {
                    break;
                }

                begin = end + 1;
            }

            return ans;
        }

        /// <summary>
        /// Validates SAML attributes to ensure that there aren't any that we didn't expect.
        /// </summary>
        private static void ValidateSamlCheckForUnexpectedAttributes (SamlAttributeCollection attrs)
        {
            foreach (SamlAttributeValue sav in attrs.Attributes)
            {
                if (!sav.Checked)
                {
                    throw new UnexpectedTestResultException("Found an unexpected SAML attribute: " + sav.Name);
                }
            }
        }

        /// <summary>
        /// Determines the platform type based on the machine puid, or a given override.
        /// </summary>
        public static byte DeterminePlatform (ulong machinePuid, byte platformOverride)
        {
            if (platformOverride == StsRequest.PlatformUnknown)
            {
                if ((machinePuid & StsRequest.PlatformMask) == StsRequest.PcMachineBase)
                    return XOn.XPLT_PC;
                else if ((machinePuid & StsRequest.PlatformMask) == StsRequest.XboxMachineBase)
                    return XOn.XPLT_XBOX1;
                else if ((machinePuid & StsRequest.PlatformMask) == StsRequest.XenonMachineBase)
                    return XOn.XPLT_XBOX360;
                return StsRequest.PlatformUnknown;
            }
            else
            {
                return platformOverride;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="slot"></param>
        /// <returns></returns>
        public static uint GetClientVersion(CSGInfo slot)
        {
            return GetClientVersion(slot.wMajorVersion, slot.wMinorVersion, slot.wBuildNumber, slot.wQFENumber);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="major"></param>
        /// <param name="minor"></param>
        /// <param name="buildNumber"></param>
        /// <param name="qfe"></param>
        /// <returns></returns>
        public static uint GetClientVersion(ushort major, ushort minor, ushort buildNumber, ushort qfe)
        {
            //PJL:  as best as I can tell, the ulong slot.clientVersion is returning a different (wire, presumably)
            //      format than the expected uint that the 'real' SGInfo class returns.  I've copied the implementation
            //      here so we can validate the client version echoed in the SAML assertion
            return (uint)((major & 0xF) << 28) |
                       (uint)((minor & 0xF) << 24) |
                       (uint)((buildNumber & 0xFFFF) << 8) |
                       (uint)(qfe & 0xFF);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="clientVersion"></param>
        /// <returns></returns>
        public static string ClientVersionToString(uint clientVersion)
        {
            return String.Format("{0}.{1}.{2}.{3}",
                                    ((clientVersion >> 28) & 0xF),      //major
                                    ((clientVersion >> 24) & 0xF),      //minor
                                    ((clientVersion >> 8) & 0xFFFF),    //build
                                    (clientVersion & 0xFF));            //qfe
                            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="token"></param>
        public static void ValidateSamlTokenAgainstSchema(string token)
        {
            XmlSchema samlXsd = Saml11Xsd;
            XmlSchema dXsd = DSigXsd;

            if (samlXsd == null || dXsd == null)
            {
                Output.Debug("One or more XSDs were null.");
                return;
            }

            StringBuilder validationErrors = new StringBuilder();
            XmlReaderSettings xmlSettings = new XmlReaderSettings() { ValidationType = ValidationType.Schema, CloseInput=true };
            xmlSettings.ValidationFlags |= XmlSchemaValidationFlags.ReportValidationWarnings;
            xmlSettings.Schemas.Add(samlXsd);
            xmlSettings.Schemas.Add(dXsd);

            xmlSettings.ValidationEventHandler +=
                delegate(object sender, ValidationEventArgs e)
                {
                    validationErrors.AppendFormat("\r\n\t{0}", e.Message);
                };

            using (XmlReader reader = XmlReader.Create(new StringReader(token), xmlSettings))
            {
                while (reader.Read()) ;
            }

            if (validationErrors.Length > 0)
                throw new Exception("SAML token failed XSD check!" + validationErrors.ToString());
            Output.Info("\tValidated SAML against v1.1 XSD");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="samlToken"></param>
        /// <param name="xpath"></param>
        /// <param name="newValue"></param>
        /// <returns></returns>
        public static string SetSamlNodeValue(string samlToken, string xpath, string newValue)
        {
            XmlDocumentEx samlXml = new XmlDocumentEx(samlToken, true);
            XmlNode node = samlXml.SelectSingleNode(xpath, samlXml.NamespaceManager);
            if(node == null)
                throw new Exception(String.Format("Unable to find node for '{0}' in SAML Xml.", xpath));

            node.InnerText = newValue;
            return samlXml.OuterXml;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="samlToken"></param>
        /// <param name="xpath"></param>
        /// <returns></returns>
        public static string GetSamlNodeValue(string samlToken, string xpath)
        {
            XmlDocumentEx samlXml = new XmlDocumentEx(samlToken, true);
            return GetSamlNodeValue(samlXml, xpath);
        }

        public static string GetSamlNodeValue (XmlDocumentEx xmlDoc, string xpath)
        {
            return GetSamlNodeValue(xmlDoc, xmlDoc, xpath);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xmlDoc"></param>
        /// <param name="xpath"></param>
        /// <returns></returns>
        public static string GetSamlNodeValue(XmlDocumentEx xmlDoc, XmlNode xmlNode, string xpath)
        {
            return GetSamlNode(xmlDoc, xmlNode, xpath).InnerText;
        }

        public static XmlNode GetSamlNode (XmlDocumentEx xmlDoc, XmlNode xmlNode, string xpath)
        {
            XmlNode node = xmlNode.SelectSingleNode(xpath, xmlDoc.NamespaceManager);
            if (node == null)
                throw new Exception(String.Format("Unable to find node for '{0}' in SAML Xml.", xpath));

            return node;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="samlToken"></param>
        /// <returns></returns>
        public static SamlSecurityToken SamlSecurityTokenFromString(string samlToken)
        {
            using (XmlReader reader = XmlReader.Create(new StringReader(samlToken)))
            {
                SecurityTokenResolver outOfBandTokenResolver = SecurityTokenResolver.CreateDefaultSecurityTokenResolver(new ReadOnlyCollection<SecurityToken>(new List<SecurityToken>()), false);
                SamlSerializer serializer = new SamlSerializer();
                //this validates the signature and time windows, as well as format of conditions and attributes
                SamlSecurityToken securityToken = serializer.ReadToken(reader, WSSecurityTokenSerializer.DefaultInstance, outOfBandTokenResolver);
                return securityToken;
            }           
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\StsResponse.cs ===
﻿using System;

namespace StsTest
{
	public class StsResponse
	{
        /// <summary>
        /// 
        /// </summary>
        public uint HResult
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public string Token
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime RequestSent
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public DateTime ResponseRecieved
        {
            get;
            set;
        }

        /// <summary>
        /// The HTTP status code returned by the server.
        /// </summary>
        public System.Net.HttpStatusCode HttpStatus
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Succeeded
        {
            get
            {
                return this.HResult == 0 && HttpStatus == System.Net.HttpStatusCode.OK;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public TimeSpan RequestTime
        {
            get
            {
                return this.ResponseRecieved.Subtract(this.RequestSent);
            }
        }

        //TODO: add a map HR to friendly name/error method
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\StsRequest.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text;
using System.Web;
using System.Security.Cryptography;
using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;
using ServerTestFramework.Utilities;
using xonline.common.service;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public class StsRequest
	{
        public const uint UserFlagsCountryMask = 0x0000FF00;
        public const uint UserFlagsTierMask = 0x00F00000;
        public const ulong PlatformMask = 0xFFFF000000000000; 
        public const ulong XboxMachineBase = 0x0009000000000000;
        public const ulong XenonMachineBase = 0xFA00000000000000;
        public const ulong PcMachineBase = 0xFB00000000000000;
        public const string DefaultStsAudience = "http://liveconnect.xbox.com";

        public const byte PlatformUnknown = byte.MaxValue;

        /// <summary>
        /// Sets up a basic STS request with a default audience, uses the 306 Dashboard as the title, with one user, xuid1.
        /// </summary>
        public StsRequest(): this(DefaultStsAudience, (uint)XboxTitle.Default, 1)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuidCount"></param>
        public StsRequest(int xuidCount): this(DefaultStsAudience, (uint)XboxTitle.Default, xuidCount)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="audience"></param>
        /// <param name="titleID"></param>
        public StsRequest(string audience, string titleID)
        {
            this.Xuids = new XuidCollection(1);
            InternalConstructor(audience, titleID);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="audience"></param>
        /// <param name="titleID"></param>
        public StsRequest(string audience, uint? titleID, int xuidCount)
        {
            this.Xuids = new XuidCollection(xuidCount);
            InternalConstructor(audience, titleID);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="audience"></param>
        /// <param name="titleID"></param>
        /// <param name="xuids"></param>
        public StsRequest(string audience, uint? titleID, params ulong?[] xuids)
        {
            this.Xuids = new XuidCollection(xuids);
            InternalConstructor(audience, titleID);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="audience"></param>
        /// <param name="titleID"></param>
        /// <param name="xuids"></param>
        public StsRequest(string audience, uint? titleID, params string[] xuids)
        {
            this.Xuids = new XuidCollection(xuids);
            InternalConstructor(audience, titleID);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="audience"></param>
        /// <param name="titleID"></param>
        /// <param name="xuids"></param>
        public StsRequest(string audience, string titleID, params string[] xuids)
        {
            this.Xuids = new XuidCollection(xuids);
            InternalConstructor(audience, titleID);
        }

        /// <summary>
        /// 
        /// </summary>
        public string Audience
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public object TitleID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public CSGInfo FakeSGSlot
        {
            get;
            set;
        }

        /// <summary>The platform type expected in the response, and eventually may be sent up to the server.</summary>
        public byte Platform
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public XuidCollection Xuids
        {
            get;
            private set;
        }

        /// <summary>
        /// 
        /// </summary>
        public Xuid Xuid1
        {
            get
            {
                return this.Xuids[0];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public Xuid Xuid2
        {
            get
            {
                return this.Xuids[1];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public Xuid Xuid3
        {
            get
            {
                return this.Xuids[2];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public Xuid Xuid4
        {
            get
            {
                return this.Xuids[3];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public string ToRequestUrl()
        {
            return ToRequestUrl(true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="escape"></param>
        /// <returns></returns>
        public string ToRequestUrl(bool escape)
        {
            Dictionary<string, string> queryString = new Dictionary<string, string>(5);

            if (this.Audience != null)
                queryString.Add("audience", (escape) ? HttpUtility.UrlEncode(this.Audience) : this.Audience);
            if (this.TitleID != null)
                queryString.Add("titleID", (escape) ? HttpUtility.UrlEncode(GetUInt32Value(this.TitleID)) : GetUInt32Value(this.TitleID));
                        
            for (int i = 0; i < this.Xuids.Count; i++)
            {
                if (!this.Xuids[i].IsNullOrIgnore())
                    queryString.Add(String.Format("xuid{0}", i + 1), (escape) ? HttpUtility.UrlEncode(this.Xuids[i].ToString()) : this.Xuids[i].ToString());
            }
            
            StringBuilder stsUrl = new StringBuilder(StsXrlRequest.StsGetSecurityTokenPath);
            if (queryString.Count > 0)
                stsUrl.Append("?");

            foreach (string key in queryString.Keys)
                stsUrl.AppendFormat("{0}={1}&", key, queryString[key]);
            stsUrl.Length -= 1; //trim off the last '&'

            return stsUrl.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <returns></returns>
        public static string GetUInt32Value(object value)
        {
            return GetUInt32Value(value, false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        /// <param name="fullHex"></param>
        /// <returns></returns>
        public static string GetUInt32Value(object value, bool fullHex)
        {
            if (value != null)
            {
                if (value is uint)
                    return ((uint)value).ToString(fullHex ? "X8" : "X");
                else
                    return value.ToString();
            }

            return String.Empty;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="flags"></param>
        /// <returns></returns>
        public static byte GetCountryFromUserFlags(uint flags)
        {
            return (byte)((flags & UserFlagsCountryMask) >> 8);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="flags"></param>
        /// <param name="countryID"></param>
        /// <returns></returns>
        public static uint SetUserCountryFlag(uint flags, byte countryID)
        {
            flags &= ~UserFlagsCountryMask;
            flags |= (uint)((countryID << 8) & UserFlagsCountryMask);
            return flags;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="flags"></param>
        /// <returns></returns>
        public static byte GetTierFromUserFlags(uint flags)
        {
            return (byte)((flags & UserFlagsTierMask) >> 20);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="flags"></param>
        /// <param name="countryID"></param>
        /// <returns></returns>
        public static uint SetUserTierFlag(uint flags, byte tier)
        {
            flags &= ~UserFlagsTierMask;
            flags |= (uint)((tier << 20) & UserFlagsTierMask);
            return flags;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tier"></param>
        /// <returns></returns>
        public static string GetTierStringFromByte(byte tier)
        {
            switch(tier)
            {
                case (byte)XOn.XONLINE_TIER_NEWUSER:
                    return "New User";
                case (byte)XOn.XONLINE_TIER_GOLD:
                    return "Gold";
                case (byte)XOn.XONLINE_TIER_FAMILY_GOLD:
                    return "Family Gold";
                case (byte)XOn.XONLINE_TIER_SILVER:
                    return "Silver";
                default:
                    return String.Format("Unknown tier '{0}'.", tier);
            }
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="tier"></param>
        /// <returns></returns>
        public static string GetPlatformStringFromMachinePuid(ulong machinePuid)
        {
            if ((machinePuid & StsRequest.PlatformMask) == StsRequest.PcMachineBase)
                return "PC";
            else if ((machinePuid & StsRequest.PlatformMask) == StsRequest.XboxMachineBase)
                return "Xbox";
            else if ((machinePuid & StsRequest.PlatformMask) == StsRequest.XenonMachineBase)
                return "Xbox 360";
            return String.Format("Unable to determine platform from machine puid '{0}'.", machinePuid);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static ulong GenerateRandomUInt56()
        {
            byte[] buffer = new byte[sizeof(ulong)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetBytes(buffer);
            buffer[7] = buffer[6] = 0;
            return BitConverter.ToUInt64(buffer, 0);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static uint GenerateRandomUInt32()
        {
            byte[] buffer = new byte[sizeof(uint)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetBytes(buffer);
            return BitConverter.ToUInt32(buffer, 0);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="platform"></param>
        /// <returns></returns>
        public static ulong GenerateRandomMachinePuid(byte platform)
        {
            ulong machinePuid;
            switch(platform)
            {
                case XOn.XPLT_PC:
                    machinePuid = PcMachineBase + GenerateRandomUInt56();
                    break;
                case XOn.XPLT_XBOX1:
                    machinePuid = XboxMachineBase + GenerateRandomUInt56();
                    break;
                case XOn.XPLT_XBOX360:
                    machinePuid = XenonMachineBase + GenerateRandomUInt56();
                    break;
                default:
                    machinePuid = Xuid.GenerateRandomUInt64();
                    break;
            }

            return machinePuid;
        }

        /// <summary>
        /// 
        /// </summary>
        public CSGInfo ResetFakeSGSLot()
        {
            CSGInfo slot = GlobalFakeSG.FakeSG.GetSlot();
            if (this.TitleID != null)
            {
                if (this.TitleID is uint)
                    slot.titleId = (uint)this.TitleID;
            }

            if (!this.Xuid1.IsNullOrIgnore())
            {
                slot.userPuid0 = this.Xuid1.ToUInt64();
                slot.userFlag0 = SetUserCountryFlag(slot.userFlag0, this.Xuid1.CountryID);
                slot.userFlag0 = SetUserTierFlag(slot.userFlag0, this.Xuid1.Tier);
            }
            if (!this.Xuid2.IsNullOrIgnore())
            {
                slot.userPuid1 = this.Xuid2.ToUInt64();
                slot.userFlag1 = SetUserCountryFlag(slot.userFlag1, this.Xuid2.CountryID);
                slot.userFlag1 = SetUserTierFlag(slot.userFlag1, this.Xuid2.Tier);
            }
            if (!this.Xuid3.IsNullOrIgnore())
            {
                slot.userPuid2 = this.Xuid3.ToUInt64();
                slot.userFlag2 = SetUserCountryFlag(slot.userFlag2, this.Xuid3.CountryID);
                slot.userFlag2 = SetUserTierFlag(slot.userFlag2, this.Xuid3.Tier);
            }
            if (!this.Xuid4.IsNullOrIgnore())
            {
                slot.userPuid3 = this.Xuid4.ToUInt64();
                slot.userFlag3 = SetUserCountryFlag(slot.userFlag3, this.Xuid4.CountryID);
                slot.userFlag3 = SetUserTierFlag(slot.userFlag3, this.Xuid4.Tier);
            }

            //randomly choose a platform... we need this as platform is actually determined/validated by machine Puid
            byte platform;
            switch(RandomEx.GlobalRandGen.Next(3))
            {
                case 0:
                    platform = XOn.XPLT_PC;
                    break;
                case 1:
                    platform = XOn.XPLT_XBOX1;
                    break;
                default:
                    platform = XOn.XPLT_XBOX360;
                    break;
            }

            //generate a random machine puid, using a given platform base
            slot.machinePuid = GenerateRandomMachinePuid(platform);

            //generate a random title version
            slot.titleVersion = GenerateRandomUInt32();

            //build up a random clientVersion, using decent ballpark values
            //we just need to validate that this same value is echoed in the SAML token
            slot.wBuildNumber = (ushort)ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(ushort.MaxValue);
            slot.wMinorVersion = (ushort)ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(15);
            slot.wMajorVersion = (ushort)ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(3);
            slot.wQFENumber = (ushort)ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(byte.MaxValue);

            this.FakeSGSlot = slot;
            return slot;
        }

        /// <summary>
        /// 
        /// </summary>
        private void InternalConstructor(string audience, object titleID)
        {
            this.Audience = audience;
            this.TitleID = titleID;
            Platform = PlatformUnknown;

            //configure FakeSG slot, based on inputs
            Output.Info("Configuring new slot in Fake SG...");
            GlobalFakeSG.FakeSG.SetStateEndpoint(Global.XEnv.GetVirtualInterface(xonline.common.config.Interface.sts).ToString());
            this.FakeSGSlot = ResetFakeSGSLot();            
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\StsFailureException.cs ===
﻿using System;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public class StsFailureException: Exception
	{
        /// <summary>
        /// 
        /// </summary>
        /// <param name="HResult"></param>
        public StsFailureException(uint HResult): base(String.Format("STS service failed; HR=0x{0}", HResult.ToString("X")))
        {
            this.HResult = HResult;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        public StsFailureException(string message): base(message)
        {
                   
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public StsFailureException(string message, Exception innerException)
            : base(message, innerException)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="HResult"></param>
        /// <param name="message"></param>
        public StsFailureException(uint HResult, string message): base(message)
        {
            this.HResult = HResult;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="HResult"></param>
        /// <param name="message"></param>
        /// <param name="innerException"></param>
        public StsFailureException(uint HResult, string message, Exception innerException)
            : base(message, innerException)
        {
            this.HResult = HResult;
        }

        /// <summary>
        /// 
        /// </summary>
        public new uint HResult
        {
            get;
            private set;
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\StsXmgmtUtil.cs ===
﻿using System;
using ServerTestFramework;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public static class StsXmgmtUtil
	{
        /// <summary>
        /// 
        /// </summary>
        public static void ReloadConfig()
        {
            Global.XEnv.ForceConfigReload(xonline.common.config.VirtualInterface.sts);
            //Global.XEnv.ForceConfigReload(xonline.common.config.VirtualInterface.sts_int);
            //Global.XEnv.ExecuteXmgmtCommand(xonline.common.config.VirtualInterface.sts, String.Format("e :{0} reload", xonline.common.config.VirtualInterface.sts));
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\XboxTitles.cs ===
﻿using System;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public enum XboxTitle: uint
	{
        Default = XboxTitle.Xbox360Dash, 
        Xbox360Dash = 0xFFFE07D1,
        XboxDash = 0xFFFE0000,
        Fusion = 0xFFFE07D2,
        LiveSignup = 0xFFFE07DE,
        XDKLauncher = 0xFFFE07FF,
        XLSATTestTitle = 0xFFFF0072,
        G4WLSystemTitle = 0x585207D1,
        Halo2 = 0x4D530064,
        TexasHoldem = 0x584107F6,
        Carbon = 0x584307D1,
        CarbonCertRequestExecutable = 0x584307D3,
        CarbonSetupPackage = 0x584307D4,
        XboxOriginals_Pirates = 0x54540828,
        Facebook = 0x584807E1,
        Twitter = 0x584807E2,
        LastFM = 0x584807E3,
        RenoTest = 0x584807E5,        
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\StsXrlRequest.cs ===
﻿using System;
using System.Text;
using ServerTestFramework;
using ServerTestFramework.LiveService.FakeSG;
using xonline.common.service;
using xonline.common.stfutil;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public static class StsXrlRequest
	{
        public const string StsGetSecurityTokenPath = "/sts/getsecuritytoken.ashx";

        /// <summary>
        /// 
        /// </summary>
        static StsXrlRequest()
        {
            PjsStfXrlUtil.HttpVersion = Config.GetSetting("HttpVersion");
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <returns></returns>
        public static StsResponse GetSecurityToken(StsRequest request)
        {
            return GetSecurityToken(request, true);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="escape"></param>
        /// <returns></returns>
        public static StsResponse GetSecurityToken(StsRequest request, bool escape)
        {
            return GetSecurityToken(request, escape, false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="request"></param>
        /// <param name="escape"></param>
        /// <param name="useInternal"></param>
        /// <returns></returns>
        public static StsResponse GetSecurityToken(StsRequest request, bool escape, bool useInternal)
        {
            CSGInfo slot = request.FakeSGSlot;
            StsResponse response = GetSecurityToken(ref slot, request.ToRequestUrl(escape), useInternal);
            request.FakeSGSlot = slot;
            return response;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="slot"></param>
        /// <param name="path"></param>
        /// <returns></returns>
        public static StsResponse GetSecurityToken(ref CSGInfo slot, string path)
        {
            return GetSecurityToken(ref slot, path, false);
        }

        public static StsResponse GetSecurityToken(ref CSGInfo slot, string path, bool useInternal)
        {
            StringBuilder sgOutput = new StringBuilder("Fake SG slot configured with:\r\n\t");
            sgOutput.AppendFormat("machine Puid:\t\t0x{0} ({1})\r\n\t", slot.machinePuid.ToString("X16"), StsRequest.GetPlatformStringFromMachinePuid(slot.machinePuid));
            sgOutput.AppendFormat("client Version:\t0x{0} (v{1})\r\n\t", SamlUtil.GetClientVersion(slot).ToString("X8"), SamlUtil.ClientVersionToString(SamlUtil.GetClientVersion(slot)));
            sgOutput.AppendFormat("title ID:\t\t0x{0}\r\n\t", slot.titleId.ToString("X8"));
            sgOutput.AppendFormat("xuid0:\t0x{0}{1}\r\n\t", slot.userPuid0.ToString("X16"), GetUserFlagFields(slot.userFlag0));
            sgOutput.AppendFormat("xuid1:\t0x{0}{1}\r\n\t", slot.userPuid1.ToString("X16"), GetUserFlagFields(slot.userFlag1));
            sgOutput.AppendFormat("xuid2:\t0x{0}{1}\r\n\t", slot.userPuid2.ToString("X16"), GetUserFlagFields(slot.userFlag2));
            sgOutput.AppendFormat("xuid3:\t0x{0}{1}", slot.userPuid3.ToString("X16"), GetUserFlagFields(slot.userFlag3));

            Output.Debug(sgOutput.ToString());

            byte[] response;
            System.Net.HttpStatusCode httpStatus;
            StsResponse stsResponse = new StsResponse();
            Output.Info("Calling STS: {0} ", path);

            stsResponse.RequestSent = DateTime.UtcNow;
            uint hresult = PjsStfXrlUtil.GetXrlRequest(ref slot, XOService.Sts, useInternal, path, null, out response, out httpStatus);
            stsResponse.ResponseRecieved = DateTime.UtcNow;
            stsResponse.HResult = hresult;
            stsResponse.HttpStatus = httpStatus;
            Output.Info("STS request took: {0}", stsResponse.RequestTime);
            if (stsResponse.RequestTime.TotalSeconds > 5)
                Global.RO.Warn("WARNING: STS service took over 5s to respond!");

            string token = String.Empty;
            if (response != null && response.Length > 0)
            {
                token = Encoding.UTF8.GetString(response);
                Microsoft.Live.Test.Common.XmlDocumentEx samlXml = new Microsoft.Live.Test.Common.XmlDocumentEx(token, true);
                Output.Debug("SAML token returned:\r\n{0}", samlXml.FormatXml(2, ' ', '"'));
                //Output.Debug("SAML token returned:\r\n{0}", token);
            }
            stsResponse.Token = token;

            if (stsResponse.Succeeded)
                Output.Success("Successfully retrieved SAML token; HR={0}", hresult);
            else
                Output.Error("Error returned from STS service; HR=0x{0}, {1}", hresult.ToString("X8"), MapHResultToString(hresult));
            return stsResponse;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="flags"></param>
        /// <returns></returns>
        private static string GetUserFlagFields(uint flags)
        {
            StringBuilder fields = new StringBuilder("\r\n\t\t");
            fields.AppendFormat("user Flags:\t0x{0}\r\n\t\t", flags.ToString("X8"));
            byte countryID = StsRequest.GetCountryFromUserFlags(flags);
            fields.AppendFormat("Country ID:\t0x{0} ({1})\r\n\t\t", countryID.ToString("X2"), xonline.common.utilities.CountryDictionary.CountryCode(countryID));
            fields.AppendFormat("Tier:\t\t0x{0} ({1})", StsRequest.GetTierFromUserFlags(flags).ToString("X2"), StsRequest.GetTierStringFromByte(StsRequest.GetTierFromUserFlags(flags)));
            return fields.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="hr"></param>
        /// <returns></returns>
        public static string MapHResultToString(uint hr)
        {
            if (hr == HResult.XONLINE_E_STS_CONFIGURATION_ERROR)
                return "XONLINE_E_STS_CONFIGURATION_ERROR";
            else if (hr == HResult.XONLINE_E_STS_ERROR)
                return "XONLINE_E_STS_ERROR";
            else if (hr == HResult.XONLINE_E_STS_INVALID_ARGUMENT)
                return "XONLINE_E_STS_INVALID_ARGUMENT";
            else
                return String.Format("Unknown STS Hresult: 0x{0}", hr.ToString("X"));
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\XmlDocumentEx.cs ===
#region Using Directives

using System;
using System.Xml;
using System.IO;
using System.Text;
using System.Security;
using System.Collections.Specialized;

#endregion

namespace Microsoft.Live.Test.Common
{
	#region XmlDocumentEx Class
	///////////////////////////////////////////////////////////////////////////////////////////////
	/// <summary>
	/// Summary description for Class1.
	/// </summary>
	public class XmlDocumentEx: XmlDocument
	{
		#region Variable Declarations

		protected XmlNamespaceManager nsmgr;
		protected bool hasNamespaces = false;
		protected NameValueCollection defaultNamespaces = new NameValueCollection();
		protected bool useCdata = false;

		#endregion

		#region Constants
		/// <summary>
		/// 
		/// </summary>
		public const string DefaultNamespacePrefix = "dfltns";

		#endregion

		#region Constructors
		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		public XmlDocumentEx(): base()
		{
			InternalContructor(null, null, null, false);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		public XmlDocumentEx(string xml): base()
		{
			InternalContructor(xml, null, null, false);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		/// <param name="loadNamespaces"></param>
		public XmlDocumentEx(string xml, bool loadNamespaces): base()
		{
			InternalContructor(xml, null, null, loadNamespaces);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		public XmlDocumentEx(Stream xml): base()
		{
			InternalContructor(null, xml, null, false);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		/// <param name="loadNamespaces"></param>
		public XmlDocumentEx(Stream xml, bool loadNamespaces): base()
		{
			InternalContructor(null, xml, null, loadNamespaces);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		public XmlDocumentEx(XmlDocument xml): base()
		{
			InternalContructor(null, null, xml, false);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		/// <param name="loadNamespaces"></param>
		public XmlDocumentEx(XmlDocument xml, bool loadNamespaces): base()
		{
			InternalContructor(null, null, xml, loadNamespaces);
		}
		#endregion

		#region Public Properties
		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		public XmlNamespaceManager NamespaceManager
		{
			get
			{
				return this.nsmgr;
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		public bool HasNamespaces
		{
			get
			{
				return this.hasNamespaces;
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		public NameValueCollection DefaultNamespaces
		{
			get
			{
				return this.defaultNamespaces;
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		public bool UseCdata
		{
			get
			{
				return this.useCdata;
			}
			set
			{
				this.useCdata = value;

				if(this.DocumentElement !=  null)
				{
					UpdateCdataInXml(this.DocumentElement, value);
				}
			}
		}
		#endregion

		#region Public Methods
		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="filename"></param>
		/// <param name="loadNamespaces"></param>
		public void Load(string filename, bool loadNamespaces)
		{
			base.Load(filename);

			if(loadNamespaces)
			{
				LoadNamespaces();
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public string FormatXml()
		{
			return FormatXml(Encoding.UTF8, 1, '\t', '"');
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="indentation"></param>
		/// <param name="indentChar"></param>
		/// <param name="quoteChar"></param>
		/// <returns></returns>
		public string FormatXml(int indentation, char indentChar, char quoteChar)
		{
			return FormatXml(Encoding.UTF8, indentation, indentChar, quoteChar);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="encoding"></param>
		/// <param name="indentation"></param>
		/// <param name="indentChar"></param>
		/// <param name="quoteChar"></param>
		/// <returns></returns>
		public string FormatXml(Encoding encoding, int indentation, char indentChar, char quoteChar)
		{
			MemoryStream memoryStream = new MemoryStream();
			XmlTextWriter xmlWriter = null;
			string formattedXml;

			try
			{
				xmlWriter = new XmlTextWriter(memoryStream, encoding);
				xmlWriter.Formatting = Formatting.Indented;
				xmlWriter.Indentation = indentation;
				xmlWriter.IndentChar = indentChar;
				xmlWriter.QuoteChar = quoteChar;
				xmlWriter.Namespaces = (this.hasNamespaces) ? true : false;
				
				this.WriteTo(xmlWriter);
				xmlWriter.Flush();
				
				memoryStream.Seek(0, SeekOrigin.Begin);
				StreamReader reader = new StreamReader(memoryStream, encoding);
				formattedXml = reader.ReadToEnd();
			}
			finally
			{
				if(xmlWriter != null)
				{
					xmlWriter.Close();
				}
			}

			return formattedXml;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public string Escape()
		{
			return EscapeXml(this.OuterXml);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public string Unescape()
		{
			return UnescapeXml(this.OuterXml);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		public void LoadNamespaces()
		{
			FindNamespaces(this.DocumentElement);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xpath"></param>
		/// <returns></returns>
		public string GetNodeValue(string xpath)
		{
			XmlNode temp = this.SelectSingleNode(xpath, this.nsmgr);

			if(temp != null)
			{
				return temp.InnerText;
			}
			
			throw new NullReferenceException("Unable to get the value for the node; the specified xpath '" + xpath + "' returned a null value."); 
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xpath"></param>
		/// <param name="value"></param>
		public void SetNodeValue(string xpath, string value)
		{
			XmlNode temp = this.SelectSingleNode(xpath, this.nsmgr);

			if(temp != null)
			{
				temp.InnerText = value;
			}
			else
			{
				throw new NullReferenceException("Unable to set the value for the node; the specified xpath '" + xpath + "' returned a null value."); 
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xpath"></param>
		/// <returns></returns>
		public bool DoesNodeExist(string xpath)
		{
			XmlNode temp;

			return DoesNodeExist(xpath, out temp);
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xpath"></param>
		/// <param name="node"></param>
		/// <returns></returns>
		public bool DoesNodeExist(string xpath, out XmlNode node)
		{
			node = this.SelectSingleNode(xpath, this.nsmgr);
			
			return (node != null) ? true : false;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		/// <returns></returns>
		public static string EscapeXml(string xml)
		{
			if((xml != null) && (xml.Length > 0))
			{
				return SecurityElement.Escape(xml);
			}

			return String.Empty;
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		/// <returns></returns>
		public static string UnescapeXml(string xml)
		{
			if((xml != null) && (xml.Length > 0))
			{
				string temp = xml;

				temp = temp.Replace("&lt;", "<");
				temp = temp.Replace("&gt;", ">");
				temp = temp.Replace("&amp;", "&");
				temp = temp.Replace("&apos;", "'");
				temp = temp.Replace("&quot;", "\"");

				return temp;
			}

			return String.Empty;
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="oldPrefix"></param>
		/// <param name="newPrefix"></param>
		public void UpdatePrefix(string oldPrefix, string newPrefix)
		{
			UpdatePrefix(this.DocumentElement, oldPrefix, newPrefix);
		}
		#endregion

		#region Private Methods
		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="root"></param>
		private void FindNamespaces(XmlNode root)
		{
			if (root == null)
			{
				return;
			}

			if(root.Attributes != null)
			{
				foreach(XmlAttribute attribute in root.Attributes)
				{
					if((String.Compare(attribute.Prefix, "xmlns", true) == 0) || (String.Compare(attribute.LocalName, "xmlns", true) == 0))
					{
						if(attribute.Prefix.Length > 0)	//regular namespace
						{
							if(!this.nsmgr.HasNamespace(attribute.LocalName))
							{
								this.nsmgr.AddNamespace(attribute.LocalName, attribute.Value);
							}
						}
						else							//default namespace; xpath REQUIRES that it be given a 'dummy' prefix!
						{
							if(!this.nsmgr.HasNamespace(DefaultNamespacePrefix))
							{
								this.defaultNamespaces.Add(attribute.OwnerElement.LocalName, DefaultNamespacePrefix);
								this.nsmgr.AddNamespace(attribute.Prefix, attribute.Value);
								this.nsmgr.AddNamespace(DefaultNamespacePrefix, attribute.Value);
							}
							else
							{
								string newPrefix = attribute.OwnerElement.LocalName.ToLower() + DefaultNamespacePrefix;
								this.defaultNamespaces.Add(attribute.OwnerElement.LocalName, newPrefix);
								this.nsmgr.AddNamespace(newPrefix, attribute.Value);
							}
						}

						this.hasNamespaces = true;
					}
				}
			}
			
			foreach(XmlNode child in root.ChildNodes)
			{
				FindNamespaces(child);
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="root"></param>
		/// <param name="useCata"></param>
		private void UpdateCdataInXml(XmlNode root, bool useCata)
		{
			if(root.NodeType == XmlNodeType.Text)
			{
				if(useCdata)
				{
					root.ParentNode.InnerXml = "<![CDATA[" + root.Value + "]]>";
				}
			}
			else if (root.NodeType == XmlNodeType.Element && !root.HasChildNodes)
			{
				if (useCata)
				{
					root.InnerXml = "<![CDATA[" + root.Value + "]]>";
				}
			}
			else if (root.NodeType == XmlNodeType.CDATA)
			{
				if (!useCdata)
				{
					root.ParentNode.InnerXml = root.Value;
				}
			}
			else if (root.HasChildNodes)
			{
				foreach (XmlNode child in root.ChildNodes)
				{
					UpdateCdataInXml(child, useCdata);
				}
			}
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="root"></param>
		/// <param name="oldPrefix"></param>
		/// <param name="newPrefix"></param>
		private void UpdatePrefix(XmlNode root, string oldPrefix, string newPrefix)
		{
			if ((root.Attributes != null) && (root.Attributes.Count > 0))
			{
				XmlAttribute prefixAttribute = root.Attributes[String.Format("xmlns:{0}", oldPrefix)];

				if (prefixAttribute != null)
				{
					//update the old prefix definition to the new name
					string namespaceValue = prefixAttribute.Value;
					root.Attributes.Remove(prefixAttribute);
					XmlAttribute newPrefixAttribute = root.OwnerDocument.CreateAttribute(String.Format("xmlns:{0}", newPrefix), prefixAttribute.NamespaceURI);
					newPrefixAttribute.Value = namespaceValue;
					root.Attributes.Append(newPrefixAttribute);
				}
			}

			if (root.Prefix == oldPrefix)
			{
				root.Prefix = newPrefix;
			}

			foreach (XmlNode child in root.ChildNodes)
			{
				if (child.NodeType == XmlNodeType.Element)
				{
					//only elements can have prefixes/attributes
					UpdatePrefix(child, oldPrefix, newPrefix);
				}
			}
		}

		///////////////////////////////////////////////////////////////////////////////////////////////
		/// <summary>
		/// 
		/// </summary>
		/// <param name="xml"></param>
		/// <param name="xmlStream"></param>
		/// <param name="loadNamespaces"></param>
		private void InternalContructor(string xml, Stream xmlStream, XmlNode xmlNode, bool loadNamespaces)
		{
			this.nsmgr = new XmlNamespaceManager(this.NameTable);

			if((xml != null) && (xml.Length > 0))
			{
				this.LoadXml(xml);
			}
			else if((xmlStream != null) && (xmlStream.Length > 0))
			{
				this.Load(xmlStream);
			}
			else if(xmlNode != null)
			{
				this.LoadXml(xmlNode.OuterXml);
			}

			if(loadNamespaces)
			{
				this.LoadNamespaces();
			}
		}
		#endregion
	}
	#endregion
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\XuidCollection.cs ===
﻿using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace StsTest
{
    /// <summary>
    /// Simple collection to represent all four, possible xuids.  Specifically created to ensure to ensure unique xuid creation.
    /// </summary>
	public class XuidCollection
	{
        private List<Xuid> internalList;

        /// <summary>
        /// 
        /// </summary>
        public XuidCollection(): this(4)
        {

        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="count"></param>
        public XuidCollection(int count)
        {
            this.internalList = new List<Xuid>(4);

            for (int i = 0; i < count; i++)
            {
                Xuid newXuid = new Xuid();
                while(this.internalList.Where<Xuid>(xuid => xuid == newXuid).Count<Xuid>() > 0) //keep looping until we get unique values
                    newXuid = new Xuid();
                this.internalList.Add(newXuid);
            }
            FillOutList();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuids"></param>
        public XuidCollection(params ulong?[] xuids)
        {
            this.internalList = new List<Xuid>(4);
            FillUpList(xuids);
            FillOutList();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuids"></param>
        public XuidCollection(params string[] xuids)
        {
            this.internalList = new List<Xuid>(4); 
            FillUpList(xuids);
            FillOutList();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="index"></param>
        /// <returns></returns>
        public Xuid this[int index]
        {
            get
            {
                return this.internalList[index];
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public int Count
        {
            get
            {
                return this.internalList.Count;
            }
        }

        /// <summary>
        /// 
        /// </summary>
        public string Print()
        {
            StringBuilder temp = new StringBuilder();
            if (this.internalList.Count > 0)
            {
                temp.Append("Sending request for xuid(s): ");
                for (int i = 0; i < this.internalList.Count; i++)
                {
                    if (!this.internalList[i].Ignore)
                        temp.AppendFormat("Xuid{0}, ", i + 1);
                }
                temp.Length -= 2;
            }
            else
                temp.Append("Sending NO Xuids in the request.");
            return temp.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="xuids"></param>
        private void FillUpList(Array xuids)
        {            
            for (int i = 0; i < xuids.Length; i++)
                this.internalList.Add(new Xuid() { Value = xuids.GetValue(i) });
        }

        /// <summary>
        /// 
        /// </summary>
        private void FillOutList()
        {
            for (int i = this.internalList.Count; i < 4; i++)
                this.internalList.Add(Xuid.Empty);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\wsdl\GetSecurityTicketGet.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace StsTest.WebService.Get {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.EnterpriseServices;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public partial class SecurityTicket : System.Web.Services.Protocols.HttpGetClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPartnerSecurityTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityTicketOperationCompleted;
        
        /// <remarks/>
        public SecurityTicket() {
            this.Url = "http://johnmcp-xblob:10290/sts/sts.asmx";
        }
        
        /// <remarks/>
        public event GetPartnerSecurityTicketCompletedEventHandler GetPartnerSecurityTicketCompleted;
        
        /// <remarks/>
        public event GetSecurityTicketCompletedEventHandler GetSecurityTicketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.UrlParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("string", Namespace="urn:schemas-xbox-com:SecurityTicket-data", IsNullable=true)]
        public string GetPartnerSecurityTicket(string xuid, string titleId, string titleVersion) {
            return ((string)(this.Invoke("GetPartnerSecurityTicket", (this.Url + "/GetPartnerSecurityTicket"), new object[] {
                        xuid,
                        titleId,
                        titleVersion})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPartnerSecurityTicket(string xuid, string titleId, string titleVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPartnerSecurityTicket", (this.Url + "/GetPartnerSecurityTicket"), new object[] {
                        xuid,
                        titleId,
                        titleVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPartnerSecurityTicket(System.IAsyncResult asyncResult) {
            return ((string)(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(string xuid, string titleId, string titleVersion) {
            this.GetPartnerSecurityTicketAsync(xuid, titleId, titleVersion, null);
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(string xuid, string titleId, string titleVersion, object userState) {
            if ((this.GetPartnerSecurityTicketOperationCompleted == null)) {
                this.GetPartnerSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartnerSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetPartnerSecurityTicket", (this.Url + "/GetPartnerSecurityTicket"), new object[] {
                        xuid,
                        titleId,
                        titleVersion}, this.GetPartnerSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetPartnerSecurityTicketOperationCompleted(object arg) {
            if ((this.GetPartnerSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartnerSecurityTicketCompleted(this, new GetPartnerSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.UrlParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("string", Namespace="urn:schemas-xbox-com:SecurityTicket-data", IsNullable=true)]
        public string GetSecurityTicket(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId) {
            return ((string)(this.Invoke("GetSecurityTicket", (this.Url + "/GetSecurityTicket"), new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityTicket(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityTicket", (this.Url + "/GetSecurityTicket"), new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSecurityTicket(System.IAsyncResult asyncResult) {
            return ((string)(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId) {
            this.GetSecurityTicketAsync(platformType, titleId, titleVersion, clientVersion, deviceId, null);
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId, object userState) {
            if ((this.GetSecurityTicketOperationCompleted == null)) {
                this.GetSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetSecurityTicket", (this.Url + "/GetSecurityTicket"), new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, this.GetSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetSecurityTicketOperationCompleted(object arg) {
            if ((this.GetSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityTicketCompleted(this, new GetSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPartnerSecurityTicketCompletedEventHandler(object sender, GetPartnerSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartnerSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartnerSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecurityTicketCompletedEventHandler(object sender, GetSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\Utility\Xuid.cs ===
﻿using System;
using System.Security.Cryptography;
using xonline.common.service;

namespace StsTest
{
    /// <summary>
    /// 
    /// </summary>
	public class Xuid
	{
        public readonly static Xuid Empty = new Xuid() { Value = null };

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        public Xuid(ulong value): this((object)value)
        {
            
        }

        /// <summary>
        /// 
        /// </summary>
        public Xuid(): this(GenerateRandomUInt64())
        {
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        public Xuid(string value): this((object)value)
        {
            
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="value"></param>
        public Xuid(object value)
        {
            this.Value = value;
            this.CountryID = (byte)ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(110); //NpdbSettingsUtil.GetRandomCountryID();
            this.Tier = GenerateRandomTier();
        }

        /// <summary>
        /// 
        /// </summary>
        public object Value
        {
           get;
           set;
        }

        /// <summary>
        /// 
        /// </summary>
        public bool Ignore
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public byte CountryID
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        public byte Tier
        {
            get;
            set;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public bool IsNullOrIgnore()
        {
            return this.Ignore || this.Value == null;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public ulong ToUInt64()
        {
            if (this.Value != null)
            {
                if(this.Value is ulong)
                    return (ulong)this.Value;
                else if (this.Value is String)
                {
                    ulong xuid;
                    if (ulong.TryParse((string)this.Value, out xuid) ||
                        ulong.TryParse((string)this.Value, System.Globalization.NumberStyles.HexNumber, System.Globalization.NumberFormatInfo.CurrentInfo, out xuid))
                        return xuid;
                }
            }
            return 0;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return ToString(false);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="fullHex"></param>
        /// <returns></returns>
        public string ToString(bool fullHex)
        {
            if (this.Value == null)
                return String.Empty;
            if (this.Value is ulong)
                return ((ulong)this.Value).ToString(fullHex ? "X16" : "X");
            if (this.Value is ulong?)
                return ((ulong?)this.Value).Value.ToString(fullHex ? "X16" : "X");
            return this.Value.ToString();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool operator ==(Xuid a, Xuid b)
        {
            if (object.ReferenceEquals(a, b))
                return true;
            if (((object)a == null && (object)b != null) ||
                ((object)a != null && (object)b == null))
                return false;
            return a.Value.Equals(b.Value);// && a.Ignore == b.Ignore
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="obj"></param>
        /// <returns></returns>
        public override bool Equals(object obj)
        {
            Xuid temp = obj as Xuid;
            if (temp == null)
                return false;
            return base.Equals(obj) && this.Value == temp.Value && this.Ignore == temp.Ignore;
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public override int GetHashCode()
        {
            if (this.Value != null)
                return this.Value.GetHashCode();
            return base.GetHashCode();
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool operator !=(Xuid a, Xuid b)
        {
            return !(a == b);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static ulong GenerateRandomUInt64()
        {
            byte[] buffer = new byte[sizeof(ulong)];
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
            rng.GetNonZeroBytes(buffer);
            return BitConverter.ToUInt64(buffer, 0);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <returns></returns>
        public static byte GenerateRandomTier()
        {
            byte tier;
            switch (ServerTestFramework.Utilities.RandomEx.GlobalRandGen.Next(3))
            {
                case 0:
                    tier = (byte)XOn.XONLINE_TIER_GOLD;
                    break;
                case 1:
                    tier = (byte)XOn.XONLINE_TIER_SILVER;
                    break;
                default:
                    tier = (byte)XOn.XONLINE_TIER_NEWUSER;
                    break;
            }
            return tier;
        }
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\wsdl\GetSecurityTicketPost.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace StsTest.WebService.Post {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.EnterpriseServices;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public partial class SecurityTicket : System.Web.Services.Protocols.HttpPostClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPartnerSecurityTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityTicketOperationCompleted;
        
        /// <remarks/>
        public SecurityTicket() {
            this.Url = "http://johnmcp-xblob:10290/sts/sts.asmx";
        }
        
        /// <remarks/>
        public event GetPartnerSecurityTicketCompletedEventHandler GetPartnerSecurityTicketCompleted;
        
        /// <remarks/>
        public event GetSecurityTicketCompletedEventHandler GetSecurityTicketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("string", Namespace="urn:schemas-xbox-com:SecurityTicket-data", IsNullable=true)]
        public string GetPartnerSecurityTicket(string xuid, string titleId, string titleVersion) {
            return ((string)(this.Invoke("GetPartnerSecurityTicket", (this.Url + "/GetPartnerSecurityTicket"), new object[] {
                        xuid,
                        titleId,
                        titleVersion})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPartnerSecurityTicket(string xuid, string titleId, string titleVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPartnerSecurityTicket", (this.Url + "/GetPartnerSecurityTicket"), new object[] {
                        xuid,
                        titleId,
                        titleVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPartnerSecurityTicket(System.IAsyncResult asyncResult) {
            return ((string)(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(string xuid, string titleId, string titleVersion) {
            this.GetPartnerSecurityTicketAsync(xuid, titleId, titleVersion, null);
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(string xuid, string titleId, string titleVersion, object userState) {
            if ((this.GetPartnerSecurityTicketOperationCompleted == null)) {
                this.GetPartnerSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartnerSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetPartnerSecurityTicket", (this.Url + "/GetPartnerSecurityTicket"), new object[] {
                        xuid,
                        titleId,
                        titleVersion}, this.GetPartnerSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetPartnerSecurityTicketOperationCompleted(object arg) {
            if ((this.GetPartnerSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartnerSecurityTicketCompleted(this, new GetPartnerSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.HttpMethodAttribute(typeof(System.Web.Services.Protocols.XmlReturnReader), typeof(System.Web.Services.Protocols.HtmlFormParameterWriter))]
        [return: System.Xml.Serialization.XmlRootAttribute("string", Namespace="urn:schemas-xbox-com:SecurityTicket-data", IsNullable=true)]
        public string GetSecurityTicket(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId) {
            return ((string)(this.Invoke("GetSecurityTicket", (this.Url + "/GetSecurityTicket"), new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId})));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityTicket(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityTicket", (this.Url + "/GetSecurityTicket"), new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSecurityTicket(System.IAsyncResult asyncResult) {
            return ((string)(this.EndInvoke(asyncResult)));
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId) {
            this.GetSecurityTicketAsync(platformType, titleId, titleVersion, clientVersion, deviceId, null);
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(string platformType, string titleId, string titleVersion, string clientVersion, string deviceId, object userState) {
            if ((this.GetSecurityTicketOperationCompleted == null)) {
                this.GetSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetSecurityTicket", (this.Url + "/GetSecurityTicket"), new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, this.GetSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetSecurityTicketOperationCompleted(object arg) {
            if ((this.GetSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityTicketCompleted(this, new GetSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPartnerSecurityTicketCompletedEventHandler(object sender, GetPartnerSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartnerSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartnerSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecurityTicketCompletedEventHandler(object sender, GetSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\wsdl\GetSecurityTicketSoap.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace StsTest.WebService.Soap {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SecurityTicketSoap", Namespace="urn:schemas-xbox-com:SecurityTicket-data")]
    public partial class SecurityTicket : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPartnerSecurityTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityTicketOperationCompleted;
        
        /// <remarks/>
        public SecurityTicket() {
            this.Url = "http://johnmcp-xblob:10290/sts/sts.asmx";
        }
        
        /// <remarks/>
        public event GetPartnerSecurityTicketCompletedEventHandler GetPartnerSecurityTicketCompleted;
        
        /// <remarks/>
        public event GetSecurityTicketCompletedEventHandler GetSecurityTicketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:SecurityTicket-data/GetPartnerSecurityTicket", RequestNamespace="urn:schemas-xbox-com:SecurityTicket-data", ResponseNamespace="urn:schemas-xbox-com:SecurityTicket-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPartnerSecurityTicket(ulong xuid, uint titleId, uint titleVersion) {
            object[] results = this.Invoke("GetPartnerSecurityTicket", new object[] {
                        xuid,
                        titleId,
                        titleVersion});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPartnerSecurityTicket(ulong xuid, uint titleId, uint titleVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPartnerSecurityTicket", new object[] {
                        xuid,
                        titleId,
                        titleVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPartnerSecurityTicket(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(ulong xuid, uint titleId, uint titleVersion) {
            this.GetPartnerSecurityTicketAsync(xuid, titleId, titleVersion, null);
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(ulong xuid, uint titleId, uint titleVersion, object userState) {
            if ((this.GetPartnerSecurityTicketOperationCompleted == null)) {
                this.GetPartnerSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartnerSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetPartnerSecurityTicket", new object[] {
                        xuid,
                        titleId,
                        titleVersion}, this.GetPartnerSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetPartnerSecurityTicketOperationCompleted(object arg) {
            if ((this.GetPartnerSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartnerSecurityTicketCompleted(this, new GetPartnerSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:SecurityTicket-data/GetSecurityTicket", RequestNamespace="urn:schemas-xbox-com:SecurityTicket-data", ResponseNamespace="urn:schemas-xbox-com:SecurityTicket-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSecurityTicket(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId) {
            object[] results = this.Invoke("GetSecurityTicket", new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityTicket(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityTicket", new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSecurityTicket(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId) {
            this.GetSecurityTicketAsync(platformType, titleId, titleVersion, clientVersion, deviceId, null);
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId, object userState) {
            if ((this.GetSecurityTicketOperationCompleted == null)) {
                this.GetSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetSecurityTicket", new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, this.GetSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetSecurityTicketOperationCompleted(object arg) {
            if ((this.GetSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityTicketCompleted(this, new GetSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPartnerSecurityTicketCompletedEventHandler(object sender, GetPartnerSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartnerSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartnerSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecurityTicketCompletedEventHandler(object sender, GetSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\wsdl\GetSecurityTicketAudienceSoap.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace StsTest.WebService.Soap.StsAudience {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SecurityTicketSoap", Namespace="urn:schemas-xbox-com:SecurityTicket-data")]
    public partial class SecurityTicket : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetPartnerSecurityTicketOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecurityTicketOperationCompleted;
        
        /// <remarks/>
        public SecurityTicket() {
            this.Url = "http://dougb-xblob:10290/sts/sts.asmx";
        }
        
        /// <remarks/>
        public event GetPartnerSecurityTicketCompletedEventHandler GetPartnerSecurityTicketCompleted;
        
        /// <remarks/>
        public event GetSecurityTicketCompletedEventHandler GetSecurityTicketCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:SecurityTicket-data/GetPartnerSecurityTicket", RequestNamespace="urn:schemas-xbox-com:SecurityTicket-data", ResponseNamespace="urn:schemas-xbox-com:SecurityTicket-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPartnerSecurityTicket(ulong xuid, uint titleId, uint titleVersion, string audience) {
            object[] results = this.Invoke("GetPartnerSecurityTicket", new object[] {
                        xuid,
                        titleId,
                        titleVersion,
                        audience});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPartnerSecurityTicket(ulong xuid, uint titleId, uint titleVersion, string audience, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPartnerSecurityTicket", new object[] {
                        xuid,
                        titleId,
                        titleVersion,
                        audience}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetPartnerSecurityTicket(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(ulong xuid, uint titleId, uint titleVersion, string audience) {
            this.GetPartnerSecurityTicketAsync(xuid, titleId, titleVersion, audience, null);
        }
        
        /// <remarks/>
        public void GetPartnerSecurityTicketAsync(ulong xuid, uint titleId, uint titleVersion, string audience, object userState) {
            if ((this.GetPartnerSecurityTicketOperationCompleted == null)) {
                this.GetPartnerSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPartnerSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetPartnerSecurityTicket", new object[] {
                        xuid,
                        titleId,
                        titleVersion,
                        audience}, this.GetPartnerSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetPartnerSecurityTicketOperationCompleted(object arg) {
            if ((this.GetPartnerSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPartnerSecurityTicketCompleted(this, new GetPartnerSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:SecurityTicket-data/GetSecurityTicket", RequestNamespace="urn:schemas-xbox-com:SecurityTicket-data", ResponseNamespace="urn:schemas-xbox-com:SecurityTicket-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetSecurityTicket(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId) {
            object[] results = this.Invoke("GetSecurityTicket", new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecurityTicket(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecurityTicket", new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetSecurityTicket(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId) {
            this.GetSecurityTicketAsync(platformType, titleId, titleVersion, clientVersion, deviceId, null);
        }
        
        /// <remarks/>
        public void GetSecurityTicketAsync(byte platformType, uint titleId, uint titleVersion, uint clientVersion, string deviceId, object userState) {
            if ((this.GetSecurityTicketOperationCompleted == null)) {
                this.GetSecurityTicketOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecurityTicketOperationCompleted);
            }
            this.InvokeAsync("GetSecurityTicket", new object[] {
                        platformType,
                        titleId,
                        titleVersion,
                        clientVersion,
                        deviceId}, this.GetSecurityTicketOperationCompleted, userState);
        }
        
        private void OnGetSecurityTicketOperationCompleted(object arg) {
            if ((this.GetSecurityTicketCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecurityTicketCompleted(this, new GetSecurityTicketCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPartnerSecurityTicketCompletedEventHandler(object sender, GetPartnerSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPartnerSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPartnerSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSecurityTicketCompletedEventHandler(object sender, GetSecurityTicketCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecurityTicketCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecurityTicketCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\wsdl\XbosBillingSoap.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace StsTest.WebService.Soap.Xbos {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="BillingSoap", Namespace="urn:schemas-xbox-com:billing-data")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(WireData))]
    public partial class Billing : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback TestConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseMediaOffersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPurchaseStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback FindMediaInstanceUrlsOperationCompleted;
        
        private System.Threading.SendOrPostCallback VerifyTokenOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelSubscriptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback GamertagEnumerateOperationCompleted;
        
        private System.Threading.SendOrPostCallback SubscriptionEnumerateOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseBillingOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseGamertagOperationCompleted;
        
        /// <remarks/>
        public Billing() {
            this.Url = "http://piyush-xblob3:10090/xbos/gamertag.asmx";
        }
        
        /// <remarks/>
        public event TestConnectionCompletedEventHandler TestConnectionCompleted;
        
        /// <remarks/>
        public event PurchaseMediaOffersCompletedEventHandler PurchaseMediaOffersCompleted;
        
        /// <remarks/>
        public event GetPurchaseStatusCompletedEventHandler GetPurchaseStatusCompleted;
        
        /// <remarks/>
        public event FindMediaInstanceUrlsCompletedEventHandler FindMediaInstanceUrlsCompleted;
        
        /// <remarks/>
        public event VerifyTokenCompletedEventHandler VerifyTokenCompleted;
        
        /// <remarks/>
        public event CancelSubscriptionCompletedEventHandler CancelSubscriptionCompleted;
        
        /// <remarks/>
        public event GamertagEnumerateCompletedEventHandler GamertagEnumerateCompleted;
        
        /// <remarks/>
        public event SubscriptionEnumerateCompletedEventHandler SubscriptionEnumerateCompleted;
        
        /// <remarks/>
        public event PurchaseBillingOfferCompletedEventHandler PurchaseBillingOfferCompleted;
        
        /// <remarks/>
        public event PurchaseGamertagCompletedEventHandler PurchaseGamertagCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/TestConnection", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestConnection(string inputMessage) {
            object[] results = this.Invoke("TestConnection", new object[] {
                        inputMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestConnection(string inputMessage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestConnection", new object[] {
                        inputMessage}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTestConnection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string inputMessage) {
            this.TestConnectionAsync(inputMessage, null);
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string inputMessage, object userState) {
            if ((this.TestConnectionOperationCompleted == null)) {
                this.TestConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionOperationCompleted);
            }
            this.InvokeAsync("TestConnection", new object[] {
                        inputMessage}, this.TestConnectionOperationCompleted, userState);
        }
        
        private void OnTestConnectionOperationCompleted(object arg) {
            if ((this.TestConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/PurchaseMediaOffers", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PurchaseMediaOffers(ulong userPuid, ulong machinePuid, string[] offerIds, int[] mediaTypes, uint[] expectedPrices, PaymentTypeEnum paymentType, string paymentInstrumentId, string billingToken, int storeId) {
            this.Invoke("PurchaseMediaOffers", new object[] {
                        userPuid,
                        machinePuid,
                        offerIds,
                        mediaTypes,
                        expectedPrices,
                        paymentType,
                        paymentInstrumentId,
                        billingToken,
                        storeId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPurchaseMediaOffers(ulong userPuid, ulong machinePuid, string[] offerIds, int[] mediaTypes, uint[] expectedPrices, PaymentTypeEnum paymentType, string paymentInstrumentId, string billingToken, int storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PurchaseMediaOffers", new object[] {
                        userPuid,
                        machinePuid,
                        offerIds,
                        mediaTypes,
                        expectedPrices,
                        paymentType,
                        paymentInstrumentId,
                        billingToken,
                        storeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPurchaseMediaOffers(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PurchaseMediaOffersAsync(ulong userPuid, ulong machinePuid, string[] offerIds, int[] mediaTypes, uint[] expectedPrices, PaymentTypeEnum paymentType, string paymentInstrumentId, string billingToken, int storeId) {
            this.PurchaseMediaOffersAsync(userPuid, machinePuid, offerIds, mediaTypes, expectedPrices, paymentType, paymentInstrumentId, billingToken, storeId, null);
        }
        
        /// <remarks/>
        public void PurchaseMediaOffersAsync(ulong userPuid, ulong machinePuid, string[] offerIds, int[] mediaTypes, uint[] expectedPrices, PaymentTypeEnum paymentType, string paymentInstrumentId, string billingToken, int storeId, object userState) {
            if ((this.PurchaseMediaOffersOperationCompleted == null)) {
                this.PurchaseMediaOffersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseMediaOffersOperationCompleted);
            }
            this.InvokeAsync("PurchaseMediaOffers", new object[] {
                        userPuid,
                        machinePuid,
                        offerIds,
                        mediaTypes,
                        expectedPrices,
                        paymentType,
                        paymentInstrumentId,
                        billingToken,
                        storeId}, this.PurchaseMediaOffersOperationCompleted, userState);
        }
        
        private void OnPurchaseMediaOffersOperationCompleted(object arg) {
            if ((this.PurchaseMediaOffersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseMediaOffersCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/GetPurchaseStatus", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public PurchaseStatus[] GetPurchaseStatus(ulong userPuid, string[] offerIds) {
            object[] results = this.Invoke("GetPurchaseStatus", new object[] {
                        userPuid,
                        offerIds});
            return ((PurchaseStatus[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPurchaseStatus(ulong userPuid, string[] offerIds, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPurchaseStatus", new object[] {
                        userPuid,
                        offerIds}, callback, asyncState);
        }
        
        /// <remarks/>
        public PurchaseStatus[] EndGetPurchaseStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((PurchaseStatus[])(results[0]));
        }
        
        /// <remarks/>
        public void GetPurchaseStatusAsync(ulong userPuid, string[] offerIds) {
            this.GetPurchaseStatusAsync(userPuid, offerIds, null);
        }
        
        /// <remarks/>
        public void GetPurchaseStatusAsync(ulong userPuid, string[] offerIds, object userState) {
            if ((this.GetPurchaseStatusOperationCompleted == null)) {
                this.GetPurchaseStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPurchaseStatusOperationCompleted);
            }
            this.InvokeAsync("GetPurchaseStatus", new object[] {
                        userPuid,
                        offerIds}, this.GetPurchaseStatusOperationCompleted, userState);
        }
        
        private void OnGetPurchaseStatusOperationCompleted(object arg) {
            if ((this.GetPurchaseStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPurchaseStatusCompleted(this, new GetPurchaseStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/FindMediaInstanceUrls", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MediaInstanceUrl[] FindMediaInstanceUrls(string[] mediaInstanceIds, ulong userPuid) {
            object[] results = this.Invoke("FindMediaInstanceUrls", new object[] {
                        mediaInstanceIds,
                        userPuid});
            return ((MediaInstanceUrl[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFindMediaInstanceUrls(string[] mediaInstanceIds, ulong userPuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FindMediaInstanceUrls", new object[] {
                        mediaInstanceIds,
                        userPuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public MediaInstanceUrl[] EndFindMediaInstanceUrls(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MediaInstanceUrl[])(results[0]));
        }
        
        /// <remarks/>
        public void FindMediaInstanceUrlsAsync(string[] mediaInstanceIds, ulong userPuid) {
            this.FindMediaInstanceUrlsAsync(mediaInstanceIds, userPuid, null);
        }
        
        /// <remarks/>
        public void FindMediaInstanceUrlsAsync(string[] mediaInstanceIds, ulong userPuid, object userState) {
            if ((this.FindMediaInstanceUrlsOperationCompleted == null)) {
                this.FindMediaInstanceUrlsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindMediaInstanceUrlsOperationCompleted);
            }
            this.InvokeAsync("FindMediaInstanceUrls", new object[] {
                        mediaInstanceIds,
                        userPuid}, this.FindMediaInstanceUrlsOperationCompleted, userState);
        }
        
        private void OnFindMediaInstanceUrlsOperationCompleted(object arg) {
            if ((this.FindMediaInstanceUrlsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindMediaInstanceUrlsCompleted(this, new FindMediaInstanceUrlsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/VerifyToken", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public VerifyTokenResults VerifyToken(ulong userPuid, ulong machinePuid, string billingToken, int storeId) {
            object[] results = this.Invoke("VerifyToken", new object[] {
                        userPuid,
                        machinePuid,
                        billingToken,
                        storeId});
            return ((VerifyTokenResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginVerifyToken(ulong userPuid, ulong machinePuid, string billingToken, int storeId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("VerifyToken", new object[] {
                        userPuid,
                        machinePuid,
                        billingToken,
                        storeId}, callback, asyncState);
        }
        
        /// <remarks/>
        public VerifyTokenResults EndVerifyToken(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((VerifyTokenResults)(results[0]));
        }
        
        /// <remarks/>
        public void VerifyTokenAsync(ulong userPuid, ulong machinePuid, string billingToken, int storeId) {
            this.VerifyTokenAsync(userPuid, machinePuid, billingToken, storeId, null);
        }
        
        /// <remarks/>
        public void VerifyTokenAsync(ulong userPuid, ulong machinePuid, string billingToken, int storeId, object userState) {
            if ((this.VerifyTokenOperationCompleted == null)) {
                this.VerifyTokenOperationCompleted = new System.Threading.SendOrPostCallback(this.OnVerifyTokenOperationCompleted);
            }
            this.InvokeAsync("VerifyToken", new object[] {
                        userPuid,
                        machinePuid,
                        billingToken,
                        storeId}, this.VerifyTokenOperationCompleted, userState);
        }
        
        private void OnVerifyTokenOperationCompleted(object arg) {
            if ((this.VerifyTokenCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.VerifyTokenCompleted(this, new VerifyTokenCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/CancelSubscription", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelSubscription(ulong userPuid, ulong machinePuid, ulong offerId, bool undoDelayedCancel) {
            this.Invoke("CancelSubscription", new object[] {
                        userPuid,
                        machinePuid,
                        offerId,
                        undoDelayedCancel});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelSubscription(ulong userPuid, ulong machinePuid, ulong offerId, bool undoDelayedCancel, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelSubscription", new object[] {
                        userPuid,
                        machinePuid,
                        offerId,
                        undoDelayedCancel}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCancelSubscription(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CancelSubscriptionAsync(ulong userPuid, ulong machinePuid, ulong offerId, bool undoDelayedCancel) {
            this.CancelSubscriptionAsync(userPuid, machinePuid, offerId, undoDelayedCancel, null);
        }
        
        /// <remarks/>
        public void CancelSubscriptionAsync(ulong userPuid, ulong machinePuid, ulong offerId, bool undoDelayedCancel, object userState) {
            if ((this.CancelSubscriptionOperationCompleted == null)) {
                this.CancelSubscriptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelSubscriptionOperationCompleted);
            }
            this.InvokeAsync("CancelSubscription", new object[] {
                        userPuid,
                        machinePuid,
                        offerId,
                        undoDelayedCancel}, this.CancelSubscriptionOperationCompleted, userState);
        }
        
        private void OnCancelSubscriptionOperationCompleted(object arg) {
            if ((this.CancelSubscriptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelSubscriptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/GamertagEnumerate", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GamertagEnumerateResult GamertagEnumerate(ulong userPuid, PaymentTypeEnum paymentType, uint titleId) {
            object[] results = this.Invoke("GamertagEnumerate", new object[] {
                        userPuid,
                        paymentType,
                        titleId});
            return ((GamertagEnumerateResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGamertagEnumerate(ulong userPuid, PaymentTypeEnum paymentType, uint titleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GamertagEnumerate", new object[] {
                        userPuid,
                        paymentType,
                        titleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GamertagEnumerateResult EndGamertagEnumerate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GamertagEnumerateResult)(results[0]));
        }
        
        /// <remarks/>
        public void GamertagEnumerateAsync(ulong userPuid, PaymentTypeEnum paymentType, uint titleId) {
            this.GamertagEnumerateAsync(userPuid, paymentType, titleId, null);
        }
        
        /// <remarks/>
        public void GamertagEnumerateAsync(ulong userPuid, PaymentTypeEnum paymentType, uint titleId, object userState) {
            if ((this.GamertagEnumerateOperationCompleted == null)) {
                this.GamertagEnumerateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGamertagEnumerateOperationCompleted);
            }
            this.InvokeAsync("GamertagEnumerate", new object[] {
                        userPuid,
                        paymentType,
                        titleId}, this.GamertagEnumerateOperationCompleted, userState);
        }
        
        private void OnGamertagEnumerateOperationCompleted(object arg) {
            if ((this.GamertagEnumerateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GamertagEnumerateCompleted(this, new GamertagEnumerateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/SubscriptionEnumerate", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SubscriptionEnumerateResults SubscriptionEnumerate(ulong userPuid, ulong machinePuid, uint offerType, uint paymentType, uint titleId, bool queryForNew, bool queryForRenewals, bool queryForCurrent, bool queryForCancelled, bool queryForSuspended) {
            object[] results = this.Invoke("SubscriptionEnumerate", new object[] {
                        userPuid,
                        machinePuid,
                        offerType,
                        paymentType,
                        titleId,
                        queryForNew,
                        queryForRenewals,
                        queryForCurrent,
                        queryForCancelled,
                        queryForSuspended});
            return ((SubscriptionEnumerateResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSubscriptionEnumerate(ulong userPuid, ulong machinePuid, uint offerType, uint paymentType, uint titleId, bool queryForNew, bool queryForRenewals, bool queryForCurrent, bool queryForCancelled, bool queryForSuspended, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SubscriptionEnumerate", new object[] {
                        userPuid,
                        machinePuid,
                        offerType,
                        paymentType,
                        titleId,
                        queryForNew,
                        queryForRenewals,
                        queryForCurrent,
                        queryForCancelled,
                        queryForSuspended}, callback, asyncState);
        }
        
        /// <remarks/>
        public SubscriptionEnumerateResults EndSubscriptionEnumerate(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SubscriptionEnumerateResults)(results[0]));
        }
        
        /// <remarks/>
        public void SubscriptionEnumerateAsync(ulong userPuid, ulong machinePuid, uint offerType, uint paymentType, uint titleId, bool queryForNew, bool queryForRenewals, bool queryForCurrent, bool queryForCancelled, bool queryForSuspended) {
            this.SubscriptionEnumerateAsync(userPuid, machinePuid, offerType, paymentType, titleId, queryForNew, queryForRenewals, queryForCurrent, queryForCancelled, queryForSuspended, null);
        }
        
        /// <remarks/>
        public void SubscriptionEnumerateAsync(ulong userPuid, ulong machinePuid, uint offerType, uint paymentType, uint titleId, bool queryForNew, bool queryForRenewals, bool queryForCurrent, bool queryForCancelled, bool queryForSuspended, object userState) {
            if ((this.SubscriptionEnumerateOperationCompleted == null)) {
                this.SubscriptionEnumerateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSubscriptionEnumerateOperationCompleted);
            }
            this.InvokeAsync("SubscriptionEnumerate", new object[] {
                        userPuid,
                        machinePuid,
                        offerType,
                        paymentType,
                        titleId,
                        queryForNew,
                        queryForRenewals,
                        queryForCurrent,
                        queryForCancelled,
                        queryForSuspended}, this.SubscriptionEnumerateOperationCompleted, userState);
        }
        
        private void OnSubscriptionEnumerateOperationCompleted(object arg) {
            if ((this.SubscriptionEnumerateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SubscriptionEnumerateCompleted(this, new SubscriptionEnumerateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/PurchaseBillingOffer", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void PurchaseBillingOffer(ulong userPuid, ulong machinePuid, ulong offerId, uint paymentType, string paymentInstrumentId, string billingToken) {
            this.Invoke("PurchaseBillingOffer", new object[] {
                        userPuid,
                        machinePuid,
                        offerId,
                        paymentType,
                        paymentInstrumentId,
                        billingToken});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPurchaseBillingOffer(ulong userPuid, ulong machinePuid, ulong offerId, uint paymentType, string paymentInstrumentId, string billingToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PurchaseBillingOffer", new object[] {
                        userPuid,
                        machinePuid,
                        offerId,
                        paymentType,
                        paymentInstrumentId,
                        billingToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndPurchaseBillingOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void PurchaseBillingOfferAsync(ulong userPuid, ulong machinePuid, ulong offerId, uint paymentType, string paymentInstrumentId, string billingToken) {
            this.PurchaseBillingOfferAsync(userPuid, machinePuid, offerId, paymentType, paymentInstrumentId, billingToken, null);
        }
        
        /// <remarks/>
        public void PurchaseBillingOfferAsync(ulong userPuid, ulong machinePuid, ulong offerId, uint paymentType, string paymentInstrumentId, string billingToken, object userState) {
            if ((this.PurchaseBillingOfferOperationCompleted == null)) {
                this.PurchaseBillingOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseBillingOfferOperationCompleted);
            }
            this.InvokeAsync("PurchaseBillingOffer", new object[] {
                        userPuid,
                        machinePuid,
                        offerId,
                        paymentType,
                        paymentInstrumentId,
                        billingToken}, this.PurchaseBillingOfferOperationCompleted, userState);
        }
        
        private void OnPurchaseBillingOfferOperationCompleted(object arg) {
            if ((this.PurchaseBillingOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseBillingOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:billing-data/PurchaseGamertag", RequestNamespace="urn:schemas-xbox-com:billing-data", ResponseNamespace="urn:schemas-xbox-com:billing-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public uint PurchaseGamertag(ulong userPuid, ulong machinePuid, System.Guid offerGuid, PaymentTypeEnum paymentType, string gamertag, string token) {
            object[] results = this.Invoke("PurchaseGamertag", new object[] {
                        userPuid,
                        machinePuid,
                        offerGuid,
                        paymentType,
                        gamertag,
                        token});
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPurchaseGamertag(ulong userPuid, ulong machinePuid, System.Guid offerGuid, PaymentTypeEnum paymentType, string gamertag, string token, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PurchaseGamertag", new object[] {
                        userPuid,
                        machinePuid,
                        offerGuid,
                        paymentType,
                        gamertag,
                        token}, callback, asyncState);
        }
        
        /// <remarks/>
        public uint EndPurchaseGamertag(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((uint)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseGamertagAsync(ulong userPuid, ulong machinePuid, System.Guid offerGuid, PaymentTypeEnum paymentType, string gamertag, string token) {
            this.PurchaseGamertagAsync(userPuid, machinePuid, offerGuid, paymentType, gamertag, token, null);
        }
        
        /// <remarks/>
        public void PurchaseGamertagAsync(ulong userPuid, ulong machinePuid, System.Guid offerGuid, PaymentTypeEnum paymentType, string gamertag, string token, object userState) {
            if ((this.PurchaseGamertagOperationCompleted == null)) {
                this.PurchaseGamertagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseGamertagOperationCompleted);
            }
            this.InvokeAsync("PurchaseGamertag", new object[] {
                        userPuid,
                        machinePuid,
                        offerGuid,
                        paymentType,
                        gamertag,
                        token}, this.PurchaseGamertagOperationCompleted, userState);
        }
        
        private void OnPurchaseGamertagOperationCompleted(object arg) {
            if ((this.PurchaseGamertagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseGamertagCompleted(this, new PurchaseGamertagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.FlagsAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public enum PaymentTypeEnum {
        
        /// <remarks/>
        CreditCard = 1,
        
        /// <remarks/>
        Token = 2,
        
        /// <remarks/>
        Points = 4,
        
        /// <remarks/>
        Wholesale = 8,
        
        /// <remarks/>
        Untrusted = 16,
        
        /// <remarks/>
        All = 32,
        
        /// <remarks/>
        NoTokens = 64,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class PurchaseStatus {
        
        private System.Guid offerIdField;
        
        private PurchaseStatusEnum statusField;
        
        /// <remarks/>
        public System.Guid offerId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public PurchaseStatusEnum status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public enum PurchaseStatusEnum {
        
        /// <remarks/>
        OfferIdNotFound,
        
        /// <remarks/>
        TransactionPending,
        
        /// <remarks/>
        TransactionSuccessful,
        
        /// <remarks/>
        TransactionFailed,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class PriceInfo {
        
        private uint paymentTypeField;
        
        private byte taxTypeField;
        
        private int wholePriceField;
        
        private int fractionalPriceField;
        
        private string priceTextField;
        
        /// <remarks/>
        public uint PaymentType {
            get {
                return this.paymentTypeField;
            }
            set {
                this.paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        public byte TaxType {
            get {
                return this.taxTypeField;
            }
            set {
                this.taxTypeField = value;
            }
        }
        
        /// <remarks/>
        public int WholePrice {
            get {
                return this.wholePriceField;
            }
            set {
                this.wholePriceField = value;
            }
        }
        
        /// <remarks/>
        public int FractionalPrice {
            get {
                return this.fractionalPriceField;
            }
            set {
                this.fractionalPriceField = value;
            }
        }
        
        /// <remarks/>
        public string PriceText {
            get {
                return this.priceTextField;
            }
            set {
                this.priceTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class SubscriptionInfo {
        
        private ulong offerIdField;
        
        private string offerNameField;
        
        private uint offerTypeField;
        
        private byte relationTypeField;
        
        private byte convertModeField;
        
        private string instanceIdField;
        
        private uint titleIdField;
        
        private uint titleCategoryField;
        
        private string titleNameField;
        
        private ushort gameRatingField;
        
        private byte durationField;
        
        private byte frequencyField;
        
        private byte tierProvidedField;
        
        private byte tierRequiredField;
        
        private string sellTextField;
        
        private ulong relatedOfferIdField;
        
        private ushort responseFlagsField;
        
        private int subscriptionStatusIdField;
        
        private PriceInfo priceField;
        
        /// <remarks/>
        public ulong OfferId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public string OfferName {
            get {
                return this.offerNameField;
            }
            set {
                this.offerNameField = value;
            }
        }
        
        /// <remarks/>
        public uint OfferType {
            get {
                return this.offerTypeField;
            }
            set {
                this.offerTypeField = value;
            }
        }
        
        /// <remarks/>
        public byte RelationType {
            get {
                return this.relationTypeField;
            }
            set {
                this.relationTypeField = value;
            }
        }
        
        /// <remarks/>
        public byte ConvertMode {
            get {
                return this.convertModeField;
            }
            set {
                this.convertModeField = value;
            }
        }
        
        /// <remarks/>
        public string InstanceId {
            get {
                return this.instanceIdField;
            }
            set {
                this.instanceIdField = value;
            }
        }
        
        /// <remarks/>
        public uint TitleId {
            get {
                return this.titleIdField;
            }
            set {
                this.titleIdField = value;
            }
        }
        
        /// <remarks/>
        public uint TitleCategory {
            get {
                return this.titleCategoryField;
            }
            set {
                this.titleCategoryField = value;
            }
        }
        
        /// <remarks/>
        public string TitleName {
            get {
                return this.titleNameField;
            }
            set {
                this.titleNameField = value;
            }
        }
        
        /// <remarks/>
        public ushort GameRating {
            get {
                return this.gameRatingField;
            }
            set {
                this.gameRatingField = value;
            }
        }
        
        /// <remarks/>
        public byte Duration {
            get {
                return this.durationField;
            }
            set {
                this.durationField = value;
            }
        }
        
        /// <remarks/>
        public byte Frequency {
            get {
                return this.frequencyField;
            }
            set {
                this.frequencyField = value;
            }
        }
        
        /// <remarks/>
        public byte TierProvided {
            get {
                return this.tierProvidedField;
            }
            set {
                this.tierProvidedField = value;
            }
        }
        
        /// <remarks/>
        public byte TierRequired {
            get {
                return this.tierRequiredField;
            }
            set {
                this.tierRequiredField = value;
            }
        }
        
        /// <remarks/>
        public string SellText {
            get {
                return this.sellTextField;
            }
            set {
                this.sellTextField = value;
            }
        }
        
        /// <remarks/>
        public ulong RelatedOfferId {
            get {
                return this.relatedOfferIdField;
            }
            set {
                this.relatedOfferIdField = value;
            }
        }
        
        /// <remarks/>
        public ushort ResponseFlags {
            get {
                return this.responseFlagsField;
            }
            set {
                this.responseFlagsField = value;
            }
        }
        
        /// <remarks/>
        public int SubscriptionStatusId {
            get {
                return this.subscriptionStatusIdField;
            }
            set {
                this.subscriptionStatusIdField = value;
            }
        }
        
        /// <remarks/>
        public PriceInfo Price {
            get {
                return this.priceField;
            }
            set {
                this.priceField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class SubscriptionEnumerateResults {
        
        private SubscriptionInfo[] subscriptionInfosField;
        
        private int offersTotalField;
        
        /// <remarks/>
        public SubscriptionInfo[] SubscriptionInfos {
            get {
                return this.subscriptionInfosField;
            }
            set {
                this.subscriptionInfosField = value;
            }
        }
        
        /// <remarks/>
        public int OffersTotal {
            get {
                return this.offersTotalField;
            }
            set {
                this.offersTotalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class XboxOfferInfo {
        
        private ulong offerIdField;
        
        private int offerTypeIdField;
        
        /// <remarks/>
        public ulong offerId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public int offerTypeId {
            get {
                return this.offerTypeIdField;
            }
            set {
                this.offerTypeIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class EmsOfferInfo {
        
        private System.Guid offerIdField;
        
        private System.Guid mediaIdField;
        
        private int mediaTypeField;
        
        /// <remarks/>
        public System.Guid offerId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid mediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public int mediaType {
            get {
                return this.mediaTypeField;
            }
            set {
                this.mediaTypeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class VerifyTokenResults {
        
        private EmsOfferInfo emsOfferInfoField;
        
        private XboxOfferInfo xboxOfferInfoField;
        
        /// <remarks/>
        public EmsOfferInfo emsOfferInfo {
            get {
                return this.emsOfferInfoField;
            }
            set {
                this.emsOfferInfoField = value;
            }
        }
        
        /// <remarks/>
        public XboxOfferInfo xboxOfferInfo {
            get {
                return this.xboxOfferInfoField;
            }
            set {
                this.xboxOfferInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OfferPrice))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(XRLObject2))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GamertagContentInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GamertagEnumerateResult))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(TypedMediaUrl))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(MediaInstanceUrl))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class WireData {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class OfferPrice : WireData {
        
        private uint paymentTypeField;
        
        private byte taxTypeField;
        
        private int wholePriceField;
        
        private int fractionalPriceField;
        
        private ushort priceTextLengthField;
        
        private string priceTextField;
        
        /// <remarks/>
        public uint paymentType {
            get {
                return this.paymentTypeField;
            }
            set {
                this.paymentTypeField = value;
            }
        }
        
        /// <remarks/>
        public byte taxType {
            get {
                return this.taxTypeField;
            }
            set {
                this.taxTypeField = value;
            }
        }
        
        /// <remarks/>
        public int wholePrice {
            get {
                return this.wholePriceField;
            }
            set {
                this.wholePriceField = value;
            }
        }
        
        /// <remarks/>
        public int fractionalPrice {
            get {
                return this.fractionalPriceField;
            }
            set {
                this.fractionalPriceField = value;
            }
        }
        
        /// <remarks/>
        public ushort priceTextLength {
            get {
                return this.priceTextLengthField;
            }
            set {
                this.priceTextLengthField = value;
            }
        }
        
        /// <remarks/>
        public string priceText {
            get {
                return this.priceTextField;
            }
            set {
                this.priceTextField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GamertagContentInfo))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(GamertagEnumerateResult))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class XRLObject2 : WireData {
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class GamertagContentInfo : XRLObject2 {
        
        private System.Guid offerIDField;
        
        private ushort offerNameLengthField;
        
        private string offerNameField;
        
        private uint offerTypeField;
        
        private int sellTextLengthField;
        
        private string sellTextField;
        
        private System.DateTime maxStartDateField;
        
        private byte pricesLengthField;
        
        private OfferPrice[] pricesField;
        
        /// <remarks/>
        public System.Guid offerID {
            get {
                return this.offerIDField;
            }
            set {
                this.offerIDField = value;
            }
        }
        
        /// <remarks/>
        public ushort offerNameLength {
            get {
                return this.offerNameLengthField;
            }
            set {
                this.offerNameLengthField = value;
            }
        }
        
        /// <remarks/>
        public string offerName {
            get {
                return this.offerNameField;
            }
            set {
                this.offerNameField = value;
            }
        }
        
        /// <remarks/>
        public uint offerType {
            get {
                return this.offerTypeField;
            }
            set {
                this.offerTypeField = value;
            }
        }
        
        /// <remarks/>
        public int sellTextLength {
            get {
                return this.sellTextLengthField;
            }
            set {
                this.sellTextLengthField = value;
            }
        }
        
        /// <remarks/>
        public string sellText {
            get {
                return this.sellTextField;
            }
            set {
                this.sellTextField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime maxStartDate {
            get {
                return this.maxStartDateField;
            }
            set {
                this.maxStartDateField = value;
            }
        }
        
        /// <remarks/>
        public byte pricesLength {
            get {
                return this.pricesLengthField;
            }
            set {
                this.pricesLengthField = value;
            }
        }
        
        /// <remarks/>
        public OfferPrice[] prices {
            get {
                return this.pricesField;
            }
            set {
                this.pricesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class GamertagEnumerateResult : XRLObject2 {
        
        private ushort offersReturnedField;
        
        private GamertagContentInfo[] infosField;
        
        private uint offersTotalField;
        
        /// <remarks/>
        public ushort offersReturned {
            get {
                return this.offersReturnedField;
            }
            set {
                this.offersReturnedField = value;
            }
        }
        
        /// <remarks/>
        public GamertagContentInfo[] infos {
            get {
                return this.infosField;
            }
            set {
                this.infosField = value;
            }
        }
        
        /// <remarks/>
        public uint offersTotal {
            get {
                return this.offersTotalField;
            }
            set {
                this.offersTotalField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class TypedMediaUrl : WireData {
        
        private int typeField;
        
        private uint lengthField;
        
        private string urlField;
        
        /// <remarks/>
        public int type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        public uint length {
            get {
                return this.lengthField;
            }
            set {
                this.lengthField = value;
            }
        }
        
        /// <remarks/>
        public string url {
            get {
                return this.urlField;
            }
            set {
                this.urlField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:billing-data")]
    public partial class MediaInstanceUrl : WireData {
        
        private System.Guid mediaIdField;
        
        private System.Guid mediaInstanceIdField;
        
        private ulong packageSizeField;
        
        private ulong installSizeField;
        
        private byte[] symKeyField;
        
        private byte[] pubKeyField;
        
        private uint packageTypeField;
        
        private uint fileCountField;
        
        private TypedMediaUrl[] urlsField;
        
        /// <remarks/>
        public System.Guid mediaId {
            get {
                return this.mediaIdField;
            }
            set {
                this.mediaIdField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid mediaInstanceId {
            get {
                return this.mediaInstanceIdField;
            }
            set {
                this.mediaInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public ulong packageSize {
            get {
                return this.packageSizeField;
            }
            set {
                this.packageSizeField = value;
            }
        }
        
        /// <remarks/>
        public ulong installSize {
            get {
                return this.installSizeField;
            }
            set {
                this.installSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] symKey {
            get {
                return this.symKeyField;
            }
            set {
                this.symKeyField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] pubKey {
            get {
                return this.pubKeyField;
            }
            set {
                this.pubKeyField = value;
            }
        }
        
        /// <remarks/>
        public uint packageType {
            get {
                return this.packageTypeField;
            }
            set {
                this.packageTypeField = value;
            }
        }
        
        /// <remarks/>
        public uint fileCount {
            get {
                return this.fileCountField;
            }
            set {
                this.fileCountField = value;
            }
        }
        
        /// <remarks/>
        public TypedMediaUrl[] urls {
            get {
                return this.urlsField;
            }
            set {
                this.urlsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TestConnectionCompletedEventHandler(object sender, TestConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PurchaseMediaOffersCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPurchaseStatusCompletedEventHandler(object sender, GetPurchaseStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPurchaseStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPurchaseStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public PurchaseStatus[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((PurchaseStatus[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void FindMediaInstanceUrlsCompletedEventHandler(object sender, FindMediaInstanceUrlsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindMediaInstanceUrlsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FindMediaInstanceUrlsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MediaInstanceUrl[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MediaInstanceUrl[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void VerifyTokenCompletedEventHandler(object sender, VerifyTokenCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class VerifyTokenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal VerifyTokenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public VerifyTokenResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((VerifyTokenResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelSubscriptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GamertagEnumerateCompletedEventHandler(object sender, GamertagEnumerateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GamertagEnumerateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GamertagEnumerateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GamertagEnumerateResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GamertagEnumerateResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SubscriptionEnumerateCompletedEventHandler(object sender, SubscriptionEnumerateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SubscriptionEnumerateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SubscriptionEnumerateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SubscriptionEnumerateResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SubscriptionEnumerateResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PurchaseBillingOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PurchaseGamertagCompletedEventHandler(object sender, PurchaseGamertagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseGamertagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseGamertagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public uint Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((uint)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\Accounts.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;

[assembly: XomIisInstallerAttribute( Interface.svctunnel )]

namespace xonline.server.svctunnel.fd
{
    
    public class UserInfo
    {
        public ulong userId;
        public string gamertag;
        public bool optOut;
        public string firstName;
        public string lastName;
        public string emailAddress;
        public string streetAddress;
        public string city;
        public string state;
        public string postalCode;
        public byte countryId;
    }
    
    [WebService(Namespace="http://svctunnel.xboxlive.com/Accounts/")]
    public class Accounts : System.Web.Services.WebService
    {   
        [WebMethod]
        public UserInfo GetUserInfo(ulong userId)
        {
            GetUserInfoCounters counters = new GetUserInfoCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_USER_INFO_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);


                UserInfo info = new UserInfo();
                info.userId = userId;

                info.gamertag = XCache.LookupGamerTag(userId);


                GetUserInfoRequest req = new GetUserInfoRequest();
                req.userPuid = userId;
                req.machinePuid = 0;
                req.titleId = XOn.DASH_TITLE_ID;

                GetUserInfoResponse resp = new GetUserInfoResponse();
                byte[] respData;

                string authHeader = new HTTPAuthData(0, 0, 0, userId, XOn.DASH_TITLE_ID, (uint)XOService.User_Account, 0).GetBase64EncodedString();
                
                hr = XRLUtil.PostXrlRequest(XOService.User_Account, req.Xrl, -1, authHeader, (byte[])req, out respData);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_0,
                            "Getting user account info returned unexpected error " + hr);
                }

                resp.ReadBytes(respData);

                info.countryId = resp.countryId;
                info.optOut = (resp.partnerOptIn == 0 ? true : false);
                info.firstName = resp.firstName;
                info.lastName = resp.lastName;
                info.streetAddress = resp.addressInfo.street1;
                if (resp.addressInfo.street2 != "") info.streetAddress += "\n" + resp.addressInfo.street2;
                info.city = resp.addressInfo.city;
                info.state = resp.addressInfo.state;
                info.postalCode = resp.addressInfo.postalCode;
                info.emailAddress = resp.email;

                return info;

            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_4, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GUI", 
                              hr.ToString(),
                              userId.ToString("x16")
                         }));  
                
                // stop perf counters         

                counters.EndRequest(HResult.Failed(hr));
            }
            
        }
        
        [WebMethod]
        public void SendUserFeedback(uint titleId, ulong userId, ulong toUserId, uint feedbackType, string nickname)
        {
            SendUserFeedbackCounters counters = new SendUserFeedbackCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_SEND_USER_FEEDBACK_ERROR;
            
            try
            {   
                CallSource.Check(VirtualInterface.svctunnel);
                
                FeedbackRequest req = new FeedbackRequest();
                
                req.uiTitleID = titleId;
                req.ulSendPUID = userId;
                req.ulTargetPUID = toUserId;
                req.bFeedbackType = (byte)feedbackType;
                req.bTextSize = (byte)(nickname == null ? 0 : nickname.Length);
                req.szText = nickname;
                
                hr = XRLUtil.PostXrlRequest(XOService.Feedback, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_1, 
                            "Sending feedback returned unexpected error " + hr);
                }    
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_5, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "FBK", 
                              hr.ToString(),
                              userId.ToString("x16"),
                              toUserId.ToString("x16"),
                              feedbackType.ToString("x"),
                              nickname
                         }));  
                
                // stop perf counters         

                counters.EndRequest(HResult.Failed(hr));
            }
            
        }
        
        [WebMethod]
        public string GetGamertag(ulong userId)
        {
            
            GetGamertagCounters counters = new GetGamertagCounters();
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_GAMERTAG_ERROR;
            string gamertag = "";
            
            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                gamertag = XCache.LookupGamerTag(userId);
                STUtil.VerifyParam(gamertag != XCache.InvalidGamertag, "Invalid userId!");
                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_6, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GGT", 
                              hr.ToString(),
                              userId.ToString("x16"),
                              gamertag
                         }));  
                
                counters.EndRequest(HResult.Failed(hr));
            }
            
            return gamertag;
        }
        
        
        [WebMethod]
        public ulong GetUserId(string gamertag)
        {
            GetUserIdCounters counters = new GetUserIdCounters();
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_USER_ID_ERROR;
            ulong userId = 0;
            
            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                userId = XCache.LookupPUID(gamertag);

                STUtil.VerifyParam(userId != 0, "Invalid gamertag!");
                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_7, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GID", 
                              hr.ToString(),
                              gamertag,
                              userId.ToString("x16")
                         }));  
                
                counters.EndRequest(HResult.Failed(hr));
            }
            
            return userId;
        }
        
        
        [WebMethod]
        public string[] GetGamertagsFromList(ulong[] userIds)
        {
            
            GetGamertagsFromListCounters counters = new GetGamertagsFromListCounters();
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_GAMERTAG_ERROR;
            string[] gamertags = null;
            
            try
            {   
                CallSource.Check(VirtualInterface.svctunnel);

                gamertags = XCache.LookupGamerTags(userIds);

                for (int i = 0; i < gamertags.Length; i++)
                {
                    if (XCache.IsInvalidGamertag(gamertags[i])) gamertags[i] = "";
                }
                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_8, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GTL", 
                              hr.ToString(),
                              userIds.Length.ToString("x")
                         }));  
                
                counters.EndRequest(HResult.Failed(hr));
            }
            
            return gamertags;
        }
        
        
        [WebMethod]
        public ulong[] GetUserIdsFromList(string[] gamertags)
        {
            GetUserIdsFromListCounters counters = new GetUserIdsFromListCounters();
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_USER_ID_ERROR;
            ulong[] userIds = null;
            
            try
            {   
                CallSource.Check(VirtualInterface.svctunnel);

                userIds = XCache.LookupPUIDs(gamertags);
                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_9, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GID", 
                              hr.ToString(),
                              gamertags.Length.ToString("x")
                         }));  
                
                counters.EndRequest(HResult.Failed(hr));
            }
            
            return userIds;
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\monitor.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;
using System.Threading;
using System.Security.Principal;
using System.Runtime.InteropServices;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;

namespace xonline.server.svctunnel.fd
{
    public class HeartbeatMonitor
    {
        private static TimeSpan _timeout = TimeSpan.FromMinutes(30);
        private static Timer _timer = null;

        
        public static int HeartbeatTimeout
        {
            get { return Config.GetIntSetting(Setting.svct_heartbeatTimeout); }
        }
        
        
        public static void Start()
        {
            if (HeartbeatTimeout != 0)
                _timer = new Timer(new TimerCallback(TimerProc), null, _timeout, _timeout);
        }
        
        public static void Dispose()
        {
            if (_timer != null)
            {
                _timer.Dispose();
                _timer = null;
            }
        }
        
        public static void ResetTimer()
        {
            if (HeartbeatTimeout != 0) 
                _timer.Change(_timeout, _timeout);
        }
        
        
        public static void TimerProc(object o)
        {
          Xom.NtEvent(XEvent.Id.SVCTUNNEL_PARTNER_0, "No heartbeat calls have been received in the " + 
                        "last " + _timeout.TotalMinutes + " minutes!   This likely indiciates a " + 
                        "connectivity problem with the expected caller of the service.");
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\accountscntrs.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;



namespace xonline.server.svctunnel.fd
{
    public class GetUserInfoCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetUserInfoCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetUserInfoCountersCategory.Current().RequestsPerSecond.Increment();
            GetUserInfoCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetUserInfoCountersCategory.Current().FailuresPerSecond,
                GetUserInfoCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetUserInfoCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetUserInfoCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetUserInfoCountersCategory.Current().FailuresPerSecond.Increment();
                GetUserInfoCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetUserInfo", "Service Tunnel: GetUserInfo" )]
	public class GetUserInfoCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetUserInfoCountersCategory _instance = new GetUserInfoCountersCategory();
        static public GetUserInfoCountersCategory Current()
        {
            return (GetUserInfoCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetUserInfo request counters

		[XomPerformanceCounterAttr(
			"GetUserInfo requests/sec", 
			"GetUserInfo requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetUserInfo total", 
			"Total GetUserInfo requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetUserInfo failures/sec", 
			"Number of unsuccessful results returned by GetUserInfo per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetUserInfo total failures", 
			"Total number unsuccessful results returned by GetUserInfo in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetUserInfo avg. execution time", 
			"GetUserInfo Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class SendUserFeedbackCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public SendUserFeedbackCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            SendUserFeedbackCountersCategory.Current().RequestsPerSecond.Increment();
            SendUserFeedbackCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                SendUserFeedbackCountersCategory.Current().FailuresPerSecond,
                SendUserFeedbackCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            SendUserFeedbackCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            SendUserFeedbackCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                SendUserFeedbackCountersCategory.Current().FailuresPerSecond.Increment();
                SendUserFeedbackCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: SendUserFeedback", "Service Tunnel: SendUserFeedback" )]
	public class SendUserFeedbackCountersCategory : XomPerformanceCounterCategory
	{
		
        static public SendUserFeedbackCountersCategory _instance = new SendUserFeedbackCountersCategory();
        static public SendUserFeedbackCountersCategory Current()
        {
            return (SendUserFeedbackCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // SendUserFeedback request counters

		[XomPerformanceCounterAttr(
			"SendUserFeedback requests/sec", 
			"SendUserFeedback requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"SendUserFeedback total", 
			"Total SendUserFeedback requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"SendUserFeedback failures/sec", 
			"Number of unsuccessful results returned by SendUserFeedback per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"SendUserFeedback total failures", 
			"Total number unsuccessful results returned by SendUserFeedback in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"SendUserFeedback avg. execution time", 
			"SendUserFeedback Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}

    public class GetGamertagCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetGamertagCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetGamertagCountersCategory.Current().RequestsPerSecond.Increment();
            GetGamertagCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetGamertagCountersCategory.Current().FailuresPerSecond,
                GetGamertagCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetGamertagCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetGamertagCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetGamertagCountersCategory.Current().FailuresPerSecond.Increment();
                GetGamertagCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetGamertag", "Service Tunnel: GetGamertag" )]
	public class GetGamertagCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetGamertagCountersCategory _instance = new GetGamertagCountersCategory();
        static public GetGamertagCountersCategory Current()
        {
            return (GetGamertagCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetGamertag request counters

		[XomPerformanceCounterAttr(
			"GetGamertag requests/sec", 
			"GetGamertag requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetGamertag total", 
			"Total GetGamertag requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetGamertag failures/sec", 
			"Number of unsuccessful results returned by GetGamertag per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetGamertag total failures", 
			"Total number unsuccessful results returned by GetGamertag in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetGamertag avg. execution time", 
			"GetGamertag Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}

    public class GetUserIdCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetUserIdCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetUserIdCountersCategory.Current().RequestsPerSecond.Increment();
            GetUserIdCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetUserIdCountersCategory.Current().FailuresPerSecond,
                GetUserIdCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetUserIdCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetUserIdCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetUserIdCountersCategory.Current().FailuresPerSecond.Increment();
                GetUserIdCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetUserId", "Service Tunnel: GetUserId" )]
	public class GetUserIdCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetUserIdCountersCategory _instance = new GetUserIdCountersCategory();
        static public GetUserIdCountersCategory Current()
        {
            return (GetUserIdCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetUserId request counters

		[XomPerformanceCounterAttr(
			"GetUserId requests/sec", 
			"GetUserId requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetUserId total", 
			"Total GetUserId requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetUserId failures/sec", 
			"Number of unsuccessful results returned by GetUserId per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetUserId total failures", 
			"Total number unsuccessful results returned by GetUserId in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetUserId avg. execution time", 
			"GetUserId Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class GetUserIdsFromListCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetUserIdsFromListCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetUserIdsFromListCountersCategory.Current().RequestsPerSecond.Increment();
            GetUserIdsFromListCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetUserIdsFromListCountersCategory.Current().FailuresPerSecond,
                GetUserIdsFromListCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetUserIdsFromListCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetUserIdsFromListCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetUserIdsFromListCountersCategory.Current().FailuresPerSecond.Increment();
                GetUserIdsFromListCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetUserIdsFromList", "Service Tunnel: GetUserIdsFromList" )]
	public class GetUserIdsFromListCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetUserIdsFromListCountersCategory _instance = new GetUserIdsFromListCountersCategory();
        static public GetUserIdsFromListCountersCategory Current()
        {
            return (GetUserIdsFromListCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetUserIdsFromList request counters

		[XomPerformanceCounterAttr(
			"GetUserIdsFromList requests/sec", 
			"GetUserIdsFromList requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetUserIdsFromList total", 
			"Total GetUserIdsFromList requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetUserIdsFromList failures/sec", 
			"Number of unsuccessful results returned by GetUserIdsFromList per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetUserIdsFromList total failures", 
			"Total number unsuccessful results returned by GetUserIdsFromList in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetUserIdsFromList avg. execution time", 
			"GetUserIdsFromList Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}    
        public class GetGamertagsFromListCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetGamertagsFromListCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetGamertagsFromListCountersCategory.Current().RequestsPerSecond.Increment();
            GetGamertagsFromListCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetGamertagsFromListCountersCategory.Current().FailuresPerSecond,
                GetGamertagsFromListCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetGamertagsFromListCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetGamertagsFromListCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetGamertagsFromListCountersCategory.Current().FailuresPerSecond.Increment();
                GetGamertagsFromListCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetGamertagsFromList", "Service Tunnel: GetGamertagsFromList" )]
	public class GetGamertagsFromListCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetGamertagsFromListCountersCategory _instance = new GetGamertagsFromListCountersCategory();
        static public GetGamertagsFromListCountersCategory Current()
        {
            return (GetGamertagsFromListCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetGamertagsFromList request counters

		[XomPerformanceCounterAttr(
			"GetGamertagsFromList requests/sec", 
			"GetGamertagsFromList requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetGamertagsFromList total", 
			"Total GetGamertagsFromList requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetGamertagsFromList failures/sec", 
			"Number of unsuccessful results returned by GetGamertagsFromList per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetGamertagsFromList total failures", 
			"Total number unsuccessful results returned by GetGamertagsFromList in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetGamertagsFromList avg. execution time", 
			"GetGamertagsFromList Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\sts\test\StsFDTest\wsdl\XuacsUserAccountSoap.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace StsTest.WebService.Soap.Xuacs {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UserAccountSoap", Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class UserAccount : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AcceptTermsOfServiceOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddCreditCardOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPointsBalanceOperationCompleted;
        
        private System.Threading.SendOrPostCallback SignInOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConsoleApplicationsGetByMachinePuidOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateMobileAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GenerateGamertagOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPaymentInstrumentsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSupportedCountriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUserAuthorizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GamertagHistoryGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserHistoryGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback MachineHistoryGetOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestConnectionOperationCompleted;
        
        private System.Threading.SendOrPostCallback UserAccountAuthorizeOperationCompleted;
        
        /// <remarks/>
        public UserAccount() {
            this.Url = "http://johnmcp-xblob:10050/xuacs/useraccount.asmx";
        }
        
        /// <remarks/>
        public event AcceptTermsOfServiceCompletedEventHandler AcceptTermsOfServiceCompleted;
        
        /// <remarks/>
        public event AddCreditCardCompletedEventHandler AddCreditCardCompleted;
        
        /// <remarks/>
        public event GetPointsBalanceCompletedEventHandler GetPointsBalanceCompleted;
        
        /// <remarks/>
        public event SignInCompletedEventHandler SignInCompleted;
        
        /// <remarks/>
        public event ConsoleApplicationsGetByMachinePuidCompletedEventHandler ConsoleApplicationsGetByMachinePuidCompleted;
        
        /// <remarks/>
        public event CreateMobileAccountCompletedEventHandler CreateMobileAccountCompleted;
        
        /// <remarks/>
        public event GenerateGamertagCompletedEventHandler GenerateGamertagCompleted;
        
        /// <remarks/>
        public event GetPaymentInstrumentsCompletedEventHandler GetPaymentInstrumentsCompleted;
        
        /// <remarks/>
        public event GetSupportedCountriesCompletedEventHandler GetSupportedCountriesCompleted;
        
        /// <remarks/>
        public event GetUserAuthorizationCompletedEventHandler GetUserAuthorizationCompleted;
        
        /// <remarks/>
        public event GamertagHistoryGetCompletedEventHandler GamertagHistoryGetCompleted;
        
        /// <remarks/>
        public event UserHistoryGetCompletedEventHandler UserHistoryGetCompleted;
        
        /// <remarks/>
        public event MachineHistoryGetCompletedEventHandler MachineHistoryGetCompleted;
        
        /// <remarks/>
        public event TestConnectionCompletedEventHandler TestConnectionCompleted;
        
        /// <remarks/>
        public event UserAccountAuthorizeCompletedEventHandler UserAccountAuthorizeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/AcceptTermsOfService", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AcceptTermsOfService(ulong userPuid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] signedOwnerPassportPuid, ServiceTypeEnum serviceType) {
            this.Invoke("AcceptTermsOfService", new object[] {
                        userPuid,
                        signedOwnerPassportPuid,
                        serviceType});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAcceptTermsOfService(ulong userPuid, byte[] signedOwnerPassportPuid, ServiceTypeEnum serviceType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AcceptTermsOfService", new object[] {
                        userPuid,
                        signedOwnerPassportPuid,
                        serviceType}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAcceptTermsOfService(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AcceptTermsOfServiceAsync(ulong userPuid, byte[] signedOwnerPassportPuid, ServiceTypeEnum serviceType) {
            this.AcceptTermsOfServiceAsync(userPuid, signedOwnerPassportPuid, serviceType, null);
        }
        
        /// <remarks/>
        public void AcceptTermsOfServiceAsync(ulong userPuid, byte[] signedOwnerPassportPuid, ServiceTypeEnum serviceType, object userState) {
            if ((this.AcceptTermsOfServiceOperationCompleted == null)) {
                this.AcceptTermsOfServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAcceptTermsOfServiceOperationCompleted);
            }
            this.InvokeAsync("AcceptTermsOfService", new object[] {
                        userPuid,
                        signedOwnerPassportPuid,
                        serviceType}, this.AcceptTermsOfServiceOperationCompleted, userState);
        }
        
        private void OnAcceptTermsOfServiceOperationCompleted(object arg) {
            if ((this.AcceptTermsOfServiceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AcceptTermsOfServiceCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/AddCreditCard", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public AddCreditCardResults AddCreditCard(
                    ulong userPuid, 
                    ulong machinePuid, 
                    string addressStreet1, 
                    string addressStreet2, 
                    string addressCity, 
                    string addressDistrict, 
                    string addressState, 
                    string addressPostalCode, 
                    string phonePrefix, 
                    string phoneNumber, 
                    string phoneExtension, 
                    byte cardType, 
                    string accountHolderName, 
                    string accountNumber, 
                    string cardVerificationNumber, 
                    string expirationDate) {
            object[] results = this.Invoke("AddCreditCard", new object[] {
                        userPuid,
                        machinePuid,
                        addressStreet1,
                        addressStreet2,
                        addressCity,
                        addressDistrict,
                        addressState,
                        addressPostalCode,
                        phonePrefix,
                        phoneNumber,
                        phoneExtension,
                        cardType,
                        accountHolderName,
                        accountNumber,
                        cardVerificationNumber,
                        expirationDate});
            return ((AddCreditCardResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddCreditCard(
                    ulong userPuid, 
                    ulong machinePuid, 
                    string addressStreet1, 
                    string addressStreet2, 
                    string addressCity, 
                    string addressDistrict, 
                    string addressState, 
                    string addressPostalCode, 
                    string phonePrefix, 
                    string phoneNumber, 
                    string phoneExtension, 
                    byte cardType, 
                    string accountHolderName, 
                    string accountNumber, 
                    string cardVerificationNumber, 
                    string expirationDate, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return this.BeginInvoke("AddCreditCard", new object[] {
                        userPuid,
                        machinePuid,
                        addressStreet1,
                        addressStreet2,
                        addressCity,
                        addressDistrict,
                        addressState,
                        addressPostalCode,
                        phonePrefix,
                        phoneNumber,
                        phoneExtension,
                        cardType,
                        accountHolderName,
                        accountNumber,
                        cardVerificationNumber,
                        expirationDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public AddCreditCardResults EndAddCreditCard(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((AddCreditCardResults)(results[0]));
        }
        
        /// <remarks/>
        public void AddCreditCardAsync(
                    ulong userPuid, 
                    ulong machinePuid, 
                    string addressStreet1, 
                    string addressStreet2, 
                    string addressCity, 
                    string addressDistrict, 
                    string addressState, 
                    string addressPostalCode, 
                    string phonePrefix, 
                    string phoneNumber, 
                    string phoneExtension, 
                    byte cardType, 
                    string accountHolderName, 
                    string accountNumber, 
                    string cardVerificationNumber, 
                    string expirationDate) {
            this.AddCreditCardAsync(userPuid, machinePuid, addressStreet1, addressStreet2, addressCity, addressDistrict, addressState, addressPostalCode, phonePrefix, phoneNumber, phoneExtension, cardType, accountHolderName, accountNumber, cardVerificationNumber, expirationDate, null);
        }
        
        /// <remarks/>
        public void AddCreditCardAsync(
                    ulong userPuid, 
                    ulong machinePuid, 
                    string addressStreet1, 
                    string addressStreet2, 
                    string addressCity, 
                    string addressDistrict, 
                    string addressState, 
                    string addressPostalCode, 
                    string phonePrefix, 
                    string phoneNumber, 
                    string phoneExtension, 
                    byte cardType, 
                    string accountHolderName, 
                    string accountNumber, 
                    string cardVerificationNumber, 
                    string expirationDate, 
                    object userState) {
            if ((this.AddCreditCardOperationCompleted == null)) {
                this.AddCreditCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddCreditCardOperationCompleted);
            }
            this.InvokeAsync("AddCreditCard", new object[] {
                        userPuid,
                        machinePuid,
                        addressStreet1,
                        addressStreet2,
                        addressCity,
                        addressDistrict,
                        addressState,
                        addressPostalCode,
                        phonePrefix,
                        phoneNumber,
                        phoneExtension,
                        cardType,
                        accountHolderName,
                        accountNumber,
                        cardVerificationNumber,
                        expirationDate}, this.AddCreditCardOperationCompleted, userState);
        }
        
        private void OnAddCreditCardOperationCompleted(object arg) {
            if ((this.AddCreditCardCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddCreditCardCompleted(this, new AddCreditCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/GetPointsBalance", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetPointsBalanceResults GetPointsBalance(ulong userPuid) {
            object[] results = this.Invoke("GetPointsBalance", new object[] {
                        userPuid});
            return ((GetPointsBalanceResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPointsBalance(ulong userPuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPointsBalance", new object[] {
                        userPuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetPointsBalanceResults EndGetPointsBalance(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetPointsBalanceResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetPointsBalanceAsync(ulong userPuid) {
            this.GetPointsBalanceAsync(userPuid, null);
        }
        
        /// <remarks/>
        public void GetPointsBalanceAsync(ulong userPuid, object userState) {
            if ((this.GetPointsBalanceOperationCompleted == null)) {
                this.GetPointsBalanceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPointsBalanceOperationCompleted);
            }
            this.InvokeAsync("GetPointsBalance", new object[] {
                        userPuid}, this.GetPointsBalanceOperationCompleted, userState);
        }
        
        private void OnGetPointsBalanceOperationCompleted(object arg) {
            if ((this.GetPointsBalanceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPointsBalanceCompleted(this, new GetPointsBalanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/SignIn", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SignInResults SignIn() {
            object[] results = this.Invoke("SignIn", new object[0]);
            return ((SignInResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSignIn(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SignIn", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public SignInResults EndSignIn(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SignInResults)(results[0]));
        }
        
        /// <remarks/>
        public void SignInAsync() {
            this.SignInAsync(null);
        }
        
        /// <remarks/>
        public void SignInAsync(object userState) {
            if ((this.SignInOperationCompleted == null)) {
                this.SignInOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSignInOperationCompleted);
            }
            this.InvokeAsync("SignIn", new object[0], this.SignInOperationCompleted, userState);
        }
        
        private void OnSignInOperationCompleted(object arg) {
            if ((this.SignInCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SignInCompleted(this, new SignInCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/ConsoleApplicationsGetByMachinePuid", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ConsoleApplications ConsoleApplicationsGetByMachinePuid(ulong machinePuid) {
            object[] results = this.Invoke("ConsoleApplicationsGetByMachinePuid", new object[] {
                        machinePuid});
            return ((ConsoleApplications)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleApplicationsGetByMachinePuid(ulong machinePuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleApplicationsGetByMachinePuid", new object[] {
                        machinePuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConsoleApplications EndConsoleApplicationsGetByMachinePuid(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConsoleApplications)(results[0]));
        }
        
        /// <remarks/>
        public void ConsoleApplicationsGetByMachinePuidAsync(ulong machinePuid) {
            this.ConsoleApplicationsGetByMachinePuidAsync(machinePuid, null);
        }
        
        /// <remarks/>
        public void ConsoleApplicationsGetByMachinePuidAsync(ulong machinePuid, object userState) {
            if ((this.ConsoleApplicationsGetByMachinePuidOperationCompleted == null)) {
                this.ConsoleApplicationsGetByMachinePuidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConsoleApplicationsGetByMachinePuidOperationCompleted);
            }
            this.InvokeAsync("ConsoleApplicationsGetByMachinePuid", new object[] {
                        machinePuid}, this.ConsoleApplicationsGetByMachinePuidOperationCompleted, userState);
        }
        
        private void OnConsoleApplicationsGetByMachinePuidOperationCompleted(object arg) {
            if ((this.ConsoleApplicationsGetByMachinePuidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConsoleApplicationsGetByMachinePuidCompleted(this, new ConsoleApplicationsGetByMachinePuidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/CreateMobileAccount", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateMobileAccount(ulong userPuid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] reserved, ulong machinePuid, string gamertag, byte countryId, ushort languageId, System.DateTime birthDate) {
            this.Invoke("CreateMobileAccount", new object[] {
                        userPuid,
                        reserved,
                        machinePuid,
                        gamertag,
                        countryId,
                        languageId,
                        birthDate});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateMobileAccount(ulong userPuid, byte[] reserved, ulong machinePuid, string gamertag, byte countryId, ushort languageId, System.DateTime birthDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateMobileAccount", new object[] {
                        userPuid,
                        reserved,
                        machinePuid,
                        gamertag,
                        countryId,
                        languageId,
                        birthDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateMobileAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateMobileAccountAsync(ulong userPuid, byte[] reserved, ulong machinePuid, string gamertag, byte countryId, ushort languageId, System.DateTime birthDate) {
            this.CreateMobileAccountAsync(userPuid, reserved, machinePuid, gamertag, countryId, languageId, birthDate, null);
        }
        
        /// <remarks/>
        public void CreateMobileAccountAsync(ulong userPuid, byte[] reserved, ulong machinePuid, string gamertag, byte countryId, ushort languageId, System.DateTime birthDate, object userState) {
            if ((this.CreateMobileAccountOperationCompleted == null)) {
                this.CreateMobileAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateMobileAccountOperationCompleted);
            }
            this.InvokeAsync("CreateMobileAccount", new object[] {
                        userPuid,
                        reserved,
                        machinePuid,
                        gamertag,
                        countryId,
                        languageId,
                        birthDate}, this.CreateMobileAccountOperationCompleted, userState);
        }
        
        private void OnCreateMobileAccountOperationCompleted(object arg) {
            if ((this.CreateMobileAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateMobileAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/GenerateGamertag", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GenerateGamertag(string seed, ulong machinePuid, GamertagSuggestionType gamertagSuggestionType) {
            object[] results = this.Invoke("GenerateGamertag", new object[] {
                        seed,
                        machinePuid,
                        gamertagSuggestionType});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGenerateGamertag(string seed, ulong machinePuid, GamertagSuggestionType gamertagSuggestionType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GenerateGamertag", new object[] {
                        seed,
                        machinePuid,
                        gamertagSuggestionType}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGenerateGamertag(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GenerateGamertagAsync(string seed, ulong machinePuid, GamertagSuggestionType gamertagSuggestionType) {
            this.GenerateGamertagAsync(seed, machinePuid, gamertagSuggestionType, null);
        }
        
        /// <remarks/>
        public void GenerateGamertagAsync(string seed, ulong machinePuid, GamertagSuggestionType gamertagSuggestionType, object userState) {
            if ((this.GenerateGamertagOperationCompleted == null)) {
                this.GenerateGamertagOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGenerateGamertagOperationCompleted);
            }
            this.InvokeAsync("GenerateGamertag", new object[] {
                        seed,
                        machinePuid,
                        gamertagSuggestionType}, this.GenerateGamertagOperationCompleted, userState);
        }
        
        private void OnGenerateGamertagOperationCompleted(object arg) {
            if ((this.GenerateGamertagCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GenerateGamertagCompleted(this, new GenerateGamertagCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/GetPaymentInstruments", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public GetPaymentInstrumentResults GetPaymentInstruments(ulong userPuid, ulong machinePuid) {
            object[] results = this.Invoke("GetPaymentInstruments", new object[] {
                        userPuid,
                        machinePuid});
            return ((GetPaymentInstrumentResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetPaymentInstruments(ulong userPuid, ulong machinePuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetPaymentInstruments", new object[] {
                        userPuid,
                        machinePuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetPaymentInstrumentResults EndGetPaymentInstruments(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetPaymentInstrumentResults)(results[0]));
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsAsync(ulong userPuid, ulong machinePuid) {
            this.GetPaymentInstrumentsAsync(userPuid, machinePuid, null);
        }
        
        /// <remarks/>
        public void GetPaymentInstrumentsAsync(ulong userPuid, ulong machinePuid, object userState) {
            if ((this.GetPaymentInstrumentsOperationCompleted == null)) {
                this.GetPaymentInstrumentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentInstrumentsOperationCompleted);
            }
            this.InvokeAsync("GetPaymentInstruments", new object[] {
                        userPuid,
                        machinePuid}, this.GetPaymentInstrumentsOperationCompleted, userState);
        }
        
        private void OnGetPaymentInstrumentsOperationCompleted(object arg) {
            if ((this.GetPaymentInstrumentsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentInstrumentsCompleted(this, new GetPaymentInstrumentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/GetSupportedCountries", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public CountryInfo[] GetSupportedCountries(byte serviceType, byte platformType) {
            object[] results = this.Invoke("GetSupportedCountries", new object[] {
                        serviceType,
                        platformType});
            return ((CountryInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSupportedCountries(byte serviceType, byte platformType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSupportedCountries", new object[] {
                        serviceType,
                        platformType}, callback, asyncState);
        }
        
        /// <remarks/>
        public CountryInfo[] EndGetSupportedCountries(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((CountryInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSupportedCountriesAsync(byte serviceType, byte platformType) {
            this.GetSupportedCountriesAsync(serviceType, platformType, null);
        }
        
        /// <remarks/>
        public void GetSupportedCountriesAsync(byte serviceType, byte platformType, object userState) {
            if ((this.GetSupportedCountriesOperationCompleted == null)) {
                this.GetSupportedCountriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSupportedCountriesOperationCompleted);
            }
            this.InvokeAsync("GetSupportedCountries", new object[] {
                        serviceType,
                        platformType}, this.GetSupportedCountriesOperationCompleted, userState);
        }
        
        private void OnGetSupportedCountriesOperationCompleted(object arg) {
            if ((this.GetSupportedCountriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSupportedCountriesCompleted(this, new GetSupportedCountriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/GetUserAuthorization", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("GetUserAuthorizationInfo", IsNullable=true)]
        public GetUserAuthorizationInfo GetUserAuthorization(int serviceType, uint titleId) {
            object[] results = this.Invoke("GetUserAuthorization", new object[] {
                        serviceType,
                        titleId});
            return ((GetUserAuthorizationInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserAuthorization(int serviceType, uint titleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserAuthorization", new object[] {
                        serviceType,
                        titleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public GetUserAuthorizationInfo EndGetUserAuthorization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((GetUserAuthorizationInfo)(results[0]));
        }
        
        /// <remarks/>
        public void GetUserAuthorizationAsync(int serviceType, uint titleId) {
            this.GetUserAuthorizationAsync(serviceType, titleId, null);
        }
        
        /// <remarks/>
        public void GetUserAuthorizationAsync(int serviceType, uint titleId, object userState) {
            if ((this.GetUserAuthorizationOperationCompleted == null)) {
                this.GetUserAuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserAuthorizationOperationCompleted);
            }
            this.InvokeAsync("GetUserAuthorization", new object[] {
                        serviceType,
                        titleId}, this.GetUserAuthorizationOperationCompleted, userState);
        }
        
        private void OnGetUserAuthorizationOperationCompleted(object arg) {
            if ((this.GetUserAuthorizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserAuthorizationCompleted(this, new GetUserAuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/GamertagHistoryGet", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserHistoryDetail[] GamertagHistoryGet(string gamertag, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> since) {
            object[] results = this.Invoke("GamertagHistoryGet", new object[] {
                        gamertag,
                        since});
            return ((UserHistoryDetail[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGamertagHistoryGet(string gamertag, System.Nullable<System.DateTime> since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GamertagHistoryGet", new object[] {
                        gamertag,
                        since}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserHistoryDetail[] EndGamertagHistoryGet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserHistoryDetail[])(results[0]));
        }
        
        /// <remarks/>
        public void GamertagHistoryGetAsync(string gamertag, System.Nullable<System.DateTime> since) {
            this.GamertagHistoryGetAsync(gamertag, since, null);
        }
        
        /// <remarks/>
        public void GamertagHistoryGetAsync(string gamertag, System.Nullable<System.DateTime> since, object userState) {
            if ((this.GamertagHistoryGetOperationCompleted == null)) {
                this.GamertagHistoryGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGamertagHistoryGetOperationCompleted);
            }
            this.InvokeAsync("GamertagHistoryGet", new object[] {
                        gamertag,
                        since}, this.GamertagHistoryGetOperationCompleted, userState);
        }
        
        private void OnGamertagHistoryGetOperationCompleted(object arg) {
            if ((this.GamertagHistoryGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GamertagHistoryGetCompleted(this, new GamertagHistoryGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/UserHistoryGet", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UserHistory UserHistoryGet(ulong userPuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> since) {
            object[] results = this.Invoke("UserHistoryGet", new object[] {
                        userPuid,
                        since});
            return ((UserHistory)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserHistoryGet(ulong userPuid, System.Nullable<System.DateTime> since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserHistoryGet", new object[] {
                        userPuid,
                        since}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserHistory EndUserHistoryGet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserHistory)(results[0]));
        }
        
        /// <remarks/>
        public void UserHistoryGetAsync(ulong userPuid, System.Nullable<System.DateTime> since) {
            this.UserHistoryGetAsync(userPuid, since, null);
        }
        
        /// <remarks/>
        public void UserHistoryGetAsync(ulong userPuid, System.Nullable<System.DateTime> since, object userState) {
            if ((this.UserHistoryGetOperationCompleted == null)) {
                this.UserHistoryGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserHistoryGetOperationCompleted);
            }
            this.InvokeAsync("UserHistoryGet", new object[] {
                        userPuid,
                        since}, this.UserHistoryGetOperationCompleted, userState);
        }
        
        private void OnUserHistoryGetOperationCompleted(object arg) {
            if ((this.UserHistoryGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserHistoryGetCompleted(this, new UserHistoryGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/MachineHistoryGet", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public MachineHistory MachineHistoryGet(ulong machinePuid, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> since) {
            object[] results = this.Invoke("MachineHistoryGet", new object[] {
                        machinePuid,
                        since});
            return ((MachineHistory)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginMachineHistoryGet(ulong machinePuid, System.Nullable<System.DateTime> since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("MachineHistoryGet", new object[] {
                        machinePuid,
                        since}, callback, asyncState);
        }
        
        /// <remarks/>
        public MachineHistory EndMachineHistoryGet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((MachineHistory)(results[0]));
        }
        
        /// <remarks/>
        public void MachineHistoryGetAsync(ulong machinePuid, System.Nullable<System.DateTime> since) {
            this.MachineHistoryGetAsync(machinePuid, since, null);
        }
        
        /// <remarks/>
        public void MachineHistoryGetAsync(ulong machinePuid, System.Nullable<System.DateTime> since, object userState) {
            if ((this.MachineHistoryGetOperationCompleted == null)) {
                this.MachineHistoryGetOperationCompleted = new System.Threading.SendOrPostCallback(this.OnMachineHistoryGetOperationCompleted);
            }
            this.InvokeAsync("MachineHistoryGet", new object[] {
                        machinePuid,
                        since}, this.MachineHistoryGetOperationCompleted, userState);
        }
        
        private void OnMachineHistoryGetOperationCompleted(object arg) {
            if ((this.MachineHistoryGetCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.MachineHistoryGetCompleted(this, new MachineHistoryGetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/TestConnection", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestConnection(string inputMessage) {
            object[] results = this.Invoke("TestConnection", new object[] {
                        inputMessage});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestConnection(string inputMessage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestConnection", new object[] {
                        inputMessage}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTestConnection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string inputMessage) {
            this.TestConnectionAsync(inputMessage, null);
        }
        
        /// <remarks/>
        public void TestConnectionAsync(string inputMessage, object userState) {
            if ((this.TestConnectionOperationCompleted == null)) {
                this.TestConnectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestConnectionOperationCompleted);
            }
            this.InvokeAsync("TestConnection", new object[] {
                        inputMessage}, this.TestConnectionOperationCompleted, userState);
        }
        
        private void OnTestConnectionOperationCompleted(object arg) {
            if ((this.TestConnectionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestConnectionCompleted(this, new TestConnectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:schemas-xbox-com:user-account-data/UserAccountAuthorize", RequestNamespace="urn:schemas-xbox-com:user-account-data", ResponseNamespace="urn:schemas-xbox-com:user-account-data", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("UserAccount_AuthorizeGetInfo", IsNullable=true)]
        public UserAccountAuthorizeInfo UserAccountAuthorize(int serviceType, uint titleId) {
            object[] results = this.Invoke("UserAccountAuthorize", new object[] {
                        serviceType,
                        titleId});
            return ((UserAccountAuthorizeInfo)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUserAccountAuthorize(int serviceType, uint titleId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UserAccountAuthorize", new object[] {
                        serviceType,
                        titleId}, callback, asyncState);
        }
        
        /// <remarks/>
        public UserAccountAuthorizeInfo EndUserAccountAuthorize(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UserAccountAuthorizeInfo)(results[0]));
        }
        
        /// <remarks/>
        public void UserAccountAuthorizeAsync(int serviceType, uint titleId) {
            this.UserAccountAuthorizeAsync(serviceType, titleId, null);
        }
        
        /// <remarks/>
        public void UserAccountAuthorizeAsync(int serviceType, uint titleId, object userState) {
            if ((this.UserAccountAuthorizeOperationCompleted == null)) {
                this.UserAccountAuthorizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUserAccountAuthorizeOperationCompleted);
            }
            this.InvokeAsync("UserAccountAuthorize", new object[] {
                        serviceType,
                        titleId}, this.UserAccountAuthorizeOperationCompleted, userState);
        }
        
        private void OnUserAccountAuthorizeOperationCompleted(object arg) {
            if ((this.UserAccountAuthorizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UserAccountAuthorizeCompleted(this, new UserAccountAuthorizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public enum ServiceTypeEnum {
        
        /// <remarks/>
        Unknown,
        
        /// <remarks/>
        XboxLive,
        
        /// <remarks/>
        Zune,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class AddCreditCardResults {
        
        private string paymentInstrumentIdField;
        
        /// <remarks/>
        public string PaymentInstrumentId {
            get {
                return this.paymentInstrumentIdField;
            }
            set {
                this.paymentInstrumentIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class UserAccountAuthorizeAccountInfo {
        
        private ulong xboxPuidField;
        
        private ulong livePuidField;
        
        private string tagField;
        
        private string countryCodeField;
        
        private bool parentallyControlledField;
        
        private byte[] privilegesField;
        
        /// <remarks/>
        public ulong XboxPuid {
            get {
                return this.xboxPuidField;
            }
            set {
                this.xboxPuidField = value;
            }
        }
        
        /// <remarks/>
        public ulong LivePuid {
            get {
                return this.livePuidField;
            }
            set {
                this.livePuidField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool ParentallyControlled {
            get {
                return this.parentallyControlledField;
            }
            set {
                this.parentallyControlledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("Privilege", IsNullable=false)]
        public byte[] Privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class UserAccountAuthorizeInfo {
        
        private ErrorInfo errorInfoField;
        
        private UserAccountAuthorizeAccountInfo accountInfoField;
        
        /// <remarks/>
        public ErrorInfo ErrorInfo {
            get {
                return this.errorInfoField;
            }
            set {
                this.errorInfoField = value;
            }
        }
        
        /// <remarks/>
        public UserAccountAuthorizeAccountInfo AccountInfo {
            get {
                return this.accountInfoField;
            }
            set {
                this.accountInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class ErrorInfo {
        
        private uint hResultField;
        
        private string messageField;
        
        private bool tagChangeRequiredField;
        
        private bool acceptedTermsOfServiceField;
        
        private bool accountSuspendedField;
        
        private bool billingUnavailableField;
        
        /// <remarks/>
        public uint HResult {
            get {
                return this.hResultField;
            }
            set {
                this.hResultField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool TagChangeRequired {
            get {
                return this.tagChangeRequiredField;
            }
            set {
                this.tagChangeRequiredField = value;
            }
        }
        
        /// <remarks/>
        public bool AcceptedTermsOfService {
            get {
                return this.acceptedTermsOfServiceField;
            }
            set {
                this.acceptedTermsOfServiceField = value;
            }
        }
        
        /// <remarks/>
        public bool AccountSuspended {
            get {
                return this.accountSuspendedField;
            }
            set {
                this.accountSuspendedField = value;
            }
        }
        
        /// <remarks/>
        public bool BillingUnavailable {
            get {
                return this.billingUnavailableField;
            }
            set {
                this.billingUnavailableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class MachineHistory {
        
        private ulong machinePuidField;
        
        private UserHistoryDetail[] userHistoryDetailsField;
        
        private MachineHistoryDetail[] machineHistoryDetailsField;
        
        /// <remarks/>
        public ulong MachinePuid {
            get {
                return this.machinePuidField;
            }
            set {
                this.machinePuidField = value;
            }
        }
        
        /// <remarks/>
        public UserHistoryDetail[] UserHistoryDetails {
            get {
                return this.userHistoryDetailsField;
            }
            set {
                this.userHistoryDetailsField = value;
            }
        }
        
        /// <remarks/>
        public MachineHistoryDetail[] MachineHistoryDetails {
            get {
                return this.machineHistoryDetailsField;
            }
            set {
                this.machineHistoryDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class UserHistoryDetail {
        
        private System.DateTime timestampField;
        
        private System.Nullable<ulong> userPuidField;
        
        private System.Nullable<ulong> machinePuidField;
        
        private string ipAddressField;
        
        private string reasonField;
        
        private string detailField;
        
        /// <remarks/>
        public System.DateTime Timestamp {
            get {
                return this.timestampField;
            }
            set {
                this.timestampField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<ulong> UserPuid {
            get {
                return this.userPuidField;
            }
            set {
                this.userPuidField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<ulong> MachinePuid {
            get {
                return this.machinePuidField;
            }
            set {
                this.machinePuidField = value;
            }
        }
        
        /// <remarks/>
        public string IpAddress {
            get {
                return this.ipAddressField;
            }
            set {
                this.ipAddressField = value;
            }
        }
        
        /// <remarks/>
        public string Reason {
            get {
                return this.reasonField;
            }
            set {
                this.reasonField = value;
            }
        }
        
        /// <remarks/>
        public string Detail {
            get {
                return this.detailField;
            }
            set {
                this.detailField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class MachineHistoryDetail {
        
        private ulong userPuidField;
        
        private ulong machinePuidField;
        
        private System.DateTime firstSeenField;
        
        private System.DateTime lastSeenField;
        
        private int daysSeenField;
        
        private string ipAddressField;
        
        /// <remarks/>
        public ulong UserPuid {
            get {
                return this.userPuidField;
            }
            set {
                this.userPuidField = value;
            }
        }
        
        /// <remarks/>
        public ulong MachinePuid {
            get {
                return this.machinePuidField;
            }
            set {
                this.machinePuidField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime FirstSeen {
            get {
                return this.firstSeenField;
            }
            set {
                this.firstSeenField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime LastSeen {
            get {
                return this.lastSeenField;
            }
            set {
                this.lastSeenField = value;
            }
        }
        
        /// <remarks/>
        public int DaysSeen {
            get {
                return this.daysSeenField;
            }
            set {
                this.daysSeenField = value;
            }
        }
        
        /// <remarks/>
        public string IpAddress {
            get {
                return this.ipAddressField;
            }
            set {
                this.ipAddressField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class UserHistory {
        
        private ulong userPuidField;
        
        private UserHistoryDetail[] userHistoryDetailsField;
        
        private MachineHistoryDetail[] machineHistoryDetailsField;
        
        /// <remarks/>
        public ulong UserPuid {
            get {
                return this.userPuidField;
            }
            set {
                this.userPuidField = value;
            }
        }
        
        /// <remarks/>
        public UserHistoryDetail[] UserHistoryDetails {
            get {
                return this.userHistoryDetailsField;
            }
            set {
                this.userHistoryDetailsField = value;
            }
        }
        
        /// <remarks/>
        public MachineHistoryDetail[] MachineHistoryDetails {
            get {
                return this.machineHistoryDetailsField;
            }
            set {
                this.machineHistoryDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class SessionInfo {
        
        private string musicNetAuthTokenField;
        
        private string geoCountryCodeField;
        
        /// <remarks/>
        public string MusicNetAuthToken {
            get {
                return this.musicNetAuthTokenField;
            }
            set {
                this.musicNetAuthTokenField = value;
            }
        }
        
        /// <remarks/>
        public string GeoCountryCode {
            get {
                return this.geoCountryCodeField;
            }
            set {
                this.geoCountryCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class SubscriptionInfo {
        
        private ulong offerIdField;
        
        private string billingInstanceIdField;
        
        private string statusField;
        
        private bool hasBillingViolationField;
        
        private bool hasPendingCancelField;
        
        private bool hasLapsedField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private string renewalOfferIdField;
        
        /// <remarks/>
        public ulong OfferId {
            get {
                return this.offerIdField;
            }
            set {
                this.offerIdField = value;
            }
        }
        
        /// <remarks/>
        public string BillingInstanceId {
            get {
                return this.billingInstanceIdField;
            }
            set {
                this.billingInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool HasBillingViolation {
            get {
                return this.hasBillingViolationField;
            }
            set {
                this.hasBillingViolationField = value;
            }
        }
        
        /// <remarks/>
        public bool HasPendingCancel {
            get {
                return this.hasPendingCancelField;
            }
            set {
                this.hasPendingCancelField = value;
            }
        }
        
        /// <remarks/>
        public bool HasLapsed {
            get {
                return this.hasLapsedField;
            }
            set {
                this.hasLapsedField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string RenewalOfferId {
            get {
                return this.renewalOfferIdField;
            }
            set {
                this.renewalOfferIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class AccountInfo {
        
        private ulong xboxPuidField;
        
        private ulong livePuidField;
        
        private string tagField;
        
        private string countryCodeField;
        
        private string postalCodeField;
        
        private bool parentallyControlledField;
        
        private byte[] privilegesField;
        
        private uint[] servicesField;
        
        private uint pointsBalanceField;
        
        private bool isLightweightField;
        
        private uint cultureIdField;
        
        private uint parentalControlGroupIdField;
        
        /// <remarks/>
        public ulong XboxPuid {
            get {
                return this.xboxPuidField;
            }
            set {
                this.xboxPuidField = value;
            }
        }
        
        /// <remarks/>
        public ulong LivePuid {
            get {
                return this.livePuidField;
            }
            set {
                this.livePuidField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool ParentallyControlled {
            get {
                return this.parentallyControlledField;
            }
            set {
                this.parentallyControlledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute()]
        [System.Xml.Serialization.XmlArrayItemAttribute("Privilege", IsNullable=false)]
        public byte[] Privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Service", IsNullable=false)]
        public uint[] Services {
            get {
                return this.servicesField;
            }
            set {
                this.servicesField = value;
            }
        }
        
        /// <remarks/>
        public uint PointsBalance {
            get {
                return this.pointsBalanceField;
            }
            set {
                this.pointsBalanceField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLightweight {
            get {
                return this.isLightweightField;
            }
            set {
                this.isLightweightField = value;
            }
        }
        
        /// <remarks/>
        public uint CultureId {
            get {
                return this.cultureIdField;
            }
            set {
                this.cultureIdField = value;
            }
        }
        
        /// <remarks/>
        public uint ParentalControlGroupId {
            get {
                return this.parentalControlGroupIdField;
            }
            set {
                this.parentalControlGroupIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class GetUserAuthorizationInfo {
        
        private ErrorInfo errorInfoField;
        
        private AccountInfo accountInfoField;
        
        private SubscriptionInfo[] subscriptionInfoField;
        
        private SessionInfo sessionInfoField;
        
        /// <remarks/>
        public ErrorInfo ErrorInfo {
            get {
                return this.errorInfoField;
            }
            set {
                this.errorInfoField = value;
            }
        }
        
        /// <remarks/>
        public AccountInfo AccountInfo {
            get {
                return this.accountInfoField;
            }
            set {
                this.accountInfoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("Subscription")]
        public SubscriptionInfo[] SubscriptionInfo {
            get {
                return this.subscriptionInfoField;
            }
            set {
                this.subscriptionInfoField = value;
            }
        }
        
        /// <remarks/>
        public SessionInfo SessionInfo {
            get {
                return this.sessionInfoField;
            }
            set {
                this.sessionInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class CountryInfo {
        
        private byte countryIdField;
        
        private string countryCodeField;
        
        private byte userField;
        
        private byte billingField;
        
        private bool allowDirectDebitField;
        
        private bool allowPayPalField;
        
        private bool requireCCAgeVerificationField;
        
        /// <remarks/>
        public byte CountryId {
            get {
                return this.countryIdField;
            }
            set {
                this.countryIdField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public byte User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public byte Billing {
            get {
                return this.billingField;
            }
            set {
                this.billingField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowDirectDebit {
            get {
                return this.allowDirectDebitField;
            }
            set {
                this.allowDirectDebitField = value;
            }
        }
        
        /// <remarks/>
        public bool AllowPayPal {
            get {
                return this.allowPayPalField;
            }
            set {
                this.allowPayPalField = value;
            }
        }
        
        /// <remarks/>
        public bool RequireCCAgeVerification {
            get {
                return this.requireCCAgeVerificationField;
            }
            set {
                this.requireCCAgeVerificationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class BillingAgreementDetails {
        
        private string payerEmailField;
        
        private string billingAgreementIdField;
        
        private string firstNameField;
        
        private string lastNameField;
        
        private string middleNameField;
        
        private string payerBusinessField;
        
        private string payerCountryField;
        
        private string billingAgreementDescriptionField;
        
        /// <remarks/>
        public string PayerEmail {
            get {
                return this.payerEmailField;
            }
            set {
                this.payerEmailField = value;
            }
        }
        
        /// <remarks/>
        public string BillingAgreementId {
            get {
                return this.billingAgreementIdField;
            }
            set {
                this.billingAgreementIdField = value;
            }
        }
        
        /// <remarks/>
        public string FirstName {
            get {
                return this.firstNameField;
            }
            set {
                this.firstNameField = value;
            }
        }
        
        /// <remarks/>
        public string LastName {
            get {
                return this.lastNameField;
            }
            set {
                this.lastNameField = value;
            }
        }
        
        /// <remarks/>
        public string MiddleName {
            get {
                return this.middleNameField;
            }
            set {
                this.middleNameField = value;
            }
        }
        
        /// <remarks/>
        public string PayerBusiness {
            get {
                return this.payerBusinessField;
            }
            set {
                this.payerBusinessField = value;
            }
        }
        
        /// <remarks/>
        public string PayerCountry {
            get {
                return this.payerCountryField;
            }
            set {
                this.payerCountryField = value;
            }
        }
        
        /// <remarks/>
        public string BillingAgreementDescription {
            get {
                return this.billingAgreementDescriptionField;
            }
            set {
                this.billingAgreementDescriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class PayPalPayinInfo {
        
        private BillingAgreementDetails billingAgreementDetailsField;
        
        /// <remarks/>
        public BillingAgreementDetails BillingAgreementDetails {
            get {
                return this.billingAgreementDetailsField;
            }
            set {
                this.billingAgreementDetailsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class WholesaleInfo {
        
        private string accountHolderNameField;
        
        private string externalReferenceIdField;
        
        private string wholesalePartnerField;
        
        private string encryptedPasswordField;
        
        /// <remarks/>
        public string AccountHolderName {
            get {
                return this.accountHolderNameField;
            }
            set {
                this.accountHolderNameField = value;
            }
        }
        
        /// <remarks/>
        public string ExternalReferenceId {
            get {
                return this.externalReferenceIdField;
            }
            set {
                this.externalReferenceIdField = value;
            }
        }
        
        /// <remarks/>
        public string WholesalePartner {
            get {
                return this.wholesalePartnerField;
            }
            set {
                this.wholesalePartnerField = value;
            }
        }
        
        /// <remarks/>
        public string EncryptedPassword {
            get {
                return this.encryptedPasswordField;
            }
            set {
                this.encryptedPasswordField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class DirectDebitInfo {
        
        private string accountHolderNameField;
        
        private string accountNumberField;
        
        private string bankCodeField;
        
        private string branchCodeField;
        
        private string checkDigitsField;
        
        /// <remarks/>
        public string AccountHolderName {
            get {
                return this.accountHolderNameField;
            }
            set {
                this.accountHolderNameField = value;
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string BankCode {
            get {
                return this.bankCodeField;
            }
            set {
                this.bankCodeField = value;
            }
        }
        
        /// <remarks/>
        public string BranchCode {
            get {
                return this.branchCodeField;
            }
            set {
                this.branchCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CheckDigits {
            get {
                return this.checkDigitsField;
            }
            set {
                this.checkDigitsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class CreditCardInfo {
        
        private byte cardTypeField;
        
        private string accountHolderNameField;
        
        private string accountNumberField;
        
        private string ccvNumberField;
        
        private System.DateTime expirationDateField;
        
        /// <remarks/>
        public byte CardType {
            get {
                return this.cardTypeField;
            }
            set {
                this.cardTypeField = value;
            }
        }
        
        /// <remarks/>
        public string AccountHolderName {
            get {
                return this.accountHolderNameField;
            }
            set {
                this.accountHolderNameField = value;
            }
        }
        
        /// <remarks/>
        public string AccountNumber {
            get {
                return this.accountNumberField;
            }
            set {
                this.accountNumberField = value;
            }
        }
        
        /// <remarks/>
        public string CcvNumber {
            get {
                return this.ccvNumberField;
            }
            set {
                this.ccvNumberField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime ExpirationDate {
            get {
                return this.expirationDateField;
            }
            set {
                this.expirationDateField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class PhoneInfo {
        
        private string phonePrefixField;
        
        private string phoneNumberField;
        
        private string phoneExtensionField;
        
        /// <remarks/>
        public string PhonePrefix {
            get {
                return this.phonePrefixField;
            }
            set {
                this.phonePrefixField = value;
            }
        }
        
        /// <remarks/>
        public string PhoneNumber {
            get {
                return this.phoneNumberField;
            }
            set {
                this.phoneNumberField = value;
            }
        }
        
        /// <remarks/>
        public string PhoneExtension {
            get {
                return this.phoneExtensionField;
            }
            set {
                this.phoneExtensionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class AddressInfo {
        
        private string street1Field;
        
        private string street2Field;
        
        private string cityField;
        
        private string districtField;
        
        private string stateField;
        
        private string postalCodeField;
        
        /// <remarks/>
        public string Street1 {
            get {
                return this.street1Field;
            }
            set {
                this.street1Field = value;
            }
        }
        
        /// <remarks/>
        public string Street2 {
            get {
                return this.street2Field;
            }
            set {
                this.street2Field = value;
            }
        }
        
        /// <remarks/>
        public string City {
            get {
                return this.cityField;
            }
            set {
                this.cityField = value;
            }
        }
        
        /// <remarks/>
        public string District {
            get {
                return this.districtField;
            }
            set {
                this.districtField = value;
            }
        }
        
        /// <remarks/>
        public string State {
            get {
                return this.stateField;
            }
            set {
                this.stateField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class PaymentInstrumentInfo {
        
        private string paymentInstrumentIdField;
        
        private byte paymentInstrumentTypeField;
        
        private AddressInfo addressInfoField;
        
        private PhoneInfo phoneInfoField;
        
        private CreditCardInfo creditCardInfoField;
        
        private DirectDebitInfo directDebitInfoField;
        
        private WholesaleInfo wholesaleInfoField;
        
        private PayPalPayinInfo payPalPayinInfoField;
        
        /// <remarks/>
        public string PaymentInstrumentId {
            get {
                return this.paymentInstrumentIdField;
            }
            set {
                this.paymentInstrumentIdField = value;
            }
        }
        
        /// <remarks/>
        public byte PaymentInstrumentType {
            get {
                return this.paymentInstrumentTypeField;
            }
            set {
                this.paymentInstrumentTypeField = value;
            }
        }
        
        /// <remarks/>
        public AddressInfo AddressInfo {
            get {
                return this.addressInfoField;
            }
            set {
                this.addressInfoField = value;
            }
        }
        
        /// <remarks/>
        public PhoneInfo PhoneInfo {
            get {
                return this.phoneInfoField;
            }
            set {
                this.phoneInfoField = value;
            }
        }
        
        /// <remarks/>
        public CreditCardInfo CreditCardInfo {
            get {
                return this.creditCardInfoField;
            }
            set {
                this.creditCardInfoField = value;
            }
        }
        
        /// <remarks/>
        public DirectDebitInfo DirectDebitInfo {
            get {
                return this.directDebitInfoField;
            }
            set {
                this.directDebitInfoField = value;
            }
        }
        
        /// <remarks/>
        public WholesaleInfo WholesaleInfo {
            get {
                return this.wholesaleInfoField;
            }
            set {
                this.wholesaleInfoField = value;
            }
        }
        
        /// <remarks/>
        public PayPalPayinInfo PayPalPayinInfo {
            get {
                return this.payPalPayinInfoField;
            }
            set {
                this.payPalPayinInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class GetPaymentInstrumentResults {
        
        private PaymentInstrumentInfo[] paymentInstrumentInfosField;
        
        /// <remarks/>
        public PaymentInstrumentInfo[] PaymentInstrumentInfos {
            get {
                return this.paymentInstrumentInfosField;
            }
            set {
                this.paymentInstrumentInfosField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class ConsoleApplicationDetail {
        
        private string fileNameField;
        
        private string friendlyNameField;
        
        private string appVersionField;
        
        private bool onlineField;
        
        /// <remarks/>
        public string FileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        public string FriendlyName {
            get {
                return this.friendlyNameField;
            }
            set {
                this.friendlyNameField = value;
            }
        }
        
        /// <remarks/>
        public string AppVersion {
            get {
                return this.appVersionField;
            }
            set {
                this.appVersionField = value;
            }
        }
        
        /// <remarks/>
        public bool Online {
            get {
                return this.onlineField;
            }
            set {
                this.onlineField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class ConsoleApplicationGroup {
        
        private string nameField;
        
        private string systemOnlineManifestRevisionField;
        
        private string systemManifestRevisionField;
        
        private int flashVersionField;
        
        private System.Guid groupIdField;
        
        private ConsoleApplicationDetail[] applicationsField;
        
        /// <remarks/>
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        public string SystemOnlineManifestRevision {
            get {
                return this.systemOnlineManifestRevisionField;
            }
            set {
                this.systemOnlineManifestRevisionField = value;
            }
        }
        
        /// <remarks/>
        public string SystemManifestRevision {
            get {
                return this.systemManifestRevisionField;
            }
            set {
                this.systemManifestRevisionField = value;
            }
        }
        
        /// <remarks/>
        public int FlashVersion {
            get {
                return this.flashVersionField;
            }
            set {
                this.flashVersionField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid GroupId {
            get {
                return this.groupIdField;
            }
            set {
                this.groupIdField = value;
            }
        }
        
        /// <remarks/>
        public ConsoleApplicationDetail[] Applications {
            get {
                return this.applicationsField;
            }
            set {
                this.applicationsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class ConsoleApplications {
        
        private string consoleIdField;
        
        private ConsoleApplicationGroup[] applicationGroupsField;
        
        /// <remarks/>
        public string ConsoleId {
            get {
                return this.consoleIdField;
            }
            set {
                this.consoleIdField = value;
            }
        }
        
        /// <remarks/>
        public ConsoleApplicationGroup[] ApplicationGroups {
            get {
                return this.applicationGroupsField;
            }
            set {
                this.applicationGroupsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class SessionDetails {
        
        private byte[] sessionKeyField;
        
        private string musicNetAuthTokenField;
        
        private string geoCountryCodeField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] SessionKey {
            get {
                return this.sessionKeyField;
            }
            set {
                this.sessionKeyField = value;
            }
        }
        
        /// <remarks/>
        public string MusicNetAuthToken {
            get {
                return this.musicNetAuthTokenField;
            }
            set {
                this.musicNetAuthTokenField = value;
            }
        }
        
        /// <remarks/>
        public string GeoCountryCode {
            get {
                return this.geoCountryCodeField;
            }
            set {
                this.geoCountryCodeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class SubscriptionDetails {
        
        private ulong xboxOfferIdField;
        
        private string billingInstanceIdField;
        
        private string statusField;
        
        private bool hasBillingViolationField;
        
        private bool hasPendingCancelField;
        
        private string musicNetSkuField;
        
        private System.DateTime startDateField;
        
        private System.DateTime endDateField;
        
        private string renewalXboxOfferIdField;
        
        /// <remarks/>
        public ulong XboxOfferId {
            get {
                return this.xboxOfferIdField;
            }
            set {
                this.xboxOfferIdField = value;
            }
        }
        
        /// <remarks/>
        public string BillingInstanceId {
            get {
                return this.billingInstanceIdField;
            }
            set {
                this.billingInstanceIdField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public bool HasBillingViolation {
            get {
                return this.hasBillingViolationField;
            }
            set {
                this.hasBillingViolationField = value;
            }
        }
        
        /// <remarks/>
        public bool HasPendingCancel {
            get {
                return this.hasPendingCancelField;
            }
            set {
                this.hasPendingCancelField = value;
            }
        }
        
        /// <remarks/>
        public string MusicNetSku {
            get {
                return this.musicNetSkuField;
            }
            set {
                this.musicNetSkuField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime StartDate {
            get {
                return this.startDateField;
            }
            set {
                this.startDateField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime EndDate {
            get {
                return this.endDateField;
            }
            set {
                this.endDateField = value;
            }
        }
        
        /// <remarks/>
        public string RenewalXboxOfferId {
            get {
                return this.renewalXboxOfferIdField;
            }
            set {
                this.renewalXboxOfferIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class AccountDetails {
        
        private ulong xboxPuidField;
        
        private ulong livePuidField;
        
        private string tagField;
        
        private string postalCodeField;
        
        private string countryCodeField;
        
        private bool parentallyControlledField;
        
        private byte[] privilegesField;
        
        private uint pointsBalanceField;
        
        private bool isLightweightField;
        
        /// <remarks/>
        public ulong XboxPuid {
            get {
                return this.xboxPuidField;
            }
            set {
                this.xboxPuidField = value;
            }
        }
        
        /// <remarks/>
        public ulong LivePuid {
            get {
                return this.livePuidField;
            }
            set {
                this.livePuidField = value;
            }
        }
        
        /// <remarks/>
        public string Tag {
            get {
                return this.tagField;
            }
            set {
                this.tagField = value;
            }
        }
        
        /// <remarks/>
        public string PostalCode {
            get {
                return this.postalCodeField;
            }
            set {
                this.postalCodeField = value;
            }
        }
        
        /// <remarks/>
        public string CountryCode {
            get {
                return this.countryCodeField;
            }
            set {
                this.countryCodeField = value;
            }
        }
        
        /// <remarks/>
        public bool ParentallyControlled {
            get {
                return this.parentallyControlledField;
            }
            set {
                this.parentallyControlledField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] Privileges {
            get {
                return this.privilegesField;
            }
            set {
                this.privilegesField = value;
            }
        }
        
        /// <remarks/>
        public uint PointsBalance {
            get {
                return this.pointsBalanceField;
            }
            set {
                this.pointsBalanceField = value;
            }
        }
        
        /// <remarks/>
        public bool IsLightweight {
            get {
                return this.isLightweightField;
            }
            set {
                this.isLightweightField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class ErrorDetails {
        
        private uint hResultField;
        
        private string messageField;
        
        private bool tagChangeRequiredField;
        
        private bool acceptedTermsOfServiceField;
        
        private bool accountSuspendedField;
        
        private bool subscriptionLapsedField;
        
        private bool billingUnavailableField;
        
        /// <remarks/>
        public uint HResult {
            get {
                return this.hResultField;
            }
            set {
                this.hResultField = value;
            }
        }
        
        /// <remarks/>
        public string Message {
            get {
                return this.messageField;
            }
            set {
                this.messageField = value;
            }
        }
        
        /// <remarks/>
        public bool TagChangeRequired {
            get {
                return this.tagChangeRequiredField;
            }
            set {
                this.tagChangeRequiredField = value;
            }
        }
        
        /// <remarks/>
        public bool AcceptedTermsOfService {
            get {
                return this.acceptedTermsOfServiceField;
            }
            set {
                this.acceptedTermsOfServiceField = value;
            }
        }
        
        /// <remarks/>
        public bool AccountSuspended {
            get {
                return this.accountSuspendedField;
            }
            set {
                this.accountSuspendedField = value;
            }
        }
        
        /// <remarks/>
        public bool SubscriptionLapsed {
            get {
                return this.subscriptionLapsedField;
            }
            set {
                this.subscriptionLapsedField = value;
            }
        }
        
        /// <remarks/>
        public bool BillingUnavailable {
            get {
                return this.billingUnavailableField;
            }
            set {
                this.billingUnavailableField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class SignInResults {
        
        private ErrorDetails errorInfoField;
        
        private AccountDetails accountInfoField;
        
        private SubscriptionDetails subscriptionInfoField;
        
        private SessionDetails sessionInfoField;
        
        /// <remarks/>
        public ErrorDetails ErrorInfo {
            get {
                return this.errorInfoField;
            }
            set {
                this.errorInfoField = value;
            }
        }
        
        /// <remarks/>
        public AccountDetails AccountInfo {
            get {
                return this.accountInfoField;
            }
            set {
                this.accountInfoField = value;
            }
        }
        
        /// <remarks/>
        public SubscriptionDetails SubscriptionInfo {
            get {
                return this.subscriptionInfoField;
            }
            set {
                this.subscriptionInfoField = value;
            }
        }
        
        /// <remarks/>
        public SessionDetails SessionInfo {
            get {
                return this.sessionInfoField;
            }
            set {
                this.sessionInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public partial class GetPointsBalanceResults {
        
        private int pointsBalanceField;
        
        private bool aboveLowBalanceField;
        
        private byte dmpAccountStatusField;
        
        /// <remarks/>
        public int PointsBalance {
            get {
                return this.pointsBalanceField;
            }
            set {
                this.pointsBalanceField = value;
            }
        }
        
        /// <remarks/>
        public bool AboveLowBalance {
            get {
                return this.aboveLowBalanceField;
            }
            set {
                this.aboveLowBalanceField = value;
            }
        }
        
        /// <remarks/>
        public byte DmpAccountStatus {
            get {
                return this.dmpAccountStatusField;
            }
            set {
                this.dmpAccountStatusField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="urn:schemas-xbox-com:user-account-data")]
    public enum GamertagSuggestionType {
        
        /// <remarks/>
        NounAdjectiveSuggestion,
        
        /// <remarks/>
        SeedSuggestion,
        
        /// <remarks/>
        UniqueNounAdjectiveSuggestion,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AcceptTermsOfServiceCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddCreditCardCompletedEventHandler(object sender, AddCreditCardCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddCreditCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddCreditCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public AddCreditCardResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((AddCreditCardResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPointsBalanceCompletedEventHandler(object sender, GetPointsBalanceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPointsBalanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPointsBalanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetPointsBalanceResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetPointsBalanceResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SignInCompletedEventHandler(object sender, SignInCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SignInCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SignInCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SignInResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SignInResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ConsoleApplicationsGetByMachinePuidCompletedEventHandler(object sender, ConsoleApplicationsGetByMachinePuidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConsoleApplicationsGetByMachinePuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConsoleApplicationsGetByMachinePuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ConsoleApplications Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ConsoleApplications)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateMobileAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GenerateGamertagCompletedEventHandler(object sender, GenerateGamertagCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GenerateGamertagCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GenerateGamertagCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetPaymentInstrumentsCompletedEventHandler(object sender, GetPaymentInstrumentsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentInstrumentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPaymentInstrumentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetPaymentInstrumentResults Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetPaymentInstrumentResults)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetSupportedCountriesCompletedEventHandler(object sender, GetSupportedCountriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSupportedCountriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSupportedCountriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public CountryInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((CountryInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUserAuthorizationCompletedEventHandler(object sender, GetUserAuthorizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserAuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUserAuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public GetUserAuthorizationInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((GetUserAuthorizationInfo)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GamertagHistoryGetCompletedEventHandler(object sender, GamertagHistoryGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GamertagHistoryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GamertagHistoryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserHistoryDetail[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserHistoryDetail[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserHistoryGetCompletedEventHandler(object sender, UserHistoryGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserHistoryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserHistoryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserHistory Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserHistory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void MachineHistoryGetCompletedEventHandler(object sender, MachineHistoryGetCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class MachineHistoryGetCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal MachineHistoryGetCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public MachineHistory Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((MachineHistory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void TestConnectionCompletedEventHandler(object sender, TestConnectionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestConnectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestConnectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UserAccountAuthorizeCompletedEventHandler(object sender, UserAccountAuthorizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UserAccountAuthorizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UserAccountAuthorizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public UserAccountAuthorizeInfo Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((UserAccountAuthorizeInfo)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\prescntrs.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;

namespace xonline.server.svctunnel.fd
{
    public class GetFriendsCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetFriendsCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetFriendsCountersCategory.Current().RequestsPerSecond.Increment();
            GetFriendsCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetFriendsCountersCategory.Current().FailuresPerSecond,
                GetFriendsCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetFriendsCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetFriendsCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetFriendsCountersCategory.Current().FailuresPerSecond.Increment();
                GetFriendsCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetFriends", "Service Tunnel: GetFriends" )]
	public class GetFriendsCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetFriendsCountersCategory _instance = new GetFriendsCountersCategory();
        static public GetFriendsCountersCategory Current()
        {
            return (GetFriendsCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetFriends request counters

		[XomPerformanceCounterAttr(
			"GetFriends requests/sec", 
			"GetFriends requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetFriends total", 
			"Total GetFriends requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetFriends failures/sec", 
			"Number of unsuccessful results returned by GetFriends per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetFriends total failures", 
			"Total number unsuccessful results returned by GetFriends in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetFriends avg. execution time", 
			"GetFriends Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
    public class GetFriendsFromListCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetFriendsFromListCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetFriendsFromListCountersCategory.Current().RequestsPerSecond.Increment();
            GetFriendsFromListCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetFriendsFromListCountersCategory.Current().FailuresPerSecond,
                GetFriendsFromListCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetFriendsFromListCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetFriendsFromListCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetFriendsFromListCountersCategory.Current().FailuresPerSecond.Increment();
                GetFriendsFromListCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetFriendsFromList", "Service Tunnel: GetFriendsFromList" )]
	public class GetFriendsFromListCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetFriendsFromListCountersCategory _instance = new GetFriendsFromListCountersCategory();
        static public GetFriendsFromListCountersCategory Current()
        {
            return (GetFriendsFromListCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetFriendsFromList request counters

		[XomPerformanceCounterAttr(
			"GetFriendsFromList requests/sec", 
			"GetFriendsFromList requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetFriendsFromList total", 
			"Total GetFriendsFromList requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetFriendsFromList failures/sec", 
			"Number of unsuccessful results returned by GetFriendsFromList per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetFriendsFromList total failures", 
			"Total number unsuccessful results returned by GetFriendsFromList in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetFriendsFromList avg. execution time", 
			"GetFriendsFromList Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class GetFriendsFromListByGamertagCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public GetFriendsFromListByGamertagCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            GetFriendsFromListByGamertagCountersCategory.Current().RequestsPerSecond.Increment();
            GetFriendsFromListByGamertagCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                GetFriendsFromListByGamertagCountersCategory.Current().FailuresPerSecond,
                GetFriendsFromListByGamertagCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            GetFriendsFromListByGamertagCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            GetFriendsFromListByGamertagCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                GetFriendsFromListByGamertagCountersCategory.Current().FailuresPerSecond.Increment();
                GetFriendsFromListByGamertagCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: GetFriendsFromListByGamertag", "Service Tunnel: GetFriendsFromListByGamertag" )]
	public class GetFriendsFromListByGamertagCountersCategory : XomPerformanceCounterCategory
	{
		
        static public GetFriendsFromListByGamertagCountersCategory _instance = new GetFriendsFromListByGamertagCountersCategory();
        static public GetFriendsFromListByGamertagCountersCategory Current()
        {
            return (GetFriendsFromListByGamertagCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // GetFriendsFromListByGamertag request counters

		[XomPerformanceCounterAttr(
			"GetFriendsFromListByGamertag requests/sec", 
			"GetFriendsFromListByGamertag requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"GetFriendsFromListByGamertag total", 
			"Total GetFriendsFromListByGamertag requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"GetFriendsFromListByGamertag failures/sec", 
			"Number of unsuccessful results returned by GetFriendsFromListByGamertag per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"GetFriendsFromListByGamertag total failures", 
			"Total number unsuccessful results returned by GetFriendsFromListByGamertag in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"GetFriendsFromListByGamertag avg. execution time", 
			"GetFriendsFromListByGamertag Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
    
    
    public class SendFriendsRequestCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public SendFriendsRequestCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            SendFriendsRequestCountersCategory.Current().RequestsPerSecond.Increment();
            SendFriendsRequestCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                SendFriendsRequestCountersCategory.Current().FailuresPerSecond,
                SendFriendsRequestCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            SendFriendsRequestCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            SendFriendsRequestCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                SendFriendsRequestCountersCategory.Current().FailuresPerSecond.Increment();
                SendFriendsRequestCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: SendFriendsRequest", "Service Tunnel: SendFriendsRequest" )]
	public class SendFriendsRequestCountersCategory : XomPerformanceCounterCategory
	{
		
        static public SendFriendsRequestCountersCategory _instance = new SendFriendsRequestCountersCategory();
        static public SendFriendsRequestCountersCategory Current()
        {
            return (SendFriendsRequestCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // SendFriendsRequest request counters

		[XomPerformanceCounterAttr(
			"SendFriendsRequest requests/sec", 
			"SendFriendsRequest requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"SendFriendsRequest total", 
			"Total SendFriendsRequest requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"SendFriendsRequest failures/sec", 
			"Number of unsuccessful results returned by SendFriendsRequest per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"SendFriendsRequest total failures", 
			"Total number unsuccessful results returned by SendFriendsRequest in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"SendFriendsRequest avg. execution time", 
			"SendFriendsRequest Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class SendFriendsRequestByGamertagCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public SendFriendsRequestByGamertagCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            SendFriendsRequestByGamertagCountersCategory.Current().RequestsPerSecond.Increment();
            SendFriendsRequestByGamertagCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                SendFriendsRequestByGamertagCountersCategory.Current().FailuresPerSecond,
                SendFriendsRequestByGamertagCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            SendFriendsRequestByGamertagCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            SendFriendsRequestByGamertagCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                SendFriendsRequestByGamertagCountersCategory.Current().FailuresPerSecond.Increment();
                SendFriendsRequestByGamertagCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: SendFriendsRequestByGamertag", "Service Tunnel: SendFriendsRequestByGamertag" )]
	public class SendFriendsRequestByGamertagCountersCategory : XomPerformanceCounterCategory
	{
		
        static public SendFriendsRequestByGamertagCountersCategory _instance = new SendFriendsRequestByGamertagCountersCategory();
        static public SendFriendsRequestByGamertagCountersCategory Current()
        {
            return (SendFriendsRequestByGamertagCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // SendFriendsRequestByGamertag request counters

		[XomPerformanceCounterAttr(
			"SendFriendsRequestByGamertag requests/sec", 
			"SendFriendsRequestByGamertag requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"SendFriendsRequestByGamertag total", 
			"Total SendFriendsRequestByGamertag requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"SendFriendsRequestByGamertag failures/sec", 
			"Number of unsuccessful results returned by SendFriendsRequestByGamertag per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"SendFriendsRequestByGamertag total failures", 
			"Total number unsuccessful results returned by SendFriendsRequestByGamertag in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"SendFriendsRequestByGamertag avg. execution time", 
			"SendFriendsRequestByGamertag Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
    public class AnswerFriendsRequestCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public AnswerFriendsRequestCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            AnswerFriendsRequestCountersCategory.Current().RequestsPerSecond.Increment();
            AnswerFriendsRequestCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                AnswerFriendsRequestCountersCategory.Current().FailuresPerSecond,
                AnswerFriendsRequestCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            AnswerFriendsRequestCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            AnswerFriendsRequestCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                AnswerFriendsRequestCountersCategory.Current().FailuresPerSecond.Increment();
                AnswerFriendsRequestCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: AnswerFriendsRequest", "Service Tunnel: AnswerFriendsRequest" )]
	public class AnswerFriendsRequestCountersCategory : XomPerformanceCounterCategory
	{
		
        static public AnswerFriendsRequestCountersCategory _instance = new AnswerFriendsRequestCountersCategory();
        static public AnswerFriendsRequestCountersCategory Current()
        {
            return (AnswerFriendsRequestCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // AnswerFriendsRequest request counters

		[XomPerformanceCounterAttr(
			"AnswerFriendsRequest requests/sec", 
			"AnswerFriendsRequest requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"AnswerFriendsRequest total", 
			"Total AnswerFriendsRequest requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"AnswerFriendsRequest failures/sec", 
			"Number of unsuccessful results returned by AnswerFriendsRequest per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"AnswerFriendsRequest total failures", 
			"Total number unsuccessful results returned by AnswerFriendsRequest in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"AnswerFriendsRequest avg. execution time", 
			"AnswerFriendsRequest Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}

    public class AnswerFriendsRequestByGamertagCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public AnswerFriendsRequestByGamertagCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            AnswerFriendsRequestByGamertagCountersCategory.Current().RequestsPerSecond.Increment();
            AnswerFriendsRequestByGamertagCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                AnswerFriendsRequestByGamertagCountersCategory.Current().FailuresPerSecond,
                AnswerFriendsRequestByGamertagCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            AnswerFriendsRequestByGamertagCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            AnswerFriendsRequestByGamertagCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                AnswerFriendsRequestByGamertagCountersCategory.Current().FailuresPerSecond.Increment();
                AnswerFriendsRequestByGamertagCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: AnswerFriendsRequestByGamertag", "Service Tunnel: AnswerFriendsRequestByGamertag" )]
	public class AnswerFriendsRequestByGamertagCountersCategory : XomPerformanceCounterCategory
	{
		
        static public AnswerFriendsRequestByGamertagCountersCategory _instance = new AnswerFriendsRequestByGamertagCountersCategory();
        static public AnswerFriendsRequestByGamertagCountersCategory Current()
        {
            return (AnswerFriendsRequestByGamertagCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // AnswerFriendsRequestByGamertag request counters

		[XomPerformanceCounterAttr(
			"AnswerFriendsRequestByGamertag requests/sec", 
			"AnswerFriendsRequestByGamertag requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"AnswerFriendsRequestByGamertag total", 
			"Total AnswerFriendsRequestByGamertag requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"AnswerFriendsRequestByGamertag failures/sec", 
			"Number of unsuccessful results returned by AnswerFriendsRequestByGamertag per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"AnswerFriendsRequestByGamertag total failures", 
			"Total number unsuccessful results returned by AnswerFriendsRequestByGamertag in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"AnswerFriendsRequestByGamertag avg. execution time", 
			"AnswerFriendsRequestByGamertag Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}

    
    public class RemoveFriendCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public RemoveFriendCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            RemoveFriendCountersCategory.Current().RequestsPerSecond.Increment();
            RemoveFriendCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                RemoveFriendCountersCategory.Current().FailuresPerSecond,
                RemoveFriendCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            RemoveFriendCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            RemoveFriendCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                RemoveFriendCountersCategory.Current().FailuresPerSecond.Increment();
                RemoveFriendCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: RemoveFriend", "Service Tunnel: RemoveFriend" )]
	public class RemoveFriendCountersCategory : XomPerformanceCounterCategory
	{
		
        static public RemoveFriendCountersCategory _instance = new RemoveFriendCountersCategory();
        static public RemoveFriendCountersCategory Current()
        {
            return (RemoveFriendCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // RemoveFriend request counters

		[XomPerformanceCounterAttr(
			"RemoveFriend requests/sec", 
			"RemoveFriend requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"RemoveFriend total", 
			"Total RemoveFriend requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"RemoveFriend failures/sec", 
			"Number of unsuccessful results returned by RemoveFriend per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"RemoveFriend total failures", 
			"Total number unsuccessful results returned by RemoveFriend in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"RemoveFriend avg. execution time", 
			"RemoveFriend Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class SendGameInviteCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public SendGameInviteCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            SendGameInviteCountersCategory.Current().RequestsPerSecond.Increment();
            SendGameInviteCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                SendGameInviteCountersCategory.Current().FailuresPerSecond,
                SendGameInviteCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            SendGameInviteCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            SendGameInviteCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                SendGameInviteCountersCategory.Current().FailuresPerSecond.Increment();
                SendGameInviteCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: SendGameInvite", "Service Tunnel: SendGameInvite" )]
	public class SendGameInviteCountersCategory : XomPerformanceCounterCategory
	{
		
        static public SendGameInviteCountersCategory _instance = new SendGameInviteCountersCategory();
        static public SendGameInviteCountersCategory Current()
        {
            return (SendGameInviteCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // SendGameInvite request counters

		[XomPerformanceCounterAttr(
			"SendGameInvite requests/sec", 
			"SendGameInvite requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"SendGameInvite total", 
			"Total SendGameInvite requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"SendGameInvite failures/sec", 
			"Number of unsuccessful results returned by SendGameInvite per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"SendGameInvite total failures", 
			"Total number unsuccessful results returned by SendGameInvite in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"SendGameInvite avg. execution time", 
			"SendGameInvite Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class RevokeGameInviteCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public RevokeGameInviteCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            RevokeGameInviteCountersCategory.Current().RequestsPerSecond.Increment();
            RevokeGameInviteCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                RevokeGameInviteCountersCategory.Current().FailuresPerSecond,
                RevokeGameInviteCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            RevokeGameInviteCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            RevokeGameInviteCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                RevokeGameInviteCountersCategory.Current().FailuresPerSecond.Increment();
                RevokeGameInviteCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: RevokeGameInvite", "Service Tunnel: RevokeGameInvite" )]
	public class RevokeGameInviteCountersCategory : XomPerformanceCounterCategory
	{
		
        static public RevokeGameInviteCountersCategory _instance = new RevokeGameInviteCountersCategory();
        static public RevokeGameInviteCountersCategory Current()
        {
            return (RevokeGameInviteCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // RevokeGameInvite request counters

		[XomPerformanceCounterAttr(
			"RevokeGameInvite requests/sec", 
			"RevokeGameInvite requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"RevokeGameInvite total", 
			"Total RevokeGameInvite requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"RevokeGameInvite failures/sec", 
			"Number of unsuccessful results returned by RevokeGameInvite per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"RevokeGameInvite total failures", 
			"Total number unsuccessful results returned by RevokeGameInvite in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"RevokeGameInvite avg. execution time", 
			"RevokeGameInvite Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class SetNotificationStateCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public SetNotificationStateCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            SetNotificationStateCountersCategory.Current().RequestsPerSecond.Increment();
            SetNotificationStateCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                SetNotificationStateCountersCategory.Current().FailuresPerSecond,
                SetNotificationStateCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            SetNotificationStateCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            SetNotificationStateCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                SetNotificationStateCountersCategory.Current().FailuresPerSecond.Increment();
                SetNotificationStateCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: SetNotificationState", "Service Tunnel: SetNotificationState" )]
	public class SetNotificationStateCountersCategory : XomPerformanceCounterCategory
	{
		
        static public SetNotificationStateCountersCategory _instance = new SetNotificationStateCountersCategory();
        static public SetNotificationStateCountersCategory Current()
        {
            return (SetNotificationStateCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // SetNotificationState request counters

		[XomPerformanceCounterAttr(
			"SetNotificationState requests/sec", 
			"SetNotificationState requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"SetNotificationState total", 
			"Total SetNotificationState requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"SetNotificationState failures/sec", 
			"Number of unsuccessful results returned by SetNotificationState per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"SetNotificationState total failures", 
			"Total number unsuccessful results returned by SetNotificationState in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"SetNotificationState avg. execution time", 
			"SetNotificationState Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class AddUserToMutelistCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public AddUserToMutelistCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            AddUserToMutelistCountersCategory.Current().RequestsPerSecond.Increment();
            AddUserToMutelistCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                AddUserToMutelistCountersCategory.Current().FailuresPerSecond,
                AddUserToMutelistCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            AddUserToMutelistCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            AddUserToMutelistCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                AddUserToMutelistCountersCategory.Current().FailuresPerSecond.Increment();
                AddUserToMutelistCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: AddUserToMutelist", "Service Tunnel: AddUserToMutelist" )]
	public class AddUserToMutelistCountersCategory : XomPerformanceCounterCategory
	{
		
        static public AddUserToMutelistCountersCategory _instance = new AddUserToMutelistCountersCategory();
        static public AddUserToMutelistCountersCategory Current()
        {
            return (AddUserToMutelistCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // AddUserToMutelist request counters

		[XomPerformanceCounterAttr(
			"AddUserToMutelist requests/sec", 
			"AddUserToMutelist requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"AddUserToMutelist total", 
			"Total AddUserToMutelist requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"AddUserToMutelist failures/sec", 
			"Number of unsuccessful results returned by AddUserToMutelist per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"AddUserToMutelist total failures", 
			"Total number unsuccessful results returned by AddUserToMutelist in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"AddUserToMutelist avg. execution time", 
			"AddUserToMutelist Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    public class RemoveUserFromMutelistCounters
    {
        private XomRequestTimeElapsed timeElapsed;
        
        public RemoveUserFromMutelistCounters()
        {
            StartRequest();
        }
                
        public void StartRequest()
        {
            timeElapsed = new XomRequestTimeElapsed();
            
            RemoveUserFromMutelistCountersCategory.Current().RequestsPerSecond.Increment();
            RemoveUserFromMutelistCountersCategory.Current().RequestsTotal.Increment();
            
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                RemoveUserFromMutelistCountersCategory.Current().FailuresPerSecond,
                RemoveUserFromMutelistCountersCategory.Current().FailuresTotal
            });
        }
        
        public void EndRequest(bool failed)
        {
            RemoveUserFromMutelistCountersCategory.Current().AvgExecTime.IncrementBy(timeElapsed.TimeElapsed);
            RemoveUserFromMutelistCountersCategory.Current().AvgExecTimeBase.Increment();   
            
            if (failed)
            {
                RemoveUserFromMutelistCountersCategory.Current().FailuresPerSecond.Increment();
                RemoveUserFromMutelistCountersCategory.Current().FailuresTotal.Increment();                
            }                
        }
    }
    
    
    
    
	[XomPerformanceCounterCategoryAttr( "Svc Tunnel: RemoveUserFromMutelist", "Service Tunnel: RemoveUserFromMutelist" )]
	public class RemoveUserFromMutelistCountersCategory : XomPerformanceCounterCategory
	{
		
        static public RemoveUserFromMutelistCountersCategory _instance = new RemoveUserFromMutelistCountersCategory();
        static public RemoveUserFromMutelistCountersCategory Current()
        {
            return (RemoveUserFromMutelistCountersCategory)_instance.GetInstance(XomPerformanceCounterCategory.DEFAULT_INSTANCE);
        }
        
       
        // RemoveUserFromMutelist request counters

		[XomPerformanceCounterAttr(
			"RemoveUserFromMutelist requests/sec", 
			"RemoveUserFromMutelist requests per second", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter RequestsPerSecond;

		[XomPerformanceCounterAttr(
			"RemoveUserFromMutelist total", 
			"Total RemoveUserFromMutelist requests recorded in the the current AppDomain.", 
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter RequestsTotal;
        
        [XomPerformanceCounterAttr(
			"RemoveUserFromMutelist failures/sec", 
			"Number of unsuccessful results returned by RemoveUserFromMutelist per second in the current AppDomain.", 
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter FailuresPerSecond;

		[XomPerformanceCounterAttr(
			"RemoveUserFromMutelist total failures", 
			"Total number unsuccessful results returned by RemoveUserFromMutelist in the current AppDomain.",  
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter FailuresTotal;

        [XomPerformanceCounterAttr(
			"RemoveUserFromMutelist avg. execution time", 
			"RemoveUserFromMutelist Total requests failed", 
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter AvgExecTime;
	    
    	[XomPerformanceCounterAttr(
			"Avg waiting time base", 
			"Avg waiting time base", 
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter AvgExecTimeBase;

		        
  	}
    
    
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\stfeapp.cs ===
using System;
using System.IO;
using System.Web;
using System.Web.Caching;
using System.Threading;
using System.Text;
using System.Reflection;
using System.Diagnostics;
using System.Collections;
using System.Security.Principal;
using System.Web.Services.Protocols;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;

[assembly: XomIisInstallerAttribute( Interface.svctunnel )]
[assembly: ConfigAttribute(Component.svctunnel)]

namespace xonline.server.svctunnel.fd
{
    public class SvcTunnelFrontEndApp : SoapFrontEndApp
    {
        public override void Application_Start(object sender, EventArgs e)
        {
            base.Application_Start(sender, e);
            HeartbeatMonitor.Start();
        }

        
        public override void Application_End(object sender, EventArgs e)
        {
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "\r\n" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "==================================" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "Application End, " + DateTime.Now );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "==================================" );

            XomLoggingControl.Close();
            
          Xom.NtEvent(XEvent.Id.SVCTUNNEL_INFO_1, "The app domain has ended.\r\n" + AppDomain.CurrentDomain.ToString());
        
            PerformanceCounter.CloseSharedResources();
        }
    

        public override void Application_BeginRequest(object sender, EventArgs e)
        {
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "---------" + DateTime.Now.ToString() + "--------" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "BeginRequest(" + (HttpContext.Current == null ? "null" : HttpContext.Current.Request.RawUrl) + ")" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "" );
        
        }
        
        public override void Application_EndRequest(object sender, EventArgs e)
        {
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "EndRequest(" + (HttpContext.Current == null ? "null" : HttpContext.Current.Request.RawUrl) + ")" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "---------" + DateTime.Now.ToString() + "--------" );
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_LOW, "" );
        }
        
        public void Application_OnError() 
        {
            StringBuilder eventText = new StringBuilder();
            byte[] postbuf = null;
            XEvent.Id eventId = XEvent.Id.SVCTUNNEL_CODE_2;
            
            Xom.Trace(XomAreaName.soaptrace, LogLevel.L_ERROR, "Application_OnError fired!");
            
            try
            {
                Exception e;
                int i = 0;
    
                if (Context == null)
                {                
                    string evtText = String.Format("SOAP Error with no context\r\n\r\n{0}",
                                                   Environment.StackTrace);
                  Xom.NtEvent( XEvent.Id.SVCTUNNEL_CODE_3, evtText );
                    return;
                }
                
                e = Context.Error;

                eventText.Append(e.Message + "\r\n");
                
                eventText.Append("------------\r\n");

                i = 0;
                while( e != null ) 
                {
                    i++;
                    eventText.Append("Event #" + (i) + ":\r\n");
                    eventText.Append(e.ToString());
                    eventText.Append("\r\n");

                    e = e.InnerException;
                }
                
                try
                {
                    if (Context.Items["NoPostBufferLog"] == null)
                    {
                        postbuf = new byte[Context.Request.InputStream.Length];
                        Context.Request.InputStream.Seek(0, SeekOrigin.Begin);
                        Context.Request.InputStream.Read(postbuf, 0, postbuf.Length);
                    }
                }
                catch
                {
                    // well, we tried
                    postbuf = null;
                }
            }
            finally
            {
                Xom.NtDataDynEvent( eventId, postbuf, eventText.ToString() );
            }
            
        }
            
    }
    
    public class SvcTunnelExtension : SoapExtension
    {
        public override Stream ChainStream( Stream stream )
        {
            return stream;
        }

        public override object GetInitializer(LogicalMethodInfo methodInfo, SoapExtensionAttribute attribute) 
        {
            return this;
        }

        public override object GetInitializer(Type WebServiceType) 
        {
          return this;    
        }

        public override void Initialize(object initializer) 
        {
        }
        
        public override void ProcessMessage(SoapMessage message) 
        {
            if (message.Stage == SoapMessageStage.AfterSerialize && message.Exception != null)
            {
                SoapException se = (SoapException)message.Exception;
                /*
                if (se.Code == SoapException.ClientFaultCode)
                {
                    // it's the client's fault, don't log it
                    return;
                }
                */
                    
                SvcTunnelException.LogException(message.Exception);
            }
        }
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\stutil.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;
using System.Xml.Serialization;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.server.webcache.common;

namespace xonline.server.svctunnel.fd
{
    
    public class STUtil
    {
        
        public static void VerifyUserId(ulong userId)
        {
            CallSource.Check(VirtualInterface.svctunnel);
            
            if (AuthToggle.Off && 
                (HttpContext.Current.Request.Headers[XHttpHdr.HTTPAUTHDATA] == null ||
                 HttpContext.Current.Request.Headers[XHttpHdr.HTTPAUTHDATA] == ""))
            {
                VerifyUserIdIsValid(userId);
            }
            else
            {
                
                SGInfo sg;
                
                if (AuthToggle.Off) 
                    sg = new SGInfo();
                else                
                    sg = SGInfo.Current;
                
                if (!sg.IsUserPresent(userId))
                {
                    throw new SvcTunnelException(HResult.XONLINE_E_USER_NOT_LOGGED_ON, XEvent.Id.SVCTUNNEL_PARTNER_2,
                            "Unknown user " + userId.ToString("x"),
                            "Unknown user " + userId.ToString("x"));
                }                
            }
        }

        public static void VerifyTitleId(uint titleId)
        {
            CallSource.Check(VirtualInterface.svctunnel);
            
            if (AuthToggle.Off && 
                HttpContext.Current.Request.Headers[XHttpHdr.HTTPAUTHDATA] == null)
            {
                return;
            }
                    
            SGInfo sg;
            
            if (AuthToggle.Off) 
                sg = new SGInfo();
            else                
                sg = SGInfo.Current;
            
            if (sg.TitleId != titleId)
            {
                throw new SvcTunnelException(HResult.XONLINE_E_INVALID_TITLE_ID, XEvent.Id.SVCTUNNEL_PARTNER_3,
                        "titleid " + titleId.ToString("x") + " dosen't match info in SG header (" + sg.TitleId.ToString("x") + ")",
                        "titleid " + titleId.ToString("x") + " dosen't match info in SG header (" + sg.TitleId.ToString("x") + ")");
            }                
                
        }
        
        public static void VerifyUserIdIsValid(ulong userId)
        {
            string gamertag = XCache.LookupGamerTag(userId);

            if (XCache.IsInvalidGamertag(gamertag))
            {
                throw new SvcTunnelException(HResult.XONLINE_E_USER_NOT_LOGGED_ON, XEvent.Id.SVCTUNNEL_PARTNER_4, 
                        "Unknown user 0x" + userId.ToString("x"),
                        "Unknown user 0x" + userId.ToString("x"));
            }
        }

        public static void VerifyParam(bool test, string msg)
        {
            if (test == false)
            {
                throw new SvcTunnelException(HResult.E_INVALIDARG, XEvent.Id.SVCTUNNEL_PARTNER_5, msg, msg);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\SvcTunnelException.cs ===
//
// SvcTunnelException.cs
//
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//

using System;
using System.Text;
using System.Web;
using System.Xml;
using System.Web.Services.Protocols;
using System.IO;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;
using xonline.server.webcache.common;

namespace xonline.server.svctunnel.fd
{
    public class SvcTunnelException : SoapException
    {
        public string InternalMessage;
        public XEvent.Id EventId = 0;
        public HResult Hr = 0;
        
        public SvcTunnelException(HResult hr, XEvent.Id eventId, string internalMessage) : base(GetExceptionMessage(hr), GetFaultCode(hr))
        {
            Hr = hr;
            EventId = eventId;
            InternalMessage = internalMessage;
        }

        public SvcTunnelException(HResult hr, XEvent.Id eventId, string internalMessage, string clientMessage) : base(FormatExceptionMessage(hr, clientMessage), GetFaultCode(hr))
        {
            Hr = hr;
            EventId = eventId;
            InternalMessage = internalMessage;
        }
        
        
        public static string GetExceptionMessage(HResult hr)
        {
            string text;
            
            switch(hr)
            {
            case xonline.common.service.HResult.E_INVALIDARG:
                text = "An invalid argument value was specified.";
                break;
                
            case xonline.common.service.HResult.XONLINE_E_USER_NOT_LOGGED_ON:
                text = "A user specified as a parameter didn't exist in the provided SGInfo header.";
                break;
                
            case xonline.common.service.HResult.XONLINE_E_NOTIFICATION_USER_NOT_FOUND:
                text = "The specified friend is not one who sent a friend request.";
                break;
                
            case xonline.common.service.HResult.XONLINE_E_NOTIFICATION_FRIEND_PENDING:
                text = "The current user previously sent a Friend request to the specified user, but has not yet received a response.";
                break;
                
            default:
                text = "An internal server error has occurred.   Notify the Xbox Live Operations team.";
                break;
                
            }
            
            return FormatExceptionMessage(hr, text);
        }

        public static string FormatExceptionMessage(HResult hr, string message)
        {
            return "<Error HResult=\"" + hr + "\">" + message + "</Error>";
        }
        
        public static XmlQualifiedName GetFaultCode(HResult hr)
        {
            if (hr == xonline.common.service.HResult.E_INVALIDARG ||
                hr == xonline.common.service.HResult.XONLINE_E_USER_NOT_LOGGED_ON ||
                hr == xonline.common.service.HResult.XONLINE_E_NOTIFICATION_USER_NOT_FOUND ||
                hr == xonline.common.service.HResult.XONLINE_E_NOTIFICATION_FRIEND_PENDING)
            {
                return SoapException.ClientFaultCode;
            }
            
            return SoapException.ServerFaultCode;    
        }

        public static void LogException(Exception e)
        {
            StringBuilder eventText = new StringBuilder();
            byte[] postbuf = null;
            XEvent.Id eventId = XEvent.Id.SVCTUNNEL_CODE_5;
            
            try
            {
                int i = 0;
                
                while (e is SoapException && e.InnerException != null)
                {
                    e = e.InnerException;
                }

                if (e is SvcTunnelException)
                {
                    eventText.Append(((SvcTunnelException)e).InternalMessage + "\r\n");
                }
                else
                {
                    eventText.Append(e.Message+ "\r\n");
                }    
                
                eventText.Append("------------\r\n");
                
                i = 0;
                while( e != null ) 
                {
                    i++;
                    eventText.Append("Event #" + (i) + ":\r\n");
                    
                    if (e is SvcTunnelException)
                    {
                        eventText.Append(((SvcTunnelException)e).InternalMessage + "\r\n");
                    }
                    else
                    {
                        eventText.Append(e.Message+ "\r\n");
                    }    
                    
                    eventText.Append(e.StackTrace.ToString());
                    eventText.Append("\r\n");

                    e = e.InnerException;
                }
                
                try
                {
                    if (HttpContext.Current.Items["NoPostBufferLog"] == null)
                    {
                        postbuf = new byte[HttpContext.Current.Request.InputStream.Length];
                        HttpContext.Current.Request.InputStream.Seek(0, SeekOrigin.Begin);
                        HttpContext.Current.Request.InputStream.Read(postbuf, 0, postbuf.Length);
                    }
                }
                catch
                {
                    // well, we tried
                    postbuf = null;
                }
            }
            finally
            {
                Xom.NtDataDynEvent( eventId, postbuf, eventText.ToString() );
            }
            
        }
        
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\svctHealth.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;


[assembly: XomAreaDefinition(XomAreaName.stlog)]
[assembly: XomAreaDefinition(XomAreaName.trace)]

namespace xonline.server.svctunnel.fd
{
    [WebService(Namespace="http://svctunnel.xboxlive.com/Health/")]
    public class Health : System.Web.Services.WebService
    {   
        [WebMethod]
        public void Heartbeat()
        {
            HeartbeatMonitor.ResetTimer();            
        }

        
        [WebMethod]
        public string VerifyConfig()
        {
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_ERROR;
            ulong userId = 1234;
            
            try
            {
                CallSource.Check(VirtualInterface.svctunnel);
                                
                
                
                // make sure we can write to the event log
                Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Verifing ability to write to the event log..");
                Xom.NtEvent(XEvent.Id.SVCTUNNEL_PARTNER_6, "Health.VerifyConfig() called.   Event logging ability verified.");
                
                // make sure we can talk to xpnfd
                Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Verifing ability to talk to P&N..");
                WebFriendsRequest pnreq = new WebFriendsRequest();
                pnreq.puid = userId;
                
                XRLObject2 xrlo = pnreq;

                string authData = new HTTPAuthData(0, 0, 0, 0, XOn.DASH_TITLE_ID, 0, 0).GetBase64EncodedString();
                byte[] respData;
                
                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, pnreq.GetXRL(), -1, authData, (byte[])pnreq, out respData);
                // no need to check hr, this will throw an exception if we can't talk to p&n
                
                Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Requesting WEB_FRIENDS returned hr = " + hr);

                // make sure we can talk to xuacs
                GetPaymentInfoRequest xuacsReq = new GetPaymentInfoRequest();
                
                xuacsReq.userPuid = userId;
                
                hr = XRLUtil.PostXrlRequest(XOService.User_Account, xuacsReq.Xrl, -1, authData, (byte[])xuacsReq, out respData);
                // no need to check hr, this will throw an exception if we can't talk to xuacs
                
                Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "XUACS request returned hr = " + hr);
                
                StringLookupRequest strReq = new StringLookupRequest();
                strReq.dwTitleID = XOn.DASH_TITLE_ID;
                strReq.wLanguage = 1;
                strReq.wNumStrings = 1;
                strReq.rgdwStringIDs = new uint[] { XOn.DASH_TITLE_ID };

                hr = XRLUtil.PostXrlRequest(XOService.StringService, strReq.GetXRL(), -1, authData, (byte[])strReq, out respData);
                // no need to check hr, this will throw an exception if we can't talk to the string service

                // make sure xcache works
                XCache .LookupPUID("Q");
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                        "VERIFYCONFIG", hr.ToString()
                      }));
            }

            return "OK!";
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\fd\Presence.cs ===
using System;
using System.Collections;
using System.ComponentModel;
using System.Data;
using System.Data.SqlClient;
using System.Diagnostics;
using System.IO;
using System.Text;
using System.Web;
using System.Web.Services;
using System.Web.Caching;
using System.Threading;

using xonline.common.config;
using xonline.common.installer;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.server.mgmt.soap;

namespace xonline.server.svctunnel.fd
{
    public class Friend
    {
        public ulong userId;
        public string gamertag;
        public uint friendState;
        public DateTime gameinviteTime;
        public ulong sessionID;
        public uint titleID;
        public string titleName;
        public byte[] StateData;
    }

    [WebService(Namespace="http://svctunnel.xboxlive.com/Presence/")]
    public class Presence : System.Web.Services.WebService
    {


        [WebMethod]
        public Friend[] GetFriends(ulong userId, uint language)
        {
            GetFriendsCounters counters = new GetFriendsCounters();
            Friend[] friends = null;
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_FRIENDS_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                friends = GetFriendsImpl(userId, language);
                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_10, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GFR",
                              hr.ToString(),
                              userId.ToString("x16"),
                              language.ToString("x"),
                              friends == null ? "0" : friends.Length.ToString("x")
                         }));

                counters.EndRequest(HResult.Failed(hr));
            }

            return friends;
        }

        [WebMethod]
        public Friend[] GetFriendsFromList(ulong userId, ulong[] friendUserIds, uint language)
        {
            GetFriendsFromListCounters counters = new GetFriendsFromListCounters();
            Friend[] allFriends = null;
            Friend[] friends = null;

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_FRIENDS_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                allFriends = GetFriendsImpl(userId, language);
                if (allFriends == null)
                {
                    return null;
                }


                // copy requested friends to subset list
                friends = new Friend[friendUserIds.Length];
                for (int i = 0; i < friendUserIds.Length; i++)
                {
                    for (int j = 0; j < allFriends.Length; j++)
                    {
                        if (allFriends[j].userId == friendUserIds[i])
                        {
                            friends[i] = allFriends[j];
                            break;
                        }
                    }

                    if (friends[i] == null)
                    {
                        throw new SvcTunnelException(HResult.E_INVALIDARG, 0, "",
                            "UserId " + friendUserIds[i].ToString("x") + " not found in user " + userId.ToString("x") + "'s friend list!");
                    }
                }

                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_11, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GFL",
                              hr.ToString(),
                              userId.ToString("x16"),
                              language.ToString("x"),
                              friends == null ? "0" : friends.Length.ToString("x")
                         }));

                counters.EndRequest(HResult.Failed(hr));
            }

            return friends;
        }


        [WebMethod]
        public Friend[] GetFriendsFromListByGamertag(ulong userId, string[] friendGamertags, uint language)
        {
            GetFriendsFromListByGamertagCounters counters = new GetFriendsFromListByGamertagCounters();
            Friend[] allFriends = null;
            Friend[] friends = null;
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_FRIENDS_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                allFriends = GetFriendsImpl(userId, language);
                if (allFriends == null)
                {
                    return null;
                }

                // copy requested friends to subset list
                friends = new Friend[friendGamertags.Length];
                for (int i = 0; i < friendGamertags.Length; i++)
                {
                    ulong friendUserId = XCache.LookupPUID(friendGamertags[i]);
                    if (friendUserId  == 0)
                    {
                        throw new SvcTunnelException(HResult.E_INVALIDARG, 0, "",
                            "Puid for Gamertag " + friendGamertags[i] + " not found!");
                    }

                    for (int j = 0; j < allFriends.Length; j++)
                    {
                        if (allFriends[j].userId == friendUserId)
                        {
                            friends[i] = allFriends[j];
                            break;
                        }
                    }

                    if (friends[i] == null)
                    {
                        throw new SvcTunnelException(HResult.E_INVALIDARG, 0, "",
                            "User " + friendGamertags[i] + " not found in user " + userId.ToString("x") + "'s friend list!");
                    }
                }
                hr = HResult.S_OK;
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_12, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "GFG",
                              hr.ToString(),
                              userId.ToString("x16"),
                              language.ToString("x"),
                              friends == null ? "0" : friends.Length.ToString("x")
                         }));

                counters.EndRequest(HResult.Failed(hr));
            }

            return friends;
        }


        private Friend[] GetFriendsImpl(ulong userId, uint language)
        {
            Friend[] friends = null;
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_FRIENDS_ERROR;
            WebAliveRequest waReq = new WebAliveRequest();
            WebAliveResponse waResp = new WebAliveResponse();
            WebFriendsRequest friendsReq = new WebFriendsRequest();
            WebFriendsResponse friendsResp = new WebFriendsResponse();
            EnumerateMessagesMsg msgReq = new EnumerateMessagesMsg();
            EnumerateMessagesReply msgResp = new EnumerateMessagesReply();
            XRLObject2 xrlo;
            ArrayList friendList = null;
            ArrayList retrieveTitleNames = null;
            Friend f;



            STUtil.VerifyUserId(userId);
            STUtil.VerifyParam(language > 0 && language < 10, "Invalid value for language: " + language);


            // launch message retrival request
            //
            Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Retrieving messages.. ");

            msgReq.qwUserID = userId;

            XrlRequest xrlreq = new XrlRequest();
            xrlreq.TargetVirtualInterface = VirtualInterface.xpnfd_messaging_int;
            xrlreq.Path = msgReq.GetXRL();
            xrlreq.RequestOb = msgReq;
            xrlreq.ResponseOb = msgResp;

            xrlreq.SendAsync();

            // call web alive before calling web friends
            //
            Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Calling Web Alive.. ");
            waReq.puid = userId;
            xrlo = waResp;
            hr = XRLUtil.PostXrlRequest(XOService.PresNotification, waReq.GetXRL(), waReq, ref xrlo);
            if (HResult.Succeeded(hr))
            {
                hr = waResp.hr;
            }
            
            if (HResult.Failed(hr))
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_18,
                            "Web Alive returned unexpected hr = " + hr);
            }

            // get friends list
            //
            Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Retrieving web friends.. ");
            friendsReq.puid = userId;
            xrlo = friendsResp;
            hr = XRLUtil.PostXrlRequest(XOService.PresNotification, friendsReq.GetXRL(), friendsReq, ref xrlo);

            // process friends list
            //
            if (HResult.Failed(hr))
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_2,
                            "Requesting list of friends returned unexpected hr = " + hr);
            }

            friendList = new ArrayList((int)friendsResp.cdwFriends);

            Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "User has " + friendsResp.cdwFriends + " friends.");

            // process message list
            //
            IVirtualInterfaceInfo msgviInfo = Config.GetVirtualInterface(VirtualInterface.xpnfd_messaging_int);

            xrlreq.AsyncWaitHandle.WaitOne(msgviInfo.Timeout, true);

            if(!xrlreq.IsCompleted)
            {
                throw new SvcTunnelException(HResult.XONLINE_E_SVCTUNNEL_TIMEOUT, XEvent.Id.SVCTUNNEL_COMM_3,
                            "A request to the presence front door timed out!",
                            "A request to the presence front door timed out!");
            }

            if (xrlreq.AsyncException != null)
            {
                throw new SvcTunnelException(HResult.XONLINE_E_SVCTUNNEL_ERROR, XEvent.Id.SVCTUNNEL_COMM_4,
                            "A request to the presence front door failed!",
                            "A request to the presence front door failed:\n" +  xrlreq.AsyncException.ToString());
            }


            if (HResult.Failed(xrlreq.Hr))
            {
                throw new SvcTunnelException(xrlreq.Hr, XEvent.Id.SVCTUNNEL_COMM_5,
                    "Requesting list of messages returned unexpected error " + xrlreq.Hr.ToString());
            }

            Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "User has " + friendList.Count + " friends and " + msgResp.cMessages + " messages");


            Hashtable frMap = new Hashtable(friendList.Count);
            for (int i = 0; i < friendsResp.cdwFriends; i++)
            {
                f = new Friend();
                f.userId = friendsResp.rgFriends[i].Puid;
                f.gamertag = friendsResp.rgFriends[i].szGamerTag;
                f.friendState = friendsResp.rgFriends[i].OnlineState;
                
                if ((f.friendState & PresDefs.P_STATE_FLAG_CLOAKED) != 0)
                {
                    f.friendState = PresDefs.P_STATE_FLAG_NONE;
                }
                if ((f.friendState & PresDefs.P_STATE_FLAG_ONLINE) != 0)
                {
                    f.titleID = friendsResp.rgFriends[i].TitleId;
                }
                else
                {
                    f.titleID = 0;
                }

                if (friendsResp.rgFriends[i].FriendStatus == PresDefs.P_BUDDY_STATUS_PENDING)
                {
                    f.friendState |= PresDefs.P_STATE_FLAG_SENTREQUEST;
                }
                if (friendsResp.rgFriends[i].FriendStatus == PresDefs.P_BUDDY_STATUS_REQUEST)
                {
                    f.friendState |= PresDefs.P_STATE_FLAG_RECEIVEDREQUEST;
                }

                f.StateData = friendsResp.rgFriends[i].StateData;

                if (f.titleID != 0)
                {
                    f.titleName = (string)HttpContext.Current.Cache[f.titleID.ToString("x") + "|" + language];

                    if (f.titleName == null)
                    {
                        Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Name of title id " + f.titleID.ToString("x") + " for language " + language + " not found in cache!    Adding to list of strings to retrieve");
                        if (retrieveTitleNames == null) retrieveTitleNames = new ArrayList();
                        if (retrieveTitleNames.IndexOf(f.titleID) == -1) retrieveTitleNames.Add(f.titleID);
                    }
                }

                int index = friendList.Add(f);
                frMap.Add(f.userId, index);
            }


            if (retrieveTitleNames != null)
            {
                Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Looking up title names..");
                V1TitleIDRequest strReq = new V1TitleIDRequest();
                strReq.wType = 1;
                strReq.wLanguage = (ushort)language;
                strReq.wNumTitles = (ushort)retrieveTitleNames.Count;
                strReq.rgdwTitleIDs = new uint[retrieveTitleNames.Count];
                retrieveTitleNames.CopyTo(strReq.rgdwTitleIDs);

                StringLookupResponse strResp = new StringLookupResponse();
                xrlo = strResp;

                hr = XRLUtil.PostXrlRequest(XOService.StringService, strReq.GetXRL(), strReq, ref xrlo);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_6, "Requesting title names returned unexpected hr = " + hr);
                }


                for (int i = 0; i < strResp.rgStringData.Length; i++)
                {
                    // if the returned string is blank, fill it in with the title id
                    if (strResp.rgStringData[i].szString == "")
                    {
                        switch (language)
                        {
                        case 1:
                            strResp.rgStringData[i].szString = "English";
                            break;

                        case 2:
                            strResp.rgStringData[i].szString = "Japanese";
                            break;

                        case 3:
                            strResp.rgStringData[i].szString = "German";
                            break;

                        case 4:
                            strResp.rgStringData[i].szString = "French";
                            break;

                        case 5:
                            strResp.rgStringData[i].szString = "Spanish";
                            break;

                        case 6:
                            strResp.rgStringData[i].szString = "Italian";
                            break;

                        case 7:
                            strResp.rgStringData[i].szString = "Korean";
                            break;

                        case 8:
                            strResp.rgStringData[i].szString = "Traditional Chinese";
                            break;

                        case 9:
                            strResp.rgStringData[i].szString = "Portuguese";
                            break;



                        default:
                            strResp.rgStringData[i].szString = "English";
                            break;
                        }

                        strResp.rgStringData[i].szString += " title 0x" + strReq.rgdwTitleIDs[i].ToString("x");
                    }


                    // store 'em in the cache for later
                    HttpContext.Current.Cache[strReq.rgdwTitleIDs[i].ToString("x") + "|" + language] = strResp.rgStringData[i].szString;
                }


                // update friends list
                for (int i = 0; i < friendList.Count; i++)
                {
                    f = (Friend)friendList[i];
                    if (f.titleID != 0 && f.titleName == null)
                    {
                        int index = retrieveTitleNames.IndexOf(f.titleID);
                        if (index == -1)
                        {
                            throw new SvcTunnelException(HResult.XONLINE_E_SVCTUNNEL_ERROR, XEvent.Id.SVCTUNNEL_CODE_0, "A missing title id was not requested from the string server as expected!");
                        }

                        f.titleName = strResp.rgStringData[index].szString;
                    }
                }

            }


            // combine messages + friends list
            //
            for (int i = 0; i < msgResp.rgMessages.Length; i++)
            {
                if (!frMap.Contains(msgResp.rgMessages[i].qwSenderID))
                {
                    Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Skipping message for non-friend 0x" + msgResp.rgMessages[i].qwSenderID.ToString("x") + " (" + msgResp.rgMessages[i].szSenderName + ")");
                    continue;
                }

                int n = (int)frMap[msgResp.rgMessages[i].qwSenderID];
                f = (Friend)friendList[n];

                switch(msgResp.rgMessages[i].bMessageType)
                {
                case MsgDefs.XONLINE_MSG_TYPE_FRIEND_REQUEST:
                    // TODO:  friend invite from your friend?  how exactly does this happen?
                    f.friendState |= PresDefs.P_STATE_FLAG_RECEIVEDREQUEST;
                    break;

                case MsgDefs.XONLINE_MSG_TYPE_GAME_INVITE:
                    f.sessionID = GetMessageSessionId(userId, msgResp.rgMessages[i].dwMessageID);
                    if (f.sessionID == 0xffffffffffffffff)
                    {
                        // message not found, assume invite was deleted.
                        f.sessionID = 0;
                    }
                    else
                    {
                        f.friendState |= PresDefs.P_STATE_FLAG_RECEIVEDINVITE;
                    }

                    break;

                default:
                    Xom.Trace(XomAreaName.trace, LogLevel.L_LOW, "Ignoring message with type " + msgResp.rgMessages[i].bMessageType);
                    break;
                }
            }


            if (friendList.Count > 0)
            {
                friends = new Friend[friendList.Count];
                friendList.CopyTo(friends);
            }

            return friends;
        }


        public static ulong GetMessageSessionId(ulong userId, uint messageId)
        {
            MessageDetailsMsg msgReq = new MessageDetailsMsg();
            MessageDetailsReply msgResp = new MessageDetailsReply();
            XRLObject2 xrlo = msgResp;
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GET_MESSAGES_ERROR;

            msgReq.qwUserID = userId;
            msgReq.dwMessageID = messageId;
            msgReq.dwSetFlags = MsgDefs.XONLINE_MSG_FLAG_READ;
            msgReq.dwUnsetFlags = 0;

            hr = XRLUtil.PostXrlRequest(VirtualInterface.xpnfd_messaging_int, msgReq.GetXRL(), SGInfo.ToBase64String(), msgReq, ref xrlo);
            hr = HResult.Failed(hr) ? hr : (HResult) msgResp.hr;


            if (hr == HResult.XONLINE_E_MESSAGE_INVALID_MESSAGE_ID)
            {
                // message deleted before we could get details.. (36882)
                return 0xffffffffffffffff;
            }

            if (HResult.Failed(hr))
            {

                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_7,
                    "Requesting message details for messsage id " + messageId + " returned unexpected hr = " + hr);
            }

            for (int i = 0; i < msgResp.details.rgProperties.Length; i++)
            {
                if (msgResp.details.rgProperties[i].wPropTag == MsgDefs.XONLINE_MSG_PROP_SESSION_ID)
                {
                    return BitConverter.ToUInt64(msgResp.details.rgbData, msgResp.details.rgProperties[i].wPropOffset);
                }
            }

            throw new SvcTunnelException(HResult.XONLINE_E_SVCTUNNEL_GET_MESSAGES_ERROR, XEvent.Id.SVCTUNNEL_CODE_1,
                    "Couldn't find XONLINE_MSG_PROP_SESSION_ID in message details!");
        }



        [WebMethod]
        public void SendFriendsRequest(ulong userId, ulong toUserId)
        {
            SendFriendsRequestCounters counters = new SendFriendsRequestCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                PresenceAddBuddyMsg req = new PresenceAddBuddyMsg();

                STUtil.VerifyUserId(userId);
                STUtil.VerifyUserIdIsValid(toUserId);
                STUtil.VerifyParam(userId != toUserId, "You can't send a friends request to yourself!");



                req.qwSenderID = userId;
                req.qwBuddyID = toUserId;
                req.szBuddyAcctName = "";

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_8,
                            "Sending friend request returned unexpected hr = " + hr);
                }


            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_13, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "SFR",
                              hr.ToString(),
                              userId.ToString("x16"),
                              toUserId.ToString("x16")
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }
        }


        [WebMethod]
        public void SendFriendsRequestByGamertag(string user, string toUser)
        {
            SendFriendsRequestByGamertagCounters counters = new SendFriendsRequestByGamertagCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                PresenceAddBuddyMsg req = new PresenceAddBuddyMsg();

                req.qwSenderID = XCache.LookupPUID(user);
                req.qwBuddyID = XCache.LookupPUID(toUser);
                req.szBuddyAcctName = "";

                STUtil.VerifyUserId(req.qwSenderID);

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_9,
                            "Sending friend request returned unexpected hr = " + hr);
                }


            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_14, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "SFG",
                              hr.ToString(),
                              user,
                              toUser
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }


        [WebMethod]
        public void AnswerFriendsRequest(ulong userId, ulong toUserId, uint answer)
        {
            AnswerFriendsRequestCounters counters = new AnswerFriendsRequestCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR;

            try
            {
                XRLObject2 req;
                string xrl;

                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);
                STUtil.VerifyUserIdIsValid(toUserId);
                STUtil.VerifyParam(userId != toUserId, "You can't answer a friends request to yourself!");



                if (answer == PresDefs.PINVITE_REPLY_YES)
                {
                    PresenceAcceptBuddyMsg theReq = new PresenceAcceptBuddyMsg();
                    theReq.qwUserID = userId;
                    theReq.qwBuddyID = toUserId;
                    xrl = theReq.GetXRL();

                    req = theReq;
                }
                else if (answer == PresDefs.PINVITE_REPLY_NO || answer == PresDefs.PINVITE_REPLY_NEVER)
                {
                    PresenceRejectBuddyMsg theReq = new PresenceRejectBuddyMsg();
                    theReq.qwUserID = userId;
                    theReq.qwBuddyID = toUserId;
                    theReq.fNever = (answer == PresDefs.PINVITE_REPLY_NEVER ? true : false);
                    xrl = theReq.GetXRL();

                    req = theReq;
                }
                else
                {
                    throw new SvcTunnelException(HResult.E_INVALIDARG, 0, "", "Invalid answer: " + answer);
                }

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, xrl, req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_10,
                            "Answer friend request returned unexpected hr " + hr);
                }


            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_15, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "AFR",
                              hr.ToString(),
                              userId.ToString("x16"),
                              toUserId.ToString("x16"),
                              answer.ToString("x")

                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }

        [WebMethod]
        public void AnswerFriendsRequestByGamertag(string user, string toUser, uint answer)
        {
            AnswerFriendsRequestByGamertagCounters counters = new AnswerFriendsRequestByGamertagCounters();
            HResult hr = HResult.XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR;

            try
            {
                XRLObject2 req;
                string xrl;
                CallSource.Check(VirtualInterface.svctunnel);

                ulong userId = XCache.LookupPUID(user);
                ulong toUserId = XCache.LookupPUID(toUser);

                STUtil.VerifyUserId(userId);
                STUtil.VerifyParam(userId != toUserId, "You can't send a friends request to yourself!");

                if (toUserId == 0)
                {
                    throw new SvcTunnelException(HResult.XONLINE_E_USER_NOT_LOGGED_ON, XEvent.Id.SVCTUNNEL_PARTNER_1,
                            "Unknown user " + toUser,
                            "Unknown user " + toUser);

                }


                if (answer == PresDefs.PINVITE_REPLY_YES)
                {
                    PresenceAcceptBuddyMsg theReq = new PresenceAcceptBuddyMsg();
                    theReq.qwUserID = userId;
                    theReq.qwBuddyID = toUserId;
                    xrl = theReq.GetXRL();

                    req = theReq;
                }
                else if (answer == PresDefs.PINVITE_REPLY_NO || answer == PresDefs.PINVITE_REPLY_NEVER)
                {
                    PresenceRejectBuddyMsg theReq = new PresenceRejectBuddyMsg();
                    theReq.qwUserID = userId;
                    theReq.qwBuddyID = toUserId;
                    theReq.fNever = (answer == PresDefs.PINVITE_REPLY_NEVER ? true : false);
                    xrl = theReq.GetXRL();

                    req = theReq;
                }
                else
                {
                    throw new SvcTunnelException(HResult.E_INVALIDARG, 0, "", "Invalid answer: " + answer);
                }

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, xrl, req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_11,
                            "Answer friend request returned unexpected hr = " + hr);
                }


            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_16, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "AFG",
                              hr.ToString(),
                              user,
                              toUser,
                              answer.ToString("x")

                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }



        [WebMethod]
        public void RemoveFriend(ulong userId, ulong removeUserId)
        {
            RemoveFriendCounters counters = new RemoveFriendCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_FRIEND_REQUEST_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);
                STUtil.VerifyUserIdIsValid(removeUserId);
                STUtil.VerifyParam(userId != removeUserId, "You can't remove yourself!");


                PresenceDeleteBuddyMsg req = new PresenceDeleteBuddyMsg();

                req.qwUserID = userId;
                req.qwBuddyID = removeUserId;

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_12,
                            "Remove friend returned unexpected hr = " + hr);
                }




            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_17, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "RFR",
                              hr.ToString(),
                              userId.ToString("x16"),
                              removeUserId.ToString("x16")
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }

        [WebMethod]
        public void SendGameInvite(uint titleId, ulong userId, ulong sessionId, ulong[] toUserIds)
        {
            SendGameInviteCounters counters = new SendGameInviteCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GAME_INVITE_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);
                STUtil.VerifyParam(sessionId != 0, "Invalid session id!");

                PresenceInviteUser2Msg req = new PresenceInviteUser2Msg();
                req.qwUserID = userId;
                req.qwSenderContext = 0;
                req.dwMessageFlags = 0;
                req.dwTitleID = titleId;
                req.cInvitees = (ushort)toUserIds.Length;
                req.rgqwInvitees = toUserIds;

                MessageDetails details = new MessageDetails();
                details.wPropCount = 1;
                details.cbData = 8;
                details.rgProperties = new MessageProperty[] { new MessageProperty() };
                details.rgProperties[0].wPropOffset = 0;
                details.rgProperties[0].wPropTag = MsgDefs.XONLINE_MSG_PROP_SESSION_ID;
                details.rgbData = BitConverter.GetBytes(sessionId);

                req.details = details;

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_13,
                            "Sending game invite returned unexpected hr = " + hr);
                }
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_18, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "SGI",
                              hr.ToString(),
                              userId.ToString("x16"),
                              sessionId.ToString("x16"),
                              "1"
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }
        }

        [WebMethod]
        public void RevokeGameInvite(ulong userId, ulong sessionId, ulong[] toUserIds)
        {
            RevokeGameInviteCounters counters = new RevokeGameInviteCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_GAME_INVITE_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);
                for (int i = 0; i < toUserIds.Length; i++)
                {
                    STUtil.VerifyUserIdIsValid(toUserIds[i]);
                    STUtil.VerifyParam(userId != toUserIds[i], "You can't revoke a game invite to yourself!");

                }

                PresenceCancelInviteMsg req = new PresenceCancelInviteMsg();
                req.qwUserID = userId;
                req.qwMatchSessionID = sessionId;
                req.cInvitees = (ushort)toUserIds.Length;
                req.rgqwInvitees = toUserIds;

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_14,
                            "Revoking game invite returned unexpected hr = " + hr);
                }
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_19, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "RGI",
                              hr.ToString(),
                              userId.ToString("x16"),
                              sessionId.ToString("x16"),
                              "1"
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }

        [WebMethod]
        public void SetNotificationState(ulong userId, ushort stateFlags, ulong sessionId, byte[] stateData)
        {
            SetNotificationStateCounters counters = new SetNotificationStateCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_SET_NOTIFICATION_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);

                STUtil.VerifyParam(0 == (stateFlags & ~(PresDefs.P_STATE_FLAG_ONLINE |
                                                        PresDefs.P_STATE_FLAG_PLAYING |
                                                        PresDefs.P_STATE_FLAG_VOICE |
                                                        PresDefs.P_STATE_FLAG_JOINABLE)),
                                        "Invalid value for stateFlags parameter!");

                STUtil.VerifyParam((stateFlags & PresDefs.P_STATE_FLAG_JOINABLE) == 0 || sessionId != 0,
                                        "Session must be non-zero if Joinable flag is set!");


                // Map not online to cloaked
                if (0 == (stateFlags & PresDefs.P_STATE_FLAG_ONLINE))
                {
                    stateFlags |= (ushort)(PresDefs.P_STATE_FLAG_ONLINE | PresDefs.P_STATE_FLAG_CLOAKED);
                }

                // fix for EA bug: too much state data.
                if (stateData.Length > PresDefs.MAX_TITLE_STATE_BYTES)
                {
                    // truncate the state data to the maximum number of bytes.
                    byte[] tooBig = stateData;
                    stateData = new byte[PresDefs.MAX_TITLE_STATE_BYTES];
                    for (int iByte = 0; iByte < PresDefs.MAX_TITLE_STATE_BYTES; iByte++)
                    {
                        stateData[iByte] = tooBig[iByte];
                    }

                    tooBig = null;
                }

                PresenceStateMsg req = new PresenceStateMsg();
                req.qwUserID = userId;
                req.dwState = stateFlags;
                req.qwMatchSessionID = sessionId;
                req.cbTitleStuff = (ushort)(stateData == null ? 0 : stateData.Length);
                req.rgbTitleStuff = stateData;

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_15,
                            "Setting notification state returned unexpected hr = " + hr);
                }
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_20, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "SNS",
                              hr.ToString(),
                              userId.ToString("x16"),
                              stateFlags.ToString("x4"),
                              sessionId.ToString("x16")
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }
        }

        [WebMethod]
        public void AddUserToMutelist(ulong userId, ulong userIdToAdd)
        {
            AddUserToMutelistCounters counters = new AddUserToMutelistCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_MUTE_USER_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);
                STUtil.VerifyParam(userId != userIdToAdd, "You can't mute yourself!");

                PresenceMuteUserMsg req = new PresenceMuteUserMsg();
                req.qwUserID = userId;
                req.qwBlockID = userIdToAdd;

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_16,
                            "Setting notification state returned unexpected hr = " + hr);
                }
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_21, e.ToString());
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "SNS",
                              hr.ToString(),
                              userId.ToString("x16"),
                              userIdToAdd.ToString("x16"),
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }

        [WebMethod]
        public void RemoveUserFromMutelist(ulong userId, ulong userIdToRemove)
        {
            RemoveUserFromMutelistCounters counters = new RemoveUserFromMutelistCounters();

            HResult hr = HResult.XONLINE_E_SVCTUNNEL_MUTE_USER_ERROR;

            try
            {
                CallSource.Check(VirtualInterface.svctunnel);

                STUtil.VerifyUserId(userId);
                STUtil.VerifyUserIdIsValid(userIdToRemove);


                PresenceUnmuteUserMsg req = new PresenceUnmuteUserMsg();
                req.qwUserID = userId;
                req.qwBlockID = userIdToRemove;

                hr = XRLUtil.PostXrlRequest(XOService.PresNotification, req.GetXRL(), req);
                if (HResult.Failed(hr))
                {
                    throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_COMM_17,
                            "Setting notification state returned unexpected hr = " + hr);
                }
            }
            catch (SvcTunnelException)
            {
                throw;
            }
            catch (XRLException e)
            {
                throw new SvcTunnelException(e.HResult, e.EventId, e.ToString());
            }
            catch (Exception e)
            {
                throw new SvcTunnelException(hr, XEvent.Id.SVCTUNNEL_CODE_22, e.ToString()); ;
            }
            finally
            {
                Xom.Log(XomAreaName.stlog, String.Join("|", new string[] {
                              "SNS",
                              hr.ToString(),
                              userId.ToString("x16"),
                              userIdToRemove.ToString("x16"),
                         }));

                // stop perf counters

                counters.EndRequest(HResult.Failed(hr));
            }

        }

        [WebMethod]
        public Friend[] Noop(ulong userId, ulong[] friendUserIds, uint language)
        {
            CallSource.Check(VirtualInterface.svctunnel);

            Friend[] friends = new Friend[10];
            for (int i = 0; i < friends.Length; i++)
            {
                friends[i] = new Friend();

                friends[i].gamertag = "friend";
                friends[i].userId = (ulong)i;
                friends[i].titleName = "";
            }

            return friends;
        }



    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\test\dvt\healthProxy.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="HealthSoap", Namespace="http://svctunnel.xboxlive.com/Health/")]
public class HealthProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public HealthProxy() {
        this.Url = "http://slamb0/svctunnel/health.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Health/Heartbeat", RequestNamespace="http://svctunnel.xboxlive.com/Health/", ResponseNamespace="http://svctunnel.xboxlive.com/Health/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void Heartbeat() {
        this.Invoke("Heartbeat", new object[0]);
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginHeartbeat(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("Heartbeat", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public void EndHeartbeat(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Health/VerifyConfig", RequestNamespace="http://svctunnel.xboxlive.com/Health/", ResponseNamespace="http://svctunnel.xboxlive.com/Health/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string VerifyConfig() {
        object[] results = this.Invoke("VerifyConfig", new object[0]);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginVerifyConfig(System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("VerifyConfig", new object[0], callback, asyncState);
    }
    
    /// <remarks/>
    public string EndVerifyConfig(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\test\dvt\sttest.cs ===
using System;
using System.Text;
using System.IO;
using System.Web.Services;
using System.Web.Services.Protocols;
using System.Collections;
using System.Threading;
using System.Net;
using System.Web;

using xonline.common.service;
using xonline.common.protocol;

public class sttest
{
    static Widgets.HealthOverride _healthProxy;
    static Widgets.AccountOverride _accountsProxy;
    static Widgets.PresenceOverride _presenceProxy;
    static Hashtable _params = new Hashtable();        
    
    public static void Main(string[] args)
    {
        string server = "localhost";
        
        if (args.Length > 0)
        {
            server = args[0];
        }    
        
        Console.WriteLine("SvcTunnel test");
        Console.WriteLine("Testing service located at " + server);
            
        
        Console.WriteLine("");
        
        Widgets.Server = server;
                                                                  
		_healthProxy = new Widgets.HealthOverride();
		_accountsProxy = new Widgets.AccountOverride();
		_presenceProxy = new Widgets.PresenceOverride();
        
        string user1 = null;
        string user2 = null;
        
        
        
        if (args.Length == 3)
        {
            user1 = args[1];
            user2 = args[2];
            
            AutoTest(user1, user2);
            Console.WriteLine("Done.");
            return;
        }
        
    

        
        bool done = false;
        while(!done)
        {
            
            try
            {
                Console.Write("Command: "); 
                string cmd = Console.ReadLine();

                switch(cmd.ToLower())
                {
                case "?":
                case "":
                    Help();
                    break;
                
                case "h1":  VerifyConfig();                   break;
                case "h2":  Heartbeat();                      break;
                case "h3":  TestSG(server);                   break;
                
                case "a1":  GetUserInfo();                    break;
                case "a2":  SendUserFeedback();               break;
                case "a3":  GetGamertag();                    break;
                case "a4":  GetUserId();                      break;
                
                
                case "p1":  GetFriends();                     break;
                case "p2":  GetFriendsFromListByGamertag();   break;
                case "p3":  GetFriendsFromList();             break;
                case "p4":  RemoveFriend();                   break;
                case "p5":  SendFriendsRequest();             break;
                case "p6":  SendFriendsRequestByGamertag();   break;
                case "p7":  AnswerFriendsRequest();           break;
                case "p8":  AnswerFriendsRequestByGamertag(); break;
                case "p9":  AddUserToMutelist();              break;
                case "p10": RemoveUserFromMutelist();         break;
                case "p11": SendGameInvite();                 break;
                case "p12": RevokeGameInvite();               break;
                case "p13": SetNotificationState();           break;
                
                case "x":
                case "q":
                case "quit":
                    done = true;
                    break;
                
                default:
                    Console.WriteLine("Unknown Command '" + cmd + "'");
                    Help();
                    break;
                }                    
                
                Console.WriteLine("");
                Console.WriteLine("Done.");
                
            }
            catch(Exception e)
            {
                Console.WriteLine("ERROR:");
                Console.WriteLine(e.ToString());
                Console.WriteLine("");
            }        
            
        }    
        
    }
    
    static string Prompt(string type, string name, string def)
    {
        Console.Write("Enter " + type + " value for " + name + " [" + def + "]: ");
        string val = Console.ReadLine();
        if (val == "") 
            val = def;
        
        _params[name] = val;
            
        return val;
    }
                

    static ulong GetUlongParam(string name)
    {
        string def = (string)_params[name];
        if (def == null) 
            def = "0";
      
        ulong lval = 0;
        string val = "";
        
        while (true)
        {
            try
            {
                val = Prompt("ulong", name, def);
                lval = Convert.ToUInt64(val);
                break;
            }
            catch
            {
                Console.WriteLine("Couldn't convert " + val + " to Int64!");
            }
        }
                    
        return lval;
    }
    
    
    static ulong[] GetUlongListParam(string name)
    {
        string def = (string)_params[name];
        if (def == null) 
            def = "0";

        string val = "";
        ulong[] ret;                
        while(true)
        {
            try
            {
                val = Prompt("ulong[]", name, def);
                string[] vallist = val.Split(new char[] {','});
                
                ret = new ulong[vallist.Length];
                for (int i = 0; i < ret.Length; i++)
                {
                    val = vallist[i].Trim();
                    ret[i] = Convert.ToUInt64(val);
                }
                    
                break;
            }
            catch
            {
                Console.WriteLine("Couldn't convert " + val + " to Int64!");
            }
        }
                    
        return ret;
    }
    
    
    static uint GetUintParam(string name)
    {
        string def = (string)_params[name];
        if (def == null) 
            def = "0";
            
        string val = "";
        uint ival;
        while(true)
        {
            try
            {
                val = Prompt("uint", name, def);
                ival = Convert.ToUInt32(val);
                break;
            }
            catch
            {
                Console.WriteLine("Couldn't convert " + val + " to Int64!");
            }
        }
                    
        return ival;
    }
        
    static string GetStringParam(string name)
    {
        string def = (string)_params[name];
        if (def == null) 
            def = "";
            
        return Prompt("string", name, def);
    }
        
    static string[] GetStringListParam(string name)
    {
        string def = (string)_params[name];
        if (def == null) 
            def = "";
            
        string val = Prompt("string[]", name, def);
        string[] vallist = val.Split(new char[] {','});
        
        return vallist;
    }
        
    static byte[] GetByteListParam(string name)
    {
        string def = (string)_params[name];
        if (def == null) 
            def = "";

        string val = "";
        byte[] bval = null;                
        while(true)
        {
            try
            {
                val = Prompt("byte[]", name, def);
                bval = ByteConvert.FromString(val);
                break;
            }
            catch
            {
                Console.WriteLine("Couldn't convert " + val + " to byte[]!");
            }
        }

        return bval;
    }        
                   
                   

    
    
    public static void VerifyConfig()
    {
        Console.WriteLine(_healthProxy.VerifyConfig());
    }        
    
    public static void Heartbeat()
    {
        _healthProxy.Heartbeat();
    }
    
    
    public static void GetUserInfo()
    { 
        ulong userId = GetUlongParam("userId");
        Widgets.User = userId;
        UserInfo info = _accountsProxy.GetUserInfo(userId);
        
        Console.WriteLine("UserInfo:\r\n");
        Console.WriteLine("    userId: " + info.userId);
        Console.WriteLine("    gamertag: " + info.gamertag);
        Console.WriteLine("    optOut: " + info.optOut);
        Console.WriteLine("    firstName: " + info.firstName);
        Console.WriteLine("    lastName: " + info.lastName);
        Console.WriteLine("    emailAddress: " + info.emailAddress);
        Console.WriteLine("    streetAddress: " + info.streetAddress);
        Console.WriteLine("    city: " + info.city);
        Console.WriteLine("    state: " + info.state);
        Console.WriteLine("    postalCode: " + info.postalCode);
        Console.WriteLine("    countryId: " + info.countryId);
    }
    
    public static void SendUserFeedback() 
    {
        uint titleId = GetUintParam("titleId");
        ulong userId = GetUlongParam("userId");
        ulong toUserId = GetUlongParam("toUserId");
        uint feedbackType = GetUintParam("feedbackType");
        string nickname = GetStringParam("nickname");
        
        Widgets.User = userId;
        
        _accountsProxy.SendUserFeedback(titleId, userId, toUserId, feedbackType, nickname);
    }
    
    public static void GetGamertag()
    {
        ulong userId = GetUlongParam("userId");
        Widgets.User = userId;
        
        Console.WriteLine(_accountsProxy.GetGamertag(userId));
    }
        
    public static void GetUserId()
    {
        string gamertag = GetStringParam("gamertag");
        
        Console.WriteLine(_accountsProxy.GetUserId(gamertag).ToString());
    }
    
    
    public static void GetFriends()
    {
        ulong userId = GetUlongParam("userId");
        uint language = GetUintParam("language");
        Widgets.User = userId;

        long start = DateTime.Now.Ticks;            
        
        Friend[] friends = _presenceProxy.GetFriends(userId, language);
        
        Console.WriteLine("Elapsed ticks: " + (DateTime.Now.Ticks - start));
        
        if (friends == null) 
        {
            Console.WriteLine("No friends.");
        }
        else
        {
            for (int i = 0; i < friends.Length; i++)
            {
                Console.WriteLine("Friend " + i);
                
                Console.WriteLine("    userId " + friends[i].userId);
                Console.WriteLine("    gamertag " + friends[i].gamertag);
                Console.WriteLine("    friendState " + friends[i].friendState);
                Console.WriteLine("    gameinviteTime " + friends[i].gameinviteTime);
                Console.WriteLine("    sessionID " + friends[i].sessionID);
                Console.WriteLine("    titleID " + friends[i].titleID);
                Console.WriteLine("    titleName " + friends[i].titleName);
                Console.WriteLine("    StateData " + ByteConvert.ToString(friends[i].StateData));
            }    
        }
            
    }
    
    public static void GetFriendsFromList()
    {
        ulong userId = GetUlongParam("userId");
        ulong[] userIds = GetUlongListParam("friendUserIds");
        uint language = GetUintParam("language");
        
        Widgets.User = userId;
        
        Friend[] friends = _presenceProxy.GetFriendsFromList(userId, userIds, language);
        if (friends == null) 
        {
            Console.WriteLine("No friends.");
        }
        
        for (int i = 0; i < friends.Length; i++)
        {
            Console.WriteLine("Friend " + i);
            
            Console.WriteLine("    userId " + friends[i].userId);
            Console.WriteLine("    gamertag " + friends[i].gamertag);
            Console.WriteLine("    friendState " + friends[i].friendState);
            Console.WriteLine("    gameinviteTime " + friends[i].gameinviteTime);
            Console.WriteLine("    sessionID " + friends[i].sessionID);
            Console.WriteLine("    titleID " + friends[i].titleID);
            Console.WriteLine("    titleName " + friends[i].titleName);
            Console.WriteLine("    StateData " + ByteConvert.ToString(friends[i].StateData));
        }    
    }
    
    public static void GetFriendsFromListByGamertag() 
    {
        ulong userId = GetUlongParam("userId");
        string[] friendGamertags = GetStringListParam("friendGamertags");
        uint language = GetUintParam("language");
        
        Widgets.User = userId;
        
        Friend[] friends = _presenceProxy.GetFriendsFromListByGamertag(userId, friendGamertags, language);
        if (friends == null) 
        {
            Console.WriteLine("No friends.");
        }
        
        for (int i = 0; i < friends.Length; i++)
        {
            Console.WriteLine("Friend " + i);
            
            Console.WriteLine("    userId " + friends[i].userId);
            Console.WriteLine("    gamertag " + friends[i].gamertag);
            Console.WriteLine("    friendState " + friends[i].friendState);
            Console.WriteLine("    gameinviteTime " + friends[i].gameinviteTime);
            Console.WriteLine("    sessionID " + friends[i].sessionID);
            Console.WriteLine("    titleID " + friends[i].titleID);
            Console.WriteLine("    titleName " + friends[i].titleName);
            Console.WriteLine("    StateData " + ByteConvert.ToString(friends[i].StateData));
        }    
    }
    
    public static void RemoveFriend()
    {
        ulong userId = GetUlongParam("userId");
        ulong removeUserId = GetUlongParam("removeUserId");
        
        Widgets.User = userId;
        
        _presenceProxy.RemoveFriend(userId, removeUserId);
    }
    
    public static void SendFriendsRequest()
    {
        ulong userId = GetUlongParam("userId");
        ulong toUserId = GetUlongParam("toUserId");
        
        Widgets.User = userId;
        
        _presenceProxy.SendFriendsRequest(userId, toUserId);            
    }
    
    
    public static void SendFriendsRequestByGamertag()
    {
        string user = GetStringParam("user");
        string toUser = GetStringParam("toUser");
        
        _presenceProxy.SendFriendsRequestByGamertag(user, toUser);
    }
    
    public static void AnswerFriendsRequest()
    {
        ulong userId = GetUlongParam("userId");
        ulong toUserId = GetUlongParam("toUserId");
        uint answer = GetUintParam("answer");
        
        Widgets.User = userId;
        
        _presenceProxy.AnswerFriendsRequest(userId, toUserId, answer);            
    }
    
    public static void AnswerFriendsRequestByGamertag()
    {
        string user = GetStringParam("user");
        string toUser = GetStringParam("toUser");
        uint answer = GetUintParam("answer");
        
        _presenceProxy.AnswerFriendsRequestByGamertag(user, toUser, answer);            
    }
    
    public static void AddUserToMutelist()
    {
        ulong userId = GetUlongParam("userId");
        ulong userIdToAdd = GetUlongParam("userIdToAdd");
        
        Widgets.User = userId;
        
        _presenceProxy.AddUserToMutelist(userId, userIdToAdd);            
    }
    
    public static void RemoveUserFromMutelist()
    {
        ulong userId = GetUlongParam("userId");
        ulong userIdToRemove = GetUlongParam("userIdToRemove");
        
        Widgets.User = userId;
        
        _presenceProxy.RemoveUserFromMutelist(userId, userIdToRemove);            
    }
    
    public static void SendGameInvite()
    {
        uint titleId = GetUintParam("titleId");
        ulong userId = GetUlongParam("userId");
        ulong sessionId = GetUlongParam("sessionId");
        ulong[] toUserIds = GetUlongListParam("toUserIds");

        Widgets.User = userId;
        
        _presenceProxy.SendGameInvite(titleId, userId, sessionId, toUserIds);            
    }
    
    public static void RevokeGameInvite()
    {
        ulong userId = GetUlongParam("userId");
        ulong sessionId = GetUlongParam("sessionId");
        ulong[] toUserIds = GetUlongListParam("toUserIds");

        Widgets.User = userId;
        
        _presenceProxy.RevokeGameInvite(userId, sessionId, toUserIds);            
        
    }
    
    public static void SetNotificationState()
    {
        ulong userId = GetUlongParam("userId");
        uint stateFlags = GetUintParam("stateFlags");
        ulong sessionId = GetUlongParam("sessionId");
        byte[] stateData = GetByteListParam("stateData");
        
        Widgets.User = userId;
        
        _presenceProxy.SetNotificationState(userId, (ushort)stateFlags, sessionId, stateData);            
    }
    
    
    public static void AutoTest(string user1, string user2)
    {
        ulong id1, id2;
        
        try
        {
            Console.WriteLine("Automatically testing for " + user1 + " and " + user2);
            
            Console.WriteLine("Getting ids..");
            id1 = _accountsProxy.GetUserId(user1);
            id2 = _accountsProxy.GetUserId(user2);

            Console.WriteLine("Getting ids by list..");
            ulong[] userIds = _accountsProxy.GetUserIdsFromList(new string[] { user1, user2 });
            Check(userIds.Length == 2);
            Check(userIds[0] == id1);
            Check(userIds[1] == id2);
            
            string[] gamertags = _accountsProxy.GetGamertagsFromList(userIds);
            Check(gamertags.Length == 2);
            Check(gamertags[0] == user1);
            Check(gamertags[1] == user2);
            
            
            ulong[] userids = _accountsProxy.GetUserIdsFromList(new string[] { user1, user2 });
            
            id1 = _accountsProxy.GetUserId(user1);
            id2 = _accountsProxy.GetUserId(user2);

            
            Console.WriteLine("Getting user info..");
            
            UserInfo info;
            info = _accountsProxy.GetUserInfo(id1);
            Console.WriteLine("UserInfo:\r\n");
            Console.WriteLine("    userId: " + info.userId);
            Console.WriteLine("    gamertag: " + info.gamertag);
            Console.WriteLine("    optOut: " + info.optOut);
            Console.WriteLine("    firstName: " + info.firstName);
            Console.WriteLine("    lastName: " + info.lastName);
            Console.WriteLine("    emailAddress: " + info.emailAddress);
            Console.WriteLine("    streetAddress: " + info.streetAddress);
            Console.WriteLine("    city: " + info.city);
            Console.WriteLine("    state: " + info.state);
            Console.WriteLine("    postalCode: " + info.postalCode);
            Console.WriteLine("    countryId: " + info.countryId);
            
            info = _accountsProxy.GetUserInfo(id2);
            Console.WriteLine("UserInfo:\r\n");
            Console.WriteLine("    userId: " + info.userId);
            Console.WriteLine("    gamertag: " + info.gamertag);
            Console.WriteLine("    optOut: " + info.optOut);
            Console.WriteLine("    firstName: " + info.firstName);
            Console.WriteLine("    lastName: " + info.lastName);
            Console.WriteLine("    emailAddress: " + info.emailAddress);
            Console.WriteLine("    streetAddress: " + info.streetAddress);
            Console.WriteLine("    city: " + info.city);
            Console.WriteLine("    state: " + info.state);
            Console.WriteLine("    postalCode: " + info.postalCode);
            Console.WriteLine("    countryId: " + info.countryId);
            
            Console.WriteLine("\r\n");
            
            Console.WriteLine("Testing negative cases..");
            
            try
            {
                info = _accountsProxy.GetUserInfo(0x234332);
                Check(false, "GetUserInfo succeeded when it shouldn't have!");
            }
            catch
            {
                Console.WriteLine("Passed..");
            }
            
            try
            {
                _accountsProxy.GetGamertag(0x234332);
                Check(false, "GetGamertag succeeded when it shouldn't have!");
            }
            catch
            {
                Console.WriteLine("Passed..");
            }
            
            try
            {
                _accountsProxy.GetUserId("??");
                Check(false, "GetUserId succeeded when it shouldn't have!");
            }
            catch
            {
                Console.WriteLine("Passed..");
            }
            
            
            
                
            Console.WriteLine("Getting frineds..");
            Friend[] friends;
            
            friends = _presenceProxy.GetFriends(id1, 1);
            if (friends != null)
            {
                Console.WriteLine("Friends found for " + user1 + ", removing them..");
                for (int i = 0; i < friends.Length; i++)
                {
                    if ((friends[i].friendState & PresDefs.P_STATE_FLAG_RECEIVEDREQUEST) != 0)
                    {
                        _presenceProxy.RemoveFriend(friends[i].userId, id1);
                    }
                    else
                    {
                        _presenceProxy.RemoveFriend(id1, friends[i].userId);
                    }    
                }
                friends = GetNumFriends(id1, 0);
            }
            
            Check(friends == null, "Friends not removed!");
            
            friends = _presenceProxy.GetFriends(id1, 1);
            if (friends != null)
            {
                Console.WriteLine("Friends found for " + user2 + ", removing them..");
                for (int i = 0; i < friends.Length; i++)
                {
                    if ((friends[i].friendState & PresDefs.P_STATE_FLAG_RECEIVEDREQUEST) != 0)
                    {
                        _presenceProxy.RemoveFriend(friends[i].userId, id1);
                    }
                    else
                    {
                        _presenceProxy.RemoveFriend(id1, friends[i].userId);
                    }    
                }
                
                friends = GetNumFriends(id2, 0);    
            }
            Check(friends == null, "Friends not removed!");
                    
            Console.WriteLine("\r\n");
            
            Console.WriteLine("Sending friend request by id..");
            _presenceProxy.SendFriendsRequest(id1, id2);
            
            Console.WriteLine("Verifying request sent..");
            friends = GetNumFriends(id2, 1);            
            Check(friends != null, "Friend request not received!");
            Check(friends[0].userId == id1, "Unexpected friend id!");
            Check(friends[0].friendState == 0x80000000, "unexpected friend state!");
            
            Console.WriteLine("\r\n");
            Console.WriteLine("Answering YES to friends request..");
            _presenceProxy.AnswerFriendsRequest(id2, id1, 1);
            
            Console.WriteLine("Verifying response sent..");
            friends = _presenceProxy.GetFriends(id1, 1);            
            Check(friends.Length == 1, "Friend response not received!");
            Check(friends[0].userId == id2, "Unexpected friend id!");
            
            friends = GetNumFriends(id2, 1);            
            Check(friends.Length == 1, "Friend response not received!");
            Check(friends[0].userId == id1, "Unexpected friend id!");
            Check((friends[0].friendState & PresDefs.P_STATE_FLAG_RECEIVEDREQUEST) == 0, "unexpected friend state!");
            
            Console.WriteLine("Removing friend..");
            _presenceProxy.RemoveFriend(id1, id2);
            Console.WriteLine("Verifying..");
            
            friends = _presenceProxy.GetFriends(id1, 1);            
            Check(friends == null);
            
            friends = GetNumFriends(id2, 0);            
            Check(friends == null);

            Console.WriteLine("\r\n");
            
            Console.WriteLine("Sending friend request by gamertag..");
            _presenceProxy.SendFriendsRequestByGamertag(user1, user2);
            
            Console.WriteLine("Verifying request sent from list..");
            friends = _presenceProxy.GetFriendsFromList(id2, new ulong[] { id1 }, 1);            
            Check(friends.Length == 1, "Friend request not received!");
            Check(friends[0].userId == id1, "Unexpected friend id!");
            Check(friends[0].friendState == 0x80000000, "unexpected friend state!");
            
            Console.WriteLine("\r\n");
            Console.WriteLine("Answering YES to friends request by gamertag..");
            _presenceProxy.AnswerFriendsRequestByGamertag(user2, user1, 1);
            
            Console.WriteLine("Verifying response sent from list by gamertag..");
            friends = _presenceProxy.GetFriendsFromListByGamertag(id1, new string[] { user2 }, 1);            
            Check(friends.Length == 1, "Friend response not received!");
            Check(friends[0].userId == id2, "Unexpected friend id!");
            
            friends = GetNumFriends(id2, 1);            
            Check(friends.Length == 1, "Friend response not received!");
            Check(friends[0].userId == id1, "Unexpected friend id!");
            
            Console.WriteLine("Removing friend..");
            _presenceProxy.RemoveFriend(id1, id2);
            Console.WriteLine("Verifying..");
            
            friends = _presenceProxy.GetFriends(id1, 1);            
            Check(friends == null);
            
            friends = GetNumFriends(id2, 0);            
            Check(friends == null);
            
            
            Console.WriteLine("\r\n");
            
            Console.WriteLine("Sending friend request..");
            _presenceProxy.SendFriendsRequest(id1, id2);
            
            Console.WriteLine("Answering NO to friends request..");
            _presenceProxy.AnswerFriendsRequest(id2, id1, 0);
            
            Console.WriteLine("Verifying..");
            
            friends = GetNumFriends(id1, 0);            
            Check(friends == null);
            
            friends = GetNumFriends(id2, 0);            
            Check(friends == null);

            Console.WriteLine("\r\n");
            
            Console.WriteLine("Sending friend request..");
            _presenceProxy.SendFriendsRequest(id1, id2);
            
            friends = GetNumFriends(id2, 1);            
            Check(friends.Length == 1);
            
            Console.WriteLine("Answering BLOCK to friends request..");
            _presenceProxy.AnswerFriendsRequest(id2, id1, 2);
            
            Console.WriteLine("Verifying..");
            
            friends = GetNumFriends(id1, 0);            
            Check(friends == null);
            
            friends = GetNumFriends(id2, 0);            
            Check(friends == null);

            Console.WriteLine("Sending friend request again..");
            _presenceProxy.SendFriendsRequest(id1, id2);
            
            friends = GetNumFriends(id2, 0);            
            Check(friends == null);

            Console.WriteLine("Verified.  Sending again to unblock..");
            _presenceProxy.SendFriendsRequest(id2, id1);
            
            friends = GetNumFriends(id1, 1);            
            Check(friends.Length == 1);
            
            Console.WriteLine("Answering NO to friends request..");
            _presenceProxy.AnswerFriendsRequest(id1, id2, 0);
            

            Console.WriteLine("Multing user..");
            _presenceProxy.AddUserToMutelist(id1, id2);
            
            Console.WriteLine("unmuting user..");
            _presenceProxy.RemoveUserFromMutelist(id1, id2);
            
            Console.WriteLine("Sending friend request..");
            _presenceProxy.SendFriendsRequest(id1, id2);
            
            Console.WriteLine("Getting friends..");
            friends = GetNumFriends(id2, 1);
            Check(friends != null);
            
            Console.WriteLine("Answering YES to friends request..");
            _presenceProxy.AnswerFriendsRequest(id2, id1, 1);
            
            Console.WriteLine("Getting friends..");
            friends = GetNumFriends(id1, 1);
            Check(friends != null);
            
            Friend[] friends2 = GetNumFriends(id2, 1);
            Check(friends2 != null);
            
            Console.WriteLine("Setting notification state for id1..");
            _presenceProxy.SetNotificationState(id1, (ushort)PresDefs.P_STATE_FLAG_ONLINE, 0, null);

            Console.WriteLine("Setting notification state for id2..");
            _presenceProxy.SetNotificationState(id2, (ushort)PresDefs.P_STATE_FLAG_ONLINE, 0, null);
            
            
            Console.WriteLine("Checking for online status...");
            if ((friends[0].friendState != 0x00000000) &&
                (friends2[0].friendState != 0x00000000))
            {
                Console.WriteLine("Both friends are online!");
                Console.WriteLine("Sending game invites..");

                Console.WriteLine("Sending game invite..");
                _presenceProxy.SendGameInvite(friends[0].titleID, id1, 0xffffee00, new ulong[] { id2 });
                
                friends2 = GetNumFriends(id2, 1);
                Check((friends2[0].friendState & 0x08000000) == 0x08000000);
                
                Console.WriteLine("Revoking game invite..");
                                    
                _presenceProxy.RevokeGameInvite(id1, 0xffffee00, new ulong[] { id2 });
                
                friends2 = GetNumFriends(id2, 1);
                Check((friends2[0].friendState & 0x08000000) != 0x08000000);

                Console.WriteLine("Setting notification state to online, playing and voice ..");
                _presenceProxy.SetNotificationState(id1, (ushort) (PresDefs.P_STATE_FLAG_ONLINE | 
                                                         PresDefs.P_STATE_FLAG_PLAYING |
                                                         PresDefs.P_STATE_FLAG_VOICE), 
                                                     0x08000000ffffee01, null);

                
                friends2 = GetNumFriends(id2, 1);
                Check((friends2[0].friendState & PresDefs.P_STATE_FLAG_PLAYING) != 0);
                Check((friends2[0].friendState & PresDefs.P_STATE_FLAG_VOICE) != 0);
                
                Console.WriteLine("Setting notification state to offline..");
                _presenceProxy.SetNotificationState(id1, 0x00000000, 0xffffee01, null);
                
                friends2 = GetNumFriends(id2, 1);
                Check(friends2[0].friendState == 0x00000000);
                
                
                Console.WriteLine("Setting notification state to online and joinable..");
                _presenceProxy.SetNotificationState(id1,(ushort) (PresDefs.P_STATE_FLAG_ONLINE | PresDefs.P_STATE_FLAG_JOINABLE),
                                                     0x08000000ffffee01, null);

                
                friends2 = GetNumFriends(id2, 1);
                Check((friends2[0].friendState & PresDefs.P_STATE_FLAG_JOINABLE) != 0);
                Check((friends2[0].friendState & PresDefs.P_STATE_FLAG_VOICE) == 0);
                

                
            }
                
        }
        catch(Exception e)
        {
            Console.WriteLine("ERROR:");
            Console.WriteLine(e.ToString());
            Console.WriteLine("");
        }        

        
    }
    
    public static void Check(bool check)
    {
        if (!check) throw new Exception("Check failed!");
    }
    
    public static void Check(bool check, string msg)
    {
       if (!check) throw new Exception(msg);
    }   
        
    public static Friend[] GetNumFriends(ulong userId, int number)
    {
        Friend[] friends = null;
        
        for (int i = 0; i < 10; i++)
        {
            Console.WriteLine("Getting friends (attempt " + i + ")..");
            friends = _presenceProxy.GetFriends(userId, 1);            
            if (friends == null && number == 0)
                break;
            
            if (friends != null && friends.Length == number)
                break;
            
            Thread.Sleep(500);
        }
        
        return friends;
    }    
    
    
    public static string GetSgHeader(ulong userId)
    {
/*

        TitleId:    0x4D2

        TitleVer:   1

        TitleRgn:   FFFFFFFF

        XboxLibVer: 1.0.5936.1

        MachineId: 0x9B1FB1FB1FA4B

        ClientIP:  65.52.240.101

        U0: 0x9F5075075068E (676C,2.522337E-44)

        U1: 0x9F5075075068F (676C,2.662467E-44)

        SVC0: 0x1

        SVC1: 0x2

        SVC2: 0x4

        SVC3: 0x5

        SVC4: 0x6

        SVC5: 0x8

        SVC6: 0x9

        SVC7: 0xB

        SVC8: 0xD

        SVC9: 0xE

        SVC10: 0xF

        SVC11: 0x10

        no AltTitleID present

        

*/
        MemoryStream stream = new MemoryStream();
        BinaryWriter writer = new BinaryWriter(stream);
        
        
        writer.Write(new byte[] { 
            0x11,0x47,0x0f,0x00,0x01,0x00,0x00,0x00,
            0x0a,0xfe,0x0c,0x5d,0x04,0x03,0x00,0x82,
            0x47,0x36,0x00,0x0c,0x02,0x41,0x34,0xf0,
            0x65,0x0a,0xfe,0x01,0x01,0x00,0xc1,0xfb,
            0x39,0x4b,0xfa,0xb1,0x1f,0xfb,0xb1,0x09,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
            0x00,0x25,0x89,0xc9,0x3f,0xd3,0x68,0x0b,
            0x1a,0x2c,0xee,0x35,0xea,0xa8,0x10,0xc4,
            0x01,0x01,0x00,0x00,0x00,0x83,0x47,0xb8,
            0x00,0x02,0x00,0xb4,0x00,0x01,0x00,0x00,
            0x00,0x30,0x17,0x01,0x00,0xd2,0x04,0x00,
            0x00,0x01,0x00,0x00,0x00,0xff,0xff,0xff,
            0xff,0x4b,0xfa,0xb1,0x1f,0xfb,0xb1,0x09,
            0x00 } );
            
        writer.Write(userId);
        
        writer.Write(new byte[] {
            0x00,0x6c,0x67,0x00,0x00,0x8f,0x06,0x75,
            0x50,0x07,0xf5,0x09,0x00,0x6c,0x67,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x0f,0x00,0x00,0x00,0x01,0x00,0x00,
            0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,
            0x00,0x05,0x00,0x00,0x00,0x06,0x00,0x00,
            0x00,0x08,0x00,0x00,0x00,0x09,0x00,0x00,
            0x00,0x0b,0x00,0x00,0x00,0x0d,0x00,0x00,
            0x00,0x0e,0x00,0x00,0x00,0x0f,0x00,0x00,
            0x00,0x10,0x00,0x00,0x00,0x12,0x00,0x00,
            0x00,0x13,0x00,0x00,0x00,0x14,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
            0x00,0x00,0x00,0x00,0x00,0x1f,0x10,0xd7,
            0xa8,0xd3,0xd4,0xe7,0x6e,0xab,0x0c,0xeb,
            0x5a,0xcd,0x03,0x13,0xdf
            } );
        
        writer.Flush();
        
        return Convert.ToBase64String(((MemoryStream)writer.BaseStream).ToArray());                
    }
    
    public static void TestSG(string server)
    {
        string authData = "EUcPAAwAAACsGAAJAwQAgkc2ANJoQIR4MgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACLjhl0/9Za8+8OqVchXxAEAAAAAg0e4AAIAtAABAAAA2RYEAFEAQUUCAAAAAQAAAK3hzMzMzAkAaVeogzpoCQBsZwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAQAQUUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAxUAoon1Ohk9Nktf
         
       
        WebClient myWebClient = new WebClient();
        myWebClient.Headers.Add(XHttpHdr.HTTPAUTHDATA, authData);

        UriBuilder uribldr = new UriBuilder(server + "/svctunnel/sgtest.ashx");
            
        byte[] responseData = myWebClient.UploadData(uribldr.ToString(), "POST", new byte[] {1, 2, 3, 4});
        
        Console.WriteLine(Encoding.ASCII.GetString(responseData));

        
    }
    
          
    
    public static void Help()
    {
        Console.WriteLine("h1) Health.VerifyConfig ");
        Console.WriteLine("h2) Health.Heartbeat ");
        Console.WriteLine("h3) TestSG ");
        Console.WriteLine("");
        Console.WriteLine("a1) Accounts.GetUserInfo ");
        Console.WriteLine("a2) Accounts.SendUserFeedback ");
        Console.WriteLine("a3) Accounts.GetGamertag");
        Console.WriteLine("a4) Accounts.GetUserId");
        Console.WriteLine("");
        Console.WriteLine("p1) Presence.GetFriends ");
        Console.WriteLine("p2) Presence.GetFriendsFromListByGamertag ");
        Console.WriteLine("p3) Presence.GetFriendsFromList ");
        Console.WriteLine("p4) Presence.RemoveFriend ");
        Console.WriteLine("p5) Presence.SendFriendsRequest ");
        Console.WriteLine("p6) Presence.SendFriendsRequestByGamertag ");
        Console.WriteLine("p7) Presence.AnswerFriendsRequest ");
        Console.WriteLine("p8) Presence.AnswerFriendsRequestByGamertag ");
        Console.WriteLine("p9) Presence.AddUserToMutelist ");
        Console.WriteLine("p10) Presence.RemoveUserFromMutelist ");
        Console.WriteLine("p11) Presence.SendGameInvite ");
        Console.WriteLine("p12) Presence.RevokeGameInvite ");
        Console.WriteLine("p13) Presence.SetNotificationState ");
    }
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\test\dvt\PresenceProxy.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="PresenceSoap", Namespace="http://svctunnel.xboxlive.com/Presence/")]
public class PresenceProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public PresenceProxy() {
        this.Url = "http://slamb0/svctunnel/presence.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/GetFriends", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Friend[] GetFriends(System.UInt64 userId, System.UInt32 language) {
        object[] results = this.Invoke("GetFriends", new object[] {
                    userId,
                    language});
        return ((Friend[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetFriends(System.UInt64 userId, System.UInt32 language, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetFriends", new object[] {
                    userId,
                    language}, callback, asyncState);
    }
    
    /// <remarks/>
    public Friend[] EndGetFriends(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Friend[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/GetFriendsFromList", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Friend[] GetFriendsFromList(System.UInt64 userId, System.UInt64[] friendUserIds, System.UInt32 language) {
        object[] results = this.Invoke("GetFriendsFromList", new object[] {
                    userId,
                    friendUserIds,
                    language});
        return ((Friend[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetFriendsFromList(System.UInt64 userId, System.UInt64[] friendUserIds, System.UInt32 language, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetFriendsFromList", new object[] {
                    userId,
                    friendUserIds,
                    language}, callback, asyncState);
    }
    
    /// <remarks/>
    public Friend[] EndGetFriendsFromList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Friend[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/GetFriendsFromListByGamertag", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public Friend[] GetFriendsFromListByGamertag(System.UInt64 userId, string[] friendGamertags, System.UInt32 language) {
        object[] results = this.Invoke("GetFriendsFromListByGamertag", new object[] {
                    userId,
                    friendGamertags,
                    language});
        return ((Friend[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetFriendsFromListByGamertag(System.UInt64 userId, string[] friendGamertags, System.UInt32 language, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetFriendsFromListByGamertag", new object[] {
                    userId,
                    friendGamertags,
                    language}, callback, asyncState);
    }
    
    /// <remarks/>
    public Friend[] EndGetFriendsFromListByGamertag(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((Friend[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/SendFriendsRequest", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SendFriendsRequest(System.UInt64 userId, System.UInt64 toUserId) {
        this.Invoke("SendFriendsRequest", new object[] {
                    userId,
                    toUserId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendFriendsRequest(System.UInt64 userId, System.UInt64 toUserId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendFriendsRequest", new object[] {
                    userId,
                    toUserId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSendFriendsRequest(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/SendFriendsRequestByGamertag", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SendFriendsRequestByGamertag(string user, string toUser) {
        this.Invoke("SendFriendsRequestByGamertag", new object[] {
                    user,
                    toUser});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendFriendsRequestByGamertag(string user, string toUser, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendFriendsRequestByGamertag", new object[] {
                    user,
                    toUser}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSendFriendsRequestByGamertag(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/AnswerFriendsRequest", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AnswerFriendsRequest(System.UInt64 userId, System.UInt64 toUserId, System.UInt32 answer) {
        this.Invoke("AnswerFriendsRequest", new object[] {
                    userId,
                    toUserId,
                    answer});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAnswerFriendsRequest(System.UInt64 userId, System.UInt64 toUserId, System.UInt32 answer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AnswerFriendsRequest", new object[] {
                    userId,
                    toUserId,
                    answer}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAnswerFriendsRequest(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/AnswerFriendsRequestByGamertag", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AnswerFriendsRequestByGamertag(string user, string toUser, System.UInt32 answer) {
        this.Invoke("AnswerFriendsRequestByGamertag", new object[] {
                    user,
                    toUser,
                    answer});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAnswerFriendsRequestByGamertag(string user, string toUser, System.UInt32 answer, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AnswerFriendsRequestByGamertag", new object[] {
                    user,
                    toUser,
                    answer}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAnswerFriendsRequestByGamertag(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/RemoveFriend", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveFriend(System.UInt64 userId, System.UInt64 removeUserId) {
        this.Invoke("RemoveFriend", new object[] {
                    userId,
                    removeUserId});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveFriend(System.UInt64 userId, System.UInt64 removeUserId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveFriend", new object[] {
                    userId,
                    removeUserId}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveFriend(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/SendGameInvite", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SendGameInvite(System.UInt32 titleId, System.UInt64 userId, System.UInt64 sessionId, System.UInt64[] toUserIds) {
        this.Invoke("SendGameInvite", new object[] {
                    titleId,
                    userId,
                    sessionId,
                    toUserIds});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendGameInvite(System.UInt32 titleId, System.UInt64 userId, System.UInt64 sessionId, System.UInt64[] toUserIds, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendGameInvite", new object[] {
                    titleId,
                    userId,
                    sessionId,
                    toUserIds}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSendGameInvite(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/RevokeGameInvite", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RevokeGameInvite(System.UInt64 userId, System.UInt64 sessionId, System.UInt64[] toUserIds) {
        this.Invoke("RevokeGameInvite", new object[] {
                    userId,
                    sessionId,
                    toUserIds});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRevokeGameInvite(System.UInt64 userId, System.UInt64 sessionId, System.UInt64[] toUserIds, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RevokeGameInvite", new object[] {
                    userId,
                    sessionId,
                    toUserIds}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRevokeGameInvite(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/SetNotificationState", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SetNotificationState(System.UInt64 userId, System.UInt16 stateFlags, System.UInt64 sessionId, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] System.Byte[] stateData) {
        this.Invoke("SetNotificationState", new object[] {
                    userId,
                    stateFlags,
                    sessionId,
                    stateData});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSetNotificationState(System.UInt64 userId, System.UInt16 stateFlags, System.UInt64 sessionId, System.Byte[] stateData, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SetNotificationState", new object[] {
                    userId,
                    stateFlags,
                    sessionId,
                    stateData}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSetNotificationState(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/AddUserToMutelist", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void AddUserToMutelist(System.UInt64 userId, System.UInt64 userIdToAdd) {
        this.Invoke("AddUserToMutelist", new object[] {
                    userId,
                    userIdToAdd});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginAddUserToMutelist(System.UInt64 userId, System.UInt64 userIdToAdd, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("AddUserToMutelist", new object[] {
                    userId,
                    userIdToAdd}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndAddUserToMutelist(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Presence/RemoveUserFromMutelist", RequestNamespace="http://svctunnel.xboxlive.com/Presence/", ResponseNamespace="http://svctunnel.xboxlive.com/Presence/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void RemoveUserFromMutelist(System.UInt64 userId, System.UInt64 userIdToRemove) {
        this.Invoke("RemoveUserFromMutelist", new object[] {
                    userId,
                    userIdToRemove});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginRemoveUserFromMutelist(System.UInt64 userId, System.UInt64 userIdToRemove, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("RemoveUserFromMutelist", new object[] {
                    userId,
                    userIdToRemove}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndRemoveUserFromMutelist(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://svctunnel.xboxlive.com/Presence/")]
public class Friend {
    
    /// <remarks/>
    public System.UInt64 userId;
    
    /// <remarks/>
    public string gamertag;
    
    /// <remarks/>
    public System.UInt32 friendState;
    
    /// <remarks/>
    public System.DateTime gameinviteTime;
    
    /// <remarks/>
    public System.UInt64 sessionID;
    
    /// <remarks/>
    public System.UInt32 titleID;
    
    /// <remarks/>
    public string titleName;
    
    /// <remarks/>
    [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
    public System.Byte[] StateData;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\test\dvt\Widgets.cs ===
using System;
using System.Web.Services;
using System.Web;
using System.Net;
using System.Web.Services.Protocols;
using System.IO;

using xonline.common.service;

	/// <summary>
	/// Summary description for Widgets.
	/// </summary>
	public class Widgets
	{
    
        public static string Server = "localhost";
        public static ulong User = 0;

		#region HTTPAuthData GetAuthData(*)
		public static string GetAuthData()
		{
/*
    
            TitleId:    0x4D2

            TitleVer:   1

            TitleRgn:   FFFFFFFF

            XboxLibVer: 1.0.5936.1

            MachineId: 0x9B1FB1FB1FA4B

            ClientIP:  65.52.240.101

            U0: 0x9F5075075068E (676C,2.522337E-44)

            U1: 0x9F5075075068F (676C,2.662467E-44)

            SVC0: 0x1

            SVC1: 0x2

            SVC2: 0x4

            SVC3: 0x5

            SVC4: 0x6

            SVC5: 0x8

            SVC6: 0x9

            SVC7: 0xB

            SVC8: 0xD

            SVC9: 0xE

            SVC10: 0xF

            SVC11: 0x10

            no AltTitleID present

            
    
    */
            MemoryStream stream = new MemoryStream();
            BinaryWriter writer = new BinaryWriter(stream);
            
            
            writer.Write(new byte[] { 
                0x11,0x47,0x0f,0x00,0x01,0x00,0x00,0x00,
                0x0a,0xfe,0x0c,0x5d,0x04,0x03,0x00,0x82,
                0x47,0x36,0x00,0x0c,0x02,0x41,0x34,0xf0,
                0x65,0x0a,0xfe,0x01,0x01,0x00,0xc1,0xfb,
                0x39,0x4b,0xfa,0xb1,0x1f,0xfb,0xb1,0x09,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,
                0x00,0x25,0x89,0xc9,0x3f,0xd3,0x68,0x0b,
                0x1a,0x2c,0xee,0x35,0xea,0xa8,0x10,0xc4,
                0x01,0x01,0x00,0x00,0x00,0x83,0x47,0xb8,
                0x00,0x02,0x00,0xb4,0x00,0x01,0x00,0x00,
                0x00,0x30,0x17,0x01,0x00,0xd2,0x04,0x00,
                0x00,0x01,0x00,0x00,0x00,0xff,0xff,0xff,
                0xff,0x4b,0xfa,0xb1,0x1f,0xfb,0xb1,0x09,
                0x00 } );
                
            writer.Write(User);
            
            writer.Write(new byte[] {
                0x00,0x6c,0x67,0x00,0x00,0x8f,0x06,0x75,
                0x50,0x07,0xf5,0x09,0x00,0x6c,0x67,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x0f,0x00,0x00,0x00,0x01,0x00,0x00,
                0x00,0x02,0x00,0x00,0x00,0x04,0x00,0x00,
                0x00,0x05,0x00,0x00,0x00,0x06,0x00,0x00,
                0x00,0x08,0x00,0x00,0x00,0x09,0x00,0x00,
                0x00,0x0b,0x00,0x00,0x00,0x0d,0x00,0x00,
                0x00,0x0e,0x00,0x00,0x00,0x0f,0x00,0x00,
                0x00,0x10,0x00,0x00,0x00,0x12,0x00,0x00,
                0x00,0x13,0x00,0x00,0x00,0x14,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
                0x00,0x00,0x00,0x00,0x00,0x1f,0x10,0xd7,
                0xa8,0xd3,0xd4,0xe7,0x6e,0xab,0x0c,0xeb,
                0x5a,0xcd,0x03,0x13,0xdf
                } );
            
            writer.Flush();
            
            return Convert.ToBase64String(((MemoryStream)writer.BaseStream).ToArray());                
		}

		#endregion

		#region public class AccountOverride : AccountsProxy
		public class AccountOverride : AccountsProxy
		{
			public AccountOverride()
			{
				Url = "http://" + Widgets.Server + "/svctunnel/accounts.asmx";
			}

			protected override WebRequest GetWebRequest(Uri uri)
			{
                HttpWebRequest hwr = (HttpWebRequest) base.GetWebRequest(uri);
                hwr.Headers.Add(HTTPAuthData.HTTP_HEADER_AUTH_DATA, GetAuthData());

				return hwr;
			}
		}
		#endregion

		#region public class PresenceOverride : PresenceProxy
		public class PresenceOverride : PresenceProxy
		{
			public PresenceOverride()
			{
				Url = "http://" + Widgets.Server + "/svctunnel/presence.asmx";
			}

			protected override WebRequest GetWebRequest(Uri uri)
			{
				HttpWebRequest hwr = (HttpWebRequest) base.GetWebRequest(uri);
                hwr.Headers.Add(HTTPAuthData.HTTP_HEADER_AUTH_DATA, GetAuthData());
				return hwr;
			}
		}
		#endregion

		#region public class HealthOverride : HealthProxy
		public class HealthOverride : HealthProxy
		{
			public HealthOverride()
			{
				Url = "http://" + Widgets.Server  + "/svctunnel/health.asmx";
			}

			protected override WebRequest GetWebRequest(Uri uri)
			{
				HttpWebRequest hwr = (HttpWebRequest) base.GetWebRequest(uri);
                hwr.Headers.Add(HTTPAuthData.HTTP_HEADER_AUTH_DATA, GetAuthData());
				return hwr;
			}
		}
		#endregion

	}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\AddPaypalPaymentInstrument.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using xonline.common.billing;
using System.Net;
using xonline.common.user;
using System.Xml.Serialization;

namespace xonline.server.testfd.fd
{
    /// <summary>
    /// Test hook for creating a Paypal payment instrument using the Paypal emulator on the billing box.
    /// </summary>
    public class AddPaypalPaymentInstrument : IHttpHandler
    {

        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            BillingProvider bdkInterface = new BillingProvider();
            User user = new User();
            TestFDUtil.PayPalPaymentInfo pInfo = new TestFDUtil.PayPalPaymentInfo();
            TestFDUtil.PaymentInstrumentInfoSet piSet = null;
            HResult hr;
            XomRequestTimeElapsed requestTimer = new XomRequestTimeElapsed();

            try
            {
                CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
                
                // read the request
                AddPaypalPaymentInstrumentRequest req = new AddPaypalPaymentInstrumentRequest();
                req.SchemaVersion = WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                user.Load(req.userPuid);

                // Call utility for doing the real work
                BillingProvider.Init();
                piSet = pInfo.AddToBillingAccount(bdkInterface, user, true);
                if (piSet == null)
                {
                    throw new InvalidOperationException("AddToBillingResult returned null. Paypal set up failed.");
                }

                // Set up response
                AddPaypalPaymentInstrumentResponse resp = new AddPaypalPaymentInstrumentResponse();
                resp.paymentInstrumentId = pInfo.PaymentInstrumentId;
                resp.paymentInstrumentIdLength = (ushort)pInfo.PaymentInstrumentId.Length;
                resp.SchemaVersion = req.SchemaVersion;
                hr = HResult.S_OK;
                resp.returnValue = hr;
                XRLUtil.SetXRLResponse(ctx.Response, XOService.TestFD, hr, (XRLObject2)resp);
            }
            catch (Exception ex)
            {
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC,
                        string.Format("Unknown Error in AddPaypalPaymentInstrument. Exception :{0}", ex.ToString()));
            }
        }

        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\svctunnel\test\dvt\accountsProxy.cs ===
﻿//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.573.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;


/// <remarks/>
[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.ComponentModel.DesignerCategoryAttribute("code")]
[System.Web.Services.WebServiceBindingAttribute(Name="AccountsSoap", Namespace="http://svctunnel.xboxlive.com/Accounts/")]
public class AccountsProxy : System.Web.Services.Protocols.SoapHttpClientProtocol {
    
    /// <remarks/>
    public AccountsProxy() {
        this.Url = "http://slamb0/svctunnel/accounts.asmx";
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Accounts/GetUserInfo", RequestNamespace="http://svctunnel.xboxlive.com/Accounts/", ResponseNamespace="http://svctunnel.xboxlive.com/Accounts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public UserInfo GetUserInfo(System.UInt64 userId) {
        object[] results = this.Invoke("GetUserInfo", new object[] {
                    userId});
        return ((UserInfo)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserInfo(System.UInt64 userId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserInfo", new object[] {
                    userId}, callback, asyncState);
    }
    
    /// <remarks/>
    public UserInfo EndGetUserInfo(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((UserInfo)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Accounts/SendUserFeedback", RequestNamespace="http://svctunnel.xboxlive.com/Accounts/", ResponseNamespace="http://svctunnel.xboxlive.com/Accounts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public void SendUserFeedback(System.UInt32 titleId, System.UInt64 userId, System.UInt64 toUserId, System.UInt32 feedbackType, string nickname) {
        this.Invoke("SendUserFeedback", new object[] {
                    titleId,
                    userId,
                    toUserId,
                    feedbackType,
                    nickname});
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginSendUserFeedback(System.UInt32 titleId, System.UInt64 userId, System.UInt64 toUserId, System.UInt32 feedbackType, string nickname, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("SendUserFeedback", new object[] {
                    titleId,
                    userId,
                    toUserId,
                    feedbackType,
                    nickname}, callback, asyncState);
    }
    
    /// <remarks/>
    public void EndSendUserFeedback(System.IAsyncResult asyncResult) {
        this.EndInvoke(asyncResult);
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Accounts/GetGamertag", RequestNamespace="http://svctunnel.xboxlive.com/Accounts/", ResponseNamespace="http://svctunnel.xboxlive.com/Accounts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string GetGamertag(System.UInt64 userId) {
        object[] results = this.Invoke("GetGamertag", new object[] {
                    userId});
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGamertag(System.UInt64 userId, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGamertag", new object[] {
                    userId}, callback, asyncState);
    }
    
    /// <remarks/>
    public string EndGetGamertag(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Accounts/GetGamertagsFromList", RequestNamespace="http://svctunnel.xboxlive.com/Accounts/", ResponseNamespace="http://svctunnel.xboxlive.com/Accounts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public string[] GetGamertagsFromList(System.UInt64[] userIds) {
        object[] results = this.Invoke("GetGamertagsFromList", new object[] {
                    userIds});
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetGamertagsFromList(System.UInt64[] userIds, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetGamertagsFromList", new object[] {
                    userIds}, callback, asyncState);
    }
    
    /// <remarks/>
    public string[] EndGetGamertagsFromList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((string[])(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Accounts/GetUserId", RequestNamespace="http://svctunnel.xboxlive.com/Accounts/", ResponseNamespace="http://svctunnel.xboxlive.com/Accounts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.UInt64 GetUserId(string gamertag) {
        object[] results = this.Invoke("GetUserId", new object[] {
                    gamertag});
        return ((System.UInt64)(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserId(string gamertag, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserId", new object[] {
                    gamertag}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.UInt64 EndGetUserId(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.UInt64)(results[0]));
    }
    
    /// <remarks/>
    [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://svctunnel.xboxlive.com/Accounts/GetUserIdsFromList", RequestNamespace="http://svctunnel.xboxlive.com/Accounts/", ResponseNamespace="http://svctunnel.xboxlive.com/Accounts/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
    public System.UInt64[] GetUserIdsFromList(string[] gamertags) {
        object[] results = this.Invoke("GetUserIdsFromList", new object[] {
                    gamertags});
        return ((System.UInt64[])(results[0]));
    }
    
    /// <remarks/>
    public System.IAsyncResult BeginGetUserIdsFromList(string[] gamertags, System.AsyncCallback callback, object asyncState) {
        return this.BeginInvoke("GetUserIdsFromList", new object[] {
                    gamertags}, callback, asyncState);
    }
    
    /// <remarks/>
    public System.UInt64[] EndGetUserIdsFromList(System.IAsyncResult asyncResult) {
        object[] results = this.EndInvoke(asyncResult);
        return ((System.UInt64[])(results[0]));
    }
}

/// <remarks/>
[System.Xml.Serialization.XmlTypeAttribute(Namespace="http://svctunnel.xboxlive.com/Accounts/")]
public class UserInfo {
    
    /// <remarks/>
    public System.UInt64 userId;
    
    /// <remarks/>
    public string gamertag;
    
    /// <remarks/>
    public bool optOut;
    
    /// <remarks/>
    public string firstName;
    
    /// <remarks/>
    public string lastName;
    
    /// <remarks/>
    public string emailAddress;
    
    /// <remarks/>
    public string streetAddress;
    
    /// <remarks/>
    public string city;
    
    /// <remarks/>
    public string state;
    
    /// <remarks/>
    public string postalCode;
    
    /// <remarks/>
    public System.Byte countryId;
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\CreateXboxComAccount.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using xonline.common.billing;
using System.Net;

namespace xonline.server.testfd.fd
{
    public class CreateXboxComAccount : IHttpHandler
    {

        //-----------------------------------------------------
        // ProcessRequest (IHttpHandler)
        //
        //      the main entry point for http requests.
        //
        public void ProcessRequest(HttpContext ctx)
        {
            TestFDCreateXboxComAccountRequest req;
            CreateXboxComAccountResponse actualResp = new CreateXboxComAccountResponse();
            HResult hr;

            XomRequestTimeElapsed requestTimer = new XomRequestTimeElapsed();


            try
            {
                CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);

                // read the request
                req = new TestFDCreateXboxComAccountRequest();
                req.SchemaVersion = WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);

                CreateXboxComAccountRequest actualReq = TestFDUtil.BuildXboxComRequest(req);
                hr = TestFDUtil.CreateXboxComAccount(actualReq, out actualResp);

                actualResp.WriteToResponse(ctx.Response);
                XRLUtil.SetXRLResponse(ctx.Response, XOService.User_Account, hr, actualResp);
            }
            catch (Exception e)
            {
                hr = BillingProviderException.ToHResult(e, HResult.XONLINE_E_ACCOUNTS_CREATE_ACCOUNT_ERROR);
                throw;
            }
        }

        //-----------------------------------------------------
        // IsReusable (IHttpHandler)
        //
        //      this dll doesn't hold request-specific state, so
        //      it's fine to reuse the same instance.
        //
        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\Health.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;

using xonline.common.config;
using xonline.common.health;

namespace xonline.server.testfd.fd
{    
    public class TestFDHealthBlock : IHealthBlock
    {
        public ResourceTypeEnum ResourceType
        {
            get { return ResourceTypeEnum.Local; }
        }

        public void DoCheck( HealthBlockManager blockManager, NameValueCollection blockParams, HealthReport report )
        {
            if(report != null)
            {
                report.HealthStatus = HealthStatusEnum.Green;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\FriendCommands.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using xonline.common.community;
using System.Data;
using System.Data.SqlClient;


namespace xonline.server.testfd.fd
{
    public class MakeFriends : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
            MakeFriendsRequest req = null;
            MakeFriendsResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new MakeFriendsRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                #region perform request
                try
                {

                    hr = TestFDUtil.MakeFriends(req.xuid, req.numberOfFriends, req.gamertagPrefix);

                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends with number of friends '" + req.numberOfFriends + "', and gamertag prefix '" + req.gamertagPrefix + "' failed: " + e.ToString());
                    throw new XRLException(hr, XEvent.Id.TEST_FD_GENERIC, "MakeFriends with number of friends '" + req.numberOfFriends + "', and gamertag prefix '" + req.gamertagPrefix + "' failed", e);
                }
                #endregion

                #region cleanup
                finally
                {
                    //return the response
                    resp = new MakeFriendsResponse();
                    resp.SchemaVersion = req.SchemaVersion;
                    resp.returnValue = hr;

                    if (xonline.common.service.HResult.Succeeded(hr))
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                    }
                    else
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC, "MakeFriends threw an unexpected exception", ex);
                #endregion
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }

    public class UpdateFriendsPresence : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
            UpdateFriendsPresenceRequest req = null;
            UpdateFriendsPresenceResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new UpdateFriendsPresenceRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                xonline.common.service.HResult returnValue = xonline.common.service.HResult.E_FAIL;

                #region perform request
                try
                {
                    hr = TestFDUtil.UpdateFriendsToBeOnlinePlayingDifferentTitle(req.xuid, req.numberOfUniqueTitles, req.percentageOfFriendsOnline);
                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "UpdateFriendsPresence with percentage of friends online '" + req.percentageOfFriendsOnline + ", and number of titles '" + req.numberOfUniqueTitles + "' failed: " + e.ToString());
                    throw new XRLException(hr, XEvent.Id.TEST_FD_GENERIC, "UpdateFriendsPresence with percentage of friends online '" + req.percentageOfFriendsOnline + ", and number of titles '" + req.numberOfUniqueTitles + "' failed.", e);
                }
                #endregion

                #region cleanup
                finally
                {
                    //return the response
                    resp = new UpdateFriendsPresenceResponse();
                    resp.SchemaVersion = req.SchemaVersion;
                    resp.returnValue = hr;

                    if (xonline.common.service.HResult.Succeeded(hr))
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                    }
                    else
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC, "Unknown Error in UpdateFriendsPresence.", ex);
                #endregion
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }

    public class SetPresenceForUsers : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
            SetPresenceForUsersRequest req = null;
            SetPresenceForUsersResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new SetPresenceForUsersRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                #region perform request
                try
                {
                    hr = TestFDUtil.SetPresenceForUsers(req.xuids, req.titleId, req.stateFlags, req.richPresenceString);
                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "SetPresenceForUsers with number of xuids '" + req.xuids.Length + ", title '" + req.titleId + "', state flags '" + req.stateFlags + "', and rich presence string '" + req.richPresenceString + "' failed: " + e.ToString());
                    throw new XRLException(hr, XEvent.Id.TEST_FD_GENERIC, "SetPresenceForUsers with number of xuids '" + req.xuids.Length + ", title '" + req.titleId + "', state flags '" + req.stateFlags + "', and rich presence string '" + req.richPresenceString + "' failed", e);
                }
                #endregion

                #region cleanup
                finally
                {
                    //return the response
                    resp = new SetPresenceForUsersResponse();
                    resp.SchemaVersion = req.SchemaVersion;
                    resp.returnValue = hr;

                    if (xonline.common.service.HResult.Succeeded(hr))
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                    }
                    else
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC, "Unknown Error in SetPresenceForUsers.", ex);
                #endregion
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\GrantAchievements.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using xonline.common.community;
using System.Data;
using System.Data.SqlClient;


namespace xonline.server.testfd.fd
{
    public class GrantAchievements : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.S_OK;
            GrantAchievementsRequest req = null;
            GrantAchievementsResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new GrantAchievementsRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                xonline.common.service.HResult returnValue = xonline.common.service.HResult.E_FAIL;
                #endregion

                #region perform request
                try
                {

                    returnValue = TestFDUtil.GrantAchievements(req.xuid, req.platformType, req.numberOfUniqueTitles, req.percentageOfAchievementsToGrant);

                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "GrantAchievements with number of titles '" + req.numberOfUniqueTitles + "' failed: " + e.ToString());
                    hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
                    goto Cleanup;
                }
                finally
                {
                }
                #endregion

                #region cleanup
            Cleanup:
                //we should still return a response if there was an error
                resp = new GrantAchievementsResponse();
                resp.SchemaVersion = req.SchemaVersion;
                resp.returnValue = returnValue;

                XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC,
                        string.Format("Unknown Error in GrantAchievements. Exception :{0}", ex.ToString()));
                #endregion
            }
            finally
            {
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\ITestFDApiName.cs ===
namespace xonline.server.testfd.fd
{
    public interface ITestFDApiName
    {
        string ApiName
        {
            get;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\PassportUtils.cs ===
using System;
using System.Collections;
using System.IO;
using System.Web;
using System.Net;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Security.Cryptography.X509Certificates;
using System.Threading;
using System.Text;
using System.Web.Services.Protocols;
using System.Xml;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;

namespace xonline.server.testfd.fd
{
    // Standard Passport client implementation
    public class PassportTestClient
    {
        private static class PassportServiceData
        {
            public static void XePassportGetEncryptedProxyParameters(int serviceId, out uint publicKeyPublicExponent,
            out byte[] publicKeyModulus, out byte[] publicKeyDigest, out string loginTokenRequest)
            {
                XePassportGetEncryptedProxyParametersRequest request = new XePassportGetEncryptedProxyParametersRequest();
                XePassportGetEncryptedProxyParametersResponse response = new XePassportGetEncryptedProxyParametersResponse();
                XRLObject2 xrlObject = response;

                request.serviceId = serviceId;

                HTTPAuthData authData = new HTTPAuthData(0, 0, 0, 0, 0, XOn.WEB_TITLE_ID, (uint)XOService.User_Account, 0);

                WebHeaderCollection headers = new WebHeaderCollection();
                headers[XHttpHdr.WEBCACHEREQUEST] = "TRUE";

                HResult hr = XRLUtil.PostXrlRequest(VirtualInterface.xuacs_int, request.Xrl, authData.GetBase64EncodedString(), request, headers, ref xrlObject);
                if (hr != HResult.S_OK || response.loginTokenRequestLength == 0 || response.publicKeyModulusLength == 0)
                {
                    //TODO: Throw an event
                    //throw new UnexpectedException(String.Format("XePassportGetEncryptedProxyParameters returned XErr=0x{0:x}", request.XErr));
                }

                loginTokenRequest = response.loginTokenRequest;
                publicKeyDigest = response.publicKeyDigest;
                publicKeyModulus = response.publicKeyModulus;
                publicKeyPublicExponent = response.publicKeyPublicExponent;
            }

            private static object InitializationLock = new object();
            private static volatile bool _initialized = false;
            public static bool Initialized
            {
                get
                {
                    return _initialized;
                }
            }

            public static UInt32 PublicExponent;
            public static byte[] Modulus;
            public static byte[] Digest = new byte[XOn.XONLINE_PASSPORT_PUBLIC_KEY_DIGEST_LEN];
            public static string LoginTokenRequest;
            public static string LoginTokenRequestMsn;

            public static void Initialize()
            {
                if (!_initialized)
                {
                    lock (InitializationLock)
                    {
                        if (!_initialized)
                        {
                            XePassportGetEncryptedProxyParameters(XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID,
                               out PublicExponent, out Modulus, out Digest, out LoginTokenRequestMsn);
                            XePassportGetEncryptedProxyParameters(XOn.XONLINE_PASSPORT_LOGIN_XBOXLIVE_SERVICE_ID,
                                out PublicExponent, out Modulus, out Digest, out LoginTokenRequest);
                            _initialized = true;
                        }
                    }
                }
            }
        }

        public void Init()
        {
            PassportServiceData.Initialize();
        }

        public void GenerateEncryptedLoginParts(
            string passw,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            _GenerateEncryptedLoginParts(
                        passw,
                        XOn.XONLINE_PASSPORT_LOGIN_XBOXLIVE_SERVICE_ID,
                        out encSesKey,
                        out encPassw,
                        out encReq);
        }

        // not used
        public void GenerateEncryptedLoginPartsMsn(
            string passw,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            _GenerateEncryptedLoginParts(
                        passw,
                        XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID,
                        out encSesKey,
                        out encPassw,
                        out encReq);
        }

        public void GenerateEncryptedLoginPartsMsnCustom(
            string passw,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            _GenerateEncryptedLoginParts(
                        passw,
                        -1,
                        out encSesKey,
                        out encPassw,
                        out encReq);
        }

        private void _GenerateEncryptedLoginParts(
            string passw,
            int serviceId,
            out byte[] encSesKey,
            out byte[] encPassw,
            out byte[] encReq
            )
        {
            SHA1Managed shafn = new SHA1Managed();

            // Generate a random session key
            RandomNumberGenerator rand = RandomNumberGenerator.Create();
            byte[] _sessionKey = new byte[24];
            rand.GetBytes(_sessionKey);

            // Use Iv = 0
            byte[] iv = new byte[8];

            // Encript session key using passport public key
            encSesKey = EncryptWithPassportPublicKey(_sessionKey);

            // Format timestamp
            DateTime now = DateTime.UtcNow;
            byte[] timestamp = Encoding.UTF8.GetBytes(now.ToString("yyyy-MM-ddTHH:mm:ssZ"));

            // Calculate password message using the following scheme:
            // shaPassw = SHA1_hash(Password + timestamp + SHA1_hash(PP public key))
            // PasswordCiphervalue= Base64(Encrypt-SessionKey_S(shaPassw+timestamp))
            BinaryWriter bw = new BinaryWriter(new MemoryStream(256));
            bw.Write(Encoding.UTF8.GetBytes(passw));
            bw.Write(timestamp);
            bw.Write(PassportServiceData.Digest);
            byte[] passwblob = ((MemoryStream)bw.BaseStream).ToArray();
            byte[] shaPassw = shafn.ComputeHash(passwblob);

            bw = new BinaryWriter(new MemoryStream(256));
            bw.Write(shaPassw);
            bw.Write(timestamp);
            byte[] shaTsBlob = ((MemoryStream)bw.BaseStream).ToArray();

            byte[] encShaTsBlob = EncryptWith3Des(_sessionKey, iv, shaTsBlob);
            encPassw = encShaTsBlob;

            // Request
            switch (serviceId)
            {
                case -1:
                    string _loginTokenRequestMsnCustom = string.Format(_loginTokenRequestTemplate, Config.GetSetting(Setting.passport_siteAddressMsn), "?id=730&amp;tw=40&amp;fs=1&amp;kpp=1&amp;kv=4&amp;ver=2.1.6000.1&amp;rn=bzYirt7s");
                    encReq = EncryptWith3Des(_sessionKey, iv, Encoding.UTF8.GetBytes(_loginTokenRequestMsnCustom));
                    break;
                case XOn.XONLINE_PASSPORT_LOGIN_MESSENGER_SERVICE_ID:
                    encReq = EncryptWith3Des(_sessionKey, iv, Encoding.UTF8.GetBytes(PassportServiceData.LoginTokenRequestMsn));
                    break;
                default:
                    encReq = EncryptWith3Des(_sessionKey, iv, Encoding.UTF8.GetBytes(PassportServiceData.LoginTokenRequest));
                    break;
            }
        }

        public void GenerateEncryptedCredentials(
            string oldPassword,
            string newPassword,
            string secretAnswer,
            out byte[] encryptedCredentials
            )
        {
            byte[] binOldPassword = Encoding.ASCII.GetBytes(oldPassword);
            byte[] binPassword = Encoding.ASCII.GetBytes(newPassword);
            byte[] binSecretAnswer = Encoding.Unicode.GetBytes(secretAnswer);

            BinaryWriter bw = new BinaryWriter(new MemoryStream(200));
            bw.Write((byte)1); // Version of the encryption scheme
            bw.Write((byte)1); // Version of the format of the plaintext string
            bw.Write((byte)binPassword.Length); // Size of password in bytes
            bw.Write(binPassword); // Password in ascii
            bw.Write((byte)binSecretAnswer.Length); // Size of secret-answer in bytes
            bw.Write(binSecretAnswer); // secret-answer in unicode
            bw.Write((byte)binOldPassword.Length); // Size of old-password.
            bw.Write(binOldPassword); // old-password in ascii

            byte[] credentials = ((MemoryStream)bw.BaseStream).ToArray();

            // Encrypt 
            encryptedCredentials = EncryptWithPassportPublicKey(credentials);
        }

        static protected byte[] EncryptWith3Des(byte[] key, byte[] iv, byte[] data)
        {
            TripleDESCryptoServiceProvider tdes = new TripleDESCryptoServiceProvider();
            MemoryStream ms = new MemoryStream(1024);
            CryptoStream cs = new CryptoStream(ms, tdes.CreateEncryptor(key, iv), CryptoStreamMode.Write);
            cs.Write(data, 0, data.Length);
            cs.Close();
            return ms.ToArray();
        }

        protected byte[] EncryptWithPassportPublicKey(byte[] data)
        {
            byte[] _modulus = PassportServiceData.Modulus;
            uint _pubexp = PassportServiceData.PublicExponent;
            // Managed RSA provider expects key data in big endian order
            byte[] rmodulus = DuplicateAndReverse(_modulus);
            byte[] rpubexp = new byte[] { 
                                             (byte) ((_pubexp & 0xFF000000)>>24),
                                             (byte) ((_pubexp & 0xFF0000)>>16),
                                             (byte) ((_pubexp & 0xFF00)>>8),
                                             (byte) (_pubexp & 0xFF)
                                         };

            // Load up key            
            RSACryptoServiceProvider rsa = new RSACryptoServiceProvider();
            RSAParameters keyInfo = new RSAParameters();
            keyInfo.Modulus = rmodulus;
            keyInfo.Exponent = rpubexp;
            rsa.ImportParameters(keyInfo);

            // Calculate the max size of message bytes that can be encrypted
            // in one block of cipher text and the number of blocks necessary
            // to encrypt the whole thing
            int msgblocksize = _modulus.Length - 2 - 2 * 20;
            int blockcount = (data.Length / msgblocksize) + ((data.Length % msgblocksize) != 0 ? 1 : 0);

            // Encrypt
            MemoryStream ciphertext = new MemoryStream(blockcount * _modulus.Length);
            byte[] msgblock = new byte[msgblocksize];
            int dataleft = data.Length;
            for (int i = 0; i < blockcount; i++)
            {
                int size = Math.Min(dataleft, msgblocksize);
                if (size != msgblock.Length)
                    msgblock = new byte[size];

                Buffer.BlockCopy(data, i * msgblocksize, msgblock, 0, size);
                byte[] cipherblock = rsa.Encrypt(msgblock, true);
                Array.Reverse(cipherblock);
                ciphertext.Write(cipherblock, 0, cipherblock.Length);
                dataleft -= size;
            }

            return ciphertext.ToArray();
        }

        // Copy buffer and reverse it at the same time
        protected byte[] DuplicateAndReverse(byte[] bin)
        {
            byte[] rdup = new byte[bin.Length];

            int rduplength = rdup.Length;
            for (int i = 0; i < bin.Length; i++)
            {
                rdup[rduplength - i - 1] = bin[i];
            }

            return rdup;
        }


        protected string _loginTokenRequestTemplate =
            "<ps:EncryptedRequest" +
            "    xmlns:ps='http://schemas.microsoft.com/Passport/SoapServices/EncProxyV1'" +
            "    xmlns:wst='http://schemas.xmlsoap.org/ws/2004/04/trust'" +
            "    xmlns:wsp='http://schemas.xmlsoap.org/ws/2002/12/policy'" +
            "    xmlns:wsa='http://schemas.xmlsoap.org/ws/2004/03/addressing'" +
            "    xmlns:wsse='http://schemas.xmlsoap.org/ws/2003/06/secext'>" +
            "    <wst:RequestSecurityToken>" +
            "        <wst:RequestType>" +
            "            http://schemas.xmlsoap.org/ws/2004/04/security/trust/Issue" +
            "        </wst:RequestType>" +
            "        <wsp:AppliesTo>" +
            "            <wsa:EndpointReference>" +
            "                <wsa:Address>{0}</wsa:Address>" +
            "            </wsa:EndpointReference>" +
            "        </wsp:AppliesTo>" +
            "        <wsse:PolicyReference URI='{1}'/>" +
            "    </wst:RequestSecurityToken>" +
            "</ps:EncryptedRequest>";
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\PerfCounters.cs ===
/*
 * PerfCounters.cs
 *
 * Ratings Performance Counter objects
 *
 * Copyright (c) Microsoft Corporation. All Rights Reserved.
 */


using System;
using System.Threading;
using System.Diagnostics;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.server.testfd.fd
{
    [XomPerformanceCounterCategoryAttr( "Test FD: PingTestFD", "Xbox LIVE Test Front Door - now with more bacon!" )]
    public class PingTestFDCounters : XomPerformanceCounterCategory
    {
        static public PingTestFDCounters Current = new PingTestFDCounters();

        [XomPerformanceCounterAttr(
            "PingTestFD requests/sec",
            "PingTestFD requests per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ExecPerSecond;

        [XomPerformanceCounterAttr(
            "PingTestFD total",
            "Total PingTestFD requests attempted in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ExecTotal;

        [XomPerformanceCounterAttr(
            "PingTestFD failures/sec",
            "Number of unsuccessful results returned by PingTestFD per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ExecFailedPerSecond;

        [XomPerformanceCounterAttr(
            "PingTestFD total failures",
            "Total number unsuccessful results returned by PingTestFD in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ExecFailedTotal;

        [XomPerformanceCounterAttr(
            "PingTestFD avg. Execution time",
            "Average time taken to Execute PingTestFD",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter ExecTime;

        [XomPerformanceCounterAttr(
            "PingTestFD avg. Execution time base",
            "Base average time taken to Execute PingTestFD",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter ExecTimeBase;

        [XomPerformanceCounterAttr(
            "PingTestFD total successes",
            "Total number of PingTestFD requests that successfully completed.",
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter SuccessesTotal;

        [XomPerformanceCounterAttr(
            "PingTestFD successes/sec",
            "Number of successful PingTestFD requests per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter SuccessesPerSecond;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\GetDbValue.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;

namespace xonline.server.testfd.fd
{
    public class GetDbValue : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            HResult hr = HResult.S_OK;
            GetDbValueRequest req = null;
            GetDbValueResponse resp = null;

            XomRequestTimeElapsed requestTimer = new XomRequestTimeElapsed();
            GetDbValueCounters.Current.ExecPerSecond.Increment();
            GetDbValueCounters.Current.ExecTotal.Increment();
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                    GetDbValueCounters.Current.ExecFailedPerSecond,
                    GetDbValueCounters.Current.ExecFailedTotal
                });

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new GetDbValueRequest();
                req.SchemaVersion = WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                #region input checking

                #region check req.database
                if (!TestFDUtil.ValidSqlDatabase(req.database))
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "GetDbValue: string: '" + req.database + "' is not valid database name.");
                    hr = HResult.XONLINE_E_TESTFD_INVALID_DATABASE_ERROR;
                    goto Cleanup;
                }
                #endregion

                #region check req.table
                if (!TestFDUtil.ValidSqlTable(req.database, req.table))
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "GetDbValue: string: '" + req.table + "' is not valid table name in database '" + req.database + "'.");
                    hr = HResult.XONLINE_E_TESTFD_INVALID_TABLE_ERROR;
                    goto Cleanup;
                }
                #endregion

                #region check req.column
                if (!TestFDUtil.ValidSqlColumn(req.database, req.table, req.column))
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "GetDbValue: string: '" + req.column + "' is not valid column name in table '" + req.database + "." + req.table + "'.");
                    hr = HResult.XONLINE_E_TESTFD_INVALID_COLUMN_ERROR;
                    goto Cleanup;
                }
                #endregion

                #endregion

                #region get partition

                int partition = 0;
                hr = TestFDUtil.GetPartition(   "GetDbValue",
                                                req.partitionType,
                                                req.database,
                                                req.intHash,
                                                req.ulongHash,
                                                req.longHash,
                                                req.stringHash,
                                                ref partition);
                if (HResult.Failed(hr))
                {
                    goto Cleanup;
                }

                #endregion

                #region perform request
                string value = "";
                string sqlCommand = "   SELECT " + req.column +@"
                                        FROM " + req.table + @"
                                        WHERE (" + req.condition + ")";
                try
                {
                    object o = TestFDUtil.ExecuteSqlScalar(req.database, sqlCommand, partition);
                    if (o == null)
                    {
                        Xom.Trace("testfd", LogLevel.L_HIGH, "GetDbValue: command [[" + sqlCommand + "]] against " + req.database + " on partition " + partition + " didn't return any data.");
                        hr = HResult.XONLINE_E_TESTFD_SQL_NO_VALUE_ERROR;
                        goto Cleanup;
                    }
                    value = o.ToString();
                }
                catch (Exception e)
                {
                    if (e is ExceptionWithHResult
                    && ((ExceptionWithHResult)e).HResult == HResult.XONLINE_E_TESTFD_BAD_PARTITION_ERROR)
                    {
                        throw;
                    }
                    else
                    {
                        Xom.Trace("testfd", LogLevel.L_HIGH, "GetDbValue: sql command: '" + sqlCommand + "' to database '" + req.database + "' failed.");
                        hr = HResult.XONLINE_E_TESTFD_INVALID_SQL_ERROR;
                    }

                    goto Cleanup;
                }
                #endregion

                #region write response
                resp = new GetDbValueResponse();
                resp.SchemaVersion = req.SchemaVersion;
                resp.value = value;

                GetDbValueCounters.Current.SuccessesPerSecond.Increment();
                GetDbValueCounters.Current.SuccessesTotal.Increment();
                #endregion

                #region cleanup
            Cleanup:
                if (HResult.Succeeded(hr))
                {
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.TestFD, hr, (XRLObject2)resp);
                }
                else
                {
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.TestFD, hr);
                    GetDbValueCounters.Current.ExecFailedPerSecond.Increment();
                    GetDbValueCounters.Current.ExecFailedTotal.Increment();
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC,
                        string.Format("Unknown Error in GetDbValue. Exception :{0}", ex.ToString()));
                #endregion
            }
            finally
            {
                #region finally
                GetDbValueCounters.Current.ExecTime.IncrementBy(requestTimer.TimeElapsed);
                GetDbValueCounters.Current.ExecTimeBase.Increment();
                #endregion finally
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\PingTestFD.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;

namespace xonline.server.testfd.fd
{
    public class PingTestFD : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            HResult hr = HResult.S_OK;
            PingTestFDRequest req = null;
            PingTestFDResponse resp = null;

            XomRequestTimeElapsed requestTimer = new XomRequestTimeElapsed();
            PingTestFDCounters.Current.ExecPerSecond.Increment();
            PingTestFDCounters.Current.ExecTotal.Increment();
            XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                    PingTestFDCounters.Current.ExecFailedPerSecond,
                    PingTestFDCounters.Current.ExecFailedTotal
                });

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new PingTestFDRequest();
                req.SchemaVersion = WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                #region write response
                resp = new PingTestFDResponse();
                resp.SchemaVersion = req.SchemaVersion;
                resp.testFDMajorVersion = TestFDApp.TESTFD_MAJOR_VERSION;
                resp.testFDMinorVersion = TestFDApp.TESTFD_MINOR_VERSION;
                resp.accessGranted = TestFDApp.HasPermission((TestFDApp.PermissionLevel)req.accessRequested);

                PingTestFDCounters.Current.SuccessesPerSecond.Increment();
                PingTestFDCounters.Current.SuccessesTotal.Increment();
                #endregion

                #region cleanup
                if (HResult.Succeeded(hr))
                {
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.TestFD, hr, (XRLObject2)resp);
                }
                else
                {
                    XRLUtil.SetXRLResponse(ctx.Response, XOService.TestFD, hr);
                    PingTestFDCounters.Current.ExecFailedPerSecond.Increment();
                    PingTestFDCounters.Current.ExecFailedTotal.Increment();
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC,
                        string.Format("Unknown Error in PingTestFD. Exception :{0}", ex.ToString()));
                #endregion
            }
            finally
            {
                PingTestFDCounters.Current.ExecTime.IncrementBy(requestTimer.TimeElapsed);
                PingTestFDCounters.Current.ExecTimeBase.Increment();
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\ProfileCommands.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using xonline.common.community;
using System.Data;
using System.Data.SqlClient;


namespace xonline.server.testfd.fd
{
    public class MarkCheater : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
            MarkCheaterRequest req = null;
            MarkCheaterResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new MarkCheaterRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                xonline.common.service.HResult returnValue = xonline.common.service.HResult.E_FAIL;

                #region perform request
                try
                {

                    hr = TestFDUtil.MarkCheater(req.xuid);

                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "MarkCheater on user " + req.xuid + " failed: " + e.ToString());
                    throw new XRLException(hr, XEvent.Id.TEST_FD_GENERIC, "MarkCheater on user " + req.xuid + " failed.", e);
                }
                #endregion

                #region cleanup
                finally
                {
                    //return the response
                    resp = new MarkCheaterResponse();
                    resp.SchemaVersion = req.SchemaVersion;
                    resp.returnValue = hr;

                    if (xonline.common.service.HResult.Succeeded(hr))
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                    }
                    else
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC, "Unknown Error in MarkCheater.", ex);
                #endregion
            }
            finally
            {
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }

    public class SetWatermark : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
            SetWatermarkRequest req = null;
            SetWatermarkResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new SetWatermarkRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                #region perform request
                try
                {

                    hr = TestFDUtil.SetWatermark(req.xuid, req.flags);

                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "SetWatermark on user " + req.xuid + " failed: " + e.ToString());
                    throw new XRLException(hr, XEvent.Id.TEST_FD_GENERIC, "SetWatermark on user " + req.xuid + " failed.", e);
                }
                #endregion

                #region cleanup
                finally
                {
                    //return the response
                    resp = new SetWatermarkResponse();
                    resp.SchemaVersion = req.SchemaVersion;
                    resp.returnValue = hr;

                    if (xonline.common.service.HResult.Succeeded(hr))
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                    }
                    else
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC, "Unknown Error in SetWatermark.", ex);
                #endregion
            }
            finally
            {
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }

    public class SetTenure : IHttpHandler
    {
        public void ProcessRequest(HttpContext ctx)
        {
            #region setup
            xonline.common.service.HResult hr = xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR;
            SetTenureRequest req = null;
            SetTenureResponse resp = null;

            CallSource.Check(VirtualInterface.testfd, VirtualInterface.testfd_int);
            #endregion

            try
            {
                #region init
                req = new SetTenureRequest();
                req.SchemaVersion = xonline.common.service.WireData.GetSchemaVersion(ctx.Request);
                req.ReadFromRequest(ctx.Request);
                #endregion

                #region perform request
                try
                {

                    hr = TestFDUtil.SetTenure(req.xuid, req.years, req.months);

                }
                catch (Exception e)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "SetTenure on user " + req.xuid + " failed: " + e.ToString());
                    throw new XRLException(hr, XEvent.Id.TEST_FD_GENERIC, "SetTenure on user " + req.xuid + " failed.", e);
                }
                #endregion

                #region cleanup
                finally
                {
                    //return the response
                    resp = new SetTenureResponse();
                    resp.SchemaVersion = req.SchemaVersion;
                    resp.returnValue = hr;

                    if (xonline.common.service.HResult.Succeeded(hr))
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr, (XRLObject2)resp);
                    }
                    else
                    {
                        XRLUtil.SetXRLResponse(ctx.Response, xonline.common.service.XOService.TestFD, 0x0, hr);
                    }
                }
                #endregion
            }
            catch (Exception ex)
            {
                #region exception
                if (ex is ExceptionWithEventId || ex is ExceptionWithoutEvent || ex is ExceptionWithHResult) throw;

                throw new XRLException(xonline.common.service.HResult.XONLINE_E_TESTFD_GENERIC_ERROR, XEvent.Id.TEST_FD_GENERIC, "Unknown Error in SetTenure.", ex);
                #endregion
            }
        }

        public bool IsReusable
        {
            get { return true; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\Reflect.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.IO;
using System.Web;

using xonline.common.config;
using xonline.common.protocol;
using xonline.common.service;

namespace xonline.server.testfd.fd
{

public class Reflect : IHttpHandler, ITestFDApiName
{
    /// <summary>
    /// Why not? We don't store state across invocations.
    /// </summary>
    public bool IsReusable
    {
        get { return true; }
    }

    /// <summary>
    /// Attempts to parse a string value into a given Enum type.
    /// </summary>
    /// <typeparam name="T">The enum type to parse.</typeparam>
    /// <param name="s">The string to parse as an enum value.</param>
    /// <param name="result">The resulting enum value.</param>
    /// <returns>True if the string was an enum value; false otherwise.</returns>
    public static bool EnumTryParse<T> (string s, out T result)
    {
        string[] names = Enum.GetNames(typeof(T));

        for (int i = 0; i < names.Length; ++i)
        {
            if (names[i].Equals(s, StringComparison.OrdinalIgnoreCase))
            {
                result = (T)(Enum.GetValues(typeof(T)).GetValue(i));
                return true;
            }
        }

        result = default(T);
        return false;
    }

    /// <summary>
    /// Reflect a request.
    /// </summary>
    public void ProcessRequest (HttpContext context)
    {
        HttpRequest req = context.Request;
        HttpResponse resp = context.Response;

        // normal resp unless otherwise stated
        resp.ContentType = "text/html";

        // as long as this stays null, we are ok
        string errorString = null;

        // get inputs
        TestFdReflectorRequest.Caller caller = TestFdReflectorRequest.Caller.None;
        TestFdReflectorRequest.Action action = TestFdReflectorRequest.Action.Reflect;
        int param = 0;

        // if there are any query string inputs, we use those, otherwise we use the POST buffer
        NameValueCollection qs = req.QueryString;

        if (qs != null && qs.Count > 0)
        {
            // get caller value
            string[] caller_arr = qs.GetValues(TestFdReflectorRequest.CallerQueryName);

            if (caller_arr != null && caller_arr.Length > 0)
            {
                // just use the first value
                string caller_str = caller_arr[0];

                if (caller_str != null && !EnumTryParse(caller_str, out caller))
                {
                    errorString = "Invalid caller value: " + caller_str;
                    goto setupError;
                }
            }

            // get action value
            string[] action_arr = qs.GetValues(TestFdReflectorRequest.ActionQueryName);

            if (action_arr != null && action_arr.Length > 0)
            {
                // just use the first value
                string action_str = action_arr[0];

                if (action_str != null && !EnumTryParse(action_str, out action))
                {
                    errorString = "Invalid action value: " + action_str;
                    goto setupError;
                }
            }

            // get param value
            string[] param_arr = qs.GetValues(TestFdReflectorRequest.ParamQueryName);

            if (param_arr != null && param_arr.Length > 0)
            {
                // just use the first value
                string param_str = param_arr[0];

                if (param_str != null && !int.TryParse(param_str, out param))
                {
                    errorString = "Invalid param value: " + param_str;
                    goto setupError;
                }
            }
        }
        else
        {
            int len = req.ContentLength;
            TestFdReflectorRequest tfdrr = new TestFdReflectorRequest();

            if (len >= tfdrr.Size())
            {
                try
                {
                    tfdrr.ReadFromRequest(req);
                }
                catch (Exception e)
                {
                    errorString = e.ToString();
                    goto setupError;
                }

                caller = tfdrr.CallerValue;
                action = tfdrr.ActionValue;
                param = tfdrr.Param;
            }
        }

        // do whatever action is requested
        switch (action)
        {
            case TestFdReflectorRequest.Action.Reflect:
                // standard reflection
                break;

            case TestFdReflectorRequest.Action.ResponseWait:
                System.Threading.Thread.Sleep(param);
                break;

            case TestFdReflectorRequest.Action.ThrowUnhandledException:
                throw new Exception("Throwing the exception for ThrowUnhandledException");

            case TestFdReflectorRequest.Action.Exit:
                // only actually kill the process on xblobs, otherwise lets just not respond
                if (Config.Environment.ToLower() == "xblob")
                {
                    System.Environment.Exit(0);
                }
                else
                {
                    goto case TestFdReflectorRequest.Action.NoResponse;
                }
                break;

            case TestFdReflectorRequest.Action.ReturnStatus:
                resp.StatusCode = param;
                resp.StatusDescription = "Reflector " + param.ToString();
                resp.End();
                return;

            case TestFdReflectorRequest.Action.ReturnStatusAndResponseBody:
                resp.StatusCode = param;
                resp.StatusDescription = "Reflector " + param.ToString();
                string bodyString = "Special TestFD Response Body";
                byte []bodyBytes=new System.Text.ASCIIEncoding().GetBytes(bodyString);
                resp.OutputStream.Write(bodyBytes, 0, bodyBytes.Length);
                resp.End();
                return;

            case TestFdReflectorRequest.Action.NoResponse:
                resp.Close();
                return;

            case TestFdReflectorRequest.Action.ReflectHeaders:
                {
                    NameValueCollection headers = req.Headers;

                    foreach (string header in headers.Keys)
                    {
                        if (header.ToLower() != "content-length")
                        {
                            resp.AppendHeader(header, headers[header]);
                        }
                    }
                }
                break;

            case TestFdReflectorRequest.Action.OutputBody:
                {
                    byte[] bytes = new byte[4096];
                    (new Random()).NextBytes(bytes);
                    int bytes_left = param;
                    Stream out_stream = resp.OutputStream;

                    while (bytes_left > 0)
                    {
                        int to_write = Math.Min(bytes_left, bytes.Length);
                        out_stream.Write(bytes, 0, to_write);
                        bytes_left -= to_write;
                    }
                }
                return;

            case TestFdReflectorRequest.Action.Stress:
                resp.Write(req.Url.PathAndQuery);
                return;

            case TestFdReflectorRequest.Action.ResponseXMLContentType:
                resp.ContentType = "text/xml";
                break;
        }

        // From here we can just use our defaults to reflect if there was a setup error
    setupError:

        TestFdReflectorResponse tfd_resp = new TestFdReflectorResponse();

        tfd_resp.Error = errorString;

        // spit out context items
        Dictionary<string, string> dict = new Dictionary<string, string>();
        foreach (DictionaryEntry entry in context.Items)
        {
            dict.Add(entry.Key.ToString(), entry.Value.ToString());
        }
        tfd_resp.HttpContext = new TestFdReflectorResponse.NameValuePairCollection();
        tfd_resp.HttpContext.Dict = dict;

        // do caller specific stuff now
        switch (caller)
        {
            case TestFdReflectorRequest.Caller.None:
                dict = null;
                break;

            case TestFdReflectorRequest.Caller.AuthSG:
                dict = AuthSGCallerFunction(req, resp, action, param);
                break;

            case TestFdReflectorRequest.Caller.WebSG:
                // Not Yet Implemented
                break;
        }
        tfd_resp.CallerSpecific = new TestFdReflectorResponse.NameValuePairCollection();
        if (dict != null)
        {
            tfd_resp.CallerSpecific.Dict = dict;
        }

        // reflect request
        tfd_resp.HttpRequest = new TestFdReflectorResponse.HttpRequestWD();
        tfd_resp.HttpRequest.Headers = new TestFdReflectorResponse.NameValuePairCollection();

        // first line
        tfd_resp.HttpRequest.Method = req.HttpMethod;
        tfd_resp.HttpRequest.URLAndQueryString = req.Url.PathAndQuery;
        tfd_resp.HttpRequest.ServerProtocol = req.ServerVariables["SERVER_PROTOCOL"];

        // headers
        dict = new Dictionary<string, string>();
        foreach (string header in req.Headers.AllKeys)
        {
            dict.Add(header, req.Headers[header]);
        }
        tfd_resp.HttpRequest.Headers.Dict = dict;

        // write out to response
        if (req.QueryString["tostring"] == "true")
        {
            resp.Write(tfd_resp.ToString());
        }
        else
        {
            tfd_resp.WriteToResponse(resp);

            // body
            int total = 0;
            byte[] buffer = new byte[4096];

            req.InputStream.Position = 0;

            while (0 != (total = req.InputStream.Read(buffer, 0, buffer.Length)))
            {
                resp.OutputStream.Write(buffer, 0, total);
            }
        }
    }

    /// <summary>
    /// AuthSG specific lookups
    /// </summary>
    public Dictionary<string, string> AuthSGCallerFunction (HttpRequest req, HttpResponse resp, TestFdReflectorRequest.Action action, int param)
    {
        Dictionary<string, string> ans = new Dictionary<string, string>();

        if (action != TestFdReflectorRequest.Action.AuthSGNoAAInfo)
        {
            // AAInfo stuffs
            AAInfo aainfo = AAInfoMiddleTier.Current;

            //read from every aainfo field
            try
            {
                ans.Add("AAInfoCurrent", AAInfo.Current == null ? "null" : "exists");
            }
            catch (Exception e)
            {
                ans.Add("AAInfoCurrentException", e.ToString());
            }

            try
            {
                ans.Add("IsActiveAuthAvailable", AAInfo.IsActiveAuthAvailable.ToString());
            }
            catch (Exception e)
            {
                ans.Add("IsActiveAuthAvailableException", e.ToString());
            }

            try
            {
                ans.Add("IsInternetTier", AAInfo.IsInternetTier.ToString());
            }
            catch (Exception e)
            {
                ans.Add("IsInternetTierException", e.ToString());
            }

            try
            {
                ans.Add("IsMiddleTier", AAInfo.IsMiddleTier.ToString());
            }
            catch (Exception e)
            {
                ans.Add("IsMiddleTierException", e.ToString());
            }

            if (aainfo == null)
            {
                ans.Add("IsAAInfoNull", "true");
            }
            else
            {
                ans.Add("IsAAInfoNull", "false");

                try
                {
                    ans.Add("PassportPuid", aainfo.PassportPuid.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("PassportPuidException", e.ToString());
                }

                try
                {
                    ans.Add("IpAddressInternet", aainfo.IpAddressInternet);
                }
                catch (Exception e)
                {
                    ans.Add("IpAddressInternetException", e.ToString());
                }

                try
                {
                    ans.Add("LiveXuid", aainfo.LiveXuid.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("LiveXuidException", e.ToString());
                }

                try
                {
                    ans.Add("LiveXuidFromXCache", aainfo.LiveXuidFromXCache.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("LiveXuidFromXCacheException", e.ToString());
                }

                try
                {
                    ans.Add("OriginatingIP", aainfo.OriginatingIP.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("OriginatingIPException", e.ToString());
                }

                try
                {
                    ans.Add("CountryId", aainfo.CountryId.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("CountryIdException", e.ToString());
                }

                try
                {
                    ans.Add("ToString", aainfo.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("ToStringException", e.ToString());
                }

                try
                {
                    ans.Add("FlowToken", aainfo.FlowToken.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("FlowTokenException", e.ToString());
                }

                try
                {
                    string privis = "";

                    for (int i = 0; i <= XOn.XPRIVILEGE_MAX; ++i)
                    {
                        if (aainfo.HasPrivilege(i))
                        {
                            if (privis != "")
                            {
                                privis += ",";
                            }

                            privis += i.ToString();
                        }
                    }

                    ans.Add("HasPrivilege", privis);
                }
                catch (Exception e)
                {
                    ans.Add("HasPrivilegeException", e.ToString());
                }

                try
                {
                    ans.Add("IsUserValid", aainfo.IsUserValid.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("IsUserValidException", e.ToString());
                }

                try
                {
                    ans.Add("IssueInstant", aainfo.IssueInstant.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("IssueInstantException", e.ToString());
                }

                try
                {
                    ans.Add("NotAfter", aainfo.NotAfter.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("NotAfterException", e.ToString());
                }

                try
                {
                    ans.Add("PassportCId", aainfo.PassportCId.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("PassportCIdException", e.ToString());
                }

                try
                {
                    string ct = aainfo.CertDeviceId;
                    ans.Add("CertDeviceId", ct == null ? "null" : ct);
                }
                catch (Exception e)
                {
                    ans.Add("CertDeviceIdException", e.ToString());
                }

                try
                {
                    string gt = aainfo.GamerTag;
                    ans.Add("GamerTag", gt == null ? "null" : gt);
                }
                catch (Exception e)
                {
                    ans.Add("GamerTagException", e.ToString());
                }

                try
                {
                    ans.Add("PlatformType", aainfo.PlatformType.ToString());
                }
                catch (Exception e)
                {
                    ans.Add("PlatformTypeException", e.ToString());
                }
            }
        }

        return ans;
    }

    #region ITestFDApiName Members

    public string ApiName
    {
        get { return "Reflect"; }
    }

    #endregion
}

//This is the same as reflect, it's just configured differently in npdb
public class ReflectNoAuthSg : Reflect
{
    #region ITestFDApiName Members

    public new string ApiName
    {
        get { return "ReflectNoAuthSg"; }
    }

    #endregion
}

} //namespace
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\util.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using System.Collections.Generic;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Threading;

//using xonline.server.XConnSrv;
using xonline.common.community;
using System.Xml.Serialization;
using xonline.common.billing;
using xonline.common.user;


namespace xonline.server.testfd.fd
{
    public partial class TestFDUtil
    {
        #region Constants

        private static uint XONLINE_FRIENDSTATE_FLAG_ONLINE = 0x00000001;
        private static uint XONLINE_FRIENDSTATE_FLAG_PLAYING = 0x00000002;
        //private static uint XONLINE_FRIENDSTATE_FLAG_VOICE =                     0x00000008;
        private static uint XONLINE_FRIENDSTATE_FLAG_JOINABLE = 0x00000010;
        private static uint XONLINE_FRIENDSTATE_FLAG_JOINABLE_FRIENDS_ONLY = 0x00000100;
        private static uint XONLINE_FRIENDSTATE_ENUM_AWAY = 0x00010000;
        private static uint XONLINE_FRIENDSTATE_ENUM_BUSY = 0x00020000;
        //private static uint XONLINE_FRIENDSTATE_ENUM_CONSOLE_XBOX1=              0x00000000;
        private static uint XONLINE_FRIENDSTATE_ENUM_CONSOLE_XBOX360 = 0x00001000;
        //private static uint XONLINE_FRIENDSTATE_ENUM_CONSOLE_WINPC=              0x00002000;
        private static uint XONLINE_FRIENDSTATE_FLAG_PARTY_JOINABLE = 0x00000200;
        private static uint XONLINE_FRIENDSTATE_FLAG_PARTY_JOINABLE_FRIENDS_ONLY = 0x00000400;
        private static uint XONLINE_FRIENDSTATE_FLAG_PARTY_PLAYING = 0x00000800;
        //private static uint XONLINE_FRIENDSTATE_MASK_PARTY_COUNTER=              0x00300000;

        // these characters can be used to create random names
        private static string validChars = "0123456789abcdefghijklmnopqrstuvwxyz";
        private static string validFirstChar = "abcdefghijklmnopqrstuvwxyz";
        private static int validCharCount = validChars.Length;

        private static string defaultGamertagPrefix = "FR";
        public static uint maxFriends = 100;

        public static string PassportMemberDomain = "@xbltest.com";

        #endregion

        #region Account Creation Utils

        public static CreateXboxComAccountRequest BuildXboxComRequest(TestFDCreateXboxComAccountRequest testFDReq)
        {
            CreateXboxComAccountRequest req = new CreateXboxComAccountRequest();

            req.phoneInfo = new xonline.common.protocol.PhoneInfoData();
            req.creditCardInfo = new xonline.common.protocol.CreditCardInfoData();
            req.directDebitInfo = new xonline.common.protocol.DirectDebitInfoData();

            req.firstName = testFDReq.firstName;
            req.lastName = testFDReq.lastName;
            req.gamertag = testFDReq.gamertag;
            req.birthdate = testFDReq.birthdate;
            req.email = testFDReq.email;
            req.languageId = testFDReq.languageId;
            req.countryId = testFDReq.countryId;
            req.SchemaVersion = testFDReq.SchemaVersion;

            // Note: We're not using PassportSessionToken.Verify() since we don't care 
            req.userPassportPuid = PassportSessionToken.GetPuid(testFDReq.signedUserPassportPuid);
            req.ownerPassportPuid = PassportSessionToken.GetPuid(testFDReq.signedOwnerPassportPuid);

            //Credit Card Data
            if (testFDReq.countryId != XOn.XONLINE_COUNTRY_GERMANY)
            {
                req.creditCardInfo.accountHolderName = testFDReq.firstName;
                req.creditCardInfo.accountNumber = "4111111111111111";
                req.creditCardInfo.cardType = 0;
                req.creditCardInfo.ccvNumber = "123";
                req.creditCardInfo.expirationDate = DateTime.Now.AddYears(10);
            }

            //Address Data
            req.addressInfo = CreateAddressInfo(testFDReq.countryId);

            //Phone Data
            req.phoneInfo.phonePrefix = "425";
            req.phoneInfo.phoneNumber = "894-0784";

            return req;
        }

        public static AddressInfoData CreateAddressInfo(uint countryId)
        {
            AddressInfoData address = new AddressInfoData();

            switch (countryId)
            {
                case XOn.XONLINE_COUNTRY_UNITED_ARAB_EMIRATES:
                case XOn.XONLINE_COUNTRY_AUSTRIA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Vienna";
                    address.postalCode = "1030";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_AUSTRALIA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Brighton";
                    address.postalCode = "3186";
                    address.state = "VIC";
                    break;
                case XOn.XONLINE_COUNTRY_BELGIUM:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Brussels";
                    address.postalCode = "1000";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_BRAZIL:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Sao Paulo";
                    address.postalCode = "07141-970";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_CANADA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Victoria";
                    address.postalCode = "V8W 9W2";
                    address.state = "BC";
                    break;
                case XOn.XONLINE_COUNTRY_SWITZERLAND:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Weinfelden";
                    address.postalCode = "8570";
                    address.state = "TG";
                    break;
                case XOn.XONLINE_COUNTRY_CHILE:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Santiago";
                    address.postalCode = "8340457";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_COLOMBIA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Medellin";
                    address.postalCode = "";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_CHINA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "BeiJing";
                    address.postalCode = "100001";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_CZECH_REPUBLIC:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Prague";
                    address.postalCode = "109 99";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_GERMANY:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "BERLIN";
                    address.postalCode = "22767";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_DENMARK:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Kbenhavn K";
                    address.postalCode = "1202";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_SPAIN:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Barcelona";
                    address.postalCode = "08007";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_FINLAND:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Helsinki";
                    address.postalCode = "00100";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_FRANCE:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "CABOURG";
                    address.postalCode = "14390";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_GREECE:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Thessaloniki";
                    address.postalCode = "575 00";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_HONG_KONG:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Wanchai";
                    address.postalCode = "";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_HUNGARY:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Wanchai";
                    address.postalCode = "";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_IRELAND:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Banagher-on-the-Shannon";
                    address.postalCode = "";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_INDIA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Gurgaon";
                    address.postalCode = "122 002";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_ITALY:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Bologna";
                    address.postalCode = "40053";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_JAPAN:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Shibuya-ku";
                    address.postalCode = "1518543";
                    address.state = "Tokyo";
                    break;
                case XOn.XONLINE_COUNTRY_KOREA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Seoul";
                    address.state = "";
                    address.postalCode = "135080";
                    break;
                case XOn.XONLINE_COUNTRY_MEXICO:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Mxico City";
                    address.postalCode = "11580";
                    address.state = "Col. Polanco";
                    break;
                case XOn.XONLINE_COUNTRY_NETHERLANDS:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "AMSTERDAM";
                    address.postalCode = "1012 RC";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_NORWAY:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Oslo";
                    address.postalCode = "0980";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_NEW_ZEALAND:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Aukland";
                    address.postalCode = "";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_POLAND:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Warsaw";
                    address.postalCode = "00-540";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_PORTUGAL:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Lisboa";
                    address.postalCode = "1250-096";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_RUSSIAN_FEDERATION:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Moscow";
                    address.postalCode = "113035";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_SWEDEN:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Jukkasjrvi";
                    address.postalCode = "98191";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_SINGAPORE:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Singapore";
                    address.postalCode = "179803";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_TAIWAN:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Taipei";
                    address.postalCode = "110";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_GREAT_BRITAIN:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "London";
                    address.postalCode = "EC1Y8SY";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_SOUTH_AFRICA:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "ape Town";
                    address.postalCode = "7800";
                    address.state = "";
                    break;
                case XOn.XONLINE_COUNTRY_UNITED_STATES:
                    address.street1 = "9931 Lovely Lane NE";
                    address.city = "Redmond";
                    address.postalCode = "98052";
                    address.state = "WA";
                    break;
                default:
                    throw new Exception(String.Format("AddressInfoData doesn't know how to generate Address for countryId: {0}", countryId));
            }
            return address;
        }

        public static HResult CreateXboxComAccount(CreateXboxComAccountRequest actualReq, out CreateXboxComAccountResponse actualResp)
        {
            HResult hr = HResult.S_OK;
            actualResp = new CreateXboxComAccountResponse();
            XRLObject2 xrlObject = actualResp;

            // this stuff is coming off the web, we don't have a machine id
            // or a user id, so we like about it.  pass zeroes for all that
            HTTPAuthData authData = new HTTPAuthData(0, 0, 0, 0, 0, XOn.WEB_TITLE_ID, (uint)XOService.User_Account, 0);

            WebHeaderCollection headers = new WebHeaderCollection();
            headers[XHttpHdr.WEBCACHEREQUEST] = "TRUE";

            hr = XRLUtil.PostXrlRequest(VirtualInterface.xuacs_int, actualReq.Xrl, authData.GetBase64EncodedString(), actualReq, headers, ref xrlObject);

            return hr;
        }

        public static HResult CreateAccounts(uint numAccounts, string gamertagPrefix, out ulong[] xuids, out string[] gamertags)
        {
            HResult hr = HResult.S_OK;
            xuids = new ulong[numAccounts];
            gamertags = new string[numAccounts];

            if (gamertagPrefix == "") gamertagPrefix = defaultGamertagPrefix;
            if (numAccounts == 0) return HResult.E_INVALIDARG;
            if (numAccounts > maxFriends) numAccounts = maxFriends;
            if (gamertagPrefix.Length > 15) return HResult.E_INVALIDARG;

            for (int i = 0; i < numAccounts; i++)
            {

                TestFDCreateXboxComAccountRequest request = new TestFDCreateXboxComAccountRequest();
                CreateXboxComAccountResponse actualResp = new CreateXboxComAccountResponse();

                request.firstName = "Laura";
                request.lastName = "Massey";
                request.countryId = (byte)XOn.XONLINE_COUNTRY_UNITED_STATES;
                request.languageId = (byte)XOn.XC_LANGUAGE_ENGLISH;
                request.gamertag = GenerateRandomGamertag(gamertagPrefix, 15);
                request.email = request.gamertag + "@xboxtest.com";
                request.birthdate = DateTime.UtcNow.AddYears(-25);
                request.partnerOptIn = 0;
                request.msftOptIn = 0;
                ulong puid = CreatePassportID(request.email, "supersecret", "What is your quest?", "to find the grail", request.birthdate, request.countryId);

                // Note: We're not signing these tokens just yet
                request.signedUserPassportPuid = CreatePassportSessionToken(puid);
                request.signedOwnerPassportPuid = request.signedUserPassportPuid;

                CreateXboxComAccountRequest actualReq = BuildXboxComRequest(request);
                HResult hrTemp = CreateXboxComAccount(actualReq, out actualResp);
                if (hrTemp == HResult.XONLINE_E_ACCOUNTS_NAME_TAKEN)
                {
                    //our random number generator is sometimes not so random. Let's just try that one again.
                    request.gamertag = GenerateRandomGamertag(gamertagPrefix, 15);
                    actualReq = BuildXboxComRequest(request);
                    hrTemp = CreateXboxComAccount(actualReq, out actualResp);
                }
                if (hrTemp != HResult.S_OK)
                {
                    actualResp.userPuid = 0;
                    request.gamertag = "";
                    hr = hrTemp;
                }

                xuids[i] = actualResp.userPuid;
                gamertags[i] = request.gamertag;

                Thread.Sleep(10);
            }

            WaitForXCacheSmart(xuids[numAccounts - 1]);

            return hr;
        }

        public static Byte[] CreatePassportSessionToken(UInt64 puid)
        {
            return CreatePassportSessionToken(puid, null);
        }

        public static Byte[] CreatePassportSessionToken(UInt64 puid, Byte[] key)
        {
            Byte[] passportSessionToken = new Byte[XOn.XONLINE_PASSPORT_SESSION_TOKEN_LEN];
            using (BinaryWriter writer = new BinaryWriter(new MemoryStream(passportSessionToken)))
            {
                writer.Write(puid);

                if (key != null)
                {
                    // If a key was provided, hash the puid, and write the
                    // signature into the passport session token
                    var shaM = new System.Security.Cryptography.HMACSHA1(key);
                    shaM.ComputeHash(passportSessionToken, 0, 8);
                    writer.Write(shaM.Hash);
                }
            }

            return passportSessionToken;
        }

        private static bool IsValidGamertag(string gamertag)
        {
            gamertag = gamertag.ToLower();
            if (gamertag.Length == 0) return true;
            if (gamertag.Length > 15) return false;
            if (!validFirstChar.Contains("" + gamertag[0])) return false;

            foreach (char c in gamertag)
            {
                if (!validChars.Contains("" + c))
                {
                    return false;
                }
            }

            return true;
        }

        public static string GenerateRandomGamertag(string prefix, int MaxLength)
        {
            long i;
            StringBuilder Name;

            //validate prefix
            if (!IsValidGamertag(prefix))
            {
                prefix = "";
            }

            Name = new StringBuilder(prefix);

            //Add some random valid characters
            for (i = Name.Length; i < MaxLength; i++)
            {
                Name.Append(validChars[GetRandomInt(validCharCount)]);
            }
            return Name.ToString(0, MaxLength);
        }

        #endregion

        #region Presence Utils

        public static HResult SetPresenceForUsers(ulong[] xuids, uint titleId, uint stateFlags, string richPresenceString)
        {
            HResult hr = HResult.E_FAIL;

            try
            {
                //verify parameters
                if (xuids == null)
                {
                    hr = HResult.E_INVALIDARG;
                    goto Exit;
                }
                if (richPresenceString.Length > 58)
                {
                    hr = HResult.E_INVALIDARG;
                    goto Exit;
                }

                //update presence state of users
                for (uint i = 0; i < xuids.Length; i++)
                {
                    InsertBasicPresenceBlob(xuids[i], titleId, stateFlags);
                    InsertRichPresenceBlob(xuids[i], richPresenceString);
                }

                hr = HResult.S_OK;
            }
            catch (Exception e)
            {
                //something very unexpected happen. exit.
                Xom.Trace("testfd", LogLevel.L_HIGH, "SetPresenceForUsers threw an exception: " + e.ToString());
                throw e;
            }
        Exit:
            return hr;
        }

        public static void InsertBasicPresenceBlob(ulong qwUserID, uint title, uint state)
        {
            BasicPresence basic = BuildBasicPresence(qwUserID, title, state);
            CacheUtil.OverwriteCache(basic);
        }

        public static void InsertRichPresenceBlob(ulong qwUserID)
        {
            //build the RP blob
            int randomNum = GetRandomInt(5000);
            string englishRPString = "Custom RichPresence string from TestFD #" + randomNum.ToString();

            InsertRichPresenceBlob(qwUserID, englishRPString);
        }

        public static void InsertRichPresenceBlob(ulong qwUserID, string basestring)
        {
            Dictionary<string, string> temp = new Dictionary<string, string>();
            //
            temp.Add("en-US", "en-US " + basestring); // ENGLISH
            temp.Add("es-ES", "es-ES " + basestring); // SPANISH
            temp.Add("fr-FR", "fr-FR " + basestring); // FRENCH
            temp.Add("de-DE", "de-DE " + basestring); // GERMAN
            temp.Add("it-IT", "it-IT " + basestring); // ITALIAN
            temp.Add("ja-JP", "ja-JP " + basestring); // JAPANESE
            temp.Add("ko-KR", "ko-KR " + basestring); // KOREAN
            temp.Add("zh-CN", "zh-CN " + basestring); // SIMPLIFIED CHINESE
            temp.Add("pl-PL", "pl-PL " + basestring); // POLISH
            temp.Add("pt-PT", "pt-PT " + basestring); // PORTUGUESE
            temp.Add("ru-RU", "ru-RU " + basestring); // RUSSIAN
            //temp.Add("zh-CHT","zh-CHT " + basestring); // TRADITIONAL CHINESE


            LanguageSpecificData lsBlob = BuildRichPresence(temp, qwUserID);
            CacheUtil.OverwriteCache(lsBlob);
        }

        public static uint BuildRandomOnlineState()
        {
            uint state = XONLINE_FRIENDSTATE_FLAG_ONLINE | XONLINE_FRIENDSTATE_ENUM_CONSOLE_XBOX360; //online on a x360
            int num = GetRandomInt(0, 2);
            if (num == 0)
            {
                num = GetRandomInt(0, 2);
                if (num == 0)
                {
                    state |= XONLINE_FRIENDSTATE_FLAG_PLAYING;
                }
                num = GetRandomInt(0, 2);
                if (num == 0)
                {
                    state |= XONLINE_FRIENDSTATE_FLAG_JOINABLE;
                }
                num = GetRandomInt(0, 2);
                if (num == 0)
                {
                    state |= XONLINE_FRIENDSTATE_FLAG_JOINABLE_FRIENDS_ONLY;
                }
                num = GetRandomInt(0, 2);
                if (num == 0)
                {
                    num = GetRandomInt(0, 2);
                    if (num == 0)
                    {
                        state |= XONLINE_FRIENDSTATE_ENUM_AWAY;
                    }
                    else
                    {
                        state |= XONLINE_FRIENDSTATE_ENUM_BUSY;
                    }
                }
                num = GetRandomInt(0, 2);
                if (num == 0)
                {
                    state |= XONLINE_FRIENDSTATE_FLAG_PARTY_PLAYING;
                    state |= XONLINE_FRIENDSTATE_FLAG_PARTY_JOINABLE;
                    state |= XONLINE_FRIENDSTATE_FLAG_PARTY_JOINABLE_FRIENDS_ONLY;
                }
                num = GetRandomInt(0, 2);
                if (num == 0)
                {
                    state |= XONLINE_FRIENDSTATE_FLAG_PARTY_PLAYING;
                }
            }

            return state;
        }

        private static BasicPresence BuildBasicPresence(ulong qwUserID, uint title, uint state)
        {
            //Get Gamertag
            string gamertag = XCache.LookupGamerTag(qwUserID);

            BasicPresence basic = new BasicPresence();
            basic.OwnerID = qwUserID;
            basic.sGamertag = gamertag;
            basic.dwTitleID = title;
            basic.dwState = state;
            basic.HeaderFlags = CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE;

            return basic;
        }

        public static List<uint> GetListOfProppedTitleIds(bool includeTestTitles)
        {
            List<uint> proppedTitles = new List<uint>();

            // See if there is a list of whitelisted titles we should use.
            string allowedTitles = Config.GetSetting(Setting.testfd_whitelistTitles);
            if (! string.IsNullOrEmpty(allowedTitles))
            {
                string[] titles = allowedTitles.Split(",".ToCharArray());
                foreach (string t in titles)
                {
                    uint titleId = uint.Parse(t);
                    // Just calling get_all_configs isn't good enough for our purposes. We need to verify these are properly propped titles.
                    // verify they have readable names from the string server
                    if (ValidateTitle(titleId))
                        proppedTitles.Add(titleId);
                }
                return proppedTitles;
            }

            //query t_game_config for titleids that are not test titles
            using (SqlConnection conn = new SqlConnection(Config.NpdbConnectionString))
            {
                conn.Open();
                DateTime dtChange = DateTime.Now.AddYears(-1);
                SqlCommand cmd = new SqlCommand("p_game_get_all_configs", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@dt_changed", SqlDbType.DateTime).Value = dtChange;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    int titleIdOrd = reader.GetOrdinal("i_title_id");

                    while (reader.Read())
                    {
                        uint titleId = (uint)reader.GetInt32(titleIdOrd);
                        if (!includeTestTitles)
                        {
                            //filter out the test titles
                            if (titleId <= 0x2200000F) continue; 
                            if (titleId >= 0xBAADAA4C) continue; 
                            if (titleId >= 0x50500001 && titleId <= 0x50500205 ) continue;
                            if (titleId >= 0x58415000 && titleId <= 0x58416001 ) continue;
                            if (titleId >= 0x58430700 && titleId <= 0x584307FF ) continue;
                            if (titleId >= 0x58450700 && titleId <= 0x584507FF ) continue;
                            if (titleId >= 0x58480700 && titleId <= 0x584807FF ) continue;
                            if (titleId >= 0x58490700 && titleId <= 0x584907FF ) continue;
                            if (titleId >= 0x584A0700 && titleId <= 0x584A07FF ) continue;
                            if (titleId >= 0x584B0700 && titleId <= 0x584B07FF ) continue;
                            if (titleId >= 0x584C0700 && titleId <= 0x584C07FF ) continue;
                            if (titleId >= 0x584D0700 && titleId <= 0x584D07FF ) continue;
                            if (titleId >= 0x584E0700 && titleId <= 0x584E07FF ) continue;
                            if (titleId >= 0x584F0700 && titleId <= 0x584F07FF ) continue;
                            if (titleId >= 0x585207D1 && titleId <= 0x5854D001 ) continue;
                        }

                        // Just calling get_all_configs isn't good enough for our purposes. We need to verify these are properly propped titles.
                        // verify they have readable names from the string server
                        if (ValidateTitle(titleId))
                            proppedTitles.Add(titleId);
                    }
                }
            }

            return proppedTitles;
        }

        private static bool ValidateTitle(uint titleId)
        {
            string tn = GetTitleIDEnUsProppedName(titleId);
            if (! string.IsNullOrEmpty(tn))
            {
                // verify the XLAST XML is well formed by loading it into title config. Slow, but we have to do this.
                try
                {
                    TitleConfig tcfg = TitleConfig.GetTitle(titleId, false);
                    if (tcfg != null)
                    {
                       return true;
                    }
                }
                catch
                {
                    //eat any exception thrown
                }
            }
            return false;
        }

        private static string GetTitleIDEnUsProppedName(uint title)
        {
            string titleName = "";
            using (SqlConnection conn = new SqlConnection(Config.NpdbConnectionString))
            {
                conn.Open();

                SqlCommand cmd = new SqlCommand("p_stringsvr_strings_get_by_title_and_id", conn);
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.Parameters.Add("@i_title_id", SqlDbType.Int).Value = (int)title;
                cmd.Parameters.Add("@i_string_id", SqlDbType.Int).Value = 0;

                using (SqlDataReader reader = cmd.ExecuteReader())
                {
                    int languageOrd = reader.GetOrdinal("vc_locale");
                    int stringOrd = reader.GetOrdinal("nvc_text");


                    while (reader.Read())
                    {
                        string language = reader.GetString(languageOrd);
                        string strText = reader.GetString(stringOrd);

                        if (language.ToLower().Equals("en-us"))
                        {
                            titleName = strText;
                        }
                    }
                }
            }

            return titleName;
        }

        public static void WaitForXCacheSmart(ulong xuid)
        {
            if (xuid == 0) return; 

            int maxWait = Config.GetIntSetting(Setting.xcache_db_pollingInterval);

            DateTime timeout = DateTime.Now.AddSeconds(maxWait);

            string gamertag = XCache.LookupGamerTag(xuid);

            while (DateTime.Now < timeout && gamertag == XCache.InvalidGamertag)
            {
                //poll xcache for the gamertag every 1 second
                Thread.Sleep(1000);
                gamertag = XCache.LookupGamerTag(xuid);
            }
        }

        private static LanguageSpecificData BuildRichPresence(Dictionary<string, string> localesWithStrings, ulong qwUserID)
        {
            // get the locales for this title.
            string[] locales = new string[localesWithStrings.Count];
            string[] localizedStrings = new string[localesWithStrings.Count];
            localesWithStrings.Keys.CopyTo(locales, 0);
            localesWithStrings.Values.CopyTo(localizedStrings, 0);

            LanguageSpecificData lsBlob = new LanguageSpecificData(DATA_TYPES.eRichPresenceString);
            lsBlob.OwnerID = qwUserID;
            lsBlob.HeaderFlags = CacheUtil.XONLINE_CACHE_DATA_FLAG_SHARE_EVERYONE | CacheUtil.XONLINE_CACHE_DATA_FLAG_LANGUAGE_SPECIFIC;
            lsBlob.rgLocales = locales;
            lsBlob.rgInnerBlobs = new BaseDataHeader[localizedStrings.Length];

            for (int iString = 0; iString < localizedStrings.Length; iString++)
            {
                RichPresenceData rich = new RichPresenceData();
                rich.header = lsBlob.header;
                rich.sRichPresence = localizedStrings[iString];

                lsBlob.rgInnerBlobs[iString] = rich;
            }

            return lsBlob;
        }

        #endregion

        #region Friends Utils

        private static bool GetUserGamertag(ulong xuid, out string gamertag)
        {
            gamertag = XCache.LookupGamerTag(xuid);
            if (gamertag == "" || gamertag == XCache.InvalidGamertag)
            {
                //this means the user is invalid.
                gamertag = "";
                return false;
            }

            return true;
        }

        private static HResult MakeFriends(ulong userXuid, string userGamertag, ulong friendXuid, string friendGamertag)
        {
            HResult hr = HResult.E_FAIL;

            hr = FriendsListUtil.Add(userXuid, friendXuid, userGamertag, friendGamertag);
            if (hr != HResult.S_OK)
            {
                Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends: Calling FriendsListUtil.Add between " + userGamertag + " and " + friendGamertag + " failed with hr " + hr);
                goto Exit;
            }
            hr = FriendsListUtil.Accept(friendXuid, userXuid);
            if (hr != HResult.S_OK)
            {
                Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends: Calling FriendsListUtil.Accept between " + userGamertag + " and " + friendGamertag + " failed with hr " + hr);
                goto Exit;
            }

        Exit:
            return hr;
        }

        public static HResult MakeFriends(ulong xuid, uint numberOfFriends, string gamertagPrefix)
        {
            HResult hr = HResult.E_FAIL;
            try
            {
                //get the calling user's gamertag and verifies the user exists
                string gamertag = "";
                if (!GetUserGamertag(xuid, out gamertag))
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends: Passed in user " + xuid + " was not found in xcache.");
                    hr = HResult.E_INVALIDARG;
                    goto Exit;
                }

                if (numberOfFriends > TestFDUtil.maxFriends) numberOfFriends = TestFDUtil.maxFriends;

                //check the user's friends list to see if he has enough open slots
                FriendsList FL = FriendsListUtil.GetFriendsListForXuid(xuid);
                uint openSlots = TestFDUtil.maxFriends - FL.dwNumUsers;
                if (numberOfFriends > openSlots) numberOfFriends = openSlots;

                //create "numberOfFriends" friends
                ulong[] xuids;
                string[] gamertags;
                hr = TestFDUtil.CreateAccounts(numberOfFriends, gamertagPrefix, out xuids, out gamertags);
                if (hr != HResult.S_OK)
                {
                    //Note the failure, but don't quit. We were probably able to create some accounts.
                    Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends: Creating " + numberOfFriends + " accounts with prefix " + gamertagPrefix + " failed with hr " + hr);
                }

                //make friends and update initial profile settings
                for (int i = 0; i < xuids.Length; i++)
                {
                    ulong friendXuid = xuids[i];
                    string friendGT = gamertags[i];
                    //skip invalid xuids / gamertags
                    if (friendXuid == 0 || friendGT == "") continue;

                    hr = MakeFriends(xuid, gamertag, friendXuid, friendGT);
                    if (hr != HResult.S_OK)
                    {
                        Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends: Making friends between " + gamertag + " and " + friendGT + " failed with hr " + hr);
                        goto Exit;
                    }
                    
                    //set initial profile settings- a failure shouldn't stop us here
                    hr = SetInitialRandomProfileSettings(friendXuid);
                    if (hr != HResult.S_OK)
                    {
                        Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends: Setting intial profile settings of " + friendGT + " failed with hr " + hr);
                    }
                }
                hr = HResult.S_OK;
            }
            catch (Exception e)
            {
                //something very unexpected happen. exit.
                Xom.Trace("testfd", LogLevel.L_HIGH, "MakeFriends threw an exception: " + e.ToString());
                throw e;
            }

        Exit:
            return hr;

        }

        public static HResult UpdateFriendsToBeOnlinePlayingDifferentTitle(ulong xuid, uint maxUniqueTitles, uint percentageOfFriends)
        {
            HResult hr = HResult.E_FAIL;

            try
            {
                //verify parameters
                if (percentageOfFriends > 100)
                {
                    hr = HResult.E_INVALIDARG;
                    goto Exit;
                }
                string gamertag = "";
                if (!GetUserGamertag(xuid, out gamertag))
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "UpdateFriendsToBeOnlinePlayingDifferentTitle: Passed in user " + xuid + " was not found.");
                    hr = HResult.E_INVALIDARG;
                    goto Exit;
                }

                //figure out how many titles are propped to the environment and adjust maxUniqueTitles accordingly
                List<uint> proppedTitles = GetListOfProppedTitleIds(false);
                if (proppedTitles.Count < maxUniqueTitles)
                {
                    //include the test titles if there aren't enough titles to satisfy the request
                    proppedTitles = GetListOfProppedTitleIds(true);
                }
                if (proppedTitles.Count == 0)
                {
                    //this shouldn't happen, but we need a default. Insert the dashboard (should ALWAYS be propped if consoles are connected)
                    proppedTitles.Add(XOn.XENON_DASH_TITLE_ID);
                }

                if (proppedTitles.Count < maxUniqueTitles)
                {
                    maxUniqueTitles = (uint)proppedTitles.Count;
                }

                //get the friends list 
                FriendsList FL = FriendsListUtil.GetFriendsListForXuid(xuid);
                if (FL == null)
                {
                    //something very bad happened, and we don't know what. E_FAIL;
                    Xom.Trace("testfd", LogLevel.L_HIGH, "UpdateFriendsToBeOnlinePlayingDifferentTitle: Passed in user " + xuid + "'s friends list was not found.");
                    hr = HResult.E_FAIL;
                    goto Exit;
                }

                //calculate how many xuids we're turning online vs. offline
                uint numOnline = 0;
                if (percentageOfFriends > 0)
                {
                    numOnline = (uint)(FL.dwNumUsers * (percentageOfFriends / 100.0));
                }

                //update presence state of friends
                for (uint i = 0; i < numOnline; i++)
                {
                    ulong friendXuid = (ulong)FL.rgUsers[i].qwXUID;
                    uint title = proppedTitles[(int)i % (int)maxUniqueTitles];
                    uint state = BuildRandomOnlineState();

                    InsertBasicPresenceBlob(friendXuid, title, state);
                    InsertRichPresenceBlob(friendXuid);
                }
                for (uint i = numOnline; i < (uint)FL.dwNumUsers; i++)
                {
                    ulong friendXuid = (ulong)FL.rgUsers[i].qwXUID;
                    uint title = 0;
                    uint state = 0x0; //offline

                    InsertBasicPresenceBlob(friendXuid, title, state);
                }

                hr = HResult.S_OK;
            }
            catch (Exception e)
            {
                //something very unexpected happen. exit.
                Xom.Trace("testfd", LogLevel.L_HIGH, "UpdateFriendsToBeOnlinePlayingDifferentTitle threw an exception: " + e.ToString());
                throw e;
            }
        Exit:
            return hr;
        }

        #endregion

        #region Achievement Utils

        public static HResult GrantAchievements(ulong xuid, ushort platformType, uint numberOfUniqueTitles, uint percentageofAchievementsToGrant)
        {
            HResult hr = HResult.E_FAIL;
            try
            {
                //get the calling user's gamertag and verifies the user exists
                string gamertag = "";
                if (!GetUserGamertag(xuid, out gamertag))
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "GrantAchievements: Passed in user " + xuid + " was not found in xcache.");
                    hr = HResult.E_INVALIDARG;
                    goto Exit;
                }

                // Get lists of titles to add
                List<uint> titles = GetTitlesForUser(xuid, (TitleConfig.SupportedPlatforms)platformType, numberOfUniqueTitles);

                foreach (uint title in titles)
                {
                    // Sync title
                    hr = SyncTitle(xuid, title);
                    if (hr == HResult.S_OK && percentageofAchievementsToGrant > 0)
                    {
                        hr = SyncAchievements(xuid, title, percentageofAchievementsToGrant);
                    }
                    if (hr != HResult.S_OK)
                    {
                        goto Exit;
                    }
                }

                // Return an error if we don't have the number of titles requested
                if (titles.Count != numberOfUniqueTitles)
                {
                    hr = HResult.XONLINE_E_TESTFD_NOT_ENOUGH_TITLES_PROPPED;
                }
            }
            catch (Exception e)
            {
                //something very unexpected happen. exit.
                Xom.Trace("testfd", LogLevel.L_HIGH, "GrantAchievements threw an exception: " + e.ToString());
                throw e;
            }

        Exit:
            return hr;

        }

        private static List<uint> GetTitlesForUser(ulong xuid, TitleConfig.SupportedPlatforms platformType, uint numberOfUniqueTitles)
        {
            List<uint> playedTitles = EnumerateTitlesPlayedByUser(xuid);
            List<uint> proppedTitles = GetListOfProppedTitleIds(false);

            List<uint> titleCandidates = FilterTitleList(xuid, platformType, numberOfUniqueTitles, proppedTitles, playedTitles);
            if (titleCandidates.Count < numberOfUniqueTitles)
            {
                //try again with the test titles
                proppedTitles = GetListOfProppedTitleIds(true);
                titleCandidates = FilterTitleList(xuid, platformType, numberOfUniqueTitles, proppedTitles, playedTitles);
            }

            return titleCandidates;
        }

        private static List<uint> FilterTitleList(ulong xuid, TitleConfig.SupportedPlatforms platformType, uint numberOfUniqueTitles, List<uint> proppedTitles, List<uint> playedTitles)
        {
            if ((proppedTitles.Count - playedTitles.Count) < numberOfUniqueTitles)
            {
                // We don't have enough titles to fulfill the user's request.
                // Since we are ADDING numberOfUniqueTitles to the xuid's profile, 
                // we can subtract the ones the user has from the # we are granting
                numberOfUniqueTitles = (uint)proppedTitles.Count - (uint)playedTitles.Count;
            }

            if (numberOfUniqueTitles == 0)
            {
                return new List<uint>();
            }

            List<uint> titleCandidates = GetTitlesByPlatformType(platformType, proppedTitles);
            if (titleCandidates.Count == 0)
            {
                return new List<uint>();
            }

            List<uint> titlesForUser = new List<uint>();
            while ((titlesForUser.Count < numberOfUniqueTitles) && titleCandidates.Count > 0)
            {
                int index = GetRandomInt(0, titleCandidates.Count);
                // Get random titles
                uint title = titleCandidates[index];
                // Make sure it's not played
                if (!playedTitles.Contains(title))
                {
                    titlesForUser.Add(title);
                }
                // Remove title from title candidates
                titleCandidates.Remove(title);
            }

            return titlesForUser;
        }

        private static List<uint> GetTitlesByPlatformType(TitleConfig.SupportedPlatforms platformType, List<uint> proppedTitles)
        {
            bool allPlatforms = false;
            if (platformType == TitleConfig.SupportedPlatforms.MaxPlatforms)
            {
                allPlatforms = true;
            }

            List<uint> proppedTitlesForPlatform = new List<uint>();

            // Pick out titles by platformType
            foreach (uint titleId in proppedTitles)
            {
                TitleConfig tcfg = TitleConfig.GetTitle(titleId, false /* throwOnNotFound */);
                if (tcfg != null && (allPlatforms || tcfg.Platforms[(int)platformType]))
                {
                    proppedTitlesForPlatform.Add(titleId);
                }
            }

            return proppedTitlesForPlatform;
        }

        private static List<uint> EnumerateTitlesPlayedByUser(ulong xuid)
        {
            HResult hr = HResult.S_OK;
            EnumTitlesRequest actualReq = new EnumTitlesRequest();
            EnumTitlesResponse actualResp = new EnumTitlesResponse();
            XRLObject2 xrlObject = actualResp;

            actualReq.UserId = xuid;
            actualReq.ForUserId = xuid;
            actualReq.LocaleId = (ushort)Locales.en_US;
            actualReq.StartingIndex = 0;
            actualReq.MaxTitles = ushort.MaxValue;

            // this stuff is coming off the web, we don't have a machine id
            // or a user id, so we like about it.  pass zeroes for all that
            HTTPAuthData authData = new HTTPAuthData(0, 0, 0, 0, xuid, XOn.WEB_TITLE_ID, (uint)XOService.Progress, 0);

            WebHeaderCollection headers = new WebHeaderCollection();
            headers[XHttpHdr.WEBCACHEREQUEST] = "TRUE";

            hr = XRLUtil.PostXrlRequest(VirtualInterface.progressfd_int, actualReq.Xrl, authData.GetBase64EncodedString(), actualReq, headers, ref xrlObject);

            if (HResult.S_OK == hr)
            {
                List<uint> titles = new List<uint>();
                foreach (UserTitle title in actualResp.Titles)
                {
                    titles.Add(title.TitleId);
                }
                return titles;
            }

            return new List<uint>();
        }

        private static HResult SyncTitle(ulong xuid, uint titleId)
        {
            HResult hr = HResult.S_OK;
            SyncTitlesRequest actualReq = new SyncTitlesRequest(xuid, DateTime.Now);
            SyncTitlesResponse actualResp = new SyncTitlesResponse();
            XRLObject2 xrlObject = actualResp;

            UserTitle userTitle = new UserTitle(titleId, DateTime.Now, 0, 0, 0);  // cred and achievements are ignored by sync titles

            actualReq.Titles = new UserTitle[] { userTitle };
            actualReq.TitlesLen = 1;
            actualReq.LocaleId = (ushort)Locales.en_US;

            WebHeaderCollection headers = new WebHeaderCollection();
            HTTPAuthData authData = new HTTPAuthData();
            GetAuthDataAndHeaders(xuid, titleId, (uint)XOService.Progress, out authData, out headers);

            hr = XRLUtil.PostXrlRequest(VirtualInterface.progressfd_int, actualReq.Xrl, authData.GetBase64EncodedString(), actualReq, headers, ref xrlObject);
            if (hr != HResult.S_OK)
            {
                Xom.Trace("testfd", LogLevel.L_HIGH, "SyncTitle returned an error: 0x" + hr);
            }
            return hr;
        }

        private static HResult SyncAchievements(ulong xuid, uint titleId, uint percentageofAchievementsToGrant)
        {
            HResult hr = HResult.S_OK;
            TitleConfig tcfg = TitleConfig.GetTitle(titleId, false /* throwOnNotFound */);

            Achievement[] achievements = PickAchievements(tcfg, percentageofAchievementsToGrant);
            if (achievements.Length <= 32)
            {
                hr = SyncAchievements(xuid, titleId, achievements);
                if (hr != HResult.S_OK)
                {
                    Xom.Trace("testfd", LogLevel.L_HIGH, "SyncAchievements returned an error: 0x" + hr);
                    goto Exit;
                }
            }
            else
            {
                //break this up into smaller calls since we can only sync 32 achievements at a time
                int index = 0;
                Achievement[] smallAchievements = null;
                for (int i = 0; i < achievements.Length; i++)
                {
                    if (index == 0)
                    {
                        if (achievements.Length - i >= 32)
                        {
                            smallAchievements = new Achievement[32];
                        }
                        else
                        {
                            smallAchievements = new Achievement[achievements.Length % 32];
                        }
                    }
                    smallAchievements[index] = achievements[i];
                    index++;

                    if (index == 32 || i == achievements.Length - 1)
                    {
                        hr = SyncAchievements(xuid, titleId, smallAchievements);
                        if (hr != HResult.S_OK)
                        {
                            Xom.Trace("testfd", LogLevel.L_HIGH, "SyncAchievements returned an error: 0x" + hr);
                            goto Exit;
                        }
                        index = 0;
                    }
                }
            }
        Exit:
            return hr;
        }

        private static HResult SyncAchievements(ulong xuid, uint titleId, Achievement[] achievements)
        {
            HResult hr = HResult.S_OK;
            SyncAchievementsRequest actualReq = new SyncAchievementsRequest();
            SyncAchievementsResponse actualResp = new SyncAchievementsResponse();
            XRLObject2 xrlObject = actualResp;

            TitleConfig tcfg = TitleConfig.GetTitle(titleId, false);

            actualReq.TitleId = titleId;
            actualReq.UserId = xuid;
            actualReq.Version = DateTime.Now;
            actualReq.LocaleId = (ushort)Locales.en_US;
            actualReq.StartingIndex = 0;
            actualReq.AchievementCount = (ushort)achievements.Length;
            actualReq.Achievements = achievements;

            HTTPAuthData authData = new HTTPAuthData();
            WebHeaderCollection headers = new WebHeaderCollection();

            GetAuthDataAndHeaders(xuid, tcfg, (uint)XOService.Progress, out authData, out headers);

            hr = XRLUtil.PostXrlRequest(VirtualInterface.progressfd_int, actualReq.Xrl, authData.GetBase64EncodedString(), actualReq, headers, ref xrlObject);

            return hr;
        }

        private static void GetAuthDataAndHeaders(ulong xuid, uint titleId, uint serviceId, out HTTPAuthData authData, out WebHeaderCollection headers)
        {
            TitleConfig tcfg = TitleConfig.GetTitle(titleId, false);
            GetAuthDataAndHeaders(xuid, tcfg, serviceId, out authData, out headers);
        }

        private static void GetAuthDataAndHeaders(ulong xuid, TitleConfig tcfg, uint serviceId, out HTTPAuthData authData, out WebHeaderCollection headers)
        {
            authData = new HTTPAuthData(0, 0, 0, 0, xuid, tcfg.TitleId, serviceId, 0);
            headers = new WebHeaderCollection();

            if (tcfg != null && tcfg.Platforms[(int)TitleConfig.SupportedPlatforms.Xbox360])
            {
                authData = new HTTPAuthData(0, 0, 0, (ulong)XOn.XboxId.XenonMachineBase, xuid, tcfg.TitleId, serviceId, 0);
                headers[XHttpHdr.XPLT] = XOn.XPLT_XBOX360.ToString();
            }
            if (tcfg != null && tcfg.Platforms[(int)TitleConfig.SupportedPlatforms.PC])
            {
                authData = new HTTPAuthData(0, 0, 0, (ulong)XOn.XboxId.PcMachineBase, xuid, tcfg.TitleId, serviceId, 0);
                headers[XHttpHdr.XPLT] = XOn.XPLT_PC.ToString();
            }
            if (tcfg != null && tcfg.Platforms[(int)TitleConfig.SupportedPlatforms.Mobile])
            {
                authData = new HTTPAuthData(0, 0, 0, (ulong)XOn.XboxId.MobileMachineBase, xuid, tcfg.TitleId, serviceId, 0);
                headers[XHttpHdr.XPLT] = XOn.XPLT_MOBILE.ToString();
            }
            if (tcfg != null && tcfg.Platforms[(int)TitleConfig.SupportedPlatforms.WebGames])
            {
                authData = new HTTPAuthData(0, 0, 0, (ulong)XOn.XboxId.PcMachineBase, xuid, tcfg.TitleId, serviceId, 0);
                headers[XHttpHdr.XPLT] = XOn.XPLT_WEB.ToString();
            }
        }

        private static Achievement[] PickAchievements(TitleConfig tcfg, uint percentageofAchievementsToGrant)
        {
            if (tcfg == null || percentageofAchievementsToGrant == 0) return new Achievement[0];

            //calcualte number to grant
            int numAchievements = (int)(tcfg.Achievements.Count * (percentageofAchievementsToGrant / 100.0));
            if (numAchievements == 0) return new Achievement[0];
            Achievement[] achievements = new Achievement[numAchievements];

            int flags = (int)(XOn.XACHIEVEMENT_DETAILS_ACHIEVED | XOn.XACHIEVEMENT_DETAILS_ACHIEVED_ONLINE);

            TitleAchievement[] tas = new TitleAchievement[numAchievements];
            int index = 0;
            foreach (TitleAchievement ta in tcfg.Achievements.Values)
            {
                tas[index] = ta;
                index++;
                if (index == numAchievements) break;
            }

            //TODO: this would be better to be random
            for (int i = 0; i < numAchievements; i++)
            {
                TitleAchievement ta = tas[i];
                achievements[i] = new Achievement();
                achievements[i].AchievementId = ta.Id;
                achievements[i].Achieved = DateTime.Now;
                achievements[i].Flags = flags;
                achievements[i].Type = (byte)ta.Type;
                achievements[i].Cred = ta.Cred;
                achievements[i].ImageId = ta.ImageId;
            }

            return achievements;
        }

        #endregion

        #region AddPaypalPaymentInstrument Utils

        [XmlRootAttribute("PaymentInstrumentInfoSet", IsNullable = false, Namespace = "urn:schemas-microsoft-com:billing-data")]
        public class PaymentInstrumentInfoSet
        {
            [XmlElement(ElementName = "PaymentInstrumentInfo")]
            public PayPalPaymentInfo[] PaymentInstrumentInfoItem = null;
        }

        public class PayPalPayinInfo
        {
            [XmlElement(ElementName = "BillingAgreementDetails")]
            public BdkBillingAgreementDetails BillingAgreementDetail = null;
        }

        public class BdkBillingAgreementDetails
        {
            [XmlElement]
            public string PayerEmail = String.Empty;
            [XmlElement]
            public string BillingAgreementId = String.Empty;
            [XmlElement]
            public string FirstName = String.Empty;
            [XmlElement]
            public string MiddleName = String.Empty;
            [XmlElement]
            public string LastName = String.Empty;
            [XmlElement]
            public string PayerBusiness = String.Empty;
            [XmlElement]
            public string PayerCountry = String.Empty;
            [XmlElement]
            public string BillingAgreementDescription = String.Empty;
        }

        public class PayPalPaymentInfo
        {
            uint puidHigh = 0;
            uint PuidLow = 0;
            [XmlElement]
            public string PaymentInstrumentId;
            [XmlElement]
            public string FriendlyName = String.Empty;
            [XmlElement(ElementName = "PayPalPayinInfo")]
            public PayPalPayinInfo PayPalPayinInfoItem = null;

            uint countryId;

            public string ToXml(uint countryId)
            {
                this.countryId = countryId;
                return ToXml();
            }

            // Builds the XML for a PayPal payment instrument request from a template filled in with some user-specific data.
            public string ToXml()
            {
                StringBuilder xmlBldr = new StringBuilder();
                string countryCode = CountryDictionary.CountryCode((byte)this.countryId);
                AddressInfoData addressInfo = TestFDUtil.CreateAddressInfo(countryId);
                string xmlTemplate =
@"<PaymentInstrumentInfo xmlns=""urn:schemas-microsoft-com:billing-data"">
    <PaymentInstrumentType>PAYPALPAYIN</PaymentInstrumentType>
    <FriendlyName>PayPal test</FriendlyName>
    <PayPalPayinInfo>
        <PayPalTokenizeInfo>
            <ReturnURL>http://www.live.com</ReturnURL>
            <CancelURL>http://www.live.com</CancelURL>
            <Description>PaypalPayinDescription</Description>
        </PayPalTokenizeInfo>
    </PayPalPayinInfo>
    <Phone>
        <PhoneType>PRIMARY</PhoneType>
        <PhonePrefix>123</PhonePrefix>
        <PhoneNumber>4567890</PhoneNumber>
        <PhoneExtension>67890</PhoneExtension>
        <CountryCode>{0}</CountryCode>
    </Phone>
    <AddressInfo>
        <AddressId></AddressId>
        <FriendlyName>Foo Bar's Address</FriendlyName>
        <UnitNumber>12</UnitNumber>
        <Street1>123 Main Street</Street1>
        <Street2>Street2</Street2>
        <Street3></Street3>
        <City>{1}</City>
        <District></District>
        <State>{2}</State>
        <CountryCode>{3}</CountryCode>
        <PostalCode>{4}</PostalCode>
        <AddressMapAttempted>false</AddressMapAttempted>
        <AddressMapSucceeded>false</AddressMapSucceeded>
        <AddressMapFailureReason>2</AddressMapFailureReason>
        <AddressMapConfidenceScore>0.5</AddressMapConfidenceScore>
        <ManualAddressSpecified>false</ManualAddressSpecified>
    </AddressInfo>
</PaymentInstrumentInfo>";

                string retVal = String.Format(xmlTemplate, countryCode, addressInfo.city, addressInfo.state, countryCode, addressInfo.postalCode);
                return retVal;
            }

            const string viewStateNameDelimiter = "__VIEWSTATE";
            const string eventValidationNameDelimiter = "__EVENTVALIDATION";

            // used to retrive the view state of paypal sign up page for post the  sign up info back later.  
            private string ExtractViewState(string s, string nameDelimiter)
            {
                string valueDelimiter = "value=\"";
                int viewStateNamePosition = s.IndexOf(nameDelimiter);
                int viewStateValuePosition = s.IndexOf(valueDelimiter, viewStateNamePosition);
                int viewStateStartPosition = viewStateValuePosition + valueDelimiter.Length;
                int viewStateEndPosition = s.IndexOf("\"", viewStateStartPosition);
                return HttpUtility.UrlEncodeUnicode(s.Substring(viewStateStartPosition, viewStateEndPosition - viewStateStartPosition));
            }

            // go to PayPal emulator to sign up a paypal account using the returned url from AddPaymentInstrument 
            private void SignupPayPal(string paypalUrl)
            {
                // Special proxy setup required for billing interactions
                string billingProxy = Config.GetSetting(Setting.billing_proxy);
                WebProxy proxy = new WebProxy();
                if (billingProxy != string.Empty)
                {
                    Uri newUri = new Uri(billingProxy);
                    proxy.Address = newUri;
                    proxy.BypassProxyOnLocal = true;
                }

                // request the login form to get the viewstate value
                HttpWebRequest webRequest = WebRequest.Create(paypalUrl) as HttpWebRequest;
                webRequest.Proxy = proxy;

                string responseData;
                using (StreamReader responseReader = new StreamReader(webRequest.GetResponse().GetResponseStream()))
                {
                    responseData = responseReader.ReadToEnd();
                    responseReader.Close();
                }

                // extract the viewstate value and build out POST data
                string viewState = ExtractViewState(responseData, viewStateNameDelimiter);
                string eventValidation = ExtractViewState(responseData, eventValidationNameDelimiter);
                string postData = String.Format(
                         "__EVENTTARGET=&__EVENTARGUMENT=&__VIEWSTATE={0}&__EVENTVALIDATION={1}&EMAIL={2}@xbltest.com&ACCEPT=Accept",
                         viewState,
                         eventValidation,
                         "paypal" + Guid.NewGuid());

                // now post to the login form
                webRequest = WebRequest.Create(paypalUrl) as HttpWebRequest;
                webRequest.Proxy = proxy;
                webRequest.Method = "POST";
                webRequest.ContentType = "application/x-www-form-urlencoded";

                // write the form values into the request message
                using (StreamWriter requestWriter = new StreamWriter(webRequest.GetRequestStream()))
                {
                    requestWriter.Write(postData);
                    requestWriter.Close();
                }

                // Send request and read the response
                using (StreamReader responseReader = new StreamReader(webRequest.GetResponse().GetResponseStream()))
                {
                    responseData = responseReader.ReadToEnd();
                    responseReader.Close();
                }
            }

            static PaymentInstrumentInfoSet ConvertToPayPalPaymentInfo(string pbstrPaymentInstrumentInfoSetXML)
            {
                PaymentInstrumentInfoSet retVal;
                XmlSerializer ser = new XmlSerializer(typeof(PaymentInstrumentInfoSet), "urn:schemas-microsoft-com:billing-data");
                using (StringReader sr = new StringReader(pbstrPaymentInstrumentInfoSetXML))
                {
                    retVal = ((PaymentInstrumentInfoSet)ser.Deserialize(sr));
                }
                return retVal;
            }

            // automate the process of create PayPal account and add PayPal payment instrument 
            // using one box PayPal emulator and spk web service call. 
            public PaymentInstrumentInfoSet AddToBillingAccount(BdkWrapper bdk, User user, bool acceptBillingAgreement)
            {
                string accountId = null;
                string guid = Guid.NewGuid().ToString();
                string errorXml = null;
                string paypalUrl = null;
                string paymentInstrumentInfo = this.ToXml(user.CountryId);

                accountId = user.AccountId;
                ulong passportPuid = user.BillingPuid;
                puidHigh = (uint)((passportPuid & 0xffffffff00000000) >> 32);
                PuidLow = (uint)(passportPuid & 0xffffffff);

                // Step 1: AddPaymentInstrument with paymentInstrumentInfo configured for PayPal
                bdk.AddPaymentInstrument(
                    0x1,
                    0x1,
                    (int)puidHigh,
                    (int)PuidLow,
                    guid,
                    accountId,
                    paymentInstrumentInfo,
                    out errorXml,
                    out PaymentInstrumentId,
                    out paypalUrl);

                if (acceptBillingAgreement)
                {
                    if (paypalUrl != null)
                    {
                        // Step 2: Use the url returned (pointing to the billing 1box) to talk to the PayPal emulator
                        SignupPayPal(paypalUrl);
                    }
                    else throw new ArgumentNullException("PayPal URL is null");

                    // Step 3: Call UpdatePaymentInstrument to link the PI up with the PayPal data
                    bdk.UpdatePaymentInstrumentInfo(0, 0, (int)puidHigh, (int)PuidLow, PaymentInstrumentId, paymentInstrumentInfo, out errorXml);
                }

                string pbstrErrorXML;
                string pbstrPaymentInstrumentInfoSetXML;
                int plPaymentInstrumentInfoCount;
                bdk.GetPaymentInstrumentsEx(1, 1, (int)puidHigh, (int)PuidLow, PaymentInstrumentId, true, out pbstrErrorXML, out plPaymentInstrumentInfoCount, out pbstrPaymentInstrumentInfoSetXML);
                return ConvertToPayPalPaymentInfo(pbstrPaymentInstrumentInfoSetXML);
            }
        }

        #endregion

        #region Threadsafe Random Accessors

        [ThreadStatic]
        private static Random rand;
        public static int GetRandomInt(int max)
        {
            int num = 0;
            
            if (rand == null) rand = new Random((int)DateTime.Now.Ticks);
            num = rand.Next(max);
            
            return num;
        }

        public static int GetRandomInt(int min, int max)
        {
            int num = 0;

            if (rand == null) rand = new Random((int)DateTime.Now.Ticks);
            num = rand.Next(min, max);
            
            return num;
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\FuncAddPaypalPaymentInstrument.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.diagnostics;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

using xonline.common.config;
using ServerTestFramework.LiveService.UserAccount;

namespace TestFD.Functional
{
    [TestGroup, Owner("arnemich"), TestFrequency("Daily"), TestCasePriority(1), EnvRequirement("XblobOnly")]
    public class AddPaypalPaymentInstrumentTest: TestNode
    {
        #region test cases
        [TestCase]
        class P_AddPaypalPaymentInstrument : ServerTestFramework.LiveService.UserAccount.UserTestBase
        {
            override protected void Execute()
            {
                XeUser user = new XeUser(true, XeUser.Country.US);
                user.Create();

                XRLAddPaypalPaymentInstrumentRequest req = new XRLAddPaypalPaymentInstrumentRequest();
                XRLAddPaypalPaymentInstrumentResponse resp;

                req.userPuid = user.UserPuid;
                if (!req.Execute(out resp))
                {
                    throw new UnexpectedTestResultException("XRLCreateXboxComAccount failed: " + req.GetDumpString());
                }
                ResultCode = TEST_RESULTS.PASSED;
            }
        }        
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\protocol\TestFDProtocol.cs ===
using System;
using System.Collections.Generic;
using System.Text;
using xonline.common.service;
using xonline.common.config;
using xonline.core.wiredata;

namespace xonline.common.protocol
{
    public class PingTestFDRequest : XRLObject2
    {
        public int accessRequested;

        //
        // Helpers for client & widget code
        //
        public override string Xrl
        {
            get { return "/testfd/PingTestFD.ashx"; }
        }
    }

    public class PingTestFDResponse : XRLObject2
    {
        public bool accessGranted;

        public int testFDMajorVersion = 0;

        public int testFDMinorVersion = 0;
    }

    public enum TestReflAction : byte
    {
        Drop = 0x80,
        Reflect = 0x81,
        DropAuthdata = 0x82,
        ReflectAuthdata = 0x83,
        SendBackX = 0x84,
        AuthdataLookup = 0x85,
        ReflectTimestamp = 0x86,
        ReflectOffset = 0x87,
        ReflectNATData = 0x88,
        TCPConnectTest = 0x89,
        SGInfoLookup = 0x8A,                    // Use real SGInfo class and send results back
        SgMsg = 0x8B,                           // Send arbitrary SGMSG to SG (in payload) and reflect reply


        XlspAuthDataSimpleRequest=0xA0,          //Checks that requesting authdata does not fail
        XlspAuthDataGetAssemblyReferences=0xA1,  //returns a list of assemblies that the xlsp library references
        XlspAuthDataGetProperty=0xA2,            //returns a lost of property values using its ToString method
        XlspAuthDataGetSubProperty=0xA3,         //returns a list of the values of a property's properties using its ToString method
        XlspAuthDataGetSubSubProperty=0xA4,      //returns a list of the values of a property's property's properties using its ToString method
        XlspAuthDataGetUserList=0xA5,            //returns a list of user xuids present
        XlspAuthDataGetUserProperty=0xA6,        //returns a list of a user's properties using its ToString method
        XlspAuthDataGetUserSubProperty=0xA7,     //returns a list of a user's property's properties using its ToString method
        XlspAuthDataGetUserSubSubProperty=0xA8,  //returns a list of a user's property's property's properties using its ToString method
        XlspAuthDataCheckPrivilege=0xA9,         //returns a privilege bit for the current session
        XlspAuthDataCheckPrivacySetting=0xAA     //returns a privary setting for the current session
    }

    public class TestFdReflectorRequest : XRLObject2
    {
        public const string CallerQueryName = "caller";
        public const string ActionQueryName = "action";
        public const string ParamQueryName = "param";

        public enum Caller : byte
        {
            None,
            AuthSG,
            WebSG,
            LiveProxy,
            SG,
        }

        public enum Action : byte
        {
            /// <summary>Standard reflection response.</summary>
            Reflect,
            /// <summary>Sleeps for param ms.</summary>
            ResponseWait,
            /// <summary>Throws an unhandled exception for IIS to catch.</summary>
            ThrowUnhandledException,
            /// <summary>Call the Exit function, killing the IIS process (maybe).</summary>
            Exit,
            /// <summary>Responds with the status code param.</summary>
            ReturnStatus,
            /// <summary>Does not send a response.</summary>
            NoResponse,
            /// <summary>Reflects the headers from the request into the response headers.</summary>
            ReflectHeaders,
            /// <summary>The response body will be param bytes.</summary>
            OutputBody,
            /// <summary>A quick response that only contains the URL and query string.</summary>
            Stress,
            /// <summary>Changes the response to text/xml content type.</summary>
            ResponseXMLContentType,
            /// <summary>Does not do the AAInfo lookups for the AuthSG specifics.</summary>
            AuthSGNoAAInfo,
            /// <summary>Responds with the status code param.  Also place specific content in the response body.</summary>
            ReturnStatusAndResponseBody,
        }

        public Caller CallerValue;
        public Action ActionValue;
        public int Param;

        public override int Size ()
        {
            return 6;
        }

        public override string Xrl
        {
            get { return "/testfd/Reflect.ashx"; }
        }
    }

    public class TestFdReflectorRequestNoAuthSg: TestFdReflectorRequest
    {
        public override string Xrl
        {
            get { return "/testfd/ReflectNoAuthSg.ashx"; }
        }
    }

    public class TestFdReflectorResponse : XRLObject2
    {
        public int ErrorLen;
        public string Error;
        public NameValuePairCollection HttpContext;
        public NameValuePairCollection CallerSpecific;
        public HttpRequestWD HttpRequest;

        public class NameValuePairCollection : WireData
        {
            public class NameValuePair : WireData
            {
                public NameValuePair () { }
                public NameValuePair (string n, string v) { Name = n; Value = v; }
                public int NameLen;
                public string Name;
                public int ValueLen;
                public string Value;
            }

            public int ArrayLen;
            public NameValuePair[] Array;
            
            [WireInfo(Serialize=false)]
            private Dictionary<string, string> _Dict;
            public Dictionary<string, string> Dict
            {
                get { if (_Dict == null) { _Dict = ConvertNameValuePairArray(this.Array); } return _Dict; }
                set { this.Array = ConvertNameValuePairArray(value); }
            }

            private static Dictionary<string, string> ConvertNameValuePairArray (NameValuePair[] nvpa)
            {
                Dictionary<string, string> ans = new Dictionary<string, string>(nvpa.Length);
                for (int i = 0, j = nvpa.Length; i < j; ++i)
                {
                    ans.Add(nvpa[i].Name, nvpa[i].Value);
                }
                return ans;
            }

            private static NameValuePair[] ConvertNameValuePairArray (Dictionary<string, string> dict)
            {
                NameValuePair[] ans = new NameValuePair[dict.Count];
                int i = 0;
                foreach (string k in dict.Keys)
                {
                    ans[i++] = new NameValuePair(k, dict[k]);
                }
                return ans;
            }
        }

        public class HttpRequestWD : WireData
        {
            public int MethodLen;
            public string Method;
            public int URLAndQueryStringLen;
            public string URLAndQueryString;
            public int ServerProtocolLen;
            public string ServerProtocol;
            public NameValuePairCollection Headers;
            [WireInfo(Serialize = false)]
            public byte[] Content;

            public override WireData ReadStream (System.IO.BinaryReader br)
            {
                // do the standard stuff
                base.ReadStream(br);

                // now use the base stream of the reader to read the remaining bytes
                byte[] temp = new byte[4096];
                System.IO.MemoryStream ms = new System.IO.MemoryStream();
                System.IO.Stream stream = br.BaseStream;
                int size = 0;

                while (0 != (size = stream.Read(temp, 0, temp.Length)))
                {
                    ms.Write(temp, 0, size);
                }

                Content = ms.ToArray();

                return this;
            }
        }
    }

    public enum LoggingAPIs : byte
    {
        Trace = 1,
        Log = 2,
        NtEvent = 3,
        TraceFT = 4,
        LogFT = 5,
        NtEventFT = 6
    }

    public class XomLoggingFDRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ushort areaNameLength;
        [WireInfo(SizeParam = "areaNameLength")]
        public string areaName;


        [WireInfo(Min = 0)]
        public ushort msgFormatLength;
        [WireInfo(SizeParam = "msgFormatLength")]
        public string msgFormat;


        [WireInfo(Min = 0)]
        public ushort exceptionTextLength;
        [WireInfo(SizeParam = "exceptionTextLength")]
        public string exceptionText;

        
        [WireInfo(Min = 0)]
        public ushort flowTokenLength;
        [WireInfo(SizeParam = "flowTokenLength")]
        public string flowToken;

        public int extraArgs;

        public LoggingAPIs LoggingAPI;

        //
        // Helpers for client & widget code
        //
        public override string Xrl
        {
            get { return "/testfd/XomLogTestFD.ashx"; }
        }
    }

    public class XomLoggingFDResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ushort exceptionTextLength;

        [WireInfo(SizeParam = "exceptionTextLength")]
        public string exceptionText;
    }

    public class TestFDCreateXboxComAccountRequest : XRLObject2
    {
        public int accessRequested;

        public ushort firstNameLength = 0;

        [WireInfo(SizeParam = "firstNameLength")]
        public string firstName;

        public ushort lastNameLength = 0;

        [WireInfo(SizeParam = "lastNameLength")]
        public string lastName;

        public ushort gamertagLength = 0;

        [WireInfo(SizeParam = "gamertagLength")]
        public string gamertag;

        public ushort emailLength;

        [WireInfo(SizeParam = "emailLength")]
        public string email;

        public DateTime birthdate;

        [WireInfo(ArraySize=XOn.XONLINE_PASSPORT_SESSION_TOKEN_LEN)]
        public byte[] signedUserPassportPuid;

        [WireInfo(ArraySize=XOn.XONLINE_PASSPORT_SESSION_TOKEN_LEN)]
        public byte[] signedOwnerPassportPuid;
        
        public byte msftOptIn;

        public byte partnerOptIn;

        public byte parentalControlGroupId = 0;

        [WireInfo(Min = 1, Max = XOn.MAX_DASH_LANG_ID)]
        public ushort languageId;

        public byte countryId;

        public override string Xrl
        {
            get { return "/testfd/CreateXboxComAccount.ashx"; }
        }
    }

    public class TestFDCreateXboxComAccountResponse : CreateUserResponse 
    {

    }

    public class MakeFriendsRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public uint numberOfFriends;

        [WireInfo(Min = 0)]
        public ushort gamertagPrefixLength;

        [WireInfo(SizeParam = "gamertagPrefixLength")]
        public string gamertagPrefix;

        //
        // Helpers for client & widget code
        //
        public override string Xrl
        {
            get { return "/testfd/MakeFriends.ashx"; }
        }
    }

    public class MakeFriendsResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class UpdateFriendsPresenceRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public uint percentageOfFriendsOnline;

        [WireInfo(Min = 0)]
        public uint numberOfUniqueTitles;

        //
        // Helpers for client & widget code
        //
        public override string Xrl
        {
            get { return "/testfd/UpdateFriendsPresence.ashx"; }
        }
    }

    public class UpdateFriendsPresenceResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class GrantAchievementsRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public ushort platformType;

        [WireInfo(Min = 0)]
        public uint numberOfUniqueTitles;

        [WireInfo(Min = 0)]
        public uint percentageOfAchievementsToGrant;

        public override string Xrl
        {
            get { return "/testfd/GrantAchievements.ashx"; }
        }
    }

    public class GrantAchievementsResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class AddPaypalPaymentInstrumentRequest : XRLObject2
    {
        public ulong userPuid;

        public override string Xrl
        {
            get { return "/testfd/AddPaypalPaymentInstrument.ashx"; }
        }
    }

    public class AddPaypalPaymentInstrumentResponse : XRLObject2
    {
        public uint returnValue;

        public uint paymentInstrumentIdLength;

        [WireInfo(SizeParam = "paymentInstrumentIdLength")]
        public string paymentInstrumentId;
    }

    public class MarkCheaterRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        //
        // Helpers for client & widget code
        //
        public override string Xrl
        {
            get { return "/testfd/MarkCheater.ashx"; }
        }
    }

    public class MarkCheaterResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class SetWatermarkRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        [WireInfo(Min = 0)]
        public uint flags;

        public override string Xrl
        {
            get { return "/testfd/SetWatermark.ashx"; }
        }
    }

    public class SetWatermarkResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class SetTenureRequest : XRLObject2
    {
        [WireInfo(Min = 0)]
        public ulong xuid;

        public ushort years;

        [WireInfo(Max = 12)]
        public ushort months;

        public override string Xrl
        {
            get { return "/testfd/SetTenure.ashx"; }
        }
    }

    public class SetTenureResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }

    public class SetPresenceForUsersRequest : XRLObject2
    {
        [WireInfo(Max = 100)]
        public ushort xuidsLen;

        [WireInfo(SizeParam = "xuidsLen")]
        public ulong[] xuids;

        public uint titleId;

        public uint stateFlags;

        [WireInfo(Max = 58)]
        public uint richPresenceStringLength;

        [WireInfo(SizeParam = "richPresenceStringLength")]
        public string richPresenceString;

        public override string Xrl
        {
            get { return "/testfd/SetPresenceForUsers.ashx"; }
        }
    }

    public class SetPresenceForUsersResponse : XRLObject2
    {
        [WireInfo(Min = 0)]
        public uint returnValue;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\TestFDApp.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.IO;
using System.Diagnostics;
using System.Net;
using System.ServiceProcess;
using System.Web;
using System.Collections;
using System.Collections.Generic;
using System.Collections.Specialized;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.utilities;
using xonline.common.health;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.user;
using xonline.common.rating;
using xonline.common.installer;
using xonline.common.msnrr;

using System.Text.RegularExpressions;

[assembly: XomIisInstallerAttribute( Interface.testfd )]
[assembly: XomIisInstallerAttribute( Interface.testfd_int )]
[assembly: ConfigAttribute("testfd")]
[assembly: XomAreaDefinition(XomAreaName.log)]
[assembly: XomAreaDefinition(XomAreaName.testfdtrace)]

namespace xonline.server.testfd.fd
{
    public class TestFDApp : FrontEndApp
    {
        public const int TESTFD_MAJOR_VERSION = 1;
        public const int TESTFD_MINOR_VERSION = 5;

        #region Permissions
        public enum PermissionLevel : int
        {
            VersionOnly = 0,
            // APIs with this permission:
            //      reserved for PingTestFD and health. They can always be called
            // Environments with this permission:
            //      None. If TestFD is deployed to an environment, it should have a nonzero permission on that environment.
            //          However, if someone wants to "turn off" testfd on an environment, you'd set that environment's
            //          permission to 'VersionOnly'
            SafeCommand = 1,
            // APIs with this permission:
            //      Any API that either:    A) doesn't affect the service, merely returns useful data.
            //                          or  B) provides no new functionality; simply exists to make tests easier to write,
            //                                      combining common flows of server calls into one.
            // Environments with this permission:
            //      Any test environment that is expected to be reliable to other users.
            StandardCommand = 2,
            // APIs with this permission:
            //      anything... more damaging than a 'SafeCommand' but safer than a 'PowerCommand'?
            //              I guess, ask yourself 'does this let the user do powerful things, but it would be acceptable
            //              to call this API on testnet.
            // Environments with this permission:
            //      Shared test environments that can afford allowing the users to do possibly harmful things.
            //              testnet is a good example; since it's shared by many, but users could still log into testnet
            //              and edit things themselves *anyway*, this just makes those client testing scenarios automatable.
            PowerCommand = 3,
            // APIs with this permission:
            //      Any API that gives the caller lots of power: editing the database, running commands on the server, etc...
            // Environments with this permission:
            //      only test environments that are for personal use such as xblobs, so if something bad happens you don't
            //              ruin someone's day.
        }

        private static PermissionLevel environmentPermission = PermissionLevel.VersionOnly;
        private static Dictionary<string,PermissionLevel> apiPermissions = new Dictionary<string,PermissionLevel>();

        private static bool ApiHasPermission(string apiName)
        {
            if(apiPermissions.ContainsKey(apiName))
            {
                return HasPermission(apiPermissions[apiName]);
            }

            return false;
        }
        
        public static bool HasPermission(PermissionLevel permission)
        {
            return permission <= environmentPermission;
        }

        private void InitEnvironmentPermission()
        {
            int permission = Config.GetIntSetting(Setting.testfd_PermissionLevel);
            Config.SettingChange += new SettingChangeEventHandler(OnEnvironmentPermissionChange);
            LoadEnvironmentPermission(permission);
        }

        public static void OnEnvironmentPermissionChange(object sender, SettingChangeEventArgs eventArgs)
        {
            if (eventArgs.Setting == Setting.testfd_PermissionLevel)
            {
                LoadEnvironmentPermission(Int32.Parse(eventArgs.ValueNew));
            }
        }

        private static void LoadEnvironmentPermission(int permission)
        {
            if(Enum.IsDefined(typeof(PermissionLevel),permission))
            {
                environmentPermission = (PermissionLevel)permission;
            }
            else
            {
                environmentPermission = PermissionLevel.VersionOnly;
            }
        }

        private void InitAPIPermissions()
        {
            string[] permissions = Config.GetMultiSetting(MultiSetting.testfd_API_PermissionLevel);
            Config.MultiSettingChange += new MultiSettingChangeEventHandler(OnApiPermissionsChange);
            LoadApiPermissions(permissions);
        }

        public static void OnApiPermissionsChange(object sender, MultiSettingChangeEventArgs eventArgs)
        {
            if (eventArgs.MultiSetting == MultiSetting.testfd_API_PermissionLevel)
            {
                LoadApiPermissions(eventArgs.ValueNew);
            }
        }
        
        private static void LoadApiPermissions(string[] permissionSettings)
        {
            Dictionary<string,PermissionLevel> permissions = new Dictionary<string,PermissionLevel>();

            foreach(string permissionSetting in permissionSettings)
            {
                string[] s = permissionSetting.Split(',');
                
                int apiPermission;
                if(s.Length == 2
                && !permissions.ContainsKey(s[0])
                && Int32.TryParse(s[1],out apiPermission)
                && Enum.IsDefined(typeof(PermissionLevel),apiPermission))
                {
                    permissions.Add(s[0],(PermissionLevel)apiPermission);
                }
            }

            apiPermissions = permissions;
        }
        #endregion

        protected override void OnApplicationStart()
        {
            EventBuilder.ShowSGInfo = false;
            InitEnvironmentPermission();
            InitAPIPermissions();
        }
    
        public TestFDApp():base()
        {
            PostMapRequestHandler += PostMapRequestEventHandler;
        }

        public void PostMapRequestEventHandler (object sender, EventArgs eventArgs)
        {
            IHttpHandler handler = HttpContext.Current.CurrentHandler;
            string apiName = null;

            if (handler != null && handler is ITestFDApiName)
            {
                apiName = ((ITestFDApiName)handler).ApiName;
            }

            if (apiName == null)
            {
                apiName = extractApiName();
            }

            if(!ApiHasPermission(apiName))
            {
                throw new XRLException( HResult.XONLINE_E_TESTFD_API_NOT_AVAILABLE_ERROR,
                                        XEvent.Id.TEST_FD_GENERIC,
                                        string.Format("The current URL ({0}) Requires greater permission than is currently allowed({1})", HttpContext.Current.Request.RawUrl, environmentPermission.ToString()));
            }
        }

        private string extractApiName()
        {
            string url = HttpContext.Current.Request.RawUrl;

            Match matchedAPI = Regex.Match(url,"^/testfd/(?<apiName>[a-z]+)\\.ashx",RegexOptions.IgnoreCase);
            if(matchedAPI.Success)
            {
                return matchedAPI.Groups["apiName"].Value;
            }

            return "";
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\FuncFriendCommands.cs ===
using System;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;
using xonline.common.service;
using xonline.common.config;

namespace TestFD.Functional
{
    [TestGroup, Owner("maliagu"), TestFrequency("Regression"), TestCasePriority(1)]
    public class FriendCommandsTest: TestNode
    {
        private static ulong _xuid;
        public static void WaitForXCacheSmart(ulong xuid)
        {
            int maxWait = Config.GetIntSetting(Setting.xcache_db_pollingInterval);

            DateTime timeout = DateTime.Now.AddSeconds(maxWait);

            string gamertag = XCache.LookupGamerTag(xuid);

            while (DateTime.Now < timeout && (gamertag == XCache.InvalidGamertag || gamertag == ""))
            {
                //poll xcache for the gamertag every 1 second
                Thread.Sleep(1000);
                gamertag = XCache.LookupGamerTag(xuid);
            }
        }
        public static ulong GetXuid()
        {
            if (_xuid == 0)
            {
                XRLCreateXboxComAccount request = new XRLCreateXboxComAccount();
                XRLCreateXboxComAccountResponse response = new XRLCreateXboxComAccountResponse();

                request.firstName = "Shweta";
                request.lastName = "Patil";
                request.countryId = (byte)XeUser.Country.RU;
                request.languageId = (byte)XeUser.Language.ru;

                Random m_rnd;
                m_rnd = new Random((int)DateTime.Now.Ticks);
                RandomEx rnd = new RandomEx();

                request.gamertag = rnd.GenerateRandomString("XEN", 15);
                request.email = "john.smith" + Global.PassportMemberDomain;
                request.birthdate = DateTime.UtcNow.AddYears(-25);
                request.partnerOptIn = 0;
                request.msftOptIn = 0;
                request.accessRequested = (int)PermissionLevel.PowerCommand;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLCreateXboxComAccount failed: " + request.GetDumpString());
                }
                if (response.UserPuid == 0)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLCreateXboxComAccount returned xuid 0"));
                }
                _xuid = response.UserPuid;
                //wait for xcache
                WaitForXCacheSmart(_xuid);
                string gamertag = XCache.LookupGamerTag(_xuid);
                if (gamertag == XCache.InvalidGamertag || gamertag == "")
                {
                    throw new UnexpectedTestResultException("FriendsCommands failed setup. No user was created.");
                }
            }

            return _xuid;

        }
        #region test cases
        [TestCase]
        class P_Mainline_MakeFriends : UserTestBase
        {
            override protected void Execute()
            {
                //make me friends 
                XRLMakeFriendsRequest request2 = new XRLMakeFriendsRequest();
                XRLMakeFriendsResponse response2 = new XRLMakeFriendsResponse();

                request2.xuid = GetXuid();
                request2.numberOfFriends = 2;

                if (!request2.Execute(out response2))
                {
                    throw new UnexpectedTestResultException("XRLMakeFriendsRequest failed: " + request2.GetDumpString());
                }
                if (request2.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMakeFriendsRequest returned XErr=0x{0:x}", request2.XErr));
                }

                if (response2.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMakeFriendsResponse return value =0x{0:x}", response2.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_Mainline_UpdateFriendsPresenceState : UserTestBase
        {
            override protected void Execute()
            {
                //make me friends 
                XRLUpdateFriendsPresenceRequest request2 = new XRLUpdateFriendsPresenceRequest();
                XRLUpdateFriendsPresenceResponse response2 = new XRLUpdateFriendsPresenceResponse();

                request2.xuid = GetXuid();
                request2.numberOfUniqueTitles = 1;
                request2.percentageOfFriendsOnline = 50;

                if (!request2.Execute(out response2))
                {
                    throw new UnexpectedTestResultException("XRLUpdateFriendsPresenceRequest failed: " + request2.GetDumpString());
                }
                if (request2.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLUpdateFriendsPresenceRequest returned XErr=0x{0:x}", request2.XErr));
                }

                if (response2.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLUpdateFriendsPresenceResponse return value =0x{0:x}", response2.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_Mainline_SetPresenceForUsers : UserTestBase
        {
            override protected void Execute()
            {
                //make me friends 
                XRLSetPresenceForUsersRequest request2 = new XRLSetPresenceForUsersRequest();
                XRLSetPresenceForUsersResponse response2 = new XRLSetPresenceForUsersResponse();

                request2.xuids = new ulong[] { GetXuid() };
                request2.xuidsLen = 1;
                request2.titleId = 0xFFFE07D1;
                request2.stateFlags = 0x1;
                request2.richPresenceString = "Test Rich Presence String";
                request2.richPresenceStringLength = (uint) request2.richPresenceString.Length;

                if (!request2.Execute(out response2))
                {
                    throw new UnexpectedTestResultException("XRLSetPresenceForUsersRequest failed: " + request2.GetDumpString());
                }
                if (request2.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLSetPresenceForUsersRequest returned XErr=0x{0:x}", request2.XErr));
                }

                if (response2.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLSetPresenceForUsersResponse return value =0x{0:x}", response2.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\FuncCreateXboxComAccount.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.diagnostics;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

using xonline.common.config;

namespace TestFD.Functional
{
    [TestGroup, Owner("shwetap"), TestFrequency("Daily"), TestCasePriority(1)]
    public class CreateXboxComAccountTest: TestNode
    {
        #region test cases
        [TestCase]
        class P_Mainline : UserTestBase
        {
            override protected void Execute()
            {
                XRLCreateXboxComAccount request = new XRLCreateXboxComAccount();
                XRLCreateXboxComAccountResponse response = new XRLCreateXboxComAccountResponse();

                request.firstName = "Shweta";
                request.lastName = "Patil";
                request.countryId = (byte)XeUser.Country.RU;
                request.languageId = (byte)XeUser.Language.ru;
               
                Random m_rnd;
                m_rnd = new Random((int)DateTime.Now.Ticks);
                RandomEx rnd = new RandomEx();

                request.gamertag = rnd.GenerateRandomString("XEN", 15);
                request.email = "john.smith" + Global.PassportMemberDomain;
                request.birthdate = DateTime.UtcNow.AddYears(-25);
                request.partnerOptIn = 0;
                request.msftOptIn = 0;
                request.accessRequested = (int)PermissionLevel.PowerCommand;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLCreateXboxComAccount failed: " + request.GetDumpString());
                }
                if (request.XErr != HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLCreateXboxComAccount returned XErr=0x{0:x}", request.XErr));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\FuncGrantAchievements.cs ===
using System;
using System.Threading;
using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.diagnostics;
using xonline.common.service;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

using xonline.common.config;

namespace TestFD.Functional
{
    [TestGroup, Owner("maliagu"), TestFrequency("Regression"), TestCasePriority(1)]
    public class GrantAchievementsTest: TestNode
    {
        private static ulong _xuid;
        public static void WaitForXCacheSmart(ulong xuid)
        {
            int maxWait = Config.GetIntSetting(Setting.xcache_db_pollingInterval);

            DateTime timeout = DateTime.Now.AddSeconds(maxWait);

            string gamertag = XCache.LookupGamerTag(xuid);

            while (DateTime.Now < timeout && (gamertag == XCache.InvalidGamertag || gamertag == ""))
            {
                //poll xcache for the gamertag every 1 second
                Thread.Sleep(1000);
                gamertag = XCache.LookupGamerTag(xuid);
            }
        }
        public static ulong GetXuid()
        {
            if (_xuid == 0)
            {
                XRLCreateXboxComAccount request = new XRLCreateXboxComAccount();
                XRLCreateXboxComAccountResponse response = new XRLCreateXboxComAccountResponse();

                request.firstName = "Malia";
                request.lastName = "Amazing";
                request.countryId = (byte)XeUser.Country.RU;
                request.languageId = (byte)XeUser.Language.ru;

                Random m_rnd;
                m_rnd = new Random((int)DateTime.Now.Ticks);
                RandomEx rnd = new RandomEx();

                request.gamertag = rnd.GenerateRandomString("XEN", 15);
                request.email = "john.smith" + Global.PassportMemberDomain;
                request.birthdate = DateTime.UtcNow.AddYears(-25);
                request.partnerOptIn = 0;
                request.msftOptIn = 0;
                request.accessRequested = (int)PermissionLevel.PowerCommand;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLCreateXboxComAccount failed: " + request.GetDumpString());
                }
                if (response.UserPuid == 0)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLCreateXboxComAccount returned xuid 0"));
                }
                _xuid = response.UserPuid;
                
                //wait for xcache
                WaitForXCacheSmart(_xuid);
                string gamertag = XCache.LookupGamerTag(_xuid);
                if (gamertag == XCache.InvalidGamertag || gamertag == "")
                {
                    throw new UnexpectedTestResultException("XRLGrantAchievementsRequest failed setup. No user was created.");
                }
            }

            return _xuid;

        }
        #region test cases
        [TestCase]
        class P_Mainline_GrantAchievements : UserTestBase
        {
            override protected void Execute()
            {
                //make me friends 
                XRLGrantAchievementsRequest request2 = new XRLGrantAchievementsRequest();
                XRLGrantAchievementsResponse response2 = new XRLGrantAchievementsResponse();

                request2.xuid = GetXuid();
                request2.numberOfUniqueTitles = 1;
                request2.platformType = 4;  // We got this from private\common\config\config\TitleConfig.cs
                request2.percentageOfAchievementsToGrant = 100;  

                if (!request2.Execute(out response2))
                {
                    throw new UnexpectedTestResultException("XRLGrantAchievementsRequest failed: " + request2.GetDumpString());
                }
                if (request2.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLGrantAchievementsRequest returned XErr=0x{0:x}", request2.XErr));
                }

                if (response2.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLGrantAchievementsResponse return value =0x{0:x}", response2.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\MainClass.cs ===
using System;
using System.Runtime.InteropServices;
using System.Xml;
using ServerTestFramework;
using ServerTestFramework.Utilities;
using ServerTestFramework.Database;
using ServerTestFramework.LiveService;
using TestFD.Functional;

namespace TestFD
{
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\objd\i386\_generated.cs ===
[assembly:System.Runtime.InteropServices.ComVisible(false)]
[assembly:System.Reflection.AssemblyVersion("12.4.56.0")]
[assembly:System.Reflection.AssemblyProduct("DEPOT")]
[assembly:System.Reflection.AssemblyCopyright("")]
[assembly:System.Reflection.AssemblyCompany("")]
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\util.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.diagnostics;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

using xonline.common.config;

namespace TestFD.Functional
{
    public class TestFDUtil
    {
        public enum PartitionType : int
        {
            Any = -2,
            All = -1,
            Int = 0,
            Ulong = 1,
            Long = 2,
            String = 3,
        }

        public static ulong GetBadHash(ulong ulongHash)
        {
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.READORWRITE_COMMANDTYPE))
            {
                int goodPartition = ws.GetPhysicalPartition(ws.CalcPartition(ulongHash));

                const int MAX_TRIES = 64; // lolololol
                Random rand = new Random();
                ulong guessHash = 0;
                for (int i = 0; i < MAX_TRIES; i++)
                {
                    guessHash = (ulong)rand.Next();
                    if (goodPartition != ws.GetPhysicalPartition(ws.CalcPartition(guessHash)))
                    {
                        return guessHash;
                    }
                }

                throw new UnexpectedTestResultException("Couldn't find a bad partition to work off of. Better luck next time!");
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\FuncPingTestFD.cs ===
using System;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;
using xonline.common.diagnostics;

using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;

using xonline.common.config;

namespace TestFD.Functional
{
    enum PermissionLevel : int
    {
        VersionOnly = 0,
        SafeCommand = 1,
        StandardCommand = 2,
        PowerCommand = 3,
    }

    [TestGroup, Owner("mattfl"), TestFrequency("Regression"), TestCasePriority(1)]
    public class PingTestFD : TestNode
    {
        #region private data members
        private static string currentEnv;

        private bool originalEnvironmentPermissionOverrideExisted;
        private int originalEnvironmentPermission;

        private bool originalApiPermissionOverrideExisted;
        private int originalApiPermission;
        #endregion

        #region test cases
        [TestCase]
        class P_Mainline : UserTestBase
        {
            override protected void Execute()
            {
                XRLPingTestFD request = new XRLPingTestFD();
                request.accessRequested = (int)PermissionLevel.VersionOnly;
                XRLPingTestFDResponse response;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLPingTestFD failed: " + request.GetDumpString());
                }
                if (request.XErr != HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLPingTestFD returned XErr=0x{0:x}", request.XErr));
                }
                Global.RO.Info("XRLPingTestFD returned testFDMajorVersion={0}", response.testFDMajorVersion);
                Global.RO.Info("XRLPingTestFD returned testFDMinorVersion={0}", response.testFDMinorVersion);
                if (response.accessGranted != true)
                {
                    throw new UnexpectedTestResultException("XRLPingTestFD returned accessGranted=" + response.accessGranted);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_AccessDenied : UserTestBase
        {
            override protected void Execute()
            {
                XRLPingTestFD request = new XRLPingTestFD();
                request.accessRequested = (int)PermissionLevel.PowerCommand;
                XRLPingTestFDResponse response;

                SetEnvironmentPermissionLevel((int)PermissionLevel.SafeCommand);
                request.Execute(out response);

                if (response.accessGranted == true)
                {
                    throw new UnexpectedTestResultException("XRLPingTestFD returned accessGranted=" + response.accessGranted);
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_StandardENV_SafeAPI : UserTestBase
        {
            override protected void Execute()
            {
                SetPermissions((int)PermissionLevel.StandardCommand, (int)PermissionLevel.SafeCommand);

                RunPass();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class N_SafeENV_StandardAPI : UserTestBase
        {
            override protected void Execute()
            {
                SetPermissions((int)PermissionLevel.SafeCommand, (int)PermissionLevel.StandardCommand);

                RunFail();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_VersionOnlyENV_VersionOnlyAPI : UserTestBase
        {
            override protected void Execute()
            {
                SetPermissions((int)PermissionLevel.VersionOnly, (int)PermissionLevel.VersionOnly);

                RunPass();

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion

        #region helper functions
        [TestGroupSetup]
        public void Setup()
        {
            ReadPermissions();
        }

        [TestGroupTearDown]
        public void Shutdown()
        {
            ResetPermissions();
        }

        private static void RunPass()
        {
            XRLPingTestFD request = new XRLPingTestFD();
            request.accessRequested = (int)PermissionLevel.PowerCommand;
            XRLPingTestFDResponse response;

            if (!request.Execute(out response))
            {
                throw new UnexpectedTestResultException("XRLPingTestFD failed: " + request.GetDumpString());
            }
            if (request.XErr != HResult.S_OK)
            {
                throw new UnexpectedTestResultException(String.Format("XRLPingTestFD returned XErr=0x{0:x}", request.XErr));
            }
        }

        private static void RunFail()
        {
            XRLPingTestFD request = new XRLPingTestFD();
            request.accessRequested = (int)PermissionLevel.PowerCommand;
            XRLPingTestFDResponse response;

            if (request.Execute(out response))
            {
                throw new UnexpectedTestResultException("XRLPingTestFD failed: " + request.GetDumpString());
            }
            if (request.XErr != HResult.XONLINE_E_TESTFD_API_NOT_AVAILABLE_ERROR)
            {
                throw new UnexpectedTestResultException(String.Format("XRLPingTestFD returned XErr=0x{0:x}", request.XErr));
            }
        }

        private bool ReadEnv()
        {
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;

                ws.CommandSql = @"SELECT TOP 1 vc_environment FROM t_environments WHERE b_current=1";

                object scalar = ws.ExecuteScalar();
                if (scalar == null)
                    return false;

                currentEnv = (string)scalar;

                return true;
            }
        }

        private static void SetPermissions(int envPermissionLevel, int apiPermissionLevel)
        {
            SetEnvironmentPermissionLevel(envPermissionLevel);

            SetAPIPermissionLevel(apiPermissionLevel, "PingTestFD");
        }

        private static void SetAPIPermissionLevel(int apiPermissionLevel, string apiName)
        {
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;

                ws.CommandSql = @" UPDATE t_multisetting_overrides
                                        SET vc_value='"+apiName+"," + apiPermissionLevel.ToString() + @"'
                                        WHERE vc_multisetting='testfd_API_PermissionLevel'
                                            AND vc_environment='" + currentEnv + @"'";

                ws.ExecuteNonQuery();
            }

            Global.XEnv.ForceConfigReload("testfd");
        }

        private static void SetEnvironmentPermissionLevel(int envPermissionLevel)
        {
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;

                ws.CommandSql = @" UPDATE t_setting_overrides
                                        SET vc_value='" + envPermissionLevel.ToString() + @"'
                                        WHERE vc_setting='testfd_PermissionLevel'
                                            AND vc_environment='" + currentEnv + @"'";

                ws.ExecuteNonQuery();
            }

            Global.XEnv.ForceConfigReload("testfd");
        }

        private void ReadPermissions()
        {
            if (!ReadEnv())
                return;

            #region load env permission from t_setting_overrides
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;

                ws.CommandSql = @"  SELECT TOP 1
                                        vc_value
                                    FROM t_setting_overrides
                                    WHERE vc_setting='testfd_PermissionLevel'
                                        AND vc_environment='" + currentEnv + @"'";

                object scalar = ws.ExecuteScalar();
                if (scalar == null)
                {
                    originalEnvironmentPermissionOverrideExisted = false;
                }
                else
                {
                    originalEnvironmentPermissionOverrideExisted = true;
                    originalEnvironmentPermission = Int32.Parse((string)scalar);
                }
            }
            #endregion

            #region load env permission from t_settings
            if (!originalEnvironmentPermissionOverrideExisted)
            {
                using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.PartitionType = WstPartitionType.Logical;

                    ws.CommandSql = @"  SELECT TOP 1
                                        vc_value
                                    FROM t_settings
                                    WHERE vc_setting='testfd_PermissionLevel'";

                    object scalar = ws.ExecuteScalar();
                    if (scalar == null)
                    {
                        throw new UnexpectedTestResultException("testfd_PermissionLevel not found in t_settings");
                    }
                    else
                    {
                        originalEnvironmentPermission = Int32.Parse((string)scalar);

                        // put dummy value into t_setting_overrides
                        using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                        {
                            ws2.PartitionType = WstPartitionType.Logical;

                            ws2.CommandSql = @" INSERT INTO t_setting_overrides(vc_environment,vc_component,i_site_id,vc_server,vc_setting,vc_value)
                                                VALUES ('" + currentEnv + "','ALL',-1,'ALL','testfd_PermissionLevel'," + originalEnvironmentPermission.ToString() + ")";

                            ws2.ExecuteNonQuery();
                        }
                    }
                }
            }
            #endregion

            #region load api permission from t_multisetting_overrides
            using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;

                ws.CommandSql = @"  SELECT TOP 1
                                        vc_value
                                    FROM t_multisetting_overrides
                                    WHERE vc_multisetting='testfd_API_PermissionLevel'
                                        AND vc_environment='" + currentEnv + @"'
                                        AND vc_value LIKE 'PingTestFD%'";

                object scalar = ws.ExecuteScalar();
                if (scalar == null)
                {
                    originalApiPermissionOverrideExisted = false;
                }
                else
                {
                    originalApiPermissionOverrideExisted = true;
                    string ApiPermission = (string)scalar;
                    string[] s = ApiPermission.Split(',');
                    Assert.IsTrue(s.Length == 2);
                    Assert.IsTrue(s[0] == "PingTestFD");
                    bool couldParse = Int32.TryParse(s[1], out originalApiPermission);
                    Assert.IsTrue(couldParse);
                }
            }
            #endregion

            #region load api permission from t_multisettings
            if (!originalApiPermissionOverrideExisted)
            {
                using (WSClient ws = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws.PartitionType = WstPartitionType.Logical;

                    ws.CommandSql = @"  SELECT TOP 1
                                        vc_value
                                    FROM t_multisettings
                                    WHERE vc_multisetting='testfd_API_PermissionLevel'
                                        AND vc_value LIKE 'PingTestFD%'";

                    object scalar = ws.ExecuteScalar();
                    if (scalar == null)
                    {
                        throw new UnexpectedTestResultException("testfd_PermissionLevel not found in t_settings");
                    }
                    else
                    {
                        string ApiPermission = (string)scalar;
                        string[] s = ApiPermission.Split(',');
                        Assert.IsTrue(s.Length == 2);
                        Assert.IsTrue(s[0] == "PingTestFD");
                        bool couldParse = Int32.TryParse(s[1], out originalApiPermission);
                        Assert.IsTrue(couldParse);

                        // put dummy value into t_setting_overrides
                        using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                        {
                            ws2.PartitionType = WstPartitionType.Logical;

                            ws2.CommandSql = @" INSERT INTO t_multisetting_overrides(vc_environment,vc_component,i_site_id,vc_server,vc_multisetting,vc_value)
                                                VALUES ('" + currentEnv + "','ALL',-1,'ALL','testfd_API_PermissionLevel','PingTestFD," + originalApiPermission.ToString() + "')";

                            ws2.ExecuteNonQuery();
                        }
                    }
                }
            }
            #endregion

            Global.XEnv.ForceConfigReload("testfd");
        }

        private void ResetPermissions()
        {
            if (originalEnvironmentPermissionOverrideExisted)
            {
                #region Reset t_setting_overrides
                using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws2.PartitionType = WstPartitionType.Logical;

                    ws2.CommandSql = @" UPDATE t_setting_overrides
                                        SET vc_value='" + originalEnvironmentPermission.ToString() + @"'
                                        WHERE vc_setting='testfd_PermissionLevel'
                                            AND vc_environment='" + currentEnv + @"'";

                    ws2.ExecuteNonQuery();
                }
                #endregion
            }
            else
            {
                #region delete t_setting_overrides
                using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws2.PartitionType = WstPartitionType.Logical;

                    ws2.CommandSql = @" DELETE FROM t_setting_overrides
                                        WHERE vc_setting='testfd_PermissionLevel'
                                            AND vc_environment='" + currentEnv + @"'";

                    ws2.ExecuteNonQuery();
                }
                #endregion

                #region reset t_settings
                using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws2.PartitionType = WstPartitionType.Logical;

                    ws2.CommandSql = @" UPDATE t_settings
                                        SET vc_value='" + originalEnvironmentPermission.ToString() + @"'
                                        WHERE vc_setting='testfd_PermissionLevel'";

                    ws2.ExecuteNonQuery();
                }
                #endregion
            }

            if (originalApiPermissionOverrideExisted)
            {
                #region Reset t_multisetting_overrides
                using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws2.PartitionType = WstPartitionType.Logical;

                    ws2.CommandSql = @" UPDATE t_multisetting_overrides
                                        SET vc_value='PingTestFD," + originalApiPermission.ToString() + @"'
                                        WHERE vc_multisetting='testfd_API_PermissionLevel'
                                            AND vc_value LIKE 'PingTestFD,%'
                                            AND vc_environment='" + currentEnv + @"'";

                    ws2.ExecuteNonQuery();
                }
                #endregion
            }
            else
            {
                #region delete t_multisetting_overrides
                using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws2.PartitionType = WstPartitionType.Logical;

                    ws2.CommandSql = @" DELETE FROM t_multisetting_overrides
                                        WHERE vc_multisetting='testfd_API_PermissionLevel'
                                            AND vc_environment='" + currentEnv + @"'";

                    ws2.ExecuteNonQuery();
                }
                #endregion

                #region reset t_multisettings
                using (WSClient ws2 = new WSClient(ConfigUtil.NpdbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    ws2.PartitionType = WstPartitionType.Logical;

                    ws2.CommandSql = @" UPDATE t_multisettings
                                        SET vc_value='PingTestFD," + originalApiPermission.ToString() + @"'
                                        WHERE vc_multisetting='testfd_API_PermissionLevel'
                                            AND vc_value LIKE 'PingTestFD,%'";

                    ws2.ExecuteNonQuery();
                }
                #endregion
            }

            Global.XEnv.ForceConfigReload("testfd");
        }

        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\test\xenon\FuncProfileCommands.cs ===
using System;
using System.Threading;

using ServerTestFramework;
using ServerTestFramework.LiveService;
using ServerTestFramework.LiveService.UserAccount;
using ServerTestFramework.LiveService.Billing;
using ServerTestFramework.LiveService.TestFD;
using ServerTestFramework.Database;
using ServerTestFramework.Utilities;

using xonline.common.diagnostics;
using xonline.common.sql.webstore;
using Microsoft.Webstore.WstClient;
using xonline.common.service;
using xonline.common.config;
using xonline.common.protocol;

namespace TestFD.Functional
{
    [TestGroup, Owner("maliagu"), TestFrequency("Regression"), TestCasePriority(1)]
    public class ProfileCommandsTest: TestNode
    {
        private static ulong _xuid;
        public static void WaitForXCacheSmart(ulong xuid)
        {
            int maxWait = Config.GetIntSetting(Setting.xcache_db_pollingInterval);

            DateTime timeout = DateTime.Now.AddSeconds(maxWait);

            string gamertag = XCache.LookupGamerTag(xuid);

            while (DateTime.Now < timeout && (gamertag == XCache.InvalidGamertag || gamertag == ""))
            {
                //poll xcache for the gamertag every 1 second
                Thread.Sleep(1000);
                gamertag = XCache.LookupGamerTag(xuid);
            }
        }
        public static ulong GetXuid()
        {
            if (_xuid == 0)
            {
                XRLCreateXboxComAccount request = new XRLCreateXboxComAccount();
                XRLCreateXboxComAccountResponse response = new XRLCreateXboxComAccountResponse();

                request.firstName = "Shweta";
                request.lastName = "Patil";
                request.countryId = (byte)XeUser.Country.RU;
                request.languageId = (byte)XeUser.Language.ru;

                Random m_rnd;
                m_rnd = new Random((int)DateTime.Now.Ticks);
                RandomEx rnd = new RandomEx();

                request.gamertag = rnd.GenerateRandomString("XEN", 15);
                request.email = "john.smith" + Global.PassportMemberDomain;
                request.birthdate = DateTime.UtcNow.AddYears(-25);
                request.partnerOptIn = 0;
                request.msftOptIn = 0;
                request.accessRequested = (int)PermissionLevel.PowerCommand;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLCreateXboxComAccount failed: " + request.GetDumpString());
                }
                if (response.UserPuid == 0)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLCreateXboxComAccount returned xuid 0"));
                }
                _xuid = response.UserPuid;
                //wait for xcache
                WaitForXCacheSmart(_xuid);
                string gamertag = XCache.LookupGamerTag(_xuid);
                if (gamertag == XCache.InvalidGamertag || gamertag == "")
                {
                    throw new UnexpectedTestResultException("FriendsCommands failed setup. No user was created.");
                }
            }

            return _xuid;

        }
        #region test cases
        [TestCase]
        class P_Mainline_MarkCheater : UserTestBase
        {
            override protected void Execute()
            {
                XRLMarkCheaterRequest request = new XRLMarkCheaterRequest();
                XRLMarkCheaterResponse response = new XRLMarkCheaterResponse();

                request.xuid = GetXuid();

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLMarkCheaterRequest failed: " + request.GetDumpString());
                }
                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMarkCheaterRequest returned XErr=0x{0:x}", request.XErr));
                }

                if (response.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLMarkCheaterResponse return value =0x{0:x}", response.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_Mainline_SetWatermark : UserTestBase
        {
            override protected void Execute()
            {
                XRLSetWatermarkRequest request = new XRLSetWatermarkRequest();
                XRLSetWatermarkResponse response = new XRLSetWatermarkResponse();

                request.xuid = GetXuid();
                request.flags = ProfileDefs.XPROFILE_GAMER_TYPE_NXE_TEAM;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLSetWatermarkRequest failed: " + request.GetDumpString());
                }
                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLSetWatermarkRequest returned XErr=0x{0:x}", request.XErr));
                }

                if (response.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLSetWatermarkResponse return value =0x{0:x}", response.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }

        [TestCase]
        class P_Mainline_SetTenure : UserTestBase
        {
            override protected void Execute()
            {
                XRLSetTenureRequest request = new XRLSetTenureRequest();
                XRLSetTenureResponse response = new XRLSetTenureResponse();

                request.xuid = GetXuid();
                request.years = 5;
                request.months = 6;

                if (!request.Execute(out response))
                {
                    throw new UnexpectedTestResultException("XRLSetTenureRequest failed: " + request.GetDumpString());
                }
                if (request.XErr != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLSetTenureRequest returned XErr=0x{0:x}", request.XErr));
                }

                if (response.returnValue != ServerTestFramework.LiveService.HResult.S_OK)
                {
                    throw new UnexpectedTestResultException(String.Format("XRLSetTenureResponse return value =0x{0:x}", response.returnValue));
                }

                ResultCode = TEST_RESULTS.PASSED;
            }
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\xsts\linktest\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\testrefl\ProjectInstaller.cs ===
using System;
using System.Collections;
using System.Configuration.Install;
using System.ServiceProcess;
using System.ComponentModel;
using System.Diagnostics;

using xonline.common.config;
using xonline.common.service;

[RunInstallerAttribute(true)]
public class ProjectInstaller : System.Configuration.Install.Installer
{
    private ServiceInstaller serviceInstaller;
    private ServiceProcessInstaller processInstaller;

    public ProjectInstaller ()
    {
        InitializeComponent();
    }

    protected override void Dispose (bool disposing)
    {
        base.Dispose(disposing);
    }

    private void InitializeComponent ()
    {
        processInstaller = new ServiceProcessInstaller();
        serviceInstaller = new ServiceInstaller();

        IComponentInfo compInfo = Config.GetComponent(xonline.common.config.Component.testrefl);

        LSAUtil.GrantLogonRights(compInfo.Username);

        processInstaller.Account = System.ServiceProcess.ServiceAccount.User;
        processInstaller.Username = compInfo.Username;

        CSetupSecureResolver decoder = new CSetupSecureResolver();
        processInstaller.Password = decoder.UserSecret(compInfo.Password);

        serviceInstaller.ServiceName = "testrefl";
        serviceInstaller.DisplayName = "Test Reflector for UDP/TCP";
        serviceInstaller.Description = "Test reflector for generic UDP/TCP traffic.";
        serviceInstaller.StartType = System.ServiceProcess.ServiceStartMode.Automatic;
        serviceInstaller.Committed += new System.Configuration.Install.InstallEventHandler(this.TestRefl_Committed);

        Installers.Add(serviceInstaller);
        Installers.Add(processInstaller);

    }

    private void TestRefl_Committed (object sender, System.Configuration.Install.InstallEventArgs e)
    {
        System.ServiceProcess.ServiceController svc = new System.ServiceProcess.ServiceController("testrefl");
        svc.Start();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\xsts\linktest\Apis.cs ===
using System.Web.Services;
using Microsoft.XboxLive.Auth;

namespace TestXsts.LinkTest
{
    [WebService]
    public class IndividualAttribute
    {
        [WebMethod]
        [AllowedTitles(0xfffe07d1)]
        public void ForceUseOfDll()
        {
        }
    };
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\xsts\mvc\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\xsts\mvc\Apis.cs ===
using Microsoft.XboxLive.Auth;

namespace TestXsts.Mvc
{
    
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\server\testfd\fd\ProfileUtils.cs ===
using System;
using System.Globalization;
using System.Xml;
using System.Text;
using System.Text.RegularExpressions;
using System.IO;
using System.Diagnostics;
using System.ServiceProcess;
using System.Web;
using System.Collections.Generic;
using xonline.common.rating;
using xonline.common.audit;
using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.protocol;
using xonline.common.utilities;
using Microsoft.Webstore.WstClient;
using xonline.common.sql.webstore;
using System.Net;
using System.Data;
using System.Data.SqlClient;
using System.Threading;

using System.Xml.Serialization;
using xonline.common.user;


namespace xonline.server.testfd.fd
{
    public partial class TestFDUtil
    {
        private static string[] avatarManifests = new string[] {
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x00000000000000000000000000100000031B0003C1C8F109A19CB2E00008000003270003C1C8F109A19CB2E00020000003370003C1C8F109A19CB2E00000800002EB0003C1C8F109A19CB2E03F8000000000000000000000000000000000200002A40003C1C8F109A19CB2E03F80000000000000000000000000000000004000026F0003C1C8F109A19CB2E03F800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFE3A976FF553921FFECA853FF92B2CAFF553921FF9A2F7DFF553921FF4D5523FF4D55230000000200010002C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E0000100000000000000000000000000000000000401BD0003C1C8F109A19CB2E0000400000000000000000000000000000000000801320002C1C8F109A19CB2E00008000000000000000000000000000000000010016D0002C1C8F109A19CB2E0001000000000000000000000000000000000002001070002C1C8F109A19CB2E0002000000000000000000000000000000000080001AD0002C1C8F109A19CB2E008000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002001070002C1C8F109A19CB2E00020000000000000000000000000000000000010016D0002C1C8F109A19CB2E0001000000000000000000000000000000000000801320002C1C8F109A19CB2E0000800000000000000000000000000000000000401BD0003C1C8F109A19CB2E0000400000000000000000000000000000000000000A9CDC8300C03090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x00000000000000000000000000100000031E0003C1C8F109A19CB2E00008000003240003C1C8F109A19CB2E000200000033B0003C1C8F109A19CB2E00000800002EE0003C1C8F109A19CB2E03F8000000000000000000000000000000000200002C60003C1C8F109A19CB2E03F8000000000000000000000000000000000400002600003C1C8F109A19CB2E03F800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFD7B971FFB85E22FFB14A37FF82501DFFB85E22FFBA72B6FFB85E22FF5F4294FF5F42940000000200000001C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E0000100000000000000000000000000000000000401CC0003C1C8F109A19CB2E0000400000000000000000000000000000000000800610001C1C8F109A19CB2E0000800000000000000000000000000000000001000A20001C1C8F109A19CB2E0001000000000000000000000000000000000002000390001C1C8F109A19CB2E0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000390001C1C8F109A19CB2E0002000000000000000000000000000000000001000A20001C1C8F109A19CB2E0001000000000000000000000000000000000000800610001C1C8F109A19CB2E0000800000000000000000000000000000000000401CC0003C1C8F109A19CB2E0000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0x
            "0x
            "0x
            "0x00000000000000000000000000100000031E0003C1C8F109A19CB2E00008000003250003C1C8F109A19CB2E000200000033A0003C1C8F109A19CB2E00000800002F60003C1C8F109A19CB2E03F8000000000000000000000000000000000200002860003C1C8F109A19CB2E00000000000000000000000000000000000004000026D0003C1C8F109A19CB2E000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FF98652FFF4F463DFFB56157FF212121FF523436FFB2B05DFF92340EFF399251FF3992510000000200000001C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E0000100000000000000000000000000000000000800620001C1C8F109A19CB2E0000800000000000000000000000000000000000401B40003C1C8F109A19CB2E0000400000000000000000000000000000000001000900001C1C8F109A19CB2E0001000000000000000000000000000000000002000370001C1C8F109A19CB2E0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000370001C1C8F109A19CB2E0002000000000000000000000000000000000001000900001C1C8F109A19CB2E0001000000000000000000000000000000000000800620001C1C8F109A19CB2E0000800000000000000000000000000000000000401B40003C1C8F109A19CB2E000040000000000000000000000000000E000234C5A7099A4000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x
            "0x00000000000000000000000000100000031E0003C1C8F109A19CB2E00008000003330003C1C8F109A19CB2E000200000033C0003C1C8F109A19CB2E00000800002EE0003C1C8F109A19CB2E03F8000000000000000000000000000000000200002BA0003C1C8F109A19CB2E03F80000000000000000000000000000000004000026F0003C1C8F109A19CB2E03F800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFC7984CFF553921FF9F5D69FF6381A7FF553921FFB37D59FF553921FF81271FFF81271F0000000200000001C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E00001000000000000000000000000000000000004025B0003C1C8F109A19CB2E00004000000000000000000000000000000000008008E0001C1C8F109A19CB2E000080000FFFF0000FF00FF00FF0000FF00000010008F0001C1C8F109A19CB2E0001000000000000000000000000000000000002000360001C1C8F109A19CB2E0002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000360001C1C8F109A19CB2E00020000000000000000000000000000000000010008F0001C1C8F109A19CB2E00010000000000000000000000000000000000008008E0001C1C8F109A19CB2E000080000FFFF0000FF00FF00FF0000FF00000004025B0003C1C8F109A19CB2E0000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0x
            "0x
            "0x00000000000000000000000000100000031F0003C1C8F109A19CB2E00008000003250003C1C8F109A19CB2E00020000003390003C1C8F109A19CB2E00000800002FF0003C1C8F109A19CB2E03F8000000000000000000000000000000000200002900003C1C8F109A19CB2E03F8000000000000000000000000000000000400002610003C1C8F109A19CB2E03F800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFBE8749FFDCB74FFFEB7D80FF82501DFFDCB74FFFB37D59FFDCB74FFFE673B8FFE673B80000000200010002C1C8F109A19CB2E0000200000000000000000000000000000000000100020003C1C8F109A19CB2E0000100000000000000000000000000000000000402310003C1C8F109A19CB2E0000400000000000000000000000000000000002001080002C1C8F109A19CB2E0002000000000000000000000000000000000040005000002C1C8F109A19CB2E0040000000000000000000000000000000000080001A90002C1C8F109A19CB2E0080000000000000000000000000000000080001801710002C1C8F109A19CB2E000180000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002001080002C1C8F109A19CB2E0002000000000000000000000000000000000001001680002C1C8F109A19CB2E0001000000000000000000000000000000000000801110002C1C8F109A19CB2E0000800000000000000000000000000000000000402310003C1C8F109A19CB2E0000400000000000000000000000000000000000000491BC7300C03090000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
            "0x
            "0x
            "0x