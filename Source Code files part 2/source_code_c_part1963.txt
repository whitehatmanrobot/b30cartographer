.gameContentInstanceId == mediaInstanceId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the PrimitiveGameContentInstanceEncryptedKey for given MediaInstanceId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstanceId"></param>
        /// <returns></returns>
        static public GameContentInstanceEncryptedKey GetPrimitiveGameContentInstanceEncryptedKey(this RawCatalogDBEntities catalog, Guid mediaInstanceId)
        {
            return catalog.GameContentInstanceEncryptedKey.Where(gcek => gcek.gameContentInstanceId == mediaInstanceId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the GameContentInstanceFiles for given MediaInstanceIds
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstanceId"></param>
        /// <returns></returns>
        static public GameContentInstanceFile[] GetPrimitiveGameContentInstanceFiles(this RawCatalogDBEntities catalog, Guid mediaInstanceId)
        {
            return catalog.GameContentInstanceFile.Where(gcif => gcif.GameContentInstance.gameContentInstanceId == mediaInstanceId).ToArray();
        }

        /// <summary>
        /// Gets the primitive Image
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <returns></returns>
        static public Image GetPrimitiveImage(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.Image.Where(img => img.imageMediaId == mediaId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the primitive image Instances
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaiD"></param>
        static public ImageInstance[] GetPrimitiveImageInstances(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            List<ImageInstance> imageInstances = new List<ImageInstance>();

            var queryResults = (from mi in catalog.MediaInstance
                                join imgi in catalog.ImageInstance on mi.mediaInstanceId equals imgi.imageMediaInstanceId
                                where mi.Media.mediaId == mediaId
                                select new { mi.mediaInstanceId });

            foreach (var queryItem in queryResults)
            {
                ImageInstance imgInstance = catalog.ImageInstance.Where(img => img.imageMediaInstanceId == queryItem.mediaInstanceId).FirstOrDefault();
                if (imgInstance != null)
                {
                    imageInstances.Add(imgInstance);
                }
            }
            return imageInstances.ToArray();
        }

        /// <summary>
        /// Gets the LegacyOfferMapping associated with an Offer
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="offerId"></param>
        /// <returns></returns>
        static public LegacyOfferMapping GetPrimitiveLegacyOfferMapping(this RawCatalogDBEntities catalog, Guid offerId)
        {
            return catalog.LegacyOfferMapping.Where(lom => lom.offerId == offerId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the Locales associated with this CountryCode
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="countryCode"></param>
        /// <returns></returns>
        static public Locale[] GetPrimitiveLocaleByCountry(this RawCatalogDBEntities catalog, string countryCode)
        {
            //Validating that this countrycode is in the catalog
            catalog.GetPrimitiveCountryOrThrow(countryCode);
            return catalog.Locale.Where(l => l.Country.countryCode == countryCode).ToArray();
        }

        /// <summary>
        /// Gets the MediaCapabilityCountry items for a given media
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <returns></returns>
        static public MediaCapabilityCountry[] GetPrimitiveMediaCapabilityCountries(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaCapabilityCountry.Where(mcc => mcc.Media.mediaId == mediaId).ToArray();
        }

        /// <summary>
        /// Gets the MediaCapabilityCountry items for a given media and countryCode
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <param name="countryCode"></param>
        /// <returns></returns>
        static public MediaCapabilityCountry[] GetPrimitiveMediaCapabilityCountries(this RawCatalogDBEntities catalog, Guid mediaId, string countryCode)
        {
            catalog.GetPrimitiveCountryOrThrow(countryCode);
            return catalog.MediaCapabilityCountry.Where(mcc => mcc.Media.mediaId == mediaId
                                                        && mcc.Country.countryCode == countryCode).ToArray();
        }

        /// <summary>
        /// Gets the MediaCapabilityCountry for a given media, countryCode and capabilityType
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <param name="countryCode"></param>
        /// <param name="capabilityTypeId"></param>
        /// <returns></returns>
        static public MediaCapabilityCountry GetPrimitiveMediaCapabilityCountry(this RawCatalogDBEntities catalog, Guid mediaId, string countryCode, int capabilityTypeId)
        {
            catalog.GetPrimitiveCountryOrThrow(countryCode);
            catalog.GetPrimitiveCapabilityTypeOrThrow(capabilityTypeId);
            return catalog.MediaCapabilityCountry.Where(mcc => mcc.mediaId == mediaId
                                                        && mcc.Country.countryCode == countryCode
                                                        && mcc.CapabilityType.capabilityTypeId == capabilityTypeId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the MediaCapabilityCountry for a given media, countryCode and capabilityType
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <param name="countryCode"></param>
        /// <param name="capabilityTypeName"></param>
        /// <returns></returns>
        static public MediaCapabilityCountry GetPrimitiveMediaCapabilityCountry(this RawCatalogDBEntities catalog, Guid mediaId, string countryCode, string capabilityTypeName)
        {
            catalog.GetPrimitiveCountryOrThrow(countryCode);
            catalog.GetPrimitiveCapabilityTypeOrThrow(capabilityTypeName);
            return catalog.MediaCapabilityCountry.Where(mcc => mcc.mediaId == mediaId
                                                        && mcc.Country.countryCode == countryCode
                                                        && mcc.CapabilityType.internalName == capabilityTypeName).FirstOrDefault();
        }
        
        /// <summary>
        /// Gets the mediaInstances associated to Media
        /// </summary>
        /// <param name="mediaId"></param>
        static public MediaInstance[] GetPrimitiveMediaInstances(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaInstance.Where(mi => mi.Media.mediaId == mediaId).ToArray();
        }

        /// <summary>
        /// Gets the mediaInstances associated to Media, pivot on isPreview
        /// </summary>
        /// <param name="mediaId"></param>
        /// <param name="isPreview"></param>
        static public MediaInstance[] GetPrimitiveMediaInstances(this RawCatalogDBEntities catalog, Guid mediaId, byte isPreview)
        {
            return catalog.MediaInstance.Where(mi => mi.Media.mediaId == mediaId && mi.isPreview == isPreview).ToArray();
        }

        /// <summary>
        /// Gets the primitive MediaInstanceClientTypes for given MediaInstanceId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstanceId"></param>
        /// <returns></returns>
        static public MediaInstanceClientType[] GetPrimitiveMediaInstanceClientTypes(this RawCatalogDBEntities catalog, Guid mediaInstanceId)
        {
            return catalog.MediaInstanceClientType.Where(mict => mict.mediaInstanceId == mediaInstanceId).ToArray();
        }

        /// <summary>
        /// Gets the Media Locale Mappings associated to media with a specific locale
        /// </summary>
        /// <param name="catalog">Represents the catalog entity</param>
        /// <param name="mediaId">ID of the media</param>
        /// <param name="mediaLocale">Locale of the media</param>
        static public MediaLocaleMap GetPrimitiveMediaLocaleMap(this RawCatalogDBEntities catalog, Guid mediaId, Locale mediaLocale)
        {
            return catalog.MediaLocaleMap.Where(mlm => mlm.mediaId == mediaId && mlm.Locale.lcid == mediaLocale.lcid).FirstOrDefault();
        }

        /// <summary>
        /// Gets the Media Locale Mappings associated to media
        /// </summary>
        /// <param name="catalog">Represents the catalog entity</param>
        /// <param name="mediaId">ID of the media</param>
        static public MediaLocaleMap[] GetPrimitiveMediaLocaleMaps(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaLocaleMap.Where(mlm => mlm.mediaId == mediaId).ToArray();
        }


        /// <summary>
        /// Gets the Media Locale Mappings associated to media with a specific locale
        /// </summary>
        /// <param name="catalog">Represents the catalog entity</param>
        /// <param name="mediaId">ID of the media</param>
        /// <param name="mediaLocale">Mapping Locale of the media</param>
        static public MediaLocaleMap[] GetPrimitiveMediaLocaleMapMappings(this RawCatalogDBEntities catalog, Guid mediaId, Locale mediaLocale)
        {
            return catalog.MediaLocaleMap.Where(mlm => mlm.mediaId == mediaId && mlm.Locale1.lcid == mediaLocale.lcid).ToArray();
        }

        /// <summary>
        /// Gets the MediaRelationShiptypes based on relatedMediaId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="relatedMediaId"></param>
        /// <param name="relationShipTypeId"></param>
        /// <returns></returns>
        static public MediaRelationship[] GetPrimitiveMediaRelationShip(this RawCatalogDBEntities catalog, Guid relatedMediaId)
        {
            return catalog.MediaRelationship.Where(mr => mr.Media1.mediaId == relatedMediaId).ToArray();
        }

        /// <summary>
        /// Gets the MediaRelationShiptypes based on relatedMediaId and relationshiptypeId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="relatedMediaId"></param>
        /// <param name="mediaRelationshipTypeId"></param>
        /// <returns></returns>
        static public MediaRelationship[] GetPrimitiveMediaRelationShip(this RawCatalogDBEntities catalog,
            Guid relatedMediaId, int mediaRelationshipTypeId)
        {
            return catalog.MediaRelationship.Where(mr => mr.Media1.mediaId == relatedMediaId
                && mr.mediaRelationshipTypeId == mediaRelationshipTypeId).ToArray();
        }

        /// <summary>
        /// Gets the MediaRelationShiptypes based on mediaId 
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <param name="relationShipTypeId"></param>
        /// <returns></returns>
        static public MediaRelationship[] GetPrimitiveMediaRelationShipByMedia(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaRelationship.Where(mrt => mrt.Media.mediaId == mediaId).ToArray();
        }

        /// <summary>
        /// Gets the MediaRelationShiptypes based on mediaId and relationshiptypeId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <returns></returns>
        static public MediaRelationship[] GetPrimitiveMediaRelationShipByMedia(this RawCatalogDBEntities catalog, Guid mediaId, int mediaRelationshipTypeId)
        {
            return catalog.MediaRelationship.Where(mrt => mrt.Media.mediaId == mediaId
                && mrt.mediaRelationshipTypeId == mediaRelationshipTypeId).ToArray();
        }

        ///// <summary>
        ///// Gets the Terms for a given mediaId
        ///// </summary>
        ///// <param name="catalog"></param>
        ///// <param name="appMediaId"></param>
        ///// <returns></returns>
        //static public MediaTerm[] GetPrimitiveMediaTerm(this RawCatalogDBEntities catalog, Guid mediaId, int termTypeId)
        //{
        //    return catalog.MediaTerm.Where(m => m.mediaId == mediaId
        //                                            && m.termTypeId == termTypeId).ToArray();
        //}

        /// <summary>
        /// Gets the Terms for a given mediaId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="appMediaId"></param>
        /// <returns></returns>
        static public MediaTerm[] GetPrimitiveMediaTerm(this RawCatalogDBEntities catalog, Guid mediaId, int termTypeId, int lcid)
        {
            return catalog.MediaTerm.Where(m => m.mediaId == mediaId
                                                    && m.termTypeId == termTypeId
                                                    && m.lcid == lcid).ToArray();
        }
        
        /// <summary>
        /// Gets OfferInstances associated with Offer
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="offerId"></param>
        static public OfferInstance[] GetPrimitiveOfferInstances(this RawCatalogDBEntities catalog, Guid offerId)
        {
            return catalog.OfferInstance.Where(oi => oi.Offer.offerId == offerId).ToArray();
        }

        /// <summary>
        /// Get OfferInstanceMedias associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="offerInstanceId"></param>
        /// <returns></returns>
        static public OfferInstanceMedia[] GetPrimitiveOfferInstanceMedias(this RawCatalogDBEntities catalog, Guid offerInstanceId)
        {
            return catalog.OfferInstanceMedia.Where(oim => oim.offerInstanceId == offerInstanceId).ToArray();
        }

        /// <summary>
        /// Get OfferInstanceMediaInstances associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="offerInstanceId"></param>
        /// <returns></returns>
        static public OfferInstanceMediaInstance[] GetPrimitiveOfferInstanceMediaInstances(this RawCatalogDBEntities catalog, Guid offerInstanceId)
        {
            return catalog.OfferInstanceMediaInstance.Where(oimi => oimi.offerInstanceId == offerInstanceId).ToArray();
        }

        /// <summary>
        /// Get OfferInstanceUserTypes associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="offerInstanceId"></param>
        /// <returns></returns>
        static public OfferInstanceUserType[] GetPrimitiveOfferInstanceUserTypes(this RawCatalogDBEntities catalog, Guid offerInstanceId)
        {
            return catalog.OfferInstanceUserType.Where(oiut => oiut.offerInstanceId == offerInstanceId).ToArray();
        }

        /// <summary>
        /// Gets the primitive OfferRelationShips associated to Offer
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="offerId"></param>
        /// <returns></returns>
        static public OfferRelationShip[] GetPrimitiveOfferRelationShip(this RawCatalogDBEntities catalog, Guid catalogOfferId)
        {
            return catalog.OfferRelationShip.Where(ors => ors.offerId == catalogOfferId).ToArray();
        }

        /// <summary>
        /// Gets the primitive points bundle
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        static public PointsBundle GetPrimitivePointsBundle(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.PointsBundle.Where(pointsBundle => pointsBundle.pointsBundleId == mediaId).FirstOrDefault();
        }


        /// <summary>
        /// Gets the previewMediaInstance associated to mediaInstance
        /// </summary>
        /// <param name="mediaInstanceId"></param>
        static public PreviewMediaInstance GetPrimitivePreviewMediaInstance(this RawCatalogDBEntities catalog, Guid mediaInstanceId)
        {
            return catalog.PreviewMediaInstance.Where(pmi => pmi.previewMediaInstanceId == mediaInstanceId).FirstOrDefault();
        }

        /// <summary>
        /// Method to get from database the list media ids from MediaRelationship Table
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <param name="mediaRelationShipTypeId"></param>
        /// <returns></returns>
        static public Guid[] GetPrimitiveRelatedMediaIds(this RawCatalogDBEntities catalog, Guid mediaId, int mediaRelationShipTypeId)
        {
            List<Guid> listProductIds = new List<Guid>();

            var results = catalog.MediaRelationship.Where(mr => (mr.Media.mediaId == mediaId)
                    && (mr.MediaRelationshipType.mediaRelationshipTypeId == mediaRelationShipTypeId));

            foreach (var mediaRelationship in results)
            {
                listProductIds.Add(mediaRelationship.relatedMediaId);
            }

            return listProductIds.ToArray();
        }

        /// <summary>
        /// Get MediaRevenueSku associated with Media
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        /// <returns></returns>
        static public MediaRevenueSku GetPrimitiveMediaRevenueSku(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaRevenueSku.Where(mrs => mrs.mediaId == mediaId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the UnitType for a given unitTypeId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="unitTypeId"></param>
        /// <returns></returns>
        static public UnitType GetPrimitiveUnitType(this RawCatalogDBEntities catalog, int unitTypeId)
        {
            return catalog.UnitType.Where(ut => ut.unitTypeId == unitTypeId).FirstOrDefault();
        }

        // DataType
        /// <summary>
        /// Gets the DataType for a given dataTypeId
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="dataTypeId"></param>
        /// <returns></returns>
        static public DataType GetPrimitiveDataType(this RawCatalogDBEntities catalog, int dataTypeId)
        {
            return catalog.DataType.Where(vut => vut.dataTypeId == dataTypeId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the videoInstance associated to mediaInstance
        /// </summary>
        /// <param name="mediaInstanceId"></param>
        static public VideoInstance GetPrimitiveVideoInstance(this RawCatalogDBEntities catalog, Guid mediaInstanceId)
        {
            return catalog.VideoInstance.Where(vi => vi.videoMediaInstanceId == mediaInstanceId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the videoFiles associated to videoInstance
        /// </summary>
        /// <param name="videoMediaInstanceId"></param>
        static public VideoFile[] GetPrimitiveVideoFiles(this RawCatalogDBEntities catalog, Guid videoMediaInstanceId)
        {
            return catalog.VideoFile.Where(vf => vf.VideoInstance.videoMediaInstanceId == videoMediaInstanceId).ToArray();
        }

        /// <summary>
        /// Gets the ratings associated to media
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaId"></param>
        static public MediaRating[] GetPrimitiveMediaRatings(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaRating.Where(mr => mr.mediaId == mediaId).ToArray();
        }

        /// <summary>
        /// Gets the Rating descriptors associated to media
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstanceId"></param>
        static public MediaRatingDescriptor[] GetPrimitiveMediaRatingDescriptors(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return catalog.MediaRatingDescriptor.Where(md => md.mediaId == mediaId).ToArray();
        }

        /// <summary>
        /// Gets the information about subscription family
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="subscriptionFamilyId"></param>
        /// <returns></returns>
        static public SubscriptionFamily GetPrimitiveSubscriptionFamily(this RawCatalogDBEntities catalog, Guid subscriptionFamilyId)
        {
            return catalog.SubscriptionFamily.Where(sf => sf.subscriptionFamilyId == subscriptionFamilyId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the information about Livesubscription family
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="liveSubscriptionFamilyId"></param>
        /// <returns></returns>
        static public LiveSubscriptionFamily GetPrimitiveLiveSubscriptionFamily(this RawCatalogDBEntities catalog, Guid liveSubscriptionFamilyId)
        {
            return catalog.LiveSubscriptionFamily.Where(lsf => lsf.subscriptionFamilyId == liveSubscriptionFamilyId).FirstOrDefault();
        }

        /// <summary>
        /// Gets the services associated to a subscription family
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="liveSubscriptionFamilyId"></param>
        /// <returns></returns>
        static public SubscriptionFamilyService[] GetPrimitiveSubscriptionFamilyServices(this RawCatalogDBEntities catalog, Guid subscriptionFamilyId)
        {
            return catalog.SubscriptionFamilyService.Where(sfs => sfs.subscriptionFamilyId == subscriptionFamilyId).ToArray();
        }

        /// <summary>
        /// Gets the primitive subscription
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="subscriptionId"></param>
        /// <returns></returns>
        static public Subscription GetPrimitiveSubscription(this RawCatalogDBEntities catalog, Guid subscriptionId)
        {
            return catalog.Subscription.Where(s => s.subscriptionId == subscriptionId).FirstOrDefault();
        }
        /// <summary>
        /// Gets the primitive subscription billing Information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="subscriptionId"></param>
        /// <returns></returns>
        static public SubscriptionBillingInformation GetPrimitiveSubscriptionBillingInformation(this RawCatalogDBEntities catalog, Guid subscriptionId)
        {
            return catalog.SubscriptionBillingInformation.Where(sbi => sbi.subscriptionId == subscriptionId).FirstOrDefault();
        }

        #endregion

        /// <summary>
        /// The get or throw methods below provide a compact database lookup of the form catalog.Where(...).First()
        /// while throwing a meaningful error to the caller
        /// </summary>
        #region Table Get or Throw methods

        static private T GetPrimitiveOrThrow<T>(IQueryable<T> objQuery, string value, HResult hr)
        {
            try
            {
                return objQuery.First();
            }
            catch (InvalidOperationException ioe)
            {
                throw new XRLExceptionWithoutEvent(hr, ioe,
                    String.Format("{0} {1} not found in catalog", objQuery.ElementType.Name, value));
            }
        }

        static private T GetPrimitiveOrThrow<T>(IQueryable<T> objQuery, string value)
        {
            return GetPrimitiveOrThrow(objQuery, value, HResult.XONLINE_E_MIX_NOT_FOUND_IN_CATALOG);
        }

        static public App GetPrimitiveAppOrThrow(this RawCatalogDBEntities catalog, Guid appMediaId)
        {
            return GetPrimitiveOrThrow(catalog.App.Where(a => a.appMediaId == appMediaId), appMediaId.ToString());
        }

        static public AppLocale GetPrimitiveAppLocaleOrThrow(this RawCatalogDBEntities catalog, Guid appMediaId, Locale mediaLocale)
        {
            return GetPrimitiveOrThrow(catalog.AppLocale.Where(al => al.App.appMediaId == appMediaId
                                            && al.Locale.lcid == mediaLocale.lcid),
                                            string.Format("{0} {1}", appMediaId, mediaLocale.lcid));
        }

        static public AppType GetPrimitiveAppTypeOrThrow(this RawCatalogDBEntities catalog, int appTypeId)
        {
            return GetPrimitiveOrThrow(catalog.AppType.Where(at => at.appTypeId == appTypeId), appTypeId.ToString());
        }

        static public AppAppType GetPrimitiveAppAppTypeOrThrow(this RawCatalogDBEntities catalog, Guid appMediaId, int appTypeId)
        {
            return GetPrimitiveOrThrow(catalog.AppAppType.Where(aat => aat.App.appMediaId == appMediaId && aat.AppType.appTypeId == appTypeId),
                                        string.Format("{0} {1}", appMediaId, appTypeId));
        }

        static public AppInstance GetPrimitiveAppInstanceOrThrow(this RawCatalogDBEntities catalog, Guid appInstanceId)
        {
            return GetPrimitiveOrThrow(catalog.AppInstance.Where(ai => ai.appInstanceId == appInstanceId), appInstanceId.ToString());
        }

        static public AppInstanceEncryptedKey GetPrimitiveAppInstanceEncryptedKeyOrThrow(this RawCatalogDBEntities catalog, Guid appInstanceId)
        {
            return GetPrimitiveOrThrow(catalog.AppInstanceEncryptedKey.Where(aiek => aiek.AppInstance.appInstanceId == appInstanceId), appInstanceId.ToString());
        }

        static public AppInstanceFile GetPrimitiveAppInstanceFileOrThrow(this RawCatalogDBEntities catalog, Guid appInstanceId, Guid appInstanceFileId)
        {
            return GetPrimitiveOrThrow(catalog.AppInstanceFile.Where(aif => aif.AppInstance.appInstanceId == appInstanceId
                                                        && aif.appInstanceFileId == appInstanceFileId),
                                                        string.Format("{0} {1}", appInstanceId, appInstanceFileId));
        }

        static public AvatarBodyType GetPrimitiveAvatarBodyTypeOrThrow(this RawCatalogDBEntities catalog, int avatarBodyTypeId)
        {
            return GetPrimitiveOrThrow(catalog.AvatarBodyType.Where(ae => ae.avatarBodyTypeId == avatarBodyTypeId), avatarBodyTypeId.ToString());
        }

        static public AudioEncoding GetPrimitiveAudioEncodingOrThrow(this RawCatalogDBEntities catalog, int audioEncodingId)
        {
            return GetPrimitiveOrThrow(catalog.AudioEncoding.Where(ae => ae.audioEncodingId == audioEncodingId), audioEncodingId.ToString());
        }

        static public BillingFrequency GetPrimitiveBillingFrequencyOrThrow(this RawCatalogDBEntities catalog, int billingFrequencyId)
        {
            return GetPrimitiveOrThrow(catalog.BillingFrequency.Where(bf => bf.billingFrequencyId == billingFrequencyId), billingFrequencyId.ToString());
        }

        static public CapabilityType GetPrimitiveCapabilityTypeOrThrow(this RawCatalogDBEntities catalog, string capabilityTypeName)
        {
            return GetPrimitiveOrThrow(catalog.CapabilityType.Where(ct => ct.internalName == capabilityTypeName),
                                                        capabilityTypeName);
        }

        static public CapabilityType GetPrimitiveCapabilityTypeOrThrow(this RawCatalogDBEntities catalog, int capabilityTypeId)
        {
            return GetPrimitiveOrThrow(catalog.CapabilityType.Where(ct => ct.capabilityTypeId == capabilityTypeId),
                                                        capabilityTypeId.ToString());
        }

        static public Category GetPrimitiveCategoryOrThrow(this RawCatalogDBEntities catalog, int catalogegoryId)
        {
            return GetPrimitiveOrThrow(catalog.Category.Where(c => c.categoryId == catalogegoryId), catalogegoryId.ToString());
        }

        static public ClientType GetPrimitiveClientTypeOrThrow(this RawCatalogDBEntities catalog, int clientTypeId)
        {
            return GetPrimitiveOrThrow(catalog.ClientType.Where(ct => ct.clientTypeId == clientTypeId), clientTypeId.ToString());
        }

        static public Country GetPrimitiveCountryOrThrow(this RawCatalogDBEntities catalog, string countryCode)
        {
            return GetPrimitiveOrThrow(catalog.Country.Where(c => c.countryCode == countryCode), countryCode);
        }

        static public Currency GetPrimitiveCurrencyOrThrow(this RawCatalogDBEntities catalog, string currencyCode)
        {
            return GetPrimitiveOrThrow(catalog.Currency.Where(c => c.currencyCode == currencyCode), currencyCode);
        }

        static public DRMLicenseIssuer GetPrimitiveDRMLicenseIssuerOrThrow(this RawCatalogDBEntities catalog, int drmLicenseIssuerId)
        {
            return GetPrimitiveOrThrow(catalog.DRMLicenseIssuer.Where(dli => dli.drmLicenseIssuerId == drmLicenseIssuerId), drmLicenseIssuerId.ToString());
        }

        static public DurationType GetPrimitiveDurationTypeOrThrow(this RawCatalogDBEntities catalog, int durationTypeId)
        {
            return GetPrimitiveOrThrow(catalog.DurationType.Where(dt => dt.durationTypeId == durationTypeId), durationTypeId.ToString());
        }

        static public Game GetPrimitiveGameOrThrow(this RawCatalogDBEntities catalog, Guid gameId)
        {
            return GetPrimitiveOrThrow(catalog.Game.Where(g => g.gameMediaId == gameId), gameId.ToString());
        }

        static public GameContentInstance GetPrimitiveGameContentInstanceOrThrow(this RawCatalogDBEntities catalog, Guid gameContentInstanceId)
        {
            return GetPrimitiveOrThrow(catalog.GameContentInstance.Where(gci => gci.gameContentInstanceId == gameContentInstanceId), gameContentInstanceId.ToString());
        }

        static public GameRegionMask GetPrimitiveGameRegionMaskOrThrow(this RawCatalogDBEntities catalog, long supportedGameRegionMaskId)
        {
            return GetPrimitiveOrThrow(catalog.GameRegionMask.Where(grbm => grbm.gameRegionMaskId == supportedGameRegionMaskId), supportedGameRegionMaskId.ToString());
        }

        static public HDTVMode GetPrimitiveHDTVModeOrThrow(this RawCatalogDBEntities catalog, int hdtvModeId)
        {
            return GetPrimitiveOrThrow(catalog.HDTVMode.Where(hm => hm.hdtvModeId == hdtvModeId), hdtvModeId.ToString());
        }

        static public ImageFormat GetPrimitiveImageFormatOrThrow(this RawCatalogDBEntities catalog, int imageFormatId)
        {
            return GetPrimitiveOrThrow(catalog.ImageFormat.Where(imgformat => imgformat.imageFormatId == imageFormatId), imageFormatId.ToString());
        }

        static public ImageSize GetPrimitiveImageSizeOrThrow(this RawCatalogDBEntities catalog, int imageSizeId)
        {
            return GetPrimitiveOrThrow(catalog.ImageSize.Where(imgsize => imgsize.imageSizeId == imageSizeId), imageSizeId.ToString());
        }

        static public LegacyOfferMapping GetPrimitiveLegacyOfferMappingOrThrow(this RawCatalogDBEntities catalog, Guid offerId)
        {
            return GetPrimitiveOrThrow(catalog.LegacyOfferMapping.Where(lom => lom.offerId == offerId), offerId.ToString());
        }

        static public LicenseType GetPrimitiveLicenseTypeOrThrow(this RawCatalogDBEntities catalog, int licenseTypeId)
        {
            return GetPrimitiveOrThrow(catalog.LicenseType.Where(lt => lt.licenseTypeId == licenseTypeId), licenseTypeId.ToString());
        }

        static public Locale GetPrimitiveLocaleOrThrow(this RawCatalogDBEntities catalog, int localeId)
        {
            return GetPrimitiveOrThrow(catalog.Locale.Where(l => l.lcid == localeId), localeId.ToString());
        }

        static public Locale GetPrimitiveLocaleOrThrow(this RawCatalogDBEntities catalog, string locale)
        {
            return GetPrimitiveOrThrow(catalog.Locale.Where(l => l.locale1 == locale), locale);
        }

        static public Media GetPrimitiveMediaOrThrow(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return GetPrimitiveOrThrow(catalog.Media.Where(m => m.mediaId == mediaId), mediaId.ToString());
        }

        static public MediaCapabilityCountry GetPrimitiveMediaCapabilityCountryOrThrow(this RawCatalogDBEntities catalog, Guid mediaId, string countryCode, int capabilityTypeId)
        {
            return GetPrimitiveOrThrow(catalog.MediaCapabilityCountry.Where(mcc => mcc.Media.mediaId == mediaId
                                                        && mcc.Country.countryCode == countryCode
                                                        && mcc.CapabilityType.capabilityTypeId == capabilityTypeId),
                                                        string.Format("{0} {1} {2}", mediaId, countryCode, capabilityTypeId));
        }

        static public MediaCapabilityCountry GetPrimitiveMediaCapabilityCountryOrThrow(this RawCatalogDBEntities catalog, Guid mediaId, string countryCode, string capabilityTypeName)
        {
            return GetPrimitiveOrThrow(catalog.MediaCapabilityCountry.Where(mcc => mcc.Media.mediaId == mediaId
                                                        && mcc.Country.countryCode == countryCode
                                                        && mcc.CapabilityType.internalName == capabilityTypeName),
                                                        string.Format("{0} {1} {2}", mediaId, countryCode, capabilityTypeName));
        }
        
        static public MediaInstance GetPrimitiveMediaInstanceOrThrow(this RawCatalogDBEntities catalog, Guid mediaInstanceId)
        {
            return GetPrimitiveOrThrow(catalog.MediaInstance.Where(mi => mi.mediaInstanceId == mediaInstanceId), mediaInstanceId.ToString());
        }

        static public MediaInstanceClientType GetPrimitiveMediaInstanceClientTypeOrThrow(this RawCatalogDBEntities catalog,
            Guid mediaInstanceId, int clientTypeId)
        {
            return GetPrimitiveOrThrow(catalog.MediaInstanceClientType.Where(mict => mict.clientTypeId == clientTypeId
                && mict.mediaInstanceId == mediaInstanceId),
                String.Format("{0} {1}", mediaInstanceId, clientTypeId));
        }

        static public MediaRelationshipType GetPrimitiveMediaRelationshipTypeOrThrow(this RawCatalogDBEntities catalog, int mediaRelationshipTypeId)
        {
            return GetPrimitiveOrThrow(catalog.MediaRelationshipType.Where(mrt => mrt.mediaRelationshipTypeId == mediaRelationshipTypeId), mediaRelationshipTypeId.ToString());
        }

        static public MediaRevenueSku GetPrimitiveMediaRevenueSkuOrThrow(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            return GetPrimitiveOrThrow(catalog.MediaRevenueSku.Where(mrs => mrs.mediaId == mediaId), mediaId.ToString());
        }

        static public MediaType GetPrimitiveMediaTypeOrThrow(this RawCatalogDBEntities catalog, Guid mediaId)
        {
            Media media = catalog.GetPrimitiveMediaOrThrow(mediaId);
            if (media.MediaType == null && !media.MediaTypeReference.IsLoaded)
            {
                media.MediaTypeReference.Load();
            }
            return GetPrimitiveOrThrow(catalog.MediaType.Where(mt => mt.mediaTypeId == media.MediaType.mediaTypeId), media.MediaType.mediaTypeId.ToString());
        }

        static public MediaType GetPrimitiveMediaTypeOrThrow(this RawCatalogDBEntities catalog, int mediaTypeId)
        {
            return GetPrimitiveOrThrow(catalog.MediaType.Where(mt => mt.mediaTypeId == mediaTypeId), mediaTypeId.ToString());
        }

        static public Offer GetPrimitiveOfferOrThrow(this RawCatalogDBEntities catalog, Guid offerId)
        {
            return GetPrimitiveOrThrow(catalog.Offer.Where(o => o.offerId == offerId), offerId.ToString());
        }

        static public OfferInstanceGameContentInstanceAsset GetPrimitiveOfferInstanceGameContentInstanceAssetOrThrow(this RawCatalogDBEntities catalog, Guid offerInstanceId, Guid gameContentInstanceId)
        {
            return catalog.OfferInstanceGameContentInstanceAsset.Where(oigcia => oigcia.gameContentInstanceId == gameContentInstanceId
                            && oigcia.offerInstanceId == offerInstanceId).FirstOrDefault();
        }

        static public OfferRelationShipType GetPrimitiveOfferRelationshipTypeOrThrow(this RawCatalogDBEntities catalog, int offerRelationshipTypeId)
        {
            return GetPrimitiveOrThrow(catalog.OfferRelationShipType.Where(orst => orst.offerRelationShipTypeId == offerRelationshipTypeId), offerRelationshipTypeId.ToString());
        }

        static public OfferType GetPrimitiveOfferTypeOrThrow(this RawCatalogDBEntities catalog, int offerTypeId)
        {
            return GetPrimitiveOrThrow(catalog.OfferType.Where(o => o.offerTypeId == offerTypeId), offerTypeId.ToString());
        }

        static public PackageType GetPrimitivePackageTypeOrThrow(this RawCatalogDBEntities catalog, int packageTypeId)
        {
            return GetPrimitiveOrThrow(catalog.PackageType.Where(pt => pt.packageTypeId == packageTypeId), packageTypeId.ToString());
        }

        static public PaymentType GetPrimitivePaymentTypeOrThrow(this RawCatalogDBEntities catalog, int paymentTypeId)
        {
            return GetPrimitiveOrThrow(catalog.PaymentType.Where(pt => pt.paymentTypeId == paymentTypeId), paymentTypeId.ToString());
        }

        static public PreviewMediaInstanceType GetPrimitivePreviewMediaInstanceTypeOrThrow(this RawCatalogDBEntities catalog, int previewMediaInstanceTypeId)
        {
            return GetPrimitiveOrThrow(catalog.PreviewMediaInstanceType.Where(pmit => pmit.previewMediaInstanceTypeId == previewMediaInstanceTypeId), previewMediaInstanceTypeId.ToString());
        }

        static public PricingRule GetPrimitivePricingRuleOrThrow(this RawCatalogDBEntities catalog, int pricingRuleId)
        {
            return GetPrimitiveOrThrow(catalog.PricingRule.Where(pr => pr.pricingRuleId == pricingRuleId), pricingRuleId.ToString());
        }

        static public Provider GetPrimitiveProviderOrThrow(this RawCatalogDBEntities catalog, int providerId)
        {
            return GetPrimitiveOrThrow(catalog.Provider.Where(p => p.providerId == providerId), providerId.ToString());
        }

        static public RatingValue GetPrimitiveRatingValueOrThrow(this RawCatalogDBEntities catalog, int ratingValueId)
        {
            return GetPrimitiveOrThrow(catalog.RatingValue.Where(rv => rv.ratingValueId == ratingValueId), ratingValueId.ToString());
        }

        static public RatingDescriptor GetPrimitiveRatingDescriptorOrThrow(this RawCatalogDBEntities catalog, int ratingDescriptorId)
        {
            return GetPrimitiveOrThrow(catalog.RatingDescriptor.Where(rd => rd.ratingDescriptorId == ratingDescriptorId), ratingDescriptorId.ToString());
        }

        static public SellType GetPrimitiveSellTypeOrThrow(this RawCatalogDBEntities catalog, int sellTypeId)
        {
            return GetPrimitiveOrThrow(catalog.SellType.Where(st => st.sellTypeId == sellTypeId), sellTypeId.ToString());
        }

        static public Service GetPrimitiveServiceOrThrow(this RawCatalogDBEntities catalog, int serviceId)
        {
            return GetPrimitiveOrThrow(catalog.Service.Where(s => s.serviceId == serviceId), serviceId.ToString());
        }

        static public StorageUnit GetPrimitiveStorageUnitOrThrow(this RawCatalogDBEntities catalog, int storageUnitId)
        {
            return GetPrimitiveOrThrow(catalog.StorageUnit.Where(su => su.storageUnitId == storageUnitId), storageUnitId.ToString());
        }

        static public Store GetPrimitiveStoreOrThrow(this RawCatalogDBEntities catalog, int storeId)
        {
            return GetPrimitiveOrThrow(catalog.Store.Where(s => s.storeId == storeId), storeId.ToString());
        }

        static public SubscriptionFamily GetPrimitiveSubscriptionFamilyOrThrow(this RawCatalogDBEntities catalog, Guid subscriptionFamilyId)
        {
            return GetPrimitiveOrThrow(catalog.SubscriptionFamily.Where(sf => sf.subscriptionFamilyId == subscriptionFamilyId), subscriptionFamilyId.ToString());
        }
        
        static public TermType GetPrimitiveTermTypeOrThrow(this RawCatalogDBEntities catalog, int termTypeId)
        {
            return GetPrimitiveOrThrow(catalog.TermType.Where(tt => tt.termTypeId == termTypeId), termTypeId.ToString());
        }

        static public Tier GetPrimitiveTierOrThrow(this RawCatalogDBEntities catalog, int tierId)
        {
            return GetPrimitiveOrThrow(catalog.Tier.Where(t => t.tierId == tierId), tierId.ToString());
        }

        static public UnitType GetPrimitiveUnitTypeOrThrow(this RawCatalogDBEntities catalog, int unitTypeId)
        {
            return GetPrimitiveOrThrow(catalog.UnitType.Where(ut => ut.unitTypeId == unitTypeId), unitTypeId.ToString());
        }

        static public DataType GetPrimitiveDataTypeOrThrow(this RawCatalogDBEntities catalog, int dataTypeId)
        {
            return GetPrimitiveOrThrow(catalog.DataType.Where(vut => vut.dataTypeId == dataTypeId), dataTypeId.ToString());
        }

        static public VideoDefinition GetPrimitiveVideoDefinitionOrThrow(this RawCatalogDBEntities catalog, int videoDefinitionId)
        {
            return GetPrimitiveOrThrow(catalog.VideoDefinition.Where(vd => vd.videoDefinitionId == videoDefinitionId), videoDefinitionId.ToString());
        }

        static public VideoEncoding GetPrimitiveVideoEncodingOrThrow(this RawCatalogDBEntities catalog, int videoEncodingId)
        {
            return GetPrimitiveOrThrow(catalog.VideoEncoding.Where(ve => ve.videoEncodingId == videoEncodingId), videoEncodingId.ToString());
        }

        static public VisibilityLevel GetPrimitiveVisibilityLevelOrThrow(this RawCatalogDBEntities catalog, int visibilityLevelId)
        {
            return GetPrimitiveOrThrow(catalog.VisibilityLevel.Where(vl => vl.visibilityLevelId == visibilityLevelId), visibilityLevelId.ToString());
        }

        static public VisibilityStatus GetPrimitiveVisibilityStatusOrThrow(this RawCatalogDBEntities catalog, int visibilityStatusId)
        {
            return GetPrimitiveOrThrow(catalog.VisibilityStatus.Where(vs => vs.visibilityStatusId == visibilityStatusId), visibilityStatusId.ToString());
        }

        static public UserType GetPrimitiveUserTypeOrThrow(this RawCatalogDBEntities catalog, int userTypeId)
        {
            return GetPrimitiveOrThrow(catalog.UserType.Where(ut => ut.userTypeId == userTypeId), userTypeId.ToString());
        }

        #endregion

        #region Table Delete Methods

        /// <summary>
        /// Delete extra AppAppTypes associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixUserTypeIds"></param>
        /// <param name="offerInstanceId"></param>
        static public void DeletePrimitiveAppAppTypes(this RawCatalogDBEntities catalog, Guid appMediaId, int[] mixAppAppTypes)
        {
            AppAppType[] catalogAppAppTypes = GetPrimitiveAppAppTypes(catalog, appMediaId);

            foreach (AppAppType catalogAppAppType in catalogAppAppTypes)
            {
                if (mixAppAppTypes == null || !mixAppAppTypes.Contains(catalogAppAppType.appTypeId))
                {
                    catalog.DeleteObject(catalogAppAppType);
                }
            }
        }

        /// <summary>
        /// Deletes the DeletePrimitiveAppLocale present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogApp">App</param>
        /// <param name="locales">string[]</param>
        static public void DeletePrimitiveAppLocale(this RawCatalogDBEntities catalog, App catalogApp, string[] locales)
        {
            // remove medialocale map that no longer exist
            foreach (Locale mixLocale in catalog.Locale)
            {
                if (locales == null || !locales.Contains(mixLocale.locale1))
                {
                    // check if values needs to be removed from catalog
                    AppLocale catalogAppLocale = catalog.GetPrimitiveAppLocale(catalogApp.appMediaId, mixLocale);
                    if (catalogAppLocale != null)
                    {
                        catalog.DeleteObject(catalogAppLocale);
                    }
                }
            }
        }


        /// <summary>
        /// Deletes the DeletePrimitiveGameLocale present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogGame">Game</param>
        /// <param name="locales">string[]</param>
        static public void DeletePrimitiveGameLocale(this RawCatalogDBEntities catalog, Game catalogGame, string[] locales)
        {
            // remove medialocale map that no longer exist
            foreach (Locale mixLocale in catalog.Locale)
            {
                if (locales == null || !locales.Contains(mixLocale.locale1))
                {
                    // check if values needs to be removed from catalog
                    GameLocale catalogGameLocale = catalog.GameLocale.Where(gl => gl.gameMediaId == catalogGame.gameMediaId
                        && gl.Locale.lcid == mixLocale.lcid).FirstOrDefault();
                    if (catalogGameLocale != null)
                    {
                        catalog.DeleteObject(catalogGameLocale);
                    }
                }
            }
        }


        /// <summary>
        /// Deletes the AppInstanceFile present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">AppInstance</param>
        /// <param name="catalogAppInstanceFile">AppInstanceFile</param>
        /// <param name="sortOrders">int[]</param>
        static public void DeletePrimitiveAppInstanceFile(this RawCatalogDBEntities catalog, AppInstance catalogAppInstance, int[] sortOrders)
        {
            AppInstanceFile[] catalogAppInstanceFiles = catalog.GetPrimitiveAppInstanceFiles(catalogAppInstance.appInstanceId);
            if (catalogAppInstanceFiles == null)
            {
                return;
            }

            foreach (AppInstanceFile catalogAppInstanceFile in catalogAppInstanceFiles)
            {
                // Checking if the passed in list of Files from Mix is empty
                if (sortOrders == null)
                {
                    // All files will need to be removed from the catalog for this AppInstance
                    catalog.DeleteObject(catalogAppInstanceFile);
                }
                else
                {
                    //Check if this old SortOrder is in the current list of Files passed in by Mix
                    if (!sortOrders.Contains(catalogAppInstanceFile.sortOrder))
                    {
                        catalog.DeleteObject(catalogAppInstanceFile);
                    }
                }
            }
        }

        /// <summary>
        /// Deletes the GameContentInstanceFile present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">GameContentInstance</param>
        /// <param name="catalogGameContentInstanceFile">GameContentInstanceFile</param>
        /// <param name="sortOrders">int[]</param>
        static public void DeletePrimitiveGameContentInstanceFile(this RawCatalogDBEntities catalog, GameContentInstance catalogGameContentInstance, int[] sortOrders)
        {
            GameContentInstanceFile[] catalogGameContentInstanceFiles = catalog.GetPrimitiveGameContentInstanceFiles(catalogGameContentInstance.gameContentInstanceId);
            if (catalogGameContentInstanceFiles == null)
            {
                return;
            }

            foreach (GameContentInstanceFile catalogGameContentInstanceFile in catalogGameContentInstanceFiles)
            {
                // Checking if the passed in list of Files from Mix is empty
                if (sortOrders == null)
                {
                    // All files will need to be removed from the catalog for this GameContentInstance
                    catalog.DeleteObject(catalogGameContentInstanceFile);
                }
                else
                {
                    //Check if this old SortOrder is in the current list of Files passed in by Mix
                    if (!sortOrders.Contains(catalogGameContentInstanceFile.sortOrder))
                    {
                        catalog.DeleteObject(catalogGameContentInstanceFile);
                    }
                }
            }
        }

        /// <summary>
        /// Deletes the EncryptedKey for a particular AppInstance present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogAppInstance">AppInstance</param>
        static public void DeletePrimitiveAppInstanceEncryptedKey(this RawCatalogDBEntities catalog, AppInstance catalogAppInstance)
        {
            AppInstanceEncryptedKey catalogAppInstanceEncryptedKey = catalog.GetPrimitiveAppInstanceEncryptedKey(catalogAppInstance.appInstanceId);
            if (catalogAppInstanceEncryptedKey != null)
            {
                catalog.DeleteObject(catalogAppInstance.AppInstanceEncryptedKey);
            }
        }

        /// <summary>
        /// Deletes the EncryptedKey for a particular GameContentInstance present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogGameContentInstance">GameContentInstance</param>
        static public void DeletePrimitiveGameContentInstanceEncryptedKey(this RawCatalogDBEntities catalog, GameContentInstance catalogGameContentInstance)
        {
            GameContentInstanceEncryptedKey catalogGameContentInstanceEncryptedKey = catalog.GetPrimitiveGameContentInstanceEncryptedKey(catalogGameContentInstance.gameContentInstanceId);
            if (catalogGameContentInstanceEncryptedKey != null)
            {
                catalog.DeleteObject(catalogGameContentInstance.GameContentInstanceEncryptedKey);
            }
        }

        /// <summary>
        /// Deletes the DeletePrimitiveMediaCapabilityCountries present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="mixMediaCapabilityCountries">MediaCapabilityCountry[]</param>
        static public void DeletePrimitiveMediaCapabilityCountries(this RawCatalogDBEntities catalog, Guid catalogMediaId, MediaCapabilityCountry[] existingCatalogMediaCapabilityCountries)
        {
            if(existingCatalogMediaCapabilityCountries != null)
            {
                MediaCapabilityCountry [] catalogMediaCapacilityCountries = catalog.GetPrimitiveMediaCapabilityCountries(catalogMediaId);

                foreach (MediaCapabilityCountry exceptMCC in catalogMediaCapacilityCountries.Except(existingCatalogMediaCapabilityCountries))
                {
                    catalog.DeleteObject(exceptMCC);
                }
            }
        }

        /// <summary>
        /// Deletes the DeletePrimitiveMediaCategories present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="categories">int[]</param>
        static public void DeletePrimitiveMediaCategories(this RawCatalogDBEntities catalog, Media catalogMedia, int[] categories)
        {
            foreach (MediaCategory catalogMediaCategory in catalog.MediaCategory.Where(mc => mc.mediaId == catalogMedia.mediaId))
            {
                // remove category if it does not exist
                if (categories == null || !categories.Contains(catalogMediaCategory.categoryId))
                {
                    catalog.DeleteObject(catalogMediaCategory);
                }
            }
        }

        /// <summary>
        /// Remove the MediaInstances from Game that no longer apply
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstanceIds"></param>
        /// <param name="mediaInstances"></param>
        static public void DeletePrimitiveMediaInstances(this RawCatalogDBEntities catalog, Guid[] mediaInstanceIds,
            MediaInstance[] catalogMediaInstances)
        {
            ThrowIfNull(catalogMediaInstances, "Input MediaInstance array is null");

            // Delete MediaInstances that are in the DB but not in the Contract
            foreach (MediaInstance mediaInstance in catalogMediaInstances)
            {
                if (mediaInstanceIds == null || !mediaInstanceIds.Contains(mediaInstance.mediaInstanceId))
                {
                    // Delete MediaInstances not in the Contract
                    catalog.DeleteObject(mediaInstance);
                }
            }
        }

        /// <summary>
        /// Deletes the MediaInstanceClientType present in database and not present in the contract
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="clientTypeIds"></param>
        /// <param name="catalogMediaInstance"></param>
        static public void DeletePrimitiveMediaInstanceClientTypes(this RawCatalogDBEntities catalog, int[] clientTypeIds, MediaInstance catalogMediaInstance)
        {
            var query = (from mict in catalog.MediaInstanceClientType
                         where mict.mediaInstanceId == catalogMediaInstance.mediaInstanceId
                         select new { mict.clientTypeId });

            foreach (var queryElement in query)
            {
                if (clientTypeIds == null || !clientTypeIds.Contains(queryElement.clientTypeId))
                {
                    MediaInstanceClientType mediaInstanceClientType = GetPrimitiveMediaInstanceClientTypeOrThrow(catalog, catalogMediaInstance.mediaInstanceId, queryElement.clientTypeId);
                    catalog.DeleteObject(mediaInstanceClientType);
                }
            }
        }

        /// <summary>
        /// Deletes the MediaLocales present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="locales">Mapped Locales that should not be deleted</param>
        static public void DeletePrimitiveMediaLocale(this RawCatalogDBEntities catalog, Media catalogMedia, string[] locales)
        {
            // Remove medialocale map that no longer exist
            foreach (Locale localeMap in catalog.Locale)
            {
                if (locales == null || !locales.Contains(localeMap.locale1))
                {
                    // Check if values needs to be removed from catalog
                    MediaLocale catalogMediaLocale = catalog.MediaLocale.Where(ml =>
                        ml.mediaId == catalogMedia.mediaId && ml.Locale.lcid == localeMap.lcid).FirstOrDefault();

                    if (catalogMediaLocale != null)
                    {
                        // Delete MediaLocal
                        catalog.DeleteObject(catalogMediaLocale);
                    }
                }
            }
        }

        /// <summary>
        /// Deletes MediaLocaleMappings for a specific Media and MediaLocale (Mapped Locale)
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="mediaLocale">Media Locale (Mapped Locale)</param>
        static public void DeletePrimitiveMediaLocaleMaps(this RawCatalogDBEntities catalog, Media catalogMedia, Locale mediaLocale)
        {
            List<MediaLocaleMap> mediaLocaleMapsToDelete = catalog.MediaLocaleMap.Where(mlm => mlm.mediaId == catalogMedia.mediaId &&
                                                                                            mlm.Locale1.locale1 == mediaLocale.locale1).ToList();

            foreach (MediaLocaleMap mediaLocaleMapToDelete in mediaLocaleMapsToDelete)
            {
                catalog.DeleteObject(mediaLocaleMapToDelete);
            }
        }

        /// <summary>
        /// Deletes MediaLocaleMapping for a specific MediaLocaleMap (MediaID, Locale, LocaleMap)
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="mediaLocale">Media Locale (Mapped Locale)</param>
        static public void DeletePrimitiveMediaLocaleMap(this RawCatalogDBEntities catalog, MediaLocaleMap mediaLocaleMap)
        {
            #region Locale Loading

            if (mediaLocaleMap.Locale == null && !mediaLocaleMap.LocaleReference.IsLoaded)
            {
                mediaLocaleMap.LocaleReference.Load();
            }

            if (mediaLocaleMap.Locale1 == null && !mediaLocaleMap.Locale1Reference.IsLoaded)
            {
                mediaLocaleMap.Locale1Reference.Load();
            }

            #endregion


            // Null after a loading attempt means that it has been marked for deletion already
            if (mediaLocaleMap.Locale != null && mediaLocaleMap.Locale1 != null)
            {
                catalog.DeleteObject(mediaLocaleMap);
            }
        }

        /// <summary>
        /// Deletes the DeletePrimitiveMediaRatings present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="ratingList">int[]</param>
        static public void DeletePrimitiveMediaRatings(this RawCatalogDBEntities catalog, Media catalogMedia, int[] ratingList)
        {
            // Delete mediaRatings that do not exist
            foreach (MediaRating catalogMediaRating in catalog.MediaRating.Where(mr => mr.mediaId == catalogMedia.mediaId))
            {
                // Remove Rating if it does not exist
                if (ratingList == null || !ratingList.Contains(catalogMediaRating.ratingValueId))
                {
                    catalog.DeleteObject(catalogMediaRating);
                }
            }
        }

        /// <summary>
        /// Deletes the DeletePrimitiveMediaRatingDescriptor present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="ratingDescriptors">int[]</param>
        static public void DeletePrimitiveMediaRatingDescriptor(this RawCatalogDBEntities catalog, Media catalogMedia, int[] ratingDescriptors)
        {
            foreach (MediaRatingDescriptor catalogMediaRatingDescriptor in catalog.MediaRatingDescriptor.Where(mrd =>
                mrd.mediaId == catalogMedia.mediaId))
            {
                // Remove Rating if it does not exist
                if (ratingDescriptors == null || !ratingDescriptors.Contains(catalogMediaRatingDescriptor.ratingDescriptorId))
                {
                    catalog.DeleteObject(catalogMediaRatingDescriptor);
                }
            }
        }

        /// <summary>
        /// Delete old Media Relationships for the specified Media that we don't like to keep.
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="parentMediaId"></param>
        /// <param name="mediaRelationShipTypeId"></param>
        /// <param name="relatedMediaIdsToKeep"></param>
        static public void DeletePrimitiveMediaRelationships(this RawCatalogDBEntities catalog, Guid parentMediaId,
            int mediaRelationShipTypeId, Guid[] relatedMediaIdsToKeep)
        {
            IEnumerable<MediaRelationship> catalogMediaRelationships = catalog.MediaRelationship.Where(mr => (mr.Media.mediaId == parentMediaId)
                && (mr.MediaRelationshipType.mediaRelationshipTypeId == mediaRelationShipTypeId));

            foreach (MediaRelationship mediaRelationship in catalogMediaRelationships)
            {
                if ((relatedMediaIdsToKeep == null) || (!relatedMediaIdsToKeep.Contains(mediaRelationship.relatedMediaId)))
                {
                    catalog.DeleteObject(mediaRelationship);
                }
            }
        }

        /// <summary>
        /// Delete specific Media Relationship
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="parentMediaId"></param>
        /// <param name="relatedMediaId"></param>
        static public void DeletePrimitiveMediaRelationships(this RawCatalogDBEntities catalog, Guid parentMediaId, Guid relatedMediaId)
        {
            IEnumerable<MediaRelationship> catalogMediaRelationships = catalog.MediaRelationship.Where(mr => (mr.Media.mediaId == parentMediaId)
                && (mr.Media1.mediaId == relatedMediaId));

            foreach (MediaRelationship mediaRelationship in catalogMediaRelationships)
            {
                catalog.DeleteObject(mediaRelationship);
            }
        }


        /// <summary>
        /// Deletes the DeletePrimitiveMediaTerm present in database and not present in the contract
        /// </summary>
        /// <param name="catalog">RawCatalogDBEntities</param>
        /// <param name="catalogMedia">Media</param>
        /// <param name="termType">termTypeId</param>
        /// <param name="lcid">locale</param>
        /// <param name="term">term</param>
        static public void DeletePrimitiveMediaTerm(this RawCatalogDBEntities catalog, Media catalogMedia, int termTypeId, int lcid, string term)
        {
            MediaTerm catalogMediaTerm = catalog.MediaTerm.Where(mt => mt.mediaId == catalogMedia.mediaId
                && mt.termTypeId == termTypeId
                && mt.lcid == lcid
                && mt.term == term).FirstOrDefault();

            if (catalogMediaTerm != null)
            {
                catalog.DeleteObject(catalogMediaTerm);
            }
        }
        
        /// <summary>
        /// Remove the PreviewMediaInstances from Game that no longer apply
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="PreviewMediaInstanceIds"></param>
        /// <param name="mediaInstances"></param>
        static public void DeletePrimitivePreviewMediaInstances(this RawCatalogDBEntities catalog, Guid[] previewMediaInstanceIds,
            MediaInstance[] catalogMediaInstances)
        {
            ThrowIfNull(catalogMediaInstances, "Input MediaInstance array is null");

            // Delete PreviewMediaInstances that are in the DB but not in the Contract
            foreach (MediaInstance mediaInstance in catalogMediaInstances)
            {
                if (previewMediaInstanceIds == null || !previewMediaInstanceIds.Contains(mediaInstance.mediaInstanceId))
                {
                    // Delete PreviewMediaInstances not in the Contract
                    PreviewMediaInstance pmi = GetPrimitivePreviewMediaInstance(catalog, mediaInstance.mediaInstanceId);

                    if (pmi != null)
                    {
                        catalog.DeleteObject(pmi);
                    }
                }
            }
        }

        /// <summary>
        /// Flag OfferInstances that no longer apply, via OfferInstanceMedia and OfferInstanceMediaInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferInstanceIds"></param>
        /// <param name="catalogOfferInstances"></param>
        static public void DeletePrimitiveOfferInstances(this RawCatalogDBEntities catalog, Guid[] mixOfferInstanceIds,
            OfferInstance[] catalogOfferInstances)
        {
            ThrowIfNull(catalogOfferInstances, "Input OfferInstance array is null");

            foreach (OfferInstance catalogOfferInstance in catalogOfferInstances)
            {
                if (mixOfferInstanceIds == null || !mixOfferInstanceIds.Contains(catalogOfferInstance.offerInstanceId))
                {
                    DeletePrimitiveOfferInstanceMedias(catalog, null, catalogOfferInstance.offerInstanceId, false);
                    DeletePrimitiveOfferInstanceMediaInstances(catalog, null, catalogOfferInstance.offerInstanceId, false);

                    if (!catalogOfferInstance.endDateTime.Equals(SqlDateTime.MinValue.Value))
                    {
                        catalogOfferInstance.endDateTime = SqlDateTime.MinValue.Value;
                        catalogOfferInstance.modifiedDate = DateTime.UtcNow;
                    }
                }
            }
        }

        /// <summary>
        /// Remove OfferInstanceMedias associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaIds"></param>
        /// <param name="offerInstanceId"></param>
        static public void DeletePrimitiveOfferInstanceMedias(this RawCatalogDBEntities catalog, Guid[] mediaIds, Guid offerInstanceId, Boolean hardDelete)
        {
            OfferInstanceMedia[] offerInstanceMedias = GetPrimitiveOfferInstanceMedias(catalog, offerInstanceId);
            VisibilityStatus visibilityStatusDeleted = GetPrimitiveVisibilityStatusOrThrow(catalog, (int)CatalogConstants.VisibilityStatus.Deleted);

            foreach (OfferInstanceMedia oim in offerInstanceMedias)
            {
                if (mediaIds == null || !mediaIds.Contains(oim.mediaId))
                {
                    if (hardDelete)
                    {
                        catalog.DeleteObject(oim);
                    }
                    else
                    {

                        if (oim.VisibilityStatus == null && !oim.VisibilityStatusReference.IsLoaded)
                        {
                            oim.VisibilityStatusReference.Load();
                        }

                        if (oim.VisibilityStatus.visibilityStatusId != visibilityStatusDeleted.visibilityStatusId)
                        {
                            oim.VisibilityStatus = visibilityStatusDeleted;
                            oim.modifiedDate = DateTime.UtcNow;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Remove extra OfferInstanceMediaInstances associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstanceIds"></param>
        /// <param name="offerInstanceId"></param>
        static public void DeletePrimitiveOfferInstanceMediaInstances(this RawCatalogDBEntities catalog, Guid[] mediaInstanceIds, Guid offerInstanceId, Boolean hardDelete)
        {
            OfferInstanceMediaInstance[] offerInstanceMediaInstances = GetPrimitiveOfferInstanceMediaInstances(catalog, offerInstanceId);
            VisibilityStatus visibilityStatusDeleted = GetPrimitiveVisibilityStatusOrThrow(catalog, (int)CatalogConstants.VisibilityStatus.Deleted);

            foreach (OfferInstanceMediaInstance oimi in offerInstanceMediaInstances)
            {

                if (mediaInstanceIds == null || !mediaInstanceIds.Contains(oimi.mediaInstanceId))
                {
                    if (hardDelete)
                    {
                        catalog.DeleteObject(oimi);
                    }
                    else
                    {
                        if (oimi.VisibilityStatus == null && !oimi.VisibilityStatusReference.IsLoaded)
                        {
                            oimi.VisibilityStatusReference.Load();
                        }

                        if (oimi.VisibilityStatus.visibilityStatusId != visibilityStatusDeleted.visibilityStatusId)
                        {
                            oimi.VisibilityStatus = visibilityStatusDeleted;
                            oimi.modifiedDate = DateTime.UtcNow;
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Delete extra OfferInstanceUserTypes associated with OfferInstance
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixUserTypeIds"></param>
        /// <param name="offerInstanceId"></param>
        static public void DeletePrimitiveOfferInstanceUserTypes(this RawCatalogDBEntities catalog, int[] mixUserTypeIds, Guid offerInstanceId)
        {
            OfferInstanceUserType[] offerInstanceUserTypes = GetPrimitiveOfferInstanceUserTypes(catalog, offerInstanceId);

            foreach (OfferInstanceUserType oiut in offerInstanceUserTypes)
            {
                if (mixUserTypeIds == null || !mixUserTypeIds.Contains(oiut.userTypeId))
                {
                    catalog.DeleteObject(oiut);
                }
            }
        }

        /// <summary>
        /// Delete offer stores via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixStoreIds"></param>
        /// <param name="catalogOfferId"></param>
        static public void DeletePrimitiveOfferStores(this RawCatalogDBEntities catalog, int[] mixStoreIds, Guid catalogOfferId)
        {
            foreach (OfferStore os in catalog.OfferStore.Where(os => os.offerId == catalogOfferId))
            {
                if (mixStoreIds == null || !mixStoreIds.Contains(os.storeId))
                {
                    catalog.DeleteObject(os);
                }
            }
        }

        /// <summary>
        /// Remove the VideoInstances from Game that no longer apply
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="videoMediaInstanceIds"></param>
        /// <param name="mediaInstances"></param>
        static public void DeletePrimitiveVideoInstances(this RawCatalogDBEntities catalog, Guid[] videoMediaInstanceIds,
            MediaInstance[] catalogMediaInstances)
        {
            ThrowIfNull(catalogMediaInstances, "Input MediaInstance array is null");

            // Delete VideoInstances that are in the DB but not in the Contract
            foreach (MediaInstance mediaInstance in catalogMediaInstances)
            {
                if (videoMediaInstanceIds == null || !videoMediaInstanceIds.Contains(mediaInstance.mediaInstanceId))
                {
                    // Delete VideoInstances not in the Contract
                    VideoInstance vi = GetPrimitiveVideoInstance(catalog, mediaInstance.mediaInstanceId);

                    if (vi != null)
                    {
                        catalog.DeleteObject(vi);
                    }
                }
            }
        }

        /// <summary>
        /// Remove the VideoFiles from Game that no longer apply
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="videoMediaInstanceIds"></param>
        /// <param name="mediaInstances"></param>
        static public void DeletePrimitiveVideoFiles(this RawCatalogDBEntities catalog, Guid[] videoMediaInstanceIds,
            MediaInstance[] catalogMediaInstances)
        {
            ThrowIfNull(catalogMediaInstances, "Input MediaInstance array is null");

            // Delete VideoFiles that are in the DB but not in the Contract
            foreach (MediaInstance mediaInstance in catalogMediaInstances)
            {
                if (videoMediaInstanceIds == null || !videoMediaInstanceIds.Contains(mediaInstance.mediaInstanceId))
                {
                    // Delete VideoFiles not in the Contract
                    VideoFile[] videoFiles = GetPrimitiveVideoFiles(catalog, mediaInstance.mediaInstanceId);

                    foreach (VideoFile vf in videoFiles)
                    {
                        catalog.DeleteObject(vf);
                    }
                }
            }
        }

        /// <summary>
        /// Deletes the services associated to a subscription family
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="subscriptionFamilyId"></param>
        static public void DeletePrimitiveSubscriptionFamilyServices(this RawCatalogDBEntities catalog, Guid subscriptionFamilyId, int[] services)
        {
            foreach (SubscriptionFamilyService sfs in catalog.SubscriptionFamilyService.Where(sfs => sfs.subscriptionFamilyId == subscriptionFamilyId))
            {
                if (services == null || !services.Contains(sfs.serviceId))
                {
                    catalog.DeleteObject(sfs);
                }
            }
        }
        #endregion

        #region Table Insert/Update Save Methods

        /// <summary>
        /// Saves the App to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameMediaId"></param>
        /// <param name="titleId"></param>
        static public void SavePrimitiveApp(this RawCatalogDBEntities catalog, Guid appMediaId, uint titleId, Media catalogMedia, out App catalogApp)
        {
            catalogApp = catalog.App.Where(app => app.appMediaId == appMediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogApp == null)
            {
                catalogApp = new App();
                catalogApp.Media = catalogMedia;
                catalogApp.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogApp.liveTitleId != (int)titleId)
            {
                catalogApp.liveTitleId = (int)titleId;
                catalogApp.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save AppAppType
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogApp"></param>
        /// <param name="mixAppTypeId"></param>
        static public void SavePrimitiveAppAppType(this RawCatalogDBEntities catalog, App catalogApp, int mixAppTypeId)
        {
            AppAppType catalogAppAppType = catalog.GetPrimitiveAppAppType(catalogApp.Media.mediaId, mixAppTypeId);
               
            if (catalogAppAppType == null)
            {
                catalogAppAppType = new AppAppType();
                catalogAppAppType.App = catalogApp;
                catalogAppAppType.AppType = catalog.GetPrimitiveAppTypeOrThrow(mixAppTypeId);
                catalogAppAppType.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the Game to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameMediaId"></param>
        /// <param name="titleId"></param>
        static public void SavePrimitiveGame(this RawCatalogDBEntities catalog, Guid gameMediaId, uint titleId, Media catalogMedia, out Game catalogGame)
        {
            catalogGame = catalog.Game.Where(game => game.gameMediaId == gameMediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogGame == null)
            {
                catalogGame = new Game();
                catalogGame.Media = catalogMedia;
                catalogGame.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogGame.liveTitleId != (int)titleId)
            {
                catalogGame.liveTitleId = (int)titleId;
                catalogGame.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Saves the GameConsumable Information into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGameContent"></param>
        /// <param name="gameAssetMediaId"></param>
        /// <param name="gameMediaId"></param>
        /// <param name="liveTitleAssetId"></param>
        static public void SavePrimitiveGameConsumable(this RawCatalogDBEntities catalog, GameContent catalogGameContent, int liveTitleAssetId)
        {
            if (catalogGameContent.Game == null && !catalogGameContent.GameReference.IsLoaded)
            {
                catalogGameContent.GameReference.Load();
            }

            GameConsumable catalogGameConsumable = GetPrimitiveGameConsumable(catalog, catalogGameContent.gameContentMediaId);

            // Create with PKs if necessary
            if (catalogGameConsumable == null)
            {
                catalogGameConsumable = new GameConsumable();
                catalogGameConsumable.GameContent = catalogGameContent;
                catalogGameConsumable.Game = catalogGameContent.Game;
                catalogGameConsumable.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogGameConsumable.liveTitleAssetId != liveTitleAssetId)
            {
                catalogGameConsumable.liveTitleAssetId = liveTitleAssetId;
                catalogGameConsumable.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the GameContentInformation into Database without inheritRating information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="gameContentMediaId"></param>
        /// <param name="effectiveLiveTitleId"></param>
        static public void SavePrimitiveGameContent(this RawCatalogDBEntities catalog, out GameContent catalogGameContent, Guid gameContentMediaId, Game catalogGame, Media catalogMedia, int effectiveLiveTitleId)
        {
            SavePrimitiveGameContent(catalog, out catalogGameContent, gameContentMediaId, catalogGame, catalogMedia, effectiveLiveTitleId, CatalogConstants.GameInheritRating);
        }

        /// <summary>
        /// Saves the GameContentInformation into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="gameContentMediaId"></param>
        /// <param name="effectiveLiveTitleId"></param>
        /// <param name="inheritRating"></param>
        static public void SavePrimitiveGameContent(this RawCatalogDBEntities catalog, out GameContent catalogGameContent, Guid gameContentMediaId, Game catalogGame, Media catalogMedia,
            int effectiveLiveTitleId, bool inheritRating)
        {
            catalogGameContent = catalog.GameContent.Where(gc => gc.gameContentMediaId == gameContentMediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogGameContent == null)
            {
                catalogGameContent = new GameContent();
                catalogGameContent.Media = catalogMedia;
                catalogGameContent.Game = catalogGame;
                catalogGameContent.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogGameContent.effectiveLiveTitleId != effectiveLiveTitleId
                || catalogGameContent.contentBitFilter != CatalogConstants.ContentBitFilter
                || catalogGameContent.inheritRating != inheritRating)
            {
                catalogGameContent.effectiveLiveTitleId = effectiveLiveTitleId;
                catalogGameContent.contentBitFilter = CatalogConstants.ContentBitFilter;
                catalogGameContent.inheritRating = inheritRating;
                catalogGameContent.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the GameContentAvatarItem Information into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGameContent"></param>
        /// <param name="avatarBodyTypeId"></param>
        static public void SavePrimitiveGameContentAvatarItem(this RawCatalogDBEntities catalog, GameContent catalogGameContent, Guid gameContentAvatarItemMediaId, int avatarBodyTypeId, Guid assetId)
        {
            GameContentAvatarItem catalogGameContentAvatarItem = GetPrimitiveGameContentAvatarItem(catalog, gameContentAvatarItemMediaId);

            // Create with PKs if necessary
            if (catalogGameContentAvatarItem == null)
            {
                catalogGameContentAvatarItem = new GameContentAvatarItem();
                catalogGameContentAvatarItem.GameContent = catalogGameContent;
                catalogGameContentAvatarItem.AvatarBodyType = GetPrimitiveAvatarBodyTypeOrThrow(catalog, avatarBodyTypeId);
                catalogGameContentAvatarItem.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                if (catalogGameContentAvatarItem.AvatarBodyType == null && !catalogGameContentAvatarItem.AvatarBodyTypeReference.IsLoaded)
                {
                    catalogGameContentAvatarItem.AvatarBodyTypeReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogGameContentAvatarItem.AvatarBodyType.avatarBodyTypeId != avatarBodyTypeId
                || catalogGameContentAvatarItem.avatarItemAssetId != assetId)
            {
                catalogGameContentAvatarItem.AvatarBodyType = GetPrimitiveAvatarBodyTypeOrThrow(catalog, avatarBodyTypeId);
                catalogGameContentAvatarItem.avatarItemAssetId = assetId;
                catalogGameContentAvatarItem.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Saves the AppInstanceInformation into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="appInstanceId"></param>
        /// <param name="installSize"></param>
        /// <param name="packageSize"></param>
        /// <param name="liveContentId"></param>
        /// <param name="packageTypeId"></param>
        static public void SavePrimitiveAppInstance(this RawCatalogDBEntities catalog, Guid appInstanceId,
            MediaInstance catalogMediaInstance, long installSize, long packageSize, byte[] liveContentId, int packageTypeId,
            out AppInstance catalogAppInstance)
        {
            catalogAppInstance = catalog.AppInstance.Where(gci => gci.appInstanceId == appInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogAppInstance == null)
            {
                catalogAppInstance = new AppInstance();
                catalogAppInstance.MediaInstance = catalogMediaInstance;
                catalogAppInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogAppInstance.PackageType == null && !catalogAppInstance.PackageTypeReference.IsLoaded)
                {
                    catalogAppInstance.PackageTypeReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogAppInstance.PackageType == null || catalogAppInstance.PackageType.packageTypeId != packageTypeId)
            {
                catalogAppInstance.PackageType = GetPrimitivePackageTypeOrThrow(catalog, packageTypeId);
                catalogAppInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogAppInstance.liveContentId == null
                || Convert.ToBase64String(catalogAppInstance.liveContentId) != Convert.ToBase64String(liveContentId))
            {
                AppInstance hasSameLiveContentId = catalog.AppInstance.Where(gci => gci.liveContentId == liveContentId).FirstOrDefault();
                if (hasSameLiveContentId != null)
                {

                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_DUPLICATE_CONTENTID,
                        String.Format("Can not assign the provided ContentId to package '{0}' because another package already exists with the same contentId in the catalog",
                        appInstanceId.ToString()));
                }
                catalogAppInstance.liveContentId = liveContentId;
                catalogAppInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogAppInstance.installSize != installSize
                || catalogAppInstance.packageSize != packageSize)
            {
                catalogAppInstance.installSize = installSize;
                catalogAppInstance.packageSize = packageSize;
                catalogAppInstance.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Saves the GameContentInstanceInformation into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameContentInstanceId"></param>
        /// <param name="installSize"></param>
        /// <param name="packageSize"></param>
        /// <param name="liveContentId"></param>
        /// <param name="packageTypeId"></param>
        /// <param name="supportedGameRegionMaskId"></param>
        static public void SavePrimitiveGameContentInstance(this RawCatalogDBEntities catalog, Guid gameContentInstanceId,
            MediaInstance catalogMediaInstance, long installSize, long packageSize, byte[] liveContentId, int packageTypeId,
            long supportedGameRegionMaskId, out GameContentInstance catalogGameContentInstance)
        {
            catalogGameContentInstance = catalog.GameContentInstance.Where(gci => gci.gameContentInstanceId == gameContentInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogGameContentInstance == null)
            {
                catalogGameContentInstance = new GameContentInstance();
                catalogGameContentInstance.MediaInstance = catalogMediaInstance;
                catalogGameContentInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogGameContentInstance.GameRegionMask == null && !catalogGameContentInstance.GameRegionMaskReference.IsLoaded)
                {
                    catalogGameContentInstance.GameRegionMaskReference.Load();
                }
                if (catalogGameContentInstance.PackageType == null && !catalogGameContentInstance.PackageTypeReference.IsLoaded)
                {
                    catalogGameContentInstance.PackageTypeReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogGameContentInstance.GameRegionMask == null
                || catalogGameContentInstance.GameRegionMask.gameRegionMaskId != supportedGameRegionMaskId)
            {
                catalogGameContentInstance.GameRegionMask = GetPrimitiveGameRegionMaskOrThrow(catalog, supportedGameRegionMaskId);
                catalogGameContentInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogGameContentInstance.PackageType == null || catalogGameContentInstance.PackageType.packageTypeId != packageTypeId)
            {
                catalogGameContentInstance.PackageType = GetPrimitivePackageTypeOrThrow(catalog, packageTypeId);
                catalogGameContentInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogGameContentInstance.liveContentId == null
                || Convert.ToBase64String(catalogGameContentInstance.liveContentId) != Convert.ToBase64String(liveContentId))
            {
                GameContentInstance hasSameLiveContentId = catalog.GameContentInstance.Where(gci => gci.liveContentId == liveContentId).FirstOrDefault();
                if (hasSameLiveContentId != null)
                {

                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_DUPLICATE_CONTENTID,
                        String.Format("Can not assign the provided ContentId to package '{0}' because another package already exists with the same contentId in the catalog",
                        gameContentInstanceId.ToString()));
                }
                catalogGameContentInstance.liveContentId = liveContentId;
                catalogGameContentInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogGameContentInstance.installSize != installSize
                || catalogGameContentInstance.packageSize != packageSize)
            {
                catalogGameContentInstance.installSize = installSize;
                catalogGameContentInstance.packageSize = packageSize;
                catalogGameContentInstance.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Saves the AppInstanceEncryptedKey to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="encryptedSymKey"></param>
        /// <param name="encryptedPublicKey"></param>
        /// <param name="appInstanceId"></param>
        static public void SavePrimitiveAppInstanceEncryptedKey(this RawCatalogDBEntities catalog, byte[] encryptedSymKey,
            byte[] encryptedPublicKey, AppInstance catalogAppInstance)
        {
            AppInstanceEncryptedKey catalogAppInstanceEncryptedKey = catalog.AppInstanceEncryptedKey.Where(gciek =>
                gciek.appInstanceId == catalogAppInstance.appInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogAppInstanceEncryptedKey == null)
            {
                catalogAppInstanceEncryptedKey = new AppInstanceEncryptedKey();
                catalogAppInstanceEncryptedKey.AppInstance = catalogAppInstance;
                catalogAppInstanceEncryptedKey.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (!TableOperationUtility.ValueCompare<byte>(catalogAppInstanceEncryptedKey.encryptedPublicKey, encryptedPublicKey)
                || !TableOperationUtility.ValueCompare<byte>(catalogAppInstanceEncryptedKey.encryptedSymKey, encryptedSymKey))
            {
                catalogAppInstanceEncryptedKey.encryptedPublicKey = encryptedPublicKey;
                catalogAppInstanceEncryptedKey.encryptedSymKey = encryptedSymKey;
                catalogAppInstanceEncryptedKey.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the GameContentInstanceEncryptedKey to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="encryptedSymKey"></param>
        /// <param name="encryptedPublicKey"></param>
        /// <param name="gameContentInstanceId"></param>
        static public void SavePrimitiveGameContentInstanceEncryptedKey(this RawCatalogDBEntities catalog, byte[] encryptedSymKey,
            byte[] encryptedPublicKey, GameContentInstance catalogGameContentInstance)
        {
            GameContentInstanceEncryptedKey catalogGameContentInstanceEncryptedKey = catalog.GameContentInstanceEncryptedKey.Where(gciek =>
                gciek.gameContentInstanceId == catalogGameContentInstance.gameContentInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogGameContentInstanceEncryptedKey == null)
            {
                catalogGameContentInstanceEncryptedKey = new GameContentInstanceEncryptedKey();
                catalogGameContentInstanceEncryptedKey.GameContentInstance = catalogGameContentInstance;
                catalogGameContentInstanceEncryptedKey.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (!TableOperationUtility.ValueCompare<byte>(catalogGameContentInstanceEncryptedKey.encryptedPublicKey, encryptedPublicKey)
                || !TableOperationUtility.ValueCompare<byte>(catalogGameContentInstanceEncryptedKey.encryptedSymKey, encryptedSymKey))
            {
                catalogGameContentInstanceEncryptedKey.encryptedPublicKey = encryptedPublicKey;
                catalogGameContentInstanceEncryptedKey.encryptedSymKey = encryptedSymKey;
                catalogGameContentInstanceEncryptedKey.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the AppInstanceFile to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="appInstanceFileId"></param>
        /// <param name="catalogAppInstance"></param>
        /// <param name="fileUrl"></param>
        /// <param name="sortOrder"></param>
        static public void SavePrimitiveAppInstanceFile(this RawCatalogDBEntities catalog, Guid appInstanceFileId,
            AppInstance catalogAppInstance, string fileUrl, int sortOrder)
        {
            AppInstanceFile catalogAppInstanceFile = catalog.AppInstanceFile.Where(gcif =>
                gcif.AppInstance.appInstanceId == catalogAppInstance.appInstanceId
                && gcif.sortOrder == sortOrder).FirstOrDefault();

            // Create if necessary
            if (catalogAppInstanceFile == null)
            {
                catalogAppInstanceFile = new AppInstanceFile();
                catalogAppInstanceFile.AppInstance = catalogAppInstance;
                catalogAppInstanceFile.appInstanceFileId = appInstanceFileId;
                catalogAppInstanceFile.sortOrder = sortOrder;
                catalogAppInstanceFile.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogAppInstanceFile.fileUrl != fileUrl)
            {
                catalogAppInstanceFile.fileUrl = fileUrl;
                catalogAppInstanceFile.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Saves the GameContentInstanceFile to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="gameContentInstanceFileId"></param>
        /// <param name="catalogGameContentInstance"></param>
        /// <param name="fileUrl"></param>
        /// <param name="sortOrder"></param>
        static public void SavePrimitiveGameContentInstanceFile(this RawCatalogDBEntities catalog, Guid gameContentInstanceFileId,
            GameContentInstance catalogGameContentInstance, string fileUrl, int sortOrder)
        {
            GameContentInstanceFile catalogGameContentInstanceFile = catalog.GameContentInstanceFile.Where(gcif =>
                gcif.GameContentInstance.gameContentInstanceId == catalogGameContentInstance.gameContentInstanceId
                && gcif.sortOrder == sortOrder).FirstOrDefault();

            // Create if necessary
            if (catalogGameContentInstanceFile == null)
            {
                catalogGameContentInstanceFile = new GameContentInstanceFile();
                catalogGameContentInstanceFile.GameContentInstance = catalogGameContentInstance;
                catalogGameContentInstanceFile.gameContentInstanceFileId = gameContentInstanceFileId;
                catalogGameContentInstanceFile.sortOrder = sortOrder;
                catalogGameContentInstanceFile.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogGameContentInstanceFile.fileUrl != fileUrl)
            {
                catalogGameContentInstanceFile.fileUrl = fileUrl;
                catalogGameContentInstanceFile.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Sets the AppLocale Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogApp"></param>
        /// <param name="mediaId"></param>
        /// <param name="lcid"></param>
        /// <param name="developer"></param>
        /// <param name="publisher"></param>
        static public void SavePrimitiveAppLocale(this RawCatalogDBEntities catalog, App catalogApp, int lcid,
            string developer, string publisher)
        {
            AppLocale catalogAppLocale = catalog.AppLocale.Where(gl => gl.lcid == lcid && gl.appMediaId == catalogApp.appMediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogAppLocale == null)
            {
                catalogAppLocale = new AppLocale();
                catalogAppLocale.Locale = GetPrimitiveLocaleOrThrow(catalog, lcid);
                catalogAppLocale.App = catalogApp;
                catalogAppLocale.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogAppLocale.developer != developer
                || catalogAppLocale.publisher != publisher)
            {
                catalogAppLocale.developer = developer;
                catalogAppLocale.publisher = publisher;
                catalogAppLocale.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Sets the GameLocale Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogGame"></param>
        /// <param name="mediaId"></param>
        /// <param name="lcid"></param>
        /// <param name="customGenre"></param>
        /// <param name="developer"></param>
        /// <param name="publisher"></param>
        static public void SavePrimitiveGameLocale(this RawCatalogDBEntities catalog, Game catalogGame, int lcid,
            string customGenre, string developer, string publisher)
        {
            GameLocale catalogGameLocale = catalog.GameLocale.Where(gl => gl.lcid == lcid && gl.gameMediaId == catalogGame.gameMediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogGameLocale == null)
            {
                catalogGameLocale = new GameLocale();
                catalogGameLocale.Locale = GetPrimitiveLocaleOrThrow(catalog, lcid);
                catalogGameLocale.Game = catalogGame;
                catalogGameLocale.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogGameLocale.customGenre != customGenre
                || catalogGameLocale.developer != developer
                || catalogGameLocale.publisher != publisher)
            {
                catalogGameLocale.customGenre = customGenre;
                catalogGameLocale.developer = developer;
                catalogGameLocale.publisher = publisher;
                catalogGameLocale.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves Primitive image to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="media"></param>
        /// <param name="imageMediaId"></param>
        /// <param name="issuer"></param>
        /// <param name="creator"></param>
        static public void SavePrimitiveImage(this RawCatalogDBEntities catalog, Media media, string issuer, string creator)
        {
            Image catalogImage = catalog.Image.Where(img => img.imageMediaId == media.mediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogImage == null)
            {
                catalogImage = new Image();
                catalogImage.Media = media;
                catalogImage.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogImage.issuer != issuer || catalogImage.creator != creator)
            {
                catalogImage.issuer = issuer;
                catalogImage.creator = creator;
                catalogImage.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the primitive ImageInstance to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mediaInstance"></param>
        /// <param name="lcid"></param>
        /// <param name="fileUrl"></param>
        /// <param name="imageFormatId"></param>
        /// <param name="imageSizeId"></param>
        /// <param name="fileSize"></param>
        static public void SavePrimitiveImageInstance(this RawCatalogDBEntities catalog, MediaInstance mediaInstance,
            string locale, string fileUrl, int imageFormatId, int imageSizeId, int fileSize)
        {
            ImageInstance catalogImageInstance = catalog.ImageInstance.Where(imginst =>
                imginst.imageMediaInstanceId == mediaInstance.mediaInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogImageInstance == null)
            {
                catalogImageInstance = new ImageInstance();
                catalogImageInstance.MediaInstance = mediaInstance;
                catalogImageInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogImageInstance.ImageFormat == null && !catalogImageInstance.ImageFormatReference.IsLoaded)
                {
                    catalogImageInstance.ImageFormatReference.Load();
                }
                if (catalogImageInstance.ImageSize == null && !catalogImageInstance.ImageSizeReference.IsLoaded)
                {
                    catalogImageInstance.ImageSizeReference.Load();
                }
                if (catalogImageInstance.Locale == null && !catalogImageInstance.LocaleReference.IsLoaded)
                {
                    catalogImageInstance.LocaleReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogImageInstance.ImageFormat == null || catalogImageInstance.ImageFormat.imageFormatId != imageFormatId)
            {
                catalogImageInstance.ImageFormat = GetPrimitiveImageFormatOrThrow(catalog, imageFormatId);
                catalogImageInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogImageInstance.ImageSize == null || catalogImageInstance.ImageSize.imageSizeId != imageSizeId)
            {
                catalogImageInstance.ImageSize = GetPrimitiveImageSizeOrThrow(catalog, imageSizeId);
                catalogImageInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogImageInstance.Locale == null || catalogImageInstance.Locale.locale1 != locale)
            {
                catalogImageInstance.Locale = GetPrimitiveLocaleOrThrow(catalog, locale);
                catalogImageInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogImageInstance.fileSize != fileSize || catalogImageInstance.fileUrl != fileUrl)
            {
                catalogImageInstance.fileUrl = fileUrl;
                catalogImageInstance.fileSize = fileSize;
                catalogImageInstance.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Add legacy offer id mapping for given offer
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOffer"></param>
        /// <param name="mixOfferId"></param>
        /// <param name="mixLiveOfferId"></param>
        /// <returns></returns>
        static public LegacyOfferMapping SavePrimitiveLegacyOfferMapping(this RawCatalogDBEntities catalog, Offer catalogOffer, Guid mixOfferId, long mixLiveOfferId)
        {
            LegacyOfferMapping catalogLegacyOfferMapping = catalog.LegacyOfferMapping.Where(lom => lom.offerId == mixOfferId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogLegacyOfferMapping == null)
            {
                catalogLegacyOfferMapping = new LegacyOfferMapping();
                catalogLegacyOfferMapping.Offer = catalogOffer;
                catalogLegacyOfferMapping.liveOfferId = mixLiveOfferId;
                catalogLegacyOfferMapping.modifiedDate = DateTime.UtcNow;
            }
            else if (catalogLegacyOfferMapping.liveOfferId != mixLiveOfferId)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_NEW_LIVEOFFERID_FOR_EXISTING_OFFER,
                    String.Format("Cannot update legacy offer id mappings.  For offer {0}, existing value = {1}, new value = {2}", mixOfferId, catalogLegacyOfferMapping.liveOfferId, mixLiveOfferId));
            }

            return catalogLegacyOfferMapping;
        }

        /// <summary>
        /// Sets the Media Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="mediaId"></param>
        /// <param name="mediaTypeId"></param>
        /// <param name="metadataProviderId"></param>
        /// <param name="originalReleaseDate"></param>
        /// <param name="visibilityDate"></param>
        /// <param name="visibilityStatusId"></param>
        /// <param name="geoCheckPolicy"></param>
        static public void SavePrimitiveMedia(this RawCatalogDBEntities catalog, out Media catalogMedia, Guid mediaId,
            int mediaTypeId, int metadataProviderId, DateTime? originalReleaseDate,
            DateTime visibilityDate, int visibilityStatusId, byte geoCheckPolicy)
        {
            catalogMedia = catalog.Media.Where(m => m.mediaId == mediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMedia == null)
            {
                catalogMedia = new Media();
                catalogMedia.mediaId = mediaId;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogMedia.MediaType == null && !catalogMedia.MediaTypeReference.IsLoaded)
                {
                    catalogMedia.MediaTypeReference.Load();
                }
                if (catalogMedia.VisibilityStatus == null && !catalogMedia.VisibilityStatusReference.IsLoaded)
                {
                    catalogMedia.VisibilityStatusReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogMedia.MediaType == null || catalogMedia.MediaType.mediaTypeId != mediaTypeId)
            {
                catalogMedia.MediaType = GetPrimitiveMediaTypeOrThrow(catalog, mediaTypeId);
            }
            if (catalogMedia.VisibilityStatus == null || catalogMedia.VisibilityStatus.visibilityStatusId != visibilityStatusId)
            {
                TableOperationUtility.ValidateVisibilityStatus(visibilityStatusId);
                catalogMedia.VisibilityStatus = GetPrimitiveVisibilityStatusOrThrow(catalog, visibilityStatusId);
            }
            if (catalogMedia.metadataProviderId != metadataProviderId
                || catalogMedia.originalReleaseDate != originalReleaseDate
                || catalogMedia.visibilityDate != visibilityDate
                || catalogMedia.geoCheckPolicy != geoCheckPolicy)
            {
                catalogMedia.metadataProviderId = metadataProviderId;
                catalogMedia.originalReleaseDate = originalReleaseDate;
                catalogMedia.displayOriginalReleaseDate = originalReleaseDate == null ? String.Empty : originalReleaseDate.ToString();
                catalogMedia.visibilityDate = visibilityDate;
                catalogMedia.geoCheckPolicy = (byte)geoCheckPolicy;
            }
        }

        /// <summary>
        /// Saves the MediaCapabilityCountry Information into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="media"></param>
        /// <param name="capabilityTypeId"></param>
        /// <param name="countryCode"></param>
        /// <param name="value"></param>
        /// <param name="unitTypeId"></param>
        /// <param name="catalogMediaInstance"></param>
        static public void SavePrimitiveMediaCapabilityCountry(this RawCatalogDBEntities catalog, Media catalogMedia, 
            int capabilityTypeId, string countryCode, string value, int? unitTypeId, out MediaCapabilityCountry catalogMediaCapabilityCountry)
        {
            catalogMediaCapabilityCountry = catalog.GetPrimitiveMediaCapabilityCountry(catalogMedia.mediaId, countryCode, capabilityTypeId);

            // Create with PKs if necessary
            if (catalogMediaCapabilityCountry == null)
            {
                catalogMediaCapabilityCountry = new MediaCapabilityCountry();
                catalogMediaCapabilityCountry.Media = catalogMedia;
                catalogMediaCapabilityCountry.CapabilityType = catalog.GetPrimitiveCapabilityTypeOrThrow(capabilityTypeId);
                catalogMediaCapabilityCountry.Country = catalog.GetPrimitiveCountryOrThrow(countryCode);
                if (unitTypeId.HasValue)
                {
                    catalogMediaCapabilityCountry.UnitType = catalog.GetPrimitiveUnitTypeOrThrow(unitTypeId.Value);
                }
                catalogMediaCapabilityCountry.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogMediaCapabilityCountry.CapabilityType == null && !catalogMediaCapabilityCountry.CapabilityTypeReference.IsLoaded)
                {
                    catalogMediaCapabilityCountry.CapabilityTypeReference.Load();
                }

                // Load references from database if not written locally, and not already loaded
                if (catalogMediaCapabilityCountry.Country == null && !catalogMediaCapabilityCountry.CountryReference.IsLoaded)
                {
                    catalogMediaCapabilityCountry.CountryReference.Load();
                }

                // Load references from database if not written locally, and not already loaded
                if (catalogMediaCapabilityCountry.UnitType == null && !catalogMediaCapabilityCountry.UnitTypeReference.IsLoaded)
                {
                    catalogMediaCapabilityCountry.UnitTypeReference.Load();
                }
            }


            // Apply updates if necessary
            if(!unitTypeId.HasValue)
            {
                if (catalogMediaCapabilityCountry.CapabilityType.unitTypeRequired)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE,
                        String.Format("UnitType required exception for product attribute {0} value {1}", catalogMediaCapabilityCountry.CapabilityType.internalName, value), false);
                }

                catalogMediaCapabilityCountry.UnitType = null;
                catalogMediaCapabilityCountry.modifiedDate = DateTime.UtcNow;
            }
            else if(catalogMediaCapabilityCountry.UnitType == null || catalogMediaCapabilityCountry.UnitType.unitTypeId != unitTypeId.Value)
            {
                catalogMediaCapabilityCountry.UnitType = catalog.GetPrimitiveUnitTypeOrThrow(unitTypeId.Value);
                catalogMediaCapabilityCountry.modifiedDate = DateTime.UtcNow;
            }

            if (catalogMediaCapabilityCountry.value != value)
            {
                TableOperationUtility.ValidateAttributeValueDataType(catalog, value, capabilityTypeId);
                catalogMediaCapabilityCountry.value = value;
                catalogMediaCapabilityCountry.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the MediaCapabilityCountry Information into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="media"></param>
        /// <param name="capabilityTypeName"></param>
        /// <param name="countryCode"></param>
        /// <param name="value"></param>
        /// <param name="unitTypeId"></param>
        /// <param name="catalogMediaInstance"></param>
        static public void SavePrimitiveMediaCapabilityCountry(this RawCatalogDBEntities catalog, Media catalogMedia, 
            string capabilityTypeName, string countryCode, string value, int? unitTypeId, out MediaCapabilityCountry catalogMediaCapabilityCountry)
        {

            CapabilityType ct = GetPrimitiveCapabilityTypeOrThrow(catalog, capabilityTypeName);
            
            SavePrimitiveMediaCapabilityCountry(catalog, catalogMedia, ct.capabilityTypeId, countryCode, value, unitTypeId, out catalogMediaCapabilityCountry);
        }

        /// <summary>
        /// Sets the MediaCategory Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="mediaId"></param>
        /// <param name="catalogegoryId"></param>
        static public void SavePrimitiveMediaCategory(this RawCatalogDBEntities catalog, Media catalogMedia, Guid mediaId, int catalogegoryId)
        {
            MediaCategory catalogMediaCategory = catalog.MediaCategory.Where(mc => mc.mediaId == mediaId &&
                mc.categoryId == catalogegoryId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaCategory == null)
            {
                catalogMediaCategory = new MediaCategory();
                catalogMediaCategory.Category = GetPrimitiveCategoryOrThrow(catalog, catalogegoryId);
                catalogMediaCategory.Media = catalogMedia;
                catalogMediaCategory.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the MediaInstance Information into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="media"></param>
        /// <param name="mediaInstanceId"></param>
        /// <param name="isAcquirable"></param>
        /// <param name="isAdSupported"></param>
        /// <param name="isPreview"></param>
        /// <param name="catalogMediaInstance"></param>
        static public void SavePrimitiveMediaInstance(this RawCatalogDBEntities catalog, Media media, Guid mediaInstanceId,
            byte isAcquirable, byte isAdSupported, byte isPreview, out MediaInstance catalogMediaInstance)
        {
            catalogMediaInstance = catalog.MediaInstance.Where(mi => mi.mediaInstanceId == mediaInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaInstance == null)
            {
                catalogMediaInstance = new MediaInstance();
                catalogMediaInstance.mediaInstanceId = mediaInstanceId;
                catalogMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogMediaInstance.Media == null && !catalogMediaInstance.MediaReference.IsLoaded)
                {
                    catalogMediaInstance.MediaReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogMediaInstance.Media == null || catalogMediaInstance.Media.mediaId != media.mediaId)
            {
                catalogMediaInstance.Media = media;
                catalogMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogMediaInstance.isAcquirable != isAcquirable
                || catalogMediaInstance.isAdSupported != isAdSupported
                || catalogMediaInstance.isPreview != isPreview)
            {
                catalogMediaInstance.isAcquirable = isAcquirable;
                catalogMediaInstance.isAdSupported = isAdSupported;
                catalogMediaInstance.isPreview = isPreview;
                catalogMediaInstance.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save MediaInstance ClientType to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="clientTypeId"></param>
        /// <param name="catalogMediaInstance"></param>
        static public void SavePrimitiveMediaInstanceClientType(this RawCatalogDBEntities catalog, int clientTypeId, MediaInstance catalogMediaInstance)
        {
            MediaInstanceClientType catalogMediaInstanceClientType = catalog.MediaInstanceClientType.Where(mict =>
                mict.clientTypeId == clientTypeId && mict.mediaInstanceId == catalogMediaInstance.mediaInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaInstanceClientType == null)
            {
                catalogMediaInstanceClientType = new MediaInstanceClientType();
                catalogMediaInstanceClientType.MediaInstance = catalogMediaInstance;
                catalogMediaInstanceClientType.ClientType = GetPrimitiveClientTypeOrThrow(catalog, clientTypeId);
                catalogMediaInstanceClientType.modifiedDate = DateTime.UtcNow;
            }
        }



        /// <summary>        
        /// Sets the MediaLocale Table information
        /// Sets the MediaLocaleMap Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="mediaId"></param>
        /// <param name="lcid"></param>
        /// <param name="title"></param>
        /// <param name="titleSort"></param>
        /// <param name="reducedTitle"></param>
        /// <param name="description"></param>
        /// <param name="reducedDescription"></param>
        /// <param name="voiceDisplayTitle"></param>
        /// <param name="copyright"></param>
        /// <param name="mappingLocales"></param>
        static public void SavePrimitiveMediaLocale(this RawCatalogDBEntities catalog, Media catalogMedia, int lcid,
            string title, string titleSort, string reducedTitle, string description, string reducedDescription,
            string voiceDisplayTitle, string copyright, string[] mappingLocales)
        {
            MediaLocale catalogMediaLocale = catalog.MediaLocale.Where(ml => ml.lcid == lcid && ml.mediaId == catalogMedia.mediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaLocale == null)
            {
                catalogMediaLocale = new MediaLocale();
                catalogMediaLocale.Locale = GetPrimitiveLocaleOrThrow(catalog, lcid);
                catalogMediaLocale.Media = catalogMedia;
                catalogMediaLocale.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogMediaLocale.Locale == null && !catalogMediaLocale.LocaleReference.IsLoaded)
                {
                    catalogMediaLocale.LocaleReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogMediaLocale.title != title
                || catalogMediaLocale.titleSort != titleSort
                || catalogMediaLocale.reducedTitle != reducedTitle
                || catalogMediaLocale.description != description
                || catalogMediaLocale.reducedDescription != reducedDescription
                || catalogMediaLocale.voiceDisplayTitle != voiceDisplayTitle
                || catalogMediaLocale.copyright != copyright)
            {
                catalogMediaLocale.title = title;
                catalogMediaLocale.titleSort = titleSort;
                catalogMediaLocale.reducedTitle = reducedTitle;
                catalogMediaLocale.description = description;
                catalogMediaLocale.reducedDescription = reducedDescription;
                catalogMediaLocale.voiceDisplayTitle = voiceDisplayTitle;
                catalogMediaLocale.copyright = copyright;
                catalogMediaLocale.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Sets the MediaLocaleMap Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="equivalentLocaleMaps"></param>
        static public void SavePrimitiveMediaLocaleMaps(this RawCatalogDBEntities catalog, Media catalogMedia,
            Dictionary<string, string> equivalentLocaleMaps)
        {
            foreach (Locale locale in catalog.Locale)
            {
                MediaLocaleMap catalogMediaLocaleMap = catalog.GetPrimitiveMediaLocaleMap(catalogMedia.mediaId, locale);

                if (equivalentLocaleMaps.Keys.Contains(locale.locale1))
                {
                    //Add                                        
                    if (catalogMediaLocaleMap == null)
                    {
                        catalogMediaLocaleMap = new MediaLocaleMap();
                        catalogMediaLocaleMap.modifiedDate = DateTime.UtcNow;
                        catalogMediaLocaleMap.Media = catalogMedia;
                        catalogMediaLocaleMap.Locale = locale;
                        catalogMediaLocaleMap.Locale1 = catalog.GetPrimitiveLocaleOrThrow(equivalentLocaleMaps[locale.locale1]);
                        catalogMediaLocaleMap.modifiedDate = DateTime.UtcNow;
                    }
                    else
                    //Update
                    {
                        // Update if the current LcidMap is not correct
                        if (catalogMediaLocaleMap.Locale1.locale1 != equivalentLocaleMaps[locale.locale1])
                        {
                            catalogMediaLocaleMap.Locale1 = catalog.GetPrimitiveLocaleOrThrow(equivalentLocaleMaps[locale.locale1]);
                            catalogMediaLocaleMap.modifiedDate = DateTime.UtcNow;
                        }
                    }
                }
                else
                {
                    //Delete
                    if (catalogMediaLocaleMap != null)
                    {
                        catalog.DeleteObject(catalogMediaLocaleMap);
                    }
                }
            }
        }

        /// <summary>
        /// Sets the MediaRating Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="mediaId"></param>
        /// <param name="ratingValueId"></param>
        static public void SavePrimitiveMediaRating(this RawCatalogDBEntities catalog, Media catalogMedia, Guid mediaId, int ratingValueId)
        {
            MediaRating catalogMediaRating = catalog.MediaRating.Where(mr => mr.mediaId == mediaId
                && mr.ratingValueId == ratingValueId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaRating == null)
            {
                catalogMediaRating = new MediaRating();
                catalogMediaRating.RatingValue = GetPrimitiveRatingValueOrThrow(catalog, ratingValueId);
                catalogMediaRating.Media = catalogMedia;
                catalogMediaRating.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Sets the MediaRatingDescriptor Table information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="mediaId"></param>
        /// <param name="ratingDescriptorId"></param>
        /// <param name="level"></param>
        static public void SavePrimitiveMediaRatingDescriptor(this RawCatalogDBEntities catalog, Media catalogMedia,
            Guid mediaId, int ratingDescriptorId, double level)
        {
            MediaRatingDescriptor catalogMediaRatingDescriptor = catalog.MediaRatingDescriptor.Where(mrd =>
                mrd.mediaId == mediaId && mrd.ratingDescriptorId == ratingDescriptorId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaRatingDescriptor == null)
            {
                catalogMediaRatingDescriptor = new MediaRatingDescriptor();
                catalogMediaRatingDescriptor.Media = catalogMedia;
                catalogMediaRatingDescriptor.RatingDescriptor = GetPrimitiveRatingDescriptorOrThrow(catalog, ratingDescriptorId);
                catalogMediaRatingDescriptor.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogMediaRatingDescriptor.level != level)
            {
                catalogMediaRatingDescriptor.level = level;
                catalogMediaRatingDescriptor.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves MediaRelationShip type into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="media">Parent Media Object</param>
        /// <param name="relatedMedia">Related Media Object</param>
        /// <param name="mediaRelationShipTypeId"></param>
        /// <param name="sortOrder"></param>
        static public void SavePrimitiveMediaRelationShip(this RawCatalogDBEntities catalog, Media media, Media relatedMedia,
            int mediaRelationShipTypeId, int sortOrder)
        {
            MediaRelationship catalogMediaRelationShip = catalog.MediaRelationship.Where(
                mrt => mrt.mediaId == media.mediaId
                    && mrt.relatedMediaId == relatedMedia.mediaId
                    && mrt.mediaRelationshipTypeId == mediaRelationShipTypeId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaRelationShip == null)
            {
                catalogMediaRelationShip = new MediaRelationship();
                catalogMediaRelationShip.Media = media;
                catalogMediaRelationShip.Media1 = relatedMedia;
                catalogMediaRelationShip.MediaRelationshipType = GetPrimitiveMediaRelationshipTypeOrThrow(catalog, mediaRelationShipTypeId);
                catalogMediaRelationShip.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogMediaRelationShip.sortOrder != sortOrder)
            {
                catalogMediaRelationShip.sortOrder = sortOrder;
                catalogMediaRelationShip.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Sets the MediaTerm Table information
        /// Used for Saving Keywords and AltnernateTitles
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="mediaId"></param>
        /// <param name="termTypeId"></param>
        /// <param name="term"></param>
        static public void SavePrimitiveMediaTerm(this RawCatalogDBEntities catalog, Media catalogMedia, Guid mediaId, int termTypeId, int lcid, string term)
        {
            MediaTerm catalogMediaTerm = catalog.MediaTerm.Where(mt => mt.mediaId == mediaId
                && mt.termTypeId == termTypeId 
                && mt.lcid == lcid
                && mt.term == term).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogMediaTerm == null)
            {
                catalogMediaTerm = new MediaTerm();
                catalogMediaTerm.TermType = GetPrimitiveTermTypeOrThrow(catalog, termTypeId);
                catalogMediaTerm.Media = catalogMedia;
                catalogMediaTerm.term = term;
                catalogMediaTerm.Locale = catalog.GetPrimitiveLocaleOrThrow(lcid);
                catalogMediaTerm.modifiedDate = DateTime.UtcNow;
            }
        }


        /// <summary>
        /// Save PreviewMediaInstance to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="previewMediaInstanceTypeId"></param>
        /// <param name="countryCode"></param>
        /// <param name="providerId"></param>
        /// <param name="externalLicenserContentId"></param>
        /// <param name="drmLicenseIssuerId"></param>
        /// <param name="mediaInstance"></param>
        static public void SavePrimitivePreviewMediaInstance(this RawCatalogDBEntities catalog, int previewMediaInstanceTypeId,
            string countryCode, int providerId, string externalLicenserContentId, int drmLicenseIssuerId, MediaInstance catalogMediaInstance)
        // NOTE: requiredUserTypeId, startDate and endDate input-columns never used for Video-Previews for Games...
        {
            PreviewMediaInstance catalogPreviewMediaInstance = catalog.PreviewMediaInstance.Where(pmi =>
                pmi.previewMediaInstanceId == catalogMediaInstance.mediaInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogPreviewMediaInstance == null)
            {
                catalogPreviewMediaInstance = new PreviewMediaInstance();
                catalogPreviewMediaInstance.MediaInstance = catalogMediaInstance;
                catalogPreviewMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogPreviewMediaInstance.PreviewMediaInstanceType == null && !catalogPreviewMediaInstance.PreviewMediaInstanceTypeReference.IsLoaded)
                {
                    catalogPreviewMediaInstance.PreviewMediaInstanceTypeReference.Load();
                }
                if (catalogPreviewMediaInstance.Country == null && !catalogPreviewMediaInstance.CountryReference.IsLoaded)
                {
                    catalogPreviewMediaInstance.CountryReference.Load();
                }
                if (catalogPreviewMediaInstance.Provider == null && !catalogPreviewMediaInstance.ProviderReference.IsLoaded)
                {
                    catalogPreviewMediaInstance.ProviderReference.Load();
                }
                if (catalogPreviewMediaInstance.DRMLicenseIssuer == null && !catalogPreviewMediaInstance.DRMLicenseIssuerReference.IsLoaded)
                {
                    catalogPreviewMediaInstance.DRMLicenseIssuerReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogPreviewMediaInstance.DRMLicenseIssuer == null || catalogPreviewMediaInstance.DRMLicenseIssuer.drmLicenseIssuerId != drmLicenseIssuerId)
            {
                catalogPreviewMediaInstance.DRMLicenseIssuer = GetPrimitiveDRMLicenseIssuerOrThrow(catalog, drmLicenseIssuerId);
                catalogPreviewMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogPreviewMediaInstance.PreviewMediaInstanceType == null || catalogPreviewMediaInstance.PreviewMediaInstanceType.previewMediaInstanceTypeId != previewMediaInstanceTypeId)
            {
                catalogPreviewMediaInstance.PreviewMediaInstanceType = GetPrimitivePreviewMediaInstanceTypeOrThrow(catalog, previewMediaInstanceTypeId);
                catalogPreviewMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogPreviewMediaInstance.Country == null || catalogPreviewMediaInstance.Country.countryCode != countryCode)
            {
                catalogPreviewMediaInstance.Country = GetPrimitiveCountryOrThrow(catalog, countryCode);
                catalogPreviewMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogPreviewMediaInstance.Provider == null || catalogPreviewMediaInstance.Provider.providerId != providerId)
            {
                catalogPreviewMediaInstance.Provider = GetPrimitiveProviderOrThrow(catalog, providerId);
                catalogPreviewMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogPreviewMediaInstance.externalLicenserContentId != externalLicenserContentId)
            {
                catalogPreviewMediaInstance.externalLicenserContentId = externalLicenserContentId;
                catalogPreviewMediaInstance.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save Offer via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="mixOfferId"></param>
        /// <param name="mixProductId"></param>
        /// <param name="mixName"></param>
        /// <returns></returns>
        static public Offer SavePrimitiveOffer(this RawCatalogDBEntities catalog, Guid mixOfferId, Guid mixProductId, string mixName,
            int offerTypeId, long mixLiveOfferId)
        {
            Offer catalogOffer = catalog.Offer.Where(o => o.offerId == mixOfferId).FirstOrDefault();
            LegacyOfferMapping catalogLegacyOfferMapping = null;

            // Create with PKs if necessary
            if (catalogOffer == null)
            {
                Media media = GetPrimitiveMediaOrThrow(catalog, mixProductId);

                // Load references from database if not written locally, and not already loaded
                if (media.MediaType == null && !media.MediaTypeReference.IsLoaded)
                {
                    media.MediaTypeReference.Load();
                }

                // Ensure there is a media revenue sku on non-bundle products/subscription products
                if ( media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.Bundle
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.LiveSubscription
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.GameSubscription
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.AddonSubscription)
                {
                    catalog.GetPrimitiveMediaRevenueSkuOrThrow(mixProductId);
                }

                catalogOffer = new Offer();
                catalogOffer.offerId = mixOfferId;
                catalogOffer.Media = media;
                catalogOffer.modifiedDate = DateTime.UtcNow;

                // Save legacy offer mapping for new offer
                catalogLegacyOfferMapping = catalog.SavePrimitiveLegacyOfferMapping(catalogOffer, mixOfferId, mixLiveOfferId);
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogOffer.Media == null && !catalogOffer.MediaReference.IsLoaded)
                {
                    catalogOffer.MediaReference.Load();
                }
                if (catalogOffer.OfferType == null && !catalogOffer.OfferTypeReference.IsLoaded)
                {
                    catalogOffer.OfferTypeReference.Load();
                }

                catalogLegacyOfferMapping = catalog.GetPrimitiveLegacyOfferMapping(mixOfferId);
            }

            // Don't allow media for an offer to be updated
            if (catalogOffer.Media.mediaId != mixProductId)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_NEW_MEDIA_FOR_EXISTING_OFFER,
                    String.Format("For offer {0}, cannot update media from {1} to {2}", mixOfferId, catalogOffer.Media.mediaId, mixProductId));
            }

            // Don't allow live offer id to be updated
            if (catalogLegacyOfferMapping != null && catalogLegacyOfferMapping.liveOfferId != mixLiveOfferId)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_NEW_LIVEOFFERID_FOR_EXISTING_OFFER,
                    String.Format("Cannot update legacy offer id mappings.  For offer {0}, existing value = {1}, new value = {2}", mixOfferId, catalogLegacyOfferMapping.liveOfferId, mixLiveOfferId));
            }

            // Apply updates if necessary
            if (catalogOffer.OfferType == null || catalogOffer.OfferType.offerTypeId != offerTypeId)
            {
                catalogOffer.OfferType = GetPrimitiveOfferTypeOrThrow(catalog, offerTypeId);
                catalogOffer.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOffer.name != mixName)
            {
                catalogOffer.name = mixName;
                catalogOffer.modifiedDate = DateTime.UtcNow;
            }

            return catalogOffer;
        }

        /// <summary>
        /// Save OfferInstance via catalog primitives
        /// NOTE: Reporting retail value, and reporting retail value currency code (Currency1) use price and currency code values
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOffer"></param>
        /// <param name="mixOfferId"></param>
        /// <param name="mixOfferInstanceId"></param>
        /// <param name="mixCountryCode"></param>
        /// <param name="mixPrice"></param>
        /// <param name="mixSuggestedRetailPrice"></param>
        /// <param name="mixWholeSalePrice"></param>
        /// <param name="mixPriceCurrencyCode"></param>
        /// <param name="mixPaymentTypeId"></param>
        /// <param name="mixStartDate"></param>
        /// <param name="mixEndDate"></param>
        /// <param name="mixVisibilityLevelId"></param>
        /// <param name="mixExternalOfferInstanceId"></param>
        /// <returns></returns>
        static public OfferInstance SavePrimitiveOfferInstance(this RawCatalogDBEntities catalog, Offer catalogOffer, Guid mixOfferId,
            Guid mixOfferInstanceId, string mixCountryCode, decimal mixPrice, decimal mixSuggestedRetailPrice, decimal mixWholeSalePrice, string mixPriceCurrencyCode, int mixPaymentTypeId,
            DateTime mixStartDate, DateTime mixEndDate, int mixVisibilityLevelId, string mixExternalOfferInstanceId)
        {

            OfferInstance catalogOfferInstance = catalog.OfferInstance.Where(oi => oi.offerInstanceId == mixOfferInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferInstance == null)
            {
                catalogOfferInstance = new OfferInstance();
                catalogOfferInstance.offerInstanceId = mixOfferInstanceId;
                catalogOfferInstance.Offer = catalogOffer;
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                if (catalogOfferInstance.Offer == null && !catalogOfferInstance.OfferReference.IsLoaded)
                {
                    catalogOfferInstance.OfferReference.Load();
                }

                // Check that offer id for existing offer instance is expected
                if (catalogOfferInstance.Offer.offerId != catalogOffer.offerId)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_NEW_OFFER_FOR_EXISTING_OFFERINSTANCE,
                        String.Format("For offer instance {0}, cannot update offer from {1} to {2}", mixOfferInstanceId, catalogOfferInstance.Offer.offerId, catalogOffer.offerId));
                }

                // Load references from database if not written locally, and not already loaded
                if (catalogOfferInstance.Country == null && !catalogOfferInstance.CountryReference.IsLoaded)
                {
                    catalogOfferInstance.CountryReference.Load();
                }
                if (catalogOfferInstance.Currency == null && !catalogOfferInstance.CurrencyReference.IsLoaded)
                {
                    catalogOfferInstance.CurrencyReference.Load();
                }
                if (catalogOfferInstance.Currency1 == null && !catalogOfferInstance.Currency1Reference.IsLoaded)
                {
                    catalogOfferInstance.Currency1Reference.Load();
                }
                if (catalogOfferInstance.PaymentType == null && !catalogOfferInstance.PaymentTypeReference.IsLoaded)
                {
                    catalogOfferInstance.PaymentTypeReference.Load();
                }
                if (catalogOfferInstance.PricingRule == null && !catalogOfferInstance.PricingRuleReference.IsLoaded)
                {
                    catalogOfferInstance.PricingRuleReference.Load();
                }
                if (catalogOfferInstance.VisibilityLevel == null && !catalogOfferInstance.VisibilityLevelReference.IsLoaded)
                {
                    catalogOfferInstance.VisibilityLevelReference.Load();
                }
            }




            // Apply updates if necessary
            if (catalogOfferInstance.Country == null || catalogOfferInstance.Country.countryCode != mixCountryCode)
            {
                catalogOfferInstance.Country = GetPrimitiveCountryOrThrow(catalog, mixCountryCode);
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstance.Currency == null || catalogOfferInstance.Currency.currencyCode != mixPriceCurrencyCode)
            {
                catalogOfferInstance.Currency = GetPrimitiveCurrencyOrThrow(catalog, mixPriceCurrencyCode);
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstance.Currency1 == null || catalogOfferInstance.Currency1.currencyCode != mixPriceCurrencyCode)
            {
                catalogOfferInstance.Currency1 = GetPrimitiveCurrencyOrThrow(catalog, mixPriceCurrencyCode);
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstance.PaymentType == null || catalogOfferInstance.PaymentType.paymentTypeId != mixPaymentTypeId)
            {
                catalogOfferInstance.PaymentType = GetPrimitivePaymentTypeOrThrow(catalog, mixPaymentTypeId);
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstance.PricingRule == null || catalogOfferInstance.PricingRule.pricingRuleId != CatalogConstants.OfferPricingRuleId)
            {
                catalogOfferInstance.PricingRule = GetPrimitivePricingRuleOrThrow(catalog, CatalogConstants.OfferPricingRuleId);
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstance.VisibilityLevel == null || catalogOfferInstance.VisibilityLevel.visibilityLevelId != mixVisibilityLevelId)
            {
                catalogOfferInstance.VisibilityLevel = GetPrimitiveVisibilityLevelOrThrow(catalog, mixVisibilityLevelId);
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstance.price != mixPrice
                || catalogOfferInstance.suggestedRetailPrice != mixSuggestedRetailPrice
                || catalogOfferInstance.wholesalePrice != mixWholeSalePrice
                || catalogOfferInstance.reportingRetailValue != mixPrice
                || catalogOfferInstance.startDateTime != mixStartDate
                || catalogOfferInstance.endDateTime != mixEndDate
                || catalogOfferInstance.externalOfferInstanceId != mixExternalOfferInstanceId)
            {
                catalogOfferInstance.price = mixPrice;
                catalogOfferInstance.suggestedRetailPrice = mixSuggestedRetailPrice;
                catalogOfferInstance.wholesalePrice = mixWholeSalePrice;
                catalogOfferInstance.reportingRetailValue = mixPrice;
                catalogOfferInstance.startDateTime = mixStartDate;
                catalogOfferInstance.endDateTime = mixEndDate;
                catalogOfferInstance.externalOfferInstanceId = mixExternalOfferInstanceId;
                catalogOfferInstance.modifiedDate = DateTime.UtcNow;
            }

            return catalogOfferInstance;
        }

        /// <summary>
        /// Save OfferInstanceGameContentInstance via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOfferInstance"></param>
        /// <param name="mixPackageId"></param>
        /// <param name="mixLicenseExtensionBits"></param>
        /// <returns></returns>
        static public OfferInstanceGameContentInstance SavePrimitiveOfferInstanceGameContentInstance(this RawCatalogDBEntities catalog, OfferInstance catalogOfferInstance,
            Guid mixPackageId, int mixLicenseExtensionBits)
        {
            OfferInstanceGameContentInstance catalogOfferInstanceGameContentInstance = catalog.OfferInstanceGameContentInstance.Where(oigci => oigci.offerInstanceId == catalogOfferInstance.offerInstanceId && oigci.gameContentInstanceId == mixPackageId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferInstanceGameContentInstance == null)
            {
                catalogOfferInstanceGameContentInstance = new OfferInstanceGameContentInstance();
                catalogOfferInstanceGameContentInstance.GameContentInstance = GetPrimitiveGameContentInstanceOrThrow(catalog, mixPackageId);
                catalogOfferInstanceGameContentInstance.OfferInstance = catalogOfferInstance;
                catalogOfferInstanceGameContentInstance.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogOfferInstanceGameContentInstance.licenseExtensionBits != mixLicenseExtensionBits)
            {
                catalogOfferInstanceGameContentInstance.licenseExtensionBits = mixLicenseExtensionBits;
                catalogOfferInstanceGameContentInstance.modifiedDate = DateTime.UtcNow;
            }

            return catalogOfferInstanceGameContentInstance;
        }

        /// <summary>
        /// Save OfferInstanceGameContentInstanceAsset via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOfferInstance"></param>
        /// <param name="catalogOfferInstanceGameContentInstance"></param>
        /// <param name="mixQuantity"></param>
        static public void SavePrimitiveOfferInstanceGameContentInstanceAsset(this RawCatalogDBEntities catalog,
            OfferInstance catalogOfferInstance, OfferInstanceGameContentInstance catalogOfferInstanceGameContentInstance, int mixQuantity)
        {
            if (catalogOfferInstanceGameContentInstance.GameContentInstance == null
                && !catalogOfferInstanceGameContentInstance.GameContentInstanceReference.IsLoaded)
            {
                catalogOfferInstanceGameContentInstance.GameContentInstanceReference.Load();
            }

            OfferInstanceGameContentInstanceAsset catalogOfferInstanceGameContentInstanceAsset =
                catalog.OfferInstanceGameContentInstanceAsset.Where(oigcia => oigcia.offerInstanceId == catalogOfferInstance.offerInstanceId
                    && oigcia.gameContentInstanceId == catalogOfferInstanceGameContentInstance.GameContentInstance.gameContentInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferInstanceGameContentInstanceAsset == null)
            {
                catalogOfferInstanceGameContentInstanceAsset = new OfferInstanceGameContentInstanceAsset();
                catalogOfferInstanceGameContentInstanceAsset.OfferInstance = catalogOfferInstance;
                catalogOfferInstanceGameContentInstanceAsset.GameContentInstance = catalogOfferInstanceGameContentInstance.GameContentInstance;
                catalogOfferInstanceGameContentInstanceAsset.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogOfferInstanceGameContentInstanceAsset.quantity != mixQuantity)
            {
                catalogOfferInstanceGameContentInstanceAsset.quantity = mixQuantity;
                catalogOfferInstanceGameContentInstance.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save OfferInstanceMedia via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOfferInstance"></param>
        /// <param name="mediaId"></param>
        /// <param name="mixLicenseTypeId"></param>
        /// <param name="mixProviderId"></param>
        /// <param name="mixVisibilityStatusId"></param>
        static public void SavePrimitiveOfferInstanceMedia(this RawCatalogDBEntities catalog, OfferInstance catalogOfferInstance, Guid mediaId,
            int mixLicenseTypeId, int mixProviderId, int mixVisibilityStatusId)
        {
            OfferInstanceMedia catalogOfferInstanceMedia = catalog.OfferInstanceMedia.Where(oimi => oimi.offerInstanceId == catalogOfferInstance.offerInstanceId && oimi.mediaId == mediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferInstanceMedia == null)
            {
                Media media = catalog.GetPrimitiveMediaOrThrow(mediaId);

                // Load references from database if not written locally, and not already loaded
                if (media.MediaType == null && !media.MediaTypeReference.IsLoaded)
                {
                    media.MediaTypeReference.Load();
                }

                // Ensure there is a media revenue sku on non-bundle products
                if ( media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.Bundle
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.LiveSubscription
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.GameSubscription
                    && media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.AddonSubscription)
                {
                    catalog.GetPrimitiveMediaRevenueSkuOrThrow(mediaId);
                }

                catalogOfferInstanceMedia = new OfferInstanceMedia();
                catalogOfferInstanceMedia.OfferInstance = catalogOfferInstance;
                catalogOfferInstanceMedia.Media = media;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogOfferInstanceMedia.LicenseType == null && !catalogOfferInstanceMedia.LicenseTypeReference.IsLoaded)
                {
                    catalogOfferInstanceMedia.LicenseTypeReference.Load();
                }
                if (catalogOfferInstanceMedia.Provider == null && !catalogOfferInstanceMedia.ProviderReference.IsLoaded)
                {
                    catalogOfferInstanceMedia.ProviderReference.Load();
                }
                if (catalogOfferInstanceMedia.VisibilityStatus == null && !catalogOfferInstanceMedia.VisibilityStatusReference.IsLoaded)
                {
                    catalogOfferInstanceMedia.VisibilityStatusReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogOfferInstanceMedia.LicenseType == null || catalogOfferInstanceMedia.LicenseType.licenseTypeId != mixLicenseTypeId)
            {
                catalogOfferInstanceMedia.LicenseType = GetPrimitiveLicenseTypeOrThrow(catalog, mixLicenseTypeId);
                catalogOfferInstanceMedia.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstanceMedia.Provider == null || catalogOfferInstanceMedia.Provider.providerId != mixProviderId)
            {
                catalogOfferInstanceMedia.Provider = GetPrimitiveProviderOrThrow(catalog, mixProviderId);
                catalogOfferInstanceMedia.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstanceMedia.VisibilityStatus == null || catalogOfferInstanceMedia.VisibilityStatus.visibilityStatusId != mixVisibilityStatusId)
            {
                TableOperationUtility.ValidateVisibilityStatus(mixVisibilityStatusId);
                catalogOfferInstanceMedia.VisibilityStatus = GetPrimitiveVisibilityStatusOrThrow(catalog, mixVisibilityStatusId);
                catalogOfferInstanceMedia.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save OfferInstanceMediaInstance via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOfferInstance"></param>
        /// <param name="mixPackageId"></param>
        /// <param name="mixLicenseTypeId"></param>
        /// <param name="mixProviderId"></param>
        /// <param name="mixVisibilityStatusId"></param>
        static public void SavePrimitiveOfferInstanceMediaInstance(this RawCatalogDBEntities catalog, OfferInstance catalogOfferInstance,
            Guid mixPackageId, int mixLicenseTypeId, int mixProviderId, int mixVisibilityStatusId)
        {
            OfferInstanceMediaInstance catalogOfferInstanceMediaInstance = catalog.OfferInstanceMediaInstance.Where(oimi =>
                oimi.offerInstanceId == catalogOfferInstance.offerInstanceId && oimi.mediaInstanceId == mixPackageId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferInstanceMediaInstance == null)
            {
                MediaInstance catalogMediaInstance = catalog.GetPrimitiveMediaInstanceOrThrow(mixPackageId);

                // Removing Validation for August XSR because MediaInstances may be pointing 
                // to the wrong Media since MediaInstances can be shared between different Media
                // Validation will be put back in when schema changes to the OIMI table for PS 132876 are put in place  

                //// Load references from database if not written locally, and not already loaded
                //if (catalogMediaInstance.Media == null && !catalogMediaInstance.MediaReference.IsLoaded)
                //{
                //    catalogMediaInstance.MediaReference.Load();
                //}

                //// Load references from database if not written locally, and not already loaded
                //if (catalogMediaInstance.Media.MediaType == null && !catalogMediaInstance.Media.MediaTypeReference.IsLoaded)
                //{
                //    catalogMediaInstance.Media.MediaTypeReference.Load();
                //}

                //// Ensure there is a media revenue sku on non-bundle products
                //if (catalogMediaInstance.Media.MediaType.mediaTypeId != (int)CatalogConstants.MediaTypeEnum.Bundle)
                //{
                //    catalog.GetPrimitiveMediaRevenueSkuOrThrow(catalogMediaInstance.Media.mediaId);
                //}

                catalogOfferInstanceMediaInstance = new OfferInstanceMediaInstance();
                catalogOfferInstanceMediaInstance.OfferInstance = catalogOfferInstance;
                catalogOfferInstanceMediaInstance.MediaInstance = catalogMediaInstance;
                catalogOfferInstanceMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogOfferInstanceMediaInstance.LicenseType == null && !catalogOfferInstanceMediaInstance.LicenseTypeReference.IsLoaded)
                {
                    catalogOfferInstanceMediaInstance.LicenseTypeReference.Load();
                }
                if (catalogOfferInstanceMediaInstance.Provider == null && !catalogOfferInstanceMediaInstance.ProviderReference.IsLoaded)
                {
                    catalogOfferInstanceMediaInstance.ProviderReference.Load();
                }
                if (catalogOfferInstanceMediaInstance.VisibilityStatus == null && !catalogOfferInstanceMediaInstance.VisibilityStatusReference.IsLoaded)
                {
                    catalogOfferInstanceMediaInstance.VisibilityStatusReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogOfferInstanceMediaInstance.LicenseType == null || catalogOfferInstanceMediaInstance.LicenseType.licenseTypeId != mixLicenseTypeId)
            {
                catalogOfferInstanceMediaInstance.LicenseType = GetPrimitiveLicenseTypeOrThrow(catalog, mixLicenseTypeId);
                catalogOfferInstanceMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstanceMediaInstance.Provider == null || catalogOfferInstanceMediaInstance.Provider.providerId != mixProviderId)
            {
                catalogOfferInstanceMediaInstance.Provider = GetPrimitiveProviderOrThrow(catalog, mixProviderId);
                catalogOfferInstanceMediaInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogOfferInstanceMediaInstance.VisibilityStatus == null || catalogOfferInstanceMediaInstance.VisibilityStatus.visibilityStatusId != mixVisibilityStatusId)
            {
                TableOperationUtility.ValidateVisibilityStatus(mixVisibilityStatusId);
                catalogOfferInstanceMediaInstance.VisibilityStatus = GetPrimitiveVisibilityStatusOrThrow(catalog, mixVisibilityStatusId);
                catalogOfferInstanceMediaInstance.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save OfferInstanceUserType via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOfferInstance"></param>
        /// <param name="mixUserTypeId"></param>
        static public void SavePrimitiveOfferInstanceUserType(this RawCatalogDBEntities catalog, OfferInstance catalogOfferInstance, int mixUserTypeId)
        {
            OfferInstanceUserType catalogOfferInstanceUserType = catalog.OfferInstanceUserType.Where(oiut =>
                oiut.offerInstanceId == catalogOfferInstance.offerInstanceId && oiut.userTypeId == mixUserTypeId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferInstanceUserType == null)
            {
                catalogOfferInstanceUserType = new OfferInstanceUserType();
                catalogOfferInstanceUserType.OfferInstance = catalogOfferInstance;
                catalogOfferInstanceUserType.UserType = GetPrimitiveUserTypeOrThrow(catalog, mixUserTypeId);
                catalogOfferInstanceUserType.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save OfferStore via catalog primitives
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOffer"></param>
        /// <param name="mixStoreId"></param>
        static public void SavePrimitiveOfferStore(this RawCatalogDBEntities catalog, Offer catalogOffer, int mixStoreId)
        {
            OfferStore catalogOfferStore = catalog.OfferStore.Where(os => os.offerId == catalogOffer.offerId
                && os.storeId == mixStoreId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogOfferStore == null)
            {
                catalogOfferStore = new OfferStore();
                catalogOfferStore.Offer = catalogOffer;
                catalogOfferStore.Store = GetPrimitiveStoreOrThrow(catalog, mixStoreId);
                catalogOfferStore.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the Points bundle data into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="pointsBundleMediaId"></param>
        /// <param name="titleId"></param>
        /// <param name="catalogMedia"></param>
        static public void SavePrimitivePointsBundle(this RawCatalogDBEntities catalog, Guid pointsBundleMediaId,
            int points, Media catalogMedia)
        {
            PointsBundle catalogPointsBundle = catalog.PointsBundle.Where(pointsBundle =>
                pointsBundle.pointsBundleId == pointsBundleMediaId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogPointsBundle == null)
            {
                catalogPointsBundle = new PointsBundle();
                catalogPointsBundle.Media = catalogMedia;
                catalogPointsBundle.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogPointsBundle.points != points)
            {
                catalogPointsBundle.points = points;
                catalogPointsBundle.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the Points bundle data into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="pointsBundleMediaId"></param>
        /// <param name="titleId"></param>
        /// <param name="catalogMedia"></param>
        static public void SavePrimitiveSubscriptionFamilyBase(this RawCatalogDBEntities catalog, Guid subscriptionFamilyId,
            Media catalogMedia, string name, int[] services,int titleId, out SubscriptionFamily catalogSubscriptionFamily)
        {
            catalogSubscriptionFamily = catalog.SubscriptionFamily.Where(subscriptionFamily =>
                subscriptionFamily.subscriptionFamilyId == subscriptionFamilyId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogSubscriptionFamily == null)
            {
                catalogSubscriptionFamily = new SubscriptionFamily();
                catalogSubscriptionFamily.Media = catalogMedia;
                catalogSubscriptionFamily.modifiedDate = DateTime.UtcNow;
                catalogSubscriptionFamily.titleId = titleId;
            }

            // Apply updates if necessary
            if (catalogSubscriptionFamily.internalName != name)
            {
                catalogSubscriptionFamily.internalName = name;
                catalogSubscriptionFamily.modifiedDate = DateTime.UtcNow;
                catalogSubscriptionFamily.titleId = (int)titleId;
            }

            // Insert the services
            if (services != null)
            {
                foreach (int serviceId in services)
                {
                    SavePrimitiveSubscriptionFamilyService(catalog, subscriptionFamilyId, serviceId, catalogMedia, catalogSubscriptionFamily);
                }
            }

            // Deletes the services
            DeletePrimitiveSubscriptionFamilyServices(catalog, subscriptionFamilyId, services);
        }

        /// <summary>
        /// Saves the Primitive Subscription Family Service
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="subscriptionFamilyId"></param>
        /// <param name="serviceId"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="catalogSubscriptionFamily"></param>
        static public void SavePrimitiveSubscriptionFamilyService(this RawCatalogDBEntities catalog, Guid subscriptionFamilyId,
            int serviceId, Media catalogMedia, SubscriptionFamily catalogSubscriptionFamily)
        {
            SubscriptionFamilyService catalogSubScriptionFamilyService = catalog.SubscriptionFamilyService.Where(sfs =>
                sfs.subscriptionFamilyId == subscriptionFamilyId && sfs.Service.serviceId == serviceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogSubScriptionFamilyService == null)
            {
                catalogSubScriptionFamilyService = new SubscriptionFamilyService();
                catalogSubScriptionFamilyService.Service = GetPrimitiveServiceOrThrow(catalog, serviceId);
                catalogSubScriptionFamilyService.SubscriptionFamily = catalogSubscriptionFamily;
                catalogSubScriptionFamilyService.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the Points bundle data into Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="tierId"></param>
        /// <param name="catalogSubscriptionFamily"></param>
        static public void SavePrimitiveLiveSubscriptionFamily(this RawCatalogDBEntities catalog, Media catalogMedia,
            int tierId, SubscriptionFamily catalogSubscriptionFamily)
        {
            LiveSubscriptionFamily catalogLiveSubscriptionFamily = catalog.LiveSubscriptionFamily.Where(liveSubscriptionFamily =>
                liveSubscriptionFamily.subscriptionFamilyId == catalogSubscriptionFamily.subscriptionFamilyId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogLiveSubscriptionFamily == null)
            {
                catalogLiveSubscriptionFamily = new LiveSubscriptionFamily();
                catalogLiveSubscriptionFamily.SubscriptionFamily = catalogSubscriptionFamily;
                catalogLiveSubscriptionFamily.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogLiveSubscriptionFamily.Tier == null && !catalogLiveSubscriptionFamily.TierReference.IsLoaded)
                {
                    catalogLiveSubscriptionFamily.TierReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogLiveSubscriptionFamily.Tier == null || catalogLiveSubscriptionFamily.Tier.tierId != tierId)
            {
                catalogLiveSubscriptionFamily.Tier = GetPrimitiveTierOrThrow(catalog, tierId);
                catalogLiveSubscriptionFamily.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the primitive subscription
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="liveSubscriptionId"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="name"></param>
        /// <param name="billingFrequencyId"></param>
        /// <param name="subscriptionDuration"></param>
        /// <param name="subscriptionDurationTypeId"></param>
        /// <param name="sellTypeId"></param>
        /// <param name="isCancelable"></param>
        /// <param name="subscriptionFamilyId"></param>
        /// <param name="billingServiceComponentId"></param>
        static public void SavePrimitiveSubscription(this RawCatalogDBEntities catalog, Guid subscriptionId, Media catalogMedia,
            string name, int billingFrequencyId, int? subscriptionDuration, int subscriptionDurationTypeId, int sellTypeId,
            int isCancelable, Guid subscriptionFamilyId, string billingServiceComponentId)
        {
            Subscription catalogSubscription = catalog.Subscription.Where(s => s.subscriptionId == subscriptionId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogSubscription == null)
            {
                catalogSubscription = new Subscription();

                catalogSubscription.Media = catalogMedia;
                catalogSubscription.modifiedDate = DateTime.UtcNow;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogSubscription.BillingFrequency == null && !catalogSubscription.BillingFrequencyReference.IsLoaded)
                {
                    catalogSubscription.BillingFrequencyReference.Load();
                }
                if (catalogSubscription.DurationType == null && !catalogSubscription.DurationTypeReference.IsLoaded)
                {
                    catalogSubscription.DurationTypeReference.Load();
                }
                if (catalogSubscription.SellType == null && !catalogSubscription.SellTypeReference.IsLoaded)
                {
                    catalogSubscription.SellTypeReference.Load();
                }
                if (catalogSubscription.SubscriptionFamily == null && !catalogSubscription.SubscriptionFamilyReference.IsLoaded)
                {
                    catalogSubscription.SubscriptionFamilyReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogSubscription.BillingFrequency == null || catalogSubscription.BillingFrequency.billingFrequencyId != billingFrequencyId)
            {
                catalogSubscription.BillingFrequency = GetPrimitiveBillingFrequencyOrThrow(catalog, billingFrequencyId);
                catalogSubscription.modifiedDate = DateTime.UtcNow;
            }
            if (catalogSubscription.DurationType == null || catalogSubscription.DurationType.durationTypeId != subscriptionDurationTypeId)
            {
                catalogSubscription.DurationType = GetPrimitiveDurationTypeOrThrow(catalog, subscriptionDurationTypeId);
                catalogSubscription.modifiedDate = DateTime.UtcNow;
            }
            if (catalogSubscription.SellType == null || catalogSubscription.SellType.sellTypeId != sellTypeId)
            {
                catalogSubscription.SellType = GetPrimitiveSellTypeOrThrow(catalog, sellTypeId);
                catalogSubscription.modifiedDate = DateTime.UtcNow;
            }
            if (catalogSubscription.SubscriptionFamily == null || catalogSubscription.SubscriptionFamily.subscriptionFamilyId != subscriptionFamilyId)
            {
                catalogSubscription.SubscriptionFamily = GetPrimitiveSubscriptionFamilyOrThrow(catalog, subscriptionFamilyId);
                catalogSubscription.modifiedDate = DateTime.UtcNow;
            }
            if (catalogSubscription.internalName != name
                || catalogSubscription.isCancelable != isCancelable
                || catalogSubscription.subscriptionDuration != subscriptionDuration)
            {
                catalogSubscription.internalName = name;
                catalogSubscription.isCancelable = isCancelable;
                catalogSubscription.subscriptionDuration = subscriptionDuration;
                catalogSubscription.modifiedDate = DateTime.UtcNow;
            }

            // Save the billing service component Id
            Guid? billingSvcComponentId = null;
            if (!string.IsNullOrEmpty(billingServiceComponentId))
            {
                billingSvcComponentId = new Guid(billingServiceComponentId);
            }

            SavePrimitiveSubscriptionBilling(catalog, catalogMedia, billingSvcComponentId, catalogSubscription);
        }

        /// <summary>
        /// Save the subscription billing Information
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMedia"></param>
        /// <param name="billingServiceComponentId"></param>
        /// <param name="catalogSubscription"></param>
        static public void SavePrimitiveSubscriptionBilling(this RawCatalogDBEntities catalog, Media catalogMedia, Guid? billingServiceComponentId,
            Subscription catalogSubscription)
        {
            SubscriptionBillingInformation catalogSubscriptionBillingInformation = catalog.SubscriptionBillingInformation.Where(sbi =>
                sbi.subscriptionId == catalogSubscription.subscriptionId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogSubscriptionBillingInformation == null)
            {
                catalogSubscriptionBillingInformation = new SubscriptionBillingInformation();
                catalogSubscriptionBillingInformation.Subscription = catalogSubscription;
                catalogSubscriptionBillingInformation.modifiedDate = DateTime.UtcNow;
            }

            // Apply updates if necessary
            if (catalogSubscriptionBillingInformation.billingsvcComponentId.HasValue && billingServiceComponentId.HasValue)
            {
                if (catalogSubscriptionBillingInformation.billingsvcComponentId.Value != billingServiceComponentId.Value)
                {
                    catalogSubscriptionBillingInformation.billingsvcComponentId = billingServiceComponentId;
                    catalogSubscriptionBillingInformation.modifiedDate = DateTime.UtcNow;
                }
            }
            else if (!catalogSubscriptionBillingInformation.billingsvcComponentId.HasValue && !billingServiceComponentId.HasValue)
            {
                return;
            }
            else
            {
                catalogSubscriptionBillingInformation.billingsvcComponentId = billingServiceComponentId;
                catalogSubscriptionBillingInformation.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Saves the VideoInstance Information into Database
        /// NOTE: audioChannel, audioSamplingRate, audioCC, burntInSubtitleLcid, audioBitRate, videoFrame and [enabled] 
        /// input-columns never used for Video-Previews for Games...
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogMediaInstance"></param>
        /// <param name="isDRM"></param>
        /// <param name="audioEncodingId"></param>
        /// <param name="videoDefinitionId"></param>
        /// <param name="videoAspectRatio"></param>
        /// <param name="videoResolution"></param>
        /// <param name="videoEncodingId"></param>
        /// <param name="videoBitRate"></param>
        /// <param name="catalogVideoInstance"></param>
        static public void SavePrimitiveVideoInstance(this RawCatalogDBEntities catalog, MediaInstance catalogMediaInstance, byte isDRM,
            int audioEncodingId, int videoDefinitionId, string videoAspectRatio, string videoResolution, int videoEncodingId,
            int videoBitRate, out VideoInstance catalogVideoInstance)
        {
            catalogVideoInstance = catalog.VideoInstance.Where(vi =>
                vi.videoMediaInstanceId == catalogMediaInstance.mediaInstanceId).FirstOrDefault();

            // Create with PKs if necessary
            if (catalogVideoInstance == null)
            {
                catalogVideoInstance = new VideoInstance();
                catalogVideoInstance.MediaInstance = catalogMediaInstance;
            }
            else
            {
                // Load references from database if not written locally, and not already loaded
                if (catalogVideoInstance.AudioEncoding == null && !catalogVideoInstance.AudioEncodingReference.IsLoaded)
                {
                    catalogVideoInstance.AudioEncodingReference.Load();
                }
                if (catalogVideoInstance.VideoDefinition == null && !catalogVideoInstance.VideoDefinitionReference.IsLoaded)
                {
                    catalogVideoInstance.VideoDefinitionReference.Load();
                }
                if (catalogVideoInstance.VideoEncoding == null && !catalogVideoInstance.VideoEncodingReference.IsLoaded)
                {
                    catalogVideoInstance.VideoEncodingReference.Load();
                }
            }

            // Apply updates if necessary
            if (catalogVideoInstance.AudioEncoding == null || catalogVideoInstance.AudioEncoding.audioEncodingId != audioEncodingId)
            {
                catalogVideoInstance.AudioEncoding = GetPrimitiveAudioEncodingOrThrow(catalog, audioEncodingId);
                catalogVideoInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogVideoInstance.VideoDefinition == null || catalogVideoInstance.VideoDefinition.videoDefinitionId != videoDefinitionId)
            {
                catalogVideoInstance.VideoDefinition = GetPrimitiveVideoDefinitionOrThrow(catalog, videoDefinitionId);
                catalogVideoInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogVideoInstance.VideoEncoding == null || catalogVideoInstance.VideoEncoding.videoEncodingId != videoEncodingId)
            {
                catalogVideoInstance.VideoEncoding = GetPrimitiveVideoEncodingOrThrow(catalog, videoEncodingId);
                catalogVideoInstance.modifiedDate = DateTime.UtcNow;
            }
            if (catalogVideoInstance.isDRM != isDRM
                || catalogVideoInstance.videoAspectRatio != videoAspectRatio
                || catalogVideoInstance.videoBitRate != videoBitRate
                || catalogVideoInstance.videoResolution != videoResolution)
            {
                catalogVideoInstance.isDRM = isDRM;
                catalogVideoInstance.videoAspectRatio = videoAspectRatio;
                catalogVideoInstance.videoBitRate = videoBitRate;
                catalogVideoInstance.videoResolution = videoResolution;
                catalogVideoInstance.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save VideoFile to Database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="videoInstance"></param>
        /// <param name="fileUrl"></param>
        /// <param name="size"></param>
        /// <param name="fileIndex"></param>
        static public void SavePrimitiveVideoFile(this RawCatalogDBEntities catalog, VideoInstance catalogVideoInstance, string fileUrl,
            int size, int fileIndex)
        // NOTE: durationSecs input-column never used for Video-Previews for Games...
        {
            VideoFile catalogVideoFile = null;
            VideoFile[] catalogVideoFiles = catalog.VideoFile.Where(vf =>
                vf.VideoInstance.videoMediaInstanceId == catalogVideoInstance.videoMediaInstanceId).ToArray();

            // Keep 1st VideoFile, if found
            if (catalogVideoFiles != null)
            {
                if (catalogVideoFiles.Length > 0)
                {
                    catalogVideoFile = catalogVideoFiles[0];

                    // NOTE: Delete any extra VideoFiles, since only 1 videoFile allowed for Video Previews for Games, 
                    for (int i = 1; i < catalogVideoFiles.Length; i++)
                    {
                        catalog.DeleteObject(catalogVideoFiles[i]);
                    }
                }
            }

            // Create with PKs if necessary
            if (catalogVideoFile == null)
            {
                catalogVideoFile = new VideoFile();
                catalogVideoFile.VideoInstance = catalogVideoInstance;
                catalogVideoFile.modifiedDate = DateTime.UtcNow;

                // NOTE: only 1 videoFile allowed for Video Previews for Games, 
                // which is only scenario supported by MIX, so code acts as if columns are extention of single VideoInstance record
                catalogVideoFile.videoFileid = Guid.NewGuid();
            }

            // Apply updates if necessary
            if (catalogVideoFile.fileUrl != fileUrl
                || catalogVideoFile.size != size
                || catalogVideoFile.fileIndex != fileIndex)
            {
                catalogVideoFile.fileUrl = fileUrl;
                catalogVideoFile.size = size;
                catalogVideoFile.fileIndex = fileIndex;
                catalogVideoFile.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Save MediaRevenueSku to database
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="revenueSku"></param>
        /// <param name="catalogMedia"></param>
        static public void SavePrimitiveMediaRevenueSku(this RawCatalogDBEntities catalog, string revenueSku, Media catalogMedia)
        {
            MediaRevenueSku mediaRevenueSku = catalog.MediaRevenueSku.Where(mrs => mrs.mediaId == catalogMedia.mediaId).FirstOrDefault();

            if (revenueSku != null)
            {
                // Create with PKs if necessary
                if (mediaRevenueSku == null)
                {
                    mediaRevenueSku = new MediaRevenueSku();
                    mediaRevenueSku.Media = catalogMedia;
                    mediaRevenueSku.modifiedDate = DateTime.UtcNow;
                }

                // Apply updates if necessary
                if (mediaRevenueSku.revenueSku != revenueSku)
                {
                    mediaRevenueSku.revenueSku = revenueSku;
                    mediaRevenueSku.modifiedDate = DateTime.UtcNow;
                }
            }
            else if (mediaRevenueSku != null)
            {
                // Only delete sku if it's not referenced by an offer

                // Check Offer -> Media
                int existingOffers = catalog.Offer.Where(o => o.Media.mediaId == catalogMedia.mediaId).Count();
                if (existingOffers > 0)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_SKU_DELETE,
                        String.Format("Cannot delete Sku for Product {0}, {1} Offers are related", catalogMedia.mediaId, existingOffers), false);
                }

                // Check Offer <- OfferInstance <- OfferInstanceMedia -> Media
                int existingOfferInstanceMedias = (from m in catalog.Media
                                                   join oim in catalog.OfferInstanceMedia on m.mediaId equals oim.mediaId
                                                   where m.mediaId == catalogMedia.mediaId
                                                   select new { m.mediaId }).Distinct().Count();
                if (existingOfferInstanceMedias > 0)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_SKU_DELETE,
                        String.Format("Cannot delete Sku for Product {0}, {1} OfferProducts are related", catalogMedia.mediaId, existingOfferInstanceMedias), false);
                }

                // Check Offer <- OfferInstance <- OfferInstanceMediaInstance -> MediaInstance -> Media
                int existingOfferInstanceMediaInstances = (from m in catalog.Media
                                                           join mi in catalog.MediaInstance on m.mediaId equals mi.Media.mediaId
                                                           join oimi in catalog.OfferInstanceMediaInstance on mi.mediaInstanceId equals oimi.mediaInstanceId
                                                           where m.mediaId == catalogMedia.mediaId
                                                           select new { m.mediaId }).Distinct().Count();
                if (existingOfferInstanceMediaInstances > 0)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_SKU_DELETE,
                        String.Format("Cannot delete Sku for Product {0}, {1} OffePackages are related", catalogMedia.mediaId, existingOfferInstanceMediaInstances), false);
                }

                catalog.DeleteObject(mediaRevenueSku);
            }
        }

        /// <summary>
        /// Saves the Primitive OfferRelationShip
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="RelatedOfferId"></param>
        /// <param name="OfferRelationShipType"></param>
        static public void SavePrimitiveOfferRelationShip(this RawCatalogDBEntities catalog, Guid catalogRelatedOfferId,
            int catalogOfferRelationShipTypeId, Offer catalogOffer)
        {
            OfferRelationShip offerRelationShip = catalog.OfferRelationShip.Where(ors =>
                ors.offerId == catalogOffer.offerId
                && ors.relatedOfferId == catalogRelatedOfferId
                && ors.relationshipTypeId == catalogOfferRelationShipTypeId).FirstOrDefault();

            if (offerRelationShip == null)
            {
                offerRelationShip = new OfferRelationShip();
                offerRelationShip.Offer = catalogOffer;
                offerRelationShip.Offer1 = GetPrimitiveOfferOrThrow(catalog, catalogRelatedOfferId);
                offerRelationShip.OfferRelationShipType = GetPrimitiveOfferRelationshipTypeOrThrow(catalog, catalogOfferRelationShipTypeId);
                offerRelationShip.modifiedDate = DateTime.UtcNow;
            }
        }

        /// <summary>
        /// Deletes the primitive offer relationships
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="catalogOfferId"></param>
        /// <param name="catalogRelatedOfferId"></param>
        /// <param name="relationShipTypeId"></param>
        static public void DeletePrimitiveOfferRelationShips(this RawCatalogDBEntities catalog, Guid catalogOfferId,
            int relationShipTypeId, Guid[] relatedOfferIdstoKeep)
        {
            IEnumerable<OfferRelationShip> offerRelationShips = catalog.OfferRelationShip.Where(or => (or.Offer.offerId == catalogOfferId)
                && (or.OfferRelationShipType.offerRelationShipTypeId == relationShipTypeId));

            foreach (OfferRelationShip offerRelationShip in offerRelationShips)
            {
                if (relatedOfferIdstoKeep == null || !relatedOfferIdstoKeep.Contains(offerRelationShip.relatedOfferId))
                {
                    catalog.DeleteObject(offerRelationShip);
                }
            }
        }
        #endregion
    }

    /// <summary>
    /// Static class for utility operations
    /// </summary>
    public class TableOperationUtility
    {
        /// <summary>
        /// Generic array comparison for struct types
        /// </summary>
        /// <typeparam name="T"></typeparam>
        /// <param name="a"></param>
        /// <param name="b"></param>
        /// <returns></returns>
        public static bool ValueCompare<T>(T[] a, T[] b) where T : struct
        {
            if (a == null && b == null)
            {
                return true;
            }
            else if (a == null || b == null)
            {
                return false;
            }
            else
            {
                if (a.Length != b.Length)
                    return false;
                EqualityComparer<T> q = EqualityComparer<T>.Default;
                for (int i = 0; i < a.Length; i++)
                    if (!q.Equals(a[i], b[i]))
                        return false;
                return true;
            }
        }

        /// <summary>
        /// Validates visibility status to allowed values through MIX
        /// </summary>
        /// <param name="visibilityStatusId"></param>
        /// <throws>XRLException if the value is not allowed</throws>
        public static void ValidateVisibilityStatus(int visibilityStatusId)
        {
            if (visibilityStatusId != (int)CatalogConstants.VisibilityStatus.Live && visibilityStatusId != (int)CatalogConstants.VisibilityStatus.Deleted)
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_INVALID_VISIBILITY_STATUS, String.Format("Invalid visibility status {0} given, only 3 (Live) or 5 (Deleted) allowed", visibilityStatusId));

        }

        /// <summary>
        /// Validates AttributeV1.AttributeUnitType of AttributeV1.Value through MIX
        /// </summary>
        /// <param name="catalog"></param>
        /// <param name="value"></param>
        /// <param name="capabilityTypeId"></param>
        /// <throws>XRLException if the value is not allowed</throws>
        public static void ValidateAttributeValueDataType(RawCatalogDBEntities catalog, string value, int capabilityTypeId)
        {
            CapabilityType ct = catalog.GetPrimitiveCapabilityTypeOrThrow(capabilityTypeId);

            if (ct.DataType == null && !ct.DataTypeReference.IsLoaded)
            {
                ct.DataTypeReference.Load();
                
            }

            try
            {
                switch(ct.DataType.dataTypeId)
                {
                    case (int)CatalogConstants.DataType.Boolean:
                        Boolean.Parse(value);
                        break;
                    case (int)CatalogConstants.DataType.Int32:
                        Int32.Parse(value);
                        break;
                    case (int)CatalogConstants.DataType.Int64:
                        Int64.Parse(value);
                        break;
                    case (int)CatalogConstants.DataType.Double:
                        Double.Parse(value);
                        break;
                }
            }
            catch (ArgumentNullException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_ARGUMENT_NULL_INTERNAL, ex,
                    String.Format("Could not parse null value for product attribute {0}", ct.internalName), false);
            }
            catch (FormatException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Format exception for product attribute {0} value {1}", ct.internalName, value), false);
            }
            catch (OverflowException ex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MIX_GAMEATTRIBUTE_INVALID_PROPERTY_VALUE, ex,
                    String.Format("Overflow exception for product attribute {0} value {1}", ct.internalName, value), false);
            }
        }

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseExecute.cs ===
// FseExecute.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Text;
using System.Web;

using xonline.common.mgmt;
using xonline.common.service;

[assembly: XomAreaDefinition(XomAreaName.fseTrace)]
[assembly: XomAreaDefinition(XomAreaName.fseLog)]

namespace xonline.common.fse
{
    public partial class FseService
    {
        private static readonly string emptyGuid = string.Intern(Guid.Empty.ToString());

        public FseResponse Execute(FseRequest request)
        {
            HResult hr = HResult.S_OK;
            string methodName = request.MethodName;

            using (FseContext context = new FseContext(methodName, Xom.GetAreaByName(XomAreaName.fseTrace)))
            {
                try
                {
                    FseMethod method = Find(methodName);
                    context.InitInstanceCounters(methodName);
                    FseResponse response = method.Execute(request);

                    Xom.Trace(XomAreaName.fseTrace, LogLevel.L_LOW, methodName + ": completed successfully");

                    hr = context.HResult = response.HResult;
                    context.CheckCached(methodName, hr);

                    return response;
                }
                catch (FastFailException)
                {
                    hr = HResult.XONLINE_E_RESOURCE_UNAVAILABLE;
                    Xom.Trace(XomAreaName.fseTrace, LogLevel.L_HIGH, methodName + " is in fast fail");
                    throw;
                }

                catch (FseException fe)
                {
                    Xom.Trace(XomAreaName.fseTrace, LogLevel.L_HIGH, methodName + ": failed to complete successfully");
                    hr = context.HResult = fe.HResult;
                    throw;
                }

                catch (Exception e)
                {
                    Xom.Trace(XomAreaName.fseTrace, LogLevel.L_HIGH, methodName + ": failed to complete successfully");

                    if (e is ExceptionWithHResult)
                        hr = ((ExceptionWithHResult)e).HResult;
                    else
                    {
                        hr = HResult.XONLINE_E_FSE_ERROR;
                    }

                    context.HResult = hr;

                    // user errors are flagged as being without an event
                    // that is they must not generate an event,  rethrow

                    if (e is ExceptionWithoutEvent)
                        throw;
                    else
                    {
                        XEvent.Id eventId;

                        if (e is ExceptionWithEvent)
                            eventId = ((ExceptionWithEvent)e).EventId;
                        else
                        {
                            eventId = XEvent.Id.COMMON_FSE_UNHANDLED_ERROR;
                        }

                        // applications should wrap exceptions,  but just
                        // in case, we give them one with a  built in  id

                        throw new UnhandledException(
                            hr, eventId, string.Format("Error executing method '{0}'", methodName), e
                        );
                    }
                }

                finally {

                    // this code so does not belong here, it belongs in
                    // the application,  not in internal  library  code
                    // that said we only log stuff coming off  the  web

                    if (HttpContext.Current != null)
                    {
                        SGInfo sg;
                        AAInfo aa;
                        string ip1  = "0.0.0.0";
                        string ip2  = "0.0.0.0";
                        ulong  id1  = 0;
                        ulong  id2  = 0;
                        bool   isAA = true;

                        if (AAInfo.IsActiveAuthAvailable)
                        {
                            aa = AAInfo.Current;
                            ip1 = aa.IpAddressInternet.ToString();
                            ip2 = aa.OriginatingIP.ToString();
                            id1 = aa.PassportPuid;
                            id2 = aa.LiveXuidFromXCache;
                        }
                        else if ((sg = SGInfo.Current) != null)
                        {
                            ip1 = sg.ClientIP.ToString();
                            ip2 = "0.0.0.0"; //sg._srcIP.ToString();
                            id1 = sg.MachineId;
                            id2 = (ulong) request.HashValue;
                            isAA = false;
                        }

                        StringBuilder stringBuilder = new StringBuilder();

                        // MaketplaceCatalog API has a different URL format for logging
                        if (FseContext.AppName.ToLower() == "marketplacecatalog")
                        {
                            int numberOfItemsRequired = 2;

                            stringBuilder.Append(
                                string.Join("|", new string[] {
                                FseContext.AppName, methodName, (isAA ? "AA" : "SG"),
                                ip1, ip2, id1.ToString("x"), id2.ToString("x"),
                                hr.ToString()
                                })
                            );

                            // Setup the first section of the URL
                            // Format as follows: /{api name}/{version}/{method name}/{locale}/{optional guid}?{name value pairs}
                            int methodNameLength = request.MethodName.Length;                            
                            String versionNumber = request.MethodName.Substring(methodNameLength - 2);
                            String methodNameProper = request.MethodName.Substring(0,methodNameLength - 2);

                            // If a guid is defined, add it to the URL
                            int resourceGuidIndex = Array.IndexOf(request.Names, "guid");
                            String resourceString = String.Empty;
                            if(resourceGuidIndex != -1)
                            {
                                String resourceGuid = request.Values[resourceGuidIndex];
                                if (resourceGuid != emptyGuid)
                                {
                                    resourceString = String.Format("/{0}", resourceGuid);
                                }				
                                numberOfItemsRequired++;
                            }

                            // Check for the locale string
                            int localeIndex = Array.IndexOf(request.Names, "locale");
                            String localeString = String.Empty;
                            if (localeIndex != -1)
                            {
                                localeString = String.Format("/{0}", request.Values[localeIndex]);                                
                            }
                            
                            stringBuilder.AppendFormat("|/{0}/{1}/{2}{3}{4}", FseContext.AppName, versionNumber, methodNameProper, localeString, resourceString);

                            // Resource/locale will be part of the request name/value pairs, so make sure we have at least one actual parameter
                            if (request.Names.Length > numberOfItemsRequired)
                            {
                                stringBuilder.AppendFormat("?");
                                String noFirstAmpersand = String.Empty;

                                for (int i = 0; i < request.Names.Length; i++)
                                {
                                    String requestName = request.Names[i];
                                    // Resource and locale are not part of the actual request
                                    if (requestName != "resource" && requestName != "locale" && requestName != "guid")
                                    {
                                        stringBuilder.AppendFormat("{0}{1}={2}",
                                                    noFirstAmpersand,
                                                    request.Names[i],
                                                    HttpUtility.UrlEncode(request.Values[i].Replace("\n", "").Replace("\r", ""))
                                                );
                                        noFirstAmpersand = "&"; // No first ampersand! It is on all subsequent query parameters
                                    }                                    
                                }
                            }
                        }
                        else
                        {
                            stringBuilder.Append(
                                string.Join("|", new string[] {
                                FseContext.AppName, methodName, (isAA ? "AA" : "SG"),
                                ip1, ip2, id1.ToString("x"), id2.ToString("x"),
                                hr.ToString(), "methodName=" + methodName
                            })
                            );

                            for (int i = 0; i < request.Names.Length; i++)
                            {
                                stringBuilder.Append("&Names=" + request.Names[i]);
                                stringBuilder.Append("&Values=" + request.Values[i].Replace("\n", "").Replace("\r", ""));
                            }
                        }

                        Xom.Trace(XomAreaName.fseTrace, LogLevel.L_LOW, stringBuilder.ToString());
                        Xom.Log(XomAreaName.fseLog, stringBuilder.ToString());
                    }
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseContext.cs ===
//
// FseContext.cs
// Copyright (C) Microsoft Corporation.  All Rights Reserved.
//

using System.Diagnostics;
using System.Web;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.common.fse
{
    public class FseContext : XomRequestContext
    {
        public FseContext(string methodName): this(methodName, null)
        {
        }

        public FseContext(string methodName, XomLogArea traceArea) : base(methodName, traceArea)
        {
            _methodCounters = null;
            
            // set up perf counters
            ExecuteCounters.Counters.RequestsPerSecond.Increment();
            ExecuteCounters.Counters.RequestsTotal.Increment();

            if (HttpContext.Current != null)
            {
                XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                    ExecuteCounters.Counters.FailuresPerSecond,
                    ExecuteCounters.Counters.FailuresTotal
                }, FseContext.ErrCtrsName);
            }
        }

        public override void Dispose()
        {
            ExecuteCounters.Counters.AverageExecutionTime.IncrementBy(_timeElapsed.TimeElapsed);
            ExecuteCounters.Counters.AverageExecutionTimeBase.Increment();
            
            if (_methodCounters != null)
            {
                _methodCounters.AverageExecutionTime.IncrementBy(_timeElapsed.TimeElapsed);
                _methodCounters.AverageExecutionTimeBase.Increment();
            }

            if (_methodCountersCacheMiss != null)
            {
                _methodCountersCacheMiss.AverageExecutionTime.IncrementBy(_timeElapsed.TimeElapsed);
                _methodCountersCacheMiss.AverageExecutionTimeBase.Increment();
            }

            if (_methodCountersCacheHit != null)
            {
                _methodCountersCacheHit.AverageExecutionTime.IncrementBy(_timeElapsed.TimeElapsed);
                _methodCountersCacheHit.AverageExecutionTimeBase.Increment();
            }

            base.Dispose();
        }

        public void InitInstanceCounters(string methodName)
        {
            // set up methodName-specific perf counters
            if (methodName != null)
            {
                string perfCtrsName = FseContext.AppName + "_" + methodName;
                _methodCounters = ExecuteCounters.Counters[perfCtrsName];
            
                _methodCounters.RequestsPerSecond.Increment();
                _methodCounters.RequestsTotal.Increment();

                if (HttpContext.Current != null)
                {
                    XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                        _methodCounters.FailuresPerSecond,
                        _methodCounters.FailuresTotal
                    }, FseContext.ErrCtrsName);
                }
            }
        }

        public void CheckCached(string methodName, HResult hr)
        {
            // set up methodName-specific perf counters
            if (methodName != null && xonline.common.service.HResult.Succeeded(hr))
            {
                if(hr != xonline.common.service.HResult.XONLINE_S_FSE_CACHE_ENTRY_FOUND)
                {
                    string perfCtrsName = FseContext.AppName + "_" + methodName + "_CacheMiss";
                    _methodCountersCacheMiss = ExecuteCounters.Counters[perfCtrsName];
                
                    _methodCountersCacheMiss.RequestsPerSecond.Increment();
                    _methodCountersCacheMiss.RequestsTotal.Increment();

                    if (HttpContext.Current != null)
                    {
                        XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                            _methodCountersCacheMiss.FailuresPerSecond,
                            _methodCountersCacheMiss.FailuresTotal
                        }, FseContext.ErrCtrsName);
                    }
                }
                else
                {
                    string perfCtrsName = FseContext.AppName + "_" + methodName + "_CacheHit";
                    _methodCountersCacheHit = ExecuteCounters.Counters[perfCtrsName];
                
                    _methodCountersCacheHit.RequestsPerSecond.Increment();
                    _methodCountersCacheHit.RequestsTotal.Increment();

                    if (HttpContext.Current != null)
                    {
                        XRLUtil.AddErrorPerfCounters(new PerformanceCounter[] {
                            _methodCountersCacheHit.FailuresPerSecond,
                            _methodCountersCacheHit.FailuresTotal
                        }, FseContext.ErrCtrsName);
                    }
                }
            }
        }

        private ExecuteCounters _methodCounters = null;
        private ExecuteCounters _methodCountersCacheMiss = null;
        private ExecuteCounters _methodCountersCacheHit = null;
        private static string _appName = null;
        private static string _errCtrsName = null;

        public static string AppName
        {
            get 
            { 
                if(_appName == null)
                {
                    _appName = Config.ComponentName;
                }
                
                return _appName; 
            }
        }

        // this is stolen from FEAPP.  it breaks a  dependency  that
        // required tools applications using common marketplace code
        // to bring in all the web service infrastructure from feapp
        
        public const string FE_APP_COUNTERS = "FeAppCounters";
        
        
        
        public static string ErrCtrsName
        {
            get 
            { 
                // This code is used both in Soap/Internet Facing Apps, and in standard Front-End Apps (behind SG)
                if(_errCtrsName == null)
                {
                    HttpApplicationState state;
                    HttpContext ctx = HttpContext.Current;
                    
                    if(ctx != null)
                    {
                         state = ctx.Application;
                         if (state != null && state.Get(FE_APP_COUNTERS) != null)
                         {
                             _errCtrsName = (string) state.Get(FE_APP_COUNTERS);
                         }
                         else
                         {
                             _errCtrsName = XOn.ERROR_PERF_COUNTERS;
                         }
                    }
                    else
                    {
                        _errCtrsName = XOn.ERROR_PERF_COUNTERS;
                    }
                }
                
                return _errCtrsName; 
            }
        }
    }

    [XomPerformanceCounterCategoryAttr( "Fse:Execute", "Fse Shared Service Codebase", true )]
    public class ExecuteCounters : XomPerformanceCounterCategory
    {
        public virtual ExecuteCounters this[string AssemblyName_MethodName]
        {
            get
            {
                return (ExecuteCounters) GetInstance(AssemblyName_MethodName);
            }
        }
    
        static public ExecuteCounters Counters = new ExecuteCounters();
    
        [XomPerformanceCounterAttr(
            "Execute requests/sec",
            "Execute requests per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter RequestsPerSecond;
    
        [XomPerformanceCounterAttr(
            "Execute total",
            "Total Execute requests recorded in the the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter RequestsTotal;
    
        [XomPerformanceCounterAttr(
            "Execute failures/sec",
            "Number of unsuccessful results returned by Execute per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter FailuresPerSecond;
    
        [XomPerformanceCounterAttr(
            "Execute total failures",
            "Total number unsuccessful results returned by Execute in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter FailuresTotal;
    
        [XomPerformanceCounterAttr(
            "Execute avg. execution time",
            "Execute average request execution time in the current AppDomain.",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter AverageExecutionTime;
    
        [XomPerformanceCounterAttr(
            "Execute avg. execution time base",
            "Execute base for the average request execution time in the current AppDomain.",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter AverageExecutionTimeBase;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseExceptions.cs ===
// FseExceptions.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;

using xonline.common.service;

namespace xonline.common.fse
{
    public class FseException : Exception, ExceptionWithHResult {
        protected FseException(HResult hr, string message)
            : base(message)
        {
            HResult = hr;
        }

        protected FseException(HResult hr, string message, Exception innerException)
            : base(message, innerException)
        {
            HResult = hr;
        }

        public new HResult HResult
        {
            get { return (HResult) (uint) base.HResult; }
            set { base.HResult = (int) (uint) value; }
        }
    }

    public class ConfigException : FseException {
        internal ConfigException(HResult hr, string message)
            : base(hr, message)
        {
        }

        internal ConfigException(HResult hr, string message, Exception innerException)
            : base(hr, message, innerException)
        {
        }
    }

    public class InternalException : FseException {
        internal InternalException(HResult hr, string message)
            : base(hr, message)
        {
        }

        internal InternalException(HResult hr, string message, Exception innerException)
            : base(hr, message, innerException)
        {
        }
    }

    public class MethodException : FseException, ExceptionWithoutEvent {
        internal MethodException(HResult hr, string message)
            : base(hr, message)
        {
        }

        internal MethodException(HResult hr, string message, Exception innerException)
            : base(hr, message, innerException)
        {
        }
    }

    public class ParameterException : FseException, ExceptionWithoutEvent {
        internal ParameterException(HResult hr, string message)
            : base(hr, message)
        {
        }

        internal ParameterException(HResult hr, string message, Exception innerException)
            : base(hr, message, innerException)
        {
        }
    }

    public class CacheException : FseException {
        internal CacheException(HResult hr, string message)
            : base(hr, message)
        {
        }

        internal CacheException(HResult hr, string message, Exception innerException)
            : base(hr, message, innerException)
        {
        }
    }

    public class ApplicationException : FseException
    {
        public ApplicationException(HResult hr, string message)
            : base(hr, message)
        {
        }

        public ApplicationException(HResult hr, string message, Exception innerException)
            : base(hr, message, innerException)
        {
        }
    }

    public class DatabaseException : FseException
    {
        public DatabaseException(HResult hr, string message)
            : base(hr, message)
        {
        }

        public DatabaseException(HResult hr, string message, Exception innerException)
            : base(hr, message, ((innerException is XRLException) && (innerException.InnerException != null)) ? innerException.InnerException : innerException)
        {
        }
    }

    public class UnhandledException : ExceptionWithEventId, ExceptionWithHResult
    {
        public UnhandledException(HResult hr, XEvent.Id eventId, string message) : base(eventId, message)
        {
            HResult = hr;
        }

        public UnhandledException(HResult hr, XEvent.Id eventId, string message, Exception innerException) : base(eventId, message, innerException)
        {
            HResult = hr;
        }

        public new HResult HResult
        {
            get { return (HResult) (uint) base.HResult; }
            set { base.HResult = (int) (uint) value; }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseCache.cs ===
// FseCache.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Collections.Generic;
using System.IO;
using System.Security.Cryptography;
using System.Text;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.common.fse
{
    internal class FseCache
    {
        private FseService _service;
        private byte[]     _prefix;
        private byte[]     _reservation;
        private XBanc      _xb;

        internal FseCache(FseService service)
        {
            _service = service;
            _prefix  = ASCIIEncoding.ASCII.GetBytes(_service.Api);
            _reservation = ASCIIEncoding.ASCII.GetBytes("<Reservation />");

            _xb = new XBanc();
        }

        internal void Insert(
            byte[]      key,
            byte[]      value,
            DateTime    expirationTime
         ) {
            // if expiration time has passed, then do not cache
            TimeSpan timespan = expirationTime - DateTime.UtcNow;
            if (timespan.TotalSeconds <= 0) return;

            // we know value is positive,  but simple cast will
            // truncate to zero, round up to next whole  second

            uint expirationSeconds = (uint) Math.Ceiling(timespan.TotalSeconds);

            // we already inserted  a  placeholder  in  the
            // cache.  replace placeholder with the  result

            HResult hr;

            try {
                hr = _xb.SetData(key, value, (uint) expirationSeconds, (uint) 0);
            }
            catch (Exception e) {
                throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error inserting into cache", e);
            }

            if ((hr != HResult.S_OK) && (hr != HResult.S_FALSE)) {
                throw new CacheException(hr, "Error inserting into cache");
            }
        }

        internal void Insert(
            byte[][] keys,
            byte[][] values,
            DateTime expirationTime
        )
        {
            // if expiration time has passed, then do not cache
            TimeSpan timespan = expirationTime - DateTime.UtcNow;
            if (timespan.TotalSeconds <= 0) return;

            // we know value is positive,  but simple cast will
            // truncate to zero, round up to next whole  second

            uint expirationSeconds = (uint) Math.Ceiling(timespan.TotalSeconds);

            // the expiration values will be the same  for  all
            // of the values,  create some arrays and fill them

            uint[] hrs;
            uint[] absoluteSeconds = new uint[keys.Length];
            uint[] slidingSeconds = new uint[keys.Length];

            for (int i = 0; i < keys.Length; i++)
            {
                absoluteSeconds[i] = expirationSeconds;
                slidingSeconds[i] = 0;
            }

            // one call to rule them all. we can survive errors
            // but performance will suffer if we fail to  cache

            try {
                hrs = _xb.SetData(keys, values, absoluteSeconds, slidingSeconds);
            }
            catch (Exception e) {
                throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error inserting into cache", e);
            }

            uint numCached = 0;

            for (int i = 0; i < hrs.Length; i++)
            {
                if (hrs[i] == HResult.S_OK)
                    numCached += 1;
                else if (hrs[i] != HResult.S_FALSE) {
                    throw new CacheException(hrs[i], "Error inserting into cache");
                }
            }

            if (numCached != hrs.Length) {
                Xom.NtEvent(XEvent.Id.COMMON_FSE_CACHE_INSERT_ERROR, "Error inserting into cache, hr = " + ((HResult) HResult.S_FALSE));
            }
        }


        internal bool Reserve(byte[] key, uint reservationSeconds)
        {
            byte[] value;
            HResult hr;

            try {
                hr = _xb.Query(key, out value);
            }
            catch (Exception e) {
                throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error querying cache", e);
            }

            if (hr == HResult.S_OK)
                return false;
            else if (hr == HResult.S_FALSE) {
                try {
                    hr = _xb.Insert(key, _reservation, reservationSeconds, 0);
                }
                catch (Exception e) {
                    throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error inserting into cache", e); 
                }

                if (hr == HResult.S_OK) return true;
            }

            if (hr != HResult.S_FALSE) {
                throw new CacheException(hr, "Error inserting into cache");
            }

            return false;
        }


        internal byte[] Query(byte[] key, out uint expirationSeconds)
        {
            byte[] value = null;
            HResult hr;

            try {
                hr = _xb.Query(key, out value, out expirationSeconds);
            }
            catch (Exception e) {
                throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error querying cache", e);
            }

            if (hr == HResult.S_OK) return value;
            if (hr == HResult.S_FALSE) return null;

            throw new CacheException(hr, "Error querying cache");
        }


        internal int Query(byte[][] keys, out byte[][] values, out DateTime[] expiration)
        {
            uint[] hrs;
            uint[] expirationSeconds;
            int numberMissing = keys.Length;

            expiration = new DateTime[keys.Length];
            DateTime now = DateTime.UtcNow;

            try {
                hrs = _xb.Query(keys, out values, out expirationSeconds);
            }
            catch (Exception e) {
                throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error querying cache", e);
            }

            for (int i = 0; i < hrs.Length; i++)
            {
                if (hrs[i] == HResult.S_OK)
                {
                    numberMissing -= 1;
                    expiration[i] = now.AddSeconds(expirationSeconds[i]);
                }
                else if (hrs[i] == HResult.S_FALSE)
                {
                    values[i] = null;
                    expiration[i] = DateTime.MinValue;
                }

                // if any single result is not OK or FALSE, then
                // the whole thing is bad,  ripple the error  up

                else {
                    throw new CacheException(hrs[i], "Error querying cache");
                }
            }

            return numberMissing;
        }


        internal byte[] GetKey(
            string     methodName,
            FseValue[] values,
            bool       exactMatch
        )
        {
            MemoryStream memoryStream = new MemoryStream();
            BinaryWriter binaryWriter = new BinaryWriter(memoryStream);

            GetKey(binaryWriter, methodName, values, exactMatch);
            byte[] key = memoryStream.ToArray();
            return key;
        }

        internal byte[] GetDatabaseKey(
            string methodName,
            FseValue[] values,
            bool exactMatch
        )
        {
            MemoryStream memoryStream = new MemoryStream();
            BinaryWriter binaryWriter = new BinaryWriter(memoryStream);

            GetKey(binaryWriter, methodName, values, exactMatch);
            binaryWriter.Write((short) 0x4244); // "DB"

            return memoryStream.ToArray();
        }

        internal void GetKey(
            BinaryWriter binaryWriter,
            string       methodName,
            FseValue[]   values,
            bool         exactMatch
        )
        {
            // create key starting with api name (which  is  used
            // as a prefix for all FSE  cache  entries  in  XBanc)

            binaryWriter.Write(_prefix);

            // if they supplied a method name,  then add that too

            if (! string.IsNullOrEmpty(methodName))
            {
                binaryWriter.Write(ASCIIEncoding.ASCII.GetBytes(":" + methodName));
            }

            // if they provided parameter values, then  construct
            // a key using those values as a seed to a SHA1  hash
            
            if (values != null)
            {
                string separator = "?";
                SHA1 sha1 = new SHA1Managed();
                StringBuilder stringBuilder = new StringBuilder();

                for (int i = 0; i < values.Length; i++)
                {
                    FseValue value = values[i];
                    FseParam param = value.Param;

                    // skip parameters not configured as key values

                    if (param.IsKeyed)
                    {
                        // adjacent hashed  keys  are  concatenated.
                        // write it out when we see a nonhashed key

                        if (param.IsHashed)
                        {
                            // if they don't want  an  exact  match
                            // then break on the first  hashed  key

                            if (! exactMatch)
                            {
                                break;
                            }

                            if (stringBuilder.Length == 0)
                                binaryWriter.Write(ASCIIEncoding.ASCII.GetBytes(separator));
                            else {
                                stringBuilder.Append("&");
                            }

                            stringBuilder.AppendFormat("{0}=", param.Name);

                            for (int j = 0; j < value.Values.Length; j++)
                            {
                                if (j > 0) stringBuilder.Append(",");
                                stringBuilder.Append(value.Values[j]);
                            }
                        }

                        // key is not hashed. flush any hashed keys
                        // and then write this key out  right  away

                        else
                        {
                            if (stringBuilder.Length > 0)
                            {
                                // hash keys are essentially compressed. Use  unicode  to
                                // make the hash source unique and don't worry about size

                                binaryWriter.Write(sha1.ComputeHash(
                                    UnicodeEncoding.Unicode.GetBytes(stringBuilder.ToString())
                                ));

                                stringBuilder.Length = 0;
                            }

                            // but non-hashed keys are written in the clear.  write  ASCII
                            // where we can to keep the key size down. start with the name

                            binaryWriter.Write(ASCIIEncoding.ASCII.GetBytes(
                                string.Format("{0}{1}=", separator, param.Name)
                            ));

                            // we must use unicode if the value is a string,  but dates and
                            // scalars are compact as ASCII without any loss of information

                            if (param.Type == typeof(String))
                                binaryWriter.Write(UnicodeEncoding.Unicode.GetBytes(value.Values[0]));
                            else {
                                binaryWriter.Write(ASCIIEncoding.ASCII.GetBytes(value.Values[0]));
                            }
                        }

                        separator = "&";
                    }
                }

                if (stringBuilder.Length > 0)
                {
                    binaryWriter.Write(sha1.ComputeHash(
                        UnicodeEncoding.Unicode.GetBytes(stringBuilder.ToString())
                    ));
                }
            }
        }


        internal void CheckCacheability(FseMethod method)
        {
            List<FseValue> list = new List<FseValue>();

            foreach (FseParam param in method.Params) {

                if (param.IsDeprecated || ! param.IsKeyed) continue;

                FseValue value = new FseValue(param);
                string[] values = new string[1];

                if (param.Type == typeof(DateTime))
                    values[0] = DateTime.UtcNow.ToString();
                else if (param.Type == typeof(String))
                    values[0] = "XboxLiveKicksButt";
                else if (param.Type == typeof(Guid))
                    values[0] = Guid.NewGuid().ToString();
                else if (param.Type == typeof(Int32))
                    values[0] = Int32.MinValue.ToString();
                else if (param.Type == typeof(Int64))
                {
                    values[0] = Int64.MinValue.ToString();
                }

                value.Add(values, 0, 0);
                list.Add(value);
            }

            if (GetKey(method.Name, list.ToArray(), true).Length >
                Config.GetUIntSetting(Setting.xbanc_max_key_length))
            {
                throw new ConfigException(
                    HResult.XONLINE_E_FSE_CACHE_KEY_TOO_LONG, string.Format("Cache key for method {0} is too long", method.Name)
                );
            }
        }

        internal DateTime GetExpiration(
            FseValue[] values,
            uint cacheSeconds
        )
        {
            DateTime expiration = DateTime.UtcNow.AddSeconds(cacheSeconds);

            foreach (FseValue value in values)
            {
                if (string.Compare(value.Param.Name, "Bookmark", true) != 0) continue;
                DateTime bookmark = DateTime.Parse(value.Values[0]);

                if (bookmark < expiration) {
                    expiration = bookmark.AddSeconds(cacheSeconds);
                }

                break;
            }

            return expiration;
        }

        internal void Flush(string methodName, FseState state, bool exactMatch)
        {
            FseValue[] values = state == null ? null : state.Values;

            try {
                _xb.Remove(GetKey(methodName, values, exactMatch), exactMatch);
            }
            catch (Exception e) {
                throw new CacheException(HResult.XONLINE_E_FSE_CACHE_ERROR, "Error removing from cache", e);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseMethod.cs ===
// FseMethod.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections.Generic;
using System.Data.SqlClient;
using System.Threading;
using System.Web;
using System.Xml;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.sql.sqlclient;

using Microsoft.Webstore.WstClient;

namespace xonline.common.fse
{
    internal class FseMethod
    {
        private FseService       _service;
        private FseCache         _cache;

        private string           _name;
        private string           _interface;
        private bool             _isVirtual;
        private bool             _useWebstore;
        private string           _procedure;

        private FseParam[]       _params;
        private int              _maxOccurs;

        private bool             _isPaged;
        private int              _maxPageSize;
        private int              _cachePageBase;
        private int              _cachePageSize;
        private int              _dbPageBase;
        private int              _dbPageSize;
        private int              _cachePagesPerDbPage;

        private int              _cacheSeconds;
        private int              _cacheRetryMilliseconds;
        private int              _cacheRetryCount;
        private int              _dbRetryCount;
        private bool             _useAssembly;
        private bool             _allowCachePaging;

        private bool             _fastFailEnabled;
        private string           _fastFailResourceName = string.Empty;

        internal FseMethod(
            FseService service,
            string     name
        )
        {
            this._service     = service;
            this._cache       = service.Cache;
            this._name        = name;

            using (SqlClient cmd = new SqlClient(_service.Interface))
            {
                // get the database interface that we're are supposed
                // to use and the name of the procedure we'll  invoke

                cmd.StoredProc = "p_fse_get_methods";
                cmd.AddParameter("@vc_api_name", _service.Api);
                cmd.AddParameter("@vc_method_name", _name);

                using (SqlDataReader reader = cmd.Execute())
                {
                    if (! reader.Read())
                    {
                        throw new ConfigException(HResult.XONLINE_E_FSE_CONFIG_METHOD_NOT_FOUND, string.Format("Method '{0}' not found", _name));
                    }

                    int ord;

                    ord = reader.GetOrdinal("ti_use_assembly");
                    this._useAssembly = reader.GetByte(ord) == 1;

                    // Only fill in inteface information if we are not using an assembly
                    if (!this._useAssembly)
                    {
                        ord = reader.GetOrdinal("vc_interface");

                        if (!reader.IsDBNull(ord))
                            this._interface = reader.GetString(ord);
                        else
                        {
                            ord = reader.GetOrdinal("vc_virtual_interface");

                            if (reader.IsDBNull(ord))
                            {
                                throw new ConfigException(HResult.XONLINE_E_FSE_CONFIG_NO_INTERFACE, string.Format("Method '{0}' has no interface", name));
                            }

                            this._isVirtual = true;
                            this._interface = reader.GetString(ord);

                            IVirtualInterfaceInfo virtualInterfaceInfo;

                            if (!Config.TryGetVirtualInterface(this._interface, out virtualInterfaceInfo))
                            {
                                throw new ConfigException(
                                    HResult.XONLINE_E_FSE_CONFIG_NO_INTERFACE,
                                    string.Format("Interface '{0}' for method '{1}' not found", this._interface, _name)
                                );
                            }
                        }
                    }

                    ord = reader.GetOrdinal("ti_use_webstore");
                    this._useWebstore = reader.GetByte(ord) == 1;

                    ord = reader.GetOrdinal("vc_procedure_name");
                    this._procedure = (string) reader.GetString(ord);

                    ord = reader.GetOrdinal("i_cache_duration");
                    this._cacheSeconds = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_cache_page_base");
                    this._cachePageBase = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_cache_page_size");
                    this._cachePageSize = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_cache_retry_count");
                    this._cacheRetryCount = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_cache_retry_milliseconds");
                    this._cacheRetryMilliseconds = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_db_page_base");
                    this._dbPageBase = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_db_page_size");
                    this._dbPageSize = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_db_retry_count");
                    this._dbRetryCount = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("i_max_page_size");
                    this._maxPageSize = reader.GetInt32(ord);

                    ord = reader.GetOrdinal("ti_allow_cache_paging");
                    this._allowCachePaging = reader.GetByte(ord) == 1;

                    ord = reader.GetOrdinal("ti_fastfail_enabled");
                    _fastFailEnabled = reader.GetByte(ord) == 1;

                    if (_fastFailEnabled)
                    {
                        // Retrieve configuration and setup fast fail
                        int maxThreshold;
                        int minThreshold;
                        int timeWindow;

                        ord = reader.GetOrdinal("i_fastfail_maximum_threshold");
                        maxThreshold = reader.GetInt32(ord);

                        ord = reader.GetOrdinal("i_fastfail_minimum_threshold");
                        minThreshold = reader.GetInt32(ord);

                        ord = reader.GetOrdinal("i_fastfail_time_window");
                        timeWindow = reader.GetInt32(ord);

                        FastFailResourceConfig fastFailResourceConfig = new FastFailResourceConfig();
                        fastFailResourceConfig.MaximumThreshold = (uint)maxThreshold;
                        fastFailResourceConfig.MinimumThreshold = (uint)minThreshold;
                        fastFailResourceConfig.ThrottlingSelector = new FseThrottleSelector(0.5f); // If we reach 50 % timeouts begin throttling back requests
                        fastFailResourceConfig.CaptureTimeWindow = new TimeSpan(0, 0, timeWindow);

                        _fastFailResourceName = this._service.Api + "_" + this._name;

                        FastFail.ConfigureResource(_fastFailResourceName, fastFailResourceConfig);
                    }

                    // there are a number of database constraints,  but
                    // we don't trust the database,  so check ones that
                    // would break us if the constraints  were  removed

                    if ((_cachePageSize > _dbPageSize) || (_maxPageSize > _dbPageSize))
                    {
                        throw new ConfigException(
                            HResult.XONLINE_E_FSE_CONFIG_PAGE_SIZE_INVALID,
                            "Maximum and cache page sizes must be less than or equal to database page size"
                        );
                    }

                    if ((_dbPageSize <= 0 || _maxPageSize <= 0 || _cachePageSize <= 0))
                    {
                        throw new ConfigException(
                            HResult.XONLINE_E_FSE_CONFIG_PAGE_SIZE_INVALID,
                            "Page sizes must be positive"
                        );
                    }

                    if ((_dbPageSize % _cachePageSize) != 0)
                    {
                        throw new ConfigException(
                            HResult.XONLINE_E_FSE_CONFIG_PAGE_SIZE_INVALID,
                            "Database page size must be an integer multiple of the cache page size"
                        );
                    }

                    _cachePagesPerDbPage = _dbPageSize / _cachePageSize;
                    reader.Close();
                }

                // get all of the parameters for the stored procedure
                cmd.StoredProc = "p_fse_get_parameters";
                List<FseParam> list = new List<FseParam>();
                bool hasPageSize = false, hasPageNum = false;

                using (SqlDataReader reader = cmd.Execute())
                {
                    while (reader.Read())
                    {
                        string parameterName = reader.GetString(reader.GetOrdinal("vc_parameter_name"));

                        try
                        {
                            FseParam param = new FseParam(
                                this,
                                parameterName,
                                reader.GetString(reader.GetOrdinal("vc_parameter_mapping")),
                                reader.GetInt16(reader.GetOrdinal("si_min_occurs")),
                                reader.GetInt16(reader.GetOrdinal("si_max_occurs")),
                                reader.GetString(reader.GetOrdinal("vc_default_value")),
                                reader.GetString(reader.GetOrdinal("vc_regex_value")),
                                reader.GetString(reader.GetOrdinal("vc_parameter_type_name")),
                                (uint) reader.GetInt32(reader.GetOrdinal("i_flags"))
                            );

                            _maxOccurs += param.MaxOccurs;
                            list.Add(param);

                            // PageSize and PageNum are special.  keep track
                            // of them within the overall list of parameters

                            if (! param.IsDeprecated) 
                            {
                                if (string.Compare(param.Name, "PageSize", true) == 0) hasPageSize = true;
                                if (string.Compare(param.Name, "PageNum", true) == 0)  hasPageNum = true;
                            }
                        }
                        
                        catch (ParameterException pe)
                        {
                            throw new ConfigException(
                                HResult.XONLINE_E_FSE_CONFIG_PARAM_ERROR,
                                string.Format("Configuration error for parameter '{0}'", parameterName), pe
                            );
                        }
                    }
                }

                // store the paramVals as array for  easier  processing

                this._params  = list.ToArray();
                this._isPaged = this._allowCachePaging && hasPageSize && hasPageNum;

                // if we will be caching,  then we need to know our key
                // size for quick allocation, and to avoid any overruns

                if (_cacheSeconds > 0) {
                    _service.Cache.CheckCacheability(this);
                }
            }
        }

        internal int CachePageBase
        {
            get { return _cachePageBase; }
        }

        internal int DbPageSize
        {
            get { return _dbPageSize; }
        }

        private int CacheSeconds
        {
            get
            {
                if (HttpContext.Current != null)
                {
                    if (HttpContext.Current.Items[FseService.CACHE_DURATION_OVERRIDE] != null)
                    {
                        int cacheSecondsOverride;

                        if (Int32.TryParse((string)HttpContext.Current.Items[FseService.CACHE_DURATION_OVERRIDE], out cacheSecondsOverride))
                        {
                            if (cacheSecondsOverride >= 0) return cacheSecondsOverride;
                        }
                    }
                }

                return _cacheSeconds;
            }
        }

        internal bool IsPaged
        {
            get { return _isPaged; }
        }

        internal bool AllowCachePaging
        {
            get { return _allowCachePaging; }
        }

        internal int MaxOccurs
        {
            get { return _maxOccurs; }
        }

        internal int MaxPageSize
        {
            get { return _maxPageSize; }
        }

        internal string Name
        {
            get { return _name; }
        }

        internal FseParam[] Params
        {
            get { return _params; }
        }

        private FsePageHandler PageHandler
        {
            get { return _service.PageHandler; }
        }

        private FseResultHandler ResultHandler
        {
            get { return _service.ResultHandler; }
        }

        internal FseService Service
        {
            get { return _service; }
        }

        internal FseResult GetSourceResult(FseState state, bool reserve)
        {
            // when reserving, definitive false means someone else
            // is making the same,  return and wait for the  cache

            if (reserve) {
                if (!_cache.Reserve(_cache.GetDatabaseKey(_name, state.Values, true), (uint) (_cacheRetryCount * _cacheRetryMilliseconds / 1000))) {
                    return null;
                }
            }

            FseCommand cmd = null;

            FastFailTracker fastFailTracker = null;
            try
            {
                if (_fastFailEnabled)
                {
                    try
                    {
                        fastFailTracker = new FastFailTracker(_fastFailResourceName);
                    }
                    catch (FastFailException)
                    {
                        throw;
                        // We are in fast fail
                    }
                }

                if (this._useAssembly)
                {
                    cmd = new FseBinCommand();
                }
                else
                {
                    if (_useWebstore)
                        cmd = new FseWsCommand(_interface, WstFailoverMode.PrimaryThenSecondary);
                    else
                    {
                        cmd = new FseSqlCommand(_interface, _isVirtual);
                    }
                }

                // populate the command with  stored  procedure
                // name and all the values passed in the  state

                cmd.ProcedureName = _procedure;
                foreach (FseValue value in state.Values) cmd.AddParameter(value);
                
                // For binary commands we call the ExecuteBytes() method. For sql and
                // websotre, we call the ExecuteXml() methods. 
                if (cmd is FseBinCommand)
                {
                    byte[] returnResponse = cmd.ExecuteBytes();
                    if(_fastFailEnabled)    fastFailTracker.IndicateSuccess();
                    return ResultHandler.Create(returnResponse);
                }
                else
                {
                    // call the database, wrap reader to ignore the 
                    // whitespace,  and create result using handler

                    using (XmlReader reader = cmd.ExecuteXml())
                    {
                        if (_fastFailEnabled)   fastFailTracker.IndicateSuccess();
                        return ResultHandler.Create(reader);
                    }
                }                
                
            }
            catch (Exception ex)
            {
                if (_fastFailEnabled && fastFailTracker != null)
                {
                    if (CheckExceptionForFastFail(ex))
                    {
                        fastFailTracker.IndicateTimeout();
                    }
                    else
                    {
                        // We only want to indicate timeouts, other failures should not be considered
                        fastFailTracker.IndicateSuccess();
                    }
                }
                throw;
            }

            finally {
                if (cmd != null) cmd.Dispose();
                cmd = null;
            }
        }


        private int GetCacheResults(byte[][] keys, out FseWrappedResult[] results, int retryCount, int retryMilliseconds)
        {
            byte[][]    values;
            DateTime[]  expiration;
            int         numberMissing;

            // if there are values for all of the keys, then we
            // skip to the end to construct  the  result  array

            numberMissing = _cache.Query(keys, out values, out expiration);

            while ((numberMissing > 0)  && (retryCount-- > 0))
            {
                // sleep a little bit before we retry to  allow
                // other threads a chance to populate the cache

                Thread.Sleep(retryMilliseconds);

                // figure out which keys are still missing  and
                // set ourselves up to query  just  those  keys

                int[] missingIndexes = new int[numberMissing];
                byte[][] missingKeys = new byte[numberMissing][];

                for (int i = 0, j = 0; i < values.Length; i++)
                {
                    if (values[i] != null) continue;
                    missingKeys[j] = keys[i];
                    missingIndexes[j] = i;
                    j++;
                }

                // more temp arrays for return values, and then
                // make another query to get the  missing  keys

                byte[][] missingValues;
                DateTime[] missingExpiration;

                numberMissing = _cache.Query(
                    missingKeys, out missingValues, out missingExpiration
                );

                // if we got back additional values,  then move
                // them into the big array we return to  caller

                if (numberMissing < missingKeys.Length)
                {
                    for (int j = 0; j < missingValues.Length; j++)
                    {
                        int i = missingIndexes[j];
                        values[i] = missingValues[j];
                        expiration[i] = missingExpiration[j];
                    }
                }
            }

            // convert whatever values we have into  cache  results

            FseResult result = null;
            results = new FseWrappedResult[values.Length];

            for (int i = 0; i < results.Length; i++)
            {
                if (values[i] == null) continue;

                if ((result = ResultHandler.Create(values[i])) is FseExceptionResult)
                {
                    FseExceptionResult exceptionResult = (FseExceptionResult) result;
                    throw new MethodException(exceptionResult.HResult, exceptionResult.Message);
                }

                results[i] = new FseCacheResult(result, expiration[i]);
            }

            return numberMissing;
        }


        internal FseWrappedResult GetResult(FseState state, int cacheSeconds)
        {
            byte[][] keys = null;
            int numberMissing = 1;
            bool caching = cacheSeconds > 0;
            FseWrappedResult[] results = null;

            // if they want a cached result then first we  look
            // in the cache, if it is not there then  check  db

            if (caching)
            {
                keys = new byte[1][] { _cache.GetKey(_name, state.Values, true) };
                numberMissing = GetCacheResults(keys, out results, 0, 0);
                if (numberMissing == 0) return results[0];
            }

            // if we aren't caching,  or caching failed then we
            // don't have a result array, so we create one here

            if (results == null)
            {
                results = new FseWrappedResult[1];
            }

            int retryCount = _dbRetryCount;

            do
            {
                FseResult result = GetSourceResult(state, cacheSeconds > 0);

                // if we get data back from the  database,  and
                // they want to cache the data,  then cache  it

                if (result != null)
                {
                    DateTime expiration = _cache.GetExpiration(state.Values, (uint) cacheSeconds);

                    if (caching)
                    {
                        try {
                            _cache.Insert(keys[0], result.GetBytes(), expiration);
                        }

                        // we have a result to give the user if
                        // we fail to cache,  just log an event

                        catch (CacheException ce) {
                            Xom.NtEvent(XEvent.Id.COMMON_FSE_CACHE_INSERT_ERROR, ce, "Error inserting into cache.");
                            caching = false;
                        }
                    }

                    results = new FseWrappedResult[] { new FseWrappedResult(result, expiration) };
                    numberMissing -= 1;
                }

                if ((numberMissing == 0) || (! caching)) break;

                // someone is making this query,  try the cache
                // again,  and then retry the db  as  necessary

                numberMissing = GetCacheResults(keys, out results, _cacheRetryCount, _cacheRetryMilliseconds);
            } while ((numberMissing > 0) && (retryCount-- > 0));

            if (numberMissing > 0)
            {
                throw new MethodException(
                    HResult.XONLINE_E_FSE_METHOD_RETRY_COUNT_EXCEEDED,
                    "Exceeded number of retries attempting to get result"
                );
            }

            return results[0];
        }


        internal FseWrappedResult GetPagedResult(FseWrappedResult[] wrappers, int firstItem, int lastItem)
        {
            bool cached = true;
            DateTime expiration = DateTime.MinValue;

            FsePagedResult currentResult = null;
            FsePagedResult returnResult  = null;

            foreach (FseWrappedResult wrapper in wrappers)
            {
                // take lowest expiration of all cached results

                if (wrapper == null)
                    continue;
                else {
                    if (! (wrapper is FseCacheResult)) cached = false;

                    if (wrapper.Expiration > DateTime.MinValue) {
                        if ((expiration == DateTime.MinValue) || (wrapper.Expiration < expiration)) {
                            expiration = wrapper.Expiration;
                        }
                    }
                }


                // make sure all the results are FsePagedResult
                // we need that interface to   slice  and  dice

                try {
                    currentResult = (FsePagedResult) wrapper.Result;
                }
                
                catch (InvalidCastException e) {
                    throw new ApplicationException(
                        HResult.XONLINE_E_FSE_METHOD_RESULT_NOT_PAGED, "Returned result is not paged", e
                    );
                }

                // figure out which items we get from this page

                int offset = firstItem - currentResult.FirstItem;
                int length = lastItem - firstItem + 1;

                // don't try to extract past the  end  of  page

                if (offset + length > currentResult.NumItems)
                {
                    length = currentResult.NumItems - offset;
                    if (length < 0) length = 0;
                }

                // extract the items and then compine with  the
                // userPage which are accumulating  for  return

                FsePagedResult extractResult = PageHandler.Extract(currentResult, offset, length);
                returnResult = (returnResult == null) ? extractResult : PageHandler.Merge(returnResult, extractResult);

                // and move to the start of the next cache page
                firstItem += length;
            }

            if (cached) return new FseCacheResult(returnResult, expiration);
            return new FseWrappedResult(returnResult, expiration);
        }


        internal FseWrappedResult GetPagedResult(FseState state, int cacheSeconds)
        {
            // compute some values that will help us slice  and
            // dice database and cache pages  into  user  pages

            int firstItem    = state.PageSize * (state.PageNum - _cachePageBase);
            int lastItem     = firstItem + state.PageSize - 1;

            int firstPage    = firstItem / _cachePageSize;
            int lastPage     = lastItem / _cachePageSize;
            int numPages     = lastPage - firstPage + 1;

            byte[][] keys = null;
            int numberMissing = numPages;
            bool caching = cacheSeconds > 0;
            FseWrappedResult[] results = null;

            // if they want a cached result then first we  look
            // in the cache, if it is not there then  check  db

            if (caching)
            {
                keys = new byte[numPages][];
                state.PageSize = _cachePageSize;

                for (int i = 0; i < keys.Length; i++)
                {
                    state.PageNum = firstPage + i;
                    keys[i] = _cache.GetKey(_name, state.Values, true);
                }

                numberMissing = GetCacheResults(keys, out results, 0, 0);
                if (numberMissing == 0) return GetPagedResult(results, firstItem, lastItem);
            }

            // if we aren't caching,  or caching failed then we
            // don't have a result array, so we create one here

            if (results == null)
            {
                results = new FseWrappedResult[numPages];
            }

            // we have some number of pages that we did not get
            // from the cache. that means we go to the database

            int retryCount = _dbRetryCount;

            do {
                int i = 0;

                // for each of the pages not found in the cache
                // fetch the database page containing that page
                
                while (i < numPages && numberMissing > 0)
                {
                    if (results[i] != null)
                        i += 1;
                    else
                    {
                        state.PageNum  = (firstPage + i) / _cachePagesPerDbPage + _dbPageBase;
                        state.PageSize = _dbPageSize;

                        FseResult databaseResult = GetSourceResult(state, caching);

                        // if the database returns null then  someone
                        // else is making the same query,  move along

                        if (databaseResult == null)
                            i = state.PageNum * _cachePagesPerDbPage - firstPage;
                        else {
                            DateTime expiration;
                            FseResult[] databaseResults = null;

                            // exception results are not paged, so we clone
                            // the result to use it for all the cache pages

                            if (databaseResult is FseExceptionResult)
                            {
                                databaseResults = new FseResult[_cachePagesPerDbPage];

                                for (int j = 0; j < databaseResults.Length; j++) {
                                    databaseResults[j] = databaseResult;
                                }
                            }

                            // we have a result,  then slice it into  pages
                            // that we will use to fill in the caches pages

                            else if (databaseResult is FsePagedResult)
                            {
                                databaseResults = PageHandler.Split(
                                    (FsePagedResult) databaseResult, _cachePagesPerDbPage, _cachePageSize
                                );
                            }

                            // if the result we got back is not paged, then
                            // we are done and   must  throw  an  exception

                            else
                            {
                                throw new MethodException(
                                    HResult.XONLINE_E_FSE_METHOD_RESULT_NOT_PAGED,
                                    "Result handler returned non-pageable result"
                                );
                            }

                            // anything returned by the database is cached,
                            // even exceptions thrown by stored  procedures

                            if (caching)
                            {
                                state.PageSize = _cachePageSize;
                                int dbPageNum = state.PageNum - _dbPageBase;
                                expiration = _cache.GetExpiration(state.Values, (uint) cacheSeconds);

                                byte[][] cacheKeys = new byte[databaseResults.Length][];
                                byte[][] cacheValues = new byte[databaseResults.Length][];

                                for (int j = 0; j < databaseResults.Length; j++)
                                {
                                    state.PageNum = dbPageNum * _cachePagesPerDbPage + j;
                                    cacheKeys[j] = _cache.GetKey(_name, state.Values, true);
                                    cacheValues[j] = databaseResults[j].GetBytes();
                                }

                                // insert the result into the cache.  if we
                                // cannot then log an event and continue on

                                try {
                                    _cache.Insert(cacheKeys, cacheValues, expiration);
                                }

                                catch (CacheException ce) {
                                    Xom.NtEvent(XEvent.Id.COMMON_FSE_CACHE_INSERT_ERROR, ce, "Error inserting into cache.");
                                    caching = false;
                                }
                            }

                            // and if we received an exception  result from
                            // the stored procedure then it's time to throw

                            if (databaseResult is FseExceptionResult)
                            {
                                FseExceptionResult exceptionResult = (FseExceptionResult) databaseResult;

                                throw new MethodException(
                                    exceptionResult.HResult, exceptionResult.Message
                                );
                            }

                            // if we get here then we will use the database
                            // results to fill in the cache pages we return

                            expiration = DateTime.MinValue;
                            if (caching) expiration = _cache.GetExpiration(state.Values, (uint) cacheSeconds);

                            for (int j = (firstPage + i) % (_cachePagesPerDbPage); j < _cachePagesPerDbPage; j++, i++)
                            {
                                if (results[i] == null)
                                {
                                    results[i] = new FseWrappedResult(databaseResults[j], expiration);
                                    if (--numberMissing == 0) break;
                                }
                            }
                        }
                    }
                }

                // if we have all the parts or are not  caching
                // which means we can't get all  of  the  parts

                if ((numberMissing == 0) || (! caching)) break;

                // someone else is making the same query.  back
                // to the cache to see if the results are there

                int[] missingIndexes = new int[numberMissing];
                byte[][] missingKeys = new byte[numberMissing][];

                for (int j = 0, k = 0; j < results.Length; j++)
                {
                    if (results[j] != null) continue;
                    missingKeys[k] = keys[j];
                    missingIndexes[k] = j;
                    k++;
                }

                // more temp arrays for return values, and then
                // make another query to get the  missing  keys

                FseWrappedResult[] missingResults;

                numberMissing = GetCacheResults(
                    missingKeys, out missingResults, _cacheRetryCount, _cacheRetryMilliseconds
                );

                // if we got back additional values,  then move
                // them into the big array we return to  caller

                if (numberMissing < missingKeys.Length)
                {
                    for (int k = 0; k < missingResults.Length; k++)
                    {
                        int j = missingIndexes[k];
                        results[j] = missingResults[k];
                    }
                }
            } while ((numberMissing == 0) && (retryCount-- > 0));


            if (numberMissing > 0)
            {
                throw new MethodException(
                    HResult.XONLINE_E_FSE_METHOD_RETRY_COUNT_EXCEEDED,
                    "Exceeded number of retries attempting to get result"
                );
            }

            return GetPagedResult(results, firstItem, lastItem);
        }


        internal FseResponse Execute(FseRequest request)
        {
            // parse the names/values against the expected parameters
            // this does not validate actual  values,  just  presence

            FseState state = new FseState(this, request.Names, request.Values, false);
            
            // check if caching is enabled, and if so, if the  caller
            // want to override the configured value for cacheSeconds
            
            int cacheSeconds = CacheSeconds;

            if (cacheSeconds > 0) {
                if (request.CacheOverride != 0) cacheSeconds = request.CacheOverride;
            }
            
            // next we try and build a key for caching, which will do
            // validation and conversion of parameters for  the  call

            FseWrappedResult result;

            if ( IsPaged && ( cacheSeconds > 0 ))
            {
                result = GetPagedResult(state, cacheSeconds);
            }
            else
            {
                result = GetResult(state, cacheSeconds);
            }

            HResult hr = result is FseCacheResult ? HResult.XONLINE_S_FSE_CACHE_ENTRY_FOUND : HResult.S_OK;

            FseResponse response;
            XmlDocument xmlDocument = result.GetDocument();
            if (xmlDocument != null)
            {
                response = new FseResponse(xmlDocument, hr, result.Expiration);
            }
            else
            {
                response = new FseResponse(result.GetBytes(), hr, result.Expiration);
            }

            return response;
        }

        private Boolean CheckExceptionForFastFail(Exception ex)
        {
            Exception innerException = ex.InnerException;
            while (innerException != null)
            {
                if (IsExceptionFastFail(innerException))
                {
                    return true;
                }
                innerException = innerException.InnerException;
            }
            return false;
        }

        private Boolean IsExceptionFastFail(Exception ex)
        {
            if (FastFailHelper.ConsiderExceptionAsTimeout(ex))
            {
                return true;
            }
            return false;
        }

        public class FseThrottleSelector : FastFailThrottleSelector
        {
            public FseThrottleSelector() : this(0.5f) { }
            public FseThrottleSelector(float tolerance)
            {
                Tolerance = tolerance;
            }

            public override float SelectThrottle(FastFailStatistics statistics)
            {
                // Once we hit the tolerance, we will want to start throttling back requests instead of cutting them off altogether

                // If we hit close to 100% timeouts, we will want to only allow in the minimum number of calls per the configuration
                // As we return back down to the tolerance threshold we are ok with, we will want to start letting in more calls

                // If the timeout ratio is .75, and our tolerance is .5, we will throttle calls by 50% of (max - min) + min
                // If the timeout ratio is .60, and our tolerance is .5, we will throttle calls by 20% of (max - min) + min
                // A timeout ratio of 1.0 will reduce calls to the min allowed
                if (statistics.AggregatedFeatures.TimeoutRatio > tolerance)
                {
                    return (tolerance - (statistics.AggregatedFeatures.TimeoutRatio - tolerance)) / tolerance;
                }

                return 1.0f;
            }

            public float Tolerance
            {
                get { return tolerance; }
                set
                {
                    if (tolerance > 1 || tolerance < 0)
                        throw new ArgumentOutOfRangeException("value", tolerance, "range must be in [0, 1]");
                    tolerance = value;
                }
            }

            private float tolerance;
        }
    }

    [XomPerformanceCounterCategoryAttr("FastFail: MarketplaceCatalog", "FastFail MarketplaceCatalog resource", true)]
    public class FastFailMarketplaceCatalogProductV1PerformanceCategory : FastFailPerformanceCategory
    {
        public FastFailMarketplaceCatalogProductV1PerformanceCategory()
            : base("marketplacecatalog_productv1") { }

        public static FastFailMarketplaceCatalogProductV1PerformanceCategory Counters = new FastFailMarketplaceCatalogProductV1PerformanceCategory();
    }

    [XomPerformanceCounterCategoryAttr("FastFail: Catalog FindGameOffers", "FastFail Find Game Offers resource", true)]
    public class FastFailCatalogFindGameOffersPerformanceCategory : FastFailPerformanceCategory
    {
        public FastFailCatalogFindGameOffersPerformanceCategory()
            : base("catalog_findgameoffers") { }

        public static FastFailCatalogFindGameOffersPerformanceCategory Counters = new FastFailCatalogFindGameOffersPerformanceCategory();
    }

    [XomPerformanceCounterCategoryAttr("FastFail: Catalog FindGames", "FastFail Find Game Offers resource", true)]
    public class FastFailCatalogFindGamesPerformanceCategory : FastFailPerformanceCategory
    {
        public FastFailCatalogFindGamesPerformanceCategory()
            : base("catalog_findgames") { }

        public static FastFailCatalogFindGamesPerformanceCategory Counters = new FastFailCatalogFindGamesPerformanceCategory();
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseHandlers.cs ===
// FseHandlers.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Xml;

using xonline.common.service;

namespace xonline.common.fse
{
    public interface FseResultHandler
    {
        FseResult Create(byte[] bytes);
        FseResult Create(XmlReader reader);
        FseResult Create(XmlDocument document);
    }

    public class FseWrappedResultHandler : FseResultHandler
    {
        private FseResultHandler _resultHandler;

        internal FseWrappedResultHandler(FseResultHandler resultHandler)
        {
            _resultHandler = resultHandler;
        }

        public FseResult Create(byte[] bytes)
        {
            try
            {
                return _resultHandler.Create(bytes);
            }

            catch (ApplicationException)
            {
                throw;
            }

            catch (Exception e)
            {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_CREATE_ERROR, "Application error deserializing result", e
                );
            }
        }


        public FseResult Create(XmlReader reader)
        {
            try
            {
                return _resultHandler.Create(reader);
            }

            catch (ApplicationException)
            {
                throw;
            }

            catch (Exception e)
            {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_CREATE_ERROR, "Application error deserializing result", e
                );
            }
        }

        public FseResult Create(XmlDocument document)
        {
            try
            {
                return _resultHandler.Create(document);
            }

            catch (ApplicationException)
            {
                throw;
            }

            catch (Exception e)
            {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_CREATE_ERROR, "Application error deserializing result", e
                );
            }
        }
    }


    public abstract class FsePageHandler
    {
        public abstract FsePagedResult Extract(FsePagedResult result, int offset, int length);
        public abstract FsePagedResult Merge(FsePagedResult resultA, FsePagedResult resultB);

        public virtual FsePagedResult[] Split(FsePagedResult result, int numPages, int pageSize)
        {
            FsePagedResult[] splitResults = new FsePagedResult[numPages];

            // for each split page,  extract range of items
            // from the page to create the new split  pages

            for (int i = 0; i < splitResults.Length; i++)
            {
                splitResults[i] = Extract(result, i * pageSize, pageSize);
            }

            return splitResults;
        }
    }


    internal class FseWrappedPageHandler : FsePageHandler
    {
        private FsePageHandler _pageHandler;

        internal FseWrappedPageHandler(FsePageHandler pageHandler)
        {
            _pageHandler = pageHandler;
        }

        public override FsePagedResult Extract(FsePagedResult result, int offset, int length)
        {
            try
            {
                return _pageHandler.Extract(result, offset, length);
            }

            catch (ApplicationException)
            {
                throw;
            }

            catch (Exception e)
            {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_EXTRACT_ERROR, e.Message, e
                );
            }
        }

        public override FsePagedResult Merge(FsePagedResult resultA, FsePagedResult resultB)
        {
            try
            {
                return _pageHandler.Merge(resultA, resultB);
            }

            catch (ApplicationException)
            {
                throw;
            }

            catch (Exception e)
            {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_MERGE_ERROR, e.Message, e
                );
            }
        }

        public override FsePagedResult[] Split(FsePagedResult result, int numPages, int pageSize)
        {
            try
            {
                return _pageHandler.Split(result, numPages, pageSize);
            }

            catch (ApplicationException)
            {
                throw;
            }

            catch (Exception e)
            {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_SPLIT_ERROR, e.Message, e
                );
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseParam.cs ===
// FseParam.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Data;
using System.ComponentModel;
using System.Text.RegularExpressions;

using xonline.common.service;

namespace xonline.common.fse
{

    [Flags]
    internal enum FseParamFlags : uint
    {
        Keyed      = 0x00000001,  // used to generate cache key
        Hashed     = 0x00000002,  // include in cache key but hash
        Internal   = 0x00000004,  // cannot be supplied by user
        Array      = 0x00000008,  // is an array param
        Webstore   = 0x00000010,  // is a webstore hash param

        Deprecated = 0x80000000,
        All        = Keyed | Hashed | Internal | Array | Webstore | Deprecated
    };
    
    internal class FseParam {

        private FseMethod    _method;
        private string       _name;
        private string       _nameInSproc;
        private Type         _type;
        private DbType       _dbType;

        private int          _minOccurs;
        private int          _maxOccurs;
        private uint         _flags;
        private string       _default;
        private Regex        _regex;
/*
        Automatically supported types are from the System.[Xxz] intersection with System.Data.DbType.[Xyz].

        NOTE: You may have to add a row to t_fse_types if the type you need isn't there yet
        
        Boolean	A simple type representing Boolean values of true or false. 
        Byte	An 8-bit unsigned integer ranging in value from 0 to 255. 
        DateTime	A type representing a date and time value. 
        Decimal	A simple type representing values ranging from 1.0 x 10 -28 to approximately 7.9 x 10 28 with 28-29 significant digits. 
        Double	A floating point type representing values ranging from approximately 5.0 x 10 -324 to 1.7 x 10 308 with a precision of 15-16 digits. 
        Guid	A globally unique identifier (or GUID). 
        Int16	An integral type representing signed 16-bit integers with values between -32768 and 32767. 
        Int32	An integral type representing signed 32-bit integers with values between -2147483648 and 2147483647. 
        Int64	An integral type representing signed 64-bit integers with values between -9223372036854775808 and 9223372036854775807. 
        Object	A general type representing any reference or value type not explicitly represented by another DbType value. 
        SByte	An integral type representing signed 8-bit integers with values between -128 and 127. 
        Single	A floating point type representing values ranging from approximately 1.5 x 10 -45 to 3.4 x 10 38 with a precision of 7 digits. 
        String	A type representing Unicode character strings. 
        UInt16	An integral type representing unsigned 16-bit integers with values between 0 and 65535. 
        UInt32	An integral type representing unsigned 32-bit integers with values between 0 and 4294967295. 
        UInt64	An integral type representing unsigned 64-bit integers with values between 0 and 18446744073709551615. 
*/

        internal FseParam(
            FseMethod method, string name, string nameInSproc, int minOccurs, int maxOccurs,
            string defaultValue, string regex, string type, uint flags
        ) {
            this._method      = method;
            this._name        = name;
            this._nameInSproc = nameInSproc;
            this._minOccurs   = minOccurs;
            this._maxOccurs   = maxOccurs;
            this._flags       = flags;
            this._default     = defaultValue;

            if ((this._type = Type.GetType("System." + type)) == null)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_CONFIG_UNKNOWN_TYPE, string.Format("Unknown type '{0}' for parameter '{1}'", type, name)
                );
            }

            try {
                this._dbType = (DbType) Enum.Parse(typeof(DbType), type, true);
            } catch (ArgumentException ae) {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_CONFIG_UNKNOWN_TYPE, string.Format("Unknown type '{0}' for parameter '{1}'", type, name), ae
                );
            }

            if (minOccurs < 0)
            {
                throw new ConfigException(HResult.XONLINE_E_FSE_CONFIG_MIN_OCCURS_INVALID, "minOccurs < 0");
            }

            if (maxOccurs < 1)
            {
                throw new ConfigException(HResult.XONLINE_E_FSE_CONFIG_MAX_OCCURS_INVALID, "maxOccurs < 1");
            }

            if (maxOccurs < minOccurs)
            {
                throw new ConfigException(HResult.XONLINE_E_FSE_CONFIG_OCCURENCE_INVERSION, "minOccurs > maxOccurs");
            }

            if (maxOccurs > 1)
            {
                this._flags |= (ushort) FseParamFlags.Array;
            }

            if (! string.IsNullOrEmpty(regex))
            {
                this._regex = new Regex(regex);
            }
        }

        internal bool IsArray {
            get { return (_flags & (uint) FseParamFlags.Array) != 0; }
        }

        internal string Name
        {
            get { return _name; }
        }

        internal string NameInSproc
        {
            get { return _nameInSproc; }
        }

        internal int MinOccurs {
            get { return _minOccurs; }
        }

        internal bool IsDeprecated
        {
            get { return (_flags & (uint) FseParamFlags.Deprecated) != 0; }
        }

        internal bool IsHashed
        {
            get { return (_flags & (uint) FseParamFlags.Hashed) != 0; }
        }

        internal bool IsKeyed
        {
            get { return (_flags & (uint) FseParamFlags.Keyed) != 0; }
        }

        internal bool IsInternal
        {
            get { return (_flags & (uint) FseParamFlags.Internal) != 0; }
        }

        internal bool IsOptional
        {
            get { return _minOccurs == 0; }
        }

        internal bool IsWebstore
        {
            get { return (_flags & (uint) FseParamFlags.Webstore) != 0; }
        }

        internal int MaxOccurs
        {
            get { return _maxOccurs; }
        }

        internal string Default
        {
            get { return _default; }
        }

        internal Regex Regex
        {
            get { return _regex; }
        }

        internal Type Type
        {
            get { return _type; }
        }

        internal DbType DbType
        {
            get { return _dbType; }
        }

        internal Object Convert(string value)
        {
            Object returnValue;

            try
            {
                // empty strings convert to "1/1/1 12:00 AM" which  is  bad
                // so we special case them to look like a conversion errors

                if ((_type == Type.GetType("System.DateTime")) && string.IsNullOrEmpty(value))
                {
                    // real DateTime conversion errors look just like  this
                    throw new FormatException("The string was not recognized as a valid DateTime");
                }

                // everything else is either convertible or we do reflection

                if (_type is IConvertible)
                {
                    if (_type.IsEnum == true)
                        returnValue = (Enum.Parse(_type, value, true));
                    else if (_type != typeof(bool))
                        returnValue = (System.Convert.ChangeType(value, _type));
                    else
                    {
                        if (value == "1")
                            returnValue = (System.Convert.ChangeType(true, _type));
                        else if (value == "0")
                            returnValue = (System.Convert.ChangeType(false, _type));
                        else
                        {
                            returnValue = (System.Convert.ChangeType(value, _type));
                        }
                    }
                }

                // type converters are slower.  they use reflection  hopefully
                // the type is convertible and is handled by the code up above

                else
                {
                    returnValue = TypeDescriptor.GetConverter(_type).ConvertFromString(value);
                }

                return returnValue;
            }

            catch (Exception e)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_CONVERSION_ERROR, "Error converting parameter '" + _name + "' to type '" + _type + "'", e
                );
            }
        }

        internal void Validate(ref string[] values)
        {
            Validate(ref values, true);
        }

        // this method is recursive.  if there is a  delegate  we
        // call the delegate and call ourselves again with a flag

        internal void Validate(ref string[] values, bool delegation)
        {
            if (values == null)
            {
                if (IsOptional)
                    return;
                else
                {
                    throw new ParameterException(
                        HResult.XONLINE_E_FSE_PARAM_MISSING,
                        "Missing required parameter '" + _name + "'"
                    );
                }
            }

            if (values.Length < _minOccurs)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_TOO_FEW,
                    "Too few values for parameter '" + _name + "'"
                );
            }

            if (values.Length > _maxOccurs)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_TOO_MANY,
                    "Too many values for parameter '" + _name + "'"
                );
            }

            foreach (string value in values)
            {
                // null is valid for any non-optional parameter. Validate parameter
                // exists before checking for regex
                if (value.ToLower() == "null")
                {
                    if (IsOptional)
                        continue;
                    else
                    {
                        throw new ParameterException(
                            HResult.XONLINE_E_FSE_PARAM_IS_NULL,
                            "Required parameter '" + _name + "' is null"
                        );
                    }
                }

                // validate against regex
                if (_regex != null)
                {
                    string s = value.ToLower() == "null" ? string.Empty : FseUtil.UnescapeString(value);
                    
                    Match match = _regex.Match(s);

                    if ((! match.Success) || (match.Length != value.Length))
                    {
                        throw new ParameterException(
                            HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE,
                            "Error matching regular expression for parameter '" + _name + "'"
                        );
                    }
                }

                // will throw if there is a conversion  problem
                Convert(value);
            }

            if (delegation)
            {
                try
                {
                    // check delegate returning true means it messed with the value
                    if (_method.Service.CheckParamDelegates(_name, ref values))
                    {
                        Validate(ref values, false);
                    }
                }

                // wrap the exception to include context of specific parameter name
                catch (Exception e)
                {
                    throw new ApplicationException(HResult.XONLINE_E_FSE_PARAM_DELEGATE_FAILURE, "Error in input filter for parameter '" + _name + "'", e);
                }
            }
        }
    }

    // Define the delegate type for allowing the application to override
    //  or otherwise special case parameter values. 
    public delegate string [] FseParamDelegate (string [] value);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseResult.cs ===
// FseResult.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Xml;

using xonline.common.service;

namespace xonline.common.fse
{
    public interface FseResult
    {
        // Methods
        XmlDocument GetDocument();
        byte[] GetBytes();
    }

    public interface FsePagedResult : FseResult
    {
        // Properties
        int FirstItem { get; }
        int LastItem  { get; }
        int NumItems  { get; }
    }

    public interface FseExceptionResult : FseResult
    {
        HResult HResult { get; }
        string  Message { get; }
    }

    internal class FseWrappedResult : FseResult
    {
        private FseResult _result;
        private DateTime  _expiration;

        internal FseWrappedResult(FseResult result, DateTime expiration)
        {
            _result = result;
            _expiration = expiration;
        }

        public DateTime Expiration
        {
            get { return _expiration; }
        }

        public byte[] GetBytes()
        {
            return _result.GetBytes();
        }

        public XmlDocument GetDocument()
        {
            return _result.GetDocument();
        }

        public FseResult Result
        {
            get { return _result; }
        }
    }

    internal class FseCacheResult : FseWrappedResult
    {
        internal FseCacheResult(FseResult result, DateTime expiration) : base(result, expiration)
        {
        }
    }

    /// <summary>
    /// An FSEResult implementation that .
    /// </summary>
    public class FSEByteArrayResult : FseResult
    {
        private Byte[] _bytes;

        public FSEByteArrayResult(byte[] bytes)
        {
            _bytes = bytes;
        }

        public XmlDocument GetDocument()
        {
            return null;
        }

        public byte[] GetBytes()
        {
            return _bytes;
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FsePlugin.cs ===
using System.Collections;
using System.Xml;

using xonline.common.service;

namespace xonline.common.fse
{
    public interface FsePlugin
    {
        byte[] Execute(Hashtable args, ref HResult hresult);
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseState.cs ===
//
// FseState.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System;
using System.Collections.Generic;

using xonline.common.service;

namespace xonline.common.fse
{
    internal class FseState
    {
        private FseValue   _webstore;
        private FseMethod  _method;
        private FseValue[] _values;
        private FseValue   _pageNum;
        private FseValue   _pageSize;

        private Dictionary<string, FseValue> _dictionary = new Dictionary<string, FseValue>();

        internal FseState(FseMethod method, string[] names, string[] values, bool skipMissing)
        {
            // make sure the number of names/values supplied
            // does not exceed the maximum  for  the  method

            if (names != null)
            {
                if (names.Length > method.MaxOccurs)
                {
                    throw new MethodException(
                        HResult.XONLINE_E_FSE_PARAM_TOO_MANY,
                        "Total number of values for parameters exceeds maxOccurs"
                    );
                }
            }

            // our link back to  the  method  configuration

            _method = method;

            // create a dictionary of values. add values as
            // we go keeping count of any deprecated values

            int deprecated = 0, missing = 0;
            List<FseValue> list = new List<FseValue>();

            foreach (FseParam param in _method.Params)
            {
                FseValue value = new FseValue(param);
                _dictionary.Add(param.Name.ToLower(), value);
                list.Add(value);

                if (param.IsWebstore) _webstore = value;
                if (param.IsDeprecated) deprecated++;

                if (string.Compare(param.Name, "PageNum", true) == 0)
                    _pageNum = value;
                else if (string.Compare(param.Name, "PageSize", true) == 0)
                {
                    _pageSize = value;
                }
            }

            // their must be an equal number of  names  and
            // values, and not too many of  values  overall

            if (names != null)
            {
                // after that we spin through the names and
                // their values to the specified parameters

                int first = 0, last;

                for (last = 0; last < names.Length; last++)
                {
                    if (names[last] == names[first]) continue;
                    Add(names[first], values, first, last - 1);

                    first = last;
                }

                // there will always be one name/value left
                // make sure we add that to the  dictionary

                Add(names[first], values, first, last - 1);
            }

            // validate all the values, and then put  those
            // that are not deprecated into the final array

            if (skipMissing) {
                foreach (FseValue value in list)
                {
                    if (value.Param.IsDeprecated) continue;
                    if (value.Values == null) missing++;
                }
            }

            int i = 0;
            _values = new FseValue[list.Count - deprecated - missing];

            foreach (FseValue value in list)
            {
                if (value.Param.IsDeprecated) continue;
                if (skipMissing && value.Values == null) continue;

                value.Validate();
                _values[i++] = value;
            }

            // the page size is not parsed/validated as a valid
            // integer until just above.  now we can check this

            if (! FseValue.IsNullOrEmpty(_pageSize))
            {
                if ((PageSize < 1) || (PageSize > method.MaxPageSize))
                {
                    throw new ParameterException(
                        HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE, "Invalid value for parameter 'PageSize'"
                    );
                }
            }

            if (! FseValue.IsNullOrEmpty(_pageNum))
            {
                if ((PageNum < method.CachePageBase) || (PageNum > ((int.MaxValue - method.DbPageSize) / PageSize)))
                {
                    throw new ParameterException(
                        HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE, "Invalid value for parameter 'PageNum'"
                    );
                }
            }
        }

        internal FseMethod Method
        {
            get { return _method; }
        }

        internal FseValue[] Values
        {
            get { return _values; }
        }

        internal int PageNum
        {
            get {
                if (FseValue.IsNullOrEmpty(_pageNum)) throw new Exception("No page number provided");
                return int.Parse(_pageNum.Values[0]);
            }

            set { _pageNum.Values[0] = value.ToString(); }
        }

        internal int PageSize
        {
            get
            {
                if (FseValue.IsNullOrEmpty(_pageSize)) throw new Exception("No page size provided");
                return int.Parse(_pageSize.Values[0]);
            }

            set { _pageSize.Values[0] = value.ToString(); }
        }

        private void Add(string name, string[] values, int i, int j)
        {
            // check method to see if parameter  is  known
            // if not then we  are  done  with  this  call

            FseValue value;

            if (! _dictionary.TryGetValue(name.ToLower(), out value))
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_UNEXPECTED,
                    "Unrecognized parameter, '" + name + "'"
                );
            }

            if (value.Param.IsInternal) {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_INTERNAL,
                    "Parameter '" + name + "' cannot be passed in the query string"
                );
            }

            value.Add(values, i, j);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseUtil.cs ===
//
// FseUtil.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//



namespace xonline.common.fse
{
    internal class FseUtil {
        private FseUtil() {
        }

        internal static string UnescapeString(string val)
        {
            int i;
            while ( (i = val.ToLower().IndexOf("\u001b" + "null")) != -1 )
            {
                val = val.Substring(0, i) + val.Substring(i+1);
            }
            return val;
        }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseRequest.cs ===
// FseRequest.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using xonline.common.service;

namespace xonline.common.fse
{
    public class FseRequest {

        private int      _cacheOverride;
        private ulong    _hashValue;
        private string   _methodName;
        private string[] _names;
        private string[] _values;

        public FseRequest(string methodName, string[] names, string[] values)
        {
            Init(methodName, names, values, 0, 0);
        }

        public FseRequest(string methodName, string[] names, string[] values, ulong hashValue)
        {
            Init(methodName, names, values, hashValue, 0);
        }

        public FseRequest(string methodName, string[] names, string[] values, int cacheOverride)
        {
            CheckCacheOverride(cacheOverride);
            Init(methodName, names, values, 0, cacheOverride);
        }

        public FseRequest(string methodName, string[] names, string[] values, ulong hashValue, int cacheOverride)
        {
            CheckCacheOverride(cacheOverride);
            Init(methodName, names, values, hashValue, cacheOverride);
        }

        private void CheckCacheOverride(int cacheOverride)
        {
            if (cacheOverride >= 0) return;
            throw new ParameterException(HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE, "CacheOverride must be >= 0");
        }

        private void Init(string methodName, string[] names, string[] values, ulong hashValue, int cacheOverride)
        {
            if ((names == null) ^ (values == null))
            {
                throw new MethodException(
                    HResult.XONLINE_E_FSE_PARAM_LIST_INVALID,
                    "Number of names and values do not match"
                );
            }

            // if they supply names then we do  some  quick
            // checks on values to avoid simple DOS attacks

            if (names != null)
            {
                if (names.Length != values.Length)
                {
                    throw new MethodException(
                        HResult.XONLINE_E_FSE_PARAM_LIST_INVALID,
                        "Number of names and values do not match"
                    );
                }
            }

            _cacheOverride = cacheOverride;
            _hashValue     = hashValue;
            _methodName    = methodName;
            _names         = names;
            _values        = values;
        }

        public int CacheOverride { get { return _cacheOverride; }}
        public ulong HashValue   { get { return _hashValue; }}
        public string MethodName { get { return _methodName; }}
        public string[] Names    { get { return _names; }}
        public string[] Values   { get { return _values; }}
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseResponse.cs ===
// FseResponse.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Xml;

using xonline.common.service;

namespace xonline.common.fse
{
    public class FseResponse {

        private XmlNode  _xmlNode;
        private byte[]   _bytes;
        private uint     _hResult;
        private DateTime _expiration;
        private int      _length;
        
        internal FseResponse(XmlNode xmlNode, HResult hr, DateTime expiration)
        {
            _xmlNode    = xmlNode;
            _hResult    = hr;
            _expiration = expiration;

            if ((_xmlNode != null) && (_xmlNode.OuterXml != null))
            {
                _length = _xmlNode.OuterXml.Length;
            }
        }

        internal FseResponse(byte[] bytes, HResult hr, DateTime expiration)
        {
            _bytes = bytes;
            _hResult = hr;
            _expiration = expiration;

            if (_bytes != null )
            {
                _length = _bytes.Length;
            }
        }

        public XmlNode XmlNode { get { return _xmlNode; } }
        public Byte[] Bytes        { get { return _bytes; } }
        public int Length          { get { return _length; }}
        public HResult HResult     { get { return _hResult; }}
        public DateTime Expiration { get { return _expiration; }}
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseService.cs ===
//
// FseService.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//

using System.Collections;
using System.Collections.Generic;
using System.Data.SqlClient;

using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.sql.sqlclient;

namespace xonline.common.fse
{
    public partial class FseService
    {
        private string          _api;
        private string          _interface;
        private Hashtable       _methods;

        private FseCache         _cache;
        private FseResultHandler _resultHandler;
        private FsePageHandler   _pageHandler;
        private bool             _isPaged;

        private Dictionary<string, FseParamDelegate> _delegates;
        public const string CACHE_DURATION_OVERRIDE = "FSE_CACHE_DURATION_OVERRIDE";

        public FseService(
            string           api,
            string           database,
            FseResultHandler resultHandler,
            FsePageHandler   pageHandler
        ) {
            this._api       = api;
            this._interface = database;
            this._cache     = new FseCache(this);

            // get config settings to prime the cache and  then
            // setup a change event  handler  for  the  setting

            Config.GetSetting(Setting.fse_configChange);
            Config.SettingChange += new SettingChangeEventHandler(SettingChange);
            Config.VirtualInterfaceChange += new VirtualInterfaceChangeEventHandler(VirtualInterfaceChange);

            // all applications must provide a  result  handler
            // but pageHandler is optional based on page config 

            if (resultHandler != null)
                this._resultHandler = new FseWrappedResultHandler(resultHandler);
            else {
                throw new ApplicationException(
                    HResult.XONLINE_E_FSE_HANDLER_MISSING,
                    string.Format("Application '{0}' did not supply a result handler")
                );
            }

            if (pageHandler != null)
            {
                _pageHandler = new FseWrappedPageHandler(pageHandler);
            }

            // load the API configuration  from  npdb  database
            // this will check if they must have a page handler

            Load();
        }


        public void Load() {

            bool isPaged = false;
            Hashtable methods = new Hashtable();
        
            using (SqlClient cmd = new SqlClient(_interface))
            {
                // get a list of all the methods for the specific api

                cmd.StoredProc = "p_fse_get_methods";
                cmd.AddParameter("@vc_api_name", _api);

                using (SqlDataReader reader = cmd.Execute())
                {
                    while (reader.Read())
                    {
                        string methodName = reader.GetString(
                            reader.GetOrdinal("vc_method_name")
                        );

                        try
                        {
                            FseMethod method = new FseMethod(this, methodName);

                            // track if any methods are paged. if so then
                            // then we will need a page handler later  on

                            if (method.IsPaged) isPaged = true;
                            methods.Add(method.Name.ToLower(), method);
                        }

                        // keep going.  method will simply be unavailable

                        catch (ConfigException e)
                        {
                            Xom.NtEvent(XEvent.Id.COMMON_FSE_CONFIGURATION_ERROR, e,
                                "Error loading method '{0}'", methodName
                            );
                        }
                    }

                    if (methods.Count == 0)
                    {
                        throw new ConfigException(
                            HResult.XONLINE_E_FSE_CONFIG_METHOD_NOT_FOUND,
                            string.Format("No methods found for api '{0}'", _api)
                        );
                    }

                    reader.Close();
                }
            }

            // require page handlers when  an  application  has
            // paged methods (with PageSize/PageNum  parameters)

            if (isPaged)
            {
                if (_pageHandler == null) {
                    throw new ApplicationException(
                        HResult.XONLINE_E_FSE_HANDLER_MISSING,
                        "Application configuration requires page handler"
                    );
                }
            }

            // replace existing methods collection
            _isPaged = isPaged;
            _methods = methods;
        }


        internal bool CheckParamDelegates(string param, ref string [] values)
        {
            if (null == _delegates)
            {
                return false;
            }
            
            // Call delegates here            
            foreach (KeyValuePair<string, FseParamDelegate> kvp in _delegates)
            {
                // There can only be one delegate per param, so first match wins
                if (string.Equals(kvp.Key, param.ToLower()))
                {
                    string [] newValues = kvp.Value(values);

                    // Check to see if anything was changed by the delegate
                    if (newValues.Length != values.Length)
                    {
                        values = newValues;
                        return true;
                    }

                    for (int i=0; i<newValues.Length; i++)
                    {
                        if (!newValues[i].Equals(values[i]))
                        {
                            values = newValues;
                            return true;
                        }
                    }
                }
            }

            return false;
        }

        public void AddParamDelegate(string paramName, FseParamDelegate paramDelegate)
        {
            if (null == _delegates)
            {
                _delegates = new Dictionary<string, FseParamDelegate>();                
            }

            if (_delegates.ContainsKey(paramName.ToLower()))
            {
                throw new ConfigException(
                    HResult.XONLINE_E_FSE_CONFIG_DUPLICATE_DELEGATE,
                    string.Format("Duplicate delegate detected for parameter named " + paramName, _api));
            }
            
            _delegates.Add(paramName.ToLower(), paramDelegate);
        }

        public void Flush(string methodName, string[] names, string[] values, bool exactMatch)
        {
            FseMethod method = null;
            FseState  state  = null;

            if (methodName != null)
            {
                if ((method = Find(methodName)) == null)
                {
                    throw new MethodException(
                        HResult.XONLINE_E_FSE_METHOD_NOT_FOUND,
                        string.Format("Method '{0}' not found", methodName)
                    );
                }

                if (names != null & values != null)
                {
                    state = new FseState(method, names, values, ! exactMatch);
                }
            }

            _cache.Flush(methodName, state, exactMatch);
        }

        internal FseMethod Find(string name) {
            FseMethod method = (FseMethod) _methods[name.ToLower()];
            if (method != null) return method;

            throw new MethodException(
                HResult.XONLINE_E_FSE_METHOD_NOT_FOUND,
                string.Format("Method '{0}.{1}' not found", _api, name)
            );
        }

        internal string Api
        {
            get { return _api; }
        }

        internal FseCache Cache
        {
            get { return _cache; }
        }

        internal string Interface
        {
            get { return _interface; }
        }

        internal FsePageHandler PageHandler
        {
            get { return _pageHandler; }
        }

        internal FseResultHandler ResultHandler
        {
            get { return _resultHandler; }
        }

        public void VirtualInterfaceChange(object sender, VirtualInterfaceChangeEventArgs eventArgs)
        {
            // do nothing so we simply accept the change.

        }

        public void SettingChange(object sender, SettingChangeEventArgs eventArgs)
        {
            if (eventArgs.Setting == Setting.fse_configChange) Load();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fseplugin\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\FseValue.cs ===
// FseValue.cs
// Copyright (c) Microsoft Corporation. All Rights Reserved.

using System;
using System.Collections.Generic;

using xonline.common.service;

namespace xonline.common.fse
{
    internal class FseValue
    {
        private FseParam     _param;
        private List<string> _list;
        private string[]     _values;

        internal FseValue(FseParam param)
        {
            _param  = param;
            _list = new List<string>();
        }

        internal string[] Values
        {
            get {
                return _values;
            }
        }

        internal FseParam Param
        {
            get { return _param; }
        }

        internal static bool IsNullOrEmpty(FseValue value)
        {
            return value == null || value._values == null || value._values.Length == 0;
        }

        internal void Add(string[] values, int i, int j)
        {

            // add the range of array values  to  our  list
            // we modified the list, so clear out the array

            try
            {
                while (i <= j) _list.Add(values[i++]);
                if (_list.Count == 0) return;
                _values = new string[_list.Count];
                _list.CopyTo(_values);
            }

            // out of bounds is not user induced,  we don't
            // waste time checking, but catch if it happens

            catch (IndexOutOfRangeException ioore)
            {
                throw new InternalException(
                    HResult.XONLINE_E_FSE_PARAM_INTERNAL_ERROR,
                    "Index out of range", ioore
                );
            }
        }

        internal void Validate() {

            // if they have not provided an optional  value
            // and there's a default, then use that default

            if ((_list.Count == 0) && (_param.IsOptional))
            {
                Add(new string[] { _param.Default }, 0, 0);
            }

            // use the parameter (which has type info,  and
            // make sure the value is valid for this  param


            _param.Validate(ref _values);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\obj\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__fse_2_none_12.4.56.0_none_d1c5831fa41e4628
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_fse_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.manifest
XP_MANIFEST_PATH=manifests\x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.cat
XP_CATALOG_PATH=manifests\x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.cat
XP_PAYLOAD_PATH=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_fse_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fse\objd\i386\_asmid.inc ===
ASSEMBLY_IDENTITY_KEY_FORM=x86__fse_2_none_12.4.56.0_none_d1c5831fa41e4628
ASSEMBLY_IDENTITY_XP_KEY_FORM=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2
ASSEMBLY_IDENTITY_CULTURE=
ASSEMBLY_IDENTITY_NAME=_fse_2
ASSEMBLY_IDENTITY_PROCESSOR_ARCHITECTURE=x86
ASSEMBLY_IDENTITY_PUBLIC_KEY=
ASSEMBLY_IDENTITY_PUBLIC_KEY_TOKEN=
ASSEMBLY_IDENTITY_TYPE=
ASSEMBLY_IDENTITY_TYPE_NAME=
ASSEMBLY_IDENTITY_VERSION=12.4.56.0
XP_KEY_FORM=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2
XP_MANIFEST_DIRECTORY=manifests
XP_MANIFEST_NAME=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.manifest
XP_MANIFEST_PATH=manifests\x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.manifest
XP_CATALOG_DIRECTORY=manifests
XP_CATALOG_NAME=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.cat
XP_CATALOG_PATH=manifests\x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2.cat
XP_PAYLOAD_PATH=x86__fse_2_no-public-key_12.4.56.0_x-ww_d365f7a2
_DELAY_SIGN=0
!if [set _ASMIDTOATTRIBS_TLBIMP=]
!endif
CODESIGN_TESTKEY=
_TLBIMP_FLAGS=$(_TLBIMP_FLAGS)  /asmversion:12.4.56.0
_ASSEMBLY_IDENTITY=_fse_2,processorArchitecture=x86,version=12.4.56.0,publicKeyToken=neutral
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\fseplugin\PluginTest.cs ===
using System;
using System.Collections;
using System.Collections.Generic;
using System.Net;
using System.IO;

using xonline.common.service;
using xonline.common.fse;

namespace xonline.common.fseplugin
{
    /// <summary>
    /// FsePlugin classes live in the XblMarketplace.dll. In order to dynamically load and execute
    /// this plugin, it is required to be in XblMarketplace.
    /// </summary>
    public class PluginTest : FsePlugin
    {
        /// <summary>
        /// Executes the test case specified
        /// </summary>
        /// <param name="args">Arguments passed from Fse</param>
        /// <param name="hresult">Return HResult</param>
        /// <returns>XML document</returns>
        public byte[] Execute(Hashtable args, ref HResult hresult)
        {
            // If specified to, throw a handy exception
            if (args["ThrowException"] != null)
            {
                switch ((string)args["ThrowException"])
                {
                    case "FileLoadException":
                        throw new FileLoadException();
                    case "Exception":
                    default:
                        throw new Exception("Exception!");
                }                
            }

            // Read the XML from this URL location (it will be a marketplace http query)
            // Convert the xml into an array of bytes.
            string url = (string)args["Url"];
            HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url);
            HttpWebResponse response = (HttpWebResponse)request.GetResponse();
            Stream result = response.GetResponseStream();
            List<byte> bytes = new List<byte>();
            byte[] buffer = new byte[1024];
            int count = 0;
            do
            {
                // fill the buffer with data
                count = result.Read(buffer, 0, buffer.Length);
                if (count != 0)
                {
                    bytes.AddRange(buffer);
                }
            }
            while (count > 0); // any more data to read?
            return bytes.ToArray();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\geofence\geoFence.cs ===
using System;
using System.Collections.Generic;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.offer;
using xonline.common.protocol;
using xonline.common.utilities;
using xonline.common.user;

using Microsoft.MSCOM.Geo.GeoLocationAPI;

[assembly: XomAreaDefinition(XomAreaName.geoFenceTrace)]
[assembly: XomAreaDefinition(XomAreaName.geoFenceLog)]

namespace xonline.common.geofence
{
    public class GeoFenceException : XRLException
    {
        public GeoFenceException(string logLine) : base(HResult.XONLINE_E_GEO_DENIED,
            XEvent.Id.XBOS_OFFER_INELIGIBLE_FOR_PURCHASE, logLine)
        {
            LogLine = logLine;
        }

        public string LogLine;
    }

    public class GeoFenceClient
    {
        public static string GetCountryCodeFromIPAddress(string featureArea, User u, string ipAddress,
            ulong machinePuid)
        {
            HandlePerfCountersBegin(featureArea);

            GeoInfo geoInfo;

            try
            {
                geoInfo = MSCOMGeoAPIWrapper.GetGeoInfoFromIPAddress(ipAddress);
            }
            catch (Exception e)
            {
                if (AllowAccessOnGeoInfoExceptions)
                {
                    Xom.NtEvent(XEvent.Id.GEOFENCE_COMPONENT_RETURNED_EXCEPTION, e,
                        "GeoFencing area '{0}': failed to look up IP Address {1}, but will allow user access because geofencing_allowAccessOnGeoInfoExceptions=true.",
                        featureArea, ipAddress
                    );

                    return null;
                }
                else
                {
                    throw new XRLException(HResult.XONLINE_E_GEOFENCING_RETURNED_NULL, XEvent.Id.GEOFENCE_COMPONENT_RETURNED_EXCEPTION,
                        string.Format("GeoFencing area '{0}': failed to look up IP Address {1}: {2}",
                            featureArea, ipAddress, e.ToString()));
                }
            }

            if (geoInfo == null)
            {
                if (AllowAccessOnGeoInfoNulls)
                {
                    Xom.NtEvent(XEvent.Id.GEOFENCE_COMPONENT_RETURNED_NULL,
                        "GeoFencing area '{0}': returned NULL for IP Address {1}", featureArea, ipAddress
                    );

                    return null;
                }
                else
                {
                    throw new XRLException(HResult.XONLINE_E_GEOFENCING_RETURNED_NULL, XEvent.Id.GEOFENCE_COMPONENT_RETURNED_NULL,
                        string.Format("GeoFencing area '{0}': returned NULL for IP Address {1}",
                            featureArea, ipAddress));
                }
            }

            return GetTerritoryMappedCountryCode(geoInfo.CountryRegionCode);
        }

        // this method enforces the rule that a user must be present in their account country in order
        // to complete the action they are trying to perform
        public static void EnforceUserInAccountCountry(string featureArea, User u, string ipAddress,
            ulong machinePuid, Guid mediaId)
        {
            if (u.IsGeoFenceExempt)
                return;

            string accountCountryCode = CountryDictionary.CountryCode(u.CountryId);
            string countryCode = GetCountryCodeFromIPAddress(featureArea, u, ipAddress, machinePuid);
            if (countryCode != null)
            {
                if (string.Compare(countryCode, accountCountryCode, true) != 0)
                {
                    string [] additionalData = new string [] { accountCountryCode, mediaId.ToString() };
                    HandleGeoFenceEvent(featureArea, "UserNotInAccountCountry", u.Puid, machinePuid, ipAddress,
                        countryCode, additionalData);
                }
            }
        }

        internal static void CheckForVideoMarketplaceGeoFencing(string featureArea, User u, string ipAddress,
            ulong machinePuid, WMID wmid)
        {
            if (!VideoGeoFencingEnabled)
                return;

            if (u.IsGeoFenceExempt)
                return;

            string [] additionalData = new string [] { wmid.wmid, wmid.videoType.ToString("d") };

            string countryCode = GetCountryCodeFromIPAddress(featureArea, u, ipAddress, machinePuid);
            if (countryCode != null)
            {
                if (string.Compare(countryCode, "US", true) != 0)
                {
                    HandleGeoFenceEvent(featureArea, "Fenced", u.Puid, machinePuid, ipAddress,
                        countryCode, additionalData);
                }
            }
        }

        public static void CheckForOfferGeoFencing(string featureArea, User u, string ipAddress,
            ulong machinePuid, ulong [] offerIDs)
        {
            if (!OfferGeoFencingEnabled)
                return;

            if (u.IsGeoFenceExempt)
                return;

            // we want to call the GeoInfo API in a lazy fashion--only if we must
            bool geoInfoChecked = false;
            string countryCode = null;
            int countryID = -1;

            foreach (ulong offerID in offerIDs)
            {
                Offer o = Offer.CreateInstance(offerID);
                string [] additionalData = new string [] { o.OfferId.ToString("x") };

                if (!o.RequiresGeofencing)
                    continue;

                if (geoInfoChecked == false)
                {
                    countryCode = GetCountryCodeFromIPAddress(featureArea, u, ipAddress, machinePuid);
                    if (countryCode != null)
                        countryID = CountryDictionary.CountryId(countryCode);

                    geoInfoChecked = true;
                }

                if (countryID == -1)
                    continue;

                if (!o.OfferingIsOffered((byte) countryID, u.Tier, (int) PaymentTypeEnum.All))
                {
                    HandleGeoFenceEvent(featureArea, "Fenced", u.Puid, machinePuid, ipAddress,
                        countryCode, additionalData);
                }
            }
        }

        private static void HandleGeoFenceEvent(string featureArea, string reasonCode, ulong userPuid,
            ulong machinePuid, string ipAddress, string countryCode, string [] additionalData)
        {
            HandlePerfCountersForDenial(featureArea);

            string szLog = string.Join("|", new string []
            {
                featureArea,
                reasonCode,
                userPuid.ToString("x"),
                machinePuid.ToString("x"),
                ipAddress,
                countryCode == null ? "" : countryCode,
                string.Join("|", additionalData)
            });

            Xom.Log(XomAreaName.geoFenceLog, szLog);

            // note this exception shouldn't get logged to the event log, since
            // it is just being used to pass up the error code

            throw new GeoFenceException(szLog);
        }

        private static void HandlePerfCountersBegin(string featureArea)
        {
            GeoFencingCounters.Counters.ChecksPerSecond.Increment();
            GeoFencingCounters.Counters.ChecksTotal.Increment();

            GeoFencingCounters apiCounters = GeoFencingCounters.Counters[featureArea];
            apiCounters.ChecksPerSecond.Increment();
            apiCounters.ChecksTotal.Increment();
        }

        private static void HandlePerfCountersForDenial(string featureArea)
        {
            GeoFencingCounters.Counters.DenialsPerSecond.Increment();
            GeoFencingCounters.Counters.DenialsTotal.Increment();

            GeoFencingCounters apiCounters = GeoFencingCounters.Counters[featureArea];
            apiCounters.DenialsPerSecond.Increment();
            apiCounters.DenialsTotal.Increment();
        }

        public static bool VideoGeoFencingEnabled
        {
            get
            {
                return Config.GetBoolSetting(Setting.geofencing_videoGeoFencingEnabled);
            }
        }

        public static bool OfferGeoFencingEnabled
        {
            get
            {
                return Config.GetBoolSetting(Setting.geofencing_offerGeoFencingEnabled);
            }
        }

        public static bool AnyGeoFencingEnabled
        {
            get
            {
                return VideoGeoFencingEnabled || OfferGeoFencingEnabled;
            }
        }

        public static bool AllowAccessOnGeoInfoExceptions
        {
            get
            {
                return Config.GetBoolSetting(Setting.geofencing_allowAccessOnGeoInfoExceptions);
            }
        }

        public static bool AllowAccessOnGeoInfoNulls
        {
            get
            {
                return Config.GetBoolSetting(Setting.geofencing_allowAccessOnGeoInfoNulls);
            }
        }

#region TerritoryMapping
        // this method finds the country code for a given territory
        // for Marketplace, territories should be treated as their associated country
        public static string GetTerritoryMappedCountryCode(string countryCode)
        {
            countryCode = countryCode.ToUpper();

            if (_territoryMapping != null && _territoryMapping.ContainsKey(countryCode))
            {
                countryCode = _territoryMapping[countryCode];
            }

            return countryCode;
        }

        private static Dictionary<string,string> _territoryMapping = new Dictionary<string,string>();

        public static void Init()
        {
            string[] mappings = Config.GetMultiSetting(MultiSetting.geofencing_territoryMapping);
            Config.MultiSettingChange += new MultiSettingChangeEventHandler(MultiSettingChange);
            Load(mappings);
        }

        public static void MultiSettingChange(object sender, MultiSettingChangeEventArgs eventArgs)
        {
            if (eventArgs.MultiSetting == MultiSetting.geofencing_territoryMapping)
            {
                Xom.Trace(XomAreaName.geoFenceTrace, LogLevel.L_LOW, "Detected configuration change for territory mappings");
                Load(eventArgs.ValueNew);
            }
        }

        public static void Load(string[] mappings)
        {
            Dictionary<string,string> dictionary = new Dictionary<string,string>();
            Xom.Trace(XomAreaName.geoFenceTrace, LogLevel.L_LOW, "Reloading territory mappings");

            foreach (string mapping in mappings) {

                // parse the mapping
                string[] s = mapping.Split('=');

                if ((s.Length != 2) || (CountryDictionary.CountryId(s[1]) == 0))
                {
                    Xom.NtEvent(XEvent.Id.GEOFENCE_TERRITORY_MAPPING_INVALID, "Invalid territory mapping '" + mapping + "'");
                    return;
                }

                string territoryCode = s[0].ToUpper();
                string countryCode   = s[1].ToUpper();

                // duplicate entries are  logged,  but  ambiguous  entries
                // are logged and then we fail the whole load by returning

                if (dictionary.ContainsKey(territoryCode))
                {
                    if (((string) dictionary[territoryCode]) == countryCode)
                        Xom.NtEvent(XEvent.Id.GEOFENCE_TERRITORY_MAPPING_DUPLICATE, "Duplicate mapping for territory '{0}'", s[0]);
                    else {
                        Xom.NtEvent(XEvent.Id.GEOFENCE_TERRITORY_MAPPING_AMBIGUOUS, "Ambiguous mapping for territory '{0}'", s[0]);
                        return;
                    }
                }

                // not a duplicate, not ambiguous, then add  it  to  table

                else
                {
                    Xom.Trace(XomAreaName.geoFenceTrace, LogLevel.L_LOW, "Adding territory mapping '{0}'", mapping);
                    dictionary.Add(territoryCode, countryCode);
                }
            }

            // replace existing dictionary with the new one
            _territoryMapping = dictionary;
        }
#endregion
    }

    public class MSCOMGeoAPIWrapper
    {
        private static void HandlePerfCountersBegin(string apiName)
        {
            MSCOMGeoAPICounters.Counters.CallsPerSecond.Increment();
            MSCOMGeoAPICounters.Counters.CallsTotal.Increment();

            MSCOMGeoAPICounters apiCounters = MSCOMGeoAPICounters.Counters[apiName];
            apiCounters.CallsPerSecond.Increment();
            apiCounters.CallsTotal.Increment();
        }

        private static void HandlePerfCountersEnd(string apiName, APIResultEnum result, XomRequestTimeElapsed timeElapsed)
        {
            MSCOMGeoAPICounters.Counters.CallsTime.IncrementBy(timeElapsed.TimeElapsed);
            MSCOMGeoAPICounters.Counters.CallsTimeBase.Increment();

            MSCOMGeoAPICounters apiCounters = MSCOMGeoAPICounters.Counters[apiName];
            apiCounters.CallsTime.IncrementBy(timeElapsed.TimeElapsed);
            apiCounters.CallsTimeBase.Increment();

            if (result == APIResultEnum.Null)
            {
                MSCOMGeoAPICounters.Counters.NullResponsesPerSecond.Increment();
                MSCOMGeoAPICounters.Counters.NullResponsesTotal.Increment();

                apiCounters.NullResponsesPerSecond.Increment();
                apiCounters.NullResponsesTotal.Increment();
            }
            else if (result != APIResultEnum.Success)
            {
                MSCOMGeoAPICounters.Counters.CallsFailedPerSecond.Increment();
                MSCOMGeoAPICounters.Counters.CallsFailedTotal.Increment();

                apiCounters.CallsFailedPerSecond.Increment();
                apiCounters.CallsFailedTotal.Increment();
            }
        }

        protected enum APIResultEnum
        {
            Success,
            Failed,
            Null
        }

        private static void LogApiCall(string apiName, APIResultEnum result, long millisecondsElapsed, string [] inParams,
            string [] outParams, string errorDetails)
        {
            string resultString;
            switch (result)
            {
                case APIResultEnum.Success:
                    resultString = "Success";
                    break;

                case APIResultEnum.Failed:
                    resultString = "Failed";
                    break;

                case APIResultEnum.Null:
                    resultString = "Null";
                    break;

                default:
                    resultString = "Unknown";
                    break;
            }

            string outParamsString;
            if (result == APIResultEnum.Success)
            {
                if (outParams == null)
                    outParamsString = "";
                else
                    outParamsString = string.Join("|", outParams);
            }
            else
            {
                outParamsString = "Failed";
            }

            string szLog = string.Join("|", new string []
            {
                apiName,
                resultString,
                millisecondsElapsed.ToString(),
                string.Join("|", inParams),
                outParamsString,
                errorDetails == null ? "" : errorDetails
            });

            Xom.Log(XomAreaName.geoFenceLog, szLog);
        }

        public static GeoInfo GetGeoInfoFromIPAddress(string ipAddress)
        {
            string apiName = "GeoLocation.GetGeoInfoFromIPAddress";

            APIResultEnum result = APIResultEnum.Failed;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            string errorDetails = null;
            string [] outParams = null;

            try
            {
                HandlePerfCountersBegin(apiName);

                GeoInfo geoInfo = GeoLocation.GetGeoInfoFromIPAddress(ipAddress, "en-US", string.Empty);

                if (geoInfo == null)
                    result = APIResultEnum.Null;
                else
                    result = APIResultEnum.Success;

                outParams = new string [] { DumpGeoInfo(geoInfo) };

                return geoInfo;
            }
            finally
            {
                HandlePerfCountersEnd(apiName, result, timeElapsed);

                LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                    new string [] { ipAddress },
                    outParams,
                    errorDetails
                    );
            }
        }

        public static void InitControl()
        {
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(MSCOMGeoAPIWrapper.OnControlRequest);
        }

        protected static void OnControlRequest(object sender, ControlRequestEventArgs args)
        {
            try
            {
                switch (args.Command.ToLower())
                {
                    case "help":
                        XomControlConnection.SendMessage(
                            "Microsoft.Com GeoInfo Component help:\n  GetGeoInfoFromIPAddress <ipAddress>: test the call to the MSComGeoAPI\n\n",
                            args.RequestId
                            );
                        args.Handled = true;
                        break;

                    case "getgeoinfofromipaddress":
                        ProcessGetGeoInfoFromIPAddressRequest(args);
                        args.Handled = true;
                        break;
                }
            }
            catch(Exception e)
            {
                XomControlConnection.SendMessage("Error: " + e.ToString() + "\n\n", args.RequestId);
            }
        }

        protected static void ProcessGetGeoInfoFromIPAddressRequest(ControlRequestEventArgs args)
        {
            string ipAddress = args.CommandArgs[0];

            XomControlConnection.SendMessage(string.Format(
                "Calling GeoLocation.GetGeoInfoFromIPAddress on IP '{0}'...\n",
                    ipAddress), args.RequestId);

            try
            {
                GeoInfo geoInfo = GetGeoInfoFromIPAddress(ipAddress);
                if (geoInfo == null)
                {
                    XomControlConnection.SendMessage("Returned NULL", args.RequestId);
                }
                else
                {
                    XomControlConnection.SendMessage(string.Format(
                        "Return values:\n  CountryRegionCode: {0}\n  CountryRegionDisplayName: {1}\n  MapPointId: {2}\n  TerritoryMappedCountryCode: {3}",
                        geoInfo.CountryRegionCode, geoInfo.CountryRegionDisplayName, geoInfo.MapPointId, GeoFenceClient.GetTerritoryMappedCountryCode(geoInfo.CountryRegionCode)), args.RequestId);
                }
            }
            catch (Exception e)
            {
                XomControlConnection.SendMessage(
                    "Failed: " + e.ToString() + "\n",
                    args.RequestId
                    );
                return;
            }
        }

        public static string DumpGeoInfo(GeoInfo geoInfo)
        {
            if (geoInfo == null)
                return string.Empty;

            return string.Join("|", new string []
            {
                geoInfo.CountryRegionCode,
                geoInfo.CountryRegionDisplayName,
                geoInfo.MapPointId.ToString("d")
            });
        }

        // This function seems pointless, since it's just a micro-thin wrapper around
        // GetGeoInfoFromIPAddress. However, I found that if I just call
        // GetGeoInfoFromIPAddress directly from DoGeoFencinHealthCheck, and geofencing is
        // not installed on the machine, then we will get a FileNotFound exception
        // *before* we even get into DoGeoFencingHealthCheck. My best guess is the jitter
        // is optimizing *something* here, but I haven't been able to determine what. This
        // wrapper takes care of the problem, though.
        //
        // Can throw if geofencing is totally uninstalled, or return false if the lookup failed.
        public static bool CallGetGeoInfoFromIPAddress()
        {
            return GetGeoInfoFromIPAddress("65.52.240.200") != null;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\geofence\geoFencePerf.cs ===
using System.Diagnostics;
using xonline.common.mgmt;

namespace xonline.common.geofence
{
    [XomPerformanceCounterCategoryAttr( "Partner: MSCOM Geo", "XBox Live MSCOM Geo API Counters", true )]
    public class MSCOMGeoAPICounters : XomPerformanceCounterCategory
    {
        static public MSCOMGeoAPICounters Counters = new MSCOMGeoAPICounters();

        public MSCOMGeoAPICounters this[string api]
        {
            get
            {
                return (MSCOMGeoAPICounters) GetInstance(api);
            }
        }

		[XomPerformanceCounterAttr(
			"MSCOM Geo API requests/sec",
			"MSCOM Geo API requests per second",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter CallsPerSecond;

		[XomPerformanceCounterAttr(
			"MSCOM Geo API requests total",
			"Total MSCOM Geo API requests made in the the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter CallsTotal;

		[XomPerformanceCounterAttr(
			"MSCOM Geo API failures/sec",
			"Number of unsuccessful results returned per second in the current AppDomain.",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter CallsFailedPerSecond;

		[XomPerformanceCounterAttr(
			"MSCOM Geo API total failures",
			"Total number unsuccessful results returned in the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter CallsFailedTotal;

		[XomPerformanceCounterAttr(
			"MSCOM Geo API null responses/sec",
			"Number of null responses returned per second in the current AppDomain.",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter NullResponsesPerSecond;

		[XomPerformanceCounterAttr(
			"MSCOM Geo API total null responses",
			"Total number null responses returned in the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter NullResponsesTotal;
        [XomPerformanceCounterAttr(
			"Avg. execution time",
			"Average time taken to execute requests against MSCOM GeoInfo",
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter CallsTime;

    	[XomPerformanceCounterAttr(
			"Avg. execution time base",
			"Base average time taken to execute requests against MSCOM GeoInfo",
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter CallsTimeBase;
    }

    [XomPerformanceCounterCategoryAttr( "Partner: GeoFencing", "XBox Live GeoFencing Counters", true )]
    public class GeoFencingCounters : XomPerformanceCounterCategory
    {
        static public GeoFencingCounters Counters = new GeoFencingCounters();

        public GeoFencingCounters this[string featureArea]
        {
            get
            {
                return (GeoFencingCounters) GetInstance(featureArea);
            }
        }

        [XomPerformanceCounterAttr(
            "GeoFencing checks/sec",
            "GeoFencing checks per second",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter ChecksPerSecond;

        [XomPerformanceCounterAttr(
            "GeoFencing checks total",
            "Total GeoFencing checks made in the the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter ChecksTotal;

        [XomPerformanceCounterAttr(
            "GeoFencing denials/sec",
            "Number of denials returned per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter DenialsPerSecond;

        [XomPerformanceCounterAttr(
            "GeoFencing total failures",
            "Total number unsuccessful results returned in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter DenialsTotal;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\machine\MachineBanInfo.cs ===
using System;
using System.Collections.Generic;

using xonline.common.service;
using xonline.server.xmachine.fd.soap;

namespace xonline.common.machine
{
    public class MachineBanDetail
    {
        private Puid     _machinePuid;
        private HResult  _reason;
        private DateTime _banStart;
        private DateTime _banEnd;

        public MachineBanDetail(Puid machinePuid, HResult reason, DateTime banStart, DateTime banEnd)
        {
            _machinePuid = machinePuid;
            _reason      = reason;
            _banStart    = banStart;
            _banEnd      = banEnd;
        }

        public Puid MachinePuid
        {
            get { return _machinePuid; }
        }

        public HResult Reason 
        {
            get { return _reason; }
        }

        public DateTime BanStart
        {
            get { return _banStart; }
        }

        public DateTime BanEnd
        {
            get { return _banEnd; }
        }

        public static MachineBanDetail[] GetByMachinePuid(Puid machinePuid)
        {
            HashSet<MachineBanDetail> machineBanDetailSet = new HashSet<MachineBanDetail>();
            MachineBanDetail[]        machineBanDetail    = null;
            MachineBanInfo[]          machineBanInfo      = null;
            ulong[]                   requestedPuids      = new ulong[1];
            XMachineSoapClient        connection          = new XMachineSoapClient();

            requestedPuids[0] = machinePuid;
            machineBanInfo = connection.LookupMachineBansByMachinePuids(
                requestedPuids
                );
            if (machineBanInfo != null && machineBanInfo.Length != 0)
            {
                foreach (MachineBanInfo banInfo in machineBanInfo)
                {
                    MachineBanDetail detail = new MachineBanDetail(
                        banInfo.MachinePuid,
                        banInfo.ReasonCode,
                        banInfo.BanStart,
                        banInfo.BanEnd
                        );

                    if (machineBanDetailSet.Contains( detail ) == false)
                    {
                        machineBanDetailSet.Add( detail );
                    }
                }
            }

            machineBanDetail = new MachineBanDetail[machineBanDetailSet.Count];
            machineBanDetailSet.CopyTo( machineBanDetail );

            return machineBanDetail;
        }

        public static MachineBanDetail[] GetByConsoleId(string consoleId)
        {
            HashSet<MachineBanDetail> machineBanDetailSet = new HashSet<MachineBanDetail>();
            MachineBanDetail[]        machineBanDetail    = null;
            MachineBanInfo[]          machineBanInfo      = null;
            string[]                  requestedIds        = new string[1];
            XMachineSoapClient        connection          = new XMachineSoapClient();

            requestedIds[0] = consoleId;
            machineBanInfo = connection.LookupMachineBansByConsoleIds(
                requestedIds
                );
            if (machineBanInfo != null && machineBanInfo.Length != 0)
            {
                foreach (MachineBanInfo banInfo in machineBanInfo)
                {
                    MachineBanDetail detail = new MachineBanDetail(
                        banInfo.MachinePuid,
                        banInfo.ReasonCode,
                        banInfo.BanStart,
                        banInfo.BanEnd
                        );

                    if (machineBanDetailSet.Contains( detail ) == false)
                    {
                        machineBanDetailSet.Add( detail );
                    }
                }
            }

            machineBanDetail = new MachineBanDetail[machineBanDetailSet.Count];
            machineBanDetailSet.CopyTo( machineBanDetail );

            return machineBanDetail;
        }
    }

    public class MachineBan
    {
        private MachineBanDetail[] _details;

        public MachineBan(Puid machinePuid)
        {
            _details = MachineBanDetail.GetByMachinePuid( machinePuid );
        }

        public MachineBan(string consoleId)
        {
            _details = MachineBanDetail.GetByConsoleId( consoleId );
        }

        public MachineBanDetail[] Details
        {
            get { return _details; }
        }

        public bool IsBanned(DateTime when)
        {
            foreach (MachineBanDetail detail in _details)
            {
                if (detail.BanStart <= when && detail.BanEnd >= when)
                {
                    return true;
                }
            }
            return false;
        }

        public bool IsBanned()
        {
            return IsBanned(DateTime.UtcNow);
        }

        public HResult BanReason(DateTime when)
        {
            DateTime currentMax = DateTime.MinValue;
            HResult  banReason  = HResult.S_OK;

            foreach (MachineBanDetail detail in _details)
            {
                if (detail.BanStart > when || detail.BanEnd < when)
                {
                    continue;
                }
                if (detail.BanEnd >= currentMax)
                {
                    currentMax = detail.BanEnd;
                    banReason  = detail.Reason;
                }
            }
            return banReason;
        }

        public HResult BanReason()
        {
            return BanReason(DateTime.UtcNow);
        }

        public DateTime BanEnd(DateTime when)
        {
            DateTime currentMax = DateTime.MinValue;

            foreach (MachineBanDetail detail in _details)
            {
                if (detail.BanStart > when || detail.BanEnd < when)
                {
                    continue;
                }
                if (detail.BanEnd >= currentMax)
                {
                    currentMax = detail.BanEnd;
                }
            }
            return currentMax;
        }

        public DateTime BanEnd()
        {
            return BanEnd(DateTime.UtcNow);
        }

        public DateTime BanStart(DateTime when)
        {
            DateTime currentMin = DateTime.MaxValue;

            foreach (MachineBanDetail detail in _details)
            {
                if (detail.BanStart > when || detail.BanEnd < when)
                {
                    continue;
                }
                if (detail.BanStart <= currentMin)
                {
                    currentMin = detail.BanStart;
                }
            }
            return currentMin;
        }

        public DateTime BanStart()
        {
            return BanStart(DateTime.UtcNow);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\machine\MachinePuidUtil.cs ===
using System;

using xonline.common.service;
using xonline.common.utilities;
using xonline.server.xmachine.fd.soap;

namespace xonline.common.machine
{
    public class MachinePuidUtil
    {
        // GetMachineIdFromConsoleId
        //
        // Wrapper to XMachineFD in order to convert a console id to a single
        // machine puid. IF the console id maps to more than one puid, an
        // exception is thrown.
        // 
        public static Puid GetMachineIdFromConsoleId(string consoleId)
        {
            ConsoleIdInfo[]    consoleIdInfo = null;
            string[]           requestedIds  = new string[1];
            XMachineSoapClient connection    = new XMachineSoapClient();

            requestedIds[0] = consoleId;
            consoleIdInfo = connection.LookupMachinePuidsByConsoleIds(requestedIds);

            if (consoleIdInfo == null || consoleIdInfo.Length == 0)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_INVALID_CONSOLE_ID,
                    "Cannot find Machine Puid for " + consoleId
                    );
            }
            if (consoleIdInfo.Length > 1)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID,
                    "Found " + consoleIdInfo.Length + 
                    " Machine Puids for " + consoleId
                    );
            }
            return consoleIdInfo[0].MachinePuid;
        }

        // GetMachineIdsFromConsoleId
        //
        // Wrapper to XMachineFD in order to convert a console id to one or 
        // more machine puids.
        //
        public static Puid[] GetMachineIdsFromConsoleId(string consoleId)
        {
            ConsoleIdInfo[]    consoleIdInfo = null;
            string[]           requestedIds  = new string[1];
            XMachineSoapClient connection    = new XMachineSoapClient();

            requestedIds[0] = consoleId;
            consoleIdInfo = connection.LookupMachinePuidsByConsoleIds(requestedIds);

            if (consoleIdInfo == null || consoleIdInfo.Length == 0)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_INVALID_CONSOLE_ID,
                    "Cannot find Machine Puid for " + consoleId
                    );
            }

            return Array.ConvertAll( consoleIdInfo, ( u => (Puid) u.MachinePuid ) );
        }

        // GetXbox360MachineIdFromConsoleId
        // 
        // Special Case Form of GetMachineIdFromConsoleId. Should be used in the
        // case where the consoleid is expected to be one from a Xbox360
        // console only.
        //
        public static Puid GetXbox360MachineIdFromConsoleId(string consoleId)
        {
            if (!ConsoleIdUtil.IsXenonPrefix(consoleId))
            {
                throw new ArgumentException("Console Id {0} does not appear to be an Xbox 360, or does not have the XE prefix.");
            }
            return GetMachineIdFromConsoleId(consoleId);
        }

        // GetXbox360MachineIdsFromConsoleId
        // 
        // Special Case Form of GetMachineIdsFromConsoleId. Should be used in the
        // case where the consoleid is expected to be one from a Xbox360
        // console only.
        // 
        public static Puid[] GetXbox360MachineIdsFromConsoleId(string consoleId)
        {
            if (!ConsoleIdUtil.IsXenonPrefix(consoleId))
            {
                throw new ArgumentException("Console Id {0} does not appear to be an Xbox 360, or does not have the XE prefix.");
            }
            return GetMachineIdsFromConsoleId(consoleId);
        }

        // GetXbox360MachineIdFromConsoleIdAndXuid
        //
        // Wrapper to XMachineFD and the user history code to convert a console
        // and user puid to a single machine puid.
        // 
        // Note: The user puid is a hint. If only a single machine puid is
        // found from a console id, there is no need to use the user puid
        // to identify the correct machine puid
        // 
        public static Puid GetXbox360MachineIdFromConsoleIdAndXuid(string consoleId, Puid userid)
        {
            if (!ConsoleIdUtil.IsXenonPrefix(consoleId))
            {
                throw new ArgumentException("Console Id {0} does not appear to be an Xbox 360, or does not have the XE prefix.");
            }

            ConsoleIdInfo[] consoleIdInfo = null;
            XMachineSoapClient connection = new XMachineSoapClient();

            consoleIdInfo = connection.LookupMachinePuidByConsoleIdAndXuid(
                consoleId,
                userid
                );

            if (consoleIdInfo == null || consoleIdInfo.Length == 0)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_INVALID_CONSOLE_ID,
                    "Cannot find Machine Puid for " + consoleId
                    );
            }
            if (consoleIdInfo.Length > 1)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID,
                    "Found " + consoleIdInfo.Length + 
                    " Machine Puids for " + consoleId
                    );
            }
            return consoleIdInfo[0].MachinePuid;
        }

        public static Puid GetXbox360MachineIdFromConsoleIdAndSCode(string consoleId, byte[] scode)
        {
            if (!ConsoleIdUtil.IsXenonPrefix(consoleId))
            {
                throw new ArgumentException("Console Id {0} does not appear to be an Xbox 360, or does not have the XE prefix.");
            }

            ConsoleIdInfo[] consoleIdInfo = null;
            XMachineSoapClient connection = new XMachineSoapClient();

            consoleIdInfo = connection.LookupMachinePuidsByConsoleIdAndSCode(
                consoleId,
                scode
                );

            if (consoleIdInfo == null || consoleIdInfo.Length == 0)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_INVALID_CONSOLE_ID,
                    "Cannot find Machine Puid for " + consoleId
                    );
            }
            if (consoleIdInfo.Length > 1)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_LOGON_DUPLICATE_CONSOLE_ID,
                    "Found " + consoleIdInfo.Length + 
                    " Machine Puids for " + consoleId
                    );
            }
            return consoleIdInfo[0].MachinePuid;
        }

        // GetXbox360MachineIdFromConsoleIdAndSCode
        //
        // Wrapper to XMachineFD to convert a console id and S-code
        // to a single machine puid.
        // 
        // Note: Unlike the previous API, the S-code is not a hint.
        // This routine will only return a machine puid if it
        // matches the supplied parameters.
        // 
        // S-Code: 
        //   Found on the System Info page of a console
        //   Format is S:XXXX-XXXX-XXXX-XXBA
        //   Where:
        //     S: - S-Code Identifier. Not part of s-code byte array
        //     XX - 1st 7 bytes of the secondary id
        //      B - Checksum nibble for the high nibbles
        //      A - Checksum nibble for the low nibbles
        // 
        // It is theorically possible (but highly unlikely) that
        // machine with duplicate console ids and s-codes exist.
        // However, it is highly unlikely. The exception is thrown
        // for completeness sake.
        public static Puid GetXbox360MachineIdFromConsoleIdAndSCode(string consoleId, string scode)
        {
            if (String.IsNullOrEmpty(scode))
            {
                throw new ArgumentException("Scode is null or empty.");
            }

            // Remove the "-" that the user might have supplied
            scode = scode.Replace("-","");
            scode = scode.ToLower();
            if (scode.Length != 16)
            {
                throw new ArgumentException("Scode string is not 16 digits: " + scode);
            }

            byte[] scodeAsByte = new byte[8];
            for (int i = 0; i < scode.Length; i += 2)
            {
                byte b = 0;

                for (int j = 0; j < 2; ++ j)
                {
                    // Shift the current nibble to the upper position
                    b *= 16;

                    // 1 Nibble
                    if (scode[i + j] >= '0' && scode[i + j] <= '9')
                    {
                        b += (byte)(scode[i + j] - '0');
                    }
                    else if (scode[i + j] >= 'a' && scode[i + j] <= 'f')
                    {
                        b += (byte)(scode[i + j] - 'a' + 10);
                    }
                    else
                    {
                        throw new ArgumentException("Scode contains invalid char: " + scode[i+j]);
                    }
                }

                scodeAsByte[i/2] = b;
            }
            return GetXbox360MachineIdFromConsoleIdAndSCode( consoleId, scodeAsByte );
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\marketplacecatalogutil\MarketplaceCatalogPageHandler.cs ===
using System;

using xonline.common.fse;

namespace xonline.common.marketplace.marketplacecatalogutil
{
    public class MarketplaceCatalogPageHandler : FsePageHandler
    {
        private FsePagedResult ExtractFeed(FSEByteArrayResult feedResult, int offset, int length)
        {
            throw new NotImplementedException();
        }

        public override FsePagedResult Extract(FsePagedResult page, int offset, int length)
        {
            throw new NotImplementedException();
        }


        private FsePagedResult MergeFeed(FSEByteArrayResult pageA, FSEByteArrayResult pageB)
        {
            throw new NotImplementedException();
        }
     

        public override FsePagedResult Merge(FsePagedResult pageA, FsePagedResult pageB)
        {
            throw new NotImplementedException();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\marketplacecatalogutil\MarketplaceCatalogHelper.cs ===
using System;
using System.IO;
using System.Web;
using System.Xml;

using xonline.common.fse;
using xonline.common.service;

namespace xonline.common.marketplace.marketplacecatalogutil
{
    public class MarketplaceCatalogHelper
    {
        private static FseResponse Query(FseService service, FseRequest request)
        {
            FseResponse response = service.Execute(request);

            if (HResult.Succeeded(response.HResult))
            {
                MarketplaceCatalogHelper.CacheControl(response.Expiration);
            }

            return response;
        }

        public static Stream Query(FseService service, string methodName, string[] names, string[] values)
        {
            return new MemoryStream( Query(service, new FseRequest(methodName, names, values)).Bytes );
        }

        public static Stream Query(FseService service, string methodName, string[] names, string[] values, ulong hashValue)
        {
            return new MemoryStream( Query(service, new FseRequest(methodName, names, values, hashValue)).Bytes );
        }

        private static void CacheControl(DateTime expiration)
        {
            DateTime now = DateTime.UtcNow;
            if (expiration < now) return;

            HttpContext context = HttpContext.Current;
            if (context == null) return;

            TimeSpan timespan = expiration - now;
            context.Items["FeAppCacheControl"] = ((int) timespan.TotalSeconds).ToString();
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\marketplacecatalogutil\MarketplaceCatalogResultHandler.cs ===
using System;
using System.Diagnostics;
using System.IO;
using System.Xml;
using System.Xml.Serialization;

using xonline.common.utilities;
using xonline.common.fse;
using xonline.common.service;

namespace xonline.common.marketplace.marketplacecatalogutil
{
    public class MarketplaceCatalogResultHandler : FseResultHandler
    {
        public FseResult Create(XmlReader reader)
        {
            XmlSerializer serializer;
            XmlRootAttribute rootAttribute = new XmlRootAttribute(MPXmlConstants.RootElementName);
            rootAttribute.Namespace = MPXmlConstants.AtomNamespace;

            serializer = new XmlSerializer(typeof(ExceptionResult));

            if (serializer.CanDeserialize(reader))
            {
                ExceptionResult exceptionResult = (ExceptionResult)serializer.Deserialize(reader);
                if (exceptionResult._stack == null) exceptionResult._stack = new StackTrace().ToString();
                if (exceptionResult._hResult == null) exceptionResult._hResult = "0x" + HResult.XONLINE_E_CATALOG_ERROR.ToString("X");

                return exceptionResult;
            }

            throw new Exception("Cannot deserialize result");
        }

        public FseResult Create(byte[] bytes)
        {
            return new FSEByteArrayResult(bytes);
        }

        public FseResult Create(XmlDocument document)
        {
            XmlReaderSettings settings = new XmlReaderSettings();
            settings.IgnoreWhitespace = true;
            settings.CloseInput = true;

            using (StringReader stringReader = new StringReader(document.OuterXml))
            {
                using (XmlReader reader = XmlReader.Create(stringReader, settings))
                {
                    return Create(reader);
                }
            }
        }
   }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\marketplacecatalogutil\MarketplaceCatalogDelegates.cs ===
using System;
using System.Net;
using System.Web;

using xonline.common.config;
using xonline.common.fse;
using xonline.common.service;

namespace xonline.common.marketplace.marketplacecatalogutil
{

    // Defines the known delegates for overriding parameter values
    //  in the Catalog FSE web service. These methods must all
    //  implement the FseParamDelegate signature
    public class MarketplaceCatalogDelegates
    {
        private FseBookmark     _bookmark;

        private const int       _variations = 3;    // Only allowing 3 sets of offsets + ip lists

        private int []          _privs;             // [_variations]
        private int []          _offsetDays;        // [_variations]
        private IPAddress [][]  _ips;               // [ip][_variations]
        private IPAddress [][]  _ipMasks;           // [mask][_variations]

        private const int       _catalogPrivBrowseLive   = 1;
        private const int       _catalogPrivBrowseStaged = 2;

        private const string    _catalogPrivSetting     = "catalog_editorial_priv";
        private const string    _catalogTimeSetting     = "catalog_editorial_time";
        private const string    _catalogIpsSetting      = "catalog_editorial_ips";

        private string []       _settings;          // List of setting names we care about


        public MarketplaceCatalogDelegates()
        {
            _bookmark  = new FseBookmark();

            Config.SettingChange += new SettingChangeEventHandler(SettingChange);
            Load();
        }


        public void UpdateSetting(string setting, string value)
        {
            int marker = 0;
            int variation = -1;

            if (setting.StartsWith(_catalogTimeSetting))
            {
                marker = _catalogTimeSetting.Length;
            }
            else if (setting.StartsWith(_catalogIpsSetting))
            {
                marker = _catalogIpsSetting.Length;
            }
            else if (setting.StartsWith(_catalogPrivSetting))
            {
                marker = _catalogPrivSetting.Length;
            }

            Int32.TryParse(setting.Substring(marker), out variation);

            if (variation < 0 || variation >= _variations)
            {
                throw new ConfigException(
                    HResult.XONLINE_E_CATALOG_INVALID_SETTING, "Config setting " + setting + " could not be loaded");
            }

            if (setting.StartsWith(_catalogTimeSetting))
            {
                _offsetDays[variation] = int.Parse(value);
            }
            else if (setting.StartsWith(_catalogPrivSetting))
            {
                _privs[variation] = int.Parse(value);
            }
            else if (setting.StartsWith(_catalogIpsSetting))
            {
                // value = comma separated ip + mask pairs delineated by semicolons.
                string[] values = value.Split(new char[] { ';', ',' });

                if ((values.Length % 2) != 0)
                {
                    throw new ConfigException(
                        HResult.XONLINE_E_CATALOG_INVALID_SETTING, "Config setting " + setting + " could not be loaded");
                }

                IPAddress [] ips = new IPAddress[values.Length/2];
                IPAddress [] masks = new IPAddress[values.Length/2];

                for (int i = 0; i < values.Length/2; i++)
                {
                    ips[i] = IPAddress.Parse(values[i*2].Trim());
                    masks[i] = IPAddress.Parse(values[(i*2)+1].Trim());
                }

                _ips[variation] = ips;
                _ipMasks[variation] = masks;
            }
        }


        private void Load()
        {
            _settings = new string[_variations * 3];

            _privs = new int[_variations];
            _offsetDays = new int[_variations];
            _ips = new IPAddress[_variations][];
            _ipMasks = new IPAddress[_variations][];

            for (int i=0; i<_variations; i++)
            {
                // Time offset
                _settings[i*3] = _catalogTimeSetting + (i).ToString();
                // IPs and Masks
                _settings[(i*3)+1] = _catalogIpsSetting + (i).ToString();
                // Privs
                _settings[(i*3)+2] = _catalogPrivSetting + (i).ToString();
            }

            foreach (string setting in _settings)
            {
                try
                {
                    UpdateSetting(setting, Config.GetSetting(setting));
                }
                catch (Exception)
                {
                    // it's okay if there is no setting
                }
            }
        }


        // event handler after changes to t_settings or t_setting_overrides
        public void SettingChange(object sender, SettingChangeEventArgs eventArgs)
        {
            if (-1 != Array.IndexOf(_settings, eventArgs.Setting))
            {
                UpdateSetting(eventArgs.Setting, eventArgs.ValueNew);
            }
        }

        private int EditorialClientIndex()
        {
            // Figure out who is calling
            SGInfo sg = null;
            AAInfo aa = AAInfo.IsActiveAuthAvailable ? AAInfo.Current : null;    
            string ip ="0.0.0.0";

            if(aa != null)
            {
                ip = aa.IpAddressInternet.ToString();
            }
            else if (HttpContext.Current != null)
            {
                if((sg = SGInfo.Current) != null)
                {
                    ip = sg.ClientIP.ToString();
                }
            }

            IPAddress clientIP = IPAddress.Parse(ip);

            return EditorialClientIndex(clientIP);
        }

        private int EditorialClientIndex(IPAddress clientIP)
        {
            byte [] clientBytes = clientIP.GetAddressBytes();

            for (int i=0; i < _ips.Length; i++)
            {
                if (_ips[i] == null) continue;

                for (int j=0; j < _ips[i].Length; j++)
                {
                    byte [] ipBytes = _ips[i][j].GetAddressBytes();
                    byte [] ipMask = _ipMasks[i][j].GetAddressBytes();
                    bool matched = true;

                    if (ipBytes.Length != clientBytes.Length)
                    {
                        break;
                    }

                    for (int k=0; k<clientBytes.Length; k++)
                    {
                        if ( (ipBytes[k] & ipMask[k]) != (clientBytes[k] & ipMask[k]) )
                        {
                            matched = false;
                            break;
                        }
                    }

                    if (matched)
                    {
                        return i;
                    }
                }
            }

            // if we do not find them in our list of editorial
            // ips,  then they have  no  editorial  privileges

            return -1;
        }


        private int FindDaysOffset()
        {
            int i = EditorialClientIndex();
            return i == -1 ? 0 : _offsetDays[i];
        }

        public string[] AdjustAvatarBodyTypeDelegate(string[] values)
        {
            // If bodytypes was passed up, add an additional value which indicates
            // that we "don't care" when the searchableXml does not reflect the value
            if (values.Length != 0)
            {
                if (string.Compare(values[0], "null", true) != 0)
                {
                    values[0] += ".0";
                }
            }

            return values;
        }

        public string[] AdjustPlatformTypesDelegate(string[] values)
        {
            // If platformtypes was passed up, add an additional value which indicates
            // that we "don't care" when the searchableXml does not reflect the value
            if (values.Length != 0)
            {
                if (string.Compare(values[0], "null", true) != 0)
                {
                    values[0] += ".0";
                }
            }

            return values;
        }


        public string [] AdjustBookmarkDelegate (string [] values)
        {
            if (values.Length != 1)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE, "Delegate expected only a single value for the Bookmark parameter");
            }

            if (_bookmark != null)
            {
                DateTime    requestTime = DateTime.UtcNow;

                // Move the time into the future if the caller is on the white list
                requestTime = requestTime.AddDays(FindDaysOffset());

                // Format datetime to be something like: 2010-01-21T01:00:00Z
                //                                       yyyy-dd-MMTHH:mm:ssZ
                // Now adjust the bookmark value appropriately
                values = new string[1];
                values[0] = String.Format("{0:yyyy-MM-ddTHH:mm:ssZ}", _bookmark.Adjust(requestTime));
            }

            return values;
        }


        public string[] EditorialPrivilegeDelegate(string[] values)
        {
            if (values.Length != 1)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE, "Delegate expected only a single value for the EditorialPrivilege parameter");
            }

            values = new string[1];

            // editorial privilege is not

            int i = EditorialClientIndex();

            if (i == -1)
                values[0] = "1";
            else
            {
                values[0] = _privs[i].ToString();

                // editorial clients read through the cache
                if (HttpContext.Current != null)
                {
                    HttpContext.Current.Items[FseService.CACHE_DURATION_OVERRIDE] = "0";
                }
            }

            return values;
        }

        public string [] AdjustVisibilityLevelDelegate (string [] values)
        {
            if (values.Length != 1)
            {
                throw new ParameterException(
                    HResult.XONLINE_E_FSE_PARAM_INVALID_VALUE, "Delegate expected only a single value for the VisibilityLevel parameter");
            }
            
            // Override whatever default/client passed value
            //  with the programmatic value
            if (String.Equals(Config.Environment, "partnernet"))
            {
                values[0] = "1";
            }
            else
            {
                values[0] = "1.2";
            }

            return values;
        }

        public bool IPGrantsStagingAccess(string ipAddress)
        {
            int i = EditorialClientIndex(IPAddress.Parse(ipAddress));

            if (i == -1)
                return false;

            return (_privs[i] == _catalogPrivBrowseStaged);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\marketplacecatalogutil\MarketplaceCatalogResult.cs ===
using System;
using System.IO;
using System.Text;
using System.Xml;
using System.Xml.Serialization;

using xonline.common.fse;
using xonline.common.service;
using xonline.common.billing;

namespace xonline.common.marketplace.marketplacecatalogutil
{
    public class MPXmlConstants
    {
        public const string AtomNamespace = "http://www.w3.org/2005/Atom";
        public const string MarketplaceNamespace = "http://catalog.xboxlive.com/resource/product/v1";
        public const string RootElementName = "feed";
    }

    [XmlRootAttribute("Exception")]
    public class ExceptionResult : FseExceptionResult
    {
        [XmlElement(ElementName = "Type")]
        public string _type;

        [XmlElement(ElementName = "Message")]
        public string _message;

        [XmlElement(ElementName = "HResult")]
        public string _hResult;

        [XmlElement(ElementName = "EventId")]
        public uint _eventId;

        [XmlElement(ElementName = "Stack")]
        public string _stack;

        [XmlIgnore]
        public uint EventId
        {
            get { return _eventId; }
        }

        [XmlIgnore]
        public HResult HResult
        {
            get
            {
                if (string.IsNullOrEmpty(_hResult)) return xonline.common.service.HResult.XONLINE_E_CATALOG_ERROR;
                string hResult = _hResult.Trim();

                while (hResult.StartsWith("0")) hResult = hResult.Substring(1);
                if (hResult.StartsWith("x") || hResult.StartsWith("X")) hResult = hResult.Substring(1);
                return HResult.Parse(hResult);
            }

            set
            {
                _hResult = value.ToString();
            }
        }

        [XmlIgnore]
        public string Message
        {
            get { return _message == null ? string.Empty : _message; }
        }

        [XmlIgnore]
        public string Stack
        {
            get { return _stack == null ? string.Empty : _stack; }
        }

        [XmlIgnore]
        public string Type
        {
            get { return _type == null ? string.Empty : _type; }
        }

        public XmlDocument GetDocument()
        {
            StringWriter stringWriter = new StringWriter();
            XmlSerializer serializer = new XmlSerializer(typeof(ExceptionResult));
            serializer.Serialize(stringWriter, this);

            XmlDocument document = new XmlDocument();
            document.LoadXml(stringWriter.ToString());
            return document;
        }

        public byte[] GetBytes()
        {
            StringWriter stringWriter = new StringWriter();
            XmlSerializer serializer = new XmlSerializer(typeof(ExceptionResult));
            serializer.Serialize(stringWriter, this);

            UnicodeEncoding encoding = new UnicodeEncoding();
            return encoding.GetBytes(stringWriter.ToString());
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\msnrr\msnrr.cs ===
using System;
using System.Net;
using System.Web.Services.Protocols;
using System.Xml;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;

using msnrr.wsdl.rating.single;
using msnrr.wsdl.aggregator;

[assembly: XomAreaDefinition(XomAreaName.msnrrTrace)]
[assembly: XomAreaDefinition(XomAreaName.msnrrLog)]


namespace xonline.common.msnrr
{
    // largely inspired by MusicNet code, if a bug is found here, check Musicnet, and the other way around...
    // see http://sharepoint/sites/CoreSearch/Teams/Community/RandR/partner/default.aspx?PageView=Shared for documentation
    public class MsnRRClient
    {
        public static void SaveRating(Guid contentTypeId, object itemId, Puid authorsPuid, int ratingValue)
        {
            MsnRRServiceWrapper service = new MsnRRServiceWrapper();
            try 
            {
                service.SaveRating(contentTypeId, itemId, authorsPuid, ratingValue);
            } 
            catch (MsnRRException) 
            {
                // place to filter exceptions based on error code if needed 
                throw;
            }
        }

        public static void GetRatingByUser(Guid contentTypeId, object itemId, Puid puid, out int userRating)
        {
        
            MsnRRServiceWrapper service = new MsnRRServiceWrapper();
            try 
            {
                service.GetRatingByUser(contentTypeId, itemId, puid, out userRating);
            } 
            catch (MsnRRException) 
            {
                // place to filter exceptions based on error code if needed 
                throw;
            }
        }

        public static void GetRatingByUserWithAverage(Guid contentTypeId, object itemId, Puid puid, out int userRating, out float averageRating, out int count)
        {
        
            MsnRRServiceWrapper service = new MsnRRServiceWrapper();
            try 
            {
                service.GetRatingByUserWithAverage(contentTypeId, itemId, puid, out userRating, out averageRating, out count);
            } 
            catch (MsnRRException) 
            {
                // place to filter exceptions based on error code if needed 
                throw;
            }
        }

        // returns true if there is more results (use transactionToken) or false if everything has been returned...
        public static bool GetRatingAverages(Guid contentTypeId, DateTime fromTime, 
            ref string transactionToken, out DateTime transactionStartTime, out XmlNode result)
        {
            MsnRRServiceWrapper service = new MsnRRServiceWrapper();
            try 
            {
                return service.GetRatingAverages(contentTypeId, fromTime, 
                    ref transactionToken, out transactionStartTime, out result);
            } 
            catch (MsnRRException) 
            {
                // place to filter exceptions based on error code if needed 
                throw;
            }
        }
    }



    public class MsnRRServiceWrapper
    {
        private SingleRating m_msnRRService;
        private Aggregator m_msnRRAggregatorService;

        private static WebProxy m_proxy;
        private static FastFailHelper m_fastFailHelper;

        [ThreadStaticAttribute]
        private static string m_tlsSingleRatingSessionAlternateUrl;
        [ThreadStaticAttribute]
        private static string m_tlsAggregatorSessionAlternateUrl;
        
        private static volatile bool _fInitialized = false;
        private static object _lockInit = new object();

        //////////////////////////////////////////////////////////
        // InitializeWebProxy
        //
        // Methods of this class MUST call this method (InitializeWebProxy) to guarantee
        // the static m_proxy member has been properly initialized before doing any work
        private static void InitializeWebProxy()
        {
            if ( !_fInitialized )
            {
                lock ( _lockInit )
                {
                    if ( !_fInitialized )
                    {
                        string proxy = Config.GetSetting(Setting.billing_proxy);
                        if (!string.IsNullOrEmpty(proxy))
                            m_proxy = new WebProxy(proxy, true);
                        
                        _fInitialized = true;
                    }
                }
            }
        }

        /* ************************************************************** */
        /* **********                CTOR                                               *********** */
        /* ************************************************************** */

        static MsnRRServiceWrapper()
        {
            m_fastFailHelper = new FastFailHelper(Setting.msnrr_failFastThresholdCount,
                Setting.msnrr_failFastThresholdIntervalSeconds,
                Setting.msnrr_failFastBlockIntervalSeconds,
                XEvent.Id.COMMON_CODE_129,
                XEvent.Id.FAIL_FAST_EXIT);  // TODO: should be unique
        }

        public MsnRRServiceWrapper()
        {
            // Ensure static initialization complete, see InitializeWebProxy
            InitializeWebProxy();
            
            m_msnRRService = new SingleRating();
            m_msnRRAggregatorService = new Aggregator();

            m_msnRRService.Url = GetSingleRatingServiceUrl();
            m_msnRRService.PreAuthenticate = true; 

            m_msnRRAggregatorService.Url = GetAggregatorServiceUrl();
            m_msnRRAggregatorService.PreAuthenticate = true;

            if(m_proxy != null) 
            {
                m_msnRRService.Proxy = m_proxy;
                m_msnRRAggregatorService.Proxy = m_proxy;
            }
        }


        /* ************************************************************** */
        /* **********                PUBLIC API CALLS                             *********** */
        /* ************************************************************** */

        public static void SetSingleRatingSessionAlternateUrl(string url)
        {
            m_tlsSingleRatingSessionAlternateUrl = url;
        }
        public static void ResetSingleRatingSessionAlternateUrl()
        {
            m_tlsSingleRatingSessionAlternateUrl = null;
        }
        public static void SetAggregatorSessionAlternateUrl(string url)
        {
            m_tlsAggregatorSessionAlternateUrl = url;
        }
        public static void ResetAggregatorSessionAlternateUrl()
        {
            m_tlsAggregatorSessionAlternateUrl = null;
        }


        /* ************************************************************** */
        /* **********                SINGLE RATING APIS                         *********** */
        /* ************************************************************** */


        public void SaveRating(Guid contentTypeId, object itemId, Puid puid, int ratingValue)
        {
            string apiName = "SaveRating";
            APIResultEnum result = APIResultEnum.Failed;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            string errorMessage = null;

            try
            {
                CheckForFailFast(apiName, ref result);
                HandlePerfCountersBegin(apiName);

                int timeout = SaveRatingTimeoutSeconds * 1000;
                m_msnRRService.Timeout = timeout;


                int returnCode = m_msnRRService.SaveRating(contentTypeId, itemId, (long)puid, Guid.Empty, ratingValue);
                result = APIResultEnum.Success;


                MsnRRException error = MsnRRException.FromMsnRRReturnCode(returnCode);
                if(error != null) 
                {
                    errorMessage = error.Message;
                    throw error;
                }

                return;
            }
            catch (SoapException se)
            {
                MsnRRException e = MsnRRException.FromSoapException(se);
                errorMessage = e.Message;
                throw e;
            }
            catch (WebException e)
            {
                if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                {
                    result = APIResultEnum.Timeout;
                    HandleTimeout(apiName, e.ToString());
                }

                throw;
            }
            finally
            {
                HandlePerfCountersEnd(apiName, result, timeElapsed);

                LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                    new string [] { contentTypeId.ToString("D"), itemId.ToString(), puid.ToString(), Guid.Empty.ToString("D"), ratingValue.ToString() },
                    null,
                    errorMessage
                    );
            }

        }


        public void GetRatingByUser( Guid contentTypeId, object itemId, Puid puid, out int userRating )
        {
            string apiName = "GetRatingByUser";
            APIResultEnum result = APIResultEnum.Failed;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            string errorMessage = null;

            userRating = 0;

            try
            {
                CheckForFailFast(apiName, ref result);
                HandlePerfCountersBegin(apiName);

                int timeout = GetRatingByUserWithAverageTimeoutSeconds * 1000;
                m_msnRRService.Timeout = timeout;


                int returnCode = m_msnRRService.GetRatingByUser(contentTypeId, itemId, 
                    (long)puid, Guid.Empty, out userRating );
                result = APIResultEnum.Success;


                MsnRRException error = MsnRRException.FromMsnRRReturnCode(returnCode);
                if(error != null) 
                {
                    errorMessage = error.Message;
                    throw error;
                }

                return;
            }
            catch (SoapException se)
            {
                MsnRRException e = MsnRRException.FromSoapException(se);
                errorMessage = e.Message;
                throw e;
            }
            catch (WebException e)
            {
                if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                {
                    result = APIResultEnum.Timeout;
                    HandleTimeout(apiName, e.ToString());
                }

                throw;
            }
            finally
            {
                HandlePerfCountersEnd(apiName, result, timeElapsed);

                LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                    new string [] { contentTypeId.ToString("D"), itemId.ToString(), puid.ToString(), Guid.Empty.ToString("D")},
                    new string[] { userRating.ToString()  },
                    errorMessage
                    );
            }
        
        }

        public void GetRatingByUserWithAverage(Guid contentTypeId, object itemId, Puid puid, out int userRating, out float averageRating, out int count)
        {
            string apiName = "GetRatingByUserWithAverage";
            APIResultEnum result = APIResultEnum.Failed;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            string errorMessage = null;

            userRating = 0;
            averageRating = 0.0F;
            count = 0;

            try
            {
                CheckForFailFast(apiName, ref result);
                HandlePerfCountersBegin(apiName);

                int timeout = GetRatingByUserWithAverageTimeoutSeconds * 1000;
                m_msnRRService.Timeout = timeout;


                int returnCode = m_msnRRService.GetRatingByUserWithAverage(contentTypeId, itemId, 
                    (long)puid, Guid.Empty, out userRating, out averageRating, out count);
                result = APIResultEnum.Success;


                MsnRRException error = MsnRRException.FromMsnRRReturnCode(returnCode);
                if(error != null) 
                {
                    errorMessage = error.Message;
                    throw error;
                }

                return;
            }
            catch (SoapException se)
            {
                MsnRRException e = MsnRRException.FromSoapException(se);
                errorMessage = e.Message;
                throw e;
            }
            catch (WebException e)
            {
                if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                {
                    result = APIResultEnum.Timeout;
                    HandleTimeout(apiName, e.ToString());
                }

                throw;
            }
            finally
            {
                HandlePerfCountersEnd(apiName, result, timeElapsed);

                LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                    new string [] { contentTypeId.ToString("D"), itemId.ToString(), puid.ToString(), Guid.Empty.ToString("D")},
                    new string[] { userRating.ToString(), averageRating.ToString(), count.ToString() },
                    errorMessage
                    );
            }
        
        }


        /* ************************************************************** */
        /* **********                AGGREGATOR   APIS                         *********** */
        /* ************************************************************** */


        public bool GetRatingAverages(Guid contentTypeId, DateTime fromTime, 
            ref string transactionToken, out DateTime transactionStartTime, out XmlNode result)
        {
            string apiName = "GetRatingAverages";
            APIResultEnum apiResult = APIResultEnum.Failed;
            XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
            string errorMessage = null;
            bool hasMoreResults = false;

            transactionStartTime = DateTime.UtcNow;
            result = null;

            try
            {
                CheckForFailFast(apiName, ref apiResult);
                HandlePerfCountersBegin(apiName);

                int timeout = GetRatingAveragesTimeoutSeconds * 1000;
                m_msnRRAggregatorService.Timeout = timeout;


                int returnCode = m_msnRRAggregatorService.GetRatingAverages(contentTypeId, fromTime, false,
                    ref transactionToken, out transactionStartTime, out result);

                // resultCode == 0 means Method was successful, but not all items have been served
                // 20001 means : "Transaction is complete, all items have been served"
                if(returnCode == 0) 
                {
                    hasMoreResults = true;
                }

                apiResult = APIResultEnum.Success;


                MsnRRException error = MsnRRException.FromMsnRRReturnCode(returnCode);
                if(error != null) 
                {
                    errorMessage = error.Message;
                    throw error;
                }

                return hasMoreResults;
            }
            catch (SoapException se)
            {
                MsnRRException e = MsnRRException.FromSoapException(se);
                errorMessage = e.Message;
                throw e;
            }
            catch (WebException e)
            {
                if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                {
                    apiResult = APIResultEnum.Timeout;
                    HandleTimeout(apiName, e.ToString());
                }

                throw;
            }
            finally
            {
                HandlePerfCountersEnd(apiName, apiResult, timeElapsed);

                LogApiCall(apiName, apiResult, timeElapsed.MillisecondsElapsed,
                    new string [] { contentTypeId.ToString("D"), fromTime.ToLongDateString() + " " + fromTime.ToLongTimeString(), 
                        transactionToken },
                    new string[] { transactionStartTime.ToLongDateString() + " " + transactionStartTime.ToLongTimeString(), 
                        (result == null ? "" : result.InnerXml)},
                    errorMessage
                    );
            }
        }


        /* ************************************************************** */
        /* **********                PUBLIC PROPERTIES                          *********** */
        /* ************************************************************** */


        public static int SaveRatingTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.msnrr_saveRatingTimeoutSeconds);
            }
        }
        
        public static int GetRatingByUserWithAverageTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.msnrr_getRatingByUserWithAverageTimeoutSeconds);
            }
        }  

        public static int GetRatingAveragesTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.msnrr_getRatingAveragesTimeoutSeconds);
            }
        }          


        /* ************************************************************** */
        /* **********                PRIVATE STUFF                                 *********** */
        /* ************************************************************** */

        private static string GetAlternateServiceUrl(string settingName, string alternateUrl)
        {
            // check for overrides
            string url = null;
            if (Config.IsTestEnvironment() == true &&
                Config.GetBoolSetting(Setting.msnrr_allowUrlOverride) &&
                null != alternateUrl
                )
            {
                url = (string) alternateUrl;
            }

            // get setting from NPDB
            if(string.IsNullOrEmpty(url))
            {
                url = Config.GetSetting(settingName);
                if(string.IsNullOrEmpty(url))
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_128,
                        "The msnrr_serviceUrl setting is not configured");
            }
            return url;
        }


        private static string GetSingleRatingServiceUrl()
        {
            return GetAlternateServiceUrl(Setting.msnrr_serviceSingleRatingUrl, m_tlsSingleRatingSessionAlternateUrl); 
        }


        private static string GetAggregatorServiceUrl()
        {
            return GetAlternateServiceUrl(Setting.msnrr_serviceAggregatorUrl, m_tlsAggregatorSessionAlternateUrl);        
        }



        private enum APIResultEnum
        {
            Success,
            FailFast,
            Failed,
            Timeout
        }


        private void CheckForFailFast(string apiName, ref APIResultEnum result)
        {
            if (m_fastFailHelper.InFastFailState(apiName))
            {
                MsnRRCounters.Counters.BlockedCallsPerSecond.Increment();
                MsnRRCounters.Counters.BlockedCallsTotal.Increment();

                MsnRRCounters apiCounters = MsnRRCounters.Counters[apiName];
                apiCounters.BlockedCallsPerSecond.Increment();
                apiCounters.BlockedCallsTotal.Increment();

                result = APIResultEnum.FailFast;

                // TODO: use XONLINE_E_RESOURCE_UNAVAILABLE here?
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MSNRR_UNKNOWN_ERROR,
                    "MsnRR call blocked due to fail-fasting of MsnRR server");
            }
        }





        private static void HandleTimeout(string apiName, string errorMessage)
        {
            MsnRRCounters.Counters.TimeoutsPerSecond.Increment();
            MsnRRCounters.Counters.TimeoutsTotal.Increment();

            MsnRRCounters apiCounters = MsnRRCounters.Counters[apiName];
            apiCounters.TimeoutsPerSecond.Increment();
            apiCounters.TimeoutsTotal.Increment();

            m_fastFailHelper.ReportFailure(apiName, errorMessage);
         }


        private static void HandlePerfCountersEnd(string apiName, APIResultEnum result, XomRequestTimeElapsed timeElapsed)
        {
            MsnRRCounters.Counters.CallsTime.IncrementBy(timeElapsed.TimeElapsed);
            MsnRRCounters.Counters.CallsTimeBase.Increment();

            MsnRRCounters apiCounters = MsnRRCounters.Counters[apiName];
            apiCounters.CallsTime.IncrementBy(timeElapsed.TimeElapsed);
            apiCounters.CallsTimeBase.Increment();

            if (result != APIResultEnum.Success && result != APIResultEnum.FailFast)
            {
                MsnRRCounters.Counters.CallsFailedPerSecond.Increment();
                MsnRRCounters.Counters.CallsFailedTotal.Increment();

                apiCounters.CallsFailedPerSecond.Increment();
                apiCounters.CallsFailedTotal.Increment();
            }
        }

        private static void HandlePerfCountersBegin(string apiName)
        {
            MsnRRCounters.Counters.CallsPerSecond.Increment();
            MsnRRCounters.Counters.CallsTotal.Increment();

            MsnRRCounters apiCounters = MsnRRCounters.Counters[apiName];
            apiCounters.CallsPerSecond.Increment();
            apiCounters.CallsTotal.Increment();
        }


        private static void LogApiCall(string apiName, APIResultEnum result, long millisecondsElapsed, string [] inParams,
            string [] outParams, string mnErrorDetails)
        {
            if (result != APIResultEnum.Timeout)
            {
                m_fastFailHelper.ReportSuccess(apiName);
            }

            string resultString;
            switch (result)
            {
                case APIResultEnum.Success:
                    resultString = "Success";
                    break;

                case APIResultEnum.FailFast:
                    resultString = "FailFast";
                    break;

                case APIResultEnum.Failed:
                    resultString = "Failed";
                    break;

                case APIResultEnum.Timeout:
                    resultString = "Timeout";
                    break;

                default:
                    resultString = "Unknown";
                    break;
            }

            string outParamsString;
            if (result == APIResultEnum.Success)
            {
                if (outParams == null)
                    outParamsString = "";
                else
                    outParamsString = string.Join("|", outParams);
            }
            else
            {
                outParamsString = "Failed";
            }

            string szLog = string.Join("|", new string []
            {
                apiName,
                resultString,
                millisecondsElapsed.ToString(),
                string.Join("|", inParams),
                outParamsString,
                mnErrorDetails == null ? "" : mnErrorDetails
            });

            Xom.Log(XomAreaName.msnrrLog, szLog);
        }


    }

    public class MsnRRException : XRLException
    {
        public MsnRRException(string message, XEvent.Id eventid, SoapException e, HResult hresult)
            : base(hresult, eventid, message, e)
        {
        }


        public static MsnRRException FromSoapException(SoapException e)
        {
            return new MsnRRException(e.Message, XEvent.Id.COMMON_CODE_132, e, HResult.E_FAIL);
        }

        public static MsnRRException FromMsnRRReturnCode(int returnCode)
        {
            switch(returnCode)
            {
                case 0: // means success in most cases
                case 20001: // means "Transaction is complete, all items have been served", another success case
                    return null;
                case 10003:
                    return new MsnRRException(
                        "Invalid content type id. This error also occurs if content type does not have a rating attribute or review field.",
                        XEvent.Id.MSNRR_EXTERNAL_EXCEPTION,
                        null,
                        HResult.XONLINE_E_MSNRR_INVALID_CONTENT_TYPE_ID
                        );
                case 10005:
                    return new MsnRRException(
                        "Invalid item id",
                        XEvent.Id.MSNRR_EXTERNAL_EXCEPTION,
                        null,
                        HResult.XONLINE_E_MSNRR_INVALID_ITEM_ID
                        );
                case 10007:
                    return new MsnRRException(
                        "Puid cannot be zero",
                        XEvent.Id.MSNRR_EXTERNAL_EXCEPTION,
                        null,
                        HResult.XONLINE_E_MSNRR_PUID_CANNOT_BE_ZERO
                        );
                case 10029:
                    return new MsnRRException(
                        "Content type has multiple rating attribute ids, use the Multiple Rating Interface.",
                        XEvent.Id.MSNRR_EXTERNAL_EXCEPTION,
                        null,
                        HResult.XONLINE_E_MSNRR_USE_MULTIPLE_RATING
                        );
                case 20003:
                    return new MsnRRException(
                        "Token does not match request parameters, start over with no token.",
                        XEvent.Id.MSNRR_EXTERNAL_EXCEPTION,
                        null,
                        HResult.XONLINE_E_MSNRR_INVALID_TRANSACTION_TOKEN
                        );
                case 99999:
                default:
                    return new MsnRRException(
                        "Unknown error",
                        XEvent.Id.MSNRR_EXTERNAL_EXCEPTION,
                        null,
                        HResult.XONLINE_E_MSNRR_UNKNOWN_ERROR
                        );
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\msnrr\msnrrperf.cs ===
using System.Diagnostics;

using xonline.common.mgmt;


namespace xonline.common.msnrr
{
    [XomPerformanceCounterCategoryAttr( "Partner: MSN Ratings and Reviews", "MSN Ratings and Reviews Counters", true )]
    public class MsnRRCounters : XomPerformanceCounterCategory
    {
    
        public static MsnRRCounters Counters = new MsnRRCounters();

        public MsnRRCounters this[string api]
        {
            get
            {
                return (MsnRRCounters) GetInstance(api);
            }
        }

        [XomPerformanceCounterAttr(
            "MsnRR API requests/sec",
            "MsnRR SOAP API requests per second",
            PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter CallsPerSecond;

        [XomPerformanceCounterAttr(
            "MsnRR API requests total",
            "Total MsnRR SOAP API requests made in the the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter CallsTotal;

        [XomPerformanceCounterAttr(
            "MsnRR API failures/sec",
            "Number of unsuccessful results returned per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter CallsFailedPerSecond;

        [XomPerformanceCounterAttr(
            "MsnRR API total failures",
            "Total number unsuccessful results returned in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter CallsFailedTotal;

        [XomPerformanceCounterAttr(
            "MsnRR API timeouts/sec",
            "Number of timeouts making MsnRR SOAP API calls per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter TimeoutsPerSecond;

        [XomPerformanceCounterAttr(
            "MsnRR API total timeouts",
            "Total number of timeouts making MsnRR SOAP API calls in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter TimeoutsTotal;

        [XomPerformanceCounterAttr(
            "MsnRR API blocked calls/sec",
            "Number of MsnRR SOAP API calls blocked due to blacklisting per second in the current AppDomain.",
             PerformanceCounterType.RateOfCountsPerSecond32)]
        public PerformanceCounter BlockedCallsPerSecond;

        [XomPerformanceCounterAttr(
            "MsnRR API total blocked calls",
            "Total number of MsnRR SOAP API calls blocked due to blacklisting per second in the current AppDomain.",
             PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter BlockedCallsTotal;

        [XomPerformanceCounterAttr(
            "Avg. execution time",
            "Average time taken to execute SOAP requests against MsnRR",
             PerformanceCounterType.AverageTimer32)]
        public PerformanceCounter CallsTime;

        [XomPerformanceCounterAttr(
            "Avg. execution time base",
            "Base average time taken to execute SOAP requests against MsnRR",
             PerformanceCounterType.AverageBase)]
        public PerformanceCounter CallsTimeBase;

    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\msnrr\msnrr-wsdl-single-rating.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace msnrr.wsdl.rating.single {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="SingleRatingSoap", Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatingItem))]
    public partial class SingleRating : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AdvanceStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNicknameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNicknameSuggestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingAverageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingAverageRollupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingByUserWithAverageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleRatingsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewsRollupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnauthRatingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNicknameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRatingOperationCompleted;
        
        private System.Threading.SendOrPostCallback BulkSaveRatingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReportViolationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback BulkSaveReviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReviewHelpfulnessOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUnauthRatingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateReviewOperationCompleted;
        
        /// <remarks/>
        public SingleRating() {
            this.Url = "http://rr.msn-int.com/rrwebservice/singlerating.asmx";
        }
        
        /// <remarks/>
        public event AdvanceStateCompletedEventHandler AdvanceStateCompleted;
        
        /// <remarks/>
        public event GetNicknameCompletedEventHandler GetNicknameCompleted;
        
        /// <remarks/>
        public event GetNicknameSuggestionsCompletedEventHandler GetNicknameSuggestionsCompleted;
        
        /// <remarks/>
        public event GetRatingAverageCompletedEventHandler GetRatingAverageCompleted;
        
        /// <remarks/>
        public event GetRatingAverageRollupCompletedEventHandler GetRatingAverageRollupCompleted;
        
        /// <remarks/>
        public event GetRatingByUserCompletedEventHandler GetRatingByUserCompleted;
        
        /// <remarks/>
        public event GetRatingByUserWithAverageCompletedEventHandler GetRatingByUserWithAverageCompleted;
        
        /// <remarks/>
        public event GetMultipleRatingsByUserCompletedEventHandler GetMultipleRatingsByUserCompleted;
        
        /// <remarks/>
        public event GetRatingsByUserCompletedEventHandler GetRatingsByUserCompleted;
        
        /// <remarks/>
        public event GetReviewByUserCompletedEventHandler GetReviewByUserCompleted;
        
        /// <remarks/>
        public event GetReviewsCompletedEventHandler GetReviewsCompleted;
        
        /// <remarks/>
        public event GetReviewsByUserCompletedEventHandler GetReviewsByUserCompleted;
        
        /// <remarks/>
        public event GetReviewsRollupCompletedEventHandler GetReviewsRollupCompleted;
        
        /// <remarks/>
        public event GetUnauthRatingsCompletedEventHandler GetUnauthRatingsCompleted;
        
        /// <remarks/>
        public event SaveNicknameCompletedEventHandler SaveNicknameCompleted;
        
        /// <remarks/>
        public event SaveRatingCompletedEventHandler SaveRatingCompleted;
        
        /// <remarks/>
        public event BulkSaveRatingCompletedEventHandler BulkSaveRatingCompleted;
        
        /// <remarks/>
        public event SaveReportViolationCompletedEventHandler SaveReportViolationCompleted;
        
        /// <remarks/>
        public event SaveReviewCompletedEventHandler SaveReviewCompleted;
        
        /// <remarks/>
        public event BulkSaveReviewCompletedEventHandler BulkSaveReviewCompleted;
        
        /// <remarks/>
        public event SaveReviewHelpfulnessCompletedEventHandler SaveReviewHelpfulnessCompleted;
        
        /// <remarks/>
        public event SaveUnauthRatingsCompletedEventHandler SaveUnauthRatingsCompleted;
        
        /// <remarks/>
        public event ValidateReviewCompletedEventHandler ValidateReviewCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/AdvanceState", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AdvanceState(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values) {
            object[] results = this.Invoke("AdvanceState", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        keys,
                        values});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAdvanceState(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AdvanceState", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        keys,
                        values}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndAdvanceState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AdvanceStateAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values) {
            this.AdvanceStateAsync(contentTypeID, itemID, puid, msnGuid, keys, values, null);
        }
        
        /// <remarks/>
        public void AdvanceStateAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values, object userState) {
            if ((this.AdvanceStateOperationCompleted == null)) {
                this.AdvanceStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvanceStateOperationCompleted);
            }
            this.InvokeAsync("AdvanceState", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        keys,
                        values}, this.AdvanceStateOperationCompleted, userState);
        }
        
        private void OnAdvanceStateOperationCompleted(object arg) {
            if ((this.AdvanceStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvanceStateCompleted(this, new AdvanceStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetNickname", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNickname(long puid, System.Guid msnGuid, out string nickname) {
            object[] results = this.Invoke("GetNickname", new object[] {
                        puid,
                        msnGuid});
            nickname = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNickname(long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNickname", new object[] {
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetNickname(System.IAsyncResult asyncResult, out string nickname) {
            object[] results = this.EndInvoke(asyncResult);
            nickname = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNicknameAsync(long puid, System.Guid msnGuid) {
            this.GetNicknameAsync(puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetNicknameAsync(long puid, System.Guid msnGuid, object userState) {
            if ((this.GetNicknameOperationCompleted == null)) {
                this.GetNicknameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNicknameOperationCompleted);
            }
            this.InvokeAsync("GetNickname", new object[] {
                        puid,
                        msnGuid}, this.GetNicknameOperationCompleted, userState);
        }
        
        private void OnGetNicknameOperationCompleted(object arg) {
            if ((this.GetNicknameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNicknameCompleted(this, new GetNicknameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetNicknameSuggestions", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNicknameSuggestions(string seed, out string[] suggestionList) {
            object[] results = this.Invoke("GetNicknameSuggestions", new object[] {
                        seed});
            suggestionList = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNicknameSuggestions(string seed, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNicknameSuggestions", new object[] {
                        seed}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetNicknameSuggestions(System.IAsyncResult asyncResult, out string[] suggestionList) {
            object[] results = this.EndInvoke(asyncResult);
            suggestionList = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNicknameSuggestionsAsync(string seed) {
            this.GetNicknameSuggestionsAsync(seed, null);
        }
        
        /// <remarks/>
        public void GetNicknameSuggestionsAsync(string seed, object userState) {
            if ((this.GetNicknameSuggestionsOperationCompleted == null)) {
                this.GetNicknameSuggestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNicknameSuggestionsOperationCompleted);
            }
            this.InvokeAsync("GetNicknameSuggestions", new object[] {
                        seed}, this.GetNicknameSuggestionsOperationCompleted, userState);
        }
        
        private void OnGetNicknameSuggestionsOperationCompleted(object arg) {
            if ((this.GetNicknameSuggestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNicknameSuggestionsCompleted(this, new GetNicknameSuggestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingAverage", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingAverage(System.Guid contentTypeID, object itemID, out float rating, out int count) {
            object[] results = this.Invoke("GetRatingAverage", new object[] {
                        contentTypeID,
                        itemID});
            rating = ((float)(results[1]));
            count = ((int)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingAverage(System.Guid contentTypeID, object itemID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingAverage", new object[] {
                        contentTypeID,
                        itemID}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingAverage(System.IAsyncResult asyncResult, out float rating, out int count) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((float)(results[1]));
            count = ((int)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingAverageAsync(System.Guid contentTypeID, object itemID) {
            this.GetRatingAverageAsync(contentTypeID, itemID, null);
        }
        
        /// <remarks/>
        public void GetRatingAverageAsync(System.Guid contentTypeID, object itemID, object userState) {
            if ((this.GetRatingAverageOperationCompleted == null)) {
                this.GetRatingAverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingAverageOperationCompleted);
            }
            this.InvokeAsync("GetRatingAverage", new object[] {
                        contentTypeID,
                        itemID}, this.GetRatingAverageOperationCompleted, userState);
        }
        
        private void OnGetRatingAverageOperationCompleted(object arg) {
            if ((this.GetRatingAverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingAverageCompleted(this, new GetRatingAverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingAverageRollup", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingAverageRollup(System.Guid contentTypeID, object itemID, out float rating, out int count) {
            object[] results = this.Invoke("GetRatingAverageRollup", new object[] {
                        contentTypeID,
                        itemID});
            rating = ((float)(results[1]));
            count = ((int)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingAverageRollup(System.Guid contentTypeID, object itemID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingAverageRollup", new object[] {
                        contentTypeID,
                        itemID}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingAverageRollup(System.IAsyncResult asyncResult, out float rating, out int count) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((float)(results[1]));
            count = ((int)(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingAverageRollupAsync(System.Guid contentTypeID, object itemID) {
            this.GetRatingAverageRollupAsync(contentTypeID, itemID, null);
        }
        
        /// <remarks/>
        public void GetRatingAverageRollupAsync(System.Guid contentTypeID, object itemID, object userState) {
            if ((this.GetRatingAverageRollupOperationCompleted == null)) {
                this.GetRatingAverageRollupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingAverageRollupOperationCompleted);
            }
            this.InvokeAsync("GetRatingAverageRollup", new object[] {
                        contentTypeID,
                        itemID}, this.GetRatingAverageRollupOperationCompleted, userState);
        }
        
        private void OnGetRatingAverageRollupOperationCompleted(object arg) {
            if ((this.GetRatingAverageRollupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingAverageRollupCompleted(this, new GetRatingAverageRollupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, out int rating) {
            object[] results = this.Invoke("GetRatingByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid});
            rating = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingByUser(System.IAsyncResult asyncResult, out int rating) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((int)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid) {
            this.GetRatingByUserAsync(contentTypeID, itemID, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetRatingByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetRatingByUserOperationCompleted == null)) {
                this.GetRatingByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingByUserOperationCompleted);
            }
            this.InvokeAsync("GetRatingByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, this.GetRatingByUserOperationCompleted, userState);
        }
        
        private void OnGetRatingByUserOperationCompleted(object arg) {
            if ((this.GetRatingByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingByUserCompleted(this, new GetRatingByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingByUserWithAverage", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingByUserWithAverage(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, out int userRating, out float averageRating, out int count) {
            object[] results = this.Invoke("GetRatingByUserWithAverage", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid});
            userRating = ((int)(results[1]));
            averageRating = ((float)(results[2]));
            count = ((int)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingByUserWithAverage(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingByUserWithAverage", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingByUserWithAverage(System.IAsyncResult asyncResult, out int userRating, out float averageRating, out int count) {
            object[] results = this.EndInvoke(asyncResult);
            userRating = ((int)(results[1]));
            averageRating = ((float)(results[2]));
            count = ((int)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingByUserWithAverageAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid) {
            this.GetRatingByUserWithAverageAsync(contentTypeID, itemID, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetRatingByUserWithAverageAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetRatingByUserWithAverageOperationCompleted == null)) {
                this.GetRatingByUserWithAverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingByUserWithAverageOperationCompleted);
            }
            this.InvokeAsync("GetRatingByUserWithAverage", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, this.GetRatingByUserWithAverageOperationCompleted, userState);
        }
        
        private void OnGetRatingByUserWithAverageOperationCompleted(object arg) {
            if ((this.GetRatingByUserWithAverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingByUserWithAverageCompleted(this, new GetRatingByUserWithAverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetMultipleRatingsByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMultipleRatingsByUser(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid, out int[] ratings) {
            object[] results = this.Invoke("GetMultipleRatingsByUser", new object[] {
                        contentTypeID,
                        itemIDs,
                        puid,
                        msnGuid});
            ratings = ((int[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMultipleRatingsByUser(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMultipleRatingsByUser", new object[] {
                        contentTypeID,
                        itemIDs,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetMultipleRatingsByUser(System.IAsyncResult asyncResult, out int[] ratings) {
            object[] results = this.EndInvoke(asyncResult);
            ratings = ((int[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleRatingsByUserAsync(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid) {
            this.GetMultipleRatingsByUserAsync(contentTypeID, itemIDs, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetMultipleRatingsByUserAsync(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetMultipleRatingsByUserOperationCompleted == null)) {
                this.GetMultipleRatingsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleRatingsByUserOperationCompleted);
            }
            this.InvokeAsync("GetMultipleRatingsByUser", new object[] {
                        contentTypeID,
                        itemIDs,
                        puid,
                        msnGuid}, this.GetMultipleRatingsByUserOperationCompleted, userState);
        }
        
        private void OnGetMultipleRatingsByUserOperationCompleted(object arg) {
            if ((this.GetMultipleRatingsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleRatingsByUserCompleted(this, new GetMultipleRatingsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingsByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingsByUser(System.Guid contentTypeID, long puid, ref System.Guid userID, System.Guid msnGuid, out Rating[] ratings, out string nickname) {
            object[] results = this.Invoke("GetRatingsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid});
            userID = ((System.Guid)(results[1]));
            ratings = ((Rating[])(results[2]));
            nickname = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingsByUser(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingsByUser(System.IAsyncResult asyncResult, out System.Guid userID, out Rating[] ratings, out string nickname) {
            object[] results = this.EndInvoke(asyncResult);
            userID = ((System.Guid)(results[1]));
            ratings = ((Rating[])(results[2]));
            nickname = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid) {
            this.GetRatingsByUserAsync(contentTypeID, puid, userID, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetRatingsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, object userState) {
            if ((this.GetRatingsByUserOperationCompleted == null)) {
                this.GetRatingsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingsByUserOperationCompleted);
            }
            this.InvokeAsync("GetRatingsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, this.GetRatingsByUserOperationCompleted, userState);
        }
        
        private void OnGetRatingsByUserOperationCompleted(object arg) {
            if ((this.GetRatingsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingsByUserCompleted(this, new GetRatingsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviewByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviewByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, out Review review) {
            object[] results = this.Invoke("GetReviewByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid});
            review = ((Review)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviewByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviewByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviewByUser(System.IAsyncResult asyncResult, out Review review) {
            object[] results = this.EndInvoke(asyncResult);
            review = ((Review)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid) {
            this.GetReviewByUserAsync(contentTypeID, itemID, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetReviewByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetReviewByUserOperationCompleted == null)) {
                this.GetReviewByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewByUserOperationCompleted);
            }
            this.InvokeAsync("GetReviewByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, this.GetReviewByUserOperationCompleted, userState);
        }
        
        private void OnGetReviewByUserOperationCompleted(object arg) {
            if ((this.GetReviewByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewByUserCompleted(this, new GetReviewByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviews", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviews(System.Guid contentTypeID, object itemID, ref int pageSize, ref int pageNum, ref string sortBy, ref string sortOrder, out int totalCount, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Review[] Reviews) {
            object[] results = this.Invoke("GetReviews", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder});
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviews(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviews", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviews(System.IAsyncResult asyncResult, out int pageSize, out int pageNum, out string sortBy, out string sortOrder, out int totalCount, out Review[] Reviews) {
            object[] results = this.EndInvoke(asyncResult);
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewsAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder) {
            this.GetReviewsAsync(contentTypeID, itemID, pageSize, pageNum, sortBy, sortOrder, null);
        }
        
        /// <remarks/>
        public void GetReviewsAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, object userState) {
            if ((this.GetReviewsOperationCompleted == null)) {
                this.GetReviewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewsOperationCompleted);
            }
            this.InvokeAsync("GetReviews", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, this.GetReviewsOperationCompleted, userState);
        }
        
        private void OnGetReviewsOperationCompleted(object arg) {
            if ((this.GetReviewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewsCompleted(this, new GetReviewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviewsByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviewsByUser(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Review[] Reviews) {
            object[] results = this.Invoke("GetReviewsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid});
            Reviews = ((Review[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviewsByUser(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviewsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviewsByUser(System.IAsyncResult asyncResult, out Review[] Reviews) {
            object[] results = this.EndInvoke(asyncResult);
            Reviews = ((Review[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid) {
            this.GetReviewsByUserAsync(contentTypeID, puid, userID, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetReviewsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, object userState) {
            if ((this.GetReviewsByUserOperationCompleted == null)) {
                this.GetReviewsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewsByUserOperationCompleted);
            }
            this.InvokeAsync("GetReviewsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, this.GetReviewsByUserOperationCompleted, userState);
        }
        
        private void OnGetReviewsByUserOperationCompleted(object arg) {
            if ((this.GetReviewsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewsByUserCompleted(this, new GetReviewsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviewsRollup", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviewsRollup(System.Guid contentTypeID, object itemID, ref int pageSize, ref int pageNum, ref string sortBy, ref string sortOrder, out int totalCount, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Review[] Reviews) {
            object[] results = this.Invoke("GetReviewsRollup", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder});
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviewsRollup(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviewsRollup", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviewsRollup(System.IAsyncResult asyncResult, out int pageSize, out int pageNum, out string sortBy, out string sortOrder, out int totalCount, out Review[] Reviews) {
            object[] results = this.EndInvoke(asyncResult);
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewsRollupAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder) {
            this.GetReviewsRollupAsync(contentTypeID, itemID, pageSize, pageNum, sortBy, sortOrder, null);
        }
        
        /// <remarks/>
        public void GetReviewsRollupAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, object userState) {
            if ((this.GetReviewsRollupOperationCompleted == null)) {
                this.GetReviewsRollupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewsRollupOperationCompleted);
            }
            this.InvokeAsync("GetReviewsRollup", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, this.GetReviewsRollupOperationCompleted, userState);
        }
        
        private void OnGetReviewsRollupOperationCompleted(object arg) {
            if ((this.GetReviewsRollupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewsRollupCompleted(this, new GetReviewsRollupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetUnauthRatings", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUnauthRatings(System.Guid contentTypeID, object itemID, int daysOfRatingsToUse, out int[] ratingScores, out long[] ratingCounts) {
            object[] results = this.Invoke("GetUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        daysOfRatingsToUse});
            ratingScores = ((int[])(results[1]));
            ratingCounts = ((long[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUnauthRatings(System.Guid contentTypeID, object itemID, int daysOfRatingsToUse, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        daysOfRatingsToUse}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetUnauthRatings(System.IAsyncResult asyncResult, out int[] ratingScores, out long[] ratingCounts) {
            object[] results = this.EndInvoke(asyncResult);
            ratingScores = ((int[])(results[1]));
            ratingCounts = ((long[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnauthRatingsAsync(System.Guid contentTypeID, object itemID, int daysOfRatingsToUse) {
            this.GetUnauthRatingsAsync(contentTypeID, itemID, daysOfRatingsToUse, null);
        }
        
        /// <remarks/>
        public void GetUnauthRatingsAsync(System.Guid contentTypeID, object itemID, int daysOfRatingsToUse, object userState) {
            if ((this.GetUnauthRatingsOperationCompleted == null)) {
                this.GetUnauthRatingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnauthRatingsOperationCompleted);
            }
            this.InvokeAsync("GetUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        daysOfRatingsToUse}, this.GetUnauthRatingsOperationCompleted, userState);
        }
        
        private void OnGetUnauthRatingsOperationCompleted(object arg) {
            if ((this.GetUnauthRatingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnauthRatingsCompleted(this, new GetUnauthRatingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveNickname", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveNickname(long puid, System.Guid msnGuid, string nickname, out string[] suggestionList, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveNickname", new object[] {
                        puid,
                        msnGuid,
                        nickname});
            suggestionList = ((string[])(results[1]));
            errors = ((ValidationError[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveNickname(long puid, System.Guid msnGuid, string nickname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveNickname", new object[] {
                        puid,
                        msnGuid,
                        nickname}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveNickname(System.IAsyncResult asyncResult, out string[] suggestionList, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            suggestionList = ((string[])(results[1]));
            errors = ((ValidationError[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNicknameAsync(long puid, System.Guid msnGuid, string nickname) {
            this.SaveNicknameAsync(puid, msnGuid, nickname, null);
        }
        
        /// <remarks/>
        public void SaveNicknameAsync(long puid, System.Guid msnGuid, string nickname, object userState) {
            if ((this.SaveNicknameOperationCompleted == null)) {
                this.SaveNicknameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNicknameOperationCompleted);
            }
            this.InvokeAsync("SaveNickname", new object[] {
                        puid,
                        msnGuid,
                        nickname}, this.SaveNicknameOperationCompleted, userState);
        }
        
        private void OnSaveNicknameOperationCompleted(object arg) {
            if ((this.SaveNicknameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNicknameCompleted(this, new SaveNicknameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveRating", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue) {
            object[] results = this.Invoke("SaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingValue});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingValue}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveRating(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue) {
            this.SaveRatingAsync(contentTypeID, itemID, puid, msnGuid, ratingValue, null);
        }
        
        /// <remarks/>
        public void SaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue, object userState) {
            if ((this.SaveRatingOperationCompleted == null)) {
                this.SaveRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRatingOperationCompleted);
            }
            this.InvokeAsync("SaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingValue}, this.SaveRatingOperationCompleted, userState);
        }
        
        private void OnSaveRatingOperationCompleted(object arg) {
            if ((this.SaveRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRatingCompleted(this, new SaveRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/BulkSaveRating", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int BulkSaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue, System.DateTime updateDate) {
            object[] results = this.Invoke("BulkSaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingValue,
                        updateDate});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBulkSaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue, System.DateTime updateDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BulkSaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingValue,
                        updateDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndBulkSaveRating(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void BulkSaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue, System.DateTime updateDate) {
            this.BulkSaveRatingAsync(contentTypeID, itemID, puid, msnGuid, ratingValue, updateDate, null);
        }
        
        /// <remarks/>
        public void BulkSaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, int ratingValue, System.DateTime updateDate, object userState) {
            if ((this.BulkSaveRatingOperationCompleted == null)) {
                this.BulkSaveRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBulkSaveRatingOperationCompleted);
            }
            this.InvokeAsync("BulkSaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingValue,
                        updateDate}, this.BulkSaveRatingOperationCompleted, userState);
        }
        
        private void OnBulkSaveRatingOperationCompleted(object arg) {
            if ((this.BulkSaveRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BulkSaveRatingCompleted(this, new BulkSaveRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveReportViolation", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveReportViolation(object itemID, System.Guid reviewID, string name, string emailAddress, string comments, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveReportViolation", new object[] {
                        itemID,
                        reviewID,
                        name,
                        emailAddress,
                        comments});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveReportViolation(object itemID, System.Guid reviewID, string name, string emailAddress, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveReportViolation", new object[] {
                        itemID,
                        reviewID,
                        name,
                        emailAddress,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveReportViolation(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReportViolationAsync(object itemID, System.Guid reviewID, string name, string emailAddress, string comments) {
            this.SaveReportViolationAsync(itemID, reviewID, name, emailAddress, comments, null);
        }
        
        /// <remarks/>
        public void SaveReportViolationAsync(object itemID, System.Guid reviewID, string name, string emailAddress, string comments, object userState) {
            if ((this.SaveReportViolationOperationCompleted == null)) {
                this.SaveReportViolationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReportViolationOperationCompleted);
            }
            this.InvokeAsync("SaveReportViolation", new object[] {
                        itemID,
                        reviewID,
                        name,
                        emailAddress,
                        comments}, this.SaveReportViolationOperationCompleted, userState);
        }
        
        private void OnSaveReportViolationOperationCompleted(object arg) {
            if ((this.SaveReportViolationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReportViolationCompleted(this, new SaveReportViolationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveReview", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingValue,
                        customProperty});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingValue,
                        customProperty}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveReview(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty) {
            this.SaveReviewAsync(contentTypeID, itemID, puid, msnGuid, title, reviewFieldIds, reviewFieldValues, ratingValue, customProperty, null);
        }
        
        /// <remarks/>
        public void SaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty, object userState) {
            if ((this.SaveReviewOperationCompleted == null)) {
                this.SaveReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReviewOperationCompleted);
            }
            this.InvokeAsync("SaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingValue,
                        customProperty}, this.SaveReviewOperationCompleted, userState);
        }
        
        private void OnSaveReviewOperationCompleted(object arg) {
            if ((this.SaveReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReviewCompleted(this, new SaveReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/BulkSaveReview", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int BulkSaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIDs, string[] reviewFieldValues, int ratingValue, string customProperty, System.DateTime updateDate, string nickname) {
            object[] results = this.Invoke("BulkSaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIDs,
                        reviewFieldValues,
                        ratingValue,
                        customProperty,
                        updateDate,
                        nickname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBulkSaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIDs, string[] reviewFieldValues, int ratingValue, string customProperty, System.DateTime updateDate, string nickname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BulkSaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIDs,
                        reviewFieldValues,
                        ratingValue,
                        customProperty,
                        updateDate,
                        nickname}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndBulkSaveReview(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void BulkSaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIDs, string[] reviewFieldValues, int ratingValue, string customProperty, System.DateTime updateDate, string nickname) {
            this.BulkSaveReviewAsync(contentTypeID, itemID, puid, msnGuid, title, reviewFieldIDs, reviewFieldValues, ratingValue, customProperty, updateDate, nickname, null);
        }
        
        /// <remarks/>
        public void BulkSaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIDs, string[] reviewFieldValues, int ratingValue, string customProperty, System.DateTime updateDate, string nickname, object userState) {
            if ((this.BulkSaveReviewOperationCompleted == null)) {
                this.BulkSaveReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBulkSaveReviewOperationCompleted);
            }
            this.InvokeAsync("BulkSaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIDs,
                        reviewFieldValues,
                        ratingValue,
                        customProperty,
                        updateDate,
                        nickname}, this.BulkSaveReviewOperationCompleted, userState);
        }
        
        private void OnBulkSaveReviewOperationCompleted(object arg) {
            if ((this.BulkSaveReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BulkSaveReviewCompleted(this, new BulkSaveReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveReviewHelpfulness", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveReviewHelpfulness(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveReviewHelpfulness", new object[] {
                        itemID,
                        puid,
                        msnGuid,
                        reviewID,
                        score});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveReviewHelpfulness(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveReviewHelpfulness", new object[] {
                        itemID,
                        puid,
                        msnGuid,
                        reviewID,
                        score}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveReviewHelpfulness(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReviewHelpfulnessAsync(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score) {
            this.SaveReviewHelpfulnessAsync(itemID, puid, msnGuid, reviewID, score, null);
        }
        
        /// <remarks/>
        public void SaveReviewHelpfulnessAsync(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score, object userState) {
            if ((this.SaveReviewHelpfulnessOperationCompleted == null)) {
                this.SaveReviewHelpfulnessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReviewHelpfulnessOperationCompleted);
            }
            this.InvokeAsync("SaveReviewHelpfulness", new object[] {
                        itemID,
                        puid,
                        msnGuid,
                        reviewID,
                        score}, this.SaveReviewHelpfulnessOperationCompleted, userState);
        }
        
        private void OnSaveReviewHelpfulnessOperationCompleted(object arg) {
            if ((this.SaveReviewHelpfulnessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReviewHelpfulnessCompleted(this, new SaveReviewHelpfulnessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveUnauthRatings", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveUnauthRatings(System.Guid contentTypeID, object itemID, int[] ratingScores, int[] ratingCountDeltas) {
            object[] results = this.Invoke("SaveUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingScores,
                        ratingCountDeltas});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveUnauthRatings(System.Guid contentTypeID, object itemID, int[] ratingScores, int[] ratingCountDeltas, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingScores,
                        ratingCountDeltas}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveUnauthRatings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveUnauthRatingsAsync(System.Guid contentTypeID, object itemID, int[] ratingScores, int[] ratingCountDeltas) {
            this.SaveUnauthRatingsAsync(contentTypeID, itemID, ratingScores, ratingCountDeltas, null);
        }
        
        /// <remarks/>
        public void SaveUnauthRatingsAsync(System.Guid contentTypeID, object itemID, int[] ratingScores, int[] ratingCountDeltas, object userState) {
            if ((this.SaveUnauthRatingsOperationCompleted == null)) {
                this.SaveUnauthRatingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUnauthRatingsOperationCompleted);
            }
            this.InvokeAsync("SaveUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingScores,
                        ratingCountDeltas}, this.SaveUnauthRatingsOperationCompleted, userState);
        }
        
        private void OnSaveUnauthRatingsOperationCompleted(object arg) {
            if ((this.SaveUnauthRatingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUnauthRatingsCompleted(this, new SaveUnauthRatingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/ValidateReview", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ValidateReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty, out ValidationError[] errors) {
            object[] results = this.Invoke("ValidateReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingValue,
                        customProperty});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingValue,
                        customProperty}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndValidateReview(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty) {
            this.ValidateReviewAsync(contentTypeID, itemID, puid, msnGuid, title, reviewFieldIds, reviewFieldValues, ratingValue, customProperty, null);
        }
        
        /// <remarks/>
        public void ValidateReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, int ratingValue, string customProperty, object userState) {
            if ((this.ValidateReviewOperationCompleted == null)) {
                this.ValidateReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateReviewOperationCompleted);
            }
            this.InvokeAsync("ValidateReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingValue,
                        customProperty}, this.ValidateReviewOperationCompleted, userState);
        }
        
        private void OnValidateReviewOperationCompleted(object arg) {
            if ((this.ValidateReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateReviewCompleted(this, new ValidateReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class ValidationError {
        
        private Field dataFieldField;
        
        private Type codeField;
        
        private System.Guid idField;
        
        private int maxLengthField;
        
        /// <remarks/>
        public Field DataField {
            get {
                return this.dataFieldField;
            }
            set {
                this.dataFieldField = value;
            }
        }
        
        /// <remarks/>
        public Type Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MaxLength {
            get {
                return this.maxLengthField;
            }
            set {
                this.maxLengthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public enum Field {
        
        /// <remarks/>
        empty,
        
        /// <remarks/>
        nickname,
        
        /// <remarks/>
        ratingItemID,
        
        /// <remarks/>
        reviewFieldID,
        
        /// <remarks/>
        title,
        
        /// <remarks/>
        customProperty,
        
        /// <remarks/>
        name,
        
        /// <remarks/>
        email,
        
        /// <remarks/>
        comments,
        
        /// <remarks/>
        score,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public enum Type {
        
        /// <remarks/>
        RequiredFieldMissing,
        
        /// <remarks/>
        TextTooLong,
        
        /// <remarks/>
        TextInvalidChars,
        
        /// <remarks/>
        TextProfanity,
        
        /// <remarks/>
        InvalidFormat,
        
        /// <remarks/>
        TooManyChanges,
        
        /// <remarks/>
        AlreadyTaken,
        
        /// <remarks/>
        ReviewsRequireRatings,
        
        /// <remarks/>
        ReviewsRequireOneField,
        
        /// <remarks/>
        UserCannotRateOwnReview,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Helpfulness {
        
        private int countField;
        
        private int sumField;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private bool currentUserField;
        
        private bool currentUserFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Sum {
            get {
                return this.sumField;
            }
            set {
                this.sumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool CurrentUser {
            get {
                return this.currentUserField;
            }
            set {
                this.currentUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CurrentUserSpecified {
            get {
                return this.currentUserFieldSpecified;
            }
            set {
                this.currentUserFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class ReviewField {
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private string labelField;
        
        private int maxLengthField;
        
        private bool maxLengthFieldSpecified;
        
        private int colsField;
        
        private bool colsFieldSpecified;
        
        private int rowsField;
        
        private bool rowsFieldSpecified;
        
        private int rankField;
        
        private bool rankFieldSpecified;
        
        private bool requiredField;
        
        private bool requiredFieldSpecified;
        
        private string descriptionField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxLength {
            get {
                return this.maxLengthField;
            }
            set {
                this.maxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxLengthSpecified {
            get {
                return this.maxLengthFieldSpecified;
            }
            set {
                this.maxLengthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Cols {
            get {
                return this.colsField;
            }
            set {
                this.colsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColsSpecified {
            get {
                return this.colsFieldSpecified;
            }
            set {
                this.colsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Rows {
            get {
                return this.rowsField;
            }
            set {
                this.rowsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RowsSpecified {
            get {
                return this.rowsFieldSpecified;
            }
            set {
                this.rowsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RankSpecified {
            get {
                return this.rankFieldSpecified;
            }
            set {
                this.rankFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequiredSpecified {
            get {
                return this.requiredFieldSpecified;
            }
            set {
                this.requiredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class User {
        
        private string nicknameField;
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Nickname {
            get {
                return this.nicknameField;
            }
            set {
                this.nicknameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Review {
        
        private ItemID itemField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private User userField;
        
        private ReviewField customPropertyField;
        
        private Rating ratingField;
        
        private ReviewField titleField;
        
        private ReviewField[] fieldField;
        
        private Helpfulness helpfulnessField;
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        /// <remarks/>
        public ItemID Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public User User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public ReviewField CustomProperty {
            get {
                return this.customPropertyField;
            }
            set {
                this.customPropertyField = value;
            }
        }
        
        /// <remarks/>
        public Rating Rating {
            get {
                return this.ratingField;
            }
            set {
                this.ratingField = value;
            }
        }
        
        /// <remarks/>
        public ReviewField Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Field")]
        public ReviewField[] Field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
            }
        }
        
        /// <remarks/>
        public Helpfulness Helpfulness {
            get {
                return this.helpfulnessField;
            }
            set {
                this.helpfulnessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class ItemID {
        
        private string stringIDField;
        
        private long[] longIDField;
        
        private System.Guid guidIDField;
        
        private bool guidIDFieldSpecified;
        
        /// <remarks/>
        public string StringID {
            get {
                return this.stringIDField;
            }
            set {
                this.stringIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LongID")]
        public long[] LongID {
            get {
                return this.longIDField;
            }
            set {
                this.longIDField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid GuidID {
            get {
                return this.guidIDField;
            }
            set {
                this.guidIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GuidIDSpecified {
            get {
                return this.guidIDFieldSpecified;
            }
            set {
                this.guidIDFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Rating {
        
        private ItemID itemField;
        
        private RatingAttribute[] ratingItemField;
        
        private OverallRating overallRatingField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private int totalCountField;
        
        private bool totalCountFieldSpecified;
        
        /// <remarks/>
        public ItemID Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RatingItem")]
        public RatingAttribute[] RatingItem {
            get {
                return this.ratingItemField;
            }
            set {
                this.ratingItemField = value;
            }
        }
        
        /// <remarks/>
        public OverallRating OverallRating {
            get {
                return this.overallRatingField;
            }
            set {
                this.overallRatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int TotalCount {
            get {
                return this.totalCountField;
            }
            set {
                this.totalCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalCountSpecified {
            get {
                return this.totalCountFieldSpecified;
            }
            set {
                this.totalCountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class RatingAttribute : RatingItem {
        
        private float averageValueField;
        
        private bool averageValueFieldSpecified;
        
        private int userValueField;
        
        private bool userValueFieldSpecified;
        
        private int countField;
        
        private bool countFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float AverageValue {
            get {
                return this.averageValueField;
            }
            set {
                this.averageValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AverageValueSpecified {
            get {
                return this.averageValueFieldSpecified;
            }
            set {
                this.averageValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int UserValue {
            get {
                return this.userValueField;
            }
            set {
                this.userValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserValueSpecified {
            get {
                return this.userValueFieldSpecified;
            }
            set {
                this.userValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CountSpecified {
            get {
                return this.countFieldSpecified;
            }
            set {
                this.countFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OverallRating))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatingAttribute))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class RatingItem {
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private string labelField;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private string descriptionField;
        
        private int rankField;
        
        private bool rankFieldSpecified;
        
        private bool requiredField;
        
        private bool requiredFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RankSpecified {
            get {
                return this.rankFieldSpecified;
            }
            set {
                this.rankFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequiredSpecified {
            get {
                return this.requiredFieldSpecified;
            }
            set {
                this.requiredFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class OverallRating : RatingItem {
        
        private float averageValueField;
        
        private bool averageValueFieldSpecified;
        
        private float userValueField;
        
        private bool userValueFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float AverageValue {
            get {
                return this.averageValueField;
            }
            set {
                this.averageValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AverageValueSpecified {
            get {
                return this.averageValueFieldSpecified;
            }
            set {
                this.averageValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float UserValue {
            get {
                return this.userValueField;
            }
            set {
                this.userValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserValueSpecified {
            get {
                return this.userValueFieldSpecified;
            }
            set {
                this.userValueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AdvanceStateCompletedEventHandler(object sender, AdvanceStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvanceStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvanceStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetNicknameCompletedEventHandler(object sender, GetNicknameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNicknameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNicknameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string nickname {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetNicknameSuggestionsCompletedEventHandler(object sender, GetNicknameSuggestionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNicknameSuggestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNicknameSuggestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] suggestionList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingAverageCompletedEventHandler(object sender, GetRatingAverageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingAverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingAverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public float rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingAverageRollupCompletedEventHandler(object sender, GetRatingAverageRollupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingAverageRollupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingAverageRollupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public float rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingByUserCompletedEventHandler(object sender, GetRatingByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingByUserWithAverageCompletedEventHandler(object sender, GetRatingByUserWithAverageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingByUserWithAverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingByUserWithAverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int userRating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public float averageRating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((float)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public int count {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMultipleRatingsByUserCompletedEventHandler(object sender, GetMultipleRatingsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleRatingsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleRatingsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int[] ratings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingsByUserCompletedEventHandler(object sender, GetRatingsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid userID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public Rating[] ratings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string nickname {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewByUserCompletedEventHandler(object sender, GetReviewByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Review review {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewsCompletedEventHandler(object sender, GetReviewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pageSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pageNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sortBy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sortOrder {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public Review[] Reviews {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewsByUserCompletedEventHandler(object sender, GetReviewsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Review[] Reviews {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewsRollupCompletedEventHandler(object sender, GetReviewsRollupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewsRollupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewsRollupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pageSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pageNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sortBy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sortOrder {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public Review[] Reviews {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUnauthRatingsCompletedEventHandler(object sender, GetUnauthRatingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnauthRatingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnauthRatingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int[] ratingScores {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public long[] ratingCounts {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveNicknameCompletedEventHandler(object sender, SaveNicknameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNicknameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNicknameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] suggestionList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveRatingCompletedEventHandler(object sender, SaveRatingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BulkSaveRatingCompletedEventHandler(object sender, BulkSaveRatingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BulkSaveRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BulkSaveRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveReportViolationCompletedEventHandler(object sender, SaveReportViolationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReportViolationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReportViolationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveReviewCompletedEventHandler(object sender, SaveReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BulkSaveReviewCompletedEventHandler(object sender, BulkSaveReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BulkSaveReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BulkSaveReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveReviewHelpfulnessCompletedEventHandler(object sender, SaveReviewHelpfulnessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReviewHelpfulnessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReviewHelpfulnessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveUnauthRatingsCompletedEventHandler(object sender, SaveUnauthRatingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveUnauthRatingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveUnauthRatingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ValidateReviewCompletedEventHandler(object sender, ValidateReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\msnrr\msnrr-wsdl-aggregator.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace msnrr.wsdl.aggregator {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AggregatorSoap", Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Aggregator : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRatingAveragesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeltaRatingAveragesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnauthRatingAveragesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeltaUnauthRatingAveragesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingAveragesWithReviewCountOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDeltaRatingAveragesWithReviewCountOperationCompleted;
        
        /// <remarks/>
        public Aggregator() {
            this.Url = "http://rr.msn-int.com/rrwebservice/Aggregator.asmx";
        }
        
        /// <remarks/>
        public event GetRatingAveragesCompletedEventHandler GetRatingAveragesCompleted;
        
        /// <remarks/>
        public event GetDeltaRatingAveragesCompletedEventHandler GetDeltaRatingAveragesCompleted;
        
        /// <remarks/>
        public event GetUnauthRatingAveragesCompletedEventHandler GetUnauthRatingAveragesCompleted;
        
        /// <remarks/>
        public event GetDeltaUnauthRatingAveragesCompletedEventHandler GetDeltaUnauthRatingAveragesCompleted;
        
        /// <remarks/>
        public event GetRatingAveragesWithReviewCountCompletedEventHandler GetRatingAveragesWithReviewCountCompleted;
        
        /// <remarks/>
        public event GetDeltaRatingAveragesWithReviewCountCompletedEventHandler GetDeltaRatingAveragesWithReviewCountCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingAverages", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, ref string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.Invoke("GetRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken});
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingAverages(System.IAsyncResult asyncResult, out string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.EndInvoke(asyncResult);
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void GetRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken) {
            this.GetRatingAveragesAsync(contentTypeID, fromTime, returnRatingAttributes, transactionToken, null);
        }
        
        /// <remarks/>
        public void GetRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, object userState) {
            if ((this.GetRatingAveragesOperationCompleted == null)) {
                this.GetRatingAveragesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingAveragesOperationCompleted);
            }
            this.InvokeAsync("GetRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, this.GetRatingAveragesOperationCompleted, userState);
        }
        
        private void OnGetRatingAveragesOperationCompleted(object arg) {
            if ((this.GetRatingAveragesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingAveragesCompleted(this, new GetRatingAveragesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetDeltaRatingAverages", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDeltaRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, ref string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.Invoke("GetDeltaRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken});
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDeltaRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDeltaRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetDeltaRatingAverages(System.IAsyncResult asyncResult, out string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.EndInvoke(asyncResult);
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void GetDeltaRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken) {
            this.GetDeltaRatingAveragesAsync(contentTypeID, fromTime, returnRatingAttributes, transactionToken, null);
        }
        
        /// <remarks/>
        public void GetDeltaRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, object userState) {
            if ((this.GetDeltaRatingAveragesOperationCompleted == null)) {
                this.GetDeltaRatingAveragesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeltaRatingAveragesOperationCompleted);
            }
            this.InvokeAsync("GetDeltaRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, this.GetDeltaRatingAveragesOperationCompleted, userState);
        }
        
        private void OnGetDeltaRatingAveragesOperationCompleted(object arg) {
            if ((this.GetDeltaRatingAveragesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeltaRatingAveragesCompleted(this, new GetDeltaRatingAveragesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetUnauthRatingAverages", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUnauthRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, ref string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.Invoke("GetUnauthRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        transactionToken});
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUnauthRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, string transactionToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUnauthRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        transactionToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetUnauthRatingAverages(System.IAsyncResult asyncResult, out string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.EndInvoke(asyncResult);
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void GetUnauthRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, string transactionToken) {
            this.GetUnauthRatingAveragesAsync(contentTypeID, fromTime, transactionToken, null);
        }
        
        /// <remarks/>
        public void GetUnauthRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, string transactionToken, object userState) {
            if ((this.GetUnauthRatingAveragesOperationCompleted == null)) {
                this.GetUnauthRatingAveragesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnauthRatingAveragesOperationCompleted);
            }
            this.InvokeAsync("GetUnauthRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        transactionToken}, this.GetUnauthRatingAveragesOperationCompleted, userState);
        }
        
        private void OnGetUnauthRatingAveragesOperationCompleted(object arg) {
            if ((this.GetUnauthRatingAveragesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnauthRatingAveragesCompleted(this, new GetUnauthRatingAveragesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetDeltaUnauthRatingAverages", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDeltaUnauthRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, ref string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.Invoke("GetDeltaUnauthRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        transactionToken});
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDeltaUnauthRatingAverages(System.Guid contentTypeID, System.DateTime fromTime, string transactionToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDeltaUnauthRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        transactionToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetDeltaUnauthRatingAverages(System.IAsyncResult asyncResult, out string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.EndInvoke(asyncResult);
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void GetDeltaUnauthRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, string transactionToken) {
            this.GetDeltaUnauthRatingAveragesAsync(contentTypeID, fromTime, transactionToken, null);
        }
        
        /// <remarks/>
        public void GetDeltaUnauthRatingAveragesAsync(System.Guid contentTypeID, System.DateTime fromTime, string transactionToken, object userState) {
            if ((this.GetDeltaUnauthRatingAveragesOperationCompleted == null)) {
                this.GetDeltaUnauthRatingAveragesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeltaUnauthRatingAveragesOperationCompleted);
            }
            this.InvokeAsync("GetDeltaUnauthRatingAverages", new object[] {
                        contentTypeID,
                        fromTime,
                        transactionToken}, this.GetDeltaUnauthRatingAveragesOperationCompleted, userState);
        }
        
        private void OnGetDeltaUnauthRatingAveragesOperationCompleted(object arg) {
            if ((this.GetDeltaUnauthRatingAveragesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeltaUnauthRatingAveragesCompleted(this, new GetDeltaUnauthRatingAveragesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingAveragesWithReviewCo" +
            "unt", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingAveragesWithReviewCount(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, ref string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.Invoke("GetRatingAveragesWithReviewCount", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken});
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingAveragesWithReviewCount(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingAveragesWithReviewCount", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingAveragesWithReviewCount(System.IAsyncResult asyncResult, out string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.EndInvoke(asyncResult);
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void GetRatingAveragesWithReviewCountAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken) {
            this.GetRatingAveragesWithReviewCountAsync(contentTypeID, fromTime, returnRatingAttributes, transactionToken, null);
        }
        
        /// <remarks/>
        public void GetRatingAveragesWithReviewCountAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, object userState) {
            if ((this.GetRatingAveragesWithReviewCountOperationCompleted == null)) {
                this.GetRatingAveragesWithReviewCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingAveragesWithReviewCountOperationCompleted);
            }
            this.InvokeAsync("GetRatingAveragesWithReviewCount", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, this.GetRatingAveragesWithReviewCountOperationCompleted, userState);
        }
        
        private void OnGetRatingAveragesWithReviewCountOperationCompleted(object arg) {
            if ((this.GetRatingAveragesWithReviewCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingAveragesWithReviewCountCompleted(this, new GetRatingAveragesWithReviewCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetDeltaRatingAveragesWithRev" +
            "iewCount", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetDeltaRatingAveragesWithReviewCount(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, ref string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.Invoke("GetDeltaRatingAveragesWithReviewCount", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken});
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDeltaRatingAveragesWithReviewCount(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDeltaRatingAveragesWithReviewCount", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetDeltaRatingAveragesWithReviewCount(System.IAsyncResult asyncResult, out string transactionToken, out System.DateTime transactionStartTime, out System.Xml.XmlNode results) {
            object[] results1 = this.EndInvoke(asyncResult);
            transactionToken = ((string)(results1[1]));
            transactionStartTime = ((System.DateTime)(results1[2]));
            results = ((System.Xml.XmlNode)(results1[3]));
            return ((int)(results1[0]));
        }
        
        /// <remarks/>
        public void GetDeltaRatingAveragesWithReviewCountAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken) {
            this.GetDeltaRatingAveragesWithReviewCountAsync(contentTypeID, fromTime, returnRatingAttributes, transactionToken, null);
        }
        
        /// <remarks/>
        public void GetDeltaRatingAveragesWithReviewCountAsync(System.Guid contentTypeID, System.DateTime fromTime, bool returnRatingAttributes, string transactionToken, object userState) {
            if ((this.GetDeltaRatingAveragesWithReviewCountOperationCompleted == null)) {
                this.GetDeltaRatingAveragesWithReviewCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDeltaRatingAveragesWithReviewCountOperationCompleted);
            }
            this.InvokeAsync("GetDeltaRatingAveragesWithReviewCount", new object[] {
                        contentTypeID,
                        fromTime,
                        returnRatingAttributes,
                        transactionToken}, this.GetDeltaRatingAveragesWithReviewCountOperationCompleted, userState);
        }
        
        private void OnGetDeltaRatingAveragesWithReviewCountOperationCompleted(object arg) {
            if ((this.GetDeltaRatingAveragesWithReviewCountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDeltaRatingAveragesWithReviewCountCompleted(this, new GetDeltaRatingAveragesWithReviewCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingAveragesCompletedEventHandler(object sender, GetRatingAveragesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingAveragesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal GetRatingAveragesCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public string transactionToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime transactionStartTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public System.Xml.XmlNode results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results1[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDeltaRatingAveragesCompletedEventHandler(object sender, GetDeltaRatingAveragesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeltaRatingAveragesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal GetDeltaRatingAveragesCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public string transactionToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime transactionStartTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public System.Xml.XmlNode results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results1[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUnauthRatingAveragesCompletedEventHandler(object sender, GetUnauthRatingAveragesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnauthRatingAveragesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal GetUnauthRatingAveragesCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public string transactionToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime transactionStartTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public System.Xml.XmlNode results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results1[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDeltaUnauthRatingAveragesCompletedEventHandler(object sender, GetDeltaUnauthRatingAveragesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeltaUnauthRatingAveragesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal GetDeltaUnauthRatingAveragesCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public string transactionToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime transactionStartTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public System.Xml.XmlNode results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results1[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingAveragesWithReviewCountCompletedEventHandler(object sender, GetRatingAveragesWithReviewCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingAveragesWithReviewCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal GetRatingAveragesWithReviewCountCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public string transactionToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime transactionStartTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public System.Xml.XmlNode results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results1[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetDeltaRatingAveragesWithReviewCountCompletedEventHandler(object sender, GetDeltaRatingAveragesWithReviewCountCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDeltaRatingAveragesWithReviewCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results1;
        
        internal GetDeltaRatingAveragesWithReviewCountCompletedEventArgs(object[] results1, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results1 = results1;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results1[0]));
            }
        }
        
        /// <remarks/>
        public string transactionToken {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results1[1]));
            }
        }
        
        /// <remarks/>
        public System.DateTime transactionStartTime {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results1[2]));
            }
        }
        
        /// <remarks/>
        public System.Xml.XmlNode results {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results1[3]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\musicnet\musicnet.cs ===
using System;
using System.Net;
using System.Text;
using System.Xml;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.Xml.Serialization;
using System.Collections.Generic;

using xonline.common.audit;
using xonline.common.billing;
using xonline.common.config;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.mgmt;
using xonline.common.user;

using Microsoft.Webstore.WstClient;
using musicnet.wsdl.client.ecomm;

using musicnet.wsdl.client.configuration;

[assembly: XomAreaDefinition(XomAreaName.musicnetTrace)]
[assembly: XomAreaDefinition(XomAreaName.musicnetLog)]

namespace xonline.common.musicnet
{
    public class PurchaseAssetsRetry
    {
        public ulong UserPuid;
        public ulong UserPassportPuid;
        public byte CountryID;
        public int CultureID;
        public Guid TransactionGuid;
        public string AlternateDmpUrl;
        public string AlternateMusicNetUrl;
        public List<MusicItemInfo> MusicItems;
    }

    public class PurchaseAssetsMediaRetry
    {
        public int StoreID;
        public ulong UserPuid;
        public ulong UserPassportPuid;
        public byte CountryID;
        public int CultureID;
        public Guid TransactionGuid;
        public string AlternateDmpUrl;
        public string AlternateMusicNetUrl;
        public List<MediaPurchaseInfo> MediaPurchases;
    }

    public class MusicItemInfo
    {
        public string mnetId;
        public decimal retailPriceUSD;
        public bool isSubscriptionFree;
    }

    public class MusicnetClient
    {
        public static void TryPurchaseAssets(ulong userPuid, ulong userPassportPuid, ulong machinePuid,
            Guid trackingGuid, List<MusicItemInfo> musicInfos, string isoCountryCode, DMPClient dmpClient,
            List<OfferInfo> offers)
        {
            // we want the purchases to be "all or nothing"
            bool allowPartialPurchases = false;

            PurchaseItem [] mnItems = new PurchaseItem[musicInfos.Count];

            for (int i = 0; i < musicInfos.Count; i++)
            {
                MusicItemInfo musicItem = musicInfos[i];

                PurchaseItem mnItem = new PurchaseItem();

                if (musicItem.mnetId.Contains(":"))
                {
                    char [] delim = { ':' };
                    string [] halves = musicItem.mnetId.Split(delim);
                    if (halves.Length != 2)
                    {
                        throw new XRLException(HResult.XONLINE_E_OFFERING_INVALID_OFFER_ID,
                            XEvent.Id.CATALOG_MUSIC_MNETID_INVALID, string.Format(
                            "Music purchase with trackingGuid='{0}' failed due to a misconfigured " +
                            "ProviderTerm.externalProviderContentId value of '{1}'",
                            trackingGuid.ToString(), mnItem.mnetId));
                    }

                    mnItem.mnetId = halves[0];
                    mnItem.assetCode = halves[1];
                }
                else
                {
                    mnItem.mnetId = musicItem.mnetId;
                    mnItem.assetCode = null;
                }

                //
                // Tracks which are flagged as SubscriptionFree must be
                // identified as such in the PurchaseAssests call to MusicNet.
                //
                if ( musicItem.isSubscriptionFree )
                {
                    mnItem.purchaseType = PurchaseType.SubscriptionFree;
                }
                else
                {
                    mnItem.purchaseType = PurchaseType.Standard;
                }

                mnItem.purchaseTypeSpecified = true;

                mnItem.soldForPrice = new ItemPrice();
                mnItem.soldForPrice.amount = musicItem.retailPriceUSD.ToString();
                mnItem.soldForPrice.currency = Currency.USD;

                mnItems[i] = mnItem;
            }

            MNServiceWrapper mnsw = new MNServiceWrapper();

            try
            {
                mnsw.PurchaseAssets(userPuid, userPuid.ToString("x"), trackingGuid.ToString(),
                    mnItems, isoCountryCode, allowPartialPurchases);

                TryRecordPurchaseAssetsSuccess(userPuid, machinePuid, trackingGuid, offers);
            }
            catch (MusicnetException e)
            {
                if (e.HResult == HResult.XONLINE_E_MUSICNET_INVALID_ORDER_ID)
                {
                    // if we receive an "invalid order id" it means that the order with that id has
                    // already been processed successfully.  since we generate random guids every time, this
                    // can only have happened if a previous request made it to musicnet successfully
                    // and this is actually a musicnet queue retry.  so treat it as a success.

                    TryRecordPurchaseAssetsSuccess(userPuid, machinePuid, trackingGuid, offers);
                }
                else
                {
                    try
                    {
                        RecordPurchaseAssetsResult(userPuid, trackingGuid,
                            (int) DMPClient.DMPTransactionStatus.MusicPurchaseFailed, e.HResult, e.ErrorXml);
                    }
                    catch
                    {
                        // if this fails we should still try and cancel the purchase, which
                        // will move us directly to the cancelled state

                        Xom.NtEvent(XEvent.Id.QUEUE_FAILURE_AUTO_FIX, e, 
                            "MusicnetClient.RecordPurchaseAssetsResult failed. MusicnetQueue will retry later."
                        );
                    }

                    dmpClient.TryCancelPurchase(userPuid, userPassportPuid, trackingGuid);

                    throw;
                }
            }
            catch (XRLException e)
            {
                HandlePurchaseAssetsFailure(userPuid, userPassportPuid, trackingGuid,
                    (int) DMPClient.DMPTransactionStatus.MusicPurchaseFailed, e.HResult, e.Message, dmpClient);

                throw;
            }
            catch (WebException e)
            {
                if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                {
                    // we have to treat this as a success, since we can't cancel the MusicNet.PurchaseAssets call

                    Xom.NtEvent(XEvent.Id.QUEUE_FAILURE_AUTO_FIX, e, 
                        "MusicnetClient.TryPurchaseAssets timed-out. MusicnetQueue will retry later."
                    );
                }
                else
                {
                    HandlePurchaseAssetsFailure(userPuid, userPassportPuid, trackingGuid,
                        (int) DMPClient.DMPTransactionStatus.MusicPurchaseFailed, (uint) HResult.E_FAIL, e.Message,
                        dmpClient);

                    throw;
                }
            }
            catch (Exception e)
            {
                HandlePurchaseAssetsFailure(userPuid, userPassportPuid, trackingGuid,
                    (int) DMPClient.DMPTransactionStatus.MusicPurchaseFailed, (uint) HResult.E_FAIL, e.Message,
                    dmpClient);

                throw;
            }
        }

        protected static void TryRecordPurchaseAssetsSuccess(ulong userPuid, ulong machinePuid, Guid trackingGuid,
            List<OfferInfo> offers)
        {
            try
            {
                if (offers == null)
                {
                    RecordPurchaseAssetsResult(userPuid, trackingGuid,
                        (int) DMPClient.DMPTransactionStatus.Success, (uint) HResult.S_OK, "");
                }
                else
                {
                    DMPClient.RecordMediaAndMusicPurchaseSuccess(userPuid, machinePuid, trackingGuid, offers);
                }
            }
            catch (Exception e)
            {
                // if this fails, we have already successfully called musicnet
                // so we should do nothing--the worker threads will try the call again later,
                // and will update the transaction result at that time

                if (offers == null)
                {
                    Xom.NtEvent(XEvent.Id.UODB_ACCESS_ERROR, e,
                        "MusicnetClient.RecordPurchaseAssetsResult failed. MusicnetQueue will retry later."
                    );
                }
                else
                {
                    Xom.NtEvent(XEvent.Id.UODB_ACCESS_ERROR, e,
                        "DMPClient.RecordMediaAndMusicPurchaseSuccess failed. MusicnetQueue will retry later."
                    );
                }
            }
        }

        protected static void HandlePurchaseAssetsFailure(ulong userPuid, ulong userPassportPuid,
            Guid trackingGuid, int statusID, uint errorCode, string errorXML, DMPClient dmpClient)
        {
            try
            {
                RecordPurchaseAssetsResult(userPuid, trackingGuid,
                    (int) DMPClient.DMPTransactionStatus.MusicPurchaseFailed, errorCode, errorXML);
            }
            catch (Exception e)
            {
                // if this fails we should still try and cancel the purchase, which
                // will move us directly to the cancelled state

                Xom.NtEvent(XEvent.Id.QUEUE_FAILURE_AUTO_FIX, e,
                    "MusicnetClient.RecordPurchaseAssetsResult failed. MusicnetQueue will retry later."
                );
            }

            dmpClient.TryCancelPurchase(userPuid, userPassportPuid, trackingGuid);
        }

        protected static void RecordPurchaseAssetsResult(ulong userPuid, Guid trackingGuid,
            int statusID, uint errorCode, string errorXML)
        {
            using(WSClient ws = new WSClient(ConfigUtil.GetUserCommerceWebstoreApp(), CmdType.WRITEONLY_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.PartitionType   = WstPartitionType.Logical;
                ws.SetHashVal(userPuid);

                ws.StoredProc = "dbo.p_dmp_record_musicnet_purchase_assets_result";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@uid_tracking_guid", trackingGuid.ToString());
                ws.AddParameter("@i_status_id", statusID);
                ws.AddParameter("@i_error_code", errorCode);
                ws.AddParameter("@vc_error_xml", errorXML);

                ws.ExecuteNonQuery();

                HResult hr = (uint)ws.GetIntParameter("@ret");
                if (HResult.Failed(hr))
                {
                    string msg = ws.GetCallSignature() + " failed with hr = " + hr;

                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_ERROR, msg);

                    throw new XRLException(hr, XEvent.Id.COMMON_CODE_123, msg);
                }
            }
        }

        public static void LazyCreateMusicnetAccount(User u)
        {
            try
            {
                CreateMusicnetAccount(u);
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.MUSICNET_ACCOUNT_CREATE_FAILED, e,
                    "MusicnetClient.CreateMusicnetAccount failed. the account will be created on demand."
                );
            }
        }

        public static void CreateMusicnetAccount(User u)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string orderId = null;

            try
            {
                mnsw.CreateAccount(u.Puid.ToString("x"), orderId);
            }
            catch (MusicnetException mne)
            {
                // There are no transaction tables to track the state of Musicnet account creation
                // and so if a previous call to CreateAccount failed, there will be no record of
                // it and the user most likely will have an account on the Musicnet side.
                //
                // Because of this, if a DUPLICATE_USER_NAME error is returned in Production, it
                // must be because a previous attempt timed out.
                //
                // Unfortunately, this may possibly have some unwanted side-effects in test
                // environments.  Because many different Xbox test environments share the same
                // Musicnet test environment, it is very easy for PUID collisions to result in
                // DUPLICATE_USER_NAME errors unless the environments have been coordinated to
                // allocate PUID values from different areas of the range.
                //
                // The concern with this change is it will mask the error that results here and
                // two users in different environments will be sharing one Musicnet account.  Most
                // things will work and this is scary because the negative side-effects will be
                // rare and very difficult to detect, e.g. user A in ArgoNet shares a PUID with
                // user B on an XBLOB and the XBLOB user cancels the Zune Pass, causing the
                // subscription account on the ArgoNet side to be cancelled.
                //
                if ( mne.HResult == HResult.XONLINE_E_MUSICNET_DUPLICATE_USER_NAME)
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, string.Format("user 0x{0} already has a Musicnet account.  Assuming previous creation attempt timed out!", u.Puid.ToString("x")));
                }
                else
                {
                    throw;
                }
            }

            RecordMusicnetAccountCreation(u.Puid);

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.CreateMusicnetAccount: successfully created account for user: 0x" + u.Puid.ToString("x"));
        }

        public static void AddSubscriptionOffer(ulong userPuid, string offerSku, Guid trackingGuid)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string customerId = userPuid.ToString("x");

            string orderId = trackingGuid.ToString();

            try
            {
                mnsw.AddSubscriptionOffer(userPuid, customerId, orderId, offerSku);
            }
            catch (MusicnetException mne)
            {
                if ( mne.HResult == HResult.XONLINE_E_MUSICNET_ACCOUNT_ALREADY_SUBSCRIBER ||
                    mne.Message.IndexOf("This account already has an active subscription offer") != -1 )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.AddSubscriptionOffer: user: 0x" + customerId + " already has an active subscription offer.  Ignoring exception...");
                    return;
                }
                else if ( mne.HResult == HResult.XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_QUEUED_OFFER )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.AddSubscriptionOffer: user: 0x" + customerId + ", orderId: " + orderId + " already has queued subscription offer.  Ignoring exception...");
                    return;
                }
                else if ( mne.HResult == HResult.XONLINE_E_MUSICNET_INVALID_ORDER_ID ||
                            mne.Message.IndexOf("Invalid order id") != -1 )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.AddSubscriptionOffer: user: 0x" + customerId + ", orderId: " + orderId + " is invalid.  Ignoring exception...");
                    return;
                }

                throw;
            }

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.AddSubscriptionOffer: called for user: 0x" + customerId + ", offerSku: " + offerSku);
        }

        public static void CancelSubscriptionOffer(ulong userPuid, bool immediate)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string customerId = userPuid.ToString("x");

            string orderId = Guid.NewGuid().ToString();

            try
            {
                mnsw.CancelSubscriptionOffer(userPuid, customerId, orderId, immediate);
            }
            catch (MusicnetException mne)
            {
                if ( mne.HResult == HResult.XONLINE_E_MUSICNET_INVALID_CANCEL_REQUEST ||
                    mne.Message.IndexOf("This account is already canceled") != -1 )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.CancelSubscriptionOffer: user: 0x" + customerId + " already has cancelled subscription offer.  Ignoring exception...");
                    return;
                }

                throw;
            }
            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.CancelSubscriptionOffer: called for user: 0x" + customerId);
        }

        public static void AddTrialSubscriptionOffer(ulong userPuid, string offerSku, Guid trackingGuid)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string customerId = userPuid.ToString("x");

            string orderId = trackingGuid.ToString();

            string rolloverSku = string.Empty;

            int noOfTrialDays = 14;

            try
            {
                mnsw.AddTrialSubscriptionOffer(userPuid, customerId, orderId, offerSku, rolloverSku, noOfTrialDays);
            }
            catch (MusicnetException mne)
            {
                if ( mne.HResult == HResult.XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_TRIAL )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.AddTrialSubscriptionOffer: user: 0x" + customerId + " already has an active trial subscription.  Ignoring exception...");
                    return;
                }

                throw;
            }

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.AddTrialSubscriptionOffer: completed successfully for user: 0x" + customerId + ", offerSku: " + offerSku);
        }

        public static void SuspendAccount(ulong userPuid)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string customerId = userPuid.ToString("x");

            string orderId = Guid.NewGuid().ToString();

            try
            {
                mnsw.SuspendAccount(customerId, orderId);
            }
            catch (MusicnetException mne)
            {
                if ( mne.Message.IndexOf("Account suspended or closed") != -1 )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.SuspendAccount: user: 0x" + customerId + " already has a suspended account.  Ignoring exception...");
                    return;
                }

                throw;
            }

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.SuspendAccount: called for user: 0x" + customerId);
        }

        public static void UpgradeSubscriptionOffer(ulong userPuid, string offerSku, bool immediate)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string customerId = userPuid.ToString("x");

            string orderId = Guid.NewGuid().ToString();

            try
            {
                mnsw.UpgradeSubscriptionOffer(customerId, orderId, offerSku, immediate);
            }
            catch (MusicnetException mne)
            {
                Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_ERROR, "MusicnetClient.UpgradeSubscriptionOffer: caught exception: " + mne);
                throw;
            }

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.UpgradeSubscriptionOffer: called for user: 0x" + customerId);
        }

        public static void ResumeAccount(ulong userPuid)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string customerId = userPuid.ToString("x");

            string orderId = Guid.NewGuid().ToString();

            try
            {
                mnsw.ResumeAccount(customerId, orderId);
            }
            catch (MusicnetException mne)
            {
                if ( mne.Message.IndexOf("Invalid resume request.  This account is already active.") != -1 )
                {
                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, "MusicnetClient.ResumeAccount: user: 0x" + customerId + " already has an active account.  Ignoring exception...");
                    return;
                }

                throw;
            }

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.ResumeAccount: called for user: 0x" + customerId);
        }

        protected static void RecordMusicnetAccountCreation(ulong userPuid)
        {
            using(WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.PartitionType   = WstPartitionType.Logical;
                ws.SetHashVal(userPuid);

                ws.StoredProc = "dbo.p_xuacs_set_musicnet_account";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", userPuid);
                ws.AddParameter("@si_hash_bucket", ws.Partition);

                ws.ExecuteNonQuery();

                HResult hr = (uint)ws.GetIntParameter("@ret");
                if (HResult.Failed(hr))
                {
                    string msg = ws.GetCallSignature() + " failed with hr = " + hr;

                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_ERROR, msg);

                    throw new XRLException(hr, XEvent.Id.COMMON_CODE_124, msg);
                }
            }
        }

        public static PurchaseAssetsMediaRetry GetPurchaseAssetsMediaRetry (int partition, uint expiredSeconds,
            uint considerFailedSeconds, out bool keepGoing)
        {
            keepGoing = false;

            using(WSClient ws = new WSClient(ConfigUtil.GetUserCommerceWebstoreApp(), CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_mn_get_retryable_purchase_assets_media_v2";
                ws.PhysicalPartition = partition;

                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@i_expired_seconds", expiredSeconds);
                ws.AddParameter("@i_consider_failed_seconds", considerFailedSeconds);

                using (WstDataReader r = ws.Execute())
                {
                    PurchaseAssetsMediaRetry retry = null;

                    if (r.Read())
                    {
                        retry = new PurchaseAssetsMediaRetry();

                        retry.UserPuid = (ulong) r.GetInt64(0);
                        retry.TransactionGuid = r.GetGuid(1);
                        retry.AlternateDmpUrl = r.GetString(2);
                        if (retry.AlternateDmpUrl == string.Empty)
                            retry.AlternateDmpUrl = null;
                        retry.AlternateMusicNetUrl = r.GetString(3);
                        if (retry.AlternateMusicNetUrl == string.Empty)
                            retry.AlternateMusicNetUrl = null;

                        r.NextResult();

                        List<MediaPurchaseInfo> mediaPurchases = new List<MediaPurchaseInfo>();

                        while (r.Read())
                        {
                            Guid offerInstanceId = r.GetGuid(0);
                            decimal retailPrice = r.GetDecimal(1);
                            string retailPriceCurrency = r.GetString(2);
                            int storeId = r.GetInt32(3);

                            MediaPurchaseInfo item = new MediaPurchaseInfo();
                            item.OfferInstanceId = offerInstanceId;
                            item.retailPrice = retailPrice;
                            item.retailPriceCurrency = retailPriceCurrency;
                            retry.StoreID = storeId;

                            mediaPurchases.Add(item);
                        }

                        retry.MediaPurchases = mediaPurchases;

                        // load user info from UODB to fill in details not found in UserCommerceDb
                        User u = new User();
                        u.Load(retry.UserPuid);

                        retry.UserPassportPuid = u.PassportPuid;
                        retry.CountryID = u.CountryId;
                    }

                    r.Close();

                    HResult hr = (uint)ws.GetIntParameter("@hr");
                    if (HResult.Failed(hr))
                    {
                        string msg = ws.GetCallSignature() + " failed with hr = " + hr;

                        Xom.Trace(XomAreaName.dmptrace, LogLevel.L_ERROR, msg);

                        throw new XRLException(hr, XEvent.Id.COMMON_CODE_125, msg);
                    }

                    if (hr == HResult.XONLINE_S_DMP_RETRY_INTERVAL_EXCEEDED)
                    {
                        keepGoing = true;
                    }

                    return retry;
                }
            }
        }

        public static int GetPurchaseAssetsRetryCount(int partition, uint expiredSeconds)
        {
            using(WSClient ws = new WSClient(ConfigUtil.GetUserCommerceWebstoreApp(), CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_mn_get_retryable_purchase_assets_count";
                ws.PhysicalPartition = partition;

                ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                ws.AddParameter("@i_expired_seconds", expiredSeconds);

                using (WstDataReader r = ws.Execute())
                {
                    int count = 0;

                    if (r.Read())
                    {
                        count = r.GetInt32(0);
                    }

                    r.Close();

                    HResult hr = (uint)ws.GetIntParameter("@RETVAL");
                    if (HResult.Failed(hr))
                    {
                        string msg = ws.GetCallSignature() + " failed with hr = " + hr;

                        Xom.Trace(XomAreaName.dmptrace, LogLevel.L_ERROR, msg);

                        throw new XRLException(hr, XEvent.Id.COMMON_CODE_126, msg);
                    }

                    return count;
                }
            }
        }

        public static int TransferPurchaseDBEntitlements(ulong sourceXuid, ulong targetXuid)
        {
            MNServiceWrapper mnsw = new MNServiceWrapper();

            string orderId = Guid.NewGuid().ToString();
            int transferredItems = 0;

            try
            {
                transferredItems = mnsw.TransferPurchaseDBEntitlements(sourceXuid.ToString("x"), targetXuid.ToString("x"), orderId);
            }
            catch (MusicnetException)
            {
                // TODO: Add tracing for special error codes
                throw;
            }

            Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.TransferPurchaseDBEntitlements: called with sourceXuid: " + sourceXuid + ", targetXuid: " + targetXuid + ", transferredItems: " + transferredItems.ToString());

            return transferredItems;
        }
    }

    public class MNErrorMapping
    {
        public uint MNErrorCode;
        public uint XBLErrorCode;

        public MNErrorMapping(uint mnErrorCode, uint xblErrorCode)
        {
            MNErrorCode = mnErrorCode;
            XBLErrorCode = xblErrorCode;
        }
    }

    [XmlType(Namespace="http://ws.musicnet.com")]
    [XmlRoot(Namespace="http://ws.musicnet.com", IsNullable=false)]
    public class EcommerceB2BServiceException
    {
        public int code;
        public string details;
        public string message;
        public string server;
        public string transactionId;
    }

    public class MusicnetException : XRLException
    {
        public EcommerceB2BServiceException ServiceException;
        public string ErrorXml;
        public bool CanRetry;

        public static MNErrorMapping [] MNErrorMappings = new MNErrorMapping []
        {
            new MNErrorMapping(201, xonline.common.service.HResult.XONLINE_E_MUSICNET_ACCOUNT_HAS_EXPIRED_TRIAL),
            new MNErrorMapping(202, xonline.common.service.HResult.XONLINE_E_MUSICNET_CANNOT_CHANGE_OFFER),
            new MNErrorMapping(203, xonline.common.service.HResult.XONLINE_E_MUSICNET_INVALID_RESUME_REQUEST),
            new MNErrorMapping(204, xonline.common.service.HResult.XONLINE_E_MUSICNET_INVALID_CANCEL_REQUEST),
            new MNErrorMapping(205, xonline.common.service.HResult.XONLINE_E_MUSICNET_ACCOUNT_CANCELED),
            new MNErrorMapping(206, xonline.common.service.HResult.XONLINE_E_MUSICNET_INVALID_TRANSACTION_DATE),
            new MNErrorMapping(207, xonline.common.service.HResult.XONLINE_E_MUSICNET_INVALID_SKU_NUMBER),
            new MNErrorMapping(209, xonline.common.service.HResult.XONLINE_E_MUSICNET_INVALID_ORDER_ID),
            new MNErrorMapping(210, xonline.common.service.HResult.XONLINE_E_MUSICNET_TRIAL_OFFER_EXPIRED),
            new MNErrorMapping(216, xonline.common.service.HResult.XONLINE_E_MUSICNET_ACCOUNT_ALREADY_SUBSCRIBER),
            new MNErrorMapping(228, xonline.common.service.HResult.XONLINE_E_MUSICNET_ACCOUNT_ALREADY_HAS_TRIAL),
            new MNErrorMapping(229, xonline.common.service.HResult.XONLINE_E_MUSICNET_MAXIMUM_PURCHASE_COMPONENTS_EXCEEDED),
            new MNErrorMapping(233, xonline.common.service.HResult.XONLINE_E_MUSICNET_SUBSCRIPTION_ACCOUNT_CLOSED),
            new MNErrorMapping(312, xonline.common.service.HResult.XONLINE_E_MUSICNET_CONTENT_RIGHT_UNAVAILABLE),
            new MNErrorMapping(424, xonline.common.service.HResult.XONLINE_E_MUSICNET_ACCOUNT_SUSPENDED_OR_CLOSED),
            new MNErrorMapping(25, xonline.common.service.HResult.XONLINE_E_MUSICNET_DUPLICATE_USER_NAME),
            new MNErrorMapping(432, xonline.common.service.HResult.XONLINE_E_MUSICNET_INSUFFICIENT_FREE_TRACKS),
            new MNErrorMapping(434, xonline.common.service.HResult.XONLINE_E_MUSICNET_INVALID_SUBSCRIPTION_FREE_PURCHASE),
        };

        public MusicnetException(string message, XEvent.Id eventid, SoapException e, string errorXml,
            EcommerceB2BServiceException serviceException, HResult hresult, bool canRetry)
            : base(hresult, eventid, message, e)
        {
            ServiceException = serviceException;
            ErrorXml = errorXml;
            CanRetry = canRetry;
        }
         public static uint GetXonlineHResultFromMNError(uint errorcode)
        {
            MNErrorMapping errorMap= Array.Find<MNErrorMapping>(MNErrorMappings,delegate(MNErrorMapping ErrorMapping){return ErrorMapping.MNErrorCode == errorcode;});
            if(errorMap!=null)
            {
                return errorMap.XBLErrorCode;
            }
            else
            {
                return xonline.common.service.HResult.XONLINE_E_MUSICNET_UNKNOWN_ERROR;
            }
        }
        public static MusicnetException FromSoapException(SoapException e)
        {
            // Ideally, none of the MusicNet exceptions should be missing a Detail element.
            // However, at present, not all of the MusicNet APIs are throwing exceptions
            // with a detail element.  Until that is fixed, this will allow these to be recognized
            // and treated as MusicnetExceptions.
            if ( e.Detail == null )
            {
                return new MusicnetException(e.Message, XEvent.Id.COMMON_CODE_132, e, string.Empty, null, HResult.E_FAIL, true);
            }

            try
            {
                string errorXml = e.Detail.InnerXml;

                XmlSerializer s = new XmlSerializer(typeof(EcommerceB2BServiceException));

                XmlReader r = new XmlNodeReader(e.Detail.FirstChild);

                EcommerceB2BServiceException serviceException =
                    (EcommerceB2BServiceException) s.Deserialize(r);

                char [] whiteSpace = { ' ', '\r', '\n' };
                serviceException.details = serviceException.details.Trim(whiteSpace);
                serviceException.message = serviceException.message.Trim(whiteSpace);
                serviceException.server = serviceException.server.Trim(whiteSpace);
                serviceException.transactionId = serviceException.transactionId.Trim(whiteSpace);

                HResult hr = xonline.common.service.HResult.XONLINE_E_MUSICNET_UNKNOWN_ERROR;
                bool canRetry = false;

                hr = GetXonlineHResultFromMNError((Convert.ToUInt32(serviceException.code)));

                string message = string.Join("\n", new string [] {
                    e.Message,
                    string.Format("MusicNet Error: {0}, '{1}')", serviceException.code, serviceException.message),
                    string.Format("Xbox Live Mapped Error: 0x{0}", hr.ToString()),
                    string.Format("Details: {0}", serviceException.details),
                    string.Format("MusicNet Server: {0}", serviceException.server),
                    string.Format("MusicNet TransactionID: {0}", serviceException.transactionId),
                    string.Format("XML Dump: {0}", errorXml)
                });

                return new MusicnetException(message, XEvent.Id.MUSICNET_EXTERNAL_EXCEPTION, e, errorXml, serviceException,
                    hr, canRetry);
            }
            catch
            {
                // if we have any trouble creating our nice, rich MusicnetException class,
                // just bail and throw the original SoapException

                throw e;
            }
        }
    }

    public class MNServiceWrapper
    {
        protected EcommerceB2BService m_ecommService;

        public MNServiceWrapper()
        {
            // Ensure static initialization complete, see InitializeWebProxy
            InitializeWebProxy();

            m_ecommService = new EcommerceB2BService();

            string url = GetSessionAlternateUrl();
            if ( url == null )
            {
                url = MusicnetEcommerceUrl;
            }

            m_ecommService.Url = url;
            m_ecommService.PreAuthenticate = true;
            m_ecommService.Proxy = m_proxy;
        }

        protected static ConfigurationService m_configurationService;
        protected static string m_retailerID;
        protected static WebProxy m_proxy;

        protected static FastFailHelper m_fastFailHelper;

        [ThreadStaticAttribute]
        protected static string m_tlsSessionAlternateUrl = null;

        protected static string m_musicnetEcommUrl = null;

        protected static bool m_initXomControl = false;

        private static volatile bool _fInitialized = false;
        private static object _lockInit = new object();

        static MNServiceWrapper()
        {
            m_fastFailHelper = new FastFailHelper(Setting.musicnet_failFastThresholdCount,
                Setting.musicnet_failFastThresholdIntervalSeconds,
                Setting.musicnet_failFastBlockIntervalSeconds,
                XEvent.Id.COMMON_CODE_129,
                XEvent.Id.FAIL_FAST_EXIT);  // TODO: should be unique

        }

        //////////////////////////////////////////////////////////
        // InitializeWebProxy
        //
        // Methods of this class MUST call this method (InitializeWebProxy) to guarantee
        // the static m_proxy member and m_retailerID has been properly initialized before doing any work
        protected static void InitializeWebProxy()
        {
            if ( !_fInitialized )
            {
                lock ( _lockInit )
                {
                    if ( !_fInitialized )
                    {
                        string retailerID = Config.GetSetting(Setting.musicnet_retailerID);
                        if (retailerID == null || retailerID == string.Empty)
                            throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_127,
                            "The musicnet_retailerID setting is not configured");

                        m_retailerID = retailerID;

                        string url = Config.GetSetting(Setting.musicnet_getServiceConfigurationUrl);
                        if (url == null || url == string.Empty)
                            throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_128,
                                "The musicnet_getServiceConfigurationUrl setting is not configured");

                        string proxy = Config.GetSetting(Setting.billing_proxy);
                        if ( string.IsNullOrEmpty(proxy) )
                        {
                            m_proxy = new WebProxy();
                        }
                        else
                        {
                            m_proxy = new WebProxy(proxy, true);
                        }

                        m_configurationService = new ConfigurationService();
                        m_configurationService.Url = url;
                        m_configurationService.Proxy = m_proxy;

                        _fInitialized = true;
                    }
                }
            }
        }

        public static void ResetSessionAlternateUrl()
        {
            m_tlsSessionAlternateUrl = null;
        }

        public static void SetSessionAlternateUrl(string url)
        {
            m_tlsSessionAlternateUrl = url;
        }

        public static string GetSessionAlternateUrl()
        {
            string url = null;
            if (Config.IsTestEnvironment() == true &&
                Config.GetBoolSetting(Setting.musicnet_allowUrlOverride) &&
                null != m_tlsSessionAlternateUrl
                )
            {
                url = m_tlsSessionAlternateUrl;
            }

            return url;
        }

        public static void UpdateServiceConfiguration()
        {
            if ( Config.GetBoolSetting(Setting.crux_useMusicNetForProvisioning) )
            {
                ServiceConfiguration serviceConfiguration =
                    GetServiceConfiguration(Service.EcommerceB2B);

                m_musicnetEcommUrl = serviceConfiguration.location;

                Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_LOW, string.Format("UpdateServiceConfiguration: retrieved MusicNet service configuration, EcommerceB2B URL is: {0}.", m_musicnetEcommUrl));
            }
            else
            {
                m_musicnetEcommUrl = Config.GetSetting(Setting.musicnet_getServiceConfigurationUrl);

                Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_LOW, string.Format("UpdateServiceConfiguration: using musicnet_getServiceConfigurationUrl ({0}) as EcommerceB2B URL...", m_musicnetEcommUrl));
            }
        }

        public static bool PurchaseInFastFailState
        {
            get
            {
                return m_fastFailHelper.InFastFailState("PurchaseAssets");
            }
        }

        private void CheckForFailFast(string apiName, ref APIResultEnum result)
        {
            if (m_fastFailHelper.InFastFailState(apiName))
            {
                MusicNetCounters.Counters.BlockedCallsPerSecond.Increment();
                MusicNetCounters.Counters.BlockedCallsTotal.Increment();

                MusicNetCounters apiCounters = MusicNetCounters.Counters[apiName];
                apiCounters.BlockedCallsPerSecond.Increment();
                apiCounters.BlockedCallsTotal.Increment();

                result = APIResultEnum.FailFast;

                // TODO: use XONLINE_E_RESOURCE_UNAVAILABLE here?
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_MUSICNET_UNKNOWN_ERROR,
                    "Musicnet call blocked due to fail-fasting of Musicnet server");
            }
        }

        private static void HandleTimeout(string apiName, string errorMessage)
        {
            MusicNetCounters.Counters.TimeoutsPerSecond.Increment();
            MusicNetCounters.Counters.TimeoutsTotal.Increment();

            MusicNetCounters apiCounters = MusicNetCounters.Counters[apiName];
            apiCounters.TimeoutsPerSecond.Increment();
            apiCounters.TimeoutsTotal.Increment();

            m_fastFailHelper.ReportFailure(apiName, errorMessage);
         }

        private static void HandlePerfCountersEnd(string apiName, APIResultEnum result, XomRequestTimeElapsed timeElapsed)
        {
            MusicNetCounters.Counters.CallsTime.IncrementBy(timeElapsed.TimeElapsed);
            MusicNetCounters.Counters.CallsTimeBase.Increment();

            MusicNetCounters apiCounters = MusicNetCounters.Counters[apiName];
            apiCounters.CallsTime.IncrementBy(timeElapsed.TimeElapsed);
            apiCounters.CallsTimeBase.Increment();

            if (result != APIResultEnum.Success && result != APIResultEnum.FailFast)
            {
                MusicNetCounters.Counters.CallsFailedPerSecond.Increment();
                MusicNetCounters.Counters.CallsFailedTotal.Increment();

                apiCounters.CallsFailedPerSecond.Increment();
                apiCounters.CallsFailedTotal.Increment();
            }
        }

        private static void HandlePerfCountersBegin(string apiName)
        {
            MusicNetCounters.Counters.CallsPerSecond.Increment();
            MusicNetCounters.Counters.CallsTotal.Increment();

            MusicNetCounters apiCounters = MusicNetCounters.Counters[apiName];
            apiCounters.CallsPerSecond.Increment();
            apiCounters.CallsTotal.Increment();
        }

        protected enum APIResultEnum
        {
            Success,
            FailFast,
            Failed,
            Timeout
        }

        private static void LogApiCall(string apiName, APIResultEnum result, long millisecondsElapsed, string [] inParams,
            string [] outParams, string mnErrorDetails)
        {
            if (result != APIResultEnum.Timeout)
            {
                m_fastFailHelper.ReportSuccess(apiName);
            }

            string resultString;
            switch (result)
            {
                case APIResultEnum.Success:
                    resultString = "Success";
                    break;

                case APIResultEnum.FailFast:
                    resultString = "FailFast";
                    break;

                case APIResultEnum.Failed:
                    resultString = "Failed";
                    break;

                case APIResultEnum.Timeout:
                    resultString = "Timeout";
                    break;

                default:
                    resultString = "Unknown";
                    break;
            }

            string outParamsString;
            if (result == APIResultEnum.Success)
            {
                if (outParams == null)
                    outParamsString = "";
                else
                    outParamsString = string.Join("|", outParams);
            }
            else
            {
                outParamsString = "Failed";
            }

            string szLog = string.Join("|", new string []
            {
                apiName,
                resultString,
                millisecondsElapsed.ToString(),
                string.Join("|", inParams),
                outParamsString,
                mnErrorDetails == null ? "" : mnErrorDetails
            });

            Xom.Log(XomAreaName.musicnetLog, szLog);
        }

        public static ServiceConfiguration GetServiceConfiguration(Service service)
        {
            // Ensure static initialization complete, see InitializeWebProxy
            InitializeWebProxy();

            // this should never happen...
            Debug.Assert( Config.GetBoolSetting(Setting.crux_useMusicNetForProvisioning) );

            // but if it does due to caching behavior of Config, behave rationally
            if ( false == Config.GetBoolSetting(Setting.crux_useMusicNetForProvisioning) )
            {
                ServiceConfiguration svcCfg = new ServiceConfiguration();

                svcCfg.location = Config.GetSetting(Setting.musicnet_getServiceConfigurationUrl);

                return svcCfg;
            }

            string apiName = "GetServiceConfiguration";

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    HandlePerfCountersBegin(apiName);

                    m_configurationService.Timeout = GetServiceConfigurationTimeoutSeconds * 1000;
                    ServiceConfiguration configuration =
                        m_configurationService.GetServiceConfiguration(m_retailerID, service);

                    result = APIResultEnum.Success;

                    if ( configuration == null )
                    {
                        throw new XRLException(HResult.XONLINE_E_MUSICNET_UNKNOWN_ERROR, XEvent.Id.COMMON_CODE_130, "GetServiceConfiguration: MusicNet returned a null ServiceConfiguration.");
                    }

                    outParams = new string [] { DumpServiceConfiguration(configuration) };

                    return configuration;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { DumpService(service) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void CreateAccount(string customerId, string orderId)
        {
            if ( false == Config.GetBoolSetting(Setting.crux_useMusicNetForProvisioning) )
            {
                Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, string.Format("CreateAccount: customerId: {0}, orderId:{1}: crux_useMusicNetForProvisioning is false so no call will be made!", customerId, orderId));
                return;
            }

            string apiName = "CreateAccount";
            string authToken = null;
            string postalCode = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = CreateAccountTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.CreateAccount(authToken, m_retailerID, customerId, orderId, postalCode, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId, postalCode,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void SuspendAccount(string customerId, string orderId)
        {
            string apiName = "SuspendAccount";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = SuspendAccountTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.SuspendAccount(authToken, m_retailerID, customerId, orderId, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void ResumeAccount(string customerId, string orderId)
        {
            string apiName = "ResumeAccount";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = ResumeAccountTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.ResumeAccount(authToken, m_retailerID, customerId, orderId, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void CloseAccount(string customerId, string orderId)
        {
            string apiName = "CloseAccount";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = CloseAccountTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.CloseAccount(authToken, m_retailerID, customerId, orderId, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void AddTrialSubscriptionOffer(ulong userPuid, string customerId, string orderId, string offerSKU,
            string offerSKUToRollover, int noOfTrialDays)
        {
            string apiName = "AddTrialSubscriptionOffer";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = AddTrialSubscriptionOfferTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.AddTrialSubscriptionOffer(authToken, m_retailerID, customerId, orderId, offerSKU,
                        offerSKUToRollover, noOfTrialDays, extraParameters);

                    AuditStream.Write(
                        userPuid, AuditSubsystem.MUSICNET, apiName, string.Empty,
                        new AuditParam("authToken", authToken),
                        new AuditParam("retailerId", m_retailerID),
                        new AuditParam("customerId", customerId),
                        new AuditParam("orderId", orderId),
                        new AuditParam("offerSKU", offerSKU),
                        new AuditParam("offerSKUToRollover", offerSKUToRollover),
                        new AuditParam("noOfTrialDays", noOfTrialDays)
                    );

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;
                    throw e;
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        AuditStream.Write(
                            userPuid, AuditSubsystem.MUSICNET, apiName, e.Message,
                            new AuditParam("authToken", authToken),
                            new AuditParam("retailerId", m_retailerID),
                            new AuditParam("customerId", customerId),
                            new AuditParam("orderId", orderId),
                            new AuditParam("offerSKU", offerSKU),
                            new AuditParam("offerSKUToRollover", offerSKUToRollover),
                            new AuditParam("noOfTrialDays", noOfTrialDays)
                        );

                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId, offerSKU,
                            offerSKUToRollover, noOfTrialDays.ToString("d"),
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void EndTrialSubscriptionOffer(string customerId, string orderId)
        {
            string apiName = "EndTrialSubscriptionOffer";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = EndTrialSubscriptionOfferTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.EndTrialSubscriptionOffer(authToken, m_retailerID, customerId, orderId, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void AddSubscriptionOffer(ulong userPuid, string customerId, string orderId, string offerSKU)
        {
            string apiName = "AddSubscriptionOffer";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = AddSubscriptionOfferTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.AddSubscriptionOffer(authToken, m_retailerID, customerId, orderId, offerSKU,
                        extraParameters);

                    AuditStream.Write(
                        userPuid, AuditSubsystem.MUSICNET, apiName, string.Empty,
                        new AuditParam("authToken", authToken),
                        new AuditParam("retailerId", m_retailerID),
                        new AuditParam("customerId", customerId),
                        new AuditParam("orderId", orderId),
                        new AuditParam("offerSKU", offerSKU)
                    );

                    result = APIResultEnum.Success;

                    Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, "MusicnetClient.AddSubscriptionOffer: user: 0x" + customerId + " successfully subscribed to offer: " + offerSKU + " (orderId: " + orderId + ")");

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;
                    throw e;
                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        AuditStream.Write(
                            userPuid, AuditSubsystem.MUSICNET, apiName, e.Message,
                            new AuditParam("authToken", authToken),
                            new AuditParam("retailerId", m_retailerID),
                            new AuditParam("customerId", customerId),
                            new AuditParam("orderId", orderId),
                            new AuditParam("offerSKU", offerSKU)
                        );

                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId, offerSKU,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void CancelSubscriptionOffer(ulong userPuid, string customerId, string orderId, bool immediate)
        {
            string apiName = "CancelSubscriptionOffer";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = CancelSubscriptionOfferTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.CancelSubscriptionOffer(authToken, m_retailerID, customerId, orderId, immediate,
                        extraParameters);

                    AuditStream.Write(
                        userPuid, AuditSubsystem.MUSICNET, apiName, string.Empty,
                        new AuditParam("authToken", authToken),
                        new AuditParam("retailerId", m_retailerID),
                        new AuditParam("customerId", customerId),
                        new AuditParam("immediate", immediate.ToString())
                    );

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        AuditStream.Write(
                            userPuid, AuditSubsystem.MUSICNET, apiName, e.Message,
                            new AuditParam("authToken", authToken),
                            new AuditParam("retailerId", m_retailerID),
                            new AuditParam("customerId", customerId),
                            new AuditParam("immediate", immediate.ToString())
                        );

                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId, immediate ? "true" : "false",
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void UpgradeSubscriptionOffer(string customerId, string orderId, string offerSKU,
            bool immediate)
        {
            string apiName = "UpgradeSubscriptionOffer";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = UpgradeSubscriptionOfferTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.UpgradeSubscriptionOffer(authToken, m_retailerID, customerId, orderId, offerSKU,
                        immediate, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId, offerSKU,
                            immediate ? "true" : "false", DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual void DowngradeSubscriptionOffer(string customerId, string orderId, string
            offerSKU, bool immediate)
        {
            string apiName = "DowngradeSubscriptionOffer";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = DowngradeSubscriptionOfferTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    m_ecommService.DowngradeSubscriptionOffer(authToken, m_retailerID, customerId, orderId, offerSKU,
                        immediate, extraParameters);

                    result = APIResultEnum.Success;

                    return;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId, offerSKU,
                            immediate ? "true" : "false", DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual Purchase PurchaseAssets(ulong userPuid, string customerId, string orderId,
            PurchaseItem [] items, string isoCountryCode, bool allowPartialPurchases)
        {
            if ( false == Config.GetBoolSetting(Setting.crux_useMusicNetForProvisioning) )
            {
                Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_HIGH, string.Format("PurchaseAssets: customerId: {0}, orderId:{1}: crux_useMusicNetForProvisioning is false so no call will be made!", customerId, orderId));
                return null;
            }

            string apiName = "PurchaseAssets";
            string authToken = null;
            CustomProperty [] extraParameters = null;

            int attempts = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string [] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = PurchaseAssetsTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    Purchase purchase = m_ecommService.PurchaseAssets(authToken, m_retailerID,
                        customerId, orderId, items, isoCountryCode, allowPartialPurchases, extraParameters);

                    outParams = new string [] { DumpPurchaseItemResponses(purchase.itemsWithErrors) };
                    if (purchase.itemsWithErrors != null && purchase.itemsWithErrors.Length > 0)
                    {
                        throw new XRLException(MusicnetException.GetXonlineHResultFromMNError((uint)purchase.itemsWithErrors[0].error.code), XEvent.Id.COMMON_CODE_131,
                          string.Format("MusicNet.PurchaseAssets failed: itemsWithErrors={0}",
                              DumpPurchaseItemResponses(purchase.itemsWithErrors)));
                    }

                    AuditStream.Write(
                        userPuid, AuditSubsystem.MUSICNET, apiName, string.Empty,
                        new AuditParam("authToken", authToken),
                        new AuditParam("retailerId", m_retailerID),
                        new AuditParam("customerId", customerId),
                        new AuditParam("orderId", orderId),
                        new AuditXmlParam("itemsXml", MNServiceWrapper.AuditItems(items)),
                        new AuditParam("isoCountryCode", isoCountryCode),
                        new AuditParam("allowPartialPurchases", allowPartialPurchases.ToString())
                    );

                    result = APIResultEnum.Success;

                    return purchase;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;
                    throw e;

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        AuditStream.Write(
                            userPuid, AuditSubsystem.MUSICNET, apiName, e.Message,
                            new AuditParam("authToken", authToken),
                            new AuditParam("retailerId", m_retailerID),
                            new AuditParam("customerId", customerId),
                            new AuditParam("orderId", orderId),
                            new AuditXmlParam("itemsXml", MNServiceWrapper.AuditItems(items)),
                            new AuditParam("isoCountryCode", isoCountryCode),
                            new AuditParam("allowPartialPurchases", allowPartialPurchases.ToString())
                        );

                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string [] { authToken, m_retailerID, customerId, orderId,
                        DumpPurchaseItems(items), isoCountryCode, allowPartialPurchases ? "true" : "false",
                        DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public virtual int TransferPurchaseDBEntitlements(string sourceXuid, string targetXuid, string orderId)
        {
            string apiName = "TransferPurchaseDBEntitlements";
            CustomProperty[] extraParameters = null;

            int attempts = 0;
            int transferredItems = 0;
            while (true)
            {
                APIResultEnum result = APIResultEnum.Failed;
                XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();
                string mnErrorDetails = null;
                string[] outParams = null;

                try
                {
                    CheckForFailFast(apiName, ref result);

                    HandlePerfCountersBegin(apiName);

                    attempts++;

                    int timeout = TransferPurchaseDBEntitlementsTimeoutSeconds * 1000;

                    MusicnetFailure.HandleBehaviorInjection(apiName, orderId, ref timeout);

                    m_ecommService.Timeout = timeout;

                    transferredItems = m_ecommService.TransferEntitlements(sourceXuid, targetXuid, extraParameters);

                    result = APIResultEnum.Success;

                    return transferredItems;
                }
                catch (SoapException se)
                {
                    MusicnetException e = MusicnetException.FromSoapException(se);
                    mnErrorDetails = e.Message;

                    if (!e.CanRetry || attempts >= ApiMaxRetryAttempts)
                    {
                        throw e;
                    }

                    // else try the API again
                }
                catch (WebException e)
                {
                    if (FastFailHelper.ConsiderWebExceptionAsTimeout(e))
                    {
                        result = APIResultEnum.Timeout;
                        HandleTimeout(apiName, e.ToString());
                    }

                    throw;
                }
                finally
                {
                    HandlePerfCountersEnd(apiName, result, timeElapsed);

                    LogApiCall(apiName, result, timeElapsed.MillisecondsElapsed,
                        new string[] { sourceXuid, targetXuid,
                            DumpCustomProperties(extraParameters) },
                        outParams,
                        mnErrorDetails
                        );
                }
            }
        }

        public static void InitControl()
        {
            if (!m_initXomControl)
            {
                lock (typeof(MNServiceWrapper))
                {
                    if (!m_initXomControl)
                    {
                        XomControl.ControlRequestEvent +=
                            new XomControl.ControlRequestEventHandler(MNServiceWrapper.OnControlRequest);

                        m_initXomControl = true;
                    }
                }
            }
        }

        protected static void OnControlRequest(object sender, ControlRequestEventArgs args)
        {
            try
            {
                switch (args.Command.ToLower())
                {
                    case "help":
                        XomControlConnection.SendMessage(
                            "MusicNet help:\n  GetServiceConfiguration: refresh the service url from MusicNet\n\n",
                            args.RequestId
                            );
                        args.Handled = true;
                        break;

                    case "getserviceconfiguration":
                        ProcessGetServiceConfigurationRequest(args);
                        args.Handled = true;
                        break;
                }
            }
            catch(Exception e)
            {
                XomControlConnection.SendMessage("Error: " + e.ToString() + "\n\n", args.RequestId);
            }
        }

        protected static void ProcessGetServiceConfigurationRequest(ControlRequestEventArgs args)
        {
            try
            {
                XomControlConnection.SendMessage(
                    string.Format("old musicnetEcommUrl: {0}\n",
                        m_musicnetEcommUrl == null ? "(not configured)" : m_musicnetEcommUrl),
                    args.RequestId
                    );

                UpdateServiceConfiguration();

                XomControlConnection.SendMessage(
                    string.Format("new musicnetEcommUrl: {0}\n",
                        m_musicnetEcommUrl == null ? "(not configured)" : m_musicnetEcommUrl),
                    args.RequestId
                    );
            }
            catch (Exception e)
            {
                XomControlConnection.SendMessage(
                    "Failed: " + e.ToString() + "\n",
                    args.RequestId
                    );
                return;
            }
        }

        public string DumpError(Error error)
        {
            if (error == null)
                return "|";

            return string.Format("{0}|{1}", error.code.ToString("d"), error.description);
        }

        public string DumpPurchaseItemResponses(PurchaseItemResponse [] responses)
        {
            if (responses == null || responses.Length == 0)
                return "0";

            StringBuilder sb = new StringBuilder();
            sb.Append(responses.Length.ToString("d"));

            foreach (PurchaseItemResponse r in responses)
            {
                sb.Append('|');
                sb.Append(r.mnetId);
                sb.Append('|');
                sb.Append(r.assetCode);
                sb.Append('|');
                sb.Append(DumpError(r.error));
            }

            return sb.ToString();
        }

        public string DumpCustomProperties(CustomProperty [] extraParameters)
        {
            if (extraParameters == null || extraParameters.Length == 0)
                return "0";

            StringBuilder sb = new StringBuilder();
            sb.Append(extraParameters.Length.ToString("d"));

            foreach (CustomProperty cp in extraParameters)
            {
                sb.Append('|');
                sb.Append(cp.name);
                sb.Append('|');
                sb.Append(cp.value);
            }

            return sb.ToString();
        }

        public string DumpItemPrice(ItemPrice price)
        {
            if (price == null)
                return "|";

            StringBuilder sb = new StringBuilder();
            sb.Append(price.amount);
            sb.Append('|');
            switch (price.currency)
            {
                case Currency.None:
                    sb.Append("None");
                    break;

                case Currency.USD:
                    sb.Append("USD");
                    break;

                case Currency.CAD:
                    sb.Append("CAD");
                    break;

                case Currency.GBP:
                    sb.Append("GBP");
                    break;

                case Currency.EUR:
                    sb.Append("EUR");
                    break;

                case Currency.JPY:
                    sb.Append("JPY");
                    break;
            }

            return sb.ToString();
        }

        public string DumpPurchaseType(PurchaseType purchaseType)
        {
            switch (purchaseType)
            {
                case PurchaseType.Standard:
                    return "Standard";

                case PurchaseType.SubscriptionFree:
                    return "SubscriptionFree";

                default:
                    return "Unknown";
            }
        }

        public string DumpPurchaseItemType(PurchaseItemType type)
        {
            switch (type)
            {
                case PurchaseItemType.Track:
                    return "Track";

                case PurchaseItemType.Album:
                    return "Album";

                case PurchaseItemType.Video:
                    return "Video";

                case PurchaseItemType.Undefined:
                    return "Undefined";

                default:
                    return "Unknown";
            }
        }

        public string DumpPurchaseItems(PurchaseItem [] items)
        {
            if (items == null || items.Length == 0)
                return "0";

            StringBuilder sb = new StringBuilder();
            sb.Append(items.Length.ToString("d"));

            foreach (PurchaseItem pi in items)
            {
                sb.Append('|');
                sb.Append(pi.assetCode);
                sb.Append('|');
                sb.Append(pi.mnetId);
                sb.Append('|');
                if ( pi.purchaseType.HasValue )
                {
                    sb.Append(DumpPurchaseType(pi.purchaseType.Value));
                    sb.Append('|');
                }
                sb.Append(DumpItemPrice(pi.suggestedRetailPrice));
                sb.Append('|');
                sb.Append(DumpItemPrice(pi.soldForPrice));
            }

            return sb.ToString();
        }

        public static string DumpServiceConfiguration(ServiceConfiguration serviceConfiguration)
        {
            StringBuilder sb = new StringBuilder();
            sb.Append(serviceConfiguration.location);
            sb.Append('|');
            if (serviceConfiguration.getServiceConfigurationReturn == null)
                sb.Append('0');
            else
            {
                sb.Append(serviceConfiguration.getServiceConfigurationReturn.Length.ToString("d"));

                foreach (MethodConfiguration c in serviceConfiguration.getServiceConfigurationReturn)
                {
                    sb.Append('|');
                    sb.Append(c.methodName);
                    sb.Append('|');
                    sb.Append(c.clientRequestSignatureRequired ? "true" : "false");
                    sb.Append('|');
                    sb.Append(c.serverResponseSignatureRequired ? "true" : "false");
                }
            }

            return sb.ToString();

        }

        public static string DumpService(Service service)
        {
            switch (service)
            {
                case Service.Fulfillment:
                    return "Fulfillment";

                case Service.Discovery:
                    return "Discovery";

                case Service.Utilities:
                    return "Utilities";

                case Service.EcommerceB2B:
                    return "EcommerceB2B";

                case Service.CamB2B:
                    return "CamB2B";

                case Service.Community:
                    return "Community";

                default:
                    return "Unknown";
            }
        }

        public static string AuditItems(PurchaseItem[] items) {

            if (items == null) return string.Empty;
            StringBuilder sb = new StringBuilder();

            sb.AppendLine("<items>");

            foreach (PurchaseItem pi in items) {
                sb.AppendLine("<item>");
                sb.AppendLine("<assetCode>" + pi.assetCode + "</assetCode>");
                sb.AppendLine("<mnetId>" + pi.mnetId + "</mnetId>");
                if ( pi.purchaseType.HasValue )
                {
                    sb.Append("<purchaseType>" + pi.purchaseType.Value + "</purchaseType>");
                }
                sb.AppendLine("</item>");
            }

            sb.AppendLine("</items>");
            return sb.ToString();
        }

        public static int ApiMaxRetryAttempts
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_apiMaxRetryAttempts);
            }
        }

        public static int GetServiceConfigurationTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_getServiceConfigurationTimeoutSeconds);
            }
        }

        public static int CreateAccountTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_createAccountTimeoutSeconds);
            }
        }

        public static int SuspendAccountTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_suspendAccountTimeoutSeconds);
            }
        }

        public static int ResumeAccountTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_resumeAccountTimeoutSeconds);
            }
        }

        public static int CloseAccountTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_closeAccountTimeoutSeconds);
            }
        }

        public static string DmpPurchaseTitleArtistFormatString
        {
            get
            {
                return Config.GetSetting(Setting.musicnet_dmpPurchaseTitleArtistFormatString);
            }
        }

        public static string DmpPurchaseGlobalMusicSKU
        {
            get
            {
                return Config.GetSetting(Setting.musicnet_dmpPurchaseGlobalMusicSKU);
            }
        }

        public static int DmpPurchaseGlobalMusicCampaignID
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_dmpPurchaseGlobalMusicCampaignID);
            }
        }

        public static string DmpPurchaseMusicTrackCategory
        {
            get
            {
                return Config.GetSetting(Setting.musicnet_dmpPurchaseMusicTrackCategory);
            }
        }

        public static string DmpPurchaseMusicAlbumCategory
        {
            get
            {
                return Config.GetSetting(Setting.musicnet_dmpPurchaseMusicAlbumCategory);
            }
        }

        public static int AddTrialSubscriptionOfferTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_addTrialSubscriptionOfferTimeoutSeconds);
            }
        }

        public static int EndTrialSubscriptionOfferTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_endTrialSubscriptionOfferTimeoutSeconds);
            }
        }

        public static int AddSubscriptionOfferTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_addSubscriptionOfferTimeoutSeconds);
            }
        }

        public static int CancelSubscriptionOfferTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_cancelSubscriptionOfferTimeoutSeconds);
            }
        }

        public static int UpgradeSubscriptionOfferTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_upgradeSubscriptionOfferTimeoutSeconds);
            }
        }

        public static int DowngradeSubscriptionOfferTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_downgradeSubscriptionOfferTimeoutSeconds);
            }
        }

        public static int PurchaseAssetsTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_purchaseAssetsTimeoutSeconds);
            }
        }

        public static int TransferPurchaseDBEntitlementsTimeoutSeconds
        {
            get
            {
                return Config.GetIntSetting(Setting.musicnet_transferPurchaseDBEntitlementsTimeoutSeconds);
            }
        }

        public static string MusicnetEcommerceUrl
        {
            get
            {
                if ( Config.GetBoolSetting(Setting.crux_useMusicNetForProvisioning) )
                {
                    if ( m_musicnetEcommUrl == null )
                    {
                        UpdateServiceConfiguration();
                    }
                    return m_musicnetEcommUrl;
                }
                else
                {
                    return Config.GetSetting(Setting.musicnet_getServiceConfigurationUrl);
                }
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\musicnet\musicnet-configuration-wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.832
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace musicnet.wsdl.client.configuration {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ConfigurationServiceHttpBinding", Namespace="http://ws.musicnet.com")]
    public partial class ConfigurationService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback IsAliveOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetServiceConfigurationOperationCompleted;
        
        /// <remarks/>
        public ConfigurationService() {
            this.Url = "http://ea-services-configuration.musicnet.com/WSMusicnet/services/ConfigurationSe" +
                "rvice";
        }
        
        /// <remarks/>
        public event IsAliveCompletedEventHandler IsAliveCompleted;
        
        /// <remarks/>
        public event GetServiceConfigurationCompletedEventHandler GetServiceConfigurationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out")]
        public bool IsAlive() {
            object[] results = this.Invoke("IsAlive", new object[0]);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginIsAlive(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("IsAlive", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndIsAlive(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void IsAliveAsync() {
            this.IsAliveAsync(null);
        }
        
        /// <remarks/>
        public void IsAliveAsync(object userState) {
            if ((this.IsAliveOperationCompleted == null)) {
                this.IsAliveOperationCompleted = new System.Threading.SendOrPostCallback(this.OnIsAliveOperationCompleted);
            }
            this.InvokeAsync("IsAlive", new object[0], this.IsAliveOperationCompleted, userState);
        }
        
        private void OnIsAliveOperationCompleted(object arg) {
            if ((this.IsAliveCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.IsAliveCompleted(this, new IsAliveCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public ServiceConfiguration GetServiceConfiguration([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<Service> service) {
            object[] results = this.Invoke("GetServiceConfiguration", new object[] {
                        retailerId,
                        service});
            return ((ServiceConfiguration)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServiceConfiguration(string retailerId, System.Nullable<Service> service, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServiceConfiguration", new object[] {
                        retailerId,
                        service}, callback, asyncState);
        }
        
        /// <remarks/>
        public ServiceConfiguration EndGetServiceConfiguration(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ServiceConfiguration)(results[0]));
        }
        
        /// <remarks/>
        public void GetServiceConfigurationAsync(string retailerId, System.Nullable<Service> service) {
            this.GetServiceConfigurationAsync(retailerId, service, null);
        }
        
        /// <remarks/>
        public void GetServiceConfigurationAsync(string retailerId, System.Nullable<Service> service, object userState) {
            if ((this.GetServiceConfigurationOperationCompleted == null)) {
                this.GetServiceConfigurationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetServiceConfigurationOperationCompleted);
            }
            this.InvokeAsync("GetServiceConfiguration", new object[] {
                        retailerId,
                        service}, this.GetServiceConfigurationOperationCompleted, userState);
        }
        
        private void OnGetServiceConfigurationOperationCompleted(object arg) {
            if ((this.GetServiceConfigurationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetServiceConfigurationCompleted(this, new GetServiceConfigurationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum Service {
        
        /// <remarks/>
        Fulfillment,
        
        /// <remarks/>
        Discovery,
        
        /// <remarks/>
        Utilities,
        
        /// <remarks/>
        EcommerceB2B,
        
        /// <remarks/>
        CamB2B,
        
        /// <remarks/>
        Community,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class ServiceConfiguration {
        
        private MethodConfiguration[] getServiceConfigurationReturnField;
        
        private string locationField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public MethodConfiguration[] getServiceConfigurationReturn {
            get {
                return this.getServiceConfigurationReturnField;
            }
            set {
                this.getServiceConfigurationReturnField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string location {
            get {
                return this.locationField;
            }
            set {
                this.locationField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class MethodConfiguration {
        
        private bool clientRequestSignatureRequiredField;
        
        private bool clientRequestSignatureRequiredFieldSpecified;
        
        private string methodNameField;
        
        private bool serverResponseSignatureRequiredField;
        
        private bool serverResponseSignatureRequiredFieldSpecified;
        
        /// <remarks/>
        public bool clientRequestSignatureRequired {
            get {
                return this.clientRequestSignatureRequiredField;
            }
            set {
                this.clientRequestSignatureRequiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool clientRequestSignatureRequiredSpecified {
            get {
                return this.clientRequestSignatureRequiredFieldSpecified;
            }
            set {
                this.clientRequestSignatureRequiredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string methodName {
            get {
                return this.methodNameField;
            }
            set {
                this.methodNameField = value;
            }
        }
        
        /// <remarks/>
        public bool serverResponseSignatureRequired {
            get {
                return this.serverResponseSignatureRequiredField;
            }
            set {
                this.serverResponseSignatureRequiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool serverResponseSignatureRequiredSpecified {
            get {
                return this.serverResponseSignatureRequiredFieldSpecified;
            }
            set {
                this.serverResponseSignatureRequiredFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void IsAliveCompletedEventHandler(object sender, IsAliveCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class IsAliveCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal IsAliveCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetServiceConfigurationCompletedEventHandler(object sender, GetServiceConfigurationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetServiceConfigurationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetServiceConfigurationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ServiceConfiguration Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ServiceConfiguration)(this.results[0]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\musicnet\musicnetPerf.cs ===
using System;
using System.Threading;
using System.Diagnostics;
using xonline.common.billing;
using xonline.common.mgmt;

namespace xonline.common.musicnet
{
    [XomPerformanceCounterCategoryAttr( "Partner: MusicNet", "XBox Live MusicNet Counters", true )]
    public class MusicNetCounters : XomPerformanceCounterCategory
    {
        static public MusicNetCounters Counters = new MusicNetCounters();

        public MusicNetCounters this[string api]
        {
            get
            {
                return (MusicNetCounters) GetInstance(api);
            }
        }

		[XomPerformanceCounterAttr(
			"MusicNet API requests/sec",
			"MusicNet SOAP API requests per second",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter CallsPerSecond;

		[XomPerformanceCounterAttr(
			"MusicNet API requests total",
			"Total MusicNet SOAP API requests made in the the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter CallsTotal;

		[XomPerformanceCounterAttr(
			"MusicNet API failures/sec",
			"Number of unsuccessful results returned per second in the current AppDomain.",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter CallsFailedPerSecond;

		[XomPerformanceCounterAttr(
			"MusicNet API total failures",
			"Total number unsuccessful results returned in the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter CallsFailedTotal;

		[XomPerformanceCounterAttr(
			"MusicNet API timeouts/sec",
			"Number of timeouts making MusicNet SOAP API calls per second in the current AppDomain.",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter TimeoutsPerSecond;

		[XomPerformanceCounterAttr(
			"MusicNet API total timeouts",
			"Total number of timeouts making MusicNet SOAP API calls in the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter TimeoutsTotal;

		[XomPerformanceCounterAttr(
			"MusicNet API blocked calls/sec",
			"Number of MusicNet SOAP API calls blocked due to blacklisting per second in the current AppDomain.",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter BlockedCallsPerSecond;

		[XomPerformanceCounterAttr(
			"MusicNet API total blocked calls",
			"Total number of MusicNet SOAP API calls blocked due to blacklisting per second in the current AppDomain.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter BlockedCallsTotal;

        [XomPerformanceCounterAttr(
			"Avg. execution time",
			"Average time taken to execute SOAP requests against MusicNet",
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter CallsTime;

    	[XomPerformanceCounterAttr(
			"Avg. execution time base",
			"Base average time taken to execute SOAP requests against MusicNet",
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter CallsTimeBase;
    }

    [XomPerformanceCounterCategoryAttr( "Partner: MusicNet Queue", "XBox Live MusicNet Queue Counters", true )]
    public class MusicNetQueueCounters : XomPerformanceCounterCategory
    {
        static public MusicNetQueueCounters Counters = new MusicNetQueueCounters();

		[XomPerformanceCounterAttr(
			"MusicNet::PurchaseAssets attempts/second",
			"MusicNet::PurchaseAssets attempts/second made by the MusicNet queue worker thread",
			 PerformanceCounterType.RateOfCountsPerSecond32)]
		public PerformanceCounter PurchaseAssetsAttemptsPerSecond;

		[XomPerformanceCounterAttr(
			"MusicNet::PurchaseAssets attempts total",
			"MusicNet::PurchaseAssets attempts total made by the MusicNet queue worker thread in this App Domain",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter PurchaseAssetsAttemptsTotal;

		[XomPerformanceCounterAttr(
			"Number of pending cancelable purchases",
			"Total number of purchases that need to be cancelled.  " +
            "This value represents the last known number, and won't include " +
            "activity by other servers which affect the pending size.",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter PurchaseAssetsPendingTotal;

		[XomPerformanceCounterAttr(
			"MusicNet::PurchaseAssets pump runs total",
			"Total times the MusicNet::PurchaseAssets pump has attempted to empty the queue in the current App Domain",
			 PerformanceCounterType.NumberOfItems64)]
		public PerformanceCounter PurchaseAssetsPumpRunsTotal;

        [XomPerformanceCounterAttr(
			"MusicNet::PurchaseAssets Pump avg. execution time",
			"Average time taken to pump the MusicNet::PurchaseAssets queue on all UODB partitions",
			 PerformanceCounterType.AverageTimer32)]
		public PerformanceCounter PurchaseAssetsPumpRunTime;

    	[XomPerformanceCounterAttr(
			"MusicNet::PurchaseAssets Pump avg. execution time base",
			"Base average time taken to pump the MusicNet::PurchaseAssets queue on all UODB partitions",
			 PerformanceCounterType.AverageBase)]
		public PerformanceCounter PurchaseAssetsPumpRunTimeBase;
    }


}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\musicnet\musicnet-ecomm-wsdl.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3031
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace musicnet.wsdl.client.ecomm {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="EcommerceB2BServiceHttpBinding", Namespace="http://ws.musicnet.com")]
    public partial class EcommerceB2BService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UpgradeSubscriptionOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback CancelSubscriptionOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSubscriptionOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback EndTrialSubscriptionOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback DowngradeSubscriptionOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback ResumeAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddTrialSubscriptionOfferOperationCompleted;
        
        private System.Threading.SendOrPostCallback PurchaseAssetsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CloseAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateAccountOperationCompleted;
        
        private System.Threading.SendOrPostCallback SuspendAccountOperationCompleted;

        private System.Threading.SendOrPostCallback TransferEntitlementsOperationCompleted;

        /// <remarks/>
        public EcommerceB2BService() {
            this.Url = "http://ie-services-ecommerceb2b.musicnet.com/WSMusicnet/services/EcommerceB2BServ" +
                "ice";
        }
        
        /// <remarks/>
        public event UpgradeSubscriptionOfferCompletedEventHandler UpgradeSubscriptionOfferCompleted;
        
        /// <remarks/>
        public event CancelSubscriptionOfferCompletedEventHandler CancelSubscriptionOfferCompleted;
        
        /// <remarks/>
        public event AddSubscriptionOfferCompletedEventHandler AddSubscriptionOfferCompleted;
        
        /// <remarks/>
        public event EndTrialSubscriptionOfferCompletedEventHandler EndTrialSubscriptionOfferCompleted;
        
        /// <remarks/>
        public event DowngradeSubscriptionOfferCompletedEventHandler DowngradeSubscriptionOfferCompleted;
        
        /// <remarks/>
        public event ResumeAccountCompletedEventHandler ResumeAccountCompleted;
        
        /// <remarks/>
        public event CreateAccountCompletedEventHandler CreateAccountCompleted;
        
        /// <remarks/>
        public event AddTrialSubscriptionOfferCompletedEventHandler AddTrialSubscriptionOfferCompleted;
        
        /// <remarks/>
        public event PurchaseAssetsCompletedEventHandler PurchaseAssetsCompleted;
        
        /// <remarks/>
        public event CloseAccountCompletedEventHandler CloseAccountCompleted;
        
        /// <remarks/>
        public event UpdateAccountCompletedEventHandler UpdateAccountCompleted;
        
        /// <remarks/>
        public event SuspendAccountCompletedEventHandler SuspendAccountCompleted;

        /// <remarks/>
        public event TransferEntitlementsCompletedEventHandler TransferEntitlementsCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpgradeSubscriptionOffer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offerSKU, bool immediate, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("UpgradeSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        immediate,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpgradeSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpgradeSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        immediate,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpgradeSubscriptionOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpgradeSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, CustomProperty[] extraParameters) {
            this.UpgradeSubscriptionOfferAsync(authToken, retailerId, customerId, orderId, offerSKU, immediate, extraParameters, null);
        }
        
        /// <remarks/>
        public void UpgradeSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, CustomProperty[] extraParameters, object userState) {
            if ((this.UpgradeSubscriptionOfferOperationCompleted == null)) {
                this.UpgradeSubscriptionOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpgradeSubscriptionOfferOperationCompleted);
            }
            this.InvokeAsync("UpgradeSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        immediate,
                        extraParameters}, this.UpgradeSubscriptionOfferOperationCompleted, userState);
        }
        
        private void OnUpgradeSubscriptionOfferOperationCompleted(object arg) {
            if ((this.UpgradeSubscriptionOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpgradeSubscriptionOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CancelSubscriptionOffer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, bool immediate, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("CancelSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        immediate,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCancelSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, bool immediate, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CancelSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        immediate,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCancelSubscriptionOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CancelSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, bool immediate, CustomProperty[] extraParameters) {
            this.CancelSubscriptionOfferAsync(authToken, retailerId, customerId, orderId, immediate, extraParameters, null);
        }
        
        /// <remarks/>
        public void CancelSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, bool immediate, CustomProperty[] extraParameters, object userState) {
            if ((this.CancelSubscriptionOfferOperationCompleted == null)) {
                this.CancelSubscriptionOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCancelSubscriptionOfferOperationCompleted);
            }
            this.InvokeAsync("CancelSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        immediate,
                        extraParameters}, this.CancelSubscriptionOfferOperationCompleted, userState);
        }
        
        private void OnCancelSubscriptionOfferOperationCompleted(object arg) {
            if ((this.CancelSubscriptionOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CancelSubscriptionOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddSubscriptionOffer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offerSKU, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("AddSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, string offerSKU, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddSubscriptionOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, CustomProperty[] extraParameters) {
            this.AddSubscriptionOfferAsync(authToken, retailerId, customerId, orderId, offerSKU, extraParameters, null);
        }
        
        /// <remarks/>
        public void AddSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, CustomProperty[] extraParameters, object userState) {
            if ((this.AddSubscriptionOfferOperationCompleted == null)) {
                this.AddSubscriptionOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSubscriptionOfferOperationCompleted);
            }
            this.InvokeAsync("AddSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        extraParameters}, this.AddSubscriptionOfferOperationCompleted, userState);
        }
        
        private void OnAddSubscriptionOfferOperationCompleted(object arg) {
            if ((this.AddSubscriptionOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSubscriptionOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void EndTrialSubscriptionOffer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("EndTrialSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginEndTrialSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("EndTrialSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndEndTrialSubscriptionOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void EndTrialSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters) {
            this.EndTrialSubscriptionOfferAsync(authToken, retailerId, customerId, orderId, extraParameters, null);
        }
        
        /// <remarks/>
        public void EndTrialSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, object userState) {
            if ((this.EndTrialSubscriptionOfferOperationCompleted == null)) {
                this.EndTrialSubscriptionOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEndTrialSubscriptionOfferOperationCompleted);
            }
            this.InvokeAsync("EndTrialSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, this.EndTrialSubscriptionOfferOperationCompleted, userState);
        }
        
        private void OnEndTrialSubscriptionOfferOperationCompleted(object arg) {
            if ((this.EndTrialSubscriptionOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EndTrialSubscriptionOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void DowngradeSubscriptionOffer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offerSKU, bool immediate, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("DowngradeSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        immediate,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDowngradeSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DowngradeSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        immediate,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndDowngradeSubscriptionOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void DowngradeSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, CustomProperty[] extraParameters) {
            this.DowngradeSubscriptionOfferAsync(authToken, retailerId, customerId, orderId, offerSKU, immediate, extraParameters, null);
        }
        
        /// <remarks/>
        public void DowngradeSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, bool immediate, CustomProperty[] extraParameters, object userState) {
            if ((this.DowngradeSubscriptionOfferOperationCompleted == null)) {
                this.DowngradeSubscriptionOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDowngradeSubscriptionOfferOperationCompleted);
            }
            this.InvokeAsync("DowngradeSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        immediate,
                        extraParameters}, this.DowngradeSubscriptionOfferOperationCompleted, userState);
        }
        
        private void OnDowngradeSubscriptionOfferOperationCompleted(object arg) {
            if ((this.DowngradeSubscriptionOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DowngradeSubscriptionOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ResumeAccount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("ResumeAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginResumeAccount(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ResumeAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndResumeAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void ResumeAccountAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters) {
            this.ResumeAccountAsync(authToken, retailerId, customerId, orderId, extraParameters, null);
        }
        
        /// <remarks/>
        public void ResumeAccountAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, object userState) {
            if ((this.ResumeAccountOperationCompleted == null)) {
                this.ResumeAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnResumeAccountOperationCompleted);
            }
            this.InvokeAsync("ResumeAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, this.ResumeAccountOperationCompleted, userState);
        }
        
        private void OnResumeAccountOperationCompleted(object arg) {
            if ((this.ResumeAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ResumeAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CreateAccount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string postalCode, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("CreateAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        postalCode,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateAccount(string authToken, string retailerId, string customerId, string orderId, string postalCode, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        postalCode,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCreateAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CreateAccountAsync(string authToken, string retailerId, string customerId, string orderId, string postalCode, CustomProperty[] extraParameters) {
            this.CreateAccountAsync(authToken, retailerId, customerId, orderId, postalCode, extraParameters, null);
        }
        
        /// <remarks/>
        public void CreateAccountAsync(string authToken, string retailerId, string customerId, string orderId, string postalCode, CustomProperty[] extraParameters, object userState) {
            if ((this.CreateAccountOperationCompleted == null)) {
                this.CreateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateAccountOperationCompleted);
            }
            this.InvokeAsync("CreateAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        postalCode,
                        extraParameters}, this.CreateAccountOperationCompleted, userState);
        }
        
        private void OnCreateAccountOperationCompleted(object arg) {
            if ((this.CreateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void AddTrialSubscriptionOffer([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offerSKU, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string offerSKUToRollover, int noOfTrialDays, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("AddTrialSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        offerSKUToRollover,
                        noOfTrialDays,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddTrialSubscriptionOffer(string authToken, string retailerId, string customerId, string orderId, string offerSKU, string offerSKUToRollover, int noOfTrialDays, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddTrialSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        offerSKUToRollover,
                        noOfTrialDays,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndAddTrialSubscriptionOffer(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void AddTrialSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, string offerSKUToRollover, int noOfTrialDays, CustomProperty[] extraParameters) {
            this.AddTrialSubscriptionOfferAsync(authToken, retailerId, customerId, orderId, offerSKU, offerSKUToRollover, noOfTrialDays, extraParameters, null);
        }
        
        /// <remarks/>
        public void AddTrialSubscriptionOfferAsync(string authToken, string retailerId, string customerId, string orderId, string offerSKU, string offerSKUToRollover, int noOfTrialDays, CustomProperty[] extraParameters, object userState) {
            if ((this.AddTrialSubscriptionOfferOperationCompleted == null)) {
                this.AddTrialSubscriptionOfferOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddTrialSubscriptionOfferOperationCompleted);
            }
            this.InvokeAsync("AddTrialSubscriptionOffer", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        offerSKU,
                        offerSKUToRollover,
                        noOfTrialDays,
                        extraParameters}, this.AddTrialSubscriptionOfferOperationCompleted, userState);
        }
        
        private void OnAddTrialSubscriptionOfferOperationCompleted(object arg) {
            if ((this.AddTrialSubscriptionOfferCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddTrialSubscriptionOfferCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("out", IsNullable=true)]
        public Purchase PurchaseAssets([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] PurchaseItem[] items, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string isoCountryCode, bool allowPartialPurchases, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            object[] results = this.Invoke("PurchaseAssets", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        items,
                        isoCountryCode,
                        allowPartialPurchases,
                        extraParameters});
            return ((Purchase)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginPurchaseAssets(string authToken, string retailerId, string customerId, string orderId, PurchaseItem[] items, string isoCountryCode, bool allowPartialPurchases, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("PurchaseAssets", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        items,
                        isoCountryCode,
                        allowPartialPurchases,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public Purchase EndPurchaseAssets(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Purchase)(results[0]));
        }
        
        /// <remarks/>
        public void PurchaseAssetsAsync(string authToken, string retailerId, string customerId, string orderId, PurchaseItem[] items, string isoCountryCode, bool allowPartialPurchases, CustomProperty[] extraParameters) {
            this.PurchaseAssetsAsync(authToken, retailerId, customerId, orderId, items, isoCountryCode, allowPartialPurchases, extraParameters, null);
        }
        
        /// <remarks/>
        public void PurchaseAssetsAsync(string authToken, string retailerId, string customerId, string orderId, PurchaseItem[] items, string isoCountryCode, bool allowPartialPurchases, CustomProperty[] extraParameters, object userState) {
            if ((this.PurchaseAssetsOperationCompleted == null)) {
                this.PurchaseAssetsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPurchaseAssetsOperationCompleted);
            }
            this.InvokeAsync("PurchaseAssets", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        items,
                        isoCountryCode,
                        allowPartialPurchases,
                        extraParameters}, this.PurchaseAssetsOperationCompleted, userState);
        }
        
        private void OnPurchaseAssetsOperationCompleted(object arg) {
            if ((this.PurchaseAssetsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PurchaseAssetsCompleted(this, new PurchaseAssetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void CloseAccount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("CloseAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCloseAccount(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CloseAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndCloseAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void CloseAccountAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters) {
            this.CloseAccountAsync(authToken, retailerId, customerId, orderId, extraParameters, null);
        }
        
        /// <remarks/>
        public void CloseAccountAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, object userState) {
            if ((this.CloseAccountOperationCompleted == null)) {
                this.CloseAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCloseAccountOperationCompleted);
            }
            this.InvokeAsync("CloseAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, this.CloseAccountOperationCompleted, userState);
        }
        
        private void OnCloseAccountOperationCompleted(object arg) {
            if ((this.CloseAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CloseAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void UpdateAccount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<AccountUpdateType> updateType, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string updateValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("UpdateAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        updateType,
                        updateValue,
                        orderId,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateAccount(string authToken, string retailerId, string customerId, System.Nullable<AccountUpdateType> updateType, string updateValue, string orderId, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        updateType,
                        updateValue,
                        orderId,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndUpdateAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void UpdateAccountAsync(string authToken, string retailerId, string customerId, System.Nullable<AccountUpdateType> updateType, string updateValue, string orderId, CustomProperty[] extraParameters) {
            this.UpdateAccountAsync(authToken, retailerId, customerId, updateType, updateValue, orderId, extraParameters, null);
        }
        
        /// <remarks/>
        public void UpdateAccountAsync(string authToken, string retailerId, string customerId, System.Nullable<AccountUpdateType> updateType, string updateValue, string orderId, CustomProperty[] extraParameters, object userState) {
            if ((this.UpdateAccountOperationCompleted == null)) {
                this.UpdateAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateAccountOperationCompleted);
            }
            this.InvokeAsync("UpdateAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        updateType,
                        updateValue,
                        orderId,
                        extraParameters}, this.UpdateAccountOperationCompleted, userState);
        }
        
        private void OnUpdateAccountOperationCompleted(object arg) {
            if ((this.UpdateAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://ws.musicnet.com", ResponseNamespace="http://ws.musicnet.com", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void SuspendAccount([System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string authToken, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string retailerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string customerId, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] string orderId, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute("item")] CustomProperty[] extraParameters) {
            this.Invoke("SuspendAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSuspendAccount(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SuspendAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndSuspendAccount(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }

        /// <remarks/>
        public void SuspendAccountAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters) {
            this.SuspendAccountAsync(authToken, retailerId, customerId, orderId, extraParameters, null);
        }
        
        /// <remarks/>
        public void SuspendAccountAsync(string authToken, string retailerId, string customerId, string orderId, CustomProperty[] extraParameters, object userState) {
            if ((this.SuspendAccountOperationCompleted == null)) {
                this.SuspendAccountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSuspendAccountOperationCompleted);
            }
            this.InvokeAsync("SuspendAccount", new object[] {
                        authToken,
                        retailerId,
                        customerId,
                        orderId,
                        extraParameters}, this.SuspendAccountOperationCompleted, userState);
        }
        
        private void OnSuspendAccountOperationCompleted(object arg) {
            if ((this.SuspendAccountCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SuspendAccountCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://ws.musicnet.com/TransferEntitlements", RequestNamespace = "http://ws.musicnet.com", ResponseNamespace = "http://ws.musicnet.com", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int TransferEntitlements(string sourceXuid, string targetXuid, CustomProperty[] extraParameters)
        {
            object[] results = this.Invoke("TransferEntitlements", new object[] {
                        sourceXuid,
                        targetXuid,
                        extraParameters});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void TransferEntitlementsAsync(string sourceXuid, string targetXuid, CustomProperty[] extraParameters)
        {
            this.TransferEntitlementsAsync(sourceXuid, targetXuid, extraParameters, null);
        }

        /// <remarks/>
        public void TransferEntitlementsAsync(string sourceXuid, string targetXuid, CustomProperty[] extraParameters, object userState)
        {
            if ((this.TransferEntitlementsOperationCompleted == null))
            {
                this.TransferEntitlementsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTransferEntitlementsOperationCompleted);
            }
            this.InvokeAsync("TransferEntitlements", new object[] {
                        sourceXuid,
                        targetXuid,
                        extraParameters}, this.TransferEntitlementsOperationCompleted, userState);
        }

        private void OnTransferEntitlementsOperationCompleted(object arg)
        {
            if ((this.TransferEntitlementsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TransferEntitlementsCompleted(this, new TransferEntitlementsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class CustomProperty {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class Error {
        
        private int codeField;
        
        private bool codeFieldSpecified;
        
        private string descriptionField;
        
        /// <remarks/>
        public int code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool codeSpecified {
            get {
                return this.codeFieldSpecified;
            }
            set {
                this.codeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class PurchaseItemResponse {
        
        private string assetCodeField;
        
        private Error errorField;
        
        private string mnetIdField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string assetCode {
            get {
                return this.assetCodeField;
            }
            set {
                this.assetCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public Error error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mnetId {
            get {
                return this.mnetIdField;
            }
            set {
                this.mnetIdField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class Purchase {
        
        private PurchaseItemResponse[] itemsWithErrorsField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)]
        [System.Xml.Serialization.XmlArrayItemAttribute("item")]
        public PurchaseItemResponse[] itemsWithErrors {
            get {
                return this.itemsWithErrorsField;
            }
            set {
                this.itemsWithErrorsField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class ItemPrice {
        
        private string amountField;
        
        private Currency currencyField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string amount {
            get {
                return this.amountField;
            }
            set {
                this.amountField = value;
            }
        }
        
        /// <remarks/>
        public Currency currency {
            get {
                return this.currencyField;
            }
            set {
                this.currencyField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum Currency {
        
        /// <remarks/>
        None,
        
        /// <remarks/>
        USD,
        
        /// <remarks/>
        CAD,
        
        /// <remarks/>
        GBP,
        
        /// <remarks/>
        EUR,
        
        /// <remarks/>
        JPY,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public partial class PurchaseItem {
        
        private string assetCodeField;
        
        private string mnetIdField;
        
        private System.Nullable<PurchaseType> purchaseTypeField;
        
        private bool purchaseTypeFieldSpecified;
        
        private ItemPrice soldForPriceField;
        
        private ItemPrice suggestedRetailPriceField;
        
        private System.Nullable<PurchaseItemType> typeField;
        
        private bool typeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string assetCode {
            get {
                return this.assetCodeField;
            }
            set {
                this.assetCodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public string mnetId {
            get {
                return this.mnetIdField;
            }
            set {
                this.mnetIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<PurchaseType> purchaseType {
            get {
                return this.purchaseTypeField;
            }
            set {
                this.purchaseTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool purchaseTypeSpecified {
            get {
                return this.purchaseTypeFieldSpecified;
            }
            set {
                this.purchaseTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ItemPrice soldForPrice {
            get {
                return this.soldForPriceField;
            }
            set {
                this.soldForPriceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public ItemPrice suggestedRetailPrice {
            get {
                return this.suggestedRetailPriceField;
            }
            set {
                this.suggestedRetailPriceField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<PurchaseItemType> type {
            get {
                return this.typeField;
            }
            set {
                this.typeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeSpecified {
            get {
                return this.typeFieldSpecified;
            }
            set {
                this.typeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum PurchaseType {
        
        /// <remarks/>
        Standard,
        
        /// <remarks/>
        SubscriptionFree,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum PurchaseItemType {
        
        /// <remarks/>
        Track,
        
        /// <remarks/>
        Album,
        
        /// <remarks/>
        Video,
        
        /// <remarks/>
        Undefined,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://ws.musicnet.com")]
    public enum AccountUpdateType {
        
        /// <remarks/>
        PostalCode,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpgradeSubscriptionOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CancelSubscriptionOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddSubscriptionOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void EndTrialSubscriptionOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DowngradeSubscriptionOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ResumeAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddTrialSubscriptionOfferCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void PurchaseAssetsCompletedEventHandler(object sender, PurchaseAssetsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PurchaseAssetsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PurchaseAssetsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public Purchase Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Purchase)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TransferEntitlementsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal TransferEntitlementsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CloseAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SuspendAccountCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void TransferEntitlementsCompletedEventHandler(object sender, TransferEntitlementsCompletedEventArgs e);
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\msnrr\msnrr-wsdl-multiple-rating.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace msnrr.wsdl.rating.multiple {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MultiRatingSoap", Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatingItem))]
    public partial class MultiRating : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AdvanceStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNicknameOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNicknameSuggestionsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingAverageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingAverageRollupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingByUserWithAverageOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleRatingsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRatingsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewsByUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetReviewsRollupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetUnauthRatingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveNicknameOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveRatingOperationCompleted;
        
        private System.Threading.SendOrPostCallback BulkSaveRatingOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReportViolationOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback BulkSaveReviewOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveReviewHelpfulnessOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveUnauthRatingsOperationCompleted;
        
        private System.Threading.SendOrPostCallback ValidateReviewOperationCompleted;
        
        /// <remarks/>
        public MultiRating() {
            this.Url = "http://rr.msn-int.com/rrwebservice/multirating.asmx";
        }
        
        /// <remarks/>
        public event AdvanceStateCompletedEventHandler AdvanceStateCompleted;
        
        /// <remarks/>
        public event GetNicknameCompletedEventHandler GetNicknameCompleted;
        
        /// <remarks/>
        public event GetNicknameSuggestionsCompletedEventHandler GetNicknameSuggestionsCompleted;
        
        /// <remarks/>
        public event GetRatingAverageCompletedEventHandler GetRatingAverageCompleted;
        
        /// <remarks/>
        public event GetRatingAverageRollupCompletedEventHandler GetRatingAverageRollupCompleted;
        
        /// <remarks/>
        public event GetRatingByUserCompletedEventHandler GetRatingByUserCompleted;
        
        /// <remarks/>
        public event GetRatingByUserWithAverageCompletedEventHandler GetRatingByUserWithAverageCompleted;
        
        /// <remarks/>
        public event GetMultipleRatingsByUserCompletedEventHandler GetMultipleRatingsByUserCompleted;
        
        /// <remarks/>
        public event GetRatingsByUserCompletedEventHandler GetRatingsByUserCompleted;
        
        /// <remarks/>
        public event GetReviewByUserCompletedEventHandler GetReviewByUserCompleted;
        
        /// <remarks/>
        public event GetReviewsCompletedEventHandler GetReviewsCompleted;
        
        /// <remarks/>
        public event GetReviewsByUserCompletedEventHandler GetReviewsByUserCompleted;
        
        /// <remarks/>
        public event GetReviewsRollupCompletedEventHandler GetReviewsRollupCompleted;
        
        /// <remarks/>
        public event GetUnauthRatingsCompletedEventHandler GetUnauthRatingsCompleted;
        
        /// <remarks/>
        public event SaveNicknameCompletedEventHandler SaveNicknameCompleted;
        
        /// <remarks/>
        public event SaveRatingCompletedEventHandler SaveRatingCompleted;
        
        /// <remarks/>
        public event BulkSaveRatingCompletedEventHandler BulkSaveRatingCompleted;
        
        /// <remarks/>
        public event SaveReportViolationCompletedEventHandler SaveReportViolationCompleted;
        
        /// <remarks/>
        public event SaveReviewCompletedEventHandler SaveReviewCompleted;
        
        /// <remarks/>
        public event BulkSaveReviewCompletedEventHandler BulkSaveReviewCompleted;
        
        /// <remarks/>
        public event SaveReviewHelpfulnessCompletedEventHandler SaveReviewHelpfulnessCompleted;
        
        /// <remarks/>
        public event SaveUnauthRatingsCompletedEventHandler SaveUnauthRatingsCompleted;
        
        /// <remarks/>
        public event ValidateReviewCompletedEventHandler ValidateReviewCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/AdvanceState", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode AdvanceState(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values) {
            object[] results = this.Invoke("AdvanceState", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        keys,
                        values});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAdvanceState(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AdvanceState", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        keys,
                        values}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndAdvanceState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public void AdvanceStateAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values) {
            this.AdvanceStateAsync(contentTypeID, itemID, puid, msnGuid, keys, values, null);
        }
        
        /// <remarks/>
        public void AdvanceStateAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string[] keys, string[] values, object userState) {
            if ((this.AdvanceStateOperationCompleted == null)) {
                this.AdvanceStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdvanceStateOperationCompleted);
            }
            this.InvokeAsync("AdvanceState", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        keys,
                        values}, this.AdvanceStateOperationCompleted, userState);
        }
        
        private void OnAdvanceStateOperationCompleted(object arg) {
            if ((this.AdvanceStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AdvanceStateCompleted(this, new AdvanceStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetNickname", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNickname(long puid, System.Guid msnGuid, out string nickname) {
            object[] results = this.Invoke("GetNickname", new object[] {
                        puid,
                        msnGuid});
            nickname = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNickname(long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNickname", new object[] {
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetNickname(System.IAsyncResult asyncResult, out string nickname) {
            object[] results = this.EndInvoke(asyncResult);
            nickname = ((string)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNicknameAsync(long puid, System.Guid msnGuid) {
            this.GetNicknameAsync(puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetNicknameAsync(long puid, System.Guid msnGuid, object userState) {
            if ((this.GetNicknameOperationCompleted == null)) {
                this.GetNicknameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNicknameOperationCompleted);
            }
            this.InvokeAsync("GetNickname", new object[] {
                        puid,
                        msnGuid}, this.GetNicknameOperationCompleted, userState);
        }
        
        private void OnGetNicknameOperationCompleted(object arg) {
            if ((this.GetNicknameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNicknameCompleted(this, new GetNicknameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetNicknameSuggestions", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetNicknameSuggestions(string seed, out string[] suggestionList) {
            object[] results = this.Invoke("GetNicknameSuggestions", new object[] {
                        seed});
            suggestionList = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNicknameSuggestions(string seed, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNicknameSuggestions", new object[] {
                        seed}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetNicknameSuggestions(System.IAsyncResult asyncResult, out string[] suggestionList) {
            object[] results = this.EndInvoke(asyncResult);
            suggestionList = ((string[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetNicknameSuggestionsAsync(string seed) {
            this.GetNicknameSuggestionsAsync(seed, null);
        }
        
        /// <remarks/>
        public void GetNicknameSuggestionsAsync(string seed, object userState) {
            if ((this.GetNicknameSuggestionsOperationCompleted == null)) {
                this.GetNicknameSuggestionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNicknameSuggestionsOperationCompleted);
            }
            this.InvokeAsync("GetNicknameSuggestions", new object[] {
                        seed}, this.GetNicknameSuggestionsOperationCompleted, userState);
        }
        
        private void OnGetNicknameSuggestionsOperationCompleted(object arg) {
            if ((this.GetNicknameSuggestionsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNicknameSuggestionsCompleted(this, new GetNicknameSuggestionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingAverage", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingAverage(System.Guid contentTypeID, object itemID, out Rating rating) {
            object[] results = this.Invoke("GetRatingAverage", new object[] {
                        contentTypeID,
                        itemID});
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingAverage(System.Guid contentTypeID, object itemID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingAverage", new object[] {
                        contentTypeID,
                        itemID}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingAverage(System.IAsyncResult asyncResult, out Rating rating) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingAverageAsync(System.Guid contentTypeID, object itemID) {
            this.GetRatingAverageAsync(contentTypeID, itemID, null);
        }
        
        /// <remarks/>
        public void GetRatingAverageAsync(System.Guid contentTypeID, object itemID, object userState) {
            if ((this.GetRatingAverageOperationCompleted == null)) {
                this.GetRatingAverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingAverageOperationCompleted);
            }
            this.InvokeAsync("GetRatingAverage", new object[] {
                        contentTypeID,
                        itemID}, this.GetRatingAverageOperationCompleted, userState);
        }
        
        private void OnGetRatingAverageOperationCompleted(object arg) {
            if ((this.GetRatingAverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingAverageCompleted(this, new GetRatingAverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingAverageRollup", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingAverageRollup(System.Guid contentTypeID, object itemID, out Rating rating) {
            object[] results = this.Invoke("GetRatingAverageRollup", new object[] {
                        contentTypeID,
                        itemID});
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingAverageRollup(System.Guid contentTypeID, object itemID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingAverageRollup", new object[] {
                        contentTypeID,
                        itemID}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingAverageRollup(System.IAsyncResult asyncResult, out Rating rating) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingAverageRollupAsync(System.Guid contentTypeID, object itemID) {
            this.GetRatingAverageRollupAsync(contentTypeID, itemID, null);
        }
        
        /// <remarks/>
        public void GetRatingAverageRollupAsync(System.Guid contentTypeID, object itemID, object userState) {
            if ((this.GetRatingAverageRollupOperationCompleted == null)) {
                this.GetRatingAverageRollupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingAverageRollupOperationCompleted);
            }
            this.InvokeAsync("GetRatingAverageRollup", new object[] {
                        contentTypeID,
                        itemID}, this.GetRatingAverageRollupOperationCompleted, userState);
        }
        
        private void OnGetRatingAverageRollupOperationCompleted(object arg) {
            if ((this.GetRatingAverageRollupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingAverageRollupCompleted(this, new GetRatingAverageRollupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, out Rating rating) {
            object[] results = this.Invoke("GetRatingByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid});
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingByUser(System.IAsyncResult asyncResult, out Rating rating) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid) {
            this.GetRatingByUserAsync(contentTypeID, itemID, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetRatingByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetRatingByUserOperationCompleted == null)) {
                this.GetRatingByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingByUserOperationCompleted);
            }
            this.InvokeAsync("GetRatingByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, this.GetRatingByUserOperationCompleted, userState);
        }
        
        private void OnGetRatingByUserOperationCompleted(object arg) {
            if ((this.GetRatingByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingByUserCompleted(this, new GetRatingByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingByUserWithAverage", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingByUserWithAverage(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, out Rating rating) {
            object[] results = this.Invoke("GetRatingByUserWithAverage", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid});
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingByUserWithAverage(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingByUserWithAverage", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingByUserWithAverage(System.IAsyncResult asyncResult, out Rating rating) {
            object[] results = this.EndInvoke(asyncResult);
            rating = ((Rating)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingByUserWithAverageAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid) {
            this.GetRatingByUserWithAverageAsync(contentTypeID, itemID, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetRatingByUserWithAverageAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetRatingByUserWithAverageOperationCompleted == null)) {
                this.GetRatingByUserWithAverageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingByUserWithAverageOperationCompleted);
            }
            this.InvokeAsync("GetRatingByUserWithAverage", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, this.GetRatingByUserWithAverageOperationCompleted, userState);
        }
        
        private void OnGetRatingByUserWithAverageOperationCompleted(object arg) {
            if ((this.GetRatingByUserWithAverageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingByUserWithAverageCompleted(this, new GetRatingByUserWithAverageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetMultipleRatingsByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetMultipleRatingsByUser(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid, out Rating[] ratings) {
            object[] results = this.Invoke("GetMultipleRatingsByUser", new object[] {
                        contentTypeID,
                        itemIDs,
                        puid,
                        msnGuid});
            ratings = ((Rating[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMultipleRatingsByUser(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMultipleRatingsByUser", new object[] {
                        contentTypeID,
                        itemIDs,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetMultipleRatingsByUser(System.IAsyncResult asyncResult, out Rating[] ratings) {
            object[] results = this.EndInvoke(asyncResult);
            ratings = ((Rating[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleRatingsByUserAsync(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid) {
            this.GetMultipleRatingsByUserAsync(contentTypeID, itemIDs, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetMultipleRatingsByUserAsync(System.Guid contentTypeID, object[] itemIDs, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetMultipleRatingsByUserOperationCompleted == null)) {
                this.GetMultipleRatingsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleRatingsByUserOperationCompleted);
            }
            this.InvokeAsync("GetMultipleRatingsByUser", new object[] {
                        contentTypeID,
                        itemIDs,
                        puid,
                        msnGuid}, this.GetMultipleRatingsByUserOperationCompleted, userState);
        }
        
        private void OnGetMultipleRatingsByUserOperationCompleted(object arg) {
            if ((this.GetMultipleRatingsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleRatingsByUserCompleted(this, new GetMultipleRatingsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetRatingsByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetRatingsByUser(System.Guid contentTypeID, long puid, ref System.Guid userID, System.Guid msnGuid, out Rating[] ratings, out string nickname) {
            object[] results = this.Invoke("GetRatingsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid});
            userID = ((System.Guid)(results[1]));
            ratings = ((Rating[])(results[2]));
            nickname = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRatingsByUser(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRatingsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetRatingsByUser(System.IAsyncResult asyncResult, out System.Guid userID, out Rating[] ratings, out string nickname) {
            object[] results = this.EndInvoke(asyncResult);
            userID = ((System.Guid)(results[1]));
            ratings = ((Rating[])(results[2]));
            nickname = ((string)(results[3]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetRatingsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid) {
            this.GetRatingsByUserAsync(contentTypeID, puid, userID, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetRatingsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, object userState) {
            if ((this.GetRatingsByUserOperationCompleted == null)) {
                this.GetRatingsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRatingsByUserOperationCompleted);
            }
            this.InvokeAsync("GetRatingsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, this.GetRatingsByUserOperationCompleted, userState);
        }
        
        private void OnGetRatingsByUserOperationCompleted(object arg) {
            if ((this.GetRatingsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRatingsByUserCompleted(this, new GetRatingsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviewByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviewByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, out Review review) {
            object[] results = this.Invoke("GetReviewByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid});
            review = ((Review)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviewByUser(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviewByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviewByUser(System.IAsyncResult asyncResult, out Review review) {
            object[] results = this.EndInvoke(asyncResult);
            review = ((Review)(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid) {
            this.GetReviewByUserAsync(contentTypeID, itemID, puid, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetReviewByUserAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, object userState) {
            if ((this.GetReviewByUserOperationCompleted == null)) {
                this.GetReviewByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewByUserOperationCompleted);
            }
            this.InvokeAsync("GetReviewByUser", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid}, this.GetReviewByUserOperationCompleted, userState);
        }
        
        private void OnGetReviewByUserOperationCompleted(object arg) {
            if ((this.GetReviewByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewByUserCompleted(this, new GetReviewByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviews", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviews(System.Guid contentTypeID, object itemID, ref int pageSize, ref int pageNum, ref string sortBy, ref string sortOrder, out int totalCount, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Review[] Reviews) {
            object[] results = this.Invoke("GetReviews", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder});
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviews(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviews", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviews(System.IAsyncResult asyncResult, out int pageSize, out int pageNum, out string sortBy, out string sortOrder, out int totalCount, out Review[] Reviews) {
            object[] results = this.EndInvoke(asyncResult);
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewsAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder) {
            this.GetReviewsAsync(contentTypeID, itemID, pageSize, pageNum, sortBy, sortOrder, null);
        }
        
        /// <remarks/>
        public void GetReviewsAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, object userState) {
            if ((this.GetReviewsOperationCompleted == null)) {
                this.GetReviewsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewsOperationCompleted);
            }
            this.InvokeAsync("GetReviews", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, this.GetReviewsOperationCompleted, userState);
        }
        
        private void OnGetReviewsOperationCompleted(object arg) {
            if ((this.GetReviewsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewsCompleted(this, new GetReviewsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviewsByUser", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviewsByUser(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Review[] Reviews) {
            object[] results = this.Invoke("GetReviewsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid});
            Reviews = ((Review[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviewsByUser(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviewsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviewsByUser(System.IAsyncResult asyncResult, out Review[] Reviews) {
            object[] results = this.EndInvoke(asyncResult);
            Reviews = ((Review[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid) {
            this.GetReviewsByUserAsync(contentTypeID, puid, userID, msnGuid, null);
        }
        
        /// <remarks/>
        public void GetReviewsByUserAsync(System.Guid contentTypeID, long puid, System.Guid userID, System.Guid msnGuid, object userState) {
            if ((this.GetReviewsByUserOperationCompleted == null)) {
                this.GetReviewsByUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewsByUserOperationCompleted);
            }
            this.InvokeAsync("GetReviewsByUser", new object[] {
                        contentTypeID,
                        puid,
                        userID,
                        msnGuid}, this.GetReviewsByUserOperationCompleted, userState);
        }
        
        private void OnGetReviewsByUserOperationCompleted(object arg) {
            if ((this.GetReviewsByUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewsByUserCompleted(this, new GetReviewsByUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetReviewsRollup", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetReviewsRollup(System.Guid contentTypeID, object itemID, ref int pageSize, ref int pageNum, ref string sortBy, ref string sortOrder, out int totalCount, [System.Xml.Serialization.XmlArrayAttribute(IsNullable=true)] [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false)] out Review[] Reviews) {
            object[] results = this.Invoke("GetReviewsRollup", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder});
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetReviewsRollup(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetReviewsRollup", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetReviewsRollup(System.IAsyncResult asyncResult, out int pageSize, out int pageNum, out string sortBy, out string sortOrder, out int totalCount, out Review[] Reviews) {
            object[] results = this.EndInvoke(asyncResult);
            pageSize = ((int)(results[1]));
            pageNum = ((int)(results[2]));
            sortBy = ((string)(results[3]));
            sortOrder = ((string)(results[4]));
            totalCount = ((int)(results[5]));
            Reviews = ((Review[])(results[6]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetReviewsRollupAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder) {
            this.GetReviewsRollupAsync(contentTypeID, itemID, pageSize, pageNum, sortBy, sortOrder, null);
        }
        
        /// <remarks/>
        public void GetReviewsRollupAsync(System.Guid contentTypeID, object itemID, int pageSize, int pageNum, string sortBy, string sortOrder, object userState) {
            if ((this.GetReviewsRollupOperationCompleted == null)) {
                this.GetReviewsRollupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetReviewsRollupOperationCompleted);
            }
            this.InvokeAsync("GetReviewsRollup", new object[] {
                        contentTypeID,
                        itemID,
                        pageSize,
                        pageNum,
                        sortBy,
                        sortOrder}, this.GetReviewsRollupOperationCompleted, userState);
        }
        
        private void OnGetReviewsRollupOperationCompleted(object arg) {
            if ((this.GetReviewsRollupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetReviewsRollupCompleted(this, new GetReviewsRollupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/GetUnauthRatings", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetUnauthRatings(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int daysOfRatingsToUse, out int[] ratingScores, out long[] ratingCounts) {
            object[] results = this.Invoke("GetUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingAttributeID,
                        daysOfRatingsToUse});
            ratingScores = ((int[])(results[1]));
            ratingCounts = ((long[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUnauthRatings(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int daysOfRatingsToUse, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingAttributeID,
                        daysOfRatingsToUse}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetUnauthRatings(System.IAsyncResult asyncResult, out int[] ratingScores, out long[] ratingCounts) {
            object[] results = this.EndInvoke(asyncResult);
            ratingScores = ((int[])(results[1]));
            ratingCounts = ((long[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void GetUnauthRatingsAsync(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int daysOfRatingsToUse) {
            this.GetUnauthRatingsAsync(contentTypeID, itemID, ratingAttributeID, daysOfRatingsToUse, null);
        }
        
        /// <remarks/>
        public void GetUnauthRatingsAsync(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int daysOfRatingsToUse, object userState) {
            if ((this.GetUnauthRatingsOperationCompleted == null)) {
                this.GetUnauthRatingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUnauthRatingsOperationCompleted);
            }
            this.InvokeAsync("GetUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingAttributeID,
                        daysOfRatingsToUse}, this.GetUnauthRatingsOperationCompleted, userState);
        }
        
        private void OnGetUnauthRatingsOperationCompleted(object arg) {
            if ((this.GetUnauthRatingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUnauthRatingsCompleted(this, new GetUnauthRatingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveNickname", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveNickname(long puid, System.Guid msnGuid, string nickname, out string[] suggestionList, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveNickname", new object[] {
                        puid,
                        msnGuid,
                        nickname});
            suggestionList = ((string[])(results[1]));
            errors = ((ValidationError[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveNickname(long puid, System.Guid msnGuid, string nickname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveNickname", new object[] {
                        puid,
                        msnGuid,
                        nickname}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveNickname(System.IAsyncResult asyncResult, out string[] suggestionList, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            suggestionList = ((string[])(results[1]));
            errors = ((ValidationError[])(results[2]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveNicknameAsync(long puid, System.Guid msnGuid, string nickname) {
            this.SaveNicknameAsync(puid, msnGuid, nickname, null);
        }
        
        /// <remarks/>
        public void SaveNicknameAsync(long puid, System.Guid msnGuid, string nickname, object userState) {
            if ((this.SaveNicknameOperationCompleted == null)) {
                this.SaveNicknameOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveNicknameOperationCompleted);
            }
            this.InvokeAsync("SaveNickname", new object[] {
                        puid,
                        msnGuid,
                        nickname}, this.SaveNicknameOperationCompleted, userState);
        }
        
        private void OnSaveNicknameOperationCompleted(object arg) {
            if ((this.SaveNicknameCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveNicknameCompleted(this, new SaveNicknameCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveRating", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingIDs,
                        ratingValues});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingIDs,
                        ratingValues}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveRating(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues) {
            this.SaveRatingAsync(contentTypeID, itemID, puid, msnGuid, ratingIDs, ratingValues, null);
        }
        
        /// <remarks/>
        public void SaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, object userState) {
            if ((this.SaveRatingOperationCompleted == null)) {
                this.SaveRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveRatingOperationCompleted);
            }
            this.InvokeAsync("SaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingIDs,
                        ratingValues}, this.SaveRatingOperationCompleted, userState);
        }
        
        private void OnSaveRatingOperationCompleted(object arg) {
            if ((this.SaveRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveRatingCompleted(this, new SaveRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/BulkSaveRating", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int BulkSaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, System.DateTime updateDate, out ValidationError[] errors) {
            object[] results = this.Invoke("BulkSaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingIDs,
                        ratingValues,
                        updateDate});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBulkSaveRating(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, System.DateTime updateDate, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BulkSaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingIDs,
                        ratingValues,
                        updateDate}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndBulkSaveRating(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void BulkSaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, System.DateTime updateDate) {
            this.BulkSaveRatingAsync(contentTypeID, itemID, puid, msnGuid, ratingIDs, ratingValues, updateDate, null);
        }
        
        /// <remarks/>
        public void BulkSaveRatingAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, System.Guid[] ratingIDs, int[] ratingValues, System.DateTime updateDate, object userState) {
            if ((this.BulkSaveRatingOperationCompleted == null)) {
                this.BulkSaveRatingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBulkSaveRatingOperationCompleted);
            }
            this.InvokeAsync("BulkSaveRating", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        ratingIDs,
                        ratingValues,
                        updateDate}, this.BulkSaveRatingOperationCompleted, userState);
        }
        
        private void OnBulkSaveRatingOperationCompleted(object arg) {
            if ((this.BulkSaveRatingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BulkSaveRatingCompleted(this, new BulkSaveRatingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveReportViolation", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveReportViolation(object itemID, System.Guid reviewID, string name, string emailAddress, string comments, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveReportViolation", new object[] {
                        itemID,
                        reviewID,
                        name,
                        emailAddress,
                        comments});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveReportViolation(object itemID, System.Guid reviewID, string name, string emailAddress, string comments, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveReportViolation", new object[] {
                        itemID,
                        reviewID,
                        name,
                        emailAddress,
                        comments}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveReportViolation(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReportViolationAsync(object itemID, System.Guid reviewID, string name, string emailAddress, string comments) {
            this.SaveReportViolationAsync(itemID, reviewID, name, emailAddress, comments, null);
        }
        
        /// <remarks/>
        public void SaveReportViolationAsync(object itemID, System.Guid reviewID, string name, string emailAddress, string comments, object userState) {
            if ((this.SaveReportViolationOperationCompleted == null)) {
                this.SaveReportViolationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReportViolationOperationCompleted);
            }
            this.InvokeAsync("SaveReportViolation", new object[] {
                        itemID,
                        reviewID,
                        name,
                        emailAddress,
                        comments}, this.SaveReportViolationOperationCompleted, userState);
        }
        
        private void OnSaveReportViolationOperationCompleted(object arg) {
            if ((this.SaveReportViolationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReportViolationCompleted(this, new SaveReportViolationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveReview", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveReview(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty) {
            this.SaveReviewAsync(contentTypeID, itemID, puid, msnGuid, title, reviewFieldIds, reviewFieldValues, ratingIDs, ratingValues, customProperty, null);
        }
        
        /// <remarks/>
        public void SaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, object userState) {
            if ((this.SaveReviewOperationCompleted == null)) {
                this.SaveReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReviewOperationCompleted);
            }
            this.InvokeAsync("SaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty}, this.SaveReviewOperationCompleted, userState);
        }
        
        private void OnSaveReviewOperationCompleted(object arg) {
            if ((this.SaveReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReviewCompleted(this, new SaveReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/BulkSaveReview", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int BulkSaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, System.DateTime updateDate, string nickname) {
            object[] results = this.Invoke("BulkSaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty,
                        updateDate,
                        nickname});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginBulkSaveReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, System.DateTime updateDate, string nickname, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("BulkSaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty,
                        updateDate,
                        nickname}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndBulkSaveReview(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void BulkSaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, System.DateTime updateDate, string nickname) {
            this.BulkSaveReviewAsync(contentTypeID, itemID, puid, msnGuid, title, reviewFieldIds, reviewFieldValues, ratingIDs, ratingValues, customProperty, updateDate, nickname, null);
        }
        
        /// <remarks/>
        public void BulkSaveReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, System.DateTime updateDate, string nickname, object userState) {
            if ((this.BulkSaveReviewOperationCompleted == null)) {
                this.BulkSaveReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnBulkSaveReviewOperationCompleted);
            }
            this.InvokeAsync("BulkSaveReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty,
                        updateDate,
                        nickname}, this.BulkSaveReviewOperationCompleted, userState);
        }
        
        private void OnBulkSaveReviewOperationCompleted(object arg) {
            if ((this.BulkSaveReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.BulkSaveReviewCompleted(this, new BulkSaveReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveReviewHelpfulness", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveReviewHelpfulness(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score, out ValidationError[] errors) {
            object[] results = this.Invoke("SaveReviewHelpfulness", new object[] {
                        itemID,
                        puid,
                        msnGuid,
                        reviewID,
                        score});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveReviewHelpfulness(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveReviewHelpfulness", new object[] {
                        itemID,
                        puid,
                        msnGuid,
                        reviewID,
                        score}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveReviewHelpfulness(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveReviewHelpfulnessAsync(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score) {
            this.SaveReviewHelpfulnessAsync(itemID, puid, msnGuid, reviewID, score, null);
        }
        
        /// <remarks/>
        public void SaveReviewHelpfulnessAsync(object itemID, long puid, System.Guid msnGuid, System.Guid reviewID, int score, object userState) {
            if ((this.SaveReviewHelpfulnessOperationCompleted == null)) {
                this.SaveReviewHelpfulnessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveReviewHelpfulnessOperationCompleted);
            }
            this.InvokeAsync("SaveReviewHelpfulness", new object[] {
                        itemID,
                        puid,
                        msnGuid,
                        reviewID,
                        score}, this.SaveReviewHelpfulnessOperationCompleted, userState);
        }
        
        private void OnSaveReviewHelpfulnessOperationCompleted(object arg) {
            if ((this.SaveReviewHelpfulnessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveReviewHelpfulnessCompleted(this, new SaveReviewHelpfulnessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/SaveUnauthRatings", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int SaveUnauthRatings(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int[] ratingScores, int[] ratingCountDeltas) {
            object[] results = this.Invoke("SaveUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingAttributeID,
                        ratingScores,
                        ratingCountDeltas});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveUnauthRatings(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int[] ratingScores, int[] ratingCountDeltas, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingAttributeID,
                        ratingScores,
                        ratingCountDeltas}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndSaveUnauthRatings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void SaveUnauthRatingsAsync(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int[] ratingScores, int[] ratingCountDeltas) {
            this.SaveUnauthRatingsAsync(contentTypeID, itemID, ratingAttributeID, ratingScores, ratingCountDeltas, null);
        }
        
        /// <remarks/>
        public void SaveUnauthRatingsAsync(System.Guid contentTypeID, object itemID, System.Guid ratingAttributeID, int[] ratingScores, int[] ratingCountDeltas, object userState) {
            if ((this.SaveUnauthRatingsOperationCompleted == null)) {
                this.SaveUnauthRatingsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveUnauthRatingsOperationCompleted);
            }
            this.InvokeAsync("SaveUnauthRatings", new object[] {
                        contentTypeID,
                        itemID,
                        ratingAttributeID,
                        ratingScores,
                        ratingCountDeltas}, this.SaveUnauthRatingsOperationCompleted, userState);
        }
        
        private void OnSaveUnauthRatingsOperationCompleted(object arg) {
            if ((this.SaveUnauthRatingsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveUnauthRatingsCompleted(this, new SaveUnauthRatingsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://schemas.msn.com/webservices/msnrr/2005/02/11/ValidateReview", RequestNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", ResponseNamespace="http://schemas.msn.com/webservices/msnrr/2005/02/11", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ValidateReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, out ValidationError[] errors) {
            object[] results = this.Invoke("ValidateReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty});
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginValidateReview(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ValidateReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndValidateReview(System.IAsyncResult asyncResult, out ValidationError[] errors) {
            object[] results = this.EndInvoke(asyncResult);
            errors = ((ValidationError[])(results[1]));
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ValidateReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty) {
            this.ValidateReviewAsync(contentTypeID, itemID, puid, msnGuid, title, reviewFieldIds, reviewFieldValues, ratingIDs, ratingValues, customProperty, null);
        }
        
        /// <remarks/>
        public void ValidateReviewAsync(System.Guid contentTypeID, object itemID, long puid, System.Guid msnGuid, string title, System.Guid[] reviewFieldIds, string[] reviewFieldValues, System.Guid[] ratingIDs, int[] ratingValues, string customProperty, object userState) {
            if ((this.ValidateReviewOperationCompleted == null)) {
                this.ValidateReviewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateReviewOperationCompleted);
            }
            this.InvokeAsync("ValidateReview", new object[] {
                        contentTypeID,
                        itemID,
                        puid,
                        msnGuid,
                        title,
                        reviewFieldIds,
                        reviewFieldValues,
                        ratingIDs,
                        ratingValues,
                        customProperty}, this.ValidateReviewOperationCompleted, userState);
        }
        
        private void OnValidateReviewOperationCompleted(object arg) {
            if ((this.ValidateReviewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateReviewCompleted(this, new ValidateReviewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class ValidationError {
        
        private Field dataFieldField;
        
        private Type codeField;
        
        private System.Guid idField;
        
        private int maxLengthField;
        
        /// <remarks/>
        public Field DataField {
            get {
                return this.dataFieldField;
            }
            set {
                this.dataFieldField = value;
            }
        }
        
        /// <remarks/>
        public Type Code {
            get {
                return this.codeField;
            }
            set {
                this.codeField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public int MaxLength {
            get {
                return this.maxLengthField;
            }
            set {
                this.maxLengthField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public enum Field {
        
        /// <remarks/>
        empty,
        
        /// <remarks/>
        nickname,
        
        /// <remarks/>
        ratingItemID,
        
        /// <remarks/>
        reviewFieldID,
        
        /// <remarks/>
        title,
        
        /// <remarks/>
        customProperty,
        
        /// <remarks/>
        name,
        
        /// <remarks/>
        email,
        
        /// <remarks/>
        comments,
        
        /// <remarks/>
        score,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public enum Type {
        
        /// <remarks/>
        RequiredFieldMissing,
        
        /// <remarks/>
        TextTooLong,
        
        /// <remarks/>
        TextInvalidChars,
        
        /// <remarks/>
        TextProfanity,
        
        /// <remarks/>
        InvalidFormat,
        
        /// <remarks/>
        TooManyChanges,
        
        /// <remarks/>
        AlreadyTaken,
        
        /// <remarks/>
        ReviewsRequireRatings,
        
        /// <remarks/>
        ReviewsRequireOneField,
        
        /// <remarks/>
        UserCannotRateOwnReview,
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Helpfulness {
        
        private int countField;
        
        private int sumField;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private bool currentUserField;
        
        private bool currentUserFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Sum {
            get {
                return this.sumField;
            }
            set {
                this.sumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool CurrentUser {
            get {
                return this.currentUserField;
            }
            set {
                this.currentUserField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CurrentUserSpecified {
            get {
                return this.currentUserFieldSpecified;
            }
            set {
                this.currentUserFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class ReviewField {
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private string labelField;
        
        private int maxLengthField;
        
        private bool maxLengthFieldSpecified;
        
        private int colsField;
        
        private bool colsFieldSpecified;
        
        private int rowsField;
        
        private bool rowsFieldSpecified;
        
        private int rankField;
        
        private bool rankFieldSpecified;
        
        private bool requiredField;
        
        private bool requiredFieldSpecified;
        
        private string descriptionField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int MaxLength {
            get {
                return this.maxLengthField;
            }
            set {
                this.maxLengthField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool MaxLengthSpecified {
            get {
                return this.maxLengthFieldSpecified;
            }
            set {
                this.maxLengthFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Cols {
            get {
                return this.colsField;
            }
            set {
                this.colsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ColsSpecified {
            get {
                return this.colsFieldSpecified;
            }
            set {
                this.colsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Rows {
            get {
                return this.rowsField;
            }
            set {
                this.rowsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RowsSpecified {
            get {
                return this.rowsFieldSpecified;
            }
            set {
                this.rowsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RankSpecified {
            get {
                return this.rankFieldSpecified;
            }
            set {
                this.rankFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequiredSpecified {
            get {
                return this.requiredFieldSpecified;
            }
            set {
                this.requiredFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlTextAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class User {
        
        private string nicknameField;
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Nickname {
            get {
                return this.nicknameField;
            }
            set {
                this.nicknameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Review {
        
        private ItemID itemField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private User userField;
        
        private ReviewField customPropertyField;
        
        private Rating ratingField;
        
        private ReviewField titleField;
        
        private ReviewField[] fieldField;
        
        private Helpfulness helpfulnessField;
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        /// <remarks/>
        public ItemID Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public User User {
            get {
                return this.userField;
            }
            set {
                this.userField = value;
            }
        }
        
        /// <remarks/>
        public ReviewField CustomProperty {
            get {
                return this.customPropertyField;
            }
            set {
                this.customPropertyField = value;
            }
        }
        
        /// <remarks/>
        public Rating Rating {
            get {
                return this.ratingField;
            }
            set {
                this.ratingField = value;
            }
        }
        
        /// <remarks/>
        public ReviewField Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Field")]
        public ReviewField[] Field {
            get {
                return this.fieldField;
            }
            set {
                this.fieldField = value;
            }
        }
        
        /// <remarks/>
        public Helpfulness Helpfulness {
            get {
                return this.helpfulnessField;
            }
            set {
                this.helpfulnessField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class ItemID {
        
        private string stringIDField;
        
        private long[] longIDField;
        
        private System.Guid guidIDField;
        
        private bool guidIDFieldSpecified;
        
        /// <remarks/>
        public string StringID {
            get {
                return this.stringIDField;
            }
            set {
                this.stringIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("LongID")]
        public long[] LongID {
            get {
                return this.longIDField;
            }
            set {
                this.longIDField = value;
            }
        }
        
        /// <remarks/>
        public System.Guid GuidID {
            get {
                return this.guidIDField;
            }
            set {
                this.guidIDField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool GuidIDSpecified {
            get {
                return this.guidIDFieldSpecified;
            }
            set {
                this.guidIDFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class Rating {
        
        private ItemID itemField;
        
        private RatingAttribute[] ratingItemField;
        
        private OverallRating overallRatingField;
        
        private System.DateTime dateField;
        
        private bool dateFieldSpecified;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private int totalCountField;
        
        private bool totalCountFieldSpecified;
        
        /// <remarks/>
        public ItemID Item {
            get {
                return this.itemField;
            }
            set {
                this.itemField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("RatingItem")]
        public RatingAttribute[] RatingItem {
            get {
                return this.ratingItemField;
            }
            set {
                this.ratingItemField = value;
            }
        }
        
        /// <remarks/>
        public OverallRating OverallRating {
            get {
                return this.overallRatingField;
            }
            set {
                this.overallRatingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.DateTime Date {
            get {
                return this.dateField;
            }
            set {
                this.dateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool DateSpecified {
            get {
                return this.dateFieldSpecified;
            }
            set {
                this.dateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int TotalCount {
            get {
                return this.totalCountField;
            }
            set {
                this.totalCountField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TotalCountSpecified {
            get {
                return this.totalCountFieldSpecified;
            }
            set {
                this.totalCountFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class RatingAttribute : RatingItem {
        
        private float averageValueField;
        
        private bool averageValueFieldSpecified;
        
        private int userValueField;
        
        private bool userValueFieldSpecified;
        
        private int countField;
        
        private bool countFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float AverageValue {
            get {
                return this.averageValueField;
            }
            set {
                this.averageValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AverageValueSpecified {
            get {
                return this.averageValueFieldSpecified;
            }
            set {
                this.averageValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int UserValue {
            get {
                return this.userValueField;
            }
            set {
                this.userValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserValueSpecified {
            get {
                return this.userValueFieldSpecified;
            }
            set {
                this.userValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Count {
            get {
                return this.countField;
            }
            set {
                this.countField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CountSpecified {
            get {
                return this.countFieldSpecified;
            }
            set {
                this.countFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(OverallRating))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(RatingAttribute))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class RatingItem {
        
        private System.Guid idField;
        
        private bool idFieldSpecified;
        
        private string labelField;
        
        private int errorField;
        
        private bool errorFieldSpecified;
        
        private string descriptionField;
        
        private int rankField;
        
        private bool rankFieldSpecified;
        
        private bool requiredField;
        
        private bool requiredFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public System.Guid ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool IDSpecified {
            get {
                return this.idFieldSpecified;
            }
            set {
                this.idFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Label {
            get {
                return this.labelField;
            }
            set {
                this.labelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Error {
            get {
                return this.errorField;
            }
            set {
                this.errorField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ErrorSpecified {
            get {
                return this.errorFieldSpecified;
            }
            set {
                this.errorFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Description {
            get {
                return this.descriptionField;
            }
            set {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public int Rank {
            get {
                return this.rankField;
            }
            set {
                this.rankField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RankSpecified {
            get {
                return this.rankFieldSpecified;
            }
            set {
                this.rankFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public bool Required {
            get {
                return this.requiredField;
            }
            set {
                this.requiredField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool RequiredSpecified {
            get {
                return this.requiredFieldSpecified;
            }
            set {
                this.requiredFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://schemas.msn.com/webservices/msnrr/2005/02/11")]
    public partial class OverallRating : RatingItem {
        
        private float averageValueField;
        
        private bool averageValueFieldSpecified;
        
        private float userValueField;
        
        private bool userValueFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float AverageValue {
            get {
                return this.averageValueField;
            }
            set {
                this.averageValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool AverageValueSpecified {
            get {
                return this.averageValueFieldSpecified;
            }
            set {
                this.averageValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public float UserValue {
            get {
                return this.userValueField;
            }
            set {
                this.userValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool UserValueSpecified {
            get {
                return this.userValueFieldSpecified;
            }
            set {
                this.userValueFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AdvanceStateCompletedEventHandler(object sender, AdvanceStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AdvanceStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AdvanceStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Xml.XmlNode Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Xml.XmlNode)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetNicknameCompletedEventHandler(object sender, GetNicknameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNicknameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNicknameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string nickname {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetNicknameSuggestionsCompletedEventHandler(object sender, GetNicknameSuggestionsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNicknameSuggestionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNicknameSuggestionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] suggestionList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingAverageCompletedEventHandler(object sender, GetRatingAverageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingAverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingAverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Rating rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingAverageRollupCompletedEventHandler(object sender, GetRatingAverageRollupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingAverageRollupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingAverageRollupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Rating rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingByUserCompletedEventHandler(object sender, GetRatingByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Rating rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingByUserWithAverageCompletedEventHandler(object sender, GetRatingByUserWithAverageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingByUserWithAverageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingByUserWithAverageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Rating rating {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetMultipleRatingsByUserCompletedEventHandler(object sender, GetMultipleRatingsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleRatingsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleRatingsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Rating[] ratings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetRatingsByUserCompletedEventHandler(object sender, GetRatingsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRatingsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRatingsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Guid userID {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public Rating[] ratings {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Rating[])(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string nickname {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewByUserCompletedEventHandler(object sender, GetReviewByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Review review {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewsCompletedEventHandler(object sender, GetReviewsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pageSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pageNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sortBy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sortOrder {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public Review[] Reviews {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewsByUserCompletedEventHandler(object sender, GetReviewsByUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewsByUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewsByUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public Review[] Reviews {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetReviewsRollupCompletedEventHandler(object sender, GetReviewsRollupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetReviewsRollupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetReviewsRollupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int pageSize {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public int pageNum {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string sortBy {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sortOrder {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public int totalCount {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public Review[] Reviews {
            get {
                this.RaiseExceptionIfNecessary();
                return ((Review[])(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetUnauthRatingsCompletedEventHandler(object sender, GetUnauthRatingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUnauthRatingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetUnauthRatingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int[] ratingScores {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public long[] ratingCounts {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveNicknameCompletedEventHandler(object sender, SaveNicknameCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveNicknameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveNicknameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string[] suggestionList {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[1]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveRatingCompletedEventHandler(object sender, SaveRatingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BulkSaveRatingCompletedEventHandler(object sender, BulkSaveRatingCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BulkSaveRatingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BulkSaveRatingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveReportViolationCompletedEventHandler(object sender, SaveReportViolationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReportViolationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReportViolationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveReviewCompletedEventHandler(object sender, SaveReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void BulkSaveReviewCompletedEventHandler(object sender, BulkSaveReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class BulkSaveReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal BulkSaveReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveReviewHelpfulnessCompletedEventHandler(object sender, SaveReviewHelpfulnessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveReviewHelpfulnessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveReviewHelpfulnessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SaveUnauthRatingsCompletedEventHandler(object sender, SaveUnauthRatingsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveUnauthRatingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveUnauthRatingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void ValidateReviewCompletedEventHandler(object sender, ValidateReviewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateReviewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ValidateReviewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public ValidationError[] errors {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ValidationError[])(this.results[1]));
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\musicnet\musicnetQueue.cs ===
using System;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Threading;
using System.Collections;
using System.Collections.Generic;
using System.Diagnostics;
using System.Security.Principal;
using System.Runtime.InteropServices;
using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.crypto;
using xonline.common.service;
using xonline.common.sql.webstore;
using xonline.common.user;
using xonline.common.mgmt;
using xonline.common.billing;
using xonline.common.utilities;

namespace xonline.common.musicnet
{
    public class MusicnetQueue
    {
        private static Timer m_timer = null;
        private static bool m_isStopped = false;

        static MusicnetQueue()
        {
            XomControl.ControlRequestEvent += new XomControl.ControlRequestEventHandler(MusicnetQueue.OnControlRequest);
        }

        public static uint PurchaseTransactionExpiredSeconds
        {
            get
            {
                return Config.GetUIntSetting(Setting.musicnet_purchaseTransactionExpiredSeconds);
            }
        }

        public static uint PurchaseTransactionConsiderFailedSeconds
        {
            get
            {
                return Config.GetUIntSetting(Setting.musicnet_purchaseTransactionConsiderFailedSeconds);
            }
        }

        public static uint PumpIntervalSeconds
        {
            get
            {
                return Config.GetUIntSetting(Setting.musicnet_queuePumpIntervalSeconds);
            }
        }

        public static bool PumpPurchaseAssetsQueue
        {
            get
            {
                return Config.GetBoolSetting(Setting.musicnet_pumpPurchasesQueue);
            }
        }

        public static int UserCommerceDBWebstorePartitions
        {
            get
            {
                using (WstConnection c = new WstConnection(ConfigUtil.GetUserCommerceWebstoreApp()))
                {
                    c.Open();

                    return c.SqlPartitions.Count;
                }
            }
        }

        public static void StartPump()
        {
            WindowsIdentity id = WindowsIdentity.GetCurrent();
            ThreadPool.QueueUserWorkItem(new WaitCallback(PumpFunc), id);
        }

        public static void StopPump()
        {
            m_isStopped = true;

            if (m_timer != null)
            {
                m_timer.Dispose();
                m_timer = null;
            }
        }

        private static void ResetPumpTimer(WindowsIdentity id)
        {
            try
            {
                if (m_isStopped)
                    return;

                uint timerIntervalMillseconds = PumpIntervalSeconds * 1000;

                if (m_timer == null)
                    m_timer = new Timer(new TimerCallback(PumpFunc), id, timerIntervalMillseconds, Timeout.Infinite);
                else
                    m_timer.Change(timerIntervalMillseconds, Timeout.Infinite);
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.COMMON_CONFIG_38, e,
                   "Failed to reset the dmp queue timer.  Musicnet queues will not be processed."
                );
            }
        }

        public static void PumpFunc(object o)
        {
            WindowsIdentity identity = (WindowsIdentity) o;
            WindowsImpersonationContext impContext = null;

            // If this extra catch looks odd to you, then maybe you haven't read http://msdn.microsoft.com/en-us/ms182322.aspx.
            // Mind you, there's a comment at the bottom that indicates you don't need to do this anymore, but I trust our
            // current version of FxCop more than I trust some comment on MSDN.
            try
            {
                try
                {
                    if (identity.IsSystem == false)
                    {
                        // impersonate the thread that started this
                        impContext = identity.Impersonate();
                    }

                    UpdatePendingPurchasesTotal();

                    if (PumpPurchaseAssetsQueue)
                    {
                        XomRequestTimeElapsed timeElapsed = new XomRequestTimeElapsed();

                        MusicNetQueueCounters.Counters.PurchaseAssetsPumpRunsTotal.Increment();

                        PurchaseAssetsMediaLoop();

                        MusicNetQueueCounters.Counters.PurchaseAssetsPumpRunTime.IncrementBy(timeElapsed.TimeElapsed);
                        MusicNetQueueCounters.Counters.PurchaseAssetsPumpRunTimeBase.Increment();
                    }
                }
                finally
                {
                    try
                    {
                        if (impContext != null)
                            impContext.Undo();
                    }
                    catch (Exception e)
                    {
                        Xom.NtEvent(XEvent.Id.COMMON_CONFIG_40, e, "Failure undoing impersonation in the Musicnet queue pump.");
                    }
                }
            }
            catch (Exception e)
            {
                Xom.NtEvent(XEvent.Id.COMMON_CONFIG_39, e, "Failure in the Musicnet queue pump");
            }

            ResetPumpTimer(identity);
        }

        public static void UpdatePendingPurchasesTotal()
        {
            int partitions = UserCommerceDBWebstorePartitions;

            int totalPurchaseAssetsRetryable = 0;
            for (int partition = 0; partition < partitions; partition++)
            {
                try
                {
                    totalPurchaseAssetsRetryable += MusicnetClient.GetPurchaseAssetsRetryCount(partition, PurchaseTransactionExpiredSeconds);
                }
                catch (Exception e)
                {
                    Xom.NtEvent(XEvent.Id.COMMON_CONFIG_41, e, "MusicnetQueue unable to read count of retryable PurchaseAssets transactions.");

                    // this isn't fatal, our count will just be wrong
                }
            }

            if (totalPurchaseAssetsRetryable > 0)
            {
                string szTrace = string.Format("MusicNetQueue: {0} retryable purchaseAssets found",
                    totalPurchaseAssetsRetryable);
                Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, szTrace);
            }

            MusicNetQueueCounters.Counters.PurchaseAssetsPendingTotal.RawValue = totalPurchaseAssetsRetryable;
        }

        public static void PurchaseAssetsMediaLoop()
        {
            int partitions = UserCommerceDBWebstorePartitions;

            for (int partition = 0; partition < partitions; partition++)
            {
                while (true)
                {
                    PurchaseAssetsMediaRetry retry;
                    bool keepGoing = false;

                    try
                    {
                        retry = MusicnetClient.GetPurchaseAssetsMediaRetry(partition, PurchaseTransactionExpiredSeconds,
                            PurchaseTransactionConsiderFailedSeconds, out keepGoing);
                    }
                    catch (Exception e)
                    {
                        Xom.NtEvent(XEvent.Id.COMMON_CONFIG_46, e, 
                            "MusicnetQueue: MusicnetClient.GetPurchaseAssetsMediaRetry failed on partition {0}, moving on to the next partition...",
                            partition
                        );

                        // this isn't fatal, move on to the next partition
                        break;
                    }

                    if (keepGoing == true)
                    {
                        Xom.Trace(XomAreaName.dmptrace, LogLevel.L_NORMAL,
                            "MusicNetQueue: Giving up on transaction and moving it to the failure state." +
                            "  This transaction will next be canceled by the DMP cancelPurchase queue");

                        continue;
                    }

                    if (retry == null)
                        break;

                    bool feZune = (retry.StoreID == (int)StoreEnum.Zune);
                    List<OfferInfo> offers = CatalogUtil.GetOfferInstanceGrantInfo(retry.MediaPurchases,
                        feZune);
                    List<MusicItemInfo> musicItemInfos = new List<MusicItemInfo>();

                    // populate musicItemInfos from mediaPurchases and offerInfo
                    foreach (OfferInfo info in offers)
                    {
                        MediaPurchaseInfo purchaseInfo = null;
                        foreach (MediaPurchaseInfo mpi in retry.MediaPurchases)
                        {
                            if (mpi.OfferInstanceId == info.offerInstanceId)
                            {
                                purchaseInfo = mpi;
                                break;
                            }
                        }

                        if (purchaseInfo == null)
                        {
                            throw new XRLException(HResult.XOFF_E_INVALID_OFFER_ID,
                                XEvent.Id.PURCHASE_OFFERS_INVALID_OFFER_CONFIGURATION,
                                string.Format("OfferInstanceId '{0}' has no matching mediaPurchaseInfo",
                                info.offerInstanceId.ToString()));
                        }

                        if (info.isMusicNetContent)
                        {
                            MusicItemInfo musicItemInfo = new MusicItemInfo();
                            musicItemInfo.mnetId = info.mnetId;
                            musicItemInfo.retailPriceUSD = purchaseInfo.retailPrice;

                            musicItemInfos.Add(musicItemInfo);
                        }
                    }

                    DMPTransactionWrapper.ResetSessionAlternateUrl();
                    if (retry.AlternateDmpUrl != null)
                        DMPTransactionWrapper.SetSessionAlternateUrl(retry.AlternateDmpUrl);
                    DMPClient dmpClient = new DMPClient(retry.CountryID);

                    MNServiceWrapper.ResetSessionAlternateUrl();
                    if (retry.AlternateMusicNetUrl != null)
                        MNServiceWrapper.SetSessionAlternateUrl(retry.AlternateMusicNetUrl);
                    MNServiceWrapper mn = new MNServiceWrapper();

                    string isoCountryCode = CountryDictionary.CountryCode(retry.CountryID);

                    MusicNetQueueCounters.Counters.PurchaseAssetsAttemptsPerSecond.Increment();
                    MusicNetQueueCounters.Counters.PurchaseAssetsAttemptsTotal.Increment();

                    try
                    {
                        string szTrace = string.Format("MusicNetQueue: Calling MusicNet.PurchaseAssets for GUID '{0}'",
                            retry.TransactionGuid.ToString());
                        Xom.Trace(XomAreaName.musicnetTrace, LogLevel.L_NORMAL, szTrace);

                        // TODO: machinePuid is not 0
                        MusicnetClient.TryPurchaseAssets(retry.UserPuid, retry.UserPassportPuid, 0,
                            retry.TransactionGuid, musicItemInfos, isoCountryCode, dmpClient, offers);

                        MusicNetQueueCounters.Counters.PurchaseAssetsPendingTotal.Decrement();
                    }
                    catch (Exception e)
                    {
                        Xom.NtEvent(XEvent.Id.COMMON_CONFIG_47, e,
                            "MusicnetQueue: MusicnetClient.TryPurchaseAssets failed on transactionGuid '{0}', moving on to the next transaction...",
                            retry.TransactionGuid
                        );

                        // this isn't fatal, move on to the next reward
                    }
                }
            }
        }

        public static void OnControlRequest(object sender, ControlRequestEventArgs args)
        {
            string cmd = args.Command.ToLower();
            switch (args.Command)
            {
                case "help":
                    XomControlConnection.SendMessage(
                        "MusicnetQueue help:\r\n" +
                        "MusicnetDequeue -- Force the MusicnetQueue to start processing queued items\n\r\n\r",
                        args.RequestId);
                    args.Handled = true;
                    break;

                case "musicnetdq":
                case "musicnetdequeue":
                    MusicnetQueue.PumpFunc(WindowsIdentity.GetCurrent());
                    args.Handled = true;
                    break;
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\offer\Details.cs ===
//
// Details.cs
//
// Copyright (c) Microsoft Corporation. All Rights Reserved.
//
// Author: Ben Zotto (benzotto)
//

using System;
using System.Globalization;

using xonline.common.billing;
using xonline.common.mgmt;
using xonline.common.utilities;

[assembly: XomAreaDefinition(XomAreaName.offer)]


namespace xonline.common.offer
{
    public class Details
    {
        // the bits of the lower nibble for the format byte
        const int SEP_IS_COMMA = 0x1;
        const int DECIMAL_PART = 0x2;
        const int IS_PAD_SPACE = 0x4;
        const int MARKER_PRECEDES = 0x8;
        const int THOUSANDS_SEP_IS_COMMA = 0x1;

        // the bits of the frequency portion of the details flags
        public const int ONE_TIME_CHARGE  = 0;
        public const int MONTHLY          = 1;
        public const int QUARTERLY        = 2;
        public const int BIANNUALLY       = 3;
        public const int ANNUALLY         = 4;

        public static void FormatCurrencyData(byte countryId, uint languageId, out byte formatData, out string currencyCode)
        {
            string countryCode;

            //
            //  Build the currency format byte
            //
            countryCode  = CountryDictionary.CountryCode(countryId);
            currencyCode = Culture.GetCurrencySymbol(countryCode);

            formatData = BuildCurrencyFormat(
                currencyCode,
                languageId,
                countryCode);
        }

        public static uint BuildSpecificOfferDetails(byte taxType, bool cancelable)
        {
            uint specificDetails = 0;

            specificDetails |= ((uint) taxType) & 0x7;

            specificDetails |= ((uint) (cancelable ? 0 : 1)) << 3;

            return specificDetails;
        }

        public static uint BuildGlobalOfferDetails(byte frequency, byte duration, byte freeCycles)
        {
            uint globalDetails = 0;

            globalDetails |= (((uint) frequency) & 0x7) << 1;

            globalDetails |= (((uint) duration) & 0xF) << 4;

            globalDetails |= (((uint) freeCycles) & 0x1F) << 8;

            return globalDetails;
        }

        public static uint BuildDetailsFlags(Offer o, byte countryId)
        {
            uint details;

            details = (((uint)o.SpecificOfferDetails(countryId) & 0x0000FFFF) << 16) | o.GlobalOfferDetails;

            //
            //  Special settings for free offers
            //
            if(o.WholePrice(countryId) == 0 && o.FractionalPrice(countryId) == 0)
            {
                details &= 0xFFFFFFFE;        // clear fee bit
            }
            else
            {
                details |= 0x00000001;        // mark fee bit
            }

            if(o.RequiresVoucher)
            {
                details |= 0x00002000;        // mark voucher bit
            }
            else
            {
                details &= 0xFFFFDFFF;        // clear voucher bit
            }

            return details;
        }

        public static uint BuildDetailsFlags(Offer o, byte countryId, int tier, int paymentType)
        {
            uint details;

            details = (((uint)o.SpecificOfferDetails(countryId, tier, paymentType) & 0x0000FFFF) << 16) | o.GlobalOfferDetails;

            //
            //  Special settings for free offers
            //
            if(o.WholePrice(countryId, tier, paymentType) == 0 && o.FractionalPrice(countryId, tier, paymentType) == 0)
            {
                details &= 0xFFFFFFFE;        // clear fee bit
            }
            else
            {
                details |= 0x00000001;        // mark fee bit
            }

            if (o.AcceptsVoucher(countryId, tier))
            {
                details |= 0x00002000;        // mark voucher bit
            }
            else
            {
                details &= 0xFFFFDFFF;        // clear voucher bit
            }

            return details;
        }

        public static uint BuildDetailsFlagsNoTier(Offer o, byte countryId, int paymentType)
        {
            uint details;

            details = (((uint)o.SpecificOfferDetailsNoTier(countryId, paymentType) & 0x0000FFFF) << 16) | o.GlobalOfferDetails;

            //
            //  Special settings for free offers
            //
            if(o.WholePriceNoTier(countryId, paymentType) == 0 && o.FractionalPriceNoTier(countryId, paymentType) == 0)
            {
                details &= 0xFFFFFFFE;        // clear fee bit
            }
            else
            {
                details |= 0x00000001;        // mark fee bit
            }

            if (o.AcceptsVoucherNoTier(countryId))
            {
                details |= 0x00002000;        // mark voucher bit
            }
            else
            {
                details &= 0xFFFFDFFF;        // clear voucher bit
            }

            return details;
        }

        public static bool DetailsFlagsIsForFee(uint detailsFlags)
        {
            return ((detailsFlags & 0x1) == 0x1);
        }

        public static byte DetailsFlagsFrequency(uint detailsFlags)
        {
            return (byte)((detailsFlags >> 1) & 0x7);
        }

        public static byte DetailsFlagsDuration(uint detailsFlags)
        {
            return (byte)((detailsFlags >> 4) & 0xf);
        }

        public static byte DetailsFlagsFreeCycles(uint detailsFlags)
        {
            return (byte)((detailsFlags >> 8) & 0x1f);
        }

        public static byte SpecificDetailsFlagsTaxType(ushort specificDetailsFlags)
        {
            return (byte) (specificDetailsFlags & 0x7);
        }

        public static bool SpecificDetailsCancelable(ushort specificDetailsFlags)
        {
            return (specificDetailsFlags & 0x8) == 1;
        }

        private static byte BuildCurrencyFormat(string isoCurrencyCode, uint languageId, string countryId)
        {
            CultureInfo userCulture;
            return BuildCurrencyFormat(isoCurrencyCode, languageId, countryId, out userCulture);
        }

        private static byte BuildCurrencyFormat(string isoCurrencyCode, uint languageId, string countryCode, out CultureInfo userCulture)
        {
            int formatByteHigh;
            int formatByteLow;
            string defaultCulture;
            string cultureCode;
            int decimalDigits;

            byte formatByte;

            switch(isoCurrencyCode)
            {
                case "USD":
                    if(countryCode == "US")
                    {
                        formatByteHigh = 0x8;           // this means: "$"
                    }
                    else
                    {
                        formatByteHigh = 0x0;           // this means: "US$"
                    }
                    break;

                default:
                    formatByteHigh = 0x0;                // all normal currencies
                    break;
            }


            // now that the upper byte of the format is done, figure out the languageXcountry mapping
            // for the lower byte data.
            //
            formatByteLow = 0x0;

            // attempt to create a culture code from what we know.
            cultureCode = Locale.BuildLocale(languageId, countryCode);

            // BUGBUG
            // The en-SG culture name is not supported by .NET.  We only use
            // the CultureInfo class for formatting currency so use zh-SG
            // instead.
            switch(cultureCode.ToLower())
            {
                case "en-ae":
                    cultureCode = "ar-AE";
                    break;
                case "en-sg":
                    cultureCode = "zh-SG";
                    break;
                case "en-in":
                    cultureCode = "hi-IN";
                    break;
            }

            try
            {
                userCulture = new CultureInfo(cultureCode, false);
            }
            catch (ArgumentException)
            {
                defaultCulture = Locale.DefaultByCountry(countryCode);

                // BUGBUG
                // The en-SG culture name is not supported by .NET.  We only use
                // the CultureInfo class for formatting currency so use zh-SG
                // instead.
                switch(defaultCulture.ToLower())
                {
                    case "en-ae":
                        defaultCulture = "ar-AE";
                        break;
                    case "en-sg":
                        defaultCulture = "zh-SG";
                        break;
                    case "en-in":
                        defaultCulture = "hi-IN";
                        break;
                }

                // this combination isn't valid.
                Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "Culture " + cultureCode + " invalid, using default culture " + defaultCulture );
                userCulture = new CultureInfo(defaultCulture, false);
            }

            // figure out decimal places -- nontrivial since this value is stored in the
            // cultureinfo, not the regioninfo.
            //
            decimalDigits = userCulture.NumberFormat.CurrencyDecimalDigits;
            if(decimalDigits == 2)
            {
                formatByteLow |= DECIMAL_PART;
            }
            else if(decimalDigits > 0)
            {
                throw new Exception( "Currency format for " + countryCode + " requires nonstandard decimal places!" );
                // ...but leave the digits as none.
            }

            // figure out currency decimal separator
            if( (formatByteLow & DECIMAL_PART) != 0 )
            {
                // either a comma, or not (thus always ".")
                if(userCulture.NumberFormat.CurrencyDecimalSeparator == ",")
                {
                    formatByteLow |= SEP_IS_COMMA;
                }
            }

            //  thousands-sep info.
            if(userCulture.NumberFormat.CurrencyGroupSeparator == ",")
            {
                formatByteHigh |= THOUSANDS_SEP_IS_COMMA;
            }

            //
            // #21383/benzotto-- there is a bug in the windows globalization code such that the positive
            // currency pattern for pt-BR is incorrect; it should be 2 but windows claims it's 0.
            // this is compensated for normally by the corrollary problem where the currency marker string in
            // windows for portugal has a trailing space included in it, so all looks fine when you
            // format it with the globalization routines.  we don't do that, we use the underlying
            // data. so we have a manual workaround for pt-BR until windows gets fixed.
            //
            if(userCulture.Name == "pt-BR")
            {
                // currencypositivepattern == 2

                formatByteLow |= (MARKER_PRECEDES | IS_PAD_SPACE);
            }
            else
            {
                // figure out the position and spacing of currency character
                switch(userCulture.NumberFormat.CurrencyPositivePattern)
                {
                    case 0:         // $n
                        formatByteLow |= MARKER_PRECEDES;
                        break;
                    case 1:         // n$
                        // a no-op
                        break;
                    case 2:         // $ n
                        formatByteLow |= (MARKER_PRECEDES | IS_PAD_SPACE);
                        break;
                    case 3:         // n $
                        formatByteLow |= IS_PAD_SPACE;
                        break;
                    default:
                        Xom.Trace(XomAreaName.offer, LogLevel.L_WARNING, "Unrecognized currency symbol placement recommended by .net!");
                        break;
                }
            }

            // now handle the one special case-- where it's unrecognized by the client, so the client
            // will use the ISO code and we'll need to enforce a space so we don't get FOO12.99
            if(formatByteHigh == 0xE)
            {
                formatByteLow |= IS_PAD_SPACE;
            }

            // build byte from parts
            formatByte = (byte)formatByteLow;
            formatByte |= (byte)(formatByteHigh << 4);

            return formatByte;
        }

        internal static string BuildFormattedPrice(byte countryId, uint languageId, uint wholePart, byte fractionalPart)
        {
            string countryCode = CountryDictionary.CountryCode(countryId);
            string isoCurrencyCode = Culture.GetCurrencySymbol(countryCode);

            CultureInfo userCulture;
            byte currencyFormat = BuildCurrencyFormat(isoCurrencyCode, languageId, countryCode, out userCulture);

            string price = "";

            bool markerPrecedes = (currencyFormat & MARKER_PRECEDES) == MARKER_PRECEDES;
            bool paddingSpace = (currencyFormat & IS_PAD_SPACE) == IS_PAD_SPACE;
            string marker = CurrencyMarker(isoCurrencyCode, countryCode);
            if ( marker == isoCurrencyCode )
            {
                markerPrecedes = false;
                paddingSpace = true;
            }

            if ( markerPrecedes )
            {
                price = marker;

                if ( paddingSpace )
                {
                    price += " ";
                }
            }

            double dPrice = wholePart + (fractionalPart / 100.0);
            price += dPrice.ToString("N", userCulture);

            if ( !markerPrecedes )
            {
                if ( paddingSpace )
                {
                    price += " ";
                }

                price += marker;
            }

            return price;
        }

        internal static string CurrencyMarker(string isoCurrencyCode, string countryCode)
        {
            string marker = "";

            switch (isoCurrencyCode)
            {
            case "AUD":
                marker = "A$";
                break;
            case "CAD":
                marker = "Can$";
                break;
            case "CHF":
                marker = "SFr";
                break;
            case "DKK":
                marker = "Dkr";
                break;
            case "EUR":
                marker = "\u20ac";
                break;
            case "GBP":
                marker = "\u00a3";
                break;
            case "JPY":
                marker = "\u00a5";
                break;
            case "KRW":
                marker = "\u20a9";
                break;
            case "NOK":
                marker = "Nkr";
                break;
            case "NZD":
                marker = "NZ$";
                break;
            case "SEK":
                marker = "Skr";
                break;
            case "USD":
                if ( countryCode == "US" )
                {
                    marker = "$";
                }
                else
                {
                    marker = "US$";
                }
                break;
            case "ZAR":
                marker = "R";
                break;
            case "INR":
                marker = "Rs.";
                break;
            default:
                marker = isoCurrencyCode;
                break;
            }

            return marker;
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\token\makefile.inc ===
!include $(INETROOT)\build\makefile.inc
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\rating\media.cs ===
using System;
using System.Data.SqlClient;
using xonline.common.config;
using xonline.common.sql.sqlclient;
using xonline.common.service;


namespace xonline.common.rating
{
    /// <summary>
    ///The class represents a media object in ratings service
    /// </summary>
    public class Media
    {
        private Guid mediaId;
        private int mediaTypeId;
        private AggregateRating aggregateRatingInfo;

        /// <summary>
        /// Gets/Sets the MediaId
        /// </summary>
        public Guid MediaId
        {
            get { return mediaId; }
            private set { mediaId = value; }
        }

        /// <summary>
        /// Gets/Sets the MediaTypeId
        /// </summary>
        public int MediaTypeId
        {
            get { return mediaTypeId; }
            private set { mediaTypeId = value; }
        }

        /// <summary>
        /// Gets the object holding the aggregate rating information
        /// </summary>
        public AggregateRating AggregateRatingInfo
        {
            get { return aggregateRatingInfo; }
            private set { aggregateRatingInfo = value; }
        }

        [FlagsAttribute]
        public enum GetMediaInfoOptions
        {
            Basic = 0,
            AggregateRatingInfo = 1
        }

        /// <summary>
        /// Gets the basic Media info from Catalog
        /// </summary>
        /// <param name="mediaId"></param>
        /// <returns>Media Object</returns>
        public static Media GetMediaInfo(GetMediaInfoOptions options, Guid mediaId, String countryCode)
        {
            Media media = null;

            // Validation
            // MediaId cannot be empty gid
            if (mediaId == Guid.Empty)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_MISSING_MEDIA_ID_ON_GET_MEDIA_INFO,
                                            XEvent.Id.RATINGS_COMMON_MEDIA,
                                            "GetMediaInfo invoked with empty guid for media id.");
            }

            // If options include getting the aggregate rating information. verify that
            // the country code is specifed
            if (IsOptionSetAggregateRatingInfo(options))
            {
                if (String.IsNullOrEmpty(countryCode))
                {
                    throw new XRLException(HResult.XONLINE_E_RATINGS_MISSING_COUNTRY_CODE_ON_GET_MEDIA_INFO,
                                            XEvent.Id.RATINGS_COMMON_MEDIA,
                                            "Country code must be specified when retrieving aggregate rating information." );
                }
            }

            try
            {
                using (SqlClient c = new SqlClient(Interface.fecatalogdbxbox, true))
                {
                    HResult hr = HResult.S_OK;

                    c.StoredProc = "dbo.GetMediaInfo";

                    // Params always added
                    c.AddParameter(System.Data.ParameterDirection.ReturnValue, "@hr", hr);
                    c.AddParameter("@options", (Int32)options);
                    c.AddParameter("@mediaId", mediaId);

                    // If we are to retrieve aggregate rating info, add the country code parameter
                    if (IsOptionSetAggregateRatingInfo(options))
                    {
                        c.AddParameter("@countryCode", countryCode);
                    }

                    // Process each row one at a time
                    //sqldatareader does not dispose the underlying connection object hence make sure we call it in using
                    using (SqlDataReader r = c.Execute())
                    {
                        hr = (uint)c.GetIntParameter("@hr");
                        if (HResult.Failed(hr))
                        {
                            throw new XRLException(hr,
                                                    XEvent.Id.RATINGS_COMMON_MEDIA,
                                                    String.Format("Error occured retrieving media info for media {0}", mediaId.ToString()));
                        }

                        // Get the basic media info - this is always returned
                        if (r.Read())
                        {
                            media = new Media();
                            media.MediaId = mediaId;
                            media.mediaTypeId = r.GetInt32(r.GetOrdinal("mediatypeid"));
                        }
                        else
                        {
                            // media does not exist - throw and exception
                            throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_RATINGS_INVALID_MEDIA, String.Format("Attempt to retrieve non-existent media: {0}", mediaId.ToString()));
                        }

                        // if media is still null at this point, return
                        if (media == null)
                        {
                            return null;
                        }

                        // If we requested aggregate rating info, it is in the next result set
                        if (IsOptionSetAggregateRatingInfo(options))
                        {
                            AggregateRating ar = null;
                            if (r.NextResult())
                            {
                                if (r.Read())
                                {
                                    ar = new AggregateRating(mediaId,
                                                                countryCode,
                                                                System.Convert.ToSingle(r.GetDecimal(r.GetOrdinal("ratingAggregate"))),
                                                                System.Convert.ToSingle(r.GetDecimal(r.GetOrdinal("roundedAggregate"))),
                                                                r.GetInt32(r.GetOrdinal("numberOfRatings")),
                                                                r.GetDateTime(r.GetOrdinal("lastRatedDate")));
                                }
                            }
                            media.AggregateRatingInfo = ar;
                        }
                    }
                }
            }
            catch (XRLException)
            {
                throw;
            }
            catch (XRLExceptionWithoutEvent)
            {
                throw;
            }
            catch (Exception ex)
            {
                throw new XRLException(HResult.XONLINE_E_RATINGS_UNKNOWNCATALOG_ERROR,
                                        XEvent.Id.RATINGS_COMMON_MEDIA,
                                        String.Format("Error occured retrieving media info for media {0}. Exception Text: {1}", mediaId.ToString(), ex.ToString()));
            }
           
            return media;
        }

        /// <summary>
        /// Helper function to determine is the option to retrieve aggregate ratings has been set
        /// </summary>
        /// <param name="options">A bitmask of options which is to be checked to see if the aggregate rating is set.</param>
        /// <returns>True is the option is set, false otherwise</returns>
        private static Boolean IsOptionSetAggregateRatingInfo(GetMediaInfoOptions options)
        {
            return ((options & GetMediaInfoOptions.AggregateRatingInfo) == GetMediaInfoOptions.AggregateRatingInfo);
        }
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\rating\AggregateRating.cs ===
﻿using System;

namespace xonline.common.rating
{
    public class AggregateRating
    {
        private Guid mediaId;
        private String countryCode;
        private Single ratingAggregate;
        private Single roundedAggregate;
        private Int32 numberOfRatings;
        private DateTime lastRatedDate;

        /// <summary>
        /// Returns the raw aggregate rating values
        /// </summary>
        public Single RatingAggregate
        {
            get { return ratingAggregate; }
        }

        /// <summary>
        /// Returns the rounded aggregate rating ( where the rounding happens
        /// as a computed column in on the table for consistency)
        /// </summary>
        public Single RoundedAggregate
        {
            get { return roundedAggregate; }
        }

        /// <summary>
        /// Returns the number of times this media had been rated in this country
        /// </summary>
        public Int32 NumberOfRatings
        {
            get { return numberOfRatings; }
        }

        /// <summary>
        /// Returns the date that this media was last rated in this country
        /// </summary>
        public DateTime LastRatedDate
        {
            get { return lastRatedDate; }
        }

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="mediaId">The id of the media for which this is the aggregate rating information</param>
        /// <param name="countryCode">The country code for this media for which this is the aggregate rating information</param>
        /// <param name="ratingAggregate">The raw aggregate rating value for the media in this country</param>
        /// <param name="roundedAggregate">The rounded rating aggregate value for the media in this country</param>
        /// <param name="numberOfRatings">The number of times the media has been rated in this country</param>
        /// <param name="lastRatedDate">The last time the media was rated in this country</param>
        public AggregateRating(Guid mediaId,
                                String countryCode,
                                Single ratingAggregate,
                                Single roundedAggregate,
                                Int32 numberOfRatings,
                                DateTime lastRatedDate)
        {
            this.mediaId = mediaId;
            this.countryCode = countryCode;
            this.ratingAggregate = ratingAggregate;
            this.roundedAggregate = roundedAggregate;
            this.numberOfRatings = numberOfRatings;
            this.lastRatedDate = lastRatedDate;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\timeout\HistogramPerfCounters.cs ===
using System.Diagnostics;
using xonline.common.mgmt;

// IMPORTANT - READ THIS
// This class is forked and exists in the Zest Tree as well as in this location
// It currently exists at private\server\diagnostics.zune.net\ in the Zest tree
// Any bug fixes applied here will likely need to be applied there as well

namespace xonline.common.billing
{
    [XomPerformanceCounterCategoryAttr("Commercial Services XBOX-XUACS Time Per API Histogram", "Captures a histogram of time taken per API", true)]
    public class HistogramPerfCounters : XomPerformanceCounterCategory
    {
        static private HistogramPerfCounters Instance = new HistogramPerfCounters();
        static public HistogramPerfCounters Current(string name)
        {
            if (name == null)
            {
                name = XomPerformanceCounterCategory.DEFAULT_INSTANCE;
            }
            return (HistogramPerfCounters)Instance.GetInstance(name);
        }

        [XomPerformanceCounterAttr(
            "Bucket 00 to 03", 
            "Holds the number of calls completed within 0 to 3- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket00to03;

        [XomPerformanceCounterAttr(
            "Bucket 03 to 06", 
            "Holds the number of calls completed within 3 to 6- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket03to06;

        [XomPerformanceCounterAttr(
            "Bucket 06 to 09", 
            "Holds the number of calls completed within 6 to 9- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket06to09;

        [XomPerformanceCounterAttr(
            "Bucket 09 to 12", 
            "Holds the number of calls completed within 9 to 12- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket09to12;

        [XomPerformanceCounterAttr(
            "Bucket 12 to 15", 
            "Holds the number of calls completed within 12 to 15- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket12to15;

        [XomPerformanceCounterAttr(
            "Bucket 15 to 18", 
            "Holds the number of calls completed within 15 to 18- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket15to18;

        [XomPerformanceCounterAttr(
            "Bucket 18 to 21", 
            "Holds the number of calls completed within 18 to 21- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket18to21;

        [XomPerformanceCounterAttr(
            "Bucket 21 to 24", 
            "Holds the number of calls completed within 21 to 24- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket21to24;

        [XomPerformanceCounterAttr(
            "Bucket 24 to 27", 
            "Holds the number of calls completed within 24 to 27- seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket24to27;

        [XomPerformanceCounterAttr(
            "Bucket 27 to 30", 
            "Holds the number of calls completed within 27 to 30+ seconds", 
            PerformanceCounterType.NumberOfItems64)]
        public PerformanceCounter Bucket27to30;
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\offer\Offer.cs ===
/*
 *  Offer.cs
 *
 *  Copyright (c) Microsoft Corporation.  All Rights Reserved.
 *
 *  Object model around the concept of an offering.
 *
 *  Author: Ben Zotto (benzotto)
 *
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using System.Text;
using System.Threading;
using System.Web;
using System.Web.Caching;

using Microsoft.Webstore.WstClient;

using xonline.common.config;
using xonline.common.service;
using xonline.common.mgmt;
using xonline.common.user;
using xonline.common.sql.webstore;

namespace xonline.common.offer
{
    // Payment Types
    //
    [Flags]
    public enum PaymentTypeEnum : uint
    {
        CreditCard  = 0x00000001,
        Token       = 0x00000002,
        Points      = 0x00000004,
        Wholesale   = 0x00000008,
        Untrusted   = 0x00010000, // PS# 116953 - special flag used in ContentDetails, to exclude hidden/future/past offers.
        All         = CreditCard | Token | Points | Wholesale,
        NoTokens    = All & ~Token,
    };
    // Tiers
    //
    public enum TierEnum : uint
    {
        NewUser     = 0,
        Silver      = 3,
        Gold        = 6,
        FamilyGold  = 9
    };

    [Flags]
    public enum OfferingTypeEnum : uint
    {
        Subscription            = 0x00000001,
        Content                 = 0x00000002,
        Renewal                 = 0x00000004,
        PointsBundle            = 0x00000008,
        GamertagChange          = 0x00000010,
        GameDemo                = 0x00000020,
        GameTrailer             = 0x00000040,
        Theme                   = 0x00000080,
        Gameplay                = 0x00000100,
        FullGame                = 0x00000200,
        PromoPoints             = 0x00000400,
        Tile                    = 0x00000800,
        Trial                   = 0x00001000,
        Arcade                  = 0x00002000,
        Video                   = 0x00004000,
        MusicNetMTV             = 0x00008000, // MusicNet offers are not tracked by Xbox Live.  No offer should ever actually have this offer type.  It is used only for implementing the purchase and history flow for music.
        GameConsumable          = 0x00010000,
        SyncCastWMIS            = 0x00020000, // SyncCast/WMIS offers are not tracked by Xbox Live.  No offer should ever actually have this offer type.  It is used only for implementing the purchase and history flow for video.
        PcAccountCreation       = 0x00040000,
        XNACommunityGame        = 0x00080000, // Special InGameContentEnumerate value for XNA Launcher to enum XNA Games
        AvatarItem              = 0x00100000, // Avatar Content

        AllContent              =
            Content | GameDemo | GameTrailer | Theme | FullGame | Tile | Arcade | Video | GameConsumable | AvatarItem,
        All                     =
            Subscription | Content | Renewal | PointsBundle | GamertagChange | GameDemo | GameTrailer |
            Theme | Gameplay | FullGame | PromoPoints | Tile | Trial | Arcade | Video | GameConsumable | AvatarItem,
    };

    [Flags]
    public enum AvatarBodyTypeEnum : uint
    {
        Male                    = 0x00000001,
        Female                  = 0x00000002,
        Neutral                 = 0x00000004,
    };

    public enum TaxTypeEnum : byte
    {
        NoTax               = 0,
        Default             = 1,
        GST                 = 2,
        VAT                 = 3,
        TaxNotApplicable    = 4
    }

    public enum OfferingFrequencyEnum : byte
    {
        OneTimeCharge       = 0,
        Monthly             = 1,
        Quarterly           = 2,
        BiAnnually          = 3,
        Annually            = 4
    }

    public enum OfferingRelationTypeEnum : byte
    {
        Invalid             = 1,
        Base                = 0,
        Renewal             = 3,
        Trial               = 4,
        Xbox1ToXenon        = 5
    }

    public enum OfferingConvertMode : byte
    {
        Convert             = 0,
        Renew               = 1,
        Invalid             = 2
    }

    public enum OfferingSKUType : byte
    {
        RevenueSKU          = 1,
        PromotionalSKU      = 2
    }

    public class Offer
    {
        // Offer policies
        //
        public static uint PER_USER_RIGHTS                   =    0x0001;
        public static uint PER_MACHINE_RIGHTS                =    0x0002;
        public static uint UNRESTRICTED                      =    0x0004;
        public static uint PER_USER_OFFLINE_RIGHTS           =    0x0008;
        public static uint ONLY_PURCHASE_ONCE                =    0x0100;
        public static uint REQUIRES_VOUCHER                  =    0x0200;
        public static uint DO_NOT_ENUMERATE                  =    0x0400;
        public static uint HIDE_FROM_PARTNERNET_DASH         =    0x0800;
        public static uint REQUIRES_GEOFENCING               =    0x1000;
        public static uint PER_USER_PC_RIGHTS                =    0x2000;

        // Offering types
        //
        public static readonly uint SUBSCRIPTION_TYPE = 0x00000001;
        public static readonly uint CONTENT_TYPE = 0x00000002;
        public static readonly uint RENEWAL_TYPE = 0x00000004;
        public static readonly uint POINTS_BUNDLE_TYPE = 0x00000008;
        public static readonly uint GAMERTAG_CHANGE_TYPE = 0x00000010;
        public static readonly uint GAME_DEMO_TYPE = 0x00000020;
        public static readonly uint GAME_TRAILER_TYPE = 0x00000040;
        public static readonly uint THEME_TYPE = 0x00000080;
        public static readonly uint GAMEPLAY_TYPE = 0x00000100;
        public static readonly uint FULL_GAME_TYPE = 0x00000200;
        public static readonly uint PROMO_POINTS_TYPE = 0x00000400;
        public static readonly uint TILE_TYPE = 0x00000800;
        public static readonly uint TRIAL_TYPE = 0x00001000;
        public static readonly uint ARCADE_TYPE = 0x00002000;
        public static readonly uint VIDEO_TYPE = 0x00004000;
        public static readonly uint CONSUMABLE_TYPE = 0x00010000;
        public static readonly uint PC_ACCOUNT_CREATION = 0x00040000;

        // Disallow public instantiation
        //
        private Offer() {}

        // Prepares class for static access
        //
        static Offer()
        {
            _boidsToXoids = new Hashtable();
            _musicNetSkuOverrides = null;
            Config.SettingChange += new SettingChangeEventHandler(Offer.OnSettingChange);
        }

        // This is how you get an instance
        //
        public static Offer CreateInstance(ulong offerId)
        {
            Offer o;
            string cacheKey = "[" + CacheTag() + "] OfferObject::offerId:0x" + offerId.ToString("x");

            if(HttpContext.Current == null || HttpContext.Current.Cache == null || (o = (Offer)HttpContext.Current.Cache.Get(cacheKey)) == null)
            {
                Xom.Trace(XomAreaName.offer, LogLevel.L_NORMAL, "Offer object cache MISS for offer ID " + offerId.ToString("x") + ". Loading...");

                o = new Offer();
                o.Load(offerId);
                o.LoadOfferRegions();
                o.LoadOfferTitles();

                if ( o.IsXbox1Offer )
                {
                    o.GetEquivalentXenonOfferId();
                }

                // Validate assumption for v1
                //
                if(o.ConsoleType == ConsoleTypeEnum.Xbox1 &&
                    ((o.IsPerMachine && o.IsPerUser) || (!o.IsPerMachine && !o.IsPerUser)))
                {
                    throw new Exception("Offer: Bad offer state for offer 0x" + offerId.ToString("x") + ".  Must be EITHER per-user or per-machine!!");
                }

                if ( HttpContext.Current != null && HttpContext.Current.Cache != null )
                {
                    HttpContext.Current.Cache.Insert(cacheKey, o, null, DateTime.Now.AddSeconds(OfferCacheTimeSeconds), Cache.NoSlidingExpiration, CacheItemPriority.Default, null);
                }
            }
            else
            {
                Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "Offer object cache HIT for offer ID " + offerId.ToString("x") + ".");
            }

            return o;
        }


        private void Load(ulong offerId)
        {
            HResult hr = 0;
            WstConnection conn = null;
            WstCommand cmd = null;

            try
            {
                // init privates
                _detailsBlobs = new Hashtable();

                conn = new WstConnection(ConfigUtil.UodbWebstoreApp);
                conn.Open();

                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_xbos_load_offer";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;
                cmd.PartitionType = WstPartitionType.Logical;
                cmd.Partition = WstCommand.AnyPartition;

                // intput and output parameters
                SqlParameter ret = new SqlParameter();
                ret.Direction = ParameterDirection.ReturnValue;
                cmd.Parameters.Add(ret);

                cmd.Parameters.Add("@bi_offer_id", SqlDbType.BigInt).Value = (long) offerId;

                SqlParameter consoleType = new SqlParameter("@ti_console_type_id", SqlDbType.TinyInt);
                consoleType.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(consoleType);

                SqlParameter startDateParam = new SqlParameter("@dt_start_date", SqlDbType.DateTime);
                startDateParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(startDateParam);

                SqlParameter endDateParam = new SqlParameter("@dt_end_date", SqlDbType.DateTime);
                endDateParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(endDateParam);

                SqlParameter offerTypeParam = new SqlParameter("@i_offer_type_id", SqlDbType.Int);
                offerTypeParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(offerTypeParam);

                SqlParameter offerFreqParam = new SqlParameter("@i_offer_frequency_id", SqlDbType.Int);
                offerFreqParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(offerFreqParam);

                SqlParameter cancelableParam = new SqlParameter("@b_cancelable", SqlDbType.TinyInt);
                cancelableParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(cancelableParam);

                SqlParameter esrbRatingParam = new SqlParameter("@i_esrb_rating", SqlDbType.Int);
                esrbRatingParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(esrbRatingParam);

                SqlParameter bitfilterParam = new SqlParameter("@i_bitfilter", SqlDbType.Int);
                bitfilterParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(bitfilterParam);

                SqlParameter installSizeParam = new SqlParameter("@i_install_size", SqlDbType.Int);
                installSizeParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(installSizeParam);

                SqlParameter packageSizeParam = new SqlParameter("@i_package_size", SqlDbType.Int);
                packageSizeParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(packageSizeParam);

                SqlParameter symmetricKeyParam = new SqlParameter("@vb_sym_key", SqlDbType.Binary, 16);
                symmetricKeyParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(symmetricKeyParam);

                SqlParameter policyFlagsParam = new SqlParameter("@i_policy_flags", SqlDbType.Int);
                policyFlagsParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(policyFlagsParam);

                SqlParameter svcComponentIdParam = new SqlParameter("@vc_service_component_id", SqlDbType.NVarChar, 36);
                svcComponentIdParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(svcComponentIdParam);

                SqlParameter friendlyNameParam = new SqlParameter("@vc_friendly_name", SqlDbType.NVarChar, 150);
                friendlyNameParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(friendlyNameParam);

                SqlParameter globalOfferDetailsParam = new SqlParameter("@si_global_offer_details", SqlDbType.SmallInt);
                globalOfferDetailsParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(globalOfferDetailsParam);

                SqlParameter publicKeyParam = new SqlParameter("@vb_public_key", SqlDbType.Binary, 284);
                publicKeyParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(publicKeyParam);

                SqlParameter tierIDParam = new SqlParameter("@i_tier_id", SqlDbType.Int);
                tierIDParam.Direction = ParameterDirection.Output;
                cmd.Parameters.Add(tierIDParam);

                // call the procedure
                cmd.ExecuteNonQuery();

                hr = (uint)((int)ret.Value);
                if(hr != HResult.S_OK)
                {
                    throw new XRLException(HResult.XOFF_E_INVALID_OFFER_ID, XEvent.Id.COMMON_CODE_134, "Offer: Error retrieving Offer ID 0x"
                                           + offerId.ToString("x") + " hr = " + hr);
                }

                _offerId            = offerId;
                _consoleType        = (uint)((byte)consoleType.Value);
                _startDate          = (DateTime) startDateParam.Value;
                _endDate            = (DateTime) endDateParam.Value;
                _offerType          = (uint)((int)offerTypeParam.Value);
                _offerFrequency     = (uint)((int)offerFreqParam.Value);
                _isCancelable       = ((byte)cancelableParam.Value != 0);
                _esrbRating         = (uint)((int)esrbRatingParam.Value);
                _bitfilter          = (uint)((int)bitfilterParam.Value);
                _installSize        = (uint)((int)installSizeParam.Value);
                _packageSize        = (uint)((int)packageSizeParam.Value);
                _symmetricKey       = (byte[])symmetricKeyParam.Value;
                _policyFlags        = (uint)((int)policyFlagsParam.Value);
                _serviceComponentId = (string)svcComponentIdParam.Value;
                _friendlyName       = (string)friendlyNameParam.Value;
                _globalOfferDetails = (ushort)((short)globalOfferDetailsParam.Value);
                _publicKey          = (byte[])publicKeyParam.Value;
                _tierProvided       = (uint)((int)tierIDParam.Value);
            }
            finally
            {
                if ( conn != null )
                {
                    conn.Close();
                    conn = null;
                }
            }
        }

        public ulong OfferId
        {
            get { return _offerId; }
        }

        public DateTime StartDate
        {
            get { return _startDate; }
        }

        public DateTime EndDate
        {
            get { return _endDate; }
        }

        public uint OfferType
        {
            get { return _offerType; }
        }

        public uint OfferFrequency
        {
            get { return _offerFrequency; }
        }

        public bool IsCancelable
        {
            get { return _isCancelable; }
        }

        public uint EsrbRating
        {
            get { return _esrbRating; }
        }

        public uint Bitfilter
        {
            get { return _bitfilter; }
        }

        public uint InstallSize
        {
            get { return _installSize; }
        }

        public uint PackageSize
        {
            get { return _packageSize; }
        }

        public byte[] SymmetricKey
        {
            get { return _symmetricKey; }
        }

        public uint PolicyFlags
        {
            get { return _policyFlags; }
        }

        public string ServiceComponentId
        {
            get { return _serviceComponentId; }
        }

        public string FriendlyName
        {
            get { return _friendlyName; }
        }

        public ushort GlobalOfferDetails
        {
            get { return _globalOfferDetails; }
        }

        public bool IsPerUser
        {
            get { return ((_policyFlags & PER_USER_RIGHTS) != 0); }
        }

        public bool IsPerUserOffline
        {
            get { return ((_policyFlags & PER_USER_OFFLINE_RIGHTS) != 0); }
        }

        public bool IsPerMachine
        {
            get { return ((_policyFlags & PER_MACHINE_RIGHTS) != 0); }
        }

        public bool IsUnrestricted
        {
            get { return ((_policyFlags & UNRESTRICTED) != 0); }
        }

        public bool CanOnlyPurchaseOnce
        {
            get { return ((_policyFlags & ONLY_PURCHASE_ONCE) != 0); }
        }

        public uint TierProvided
        {
            get { return _tierProvided; }
        }

        public ulong EquivalentXenonOfferId
        {
            get { return _equivalentXenonOfferId; }
        }

        public bool IsBaseOffer
        {
            get { return _tierProvided != 0; }
        }

        public ConsoleTypeEnum ConsoleType
        {
            get { return (ConsoleTypeEnum) _consoleType; }
        }

        public bool IsXenonOffer
        {
            get { return ( _consoleType == (uint) ConsoleTypeEnum.Xenon ); }
        }

        public bool IsXbox1Offer
        {
            get { return ( _consoleType == (uint) ConsoleTypeEnum.Xbox1 ); }
        }

        public bool IsMusicNetSubscription
        {
            // TODO: this should be offer metadata stored in a database
            get
            {
                return TitleIsValid(XOn.CRUX_TITLE_ID) && (IsSubscription || IsTrial);
            }
        }

        public static MusicNetSkuOverrides MusicNetSkuOverrides
        {
            get
            {
                if ( _musicNetSkuOverrides == null )
                {
                    _musicNetSkuOverrides = GetMusicNetSkuOverrides();
                }
                return _musicNetSkuOverrides;
            }
        }

        public string MusicNetSku
        {
            // TODO: this should be offer metadata stored in a database
            get
            {
                string sku = string.Empty;

                if ( IsMusicNetSubscription )
                {
                    if ( IsTrial )
                    {
                        sku = Config.GetSetting(Setting.musicnet_trialSubscriptionSku);
                    }
                    else
                    {
                        sku = Config.GetSetting(Setting.musicnet_subscriptionSku);
                    }

                    try
                    {
                        string overrideSku = MusicNetSkuOverrides[this._offerId];

                        sku = overrideSku;
                    }
                    catch (KeyNotFoundException)
                    {
                    }
                }

                return sku;
            }
        }

        public string OfferTypeString
        {
            get
            {
                switch (_offerType)
                {
                    case (uint) OfferingTypeEnum.Subscription:
                        return "Subscription";

                    case (uint) OfferingTypeEnum.Content:
                        return "Premium Game Content";

                    case (uint) OfferingTypeEnum.Renewal:
                        return "Subscription Renewal";

                    case (uint) OfferingTypeEnum.PointsBundle:
                        return "Points Bundle";

                    case (uint) OfferingTypeEnum.GamertagChange:
                        return "Gamertag Change";

                    case (uint) OfferingTypeEnum.GameDemo:
                        return "Game Demo";

                    case (uint) OfferingTypeEnum.GameTrailer:
                        return "Game Trailer";

                    case (uint) OfferingTypeEnum.Theme:
                        return "Theme";

                    case (uint) OfferingTypeEnum.Gameplay:
                        return "Gameplay";

                    case (uint) OfferingTypeEnum.FullGame:
                        return "Full Game";

                    case (uint) OfferingTypeEnum.PromoPoints:
                        return "Promotional Points";

                    case (uint) OfferingTypeEnum.Tile:
                        return "Tile";

                    case (uint) OfferingTypeEnum.Trial:
                        return "Trial Offer";

                    case (uint) OfferingTypeEnum.Arcade:
                        return "Arcade";

                    case (uint) OfferingTypeEnum.Video:
                        return "Video";

                    case (uint) OfferingTypeEnum.GameConsumable:
                        return "Consumable";

                    default:
                        return _offerType.ToString("x");
                }
            }
        }

        // this property should only be used for xbox1 offers
        public bool RequiresVoucher
        {
            get
            {
                if (_consoleType != (uint) ConsoleTypeEnum.Xbox1)
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_135,
                        "RequiresVoucher called on a non-xbox1 offer");

                return ((_policyFlags & REQUIRES_VOUCHER) != 0);
            }
        }

        // this method should be used to find out whether a Xenon offer accepts token payments
        public bool AcceptsVoucher(byte countryId, int tier)
        {
            if (_consoleType != (uint) ConsoleTypeEnum.Xenon)
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_136,
                    "GetOfferRegionFromCountry called on a non-xenon offer");

            ArrayList offers = (ArrayList) _offerRegions[countryId];

            if (offers == null)
                return false;

            for (int i = 0; i < offers.Count; i++)
            {
                OfferRegion oreg = (OfferRegion) offers[i];

                if (oreg.TierRequired == tier && oreg.PaymentType == (int) PaymentTypeEnum.Token)
                    return true;
            }

            return false;
        }

        // this method should be used to find out whether a Xenon offer accepts token payments
        public bool AcceptsVoucherNoTier(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegionNoTier(countryId, (int)PaymentTypeEnum.Token)) == null)
            {
                return false;
            }

            return true;
        }

        // this method should be used to find out whether a Xenon offer accepts credit card or direct debit payments
        public bool AcceptsCreditCardNoTier(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegionNoTier(countryId, (int) PaymentTypeEnum.CreditCard)) == null)
            {
                return false;
            }

            return true;
        }

        // this method should be used to find out whether a Xenon offer accepts a wholesale payment instrument
        public bool AcceptsWholesaleNoTier(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegionNoTier(countryId, (int) PaymentTypeEnum.Wholesale)) == null)
            {
                return false;
            }

            return true;
        }

        // this method should be used to find out whether a Xenon offer accepts the given payment type
        public bool AcceptsPaymentType(byte countryId, int tier, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, paymentType)) == null)
            {
                return false;
            }

            return true;
        }

        public bool IsSubscription
        {
            get { return ((_offerType & SUBSCRIPTION_TYPE) != 0); }
        }

        public bool IsXbox1Content
        {
            get { return ((_offerType & CONTENT_TYPE) != 0); }
        }

        public bool IsXenonContent
        {
            get { return ((_offerType & (uint) OfferingTypeEnum.AllContent) != 0); }
        }

        public bool IsRenewal
        {
            get { return ((_offerType & RENEWAL_TYPE) != 0); }
        }

        public bool IsTrial
        {
            get { return ((_offerType & TRIAL_TYPE) != 0); }
        }

        public bool RequiresGeofencing
        {
            get { return ((_policyFlags & REQUIRES_GEOFENCING) != 0); }
        }

        public uint TitleId
        {
            get
            {
                if ( _offerTitles == null || _offerTitles.Count < 1 )
                {
                    throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_137, "TitleId called for an offer with no titles");
                }

                return _offerTitles[0];
            }
        }


        private OfferRegion GetXbox1OfferRegion(byte countryId)
        {
            if (_consoleType != (uint) ConsoleTypeEnum.Xbox1)
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_137,
                    "GetXbox1OfferRegion called on a non-xbox1 offer");

            ArrayList offers = (ArrayList) _offerRegions[countryId];

            if (offers == null)
                return null;

            if (offers.Count != 1)
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_138,
                    "GetXbox1OfferRegion called on offer with multiple t_offer_region rows");

            return (OfferRegion) offers[0];
        }

        private OfferRegion GetXenonOfferRegion(byte countryId, int tier, int paymentType)
        {
            if (_consoleType != (uint) ConsoleTypeEnum.Xenon)
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_139,
                    "GetXenonOfferRegion called on a non-xenon offer");

            ArrayList offers = (ArrayList) _offerRegions[countryId];

            if (offers == null)
                return null;

            for (int i = 0; i < offers.Count; i++)
            {
                OfferRegion oreg = (OfferRegion) offers[i];

                if (oreg.TierRequired == tier && (oreg.PaymentType & paymentType) == oreg.PaymentType)
                    return oreg;
            }

            return null;
        }

        private OfferRegion GetXenonOfferRegionNoTier(byte countryId, int paymentType)
        {
            if (_consoleType != (uint) ConsoleTypeEnum.Xenon)
                throw new XRLException(HResult.E_INVALIDARG, XEvent.Id.COMMON_CODE_140,
                    "GetXenonOfferRegion called on a non-xenon offer");

            ArrayList offers = (ArrayList) _offerRegions[countryId];

            if (offers == null)
                return null;

            for (int i = 0; i < offers.Count; i++)
            {
                OfferRegion oreg = (OfferRegion) offers[i];

                if ( (oreg.PaymentType & paymentType) == oreg.PaymentType )
                    return oreg;
            }

            return null;
        }

        public string BillingOfferId(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXbox1OfferRegion(countryId)) != null)
            {
                return oreg.BillingOfferId;
            }
            else
            {
                return null;
            }
        }

        public string BillingOfferId(byte countryId, int tier, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, paymentType)) != null)
            {
                return oreg.BillingOfferId;
            }
            else
            {
                return null;
            }
        }

        public int WholePrice(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXbox1OfferRegion(countryId)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId);
            }

            return oreg.PriceWhole;
        }

        public int WholePrice(byte countryId, int tier, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", tier " + tier + ", paymentType " + paymentType);
            }

            return oreg.PriceWhole;
        }

        public int WholePriceNoTier(byte countryId, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegionNoTier(countryId, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", paymentType " + paymentType);
            }

            return oreg.PriceWhole;
        }

        public int FractionalPrice(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXbox1OfferRegion(countryId)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId);
            }

            return oreg.PriceFractional;
        }

        public int FractionalPrice(byte countryId, int tier, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", tier " + tier + ", paymentType " + paymentType);
            }

            return oreg.PriceFractional;
        }

        public int FractionalPriceNoTier(byte countryId, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegionNoTier(countryId, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", paymentType " + paymentType);
            }

            return oreg.PriceFractional;
        }

        public ushort SpecificOfferDetails(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXbox1OfferRegion(countryId)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId);
            }

            return oreg.SpecificOfferDetails;
        }

        public ushort SpecificOfferDetails(byte countryId, int tier, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", tier " + tier + ", paymentType " + paymentType);
            }

            return oreg.SpecificOfferDetails;
        }

        public ushort SpecificOfferDetailsNoTier(byte countryId, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegionNoTier(countryId, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", paymentType " + paymentType);
            }

            return oreg.SpecificOfferDetails;
        }

        public int RewardId(byte countryId, int tier)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, (int)(PaymentTypeEnum.CreditCard|PaymentTypeEnum.Token|PaymentTypeEnum.Points))) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", tier " + tier);
            }

            return oreg.RewardId;
        }

        public bool HasReward(byte countryId, int tier)
        {
            bool hasReward = false;
            try
            {
                hasReward = ( IsXenonOffer && RewardId(countryId, tier) != -1 );
            } catch (Exception)
            {
                hasReward = false;
            }

            return hasReward;
        }

        public bool OfferingIsOffered(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXbox1OfferRegion(countryId)) == null)
            {
                return false;
            }

            return true;
        }


        public bool OfferingIsOffered(byte countryId, int tier, int paymentType)
        {
            bool expired = false;

            return OfferingIsOffered(countryId, tier, paymentType, out expired);
        }

        public bool OfferingIsOffered(byte countryId, int tier, int paymentType, out bool expired)
        {
            OfferRegion oreg;

            expired = false;

            oreg = GetXenonOfferRegion(countryId, tier, paymentType);

            if (oreg == null)
            {
                return false;
            }
            else if (DateTime.UtcNow < oreg.StartDate || DateTime.UtcNow >= oreg.EndDate)
            {
                expired = true;
            }

            return true;
        }

        public bool OfferingIsFree(byte countryId)
        {
            OfferRegion oreg;

            if ((oreg = GetXbox1OfferRegion(countryId)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId);
            }

            if(oreg.PriceWhole == 0 && oreg.PriceFractional == 0)
            {
                return true;
            }

            return false;
        }

        public bool OfferingIsFree(byte countryId, int tier, int paymentType)
        {
            OfferRegion oreg;

            if ((oreg = GetXenonOfferRegion(countryId, tier, paymentType)) == null)
            {
                throw new Exception("Offer: Can't find OfferRegion for country " + countryId + ", tier " + tier + ", paymentType " + paymentType);
            }

            return ( oreg.PriceWhole == 0 && oreg.PriceFractional == 0 );
        }

        public byte[] DetailsBlob(uint descriptionIndex)
        {
            byte[] blob;

            // REVIEW: concurrency concerns here?

            if((blob = (byte[])_detailsBlobs[descriptionIndex]) == null)
            {
                Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "Details blob lazy loading offer " + _offerId + " description index " + descriptionIndex);
                blob = LoadBlob(descriptionIndex);
            }
            else
            {
                Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "Using preloaded details blob offer " + _offerId + " description index " + descriptionIndex);
            }

            if(blob == null)
            {
                throw new Exception("Offer: No details blob exists for offer " + _offerId + " description index " + descriptionIndex + "!");
            }

            return blob;
        }

        public bool TitleIsValid(uint titleId)
        {
            // check title
            if(_offerTitles.IndexOf(titleId) == -1)
                return false;
            return true;
        }

        public uint IsOKToPurchase(byte countryId, int tier, int paymentType)
        {
            // check expiration
            if(DateTime.UtcNow > _endDate || DateTime.UtcNow < _startDate)
            {
                return HResult.XOFF_E_OFFER_EXPIRED;
            }

            bool expired = false;
            // check country, and offer-region datetimes
            if(OfferingIsOffered(countryId, tier, paymentType, out expired) == false)
            {
                return HResult.XOFF_E_INELIGIBLE_FOR_OFFER;
            }
            else if(expired)
            {
                return HResult.XOFF_E_OFFER_EXPIRED;
            }


            return HResult.S_OK;
        }

        public uint IsOKToPurchase(uint titleId, byte countryId)
        {
            // check expiration
            if(DateTime.UtcNow > _endDate || DateTime.UtcNow < _startDate)
            {
                return HResult.XOFF_E_OFFER_EXPIRED;
            }

            // check title
            if(TitleIsValid(titleId) == false)
            {
                return HResult.XOFF_E_INELIGIBLE_FOR_OFFER;
            }

            // check country
            if(OfferingIsOffered(countryId) == false)
            {
                return HResult.XOFF_E_INELIGIBLE_FOR_OFFER;
            }

            return HResult.S_OK;
        }

        public uint XeValidateRenewalPath(ulong userId, byte countryId, int tier, int paymentType,
            out ulong baseOfferId, out string instanceId, out int convertMode)
        {
            HResult hr;

            baseOfferId = 0;
            instanceId  = String.Empty;
            convertMode = -1;

            // make sure that a renewal is not made into a trial offer even if renewal paths are misconfigured
            if ( IsTrial )
            {
                hr = HResult.XOFF_E_INELIGIBLE_FOR_OFFER;
                throw new XRLException(hr, XEvent.Id.COMMON_CODE_141, "XeValidateRenewalPath: cannot renew into trial offer!  offerId: " + OfferId.ToString("X"));
            }

            hr = IsOKToPurchase(countryId, tier, paymentType);
            if(HResult.Failed(hr))
            {
                return hr;
            }

            return ValidateRenewalPath(userId, out baseOfferId, out instanceId, out convertMode);
        }

        public uint ValidateRenewalPath(ulong userId, uint titleId, byte countryId, out ulong baseOfferId, out string instanceId, out int convertMode)
        {
            baseOfferId = 0;
            instanceId  = String.Empty;
            convertMode = -1;

            //
            // We must ensure that the renewal meets the base requirements of any purchase
            //

            HResult hr = IsOKToPurchase(titleId, countryId);
            if(HResult.Failed(hr))
            {
                return hr;
            }

            return ValidateRenewalPath(userId, out baseOfferId, out instanceId, out convertMode);
        }

        public uint ValidateRenewalPath(ulong userId, out ulong baseOfferId, out string instanceId, out int convertMode)
        {
            HResult hr = HResult.S_OK;

            baseOfferId = 0;
            instanceId  = String.Empty;
            convertMode = -1;

            //
            // Got to UODB to find the renewal path this user is trying to follow,
            // and if successful, pull out the service instance ID so that we can
            // continue operating on it.
            //
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(userId);
                ws.StoredProc = "dbo.p_xbos_validate_renewal_path";

                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter(ParamType.INPUT, "@userpuid", userId);
                ws.AddParameter(ParamType.INPUT, "@offerid", _offerId);
                ws.AddParameter(ParamType.OUTPUT, "@baseofferid", (long)0);
                ws.AddParameter(ParamType.OUTPUT, "@instanceid", instanceId, 16);
                ws.AddParameter(ParamType.OUTPUT, "@convertmode", convertMode);

                // call the procedure
                ws.ExecuteNonQuery();

                hr = (uint)ws.GetIntParameter("@hr");
                if ( HResult.Failed(hr) )
                {
                    Xom.Trace(XomAreaName.offer, LogLevel.L_WARNING, "[Offer] FAILED renewal path for 0x" + userId.ToString("x") + " to renewal 0x" + _offerId.ToString("x") +
                             " hr = " + hr);

                    return hr;
                }

                baseOfferId = (ulong) ws.GetLongParameter("@baseofferid");
                instanceId = ws.GetStringParameter("@instanceId");
                convertMode = ws.GetIntParameter("@convertmode");

                Xom.Trace(XomAreaName.offer, LogLevel.L_LOW,
                    "[Offer] Validated renewal path for 0x" + userId.ToString("x")
                        + " from offer 0x" + baseOfferId.ToString("x")
                        + " to renewal 0x" + _offerId.ToString("x")
                        + " using subscription " + instanceId
                        + " using mode " + (convertMode == 0 ? "convert" : "renew"));
            }

            return hr;
        }

        public uint ValidateVoucherForOffer(byte[] hash)
        {
            bool isScsToken;
            return ValidateVoucherForOffer(hash, out isScsToken);
        }

        public uint ValidateVoucherForOffer(byte[] hash, out bool isScsToken)
        {
            HResult hr = 0;
            bool hasResults = false;

            isScsToken = false;

            //
            // Got to UODB to find the renewal path this user is trying to follow,
            // and if successful, pull out the service instance ID so that we can
            // continue operating on it.
            //
            using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(BitConverter.ToInt64(hash, 0));
                ws.StoredProc = "dbo.p_xbos_validate_voucher_for_offer";

                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@voucherhash", hash);
                ws.AddParameter(ParamType.INPUT, "@offerid", _offerId);

                // call the procedure
                using (WstDataReader rdr = ws.Execute())
                {
                    hasResults = rdr.Read();

                    if ( hasResults )
                    {
                        isScsToken = ( rdr.GetInt32(rdr.GetOrdinal("f_is_scs_token")) != 0 );
                    }
                }

                hr = (uint)ws.GetIntParameter("@hr");

                // if the stored procedure returned success but did not return a rowset
                // it is likely that the stored procedure is mismatched with the service
                // code
                if ( HResult.Succeeded(hr) && !hasResults )
                {
                    hr = HResult.XONLINE_E_OFFERING_MISSING_RESULTS;
                }
            }

            return hr;
        }

        public uint GetInstances(ulong passportId, ulong machineId)
        {
            HResult hr = 0;

            // NOTE: This assumes an offer is either per-user OR per-machine.
            //
            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal( IsPerUser ? passportId : machineId );
                ws.StoredProc = "dbo.p_xbos_get_instances";

                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter(ParamType.INPUT, "@userpuid", passportId);
                ws.AddParameter(ParamType.INPUT, "@machineid", machineId);
                ws.AddParameter(ParamType.INPUT, "@offerid", _offerId);

                // call the procedure
                ws.ExecuteNonQuery();

                hr = (uint)ws.GetIntParameter("@hr");
            }

            return hr;
        }


        public static bool ValidateOfferType(uint offeringType)
        {
            return ValidateOfferType(offeringType, 0);
        }

        public static bool ValidateOfferType(uint offeringType, uint additionalTypes)
        {
            bool fValid = true;

            if ((((offeringType & ~(((uint) OfferingTypeEnum.All) | additionalTypes)) != 0) && (offeringType != 0xFFFFFFFF)) || (offeringType == 0x0))
            {
                // An invalid flag is represented in the offeringType argument
                fValid = false;
            }

            return fValid;
        }

        public static void ThrowUnknownOfferTypeException(uint offerType, User user, string message)
        {
            throw new XRLException(
                HResult.XONLINE_E_OFFERING_UNKNOWN_OFFER_TYPE,
                XEvent.Id.BILLING_HACK_UNKNOWN_OFFER_TYPE,
                "Received unknown offer type, " + offerType + "," +
                (user == null ? String.Empty : "from " + user.Puid.ToString("X") + "( " + user.GamerTag + ")") +
                "\n" + message
            );
        }

        public static bool ValidatePaymentType(uint paymentType)
        {
            bool fValid = true;

            // Adjust for PS# 116953 - special flag used in ContentDetails, to exclude hidden/future/past offers.
            if (((paymentType & ~(uint)(PaymentTypeEnum.All | PaymentTypeEnum.Untrusted)) != 0) && (paymentType != 0xFFFFFFFF))
            {
                // An invalid flag is represented in the offeringType argument
                fValid = false;
            }

            return fValid;
        }

        public static void ThrowUnknownPaymentTypeException(uint paymentType, User user, string message)
        {
            throw new XRLException(
                HResult.XONLINE_E_OFFERING_UNKNOWN_PAYMENT_TYPE,
                XEvent.Id.BILLING_HACK_UNKNOWN_PAYMENT_TYPE,
                "Received unknown payment type, " + paymentType + "," +
                (user == null ? String.Empty : "from " + user.Puid.ToString("X") + "( " + user.GamerTag + ")") +
                "\n" + message
            );
        }

        public static bool IsFreeGamertagOffer(ulong offerId)
        {
            string[] freeGamerTagOffers = Config.GetMultiSetting(MultiSetting.xbos_freeGamertagOffers);

            foreach(string freeOfferId in freeGamerTagOffers)
            {
                if (offerId == xonline.common.service.OfferId.Parse(freeOfferId))
                    return true;
            }
            return false;
        }

        // this method returns true if the tax type implies offers include tax in their prices
        public static bool IsTaxIncludedInPrices(TaxTypeEnum taxType)
        {
            return ( taxType == TaxTypeEnum.GST || taxType == TaxTypeEnum.VAT );
        }

        public byte[] GetCountriesOfferedIn(PaymentTypeEnum paymentType, TierEnum tier)
        {
            byte[] countryIds = new byte[_offerRegions.Keys.Count];

            int i=0;
            foreach (object o in _offerRegions.Keys)
            {
                countryIds[i++] = (byte) o;
            }

            return countryIds;
        }

        //
        //  internal private info!
        //
        private class OfferRegion
        {
            public string           BillingOfferId;
            public int              TierRequired;
            public int              PaymentType;

            public int              PriceWhole;
            public int              PriceFractional;
            public ushort           SpecificOfferDetails;
            public int              RewardId;
            // PS# 116842
            public DateTime         StartDate;
            public DateTime         EndDate;
        }

        private ulong    _offerId;

        private uint     _consoleType;
        private DateTime _startDate;
        private DateTime _endDate;
        private uint     _offerType;
        private uint     _offerFrequency;
        private bool     _isCancelable;         // this is a BIT (bool) value
        private uint     _esrbRating;
        private uint     _bitfilter;
        private uint     _installSize;
        private uint     _packageSize;
        private byte[]   _symmetricKey;
        private uint     _policyFlags;
        private string   _serviceComponentId;
        private string   _friendlyName;
        private ushort   _globalOfferDetails;
        private byte[]   _publicKey;
        private uint     _tierProvided;
        private ulong    _equivalentXenonOfferId;

        private Hashtable _offerRegions; // hashtable of ArrayList's, containg OfferRegion objects
        private Hashtable _detailsBlobs;
        private List<uint> _offerTitles;

        private static Hashtable _boidsToXoids;
        private static MusicNetSkuOverrides _musicNetSkuOverrides;

        // offer cache entries will live for 30 minutes by default
        private static int OfferCacheTimeSeconds
        {
            get
            {
                int val = 60*30;
                try
                {
                    val = Config.GetIntSetting(Setting.offer_cacheTimeSeconds);
                }
                catch (Exception)
                {
                }
                return val;
            }
        }

        private void LoadOfferRegions()
        {
           HResult hr;

           if ( _offerRegions == null )
           {
               _offerRegions = new Hashtable();

               using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
               {
                   ws.PartitionType = WstPartitionType.Logical;
                   ws.Partition = WstCommand.AnyPartition;
                   ws.StoredProc = "dbo.p_xbos_load_offer_regions";

                   ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                   ws.AddParameter(ParamType.INPUT, "@bi_offer_id", _offerId);

                   // call the procedure
                   using (WstDataReader rdr = ws.Execute())
                   {
                       while ( rdr.Read() )
                       {
                           OfferRegion oreg = new OfferRegion();

                           byte countryId = rdr.GetByte(0);
                           oreg.TierRequired = (ushort) rdr.GetInt32(1);
                           oreg.PaymentType = (ushort) rdr.GetInt32(2);
                           oreg.PriceWhole = rdr.GetInt32(3);
                           oreg.PriceFractional = rdr.GetInt32(4);
                           oreg.SpecificOfferDetails = (ushort)rdr.GetInt16(5);
                           oreg.BillingOfferId = rdr.GetString(6);
                           oreg.RewardId = rdr.GetInt32(7);

                           // PS# 116842
                           oreg.StartDate = rdr.GetDateTime(rdr.GetOrdinal("dt_start_date"));
                           oreg.EndDate = rdr.GetDateTime(rdr.GetOrdinal("dt_end_date"));

                           ArrayList offerRegions = (ArrayList) _offerRegions[countryId];
                           if (offerRegions == null)
                           {
                               offerRegions = new ArrayList();
                               _offerRegions[countryId] = offerRegions;
                           }

                           offerRegions.Add(oreg);

                           Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "[Offer] Loaded offer region data for offer " + _offerId.ToString("x") + ", country " + countryId);
                       }
                   }

                   hr = (uint)ws.GetIntParameter("@hr");
                   if ( HResult.Failed(@hr) )
                   {
                       throw new Exception("Offer: Error retrieving OfferRegions for Offer ID 0x"
                                           + _offerId.ToString("x") + " hr = " + hr);
                   }
               }
           }
        }


        private void LoadOfferTitles()
        {
           HResult hr;

           if ( _offerTitles == null )
           {
               List<uint> offerTitles = new List<uint>();

               using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
               {
                   ws.PartitionType = WstPartitionType.Logical;
                   ws.Partition = WstCommand.AnyPartition;
                   ws.StoredProc = "dbo.p_xbos_load_offer_titles";

                   ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                   ws.AddParameter(ParamType.INPUT, "@bi_offer_id", _offerId);

                   // call the procedure
                   using (WstDataReader rdr = ws.Execute())
                   {
                       while ( rdr.Read() )
                       {
                           offerTitles.Add((uint)rdr.GetInt32(0));
                       }
                   }

                   hr = (uint)ws.GetIntParameter("@hr");

                   if ( HResult.Failed(hr) )
                   {
                       throw new Exception("Offer: Error retrieving OfferTitles for Offer ID 0x"
                                           + _offerId.ToString("x") + " hr = " + hr);
                   }

                   Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "[Offer] Loaded offer title data for offer " + _offerId.ToString("x"));
               }

               _offerTitles = offerTitles;
           }
        }



        private void GetEquivalentXenonOfferId()
        {
            HResult hr;

            if ( IsXbox1Offer )
            {
               using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
               {
                   ws.PartitionType = WstPartitionType.Logical;
                   ws.Partition = WstCommand.AnyPartition;

                   ws.StoredProc = "dbo.p_xbos_get_equivalent_xenon_offer_id";

                   ws.AddParameter(ParamType.RETVAL, "@RETVAL", 0);
                   ws.AddParameter(ParamType.INPUT, "@bi_xbox1_offer_id", _offerId);
                   ws.AddParameter(ParamType.OUTPUT, "@bi_xenon_offer_id", (long)0);

                   // call the procedure
                   ws.ExecuteNonQuery();

                   hr = (uint)ws.GetIntParameter("@RETVAL");

                   if (HResult.Failed(hr))
                   {
                       throw new XRLException(hr, XEvent.Id.COMMON_CODE_142, "Offer.GetEquivalentXenonOfferId: failed to find equivalent Xenon offer id for Xbox1 offer id 0x " + _offerId.ToString("X"));
                   }

                   _equivalentXenonOfferId = (ulong)ws.GetLongParameter("@bi_xenon_offer_id");
               }
            }
        }



        private byte[] LoadBlob(uint descriptionIndex)
        {
            ArrayList detailsBlob   = new ArrayList();
            WstConnection conn = null;
            WstCommand cmd = null;
            WstDataReader rdr = null;
            byte[] blob;

            try
            {
                conn = new WstConnection(ConfigUtil.UodbWebstoreApp);
                conn.Open();

                cmd = conn.CreateCommand();
                cmd.CommandType = CommandType.StoredProcedure;
                cmd.CommandText = "dbo.p_xbos_get_details";
                cmd.WstFailoverMode = WstFailoverMode.PrimaryThenSecondary;
                cmd.PartitionType = WstPartitionType.Logical;
                cmd.Partition = WstCommand.AnyPartition;

                // input params
                cmd.Parameters.Add("@offerid", SqlDbType.BigInt).Value = (long)_offerId;
                cmd.Parameters.Add("@descriptionindex", SqlDbType.Int).Value = (int) descriptionIndex;

                // call the procedure
                rdr = cmd.ExecuteReader();

                while ( rdr.Read() )
                {
                    long len = rdr.GetBytes(0, 0, null, 0, 0);
                    byte[] b = new byte[len];
                    rdr.GetBytes(0, 0, b, 0, b.Length);

                    detailsBlob.AddRange(b);
                }

                rdr.Close();
                rdr = null;

                if ( detailsBlob.Count > 0 )
                {
                    blob = new byte[detailsBlob.Count];
                    detailsBlob.CopyTo(blob);
                    _detailsBlobs[descriptionIndex] = blob;
                    return blob;
                }
                else
                {
                    Xom.Trace(XomAreaName.offer, LogLevel.L_WARNING, "[Offer] Data integrity: Details requested for offerID " + _offerId
                              + " at description index " + descriptionIndex + " not found!" );

                    return null;
                }
            }
            finally
            {
                if ( rdr != null )
                {
                    rdr.Close();
                    rdr = null;
                }

                if ( conn != null )
                {
                    conn.Close();
                    conn = null;
                }
            }
        }


        public static bool UserHasAnyOfferLicenses(ulong userPuid, ulong [] offerIDs)
        {
            StringBuilder offerXml = new StringBuilder();
            foreach (ulong offerID in offerIDs)
            {
                offerXml.Append(string.Format("<o>{0}</o>", (long) offerID));
            }

            using(WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
            {
                // Data is partitioned by user puid
                ws.PartitionType   = WstPartitionType.Logical;
                ws.SetHashVal(userPuid);

                ws.StoredProc = "dbo.p_xbos_get_offer_license";

                ws.AddParameter(ParamType.RETVAL, "@ret", 0);
                ws.AddParameter("@bi_user_puid", userPuid);
                ws.AddParameter("@xml_offers", offerXml.ToString());

                ws.ExecuteNonQuery();

                return (ws.GetIntParameter("@ret") == 1);
            }
        }


        public static ulong[] OfferIdsFromBillingOfferId(string billingOfferId)
        {
            ulong[] ids = null;

            //
            // Check in fast internal hashtable
            //
            if ((ids = (ulong[])_boidsToXoids[billingOfferId]) == null)
            {
                Xom.Trace(XomAreaName.offer, LogLevel.L_NORMAL, "[Offer] OfferIDFromBillingOfferID cache MISS for offer ID " + billingOfferId + ". Loading...");

                //
                // Not found in hashtable, do table scan in UODB.
                //

                ArrayList offerIds = new ArrayList();

                using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
                {
                    ws.PartitionType = WstPartitionType.Logical;
                    ws.Partition = WstCommand.AnyPartition;
                    ws.StoredProc = "dbo.p_xbos_get_offerids_from_boid";

                    ws.AddParameter(ParamType.INPUT, "@billingofferid", billingOfferId, billingOfferId.Length);

                    // call the procedure
                    using (WstDataReader rdr = ws.Execute())
                    {
                        while ( rdr.Read() )
                        {
                            offerIds.Add((ulong)rdr.GetInt64(0));
                        }
                    }

                    if ( offerIds.Count > 0 )
                    {
                        Xom.Trace(XomAreaName.offer, LogLevel.L_NORMAL, "[Offer] OfferIDFromBillingOfferID cache loaded " + offerIds.Count + " offers for ID " + billingOfferId + ".");
                        _boidsToXoids[billingOfferId] = ids = (ulong[])offerIds.ToArray(typeof(ulong));
                    }
                    else
                    {
                        Xom.Trace(XomAreaName.offer, LogLevel.L_HIGH, "Offer.OfferIdsFromBillingOfferId: SCS offerId: " + billingOfferId + " failed to return ANY Xbox offerIds.  This may be expected if the user has a subscription in SCS to a non-Xbox offer such as MSN, OneCare, etc.");

                        ids = null;
                    }

                    if ( offerIds.Count > 1)
                    {
                        StringBuilder sb = new StringBuilder();
                        foreach(ulong id in offerIds)
                        {
                            sb.Append("0x" + id.ToString("X") + "\n");
                        }

                      Xom.NtEvent(XEvent.Id.MC_AMBIGUOUS_OFFER_CONFIGURATION, "Offer.OfferIdFromBillingOfferId found mutliple "
                            + "results!  UODB contains the following Xbox Offer IDs for the SCS offer ID " + billingOfferId
                            + " :\n\n" + sb.ToString());
                    }
                }
            }
            else
            {
                Xom.Trace(XomAreaName.offer, LogLevel.L_LOW, "[Offer] OfferIDFromBillingOfferID cache HIT for offer ID " + billingOfferId + ". (" + ids.Length + " entries)");
            }

            return ids;
        }

        public static ulong OfferIdFromBillingOfferId(string billingOfferId, ulong bestGuess, out bool authoritative)
        {
            ulong[] ids = OfferIdsFromBillingOfferId(billingOfferId);
            authoritative = true;

            // If we don't have an Xbox offer that matches the SCS offer, this
            // needs to be flagged in the event log.
            if (ids == null)
            {
                throw new XRLExceptionWithoutEvent(
                    HResult.XONLINE_E_OFFERING_INVALID_OFFER_ID,
                    "OfferIdFromBillingOfferId: lookup of SCS billingOfferId: {0} failed to match ANY Xbox offerId.  This would be expected if the user has an SCS subscription to a non-Xbox offer such as MSN, OneCare, etc.", new object[] { billingOfferId });
            }

            if (ids.Length != 1)
            {
                authoritative = false;
            }

            foreach(ulong id in ids)
            {
                if (id == bestGuess)
                {
                    return id;
                }
            }

            return ids[0];
        }

        public static Offer CreateInstanceFromBillingOfferId(string billingOfferId, ulong bestGuess, out bool authoritative)
        {
            ulong offerId = OfferIdFromBillingOfferId(billingOfferId, bestGuess, out authoritative);

            return CreateInstance(offerId);
        }


        public static ulong OfferIdFromServiceInstanceId(ulong userPuid, string serviceInstanceId)
        {
            ulong offerId = 0;
            int subscriptionStatusId = 0;

            using (WSClient ws = new WSClient(ConfigUtil.UodbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.PartitionType = WstPartitionType.Logical;
                ws.SetHashVal(userPuid);

                ws.StoredProc = "dbo.p_xcbk_get_offer_from_instance";

                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@bi_user_puid", userPuid);
                ws.AddParameter("@vc_instance_id", serviceInstanceId);
                ws.AddParameter(ParamType.OUTPUT, "@bi_offer_id", (long)0);
                ws.AddParameter(ParamType.OUTPUT, "@i_subscription_status_id", 0);

                // call the procedure
                ws.ExecuteNonQuery();

                HResult hr = (uint)ws.GetIntParameter("@hr");

                if (HResult.Failed(hr))
                {
                    throw new XRLException(hr, XEvent.Id.COMMON_CODE_143, "Offer.OfferIdFromServiceInstanceId: failed to instanceId '" + serviceInstanceId + "' for user 0x" + userPuid.ToString("X"));
                }

                offerId = (ulong)ws.GetLongParameter("@bi_offer_id");
                subscriptionStatusId = ws.GetIntParameter("@i_subscription_status_id");
            }

            return offerId;
        }

        public static Offer CreateInstanceFromServiceInstanceId(ulong userPuid, string serviceInstanceId)
        {
            ulong offerId = Offer.OfferIdFromServiceInstanceId(userPuid, serviceInstanceId);

            return CreateInstance(offerId);
        }

        public static MusicNetSkuOverrides GetMusicNetSkuOverrides()
        {
            MusicNetSkuOverrides overrides = new MusicNetSkuOverrides();

            string val = Config.GetSetting(Setting.musicnet_offerIdMusicNetSkuOverrides);
            if ( !string.IsNullOrEmpty(val) )
            {
                foreach ( string nameValue in val.Split(',') )
                {
                    string[] nameAndValue = nameValue.Split('=');
                    if ( nameAndValue.Length == 2 )
                    {
                        ulong offerId = SafeConvert.ToUInt64(nameAndValue[0], 0);

                        string musicNetSku = nameAndValue[1];

                        if ( offerId != 0 )
                        {
                            overrides.Add(offerId, musicNetSku);
                        }
                    }
                }
            }

            return overrides;
        }

        public static void OnSettingChange(object sender, SettingChangeEventArgs args)
        {
            switch (args.Setting)
            {
                case Setting.musicnet_offerIdMusicNetSkuOverrides:
                    _musicNetSkuOverrides = GetMusicNetSkuOverrides();
                    break;
            }
        }

        //
        // Enable the cache flushing of static types
        //

        private static int _cachetag = 1;

        private static int CacheTag()
        {
            return _cachetag;
        }

        public static void FlushHandler(object o, EventArgs e)
        {
            Interlocked.Increment(ref _cachetag);
            _boidsToXoids = new Hashtable();
        }
    }

    public class MusicNetSkuOverrides : Dictionary<ulong,string>
    {
        public override string ToString()
        {
            if ( this.Count > 0 )
            {
                StringBuilder sb = new StringBuilder();
                foreach ( KeyValuePair<ulong,string> kvp in this )
                {
                    sb.Append( "Xbox offerId: 0x" + kvp.Key.ToString("x") + " -> " + "MusicnetSku: " + kvp.Value + "\r\n" );
                }
                return sb.ToString();
            }

            return string.Empty;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\timeout\HistogramTracker.cs ===
using System.Diagnostics;
using xonline.common.mgmt;
using System;

// IMPORTANT - READ THIS
// This class is forked and exists in the Zest Tree as well as in this location
// It currently exists at private\server\diagnostics.zune.net\ in the Zest tree
// Any bug fixes applied here will likely need to be applied there as well

namespace xonline.common.billing
{
    //This class intended to wrap any API call and update a histogram of
    // duration of call values
    public class HistogramPerfCounterManager : IDisposable
    {
        private Stopwatch DurationStopWatch { get; set; }
        private string PerfCounterName { get; set; }

        private HistogramPerfCounterManager(string resourceName, string apiName)
        {
            this.PerfCounterName = string.Format("{0}:{1}", resourceName, apiName);
            this.DurationStopWatch = new Stopwatch();
            this.DurationStopWatch.Start();
        }

        /// <summary>
        /// Factory method for acquiring an object that will update the 
        /// </summary>
        /// <param name="perfCounterName"> Expected to be resource:api, example: Musiwave:AddCustomerSubscription </param>
        /// <returns></returns>
        public static HistogramPerfCounterManager GetHistogramManager(string resourceName, string apiName)
        {
            return new HistogramPerfCounterManager(resourceName, apiName);
        }

        public void Dispose()
        {
            DurationStopWatch.Stop();
            UpdateHistogram(new TimeSpan(DurationStopWatch.ElapsedTicks));
        }

        private void UpdateHistogram(TimeSpan duration)
        {
            HistogramPerfCounters histogram = HistogramPerfCounters.Current(this.PerfCounterName);

            if (histogram == null)
            {
                Xom.Trace(XomAreaName.trace,
                    LogLevel.L_NORMAL,
                    "Error: Updating Histogram Perf Counters - instance unexpectedly null for: {0}",
                    this.PerfCounterName);
                return;
            }

            long s = (((long)(duration.TotalMilliseconds)) / (long)1000);

            if (s >= 0 && s < 3)
            {
                histogram.Bucket00to03.Increment();
            }
            else if (s >= 3 && s < 6)
            {
                histogram.Bucket03to06.Increment();
            }
            else if (s >= 6 && s < 9)
            {
                histogram.Bucket06to09.Increment();
            }
            else if (s >= 9 && s < 12)
            {
                histogram.Bucket09to12.Increment();
            }
            else if (s >= 12 && s < 15)
            {
                histogram.Bucket12to15.Increment();
            }
            else if (s >= 15 && s < 18)
            {
                histogram.Bucket15to18.Increment();
            }
            else if (s >= 18 && s < 21)
            {
                histogram.Bucket18to21.Increment();
            }
            else if (s >= 21 && s < 24)
            {
                histogram.Bucket21to24.Increment();
            }
            else if (s >= 24 && s < 27)
            {
                histogram.Bucket24to27.Increment();
            }
            else if (s >= 27)
            {
                histogram.Bucket27to30.Increment();
            }
            else
            {
                Xom.Trace(XomAreaName.trace,
                    LogLevel.L_NORMAL,
                    "Error: Updating Histogram Perf Counters for instance: {0} failed with unexpected time value: {1} ms",
                    this.PerfCounterName,
                    s);
            }
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\token\TokenCrypto.cs ===
using System;
using System.IO;
using System.Security.Cryptography;


using xonline.common.config;
using xonline.common.crypto;
using xonline.common.mgmt;
using xonline.common.service;

namespace xonline.common.token
{
    public class TokenCrypto
    {
        public const int IVSize = 16;  // should match AES_KEYSIZE in crytohelper.h

        public static void GetEncryptedTokenFileEncryptionKey(byte[] plainText, byte[] iv, out int keyVersion, out byte[] cipherText)
        {
            int keyType = Config.GetIntSetting(Setting.tokenService_keyType);
            keyVersion = Config.GetIntSetting(Setting.tokenService_keyVersion);

            byte[] key = null;

            // get the raw TokenJob encryption key
            try
            {
                key = CryptoReader.GetKey(keyType, keyVersion);
            }
            catch (Exception e)
            {
                HResult hr = HResult.XONLINE_E_UODB_KEY_NOT_FOUND;

                string msg = string.Format("TokenCrypto.GetEncryptedKey: failed to load TokenJob encryption key from NPDB.  Verify that xkeymgr been run to add key type {0} to NPDB.\r\nException: {1}", keyType, e.ToString());

                Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_ERROR, msg );

                throw new XRLException( hr, XEvent.Id.CRUX_MUSICNET_KEY_LOAD_ERROR, msg );
            }

            AesUtil.Encrypt(plainText, key, iv, out cipherText);

            key = null;
        }

        public static byte[] GetDecryptedTokenKey(byte[] cipherText, byte[] iv, int keyVersion)
        {
            int keyType = Config.GetIntSetting(Setting.tokenService_keyType);
            byte[] key = null;

            // get the raw TokenJob encryption key
            try
            {
                key = CryptoReader.GetKey(keyType, keyVersion);
            }
            catch (Exception e)
            {
                HResult hr = HResult.XONLINE_E_UODB_KEY_NOT_FOUND;

                string msg = string.Format("TokenCrypto.GetEncryptedKey: failed to load TokenJob encryption key from NPDB.  Verify that xkeymgr been run to add key type {0} to NPDB.\r\nException: {1}", keyType, e.ToString());

                Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_ERROR, msg );

                throw new XRLException( hr, XEvent.Id.TOKEN_KEY_ENCRYPTION_KEY_LOAD_FAILURE, msg );
            }

            byte[] plainText = null;
            AesUtil.Decrypt(cipherText, key, iv, out plainText);

            key = null;

            return plainText;
        }

        public static CryptoStream GetTokenFileCryptoStream(Stream baseStream, byte[] key, byte[] iv, CryptoStreamMode streamMode)
        {
            PaddingMode paddingMode = (streamMode == CryptoStreamMode.Write) ? PaddingMode.ISO10126 : PaddingMode.None;
            return GetTokenFileCryptoStream(baseStream, key, iv, streamMode, paddingMode);
        }

        public static CryptoStream GetTokenFileCryptoStream(Stream baseStream, byte[] key, byte[] iv, CryptoStreamMode streamMode, PaddingMode paddingMode)
        {
            RijndaelManaged aes = new RijndaelManaged();
            aes.Key = key;
            aes.IV = iv;
            aes.Padding = paddingMode;

            ICryptoTransform cryptoXform = null;

            if ( streamMode == CryptoStreamMode.Write )
            {
                cryptoXform = aes.CreateEncryptor(aes.Key, aes.IV);
            }
            else
            {
                cryptoXform = aes.CreateDecryptor(aes.Key, aes.IV);
            }

            return new CryptoStream(baseStream, cryptoXform, streamMode);
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\token\TokenGenerator.cs ===
using System;
using System.Text;
using System.Security.Cryptography;
using xonline.common.service;
using xonline.common.diagnostics;

namespace xonline.common.token
{
    //
    //  Token Generator, generate the 5x5 tokens
    //
    public static class TokenGenerator
    {
        internal const string TokenCharSet = "234679CDFGHJKMPQRTVWXY";
        internal static byte TokenCharSetLength = (byte) TokenCharSet.Length;

        public static string GenerateToken()
        {
            // this algorithm generates more random bits than necessary but is still efficient
            // and has the advantage of being straightforward to change if characters are added
            // or removed from the allowed set
            StringBuilder tokenBuilder = new StringBuilder();

            // create a new instance of the Windows RNG
            RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();

            // the last character is always N so 24 random characters are needed

            // generate one random byte per token character (i.e. 24)
            byte[] randomBytes = new byte[XOn.ACTIVATION_CODE_LENGTH-1];

            // generate the random value.
            rng.GetBytes(randomBytes);

            for (int i=0; i < randomBytes.Length; i++)
            {
                // restrict the random value to 0..(n-1) where n is the range size of token chars
                int randomIndex = randomBytes[i] % TokenCharSetLength;

                // add the random char
                tokenBuilder.Append(TokenCharSet[randomIndex]);

                // add '-' every 5 characters
                if ( ((i+1) % 5) == 0 )
                {
                    tokenBuilder.Append('-');
                }
            }

            // All live generated token will ends with "Z".
            tokenBuilder.Append("Z");

            string token = tokenBuilder.ToString();

            return token;
        }
    }

    //
    //  Sequence Number generator, generate a randomized sequence number from a given index.
    //
    public static class SequenceNumberGenerator
    {
        // Maximum number of tokens we can support per PKPN. Must smaller than 1 billion.
        public const uint MaxIndex = 10000000;
        // The sequence number is 9 digits, so whatever we can randomize is 1 billion / MaxIndex.
        private const uint MaxRandom = 1000000000 / MaxIndex;

        public static uint GenerateSequenceNumber(uint index)
        {
            // First of all, make sure the index is within range
            if (index >= MaxIndex)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_SEQUENCE_NUMBER_INVALID_INDEX, string.Format("SequenceNumberGenerator.GenerateSequenceNumber: index is invalid (index={0}, MaxIndex={1})", index, MaxIndex));
            }
            // We need a random number from 0 to MaxRandom, so 4 bytes is enough
            byte[] randomBytes = new byte[4];
            // Create a new instance of the Windows RNG
            RNGCryptoServiceProvider RNG = new RNGCryptoServiceProvider();
            // Generate the random value.
            RNG.GetBytes(randomBytes);
            // Scale the random number from (0, MaxUint) to (0, MaxRandom)
            uint uRandom = BitConverter.ToUInt32(randomBytes, 0);
            uint random = (uint)((UInt64)(uRandom) * MaxRandom >> 32);
            // Append that to index
            uint seqNum = index * MaxRandom + random;
            return seqNum;
        }

        public static uint GetIndexFromSequenceNumber(uint seqNum)
        {
            return seqNum / MaxRandom;
        }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\token\TokenCategory.cs ===
﻿using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;
using System.Transactions;

using Microsoft.Webstore.WstClient;

using xonline.common.billing;
using xonline.common.config;
using xonline.common.mgmt;
using xonline.common.service;
using xonline.common.sql.webstore;

namespace xonline.common.token
{
    /// <summary>
    /// The class represents a token category object in token service
    /// </summary>
    public class TokenCategory
    {
        #region Fields

        // flag to indicate if this object has been configured in TokenDB or not
        private bool _isConfigured = false;

        // read-only variable (constant) to specify max length of token (16 for now)
        public const int MaxTokenLength = 16; //public static readonly int MaxTokenLength = 16;

        #endregion

        #region Properties

        /// <summary>
        /// Returns the id of the token category
        /// </summary>
        public Guid Id { get; set; }

        /// <summary>
        /// Returns the name of the token category, for example "BestBuy 12-month Gold Prepaid Card"
        /// </summary>
        public string Name { get; set; }

        /// <summary>
        /// Returns the expiration date of all the tokens in this category.
        /// </summary>
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Returns the offer id associated with the token
        /// </summary>
        public Guid OfferId { get; set; }

        /// <summary>
        /// Returns the promotion id associated with the token
        /// </summary>
        public Guid PromotionId { get; set; }

        /// <summary>
        /// Returns the media type of the offer associated with the token
        /// </summary>
        public uint MediaTypeId { get; set; }

        /// <summary>
        /// Returns whether the tokens in this category is in CSAT system
        /// </summary>
        public bool InCsat { get; set; }

        /// <summary>
        /// RSM tokens flag
        /// </summary>
        public bool IsRsm { get; set; }

        /// <summary>
        /// PKPN value
        /// </summary>
        public string Pkpn { get; set; }

        /// <summary>
        /// ChannelTypeId property
        /// </summary>
        public int ChannelTypeId { get; set; }

        /// <summary>
        /// IsRevenueBearing flag
        /// </summary>
        public bool IsRevenueBearing { get; set; }

        /// <summary>
        /// IsRoyaltyBearing flag
        /// </summary>
        public bool IsRoyaltyBearing { get; set; }

        /// <summary>
        /// IsRedeemable flag
        /// </summary>
        public bool IsRedeemable { get; set; }

        /// <summary>
        /// Token Type Property
        /// </summary>
        public string TokenType { get; set; }

        #endregion

        #region constructor

        /// <summary>
        /// Empty Constructor
        /// </summary>
        public TokenCategory()
        {
            _isConfigured = false;
        }

        /// <summary>
        /// Constructor, used for creating a new token category object
        /// with all public properties specified
        /// </summary>
        public TokenCategory(Guid id,
                             string name,
                             DateTime expirationDate,
                             Guid offerId,
                             Guid promotionId,
                             uint mediaTypeId,
                             bool InCsat,
                             bool IsRsm,
                             string Pkpn,
                             int ChannelTypeId,
                             bool isRevenueBearing,
                             bool isRoyaltyBearing,
                             bool isRedeemable,
                             string tokenType
                            )
        {
            this.Id = id;
            this.Name = name;
            this.ExpirationDate = expirationDate;
            this.OfferId = offerId;
            this.PromotionId = promotionId;
            this.MediaTypeId = mediaTypeId;
            this.InCsat = InCsat;
            this.IsRsm = IsRsm;
            this.Pkpn = Pkpn;
            this.ChannelTypeId = ChannelTypeId;
            this.IsRevenueBearing = isRevenueBearing;
            this.IsRoyaltyBearing = isRoyaltyBearing;
            this.IsRedeemable = isRedeemable;
            this.TokenType = tokenType;
            _isConfigured = false;
        }

        #endregion

        #region Methods

        /// <summary>
        /// Configure (create or update) the token category in TokenDB.
        /// </summary>
        public void Configure(ChannelSKU[] channelSKUs)
        {
            if (_isConfigured)
            {
                return;
            }

            ConfigureValidation();

            using (TransactionScope tx = new TransactionScope())
            {
                // configure token category in TokenDB
                ConfigureTransaction();

                // configure Partner information in SCS if channelSKUs is non-empty
                SetPartnerConfiguration(channelSKUs);

                // if SCS configuration succeeded, commit the changes in TokenDB
                tx.Complete();

                _isConfigured = true;
            }
        }

        // Validate the parameters for configure
        private void ConfigureValidation()
        {
            if (this.Id == Guid.Empty)
            {
                throw new XRLExceptionWithoutEvent(HResult.E_INVALIDARG, "Invalid token category id.");
            }
            if (string.IsNullOrEmpty(this.Name) || this.Name.Length > 100) // Must match the definition of vc_token_categorythis.Name in t_token_category
            {
                throw new XRLExceptionWithoutEvent(HResult.E_INVALIDARG, "Invalid token category name.");
            }
            // Currently, we don't know how promotion id is working. So let's just validate offer id exists
            if (this.OfferId == Guid.Empty)
            {
                throw new XRLExceptionWithoutEvent(HResult.E_INVALIDARG, "Invalid offer id.");
            }
            if (this.MediaTypeId == 0)
            {
                throw new XRLExceptionWithoutEvent(HResult.E_INVALIDARG, "Invalid media type id.");
            }
            if (string.IsNullOrEmpty(this.Pkpn) || this.Pkpn.Length > MaxTokenLength) // PKPN maxLength is 16 char for now
            {
                throw new XRLExceptionWithoutEvent(HResult.E_INVALIDARG, "Invalid PKPN.");
            }
            if (this.TokenType == null)
            {
                throw new XRLExceptionWithoutEvent(HResult.E_INVALIDARG, "Invalid Token Type.");
            }
            // TODO: Add addtional offer validation here.
        }

        private void ConfigureTransaction()
        {
            // Since token category table is not partitioned, and new token category should be inserted into all partitions,
            // we need to use a distributed transaction to do this.
            foreach (int physicalPartition in WSClient.GetPhysicalPartitions(ConfigUtil.TokendbWebstoreApp))
            {
                using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITEONLY_COMMANDTYPE))
                {
                    HResult hr = HResult.E_FAIL;
                    ws.StoredProc = "dbo.p_configure_token_category";
                    ws.PhysicalPartition = physicalPartition;
                    ws.AddParameter(ParamType.RETVAL, "@hr", hr);
                    ws.AddParameter("@uid_token_category_id", this.Id);
                    ws.AddParameter("@vc_token_category_name", this.Name);
                    ws.AddParameter("@uid_offer_id", this.OfferId);
                    ws.AddParameter("@uid_promotion_id", this.PromotionId);
                    ws.AddParameter("@i_media_type_id", this.MediaTypeId);
                    ws.AddParameter("@f_in_scg", this.InCsat ? 1 : 0);
                    ws.AddParameter("@dt_expiration_date", this.ExpirationDate);
                    ws.AddParameter("@f_is_rsm", this.IsRsm ? 1 : 0);
                    ws.AddParameter("@vc_pkpn", this.Pkpn);
                    ws.AddParameter("@ti_channel_type_id", this.ChannelTypeId);
                    ws.AddParameter("@f_is_revenue_bearing", this.IsRevenueBearing ? 1 : 0);
                    ws.AddParameter("@f_is_royalty_bearing", this.IsRoyaltyBearing ? 1 : 0);
                    ws.AddParameter("@f_is_redeemable", this.IsRedeemable ? 1 : 0);
                    ws.ExecuteNonQuery();
                    hr = (uint)ws.GetIntParameter("@hr");
                    if (HResult.Failed(hr))
                    {
                        throw new XRLExceptionWithoutEvent(hr, "Configure token category failed!");
                    }
                }
            }
        }

        /// <summary>
        /// gets tokenCategory object for category id.
        /// </summary>
        /// <param name="tokenCategoryId">token category id</param>
        public static TokenCategory GetTokenCategory(Guid tokenCategoryId)
        {
            // creating empty instance of TokenCategory class to fill and return it back to the caller
            TokenCategory tc = new TokenCategory();

            using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_get_token_category_by_id";
                ws.Partition = WstCommand.AnyPartition;
                ws.AddParameter("@uid_token_category_id", tokenCategoryId);

                using (WstDataReader r = ws.Execute())
                {
                    if (r.Read())
                    {
                        tc.Id = r.GetGuid(0);
                        tc.Name = r.GetString(1);
                        tc.ExpirationDate = r.GetDateTime(2);
                        tc.OfferId = r.GetGuid(3);
                        tc.PromotionId = r.GetGuid(4);
                        tc.MediaTypeId = (uint)r.GetInt32(5);
                        tc.InCsat = (bool)(r.GetByte(6) == 1);
                        tc.IsRsm = (bool)(r.GetByte(7) == 1);
                        tc.Pkpn = r.GetString(8);
                        tc.ChannelTypeId = (int)r.GetByte(9);
                        tc.IsRevenueBearing = (bool)(r.GetByte(10) == 1);
                        tc.IsRoyaltyBearing = (bool)(r.GetByte(11) == 1);
                        tc.IsRedeemable = (bool)(r.GetByte(12) == 1);
                    }
                    else
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND, String.Format("GetTokenCategory({0}) failed!", tokenCategoryId.ToString()));
                    }
                    r.Close();
                }
            }

            return tc; // returning TokenCategory class
        }

        /// <summary>
        /// gets tokenCategory object for categoryName
        /// </summary>
        /// <param name="categoryName">string which maps to varchar(100)</param>
        public static TokenCategory GetTokenCategory(string tokenCategoryName)
        {
            if (tokenCategoryName == null)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND, "GetTokenCategory(null) failed!");
            }
            // creating empty instance of TokenCategory class to fill and return it back to the caller
            TokenCategory tc = new TokenCategory();

            using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_get_token_category_by_name";
                ws.Partition = WstCommand.AnyPartition;
                ws.AddParameter("@vc_token_category_name", tokenCategoryName);

                using (WstDataReader r = ws.Execute())
                {
                    if (r.Read())
                    {
                        tc.Id = r.GetGuid(0);
                        tc.Name = r.GetString(1);
                        tc.ExpirationDate = r.GetDateTime(2);
                        tc.OfferId = r.GetGuid(3);
                        tc.PromotionId = r.GetGuid(4);
                        tc.MediaTypeId = (uint)r.GetInt32(5);
                        tc.InCsat = (bool)(r.GetByte(6) == 1);
                        tc.IsRsm = (bool)(r.GetByte(7) == 1);
                        tc.Pkpn = r.GetString(8);
                        tc.ChannelTypeId = (int)r.GetByte(9);
                        tc.IsRevenueBearing = (bool)(r.GetByte(10) == 1);
                        tc.IsRoyaltyBearing = (bool)(r.GetByte(11) == 1);
                        tc.IsRedeemable = (bool)(r.GetByte(12) == 1);
                    }
                    else
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND, "GetTokenCategory({0}) failed!", tokenCategoryName);
                    }
                    r.Close();
                }
            }

            return tc;
        }

        /// <summary>
        /// gets a collection of TokenCategory objects for given offerId
        //  as each offer potentially can be associated with more than one tokenCategory
        /// </summary>
        /// <param name="offerId">offerId as a GUID</param>
        public static List<TokenCategory> GetTokenCategories(Guid offerId)
        {
            // creating empty instance of TokenCategory class to fill and return it back to the caller
            List<TokenCategory> tcList = new List<TokenCategory>();

            using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_get_token_category_by_offer";
                ws.Partition = WstCommand.AnyPartition;
                ws.AddParameter("@uid_offer_id", offerId);

                using (WstDataReader r = ws.Execute())
                {
                    while (r.Read())
                    {
                        // reading data and adding current TokenCategory object to object collection
                        tcList.Add(
                            new TokenCategory
                                (
                                   r.GetGuid(0),              // id
                                   r.GetString(1),            // Name
                                   r.GetDateTime(2),          // ExpirationDate
                                   r.GetGuid(3),              // OfferId
                                   r.GetGuid(4),              // PromotionId
                                   (uint)r.GetInt32(5),       // MediaTypeId
                                   (bool)(r.GetByte(6) == 1), // InCsat
                                   (bool)(r.GetByte(7) == 1), // IsRsm
                                   r.GetString(8),            // Pkpn
                                   (int)r.GetByte(9),         // ChannelType
                                   (bool)(r.GetByte(10) == 1), // IsRevenueBearing
                                   (bool)(r.GetByte(11) == 1), //IsRoyaltyBearing
                                   (bool)(r.GetByte(12) == 1), // IsRedeemable
                   string.Empty // Token Type is optional field for filling token related information for CTP, can not be null
                                 )
                            );
                    }

                    r.Close();
                }
            }

            return tcList;
        }

        public static TokenCategory GetTokenCategory(byte[] tokenHash)
        {
            if (tokenHash == null)
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND, "GetTokenCategory(null) failed!");
            }
            // creating empty instance of TokenCategory class to fill and return it back to the caller
            TokenCategory tc = new TokenCategory();

            using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_get_token_info_by_hash";
                ws.Partition = WstCommand.AnyPartition;
                ws.AddParameter("@tokenHash", tokenHash);

                using (WstDataReader r = ws.Execute())
                {
                    if (r.Read())
                    {
                        tc.Id = r.GetGuid(6);
                        tc.Name = r.GetString(9);
                        tc.OfferId = r.GetGuid(11);
                        tc.PromotionId = r.GetGuid(12);
                        tc.MediaTypeId = (uint)r.GetInt32(10);
                        tc.InCsat = (bool)(r.GetByte(13) == 1);
                        tc.IsRsm = (bool)(r.GetByte(14) == 1);
                        tc.Pkpn = r.GetString(15);
                        tc.ExpirationDate = r.GetDateTime(16);
                        tc.ChannelTypeId = (int)r.GetByte(18);
                        tc.IsRevenueBearing = (bool)(r.GetByte(19) == 1);
                        tc.IsRoyaltyBearing = (bool)(r.GetByte(20) == 1);
                        tc.IsRedeemable = (bool)(r.GetByte(21) == 1);
                    }
                    else
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND, String.Format("GetTokenCategory({0}) failed!", tokenHash.ToString()));
                    }
                    r.Close();
                }
            }

            return tc;
        }

        /// <summary>
        /// Create Partenr XML and Send the configuration information to CTP API
        /// </summary>
        /// <param name="channelSKU"></param>
        private void SetPartnerConfiguration(ChannelSKU[] channelSKUs)
        {
            string responseXML = string.Empty;
            BillingProvider bdk = new BillingProvider();
            ValidatePKPN();

            if (channelSKUs != null && channelSKUs.Length > 0)
            {
                try
                {
                    // Configure PKPN information before Channel SKU can be configured
                    PKPN pkpnInfo = new PKPN();
                    pkpnInfo.ID = Pkpn;
                    pkpnInfo.ExpirationDate = ExpirationDate.ToString("s");
                    pkpnInfo.SourcePartner = Config.GetSetting(Setting.billing_scsSourcePartnerId);
                    pkpnInfo.IsMarketing = false;
                    pkpnInfo.ChannelType = ChannelTypeId.ToString();
                    pkpnInfo.TokenType = TokenType;

                    bdk.SetPartnerConfiguration(Guid.NewGuid(), new Guid(pkpnInfo.SourcePartner), CreatePartnerConfigXML(pkpnInfo, ResellerConfigType.PKPN), out responseXML);

                    foreach (ChannelSKU channelSKU in channelSKUs)
                    {
                        Guid trackingGuid = Guid.NewGuid();

                        // Configure Channel SKU
                        channelSKU.PartnerID = pkpnInfo.SourcePartner;
                        bdk.SetPartnerConfiguration(trackingGuid, new Guid(channelSKU.PartnerID), CreatePartnerConfigXML(channelSKU, ResellerConfigType.ChannelSKU), out responseXML);
                    }
                }
                catch(Exception e)
                {
                    HResult hr = BillingProviderException.ToHResult(e, HResult.XONLINE_E_BILLING_CTP_PARTNERCONFIG_UNKNOWN_ERROR);

                    // exceptions with events or exceptions explicitly flagged as not event-worthy are thrown as-is
                    if ((e is ExceptionWithEvent) || (e is ExceptionWithoutEvent)) throw;

                    // all others result in a request-specific event id
                    throw new XRLException(hr, XEvent.Id.CTP_PARTNER_CONFIGURATION_ERROR, string.Format("SetPartnerConfiguration: unknown exception: {0}", e.Message), e);
                }
            }
        }

        private void ValidatePKPN()
        {
            try
            {
                TokenCategory tc = GetTokenCategory(this.Id);
                if (tc.Pkpn != this.Pkpn)
                {
                    throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_TOKEN_CATEGORY_READ_ONLY_PROPERTY_CHANGE, "PKPN is Read Only property, cannot be updated.");
                }
            }
            catch (Exception e)
            {
                // when configuring a new token category, XONLINE_E_TOKEN_NO_CATEGORY_FOUND is expected
                if (e is ExceptionWithHResult && ((ExceptionWithHResult)e).HResult == HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND)
                {
                    Xom.Trace(XomAreaName.tokenTrace, LogLevel.L_LOW, "ValidatePKPN: ignoring HResult.XONLINE_E_TOKEN_NO_CATEGORY_FOUND exception");
                }
                else
                {
                    throw;
                }
            }
        }

        /// <summary>
        /// Create XML for Partner Configuration Object in CTP required Format
        /// </summary>
        /// <param name="resellerConfigObject"></param>
        /// <param name="objectType"></param>
        /// <returns>PartnerConfigObjectXML</returns>
        private string CreatePartnerConfigXML(Object resellerConfigObject, ResellerConfigType objectType)
        {
            PartnerConfigObjectXML partnerObject = new PartnerConfigObjectXML();
            partnerObject.PartnerConfigObjectType = objectType;
            partnerObject.Item = resellerConfigObject;
            return partnerObject.ToXml();
        }
        #endregion
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\token\TokenInfo.cs ===
using System;
using System.Collections.Generic;
using System.Diagnostics;

using xonline.common.billing;
using xonline.common.config;
using xonline.common.service;
using xonline.common.sql.webstore;

using Microsoft.Webstore.WstClient;

namespace xonline.common.token
{
    public class TokenRedemption
    {
        public TokenRedemption(ulong userPuid, DateTime dateRedeemed)
        {
            this.userPuid = userPuid;
            this.dateRedeemed = dateRedeemed;
        }

        public ulong UserPuid
        {
            get { return userPuid; }
        }

        public DateTime DateRedeemed
        {
            get { return dateRedeemed; }
        }

        internal ulong userPuid;
        internal DateTime dateRedeemed;
    }

    /// <summary>
    /// The class represents a token info object in token service
    /// </summary>
    public class TokenInfo
    {
        public TokenCategory Category
        {
            get { return category; }
        }

        public byte[] Hash
        {
            get { return hash; }
        }

        public int StatusId
        {
            get { return statusId; }
        }

        public int UseCount
        {
            get { return useCount; }
        }

        public byte ConsoleVersion
        {
            get { return consoleVersion; }
        }

        public uint SequenceNumber
        {
            get { return sequenceNumber; }
        }

        public TokenRedemption[] Redemptions
        {
            get { return redemptions; }
        }

        public static TokenInfo GetTokenInfo(string token)
        {
            Debug.Assert( string.IsNullOrEmpty(token) == false );
            if ( string.IsNullOrEmpty(token) )
            {
                throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_ACCOUNTS_INVALID_VOUCHER, "TokenInfo.GetTokenInfo: token cannot be null or empty");
            }

            byte[] tokenHash = VoucherUtil.GetVoucherHash(token);

            return GetTokenInfo(tokenHash);
        }

        public static TokenInfo GetTokenInfo(byte[] tokenHash)
        {
            TokenInfo ti = null;
            using (WSClient ws = new WSClient(ConfigUtil.TokendbWebstoreApp, CmdType.WRITETHENREAD_COMMANDTYPE))
            {
                ws.StoredProc = "dbo.p_get_token_summary";
                ws.SetHashVal(BitConverter.ToInt64(tokenHash, 0));

                ws.AddParameter(ParamType.RETVAL, "@hr", 0);
                ws.AddParameter("@bin_token_hash", tokenHash);

                using (WstDataReader r = ws.Execute())
                {
                    if ( r.Read() )
                    {
                        Guid jobId = r.GetGuid(0);
                        Guid categoryId = r.GetGuid(1);
                        int useCount = r.GetInt32(2);
                        int statusId = r.GetInt32(3);
                        byte consoleVersion = r.GetByte(4);
                        int sequenceNumber = r.GetInt32(5);

                        // load the TokenCategory
                        TokenCategory tc = TokenCategory.GetTokenCategory(categoryId);

                        // fill out the return TokenInfo object
                        ti = new TokenInfo();
                        ti.hash = tokenHash;
                        ti.useCount = useCount;
                        ti.statusId = statusId;
                        ti.consoleVersion = consoleVersion;
                        ti.sequenceNumber = (uint) sequenceNumber;
                        ti.category = tc;

                        if ( r.NextResult() )
                        {
                            List<TokenRedemption> redemptionList = new List<TokenRedemption>();
                            while ( r.Read() )
                            {
                                ulong userPuid = (ulong) r.GetInt64(0);
                                DateTime dateRedeemed = r.GetDateTime(1);

                                redemptionList.Add(new TokenRedemption(userPuid, dateRedeemed));
                            }

                            ti.redemptions = redemptionList.ToArray();
                        }
                    }
                    else
                    {
                        throw new XRLExceptionWithoutEvent(HResult.XONLINE_E_ACCOUNTS_INVALID_VOUCHER, "TokenInfo.GetTokenInfo: dbo.p_get_token_summary returned no data!");
                    }
                    HResult hr = (uint) ws.GetIntParameter("@hr");
                    if (HResult.Failed(hr))
                    {
                        throw new XRLExceptionWithoutEvent(hr, "TokenInfo.GetTokenInfo failed!");
                    }
                }
            }
            return ti;
        }


        protected TokenCategory category;
        protected byte[] hash;
        protected int statusId;
        protected int useCount;
        protected byte consoleVersion;
        protected uint sequenceNumber;
        protected TokenRedemption[] redemptions;
    }

}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\token\ResellerTokenInfo.cs ===
﻿using System.IO;
using System.Text;
using System.Xml.Serialization;

namespace xonline.common.token
{

    /// <summary>
    /// The ResellerTokenInfo class is used to create xml for loading token instances to CTP.  
    /// This class is serialized and passed as string parameter to CTP LoadTokenInstances API.
    /// </summary>

    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:schemas-microsoft-com:billing-data")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:schemas-microsoft-com:billing-data", IsNullable = false)]
    public class ResellerTokenInfoXML
    {
        /// <remarks/>
        public string PKPN { get; set; }

        /// <remarks/>
        [System.Xml.Serialization.XmlArrayItemAttribute("ResellerToken", IsNullable = false)]
        public ResellerToken[] InputTokenList { get; set; }


        public string ToXml()
        {
            StringWriter Output = new StringWriter(new StringBuilder());
            string xmlString = string.Empty;

                XmlSerializer s = new XmlSerializer(this.GetType());
                s.Serialize(Output, this);
                xmlString = Output.ToString();

                // Strip extra xml
                xmlString = Output.ToString().Replace("xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"", "");
                xmlString = xmlString.Replace("xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"", "");
                xmlString = xmlString.Replace("<?xml version=\"1.0\" encoding=\"utf-16\"?>", "").Trim();
            return xmlString;
        }
    }

    [System.Xml.Serialization.XmlTypeAttribute(AnonymousType = true, Namespace = "urn:schemas-microsoft-com:billing-data")]
    [System.Xml.Serialization.XmlRootAttribute(Namespace = "urn:schemas-microsoft-com:billing-data", IsNullable = false)]
    public  class ResellerToken
    {
        /// <remarks/>
        public string ID { get; set; }

        /// <remarks/>
        public int MaxUsage { get; set; }

        /// <remarks/>
        public bool IsTest { get; set; }

        /// <remarks/>
        public bool State { get; set; }

        /// <remarks/>
        public bool IsBlackListed { get; set; }
    }
}
=== C:/Users/treeman/Desktop/windows nt source code\xbox\Xbox Live Source\XONLINE_MAIN\private\common\marketplace\catalog\RawCatalogDB.Designer.cs ===
﻿//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Data.Objects.DataClasses.EdmSchemaAttribute()]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoInstance_AudioEncoding", "AudioEncoding", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.AudioEncoding), "VideoInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.VideoInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentAvatarItem_AvatarBodyType", "AvatarBodyType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.AvatarBodyType), "GameContentAvatarItem", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameContentAvatarItem))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Subscription_BillingFrequency", "BillingFrequency", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.BillingFrequency), "Subscription", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Subscription))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Category_Category", "Category", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Category), "Category1", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Category))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoCategory_Category", "Category", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Category), "MediaCategory", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaCategory))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaInstanceClientType_ClientType", "ClientType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.ClientType), "MediaInstanceClientType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaInstanceClientType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "GameCapabilityCountryMap", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountryMap))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_CountryMap", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "GameCapabilityCountryMap", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountryMap))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Locale_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Locale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Country), "PreviewMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PreviewMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PricingRule_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "PricingRule", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PricingRule))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_PriceCurrencyCode", "Currency", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Currency), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_ReportingRetailValueCurrencyCode", "Currency", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Currency), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PricingRule_RetailCurrency", "Currency", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Currency), "PricingRule", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PricingRule))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PricingRule_WholesaleCurrency", "Currency", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Currency), "PricingRule", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PricingRule))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_DRMLicenseIssuer", "DRMLicenseIssuer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.DRMLicenseIssuer), "PreviewMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PreviewMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "C_FK_Subscription_DurationType", "DurationType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.DurationType), "Subscription", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Subscription))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Game_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "Game", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Game))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_GameMediaId", "Game", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Game), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_GameMediaId", "Game", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Game), "GameCapabilityCountryMap", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountryMap))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameConsumable_Game", "Game", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Game), "GameConsumable", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameConsumable))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContent_Game", "Game", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Game), "GameContent", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameContent))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameLocale_Game", "Game", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Game), "GameLocale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameLocale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_MaxHDTVMode", "HDTVMode", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.HDTVMode), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "StorageUnit", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.StorageUnit), "GameCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameConsumable_GameContent", "GameContent", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameContent), "GameConsumable", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameConsumable))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContent_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "GameContent", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.GameContent))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentAvatarItem_GameContent", "GameContent", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameContent), "GameContentAvatarItem", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.GameContentAvatarItem))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentInstance_GameRegionMask", "GameRegionMask", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameRegionMask), "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameContentInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentInstance_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.GameContentInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentInstance_PackageType", "PackageType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.PackageType), "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameContentInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameContentInstance), "GameContentInstanceEncryptedKey", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.GameContentInstanceEncryptedKey))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameContentInstanceFile_GameContentInstance", "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameContentInstance), "GameContentInstanceFile", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameContentInstanceFile))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstance_GameContentInstance", "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameContentInstance), "OfferInstanceGameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceGameContentInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "GameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.GameContentInstance), "OfferInstanceGameContentInstanceAsset", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceGameContentInstanceAsset))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_GameLocale_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "GameLocale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.GameLocale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Image_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "Image", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Image))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_RatingValue_ImageMediaId", "Image", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Image), "RatingValue", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.RatingValue))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_ImageInstance_ImageFormat", "ImageFormat", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.ImageFormat), "ImageInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.ImageInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_ImageInstance_ImageSize", "ImageSize", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.ImageSize), "ImageInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.ImageInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_ImageInstance_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "ImageInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.ImageInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_ImageInstance_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "ImageInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.ImageInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_LicenseType", "LicenseType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.LicenseType), "OfferInstanceMedia", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMedia))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_LicenseType", "LicenseType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.LicenseType), "OfferInstanceMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_LiveSubscriptionFamily_SubscriptionFamily", "SubscriptionFamily", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.SubscriptionFamily), "LiveSubscriptionFamily", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.LiveSubscriptionFamily))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_LiveSubscriptionFamily_Tier", "Tier", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Tier), "LiveSubscriptionFamily", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.LiveSubscriptionFamily))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Locale_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "Locale1", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Locale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocale_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "MediaLocale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "MediaLocaleMap", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocaleMap))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_LocaleMap", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "MediaLocaleMap", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocaleMap))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoInstance_BurntInSubtitleLcid", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Locale), "VideoInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.VideoInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Cache_Media_MediaType", "MediaType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaType), "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Media))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Media_VisibilityStatus", "VisibilityStatus", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VisibilityStatus), "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Media))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaCategory_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaCategory", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaCategory))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaInstance_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocale_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaLocale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaLocaleMap", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocaleMap))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRating_Video", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaRating", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRating))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRatingDescriptor_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaRatingDescriptor", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRatingDescriptor))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRelationship_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaRelationship", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRelationship))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRelationship_RelatedMediaId", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaRelationship", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRelationship))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRevenueSku_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaRevenueSku", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.MediaRevenueSku))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Offer_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Offer))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "OfferInstanceMedia", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMedia))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PointsBundle_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "PointsBundle", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.PointsBundle))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Subscription_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "Subscription", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.Subscription))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_SubscriptionFamily_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "SubscriptionFamily", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.SubscriptionFamily))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaInstanceClientType_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "MediaInstanceClientType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaInstanceClientType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "OfferInstanceMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "PreviewMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.PreviewMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoInstance_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "VideoInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.VideoInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRating_RatingValue", "RatingValue", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.RatingValue), "MediaRating", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRating))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRatingDescriptor_RatingDescriptor", "RatingDescriptor", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.RatingDescriptor), "MediaRatingDescriptor", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRatingDescriptor))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaRelationship_MediaRelationshipType", "MediaRelationshipType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaRelationshipType), "MediaRelationship", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaRelationship))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PricingRule_MediaType", "MediaType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaType), "PricingRule", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PricingRule))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Offer_OfferType", "OfferType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferType), "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Offer))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_Offer", "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Offer), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferRelationShip_Offer", "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Offer), "OfferRelationShip", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferRelationShip))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferRelationShip_RelatedOffer", "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Offer), "OfferRelationShip", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferRelationShip))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferStore_Offer", "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Offer), "OfferStore", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferStore))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_PaymentType", "PaymentType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.PaymentType), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_PricingRule", "PricingRule", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.PricingRule), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstance_VisibilityLevel", "VisibilityLevel", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VisibilityLevel), "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferInstance), "OfferInstanceGameContentInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceGameContentInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferInstance), "OfferInstanceGameContentInstanceAsset", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceGameContentInstanceAsset))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_OfferInstance", "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferInstance), "OfferInstanceMedia", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMedia))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferInstance), "OfferInstanceMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceUserType_OfferInstance", "OfferInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferInstance), "OfferInstanceUserType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceUserType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_Provider", "Provider", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Provider), "OfferInstanceMedia", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMedia))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_VisibilityStatus", "VisibilityStatus", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VisibilityStatus), "OfferInstanceMedia", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMedia))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_Provider", "Provider", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Provider), "OfferInstanceMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_VisibilityStatus", "VisibilityStatus", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VisibilityStatus), "OfferInstanceMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferInstanceUserType_UserType", "UserType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.UserType), "OfferInstanceUserType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferInstanceUserType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferRelationShip_RelationShipType", "OfferRelationShipType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.OfferRelationShipType), "OfferRelationShip", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferRelationShip))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_OfferStore_Store", "Store", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Store), "OfferStore", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.OfferStore))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstanceType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.PreviewMediaInstanceType), "PreviewMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PreviewMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_Provider", "Provider", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Provider), "PreviewMediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PreviewMediaInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_PricingRule_Provider", "Provider", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Provider), "PricingRule", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.PricingRule))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Subscription_SellType", "SellType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.SellType), "Subscription", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Subscription))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_SubscriptionFamilyService_Service", "Service", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Service), "SubscriptionFamilyService", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.SubscriptionFamilyService))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_Subscription_SubscriptionFamily", "SubscriptionFamily", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.SubscriptionFamily), "Subscription", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.Subscription))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_SubscriptionBillingInformation_Subscription", "Subscription", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Subscription), "SubscriptionBillingInformation", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.SubscriptionBillingInformation))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamily", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.SubscriptionFamily), "SubscriptionFamilyService", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.SubscriptionFamilyService))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoInstance_VideoDefinition", "VideoDefinition", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VideoDefinition), "VideoInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.VideoInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoInstance_VideoEncoding", "VideoEncoding", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VideoEncoding), "VideoInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.VideoInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_VideoFile_VideoInstance", "VideoInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.VideoInstance), "VideoFile", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.VideoFile))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_LegacyOfferMapping_Offer", "Offer", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Offer), "LegacyOfferMapping", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.LegacyOfferMapping))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_App_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "App", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.App))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppAppType_App", "App", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.App), "AppAppType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.AppAppType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppLocale_App", "App", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.App), "AppLocale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.AppLocale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppAppType_AppType", "AppType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.AppType), "AppAppType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.AppAppType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppInstance_MediaInstance", "MediaInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.MediaInstance), "AppInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.AppInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppInstance_PackageType", "PackageType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.PackageType), "AppInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.AppInstance))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppInstanceEncryptedKey_AppInstance", "AppInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.AppInstance), "AppInstanceEncryptedKey", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.AppInstanceEncryptedKey))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppInstanceFile_AppInstance", "AppInstance", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.AppInstance), "AppInstanceFile", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.AppInstanceFile))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_AppLocale_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "AppLocale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.AppLocale))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_CapabilityType_DataType", "DataType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.DataType), "CapabilityType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.CapabilityType))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaCapabilityCountry_CapabilityType", "CapabilityType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.CapabilityType), "MediaCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaCapabilityCountry_Country", "Country", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Country), "MediaCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocaleUnmapped_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "MediaLocaleUnmapped", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocaleUnmapped))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaCapabilityCountry_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaLocaleUnmapped_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaLocaleUnmapped", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaLocaleUnmapped))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaCapabilityCountry_UnitType", "UnitType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(xonline.common.marketplace.catalog.UnitType), "MediaCapabilityCountry", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaCapabilityCountry))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaTerm_Locale", "Locale", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Locale), "MediaTerm", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaTerm))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaTerm_Media", "Media", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.Media), "MediaTerm", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaTerm))]
[assembly: global::System.Data.Objects.DataClasses.EdmRelationshipAttribute("RawCatalogDBModel", "FK_MediaTerm_TermType", "TermType", global::System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(xonline.common.marketplace.catalog.TermType), "MediaTerm", global::System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(xonline.common.marketplace.catalog.MediaTerm))]

// Original file name:
// Generation date: 7/14/2011 11:21:46 AM
namespace xonline.common.marketplace.catalog
{
    
    /// <summary>
    /// There are no comments for RawCatalogDBEntities in the schema.
    /// </summary>
    public partial class RawCatalogDBEntities : global::System.Data.Objects.ObjectContext
    {
        /// <summary>
        /// Initializes a new RawCatalogDBEntities object using the connection string found in the 'RawCatalogDBEntities' section of the application configuration file.
        /// </summary>
        public RawCatalogDBEntities() : 
                base("name=RawCatalogDBEntities", "RawCatalogDBEntities")
        {
            this.OnContextCreated();
        }
        /// <summary>
        /// Initialize a new RawCatalogDBEntities object.
        /// </summary>
        public RawCatalogDBEntities(string connectionString) : 
                base(connectionString, "RawCatalogDBEntities")
        {
            this.OnContextCreated();
        }
        /// <summary>
        /// Initialize a new RawCatalogDBEntities object.
        /// </summary>
        public RawCatalogDBEntities(global::System.Data.EntityClient.EntityConnection connection) : 
                base(connection, "RawCatalogDBEntities")
        {
            this.OnContextCreated();
        }
        partial void OnContextCreated();
        /// <summary>
        /// There are no comments for AudioEncoding in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AudioEncoding> AudioEncoding
        {
            get
            {
                if ((this._AudioEncoding == null))
                {
                    this._AudioEncoding = base.CreateQuery<AudioEncoding>("[AudioEncoding]");
                }
                return this._AudioEncoding;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AudioEncoding> _AudioEncoding;
        /// <summary>
        /// There are no comments for AvatarBodyType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AvatarBodyType> AvatarBodyType
        {
            get
            {
                if ((this._AvatarBodyType == null))
                {
                    this._AvatarBodyType = base.CreateQuery<AvatarBodyType>("[AvatarBodyType]");
                }
                return this._AvatarBodyType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AvatarBodyType> _AvatarBodyType;
        /// <summary>
        /// There are no comments for BillingFrequency in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<BillingFrequency> BillingFrequency
        {
            get
            {
                if ((this._BillingFrequency == null))
                {
                    this._BillingFrequency = base.CreateQuery<BillingFrequency>("[BillingFrequency]");
                }
                return this._BillingFrequency;
            }
        }
        private global::System.Data.Objects.ObjectQuery<BillingFrequency> _BillingFrequency;
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Category> Category
        {
            get
            {
                if ((this._Category == null))
                {
                    this._Category = base.CreateQuery<Category>("[Category]");
                }
                return this._Category;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Category> _Category;
        /// <summary>
        /// There are no comments for ClientType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<ClientType> ClientType
        {
            get
            {
                if ((this._ClientType == null))
                {
                    this._ClientType = base.CreateQuery<ClientType>("[ClientType]");
                }
                return this._ClientType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<ClientType> _ClientType;
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Country> Country
        {
            get
            {
                if ((this._Country == null))
                {
                    this._Country = base.CreateQuery<Country>("[Country]");
                }
                return this._Country;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Country> _Country;
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Currency> Currency
        {
            get
            {
                if ((this._Currency == null))
                {
                    this._Currency = base.CreateQuery<Currency>("[Currency]");
                }
                return this._Currency;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Currency> _Currency;
        /// <summary>
        /// There are no comments for DRMLicenseIssuer in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<DRMLicenseIssuer> DRMLicenseIssuer
        {
            get
            {
                if ((this._DRMLicenseIssuer == null))
                {
                    this._DRMLicenseIssuer = base.CreateQuery<DRMLicenseIssuer>("[DRMLicenseIssuer]");
                }
                return this._DRMLicenseIssuer;
            }
        }
        private global::System.Data.Objects.ObjectQuery<DRMLicenseIssuer> _DRMLicenseIssuer;
        /// <summary>
        /// There are no comments for DurationType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<DurationType> DurationType
        {
            get
            {
                if ((this._DurationType == null))
                {
                    this._DurationType = base.CreateQuery<DurationType>("[DurationType]");
                }
                return this._DurationType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<DurationType> _DurationType;
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Game> Game
        {
            get
            {
                if ((this._Game == null))
                {
                    this._Game = base.CreateQuery<Game>("[Game]");
                }
                return this._Game;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Game> _Game;
        /// <summary>
        /// There are no comments for GameCapabilityCountry in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameCapabilityCountry> GameCapabilityCountry
        {
            get
            {
                if ((this._GameCapabilityCountry == null))
                {
                    this._GameCapabilityCountry = base.CreateQuery<GameCapabilityCountry>("[GameCapabilityCountry]");
                }
                return this._GameCapabilityCountry;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameCapabilityCountry> _GameCapabilityCountry;
        /// <summary>
        /// There are no comments for GameCapabilityCountryMap in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameCapabilityCountryMap> GameCapabilityCountryMap
        {
            get
            {
                if ((this._GameCapabilityCountryMap == null))
                {
                    this._GameCapabilityCountryMap = base.CreateQuery<GameCapabilityCountryMap>("[GameCapabilityCountryMap]");
                }
                return this._GameCapabilityCountryMap;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameCapabilityCountryMap> _GameCapabilityCountryMap;
        /// <summary>
        /// There are no comments for GameConsumable in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameConsumable> GameConsumable
        {
            get
            {
                if ((this._GameConsumable == null))
                {
                    this._GameConsumable = base.CreateQuery<GameConsumable>("[GameConsumable]");
                }
                return this._GameConsumable;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameConsumable> _GameConsumable;
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameContent> GameContent
        {
            get
            {
                if ((this._GameContent == null))
                {
                    this._GameContent = base.CreateQuery<GameContent>("[GameContent]");
                }
                return this._GameContent;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameContent> _GameContent;
        /// <summary>
        /// There are no comments for GameContentAvatarItem in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameContentAvatarItem> GameContentAvatarItem
        {
            get
            {
                if ((this._GameContentAvatarItem == null))
                {
                    this._GameContentAvatarItem = base.CreateQuery<GameContentAvatarItem>("[GameContentAvatarItem]");
                }
                return this._GameContentAvatarItem;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameContentAvatarItem> _GameContentAvatarItem;
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameContentInstance> GameContentInstance
        {
            get
            {
                if ((this._GameContentInstance == null))
                {
                    this._GameContentInstance = base.CreateQuery<GameContentInstance>("[GameContentInstance]");
                }
                return this._GameContentInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameContentInstance> _GameContentInstance;
        /// <summary>
        /// There are no comments for GameContentInstanceEncryptedKey in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameContentInstanceEncryptedKey> GameContentInstanceEncryptedKey
        {
            get
            {
                if ((this._GameContentInstanceEncryptedKey == null))
                {
                    this._GameContentInstanceEncryptedKey = base.CreateQuery<GameContentInstanceEncryptedKey>("[GameContentInstanceEncryptedKey]");
                }
                return this._GameContentInstanceEncryptedKey;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameContentInstanceEncryptedKey> _GameContentInstanceEncryptedKey;
        /// <summary>
        /// There are no comments for GameContentInstanceFile in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameContentInstanceFile> GameContentInstanceFile
        {
            get
            {
                if ((this._GameContentInstanceFile == null))
                {
                    this._GameContentInstanceFile = base.CreateQuery<GameContentInstanceFile>("[GameContentInstanceFile]");
                }
                return this._GameContentInstanceFile;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameContentInstanceFile> _GameContentInstanceFile;
        /// <summary>
        /// There are no comments for GameLocale in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameLocale> GameLocale
        {
            get
            {
                if ((this._GameLocale == null))
                {
                    this._GameLocale = base.CreateQuery<GameLocale>("[GameLocale]");
                }
                return this._GameLocale;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameLocale> _GameLocale;
        /// <summary>
        /// There are no comments for GameRegionMask in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<GameRegionMask> GameRegionMask
        {
            get
            {
                if ((this._GameRegionMask == null))
                {
                    this._GameRegionMask = base.CreateQuery<GameRegionMask>("[GameRegionMask]");
                }
                return this._GameRegionMask;
            }
        }
        private global::System.Data.Objects.ObjectQuery<GameRegionMask> _GameRegionMask;
        /// <summary>
        /// There are no comments for HDTVMode in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<HDTVMode> HDTVMode
        {
            get
            {
                if ((this._HDTVMode == null))
                {
                    this._HDTVMode = base.CreateQuery<HDTVMode>("[HDTVMode]");
                }
                return this._HDTVMode;
            }
        }
        private global::System.Data.Objects.ObjectQuery<HDTVMode> _HDTVMode;
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Image> Image
        {
            get
            {
                if ((this._Image == null))
                {
                    this._Image = base.CreateQuery<Image>("[Image]");
                }
                return this._Image;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Image> _Image;
        /// <summary>
        /// There are no comments for ImageFormat in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<ImageFormat> ImageFormat
        {
            get
            {
                if ((this._ImageFormat == null))
                {
                    this._ImageFormat = base.CreateQuery<ImageFormat>("[ImageFormat]");
                }
                return this._ImageFormat;
            }
        }
        private global::System.Data.Objects.ObjectQuery<ImageFormat> _ImageFormat;
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<ImageInstance> ImageInstance
        {
            get
            {
                if ((this._ImageInstance == null))
                {
                    this._ImageInstance = base.CreateQuery<ImageInstance>("[ImageInstance]");
                }
                return this._ImageInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<ImageInstance> _ImageInstance;
        /// <summary>
        /// There are no comments for ImageSize in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<ImageSize> ImageSize
        {
            get
            {
                if ((this._ImageSize == null))
                {
                    this._ImageSize = base.CreateQuery<ImageSize>("[ImageSize]");
                }
                return this._ImageSize;
            }
        }
        private global::System.Data.Objects.ObjectQuery<ImageSize> _ImageSize;
        /// <summary>
        /// There are no comments for LicenseType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<LicenseType> LicenseType
        {
            get
            {
                if ((this._LicenseType == null))
                {
                    this._LicenseType = base.CreateQuery<LicenseType>("[LicenseType]");
                }
                return this._LicenseType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<LicenseType> _LicenseType;
        /// <summary>
        /// There are no comments for LiveSubscriptionFamily in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<LiveSubscriptionFamily> LiveSubscriptionFamily
        {
            get
            {
                if ((this._LiveSubscriptionFamily == null))
                {
                    this._LiveSubscriptionFamily = base.CreateQuery<LiveSubscriptionFamily>("[LiveSubscriptionFamily]");
                }
                return this._LiveSubscriptionFamily;
            }
        }
        private global::System.Data.Objects.ObjectQuery<LiveSubscriptionFamily> _LiveSubscriptionFamily;
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Locale> Locale
        {
            get
            {
                if ((this._Locale == null))
                {
                    this._Locale = base.CreateQuery<Locale>("[Locale]");
                }
                return this._Locale;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Locale> _Locale;
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Media> Media
        {
            get
            {
                if ((this._Media == null))
                {
                    this._Media = base.CreateQuery<Media>("[Media]");
                }
                return this._Media;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Media> _Media;
        /// <summary>
        /// There are no comments for MediaCategory in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaCategory> MediaCategory
        {
            get
            {
                if ((this._MediaCategory == null))
                {
                    this._MediaCategory = base.CreateQuery<MediaCategory>("[MediaCategory]");
                }
                return this._MediaCategory;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaCategory> _MediaCategory;
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaInstance> MediaInstance
        {
            get
            {
                if ((this._MediaInstance == null))
                {
                    this._MediaInstance = base.CreateQuery<MediaInstance>("[MediaInstance]");
                }
                return this._MediaInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaInstance> _MediaInstance;
        /// <summary>
        /// There are no comments for MediaInstanceClientType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaInstanceClientType> MediaInstanceClientType
        {
            get
            {
                if ((this._MediaInstanceClientType == null))
                {
                    this._MediaInstanceClientType = base.CreateQuery<MediaInstanceClientType>("[MediaInstanceClientType]");
                }
                return this._MediaInstanceClientType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaInstanceClientType> _MediaInstanceClientType;
        /// <summary>
        /// There are no comments for MediaLocale in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaLocale> MediaLocale
        {
            get
            {
                if ((this._MediaLocale == null))
                {
                    this._MediaLocale = base.CreateQuery<MediaLocale>("[MediaLocale]");
                }
                return this._MediaLocale;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaLocale> _MediaLocale;
        /// <summary>
        /// There are no comments for MediaLocaleMap in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaLocaleMap> MediaLocaleMap
        {
            get
            {
                if ((this._MediaLocaleMap == null))
                {
                    this._MediaLocaleMap = base.CreateQuery<MediaLocaleMap>("[MediaLocaleMap]");
                }
                return this._MediaLocaleMap;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaLocaleMap> _MediaLocaleMap;
        /// <summary>
        /// There are no comments for MediaRating in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaRating> MediaRating
        {
            get
            {
                if ((this._MediaRating == null))
                {
                    this._MediaRating = base.CreateQuery<MediaRating>("[MediaRating]");
                }
                return this._MediaRating;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaRating> _MediaRating;
        /// <summary>
        /// There are no comments for MediaRatingDescriptor in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaRatingDescriptor> MediaRatingDescriptor
        {
            get
            {
                if ((this._MediaRatingDescriptor == null))
                {
                    this._MediaRatingDescriptor = base.CreateQuery<MediaRatingDescriptor>("[MediaRatingDescriptor]");
                }
                return this._MediaRatingDescriptor;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaRatingDescriptor> _MediaRatingDescriptor;
        /// <summary>
        /// There are no comments for MediaRelationship in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaRelationship> MediaRelationship
        {
            get
            {
                if ((this._MediaRelationship == null))
                {
                    this._MediaRelationship = base.CreateQuery<MediaRelationship>("[MediaRelationship]");
                }
                return this._MediaRelationship;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaRelationship> _MediaRelationship;
        /// <summary>
        /// There are no comments for MediaRelationshipType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaRelationshipType> MediaRelationshipType
        {
            get
            {
                if ((this._MediaRelationshipType == null))
                {
                    this._MediaRelationshipType = base.CreateQuery<MediaRelationshipType>("[MediaRelationshipType]");
                }
                return this._MediaRelationshipType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaRelationshipType> _MediaRelationshipType;
        /// <summary>
        /// There are no comments for MediaRevenueSku in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaRevenueSku> MediaRevenueSku
        {
            get
            {
                if ((this._MediaRevenueSku == null))
                {
                    this._MediaRevenueSku = base.CreateQuery<MediaRevenueSku>("[MediaRevenueSku]");
                }
                return this._MediaRevenueSku;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaRevenueSku> _MediaRevenueSku;
        /// <summary>
        /// There are no comments for MediaType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaType> MediaType
        {
            get
            {
                if ((this._MediaType == null))
                {
                    this._MediaType = base.CreateQuery<MediaType>("[MediaType]");
                }
                return this._MediaType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaType> _MediaType;
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Offer> Offer
        {
            get
            {
                if ((this._Offer == null))
                {
                    this._Offer = base.CreateQuery<Offer>("[Offer]");
                }
                return this._Offer;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Offer> _Offer;
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferInstance> OfferInstance
        {
            get
            {
                if ((this._OfferInstance == null))
                {
                    this._OfferInstance = base.CreateQuery<OfferInstance>("[OfferInstance]");
                }
                return this._OfferInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferInstance> _OfferInstance;
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferInstanceGameContentInstance> OfferInstanceGameContentInstance
        {
            get
            {
                if ((this._OfferInstanceGameContentInstance == null))
                {
                    this._OfferInstanceGameContentInstance = base.CreateQuery<OfferInstanceGameContentInstance>("[OfferInstanceGameContentInstance]");
                }
                return this._OfferInstanceGameContentInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferInstanceGameContentInstance> _OfferInstanceGameContentInstance;
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstanceAsset in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferInstanceGameContentInstanceAsset> OfferInstanceGameContentInstanceAsset
        {
            get
            {
                if ((this._OfferInstanceGameContentInstanceAsset == null))
                {
                    this._OfferInstanceGameContentInstanceAsset = base.CreateQuery<OfferInstanceGameContentInstanceAsset>("[OfferInstanceGameContentInstanceAsset]");
                }
                return this._OfferInstanceGameContentInstanceAsset;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferInstanceGameContentInstanceAsset> _OfferInstanceGameContentInstanceAsset;
        /// <summary>
        /// There are no comments for OfferInstanceMedia in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferInstanceMedia> OfferInstanceMedia
        {
            get
            {
                if ((this._OfferInstanceMedia == null))
                {
                    this._OfferInstanceMedia = base.CreateQuery<OfferInstanceMedia>("[OfferInstanceMedia]");
                }
                return this._OfferInstanceMedia;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferInstanceMedia> _OfferInstanceMedia;
        /// <summary>
        /// There are no comments for OfferInstanceMediaInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferInstanceMediaInstance> OfferInstanceMediaInstance
        {
            get
            {
                if ((this._OfferInstanceMediaInstance == null))
                {
                    this._OfferInstanceMediaInstance = base.CreateQuery<OfferInstanceMediaInstance>("[OfferInstanceMediaInstance]");
                }
                return this._OfferInstanceMediaInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferInstanceMediaInstance> _OfferInstanceMediaInstance;
        /// <summary>
        /// There are no comments for OfferInstanceUserType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferInstanceUserType> OfferInstanceUserType
        {
            get
            {
                if ((this._OfferInstanceUserType == null))
                {
                    this._OfferInstanceUserType = base.CreateQuery<OfferInstanceUserType>("[OfferInstanceUserType]");
                }
                return this._OfferInstanceUserType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferInstanceUserType> _OfferInstanceUserType;
        /// <summary>
        /// There are no comments for OfferRelationShip in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferRelationShip> OfferRelationShip
        {
            get
            {
                if ((this._OfferRelationShip == null))
                {
                    this._OfferRelationShip = base.CreateQuery<OfferRelationShip>("[OfferRelationShip]");
                }
                return this._OfferRelationShip;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferRelationShip> _OfferRelationShip;
        /// <summary>
        /// There are no comments for OfferRelationShipType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferRelationShipType> OfferRelationShipType
        {
            get
            {
                if ((this._OfferRelationShipType == null))
                {
                    this._OfferRelationShipType = base.CreateQuery<OfferRelationShipType>("[OfferRelationShipType]");
                }
                return this._OfferRelationShipType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferRelationShipType> _OfferRelationShipType;
        /// <summary>
        /// There are no comments for OfferStore in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferStore> OfferStore
        {
            get
            {
                if ((this._OfferStore == null))
                {
                    this._OfferStore = base.CreateQuery<OfferStore>("[OfferStore]");
                }
                return this._OfferStore;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferStore> _OfferStore;
        /// <summary>
        /// There are no comments for OfferType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<OfferType> OfferType
        {
            get
            {
                if ((this._OfferType == null))
                {
                    this._OfferType = base.CreateQuery<OfferType>("[OfferType]");
                }
                return this._OfferType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<OfferType> _OfferType;
        /// <summary>
        /// There are no comments for PackageType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<PackageType> PackageType
        {
            get
            {
                if ((this._PackageType == null))
                {
                    this._PackageType = base.CreateQuery<PackageType>("[PackageType]");
                }
                return this._PackageType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<PackageType> _PackageType;
        /// <summary>
        /// There are no comments for PaymentType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<PaymentType> PaymentType
        {
            get
            {
                if ((this._PaymentType == null))
                {
                    this._PaymentType = base.CreateQuery<PaymentType>("[PaymentType]");
                }
                return this._PaymentType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<PaymentType> _PaymentType;
        /// <summary>
        /// There are no comments for PointsBundle in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<PointsBundle> PointsBundle
        {
            get
            {
                if ((this._PointsBundle == null))
                {
                    this._PointsBundle = base.CreateQuery<PointsBundle>("[PointsBundle]");
                }
                return this._PointsBundle;
            }
        }
        private global::System.Data.Objects.ObjectQuery<PointsBundle> _PointsBundle;
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<PreviewMediaInstance> PreviewMediaInstance
        {
            get
            {
                if ((this._PreviewMediaInstance == null))
                {
                    this._PreviewMediaInstance = base.CreateQuery<PreviewMediaInstance>("[PreviewMediaInstance]");
                }
                return this._PreviewMediaInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<PreviewMediaInstance> _PreviewMediaInstance;
        /// <summary>
        /// There are no comments for PreviewMediaInstanceType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<PreviewMediaInstanceType> PreviewMediaInstanceType
        {
            get
            {
                if ((this._PreviewMediaInstanceType == null))
                {
                    this._PreviewMediaInstanceType = base.CreateQuery<PreviewMediaInstanceType>("[PreviewMediaInstanceType]");
                }
                return this._PreviewMediaInstanceType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<PreviewMediaInstanceType> _PreviewMediaInstanceType;
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<PricingRule> PricingRule
        {
            get
            {
                if ((this._PricingRule == null))
                {
                    this._PricingRule = base.CreateQuery<PricingRule>("[PricingRule]");
                }
                return this._PricingRule;
            }
        }
        private global::System.Data.Objects.ObjectQuery<PricingRule> _PricingRule;
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Provider> Provider
        {
            get
            {
                if ((this._Provider == null))
                {
                    this._Provider = base.CreateQuery<Provider>("[Provider]");
                }
                return this._Provider;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Provider> _Provider;
        /// <summary>
        /// There are no comments for RatingDescriptor in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<RatingDescriptor> RatingDescriptor
        {
            get
            {
                if ((this._RatingDescriptor == null))
                {
                    this._RatingDescriptor = base.CreateQuery<RatingDescriptor>("[RatingDescriptor]");
                }
                return this._RatingDescriptor;
            }
        }
        private global::System.Data.Objects.ObjectQuery<RatingDescriptor> _RatingDescriptor;
        /// <summary>
        /// There are no comments for RatingValue in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<RatingValue> RatingValue
        {
            get
            {
                if ((this._RatingValue == null))
                {
                    this._RatingValue = base.CreateQuery<RatingValue>("[RatingValue]");
                }
                return this._RatingValue;
            }
        }
        private global::System.Data.Objects.ObjectQuery<RatingValue> _RatingValue;
        /// <summary>
        /// There are no comments for SellType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<SellType> SellType
        {
            get
            {
                if ((this._SellType == null))
                {
                    this._SellType = base.CreateQuery<SellType>("[SellType]");
                }
                return this._SellType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<SellType> _SellType;
        /// <summary>
        /// There are no comments for Service in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Service> Service
        {
            get
            {
                if ((this._Service == null))
                {
                    this._Service = base.CreateQuery<Service>("[Service]");
                }
                return this._Service;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Service> _Service;
        /// <summary>
        /// There are no comments for StorageUnit in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<StorageUnit> StorageUnit
        {
            get
            {
                if ((this._StorageUnit == null))
                {
                    this._StorageUnit = base.CreateQuery<StorageUnit>("[StorageUnit]");
                }
                return this._StorageUnit;
            }
        }
        private global::System.Data.Objects.ObjectQuery<StorageUnit> _StorageUnit;
        /// <summary>
        /// There are no comments for Store in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Store> Store
        {
            get
            {
                if ((this._Store == null))
                {
                    this._Store = base.CreateQuery<Store>("[Store]");
                }
                return this._Store;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Store> _Store;
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Subscription> Subscription
        {
            get
            {
                if ((this._Subscription == null))
                {
                    this._Subscription = base.CreateQuery<Subscription>("[Subscription]");
                }
                return this._Subscription;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Subscription> _Subscription;
        /// <summary>
        /// There are no comments for SubscriptionBillingInformation in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<SubscriptionBillingInformation> SubscriptionBillingInformation
        {
            get
            {
                if ((this._SubscriptionBillingInformation == null))
                {
                    this._SubscriptionBillingInformation = base.CreateQuery<SubscriptionBillingInformation>("[SubscriptionBillingInformation]");
                }
                return this._SubscriptionBillingInformation;
            }
        }
        private global::System.Data.Objects.ObjectQuery<SubscriptionBillingInformation> _SubscriptionBillingInformation;
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<SubscriptionFamily> SubscriptionFamily
        {
            get
            {
                if ((this._SubscriptionFamily == null))
                {
                    this._SubscriptionFamily = base.CreateQuery<SubscriptionFamily>("[SubscriptionFamily]");
                }
                return this._SubscriptionFamily;
            }
        }
        private global::System.Data.Objects.ObjectQuery<SubscriptionFamily> _SubscriptionFamily;
        /// <summary>
        /// There are no comments for SubscriptionFamilyService in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<SubscriptionFamilyService> SubscriptionFamilyService
        {
            get
            {
                if ((this._SubscriptionFamilyService == null))
                {
                    this._SubscriptionFamilyService = base.CreateQuery<SubscriptionFamilyService>("[SubscriptionFamilyService]");
                }
                return this._SubscriptionFamilyService;
            }
        }
        private global::System.Data.Objects.ObjectQuery<SubscriptionFamilyService> _SubscriptionFamilyService;
        /// <summary>
        /// There are no comments for Tier in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<Tier> Tier
        {
            get
            {
                if ((this._Tier == null))
                {
                    this._Tier = base.CreateQuery<Tier>("[Tier]");
                }
                return this._Tier;
            }
        }
        private global::System.Data.Objects.ObjectQuery<Tier> _Tier;
        /// <summary>
        /// There are no comments for UserType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<UserType> UserType
        {
            get
            {
                if ((this._UserType == null))
                {
                    this._UserType = base.CreateQuery<UserType>("[UserType]");
                }
                return this._UserType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<UserType> _UserType;
        /// <summary>
        /// There are no comments for VideoDefinition in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<VideoDefinition> VideoDefinition
        {
            get
            {
                if ((this._VideoDefinition == null))
                {
                    this._VideoDefinition = base.CreateQuery<VideoDefinition>("[VideoDefinition]");
                }
                return this._VideoDefinition;
            }
        }
        private global::System.Data.Objects.ObjectQuery<VideoDefinition> _VideoDefinition;
        /// <summary>
        /// There are no comments for VideoEncoding in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<VideoEncoding> VideoEncoding
        {
            get
            {
                if ((this._VideoEncoding == null))
                {
                    this._VideoEncoding = base.CreateQuery<VideoEncoding>("[VideoEncoding]");
                }
                return this._VideoEncoding;
            }
        }
        private global::System.Data.Objects.ObjectQuery<VideoEncoding> _VideoEncoding;
        /// <summary>
        /// There are no comments for VideoFile in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<VideoFile> VideoFile
        {
            get
            {
                if ((this._VideoFile == null))
                {
                    this._VideoFile = base.CreateQuery<VideoFile>("[VideoFile]");
                }
                return this._VideoFile;
            }
        }
        private global::System.Data.Objects.ObjectQuery<VideoFile> _VideoFile;
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<VideoInstance> VideoInstance
        {
            get
            {
                if ((this._VideoInstance == null))
                {
                    this._VideoInstance = base.CreateQuery<VideoInstance>("[VideoInstance]");
                }
                return this._VideoInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<VideoInstance> _VideoInstance;
        /// <summary>
        /// There are no comments for VisibilityLevel in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<VisibilityLevel> VisibilityLevel
        {
            get
            {
                if ((this._VisibilityLevel == null))
                {
                    this._VisibilityLevel = base.CreateQuery<VisibilityLevel>("[VisibilityLevel]");
                }
                return this._VisibilityLevel;
            }
        }
        private global::System.Data.Objects.ObjectQuery<VisibilityLevel> _VisibilityLevel;
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<VisibilityStatus> VisibilityStatus
        {
            get
            {
                if ((this._VisibilityStatus == null))
                {
                    this._VisibilityStatus = base.CreateQuery<VisibilityStatus>("[VisibilityStatus]");
                }
                return this._VisibilityStatus;
            }
        }
        private global::System.Data.Objects.ObjectQuery<VisibilityStatus> _VisibilityStatus;
        /// <summary>
        /// There are no comments for LegacyOfferMapping in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<LegacyOfferMapping> LegacyOfferMapping
        {
            get
            {
                if ((this._LegacyOfferMapping == null))
                {
                    this._LegacyOfferMapping = base.CreateQuery<LegacyOfferMapping>("[LegacyOfferMapping]");
                }
                return this._LegacyOfferMapping;
            }
        }
        private global::System.Data.Objects.ObjectQuery<LegacyOfferMapping> _LegacyOfferMapping;
        /// <summary>
        /// There are no comments for App in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<App> App
        {
            get
            {
                if ((this._App == null))
                {
                    this._App = base.CreateQuery<App>("[App]");
                }
                return this._App;
            }
        }
        private global::System.Data.Objects.ObjectQuery<App> _App;
        /// <summary>
        /// There are no comments for AppAppType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AppAppType> AppAppType
        {
            get
            {
                if ((this._AppAppType == null))
                {
                    this._AppAppType = base.CreateQuery<AppAppType>("[AppAppType]");
                }
                return this._AppAppType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AppAppType> _AppAppType;
        /// <summary>
        /// There are no comments for AppInstance in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AppInstance> AppInstance
        {
            get
            {
                if ((this._AppInstance == null))
                {
                    this._AppInstance = base.CreateQuery<AppInstance>("[AppInstance]");
                }
                return this._AppInstance;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AppInstance> _AppInstance;
        /// <summary>
        /// There are no comments for AppInstanceEncryptedKey in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AppInstanceEncryptedKey> AppInstanceEncryptedKey
        {
            get
            {
                if ((this._AppInstanceEncryptedKey == null))
                {
                    this._AppInstanceEncryptedKey = base.CreateQuery<AppInstanceEncryptedKey>("[AppInstanceEncryptedKey]");
                }
                return this._AppInstanceEncryptedKey;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AppInstanceEncryptedKey> _AppInstanceEncryptedKey;
        /// <summary>
        /// There are no comments for AppInstanceFile in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AppInstanceFile> AppInstanceFile
        {
            get
            {
                if ((this._AppInstanceFile == null))
                {
                    this._AppInstanceFile = base.CreateQuery<AppInstanceFile>("[AppInstanceFile]");
                }
                return this._AppInstanceFile;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AppInstanceFile> _AppInstanceFile;
        /// <summary>
        /// There are no comments for AppLocale in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AppLocale> AppLocale
        {
            get
            {
                if ((this._AppLocale == null))
                {
                    this._AppLocale = base.CreateQuery<AppLocale>("[AppLocale]");
                }
                return this._AppLocale;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AppLocale> _AppLocale;
        /// <summary>
        /// There are no comments for AppType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<AppType> AppType
        {
            get
            {
                if ((this._AppType == null))
                {
                    this._AppType = base.CreateQuery<AppType>("[AppType]");
                }
                return this._AppType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<AppType> _AppType;
        /// <summary>
        /// There are no comments for CapabilityType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<CapabilityType> CapabilityType
        {
            get
            {
                if ((this._CapabilityType == null))
                {
                    this._CapabilityType = base.CreateQuery<CapabilityType>("[CapabilityType]");
                }
                return this._CapabilityType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<CapabilityType> _CapabilityType;
        /// <summary>
        /// There are no comments for DataType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<DataType> DataType
        {
            get
            {
                if ((this._DataType == null))
                {
                    this._DataType = base.CreateQuery<DataType>("[DataType]");
                }
                return this._DataType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<DataType> _DataType;
        /// <summary>
        /// There are no comments for MediaCapabilityCountry in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaCapabilityCountry> MediaCapabilityCountry
        {
            get
            {
                if ((this._MediaCapabilityCountry == null))
                {
                    this._MediaCapabilityCountry = base.CreateQuery<MediaCapabilityCountry>("[MediaCapabilityCountry]");
                }
                return this._MediaCapabilityCountry;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaCapabilityCountry> _MediaCapabilityCountry;
        /// <summary>
        /// There are no comments for MediaLocaleUnmapped in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaLocaleUnmapped> MediaLocaleUnmapped
        {
            get
            {
                if ((this._MediaLocaleUnmapped == null))
                {
                    this._MediaLocaleUnmapped = base.CreateQuery<MediaLocaleUnmapped>("[MediaLocaleUnmapped]");
                }
                return this._MediaLocaleUnmapped;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaLocaleUnmapped> _MediaLocaleUnmapped;
        /// <summary>
        /// There are no comments for UnitType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<UnitType> UnitType
        {
            get
            {
                if ((this._UnitType == null))
                {
                    this._UnitType = base.CreateQuery<UnitType>("[UnitType]");
                }
                return this._UnitType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<UnitType> _UnitType;
        /// <summary>
        /// There are no comments for MediaTerm in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<MediaTerm> MediaTerm
        {
            get
            {
                if ((this._MediaTerm == null))
                {
                    this._MediaTerm = base.CreateQuery<MediaTerm>("[MediaTerm]");
                }
                return this._MediaTerm;
            }
        }
        private global::System.Data.Objects.ObjectQuery<MediaTerm> _MediaTerm;
        /// <summary>
        /// There are no comments for TermType in the schema.
        /// </summary>
        public global::System.Data.Objects.ObjectQuery<TermType> TermType
        {
            get
            {
                if ((this._TermType == null))
                {
                    this._TermType = base.CreateQuery<TermType>("[TermType]");
                }
                return this._TermType;
            }
        }
        private global::System.Data.Objects.ObjectQuery<TermType> _TermType;
        /// <summary>
        /// There are no comments for AudioEncoding in the schema.
        /// </summary>
        public void AddToAudioEncoding(AudioEncoding audioEncoding)
        {
            base.AddObject("AudioEncoding", audioEncoding);
        }
        /// <summary>
        /// There are no comments for AvatarBodyType in the schema.
        /// </summary>
        public void AddToAvatarBodyType(AvatarBodyType avatarBodyType)
        {
            base.AddObject("AvatarBodyType", avatarBodyType);
        }
        /// <summary>
        /// There are no comments for BillingFrequency in the schema.
        /// </summary>
        public void AddToBillingFrequency(BillingFrequency billingFrequency)
        {
            base.AddObject("BillingFrequency", billingFrequency);
        }
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        public void AddToCategory(Category category)
        {
            base.AddObject("Category", category);
        }
        /// <summary>
        /// There are no comments for ClientType in the schema.
        /// </summary>
        public void AddToClientType(ClientType clientType)
        {
            base.AddObject("ClientType", clientType);
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        public void AddToCountry(Country country)
        {
            base.AddObject("Country", country);
        }
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        public void AddToCurrency(Currency currency)
        {
            base.AddObject("Currency", currency);
        }
        /// <summary>
        /// There are no comments for DRMLicenseIssuer in the schema.
        /// </summary>
        public void AddToDRMLicenseIssuer(DRMLicenseIssuer dRMLicenseIssuer)
        {
            base.AddObject("DRMLicenseIssuer", dRMLicenseIssuer);
        }
        /// <summary>
        /// There are no comments for DurationType in the schema.
        /// </summary>
        public void AddToDurationType(DurationType durationType)
        {
            base.AddObject("DurationType", durationType);
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        public void AddToGame(Game game)
        {
            base.AddObject("Game", game);
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry in the schema.
        /// </summary>
        public void AddToGameCapabilityCountry(GameCapabilityCountry gameCapabilityCountry)
        {
            base.AddObject("GameCapabilityCountry", gameCapabilityCountry);
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountryMap in the schema.
        /// </summary>
        public void AddToGameCapabilityCountryMap(GameCapabilityCountryMap gameCapabilityCountryMap)
        {
            base.AddObject("GameCapabilityCountryMap", gameCapabilityCountryMap);
        }
        /// <summary>
        /// There are no comments for GameConsumable in the schema.
        /// </summary>
        public void AddToGameConsumable(GameConsumable gameConsumable)
        {
            base.AddObject("GameConsumable", gameConsumable);
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        public void AddToGameContent(GameContent gameContent)
        {
            base.AddObject("GameContent", gameContent);
        }
        /// <summary>
        /// There are no comments for GameContentAvatarItem in the schema.
        /// </summary>
        public void AddToGameContentAvatarItem(GameContentAvatarItem gameContentAvatarItem)
        {
            base.AddObject("GameContentAvatarItem", gameContentAvatarItem);
        }
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        public void AddToGameContentInstance(GameContentInstance gameContentInstance)
        {
            base.AddObject("GameContentInstance", gameContentInstance);
        }
        /// <summary>
        /// There are no comments for GameContentInstanceEncryptedKey in the schema.
        /// </summary>
        public void AddToGameContentInstanceEncryptedKey(GameContentInstanceEncryptedKey gameContentInstanceEncryptedKey)
        {
            base.AddObject("GameContentInstanceEncryptedKey", gameContentInstanceEncryptedKey);
        }
        /// <summary>
        /// There are no comments for GameContentInstanceFile in the schema.
        /// </summary>
        public void AddToGameContentInstanceFile(GameContentInstanceFile gameContentInstanceFile)
        {
            base.AddObject("GameContentInstanceFile", gameContentInstanceFile);
        }
        /// <summary>
        /// There are no comments for GameLocale in the schema.
        /// </summary>
        public void AddToGameLocale(GameLocale gameLocale)
        {
            base.AddObject("GameLocale", gameLocale);
        }
        /// <summary>
        /// There are no comments for GameRegionMask in the schema.
        /// </summary>
        public void AddToGameRegionMask(GameRegionMask gameRegionMask)
        {
            base.AddObject("GameRegionMask", gameRegionMask);
        }
        /// <summary>
        /// There are no comments for HDTVMode in the schema.
        /// </summary>
        public void AddToHDTVMode(HDTVMode hDTVMode)
        {
            base.AddObject("HDTVMode", hDTVMode);
        }
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        public void AddToImage(Image image)
        {
            base.AddObject("Image", image);
        }
        /// <summary>
        /// There are no comments for ImageFormat in the schema.
        /// </summary>
        public void AddToImageFormat(ImageFormat imageFormat)
        {
            base.AddObject("ImageFormat", imageFormat);
        }
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        public void AddToImageInstance(ImageInstance imageInstance)
        {
            base.AddObject("ImageInstance", imageInstance);
        }
        /// <summary>
        /// There are no comments for ImageSize in the schema.
        /// </summary>
        public void AddToImageSize(ImageSize imageSize)
        {
            base.AddObject("ImageSize", imageSize);
        }
        /// <summary>
        /// There are no comments for LicenseType in the schema.
        /// </summary>
        public void AddToLicenseType(LicenseType licenseType)
        {
            base.AddObject("LicenseType", licenseType);
        }
        /// <summary>
        /// There are no comments for LiveSubscriptionFamily in the schema.
        /// </summary>
        public void AddToLiveSubscriptionFamily(LiveSubscriptionFamily liveSubscriptionFamily)
        {
            base.AddObject("LiveSubscriptionFamily", liveSubscriptionFamily);
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        public void AddToLocale(Locale locale)
        {
            base.AddObject("Locale", locale);
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        public void AddToMedia(Media media)
        {
            base.AddObject("Media", media);
        }
        /// <summary>
        /// There are no comments for MediaCategory in the schema.
        /// </summary>
        public void AddToMediaCategory(MediaCategory mediaCategory)
        {
            base.AddObject("MediaCategory", mediaCategory);
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        public void AddToMediaInstance(MediaInstance mediaInstance)
        {
            base.AddObject("MediaInstance", mediaInstance);
        }
        /// <summary>
        /// There are no comments for MediaInstanceClientType in the schema.
        /// </summary>
        public void AddToMediaInstanceClientType(MediaInstanceClientType mediaInstanceClientType)
        {
            base.AddObject("MediaInstanceClientType", mediaInstanceClientType);
        }
        /// <summary>
        /// There are no comments for MediaLocale in the schema.
        /// </summary>
        public void AddToMediaLocale(MediaLocale mediaLocale)
        {
            base.AddObject("MediaLocale", mediaLocale);
        }
        /// <summary>
        /// There are no comments for MediaLocaleMap in the schema.
        /// </summary>
        public void AddToMediaLocaleMap(MediaLocaleMap mediaLocaleMap)
        {
            base.AddObject("MediaLocaleMap", mediaLocaleMap);
        }
        /// <summary>
        /// There are no comments for MediaRating in the schema.
        /// </summary>
        public void AddToMediaRating(MediaRating mediaRating)
        {
            base.AddObject("MediaRating", mediaRating);
        }
        /// <summary>
        /// There are no comments for MediaRatingDescriptor in the schema.
        /// </summary>
        public void AddToMediaRatingDescriptor(MediaRatingDescriptor mediaRatingDescriptor)
        {
            base.AddObject("MediaRatingDescriptor", mediaRatingDescriptor);
        }
        /// <summary>
        /// There are no comments for MediaRelationship in the schema.
        /// </summary>
        public void AddToMediaRelationship(MediaRelationship mediaRelationship)
        {
            base.AddObject("MediaRelationship", mediaRelationship);
        }
        /// <summary>
        /// There are no comments for MediaRelationshipType in the schema.
        /// </summary>
        public void AddToMediaRelationshipType(MediaRelationshipType mediaRelationshipType)
        {
            base.AddObject("MediaRelationshipType", mediaRelationshipType);
        }
        /// <summary>
        /// There are no comments for MediaRevenueSku in the schema.
        /// </summary>
        public void AddToMediaRevenueSku(MediaRevenueSku mediaRevenueSku)
        {
            base.AddObject("MediaRevenueSku", mediaRevenueSku);
        }
        /// <summary>
        /// There are no comments for MediaType in the schema.
        /// </summary>
        public void AddToMediaType(MediaType mediaType)
        {
            base.AddObject("MediaType", mediaType);
        }
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        public void AddToOffer(Offer offer)
        {
            base.AddObject("Offer", offer);
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        public void AddToOfferInstance(OfferInstance offerInstance)
        {
            base.AddObject("OfferInstance", offerInstance);
        }
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstance in the schema.
        /// </summary>
        public void AddToOfferInstanceGameContentInstance(OfferInstanceGameContentInstance offerInstanceGameContentInstance)
        {
            base.AddObject("OfferInstanceGameContentInstance", offerInstanceGameContentInstance);
        }
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstanceAsset in the schema.
        /// </summary>
        public void AddToOfferInstanceGameContentInstanceAsset(OfferInstanceGameContentInstanceAsset offerInstanceGameContentInstanceAsset)
        {
            base.AddObject("OfferInstanceGameContentInstanceAsset", offerInstanceGameContentInstanceAsset);
        }
        /// <summary>
        /// There are no comments for OfferInstanceMedia in the schema.
        /// </summary>
        public void AddToOfferInstanceMedia(OfferInstanceMedia offerInstanceMedia)
        {
            base.AddObject("OfferInstanceMedia", offerInstanceMedia);
        }
        /// <summary>
        /// There are no comments for OfferInstanceMediaInstance in the schema.
        /// </summary>
        public void AddToOfferInstanceMediaInstance(OfferInstanceMediaInstance offerInstanceMediaInstance)
        {
            base.AddObject("OfferInstanceMediaInstance", offerInstanceMediaInstance);
        }
        /// <summary>
        /// There are no comments for OfferInstanceUserType in the schema.
        /// </summary>
        public void AddToOfferInstanceUserType(OfferInstanceUserType offerInstanceUserType)
        {
            base.AddObject("OfferInstanceUserType", offerInstanceUserType);
        }
        /// <summary>
        /// There are no comments for OfferRelationShip in the schema.
        /// </summary>
        public void AddToOfferRelationShip(OfferRelationShip offerRelationShip)
        {
            base.AddObject("OfferRelationShip", offerRelationShip);
        }
        /// <summary>
        /// There are no comments for OfferRelationShipType in the schema.
        /// </summary>
        public void AddToOfferRelationShipType(OfferRelationShipType offerRelationShipType)
        {
            base.AddObject("OfferRelationShipType", offerRelationShipType);
        }
        /// <summary>
        /// There are no comments for OfferStore in the schema.
        /// </summary>
        public void AddToOfferStore(OfferStore offerStore)
        {
            base.AddObject("OfferStore", offerStore);
        }
        /// <summary>
        /// There are no comments for OfferType in the schema.
        /// </summary>
        public void AddToOfferType(OfferType offerType)
        {
            base.AddObject("OfferType", offerType);
        }
        /// <summary>
        /// There are no comments for PackageType in the schema.
        /// </summary>
        public void AddToPackageType(PackageType packageType)
        {
            base.AddObject("PackageType", packageType);
        }
        /// <summary>
        /// There are no comments for PaymentType in the schema.
        /// </summary>
        public void AddToPaymentType(PaymentType paymentType)
        {
            base.AddObject("PaymentType", paymentType);
        }
        /// <summary>
        /// There are no comments for PointsBundle in the schema.
        /// </summary>
        public void AddToPointsBundle(PointsBundle pointsBundle)
        {
            base.AddObject("PointsBundle", pointsBundle);
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        public void AddToPreviewMediaInstance(PreviewMediaInstance previewMediaInstance)
        {
            base.AddObject("PreviewMediaInstance", previewMediaInstance);
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstanceType in the schema.
        /// </summary>
        public void AddToPreviewMediaInstanceType(PreviewMediaInstanceType previewMediaInstanceType)
        {
            base.AddObject("PreviewMediaInstanceType", previewMediaInstanceType);
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        public void AddToPricingRule(PricingRule pricingRule)
        {
            base.AddObject("PricingRule", pricingRule);
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        public void AddToProvider(Provider provider)
        {
            base.AddObject("Provider", provider);
        }
        /// <summary>
        /// There are no comments for RatingDescriptor in the schema.
        /// </summary>
        public void AddToRatingDescriptor(RatingDescriptor ratingDescriptor)
        {
            base.AddObject("RatingDescriptor", ratingDescriptor);
        }
        /// <summary>
        /// There are no comments for RatingValue in the schema.
        /// </summary>
        public void AddToRatingValue(RatingValue ratingValue)
        {
            base.AddObject("RatingValue", ratingValue);
        }
        /// <summary>
        /// There are no comments for SellType in the schema.
        /// </summary>
        public void AddToSellType(SellType sellType)
        {
            base.AddObject("SellType", sellType);
        }
        /// <summary>
        /// There are no comments for Service in the schema.
        /// </summary>
        public void AddToService(Service service)
        {
            base.AddObject("Service", service);
        }
        /// <summary>
        /// There are no comments for StorageUnit in the schema.
        /// </summary>
        public void AddToStorageUnit(StorageUnit storageUnit)
        {
            base.AddObject("StorageUnit", storageUnit);
        }
        /// <summary>
        /// There are no comments for Store in the schema.
        /// </summary>
        public void AddToStore(Store store)
        {
            base.AddObject("Store", store);
        }
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        public void AddToSubscription(Subscription subscription)
        {
            base.AddObject("Subscription", subscription);
        }
        /// <summary>
        /// There are no comments for SubscriptionBillingInformation in the schema.
        /// </summary>
        public void AddToSubscriptionBillingInformation(SubscriptionBillingInformation subscriptionBillingInformation)
        {
            base.AddObject("SubscriptionBillingInformation", subscriptionBillingInformation);
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        public void AddToSubscriptionFamily(SubscriptionFamily subscriptionFamily)
        {
            base.AddObject("SubscriptionFamily", subscriptionFamily);
        }
        /// <summary>
        /// There are no comments for SubscriptionFamilyService in the schema.
        /// </summary>
        public void AddToSubscriptionFamilyService(SubscriptionFamilyService subscriptionFamilyService)
        {
            base.AddObject("SubscriptionFamilyService", subscriptionFamilyService);
        }
        /// <summary>
        /// There are no comments for Tier in the schema.
        /// </summary>
        public void AddToTier(Tier tier)
        {
            base.AddObject("Tier", tier);
        }
        /// <summary>
        /// There are no comments for UserType in the schema.
        /// </summary>
        public void AddToUserType(UserType userType)
        {
            base.AddObject("UserType", userType);
        }
        /// <summary>
        /// There are no comments for VideoDefinition in the schema.
        /// </summary>
        public void AddToVideoDefinition(VideoDefinition videoDefinition)
        {
            base.AddObject("VideoDefinition", videoDefinition);
        }
        /// <summary>
        /// There are no comments for VideoEncoding in the schema.
        /// </summary>
        public void AddToVideoEncoding(VideoEncoding videoEncoding)
        {
            base.AddObject("VideoEncoding", videoEncoding);
        }
        /// <summary>
        /// There are no comments for VideoFile in the schema.
        /// </summary>
        public void AddToVideoFile(VideoFile videoFile)
        {
            base.AddObject("VideoFile", videoFile);
        }
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        public void AddToVideoInstance(VideoInstance videoInstance)
        {
            base.AddObject("VideoInstance", videoInstance);
        }
        /// <summary>
        /// There are no comments for VisibilityLevel in the schema.
        /// </summary>
        public void AddToVisibilityLevel(VisibilityLevel visibilityLevel)
        {
            base.AddObject("VisibilityLevel", visibilityLevel);
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        public void AddToVisibilityStatus(VisibilityStatus visibilityStatus)
        {
            base.AddObject("VisibilityStatus", visibilityStatus);
        }
        /// <summary>
        /// There are no comments for LegacyOfferMapping in the schema.
        /// </summary>
        public void AddToLegacyOfferMapping(LegacyOfferMapping legacyOfferMapping)
        {
            base.AddObject("LegacyOfferMapping", legacyOfferMapping);
        }
        /// <summary>
        /// There are no comments for App in the schema.
        /// </summary>
        public void AddToApp(App app)
        {
            base.AddObject("App", app);
        }
        /// <summary>
        /// There are no comments for AppAppType in the schema.
        /// </summary>
        public void AddToAppAppType(AppAppType appAppType)
        {
            base.AddObject("AppAppType", appAppType);
        }
        /// <summary>
        /// There are no comments for AppInstance in the schema.
        /// </summary>
        public void AddToAppInstance(AppInstance appInstance)
        {
            base.AddObject("AppInstance", appInstance);
        }
        /// <summary>
        /// There are no comments for AppInstanceEncryptedKey in the schema.
        /// </summary>
        public void AddToAppInstanceEncryptedKey(AppInstanceEncryptedKey appInstanceEncryptedKey)
        {
            base.AddObject("AppInstanceEncryptedKey", appInstanceEncryptedKey);
        }
        /// <summary>
        /// There are no comments for AppInstanceFile in the schema.
        /// </summary>
        public void AddToAppInstanceFile(AppInstanceFile appInstanceFile)
        {
            base.AddObject("AppInstanceFile", appInstanceFile);
        }
        /// <summary>
        /// There are no comments for AppLocale in the schema.
        /// </summary>
        public void AddToAppLocale(AppLocale appLocale)
        {
            base.AddObject("AppLocale", appLocale);
        }
        /// <summary>
        /// There are no comments for AppType in the schema.
        /// </summary>
        public void AddToAppType(AppType appType)
        {
            base.AddObject("AppType", appType);
        }
        /// <summary>
        /// There are no comments for CapabilityType in the schema.
        /// </summary>
        public void AddToCapabilityType(CapabilityType capabilityType)
        {
            base.AddObject("CapabilityType", capabilityType);
        }
        /// <summary>
        /// There are no comments for DataType in the schema.
        /// </summary>
        public void AddToDataType(DataType dataType)
        {
            base.AddObject("DataType", dataType);
        }
        /// <summary>
        /// There are no comments for MediaCapabilityCountry in the schema.
        /// </summary>
        public void AddToMediaCapabilityCountry(MediaCapabilityCountry mediaCapabilityCountry)
        {
            base.AddObject("MediaCapabilityCountry", mediaCapabilityCountry);
        }
        /// <summary>
        /// There are no comments for MediaLocaleUnmapped in the schema.
        /// </summary>
        public void AddToMediaLocaleUnmapped(MediaLocaleUnmapped mediaLocaleUnmapped)
        {
            base.AddObject("MediaLocaleUnmapped", mediaLocaleUnmapped);
        }
        /// <summary>
        /// There are no comments for UnitType in the schema.
        /// </summary>
        public void AddToUnitType(UnitType unitType)
        {
            base.AddObject("UnitType", unitType);
        }
        /// <summary>
        /// There are no comments for MediaTerm in the schema.
        /// </summary>
        public void AddToMediaTerm(MediaTerm mediaTerm)
        {
            base.AddObject("MediaTerm", mediaTerm);
        }
        /// <summary>
        /// There are no comments for TermType in the schema.
        /// </summary>
        public void AddToTermType(TermType termType)
        {
            base.AddObject("TermType", termType);
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.AudioEncoding in the schema.
    /// </summary>
    /// <KeyProperties>
    /// audioEncodingId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="AudioEncoding")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class AudioEncoding : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new AudioEncoding object.
        /// </summary>
        /// <param name="audioEncodingId">Initial value of audioEncodingId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static AudioEncoding CreateAudioEncoding(int audioEncodingId, string name, global::System.DateTime modifiedDate)
        {
            AudioEncoding audioEncoding = new AudioEncoding();
            audioEncoding.audioEncodingId = audioEncodingId;
            audioEncoding.name = name;
            audioEncoding.modifiedDate = modifiedDate;
            return audioEncoding;
        }
        /// <summary>
        /// There are no comments for Property audioEncodingId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int audioEncodingId
        {
            get
            {
                return this._audioEncodingId;
            }
            set
            {
                this.OnaudioEncodingIdChanging(value);
                this.ReportPropertyChanging("audioEncodingId");
                this._audioEncodingId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("audioEncodingId");
                this.OnaudioEncodingIdChanged();
            }
        }
        private int _audioEncodingId;
        partial void OnaudioEncodingIdChanging(int value);
        partial void OnaudioEncodingIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_VideoInstance_AudioEncoding", "VideoInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<VideoInstance> VideoInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_AudioEncoding", "VideoInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_AudioEncoding", "VideoInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.AvatarBodyType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// avatarBodyTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="AvatarBodyType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class AvatarBodyType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new AvatarBodyType object.
        /// </summary>
        /// <param name="avatarBodyTypeId">Initial value of avatarBodyTypeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static AvatarBodyType CreateAvatarBodyType(int avatarBodyTypeId, string internalName, global::System.DateTime modifiedDate)
        {
            AvatarBodyType avatarBodyType = new AvatarBodyType();
            avatarBodyType.avatarBodyTypeId = avatarBodyTypeId;
            avatarBodyType.internalName = internalName;
            avatarBodyType.modifiedDate = modifiedDate;
            return avatarBodyType;
        }
        /// <summary>
        /// There are no comments for Property avatarBodyTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int avatarBodyTypeId
        {
            get
            {
                return this._avatarBodyTypeId;
            }
            set
            {
                this.OnavatarBodyTypeIdChanging(value);
                this.ReportPropertyChanging("avatarBodyTypeId");
                this._avatarBodyTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("avatarBodyTypeId");
                this.OnavatarBodyTypeIdChanged();
            }
        }
        private int _avatarBodyTypeId;
        partial void OnavatarBodyTypeIdChanging(int value);
        partial void OnavatarBodyTypeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentAvatarItem in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentAvatarItem_AvatarBodyType", "GameContentAvatarItem")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameContentAvatarItem> GameContentAvatarItem
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameContentAvatarItem>("RawCatalogDBModel.FK_GameContentAvatarItem_AvatarBodyType", "GameContentAvatarItem");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameContentAvatarItem>("RawCatalogDBModel.FK_GameContentAvatarItem_AvatarBodyType", "GameContentAvatarItem", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.BillingFrequency in the schema.
    /// </summary>
    /// <KeyProperties>
    /// billingFrequencyId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="BillingFrequency")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class BillingFrequency : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new BillingFrequency object.
        /// </summary>
        /// <param name="billingFrequencyId">Initial value of billingFrequencyId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static BillingFrequency CreateBillingFrequency(int billingFrequencyId, string internalName, global::System.DateTime modifiedDate)
        {
            BillingFrequency billingFrequency = new BillingFrequency();
            billingFrequency.billingFrequencyId = billingFrequencyId;
            billingFrequency.internalName = internalName;
            billingFrequency.modifiedDate = modifiedDate;
            return billingFrequency;
        }
        /// <summary>
        /// There are no comments for Property billingFrequencyId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int billingFrequencyId
        {
            get
            {
                return this._billingFrequencyId;
            }
            set
            {
                this.OnbillingFrequencyIdChanging(value);
                this.ReportPropertyChanging("billingFrequencyId");
                this._billingFrequencyId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("billingFrequencyId");
                this.OnbillingFrequencyIdChanged();
            }
        }
        private int _billingFrequencyId;
        partial void OnbillingFrequencyIdChanging(int value);
        partial void OnbillingFrequencyIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_BillingFrequency", "Subscription")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Subscription> Subscription
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Subscription>("RawCatalogDBModel.FK_Subscription_BillingFrequency", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Subscription>("RawCatalogDBModel.FK_Subscription_BillingFrequency", "Subscription", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Category in the schema.
    /// </summary>
    /// <KeyProperties>
    /// categoryId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Category")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Category : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Category object.
        /// </summary>
        /// <param name="categoryId">Initial value of categoryId.</param>
        /// <param name="categorySystemId">Initial value of categorySystemId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Category CreateCategory(int categoryId, int categorySystemId, global::System.DateTime modifiedDate)
        {
            Category category = new Category();
            category.categoryId = categoryId;
            category.categorySystemId = categorySystemId;
            category.modifiedDate = modifiedDate;
            return category;
        }
        /// <summary>
        /// There are no comments for Property categoryId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int categoryId
        {
            get
            {
                return this._categoryId;
            }
            set
            {
                this.OncategoryIdChanging(value);
                this.ReportPropertyChanging("categoryId");
                this._categoryId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("categoryId");
                this.OncategoryIdChanged();
            }
        }
        private int _categoryId;
        partial void OncategoryIdChanging(int value);
        partial void OncategoryIdChanged();
        /// <summary>
        /// There are no comments for Property categorySystemId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int categorySystemId
        {
            get
            {
                return this._categorySystemId;
            }
            set
            {
                this.OncategorySystemIdChanging(value);
                this.ReportPropertyChanging("categorySystemId");
                this._categorySystemId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("categorySystemId");
                this.OncategorySystemIdChanged();
            }
        }
        private int _categorySystemId;
        partial void OncategorySystemIdChanging(int value);
        partial void OncategorySystemIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Category1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Category_Category", "Category1")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Category> Category1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Category>("RawCatalogDBModel.FK_Category_Category", "Category1");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Category>("RawCatalogDBModel.FK_Category_Category", "Category1", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Category2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Category_Category", "Category")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Category Category2
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RawCatalogDBModel.FK_Category_Category", "Category").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RawCatalogDBModel.FK_Category_Category", "Category").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Category2 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Category> Category2Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RawCatalogDBModel.FK_Category_Category", "Category");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Category>("RawCatalogDBModel.FK_Category_Category", "Category", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaCategory in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_VideoCategory_Category", "MediaCategory")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaCategory> MediaCategory
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaCategory>("RawCatalogDBModel.FK_VideoCategory_Category", "MediaCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaCategory>("RawCatalogDBModel.FK_VideoCategory_Category", "MediaCategory", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.ClientType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// clientTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="ClientType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class ClientType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new ClientType object.
        /// </summary>
        /// <param name="clientTypeId">Initial value of clientTypeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static ClientType CreateClientType(int clientTypeId, string name, global::System.DateTime modifiedDate)
        {
            ClientType clientType = new ClientType();
            clientType.clientTypeId = clientTypeId;
            clientType.name = name;
            clientType.modifiedDate = modifiedDate;
            return clientType;
        }
        /// <summary>
        /// There are no comments for Property clientTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int clientTypeId
        {
            get
            {
                return this._clientTypeId;
            }
            set
            {
                this.OnclientTypeIdChanging(value);
                this.ReportPropertyChanging("clientTypeId");
                this._clientTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("clientTypeId");
                this.OnclientTypeIdChanged();
            }
        }
        private int _clientTypeId;
        partial void OnclientTypeIdChanging(int value);
        partial void OnclientTypeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for MediaInstanceClientType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaInstanceClientType_ClientType", "MediaInstanceClientType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaInstanceClientType> MediaInstanceClientType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaInstanceClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_ClientType", "MediaInstanceClientType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaInstanceClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_ClientType", "MediaInstanceClientType", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Country in the schema.
    /// </summary>
    /// <KeyProperties>
    /// countryCode
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Country")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Country : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Country object.
        /// </summary>
        /// <param name="countryCode">Initial value of countryCode.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Country CreateCountry(string countryCode, string name, global::System.DateTime modifiedDate)
        {
            Country country = new Country();
            country.countryCode = countryCode;
            country.name = name;
            country.modifiedDate = modifiedDate;
            return country;
        }
        /// <summary>
        /// There are no comments for Property countryCode in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string countryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                this.OncountryCodeChanging(value);
                this.ReportPropertyChanging("countryCode");
                this._countryCode = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("countryCode");
                this.OncountryCodeChanged();
            }
        }
        private string _countryCode;
        partial void OncountryCodeChanging(string value);
        partial void OncountryCodeChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameCapabilityCountry in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_Country", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_Country", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_Country", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountryMap in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_Country", "GameCapabilityCountryMap")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountryMap> GameCapabilityCountryMap
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountryMap>("RawCatalogDBModel.FK_GameCapabilityCountryMap_Country", "GameCapabilityCountryMap");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountryMap>("RawCatalogDBModel.FK_GameCapabilityCountryMap_Country", "GameCapabilityCountryMap", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountryMap1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_CountryMap", "GameCapabilityCountryMap")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountryMap> GameCapabilityCountryMap1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountryMap>("RawCatalogDBModel.FK_GameCapabilityCountryMap_CountryMap", "GameCapabilityCountryMap");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountryMap>("RawCatalogDBModel.FK_GameCapabilityCountryMap_CountryMap", "GameCapabilityCountryMap", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Locale_Country", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Locale> Locale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Locale>("RawCatalogDBModel.FK_Locale_Country", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Locale>("RawCatalogDBModel.FK_Locale_Country", "Locale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_Country", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstance> OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_Country", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_Country", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_Country", "PreviewMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PreviewMediaInstance> PreviewMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_Country", "PreviewMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_Country", "PreviewMediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_Country", "PricingRule")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PricingRule> PricingRule
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_Country", "PricingRule");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_Country", "PricingRule", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaCapabilityCountry in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaCapabilityCountry_Country", "MediaCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaCapabilityCountry> MediaCapabilityCountry
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaCapabilityCountry>("RawCatalogDBModel.FK_MediaCapabilityCountry_Country", "MediaCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaCapabilityCountry>("RawCatalogDBModel.FK_MediaCapabilityCountry_Country", "MediaCapabilityCountry", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Currency in the schema.
    /// </summary>
    /// <KeyProperties>
    /// currencyCode
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Currency")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Currency : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Currency object.
        /// </summary>
        /// <param name="currencyCode">Initial value of currencyCode.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Currency CreateCurrency(string currencyCode, string name, global::System.DateTime modifiedDate)
        {
            Currency currency = new Currency();
            currency.currencyCode = currencyCode;
            currency.name = name;
            currency.modifiedDate = modifiedDate;
            return currency;
        }
        /// <summary>
        /// There are no comments for Property currencyCode in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string currencyCode
        {
            get
            {
                return this._currencyCode;
            }
            set
            {
                this.OncurrencyCodeChanging(value);
                this.ReportPropertyChanging("currencyCode");
                this._currencyCode = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("currencyCode");
                this.OncurrencyCodeChanged();
            }
        }
        private string _currencyCode;
        partial void OncurrencyCodeChanging(string value);
        partial void OncurrencyCodeChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_PriceCurrencyCode", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstance> OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_PriceCurrencyCode", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_PriceCurrencyCode", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_ReportingRetailValueCurrencyCode", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstance> OfferInstance1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_ReportingRetailValueCurrencyCode", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_ReportingRetailValueCurrencyCode", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_RetailCurrency", "PricingRule")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PricingRule> PricingRule
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_RetailCurrency", "PricingRule");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_RetailCurrency", "PricingRule", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PricingRule1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_WholesaleCurrency", "PricingRule")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PricingRule> PricingRule1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_WholesaleCurrency", "PricingRule");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_WholesaleCurrency", "PricingRule", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.DRMLicenseIssuer in the schema.
    /// </summary>
    /// <KeyProperties>
    /// drmLicenseIssuerId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="DRMLicenseIssuer")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class DRMLicenseIssuer : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new DRMLicenseIssuer object.
        /// </summary>
        /// <param name="drmLicenseIssuerId">Initial value of drmLicenseIssuerId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static DRMLicenseIssuer CreateDRMLicenseIssuer(int drmLicenseIssuerId, global::System.DateTime modifiedDate)
        {
            DRMLicenseIssuer dRMLicenseIssuer = new DRMLicenseIssuer();
            dRMLicenseIssuer.drmLicenseIssuerId = drmLicenseIssuerId;
            dRMLicenseIssuer.modifiedDate = modifiedDate;
            return dRMLicenseIssuer;
        }
        /// <summary>
        /// There are no comments for Property drmLicenseIssuerId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int drmLicenseIssuerId
        {
            get
            {
                return this._drmLicenseIssuerId;
            }
            set
            {
                this.OndrmLicenseIssuerIdChanging(value);
                this.ReportPropertyChanging("drmLicenseIssuerId");
                this._drmLicenseIssuerId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("drmLicenseIssuerId");
                this.OndrmLicenseIssuerIdChanged();
            }
        }
        private int _drmLicenseIssuerId;
        partial void OndrmLicenseIssuerIdChanging(int value);
        partial void OndrmLicenseIssuerIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_DRMLicenseIssuer", "PreviewMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PreviewMediaInstance> PreviewMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_DRMLicenseIssuer", "PreviewMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_DRMLicenseIssuer", "PreviewMediaInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.DurationType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// durationTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="DurationType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class DurationType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new DurationType object.
        /// </summary>
        /// <param name="durationTypeId">Initial value of durationTypeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static DurationType CreateDurationType(int durationTypeId, string internalName, global::System.DateTime modifiedDate)
        {
            DurationType durationType = new DurationType();
            durationType.durationTypeId = durationTypeId;
            durationType.internalName = internalName;
            durationType.modifiedDate = modifiedDate;
            return durationType;
        }
        /// <summary>
        /// There are no comments for Property durationTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int durationTypeId
        {
            get
            {
                return this._durationTypeId;
            }
            set
            {
                this.OndurationTypeIdChanging(value);
                this.ReportPropertyChanging("durationTypeId");
                this._durationTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("durationTypeId");
                this.OndurationTypeIdChanged();
            }
        }
        private int _durationTypeId;
        partial void OndurationTypeIdChanging(int value);
        partial void OndurationTypeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "C_FK_Subscription_DurationType", "Subscription")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Subscription> Subscription
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Subscription>("RawCatalogDBModel.C_FK_Subscription_DurationType", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Subscription>("RawCatalogDBModel.C_FK_Subscription_DurationType", "Subscription", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Game in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameMediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Game")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Game : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Game object.
        /// </summary>
        /// <param name="gameMediaId">Initial value of gameMediaId.</param>
        /// <param name="liveTitleId">Initial value of liveTitleId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Game CreateGame(global::System.Guid gameMediaId, int liveTitleId, global::System.DateTime modifiedDate)
        {
            Game game = new Game();
            game.gameMediaId = gameMediaId;
            game.liveTitleId = liveTitleId;
            game.modifiedDate = modifiedDate;
            return game;
        }
        /// <summary>
        /// There are no comments for Property gameMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameMediaId
        {
            get
            {
                return this._gameMediaId;
            }
            set
            {
                this.OngameMediaIdChanging(value);
                this.ReportPropertyChanging("gameMediaId");
                this._gameMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameMediaId");
                this.OngameMediaIdChanged();
            }
        }
        private global::System.Guid _gameMediaId;
        partial void OngameMediaIdChanging(global::System.Guid value);
        partial void OngameMediaIdChanged();
        /// <summary>
        /// There are no comments for Property liveTitleId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int liveTitleId
        {
            get
            {
                return this._liveTitleId;
            }
            set
            {
                this.OnliveTitleIdChanging(value);
                this.ReportPropertyChanging("liveTitleId");
                this._liveTitleId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("liveTitleId");
                this.OnliveTitleIdChanged();
            }
        }
        private int _liveTitleId;
        partial void OnliveTitleIdChanging(int value);
        partial void OnliveTitleIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Game_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Game_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Game_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Game_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_Game_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_GameMediaId", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_GameMediaId", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_GameMediaId", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountryMap in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_GameMediaId", "GameCapabilityCountryMap")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountryMap> GameCapabilityCountryMap
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountryMap>("RawCatalogDBModel.FK_GameCapabilityCountryMap_GameMediaId", "GameCapabilityCountryMap");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountryMap>("RawCatalogDBModel.FK_GameCapabilityCountryMap_GameMediaId", "GameCapabilityCountryMap", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameConsumable in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameConsumable_Game", "GameConsumable")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameConsumable> GameConsumable
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameConsumable>("RawCatalogDBModel.FK_GameConsumable_Game", "GameConsumable");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameConsumable>("RawCatalogDBModel.FK_GameConsumable_Game", "GameConsumable", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContent_Game", "GameContent")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameContent> GameContent
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameContent>("RawCatalogDBModel.FK_GameContent_Game", "GameContent");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameContent>("RawCatalogDBModel.FK_GameContent_Game", "GameContent", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameLocale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameLocale_Game", "GameLocale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameLocale> GameLocale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameLocale>("RawCatalogDBModel.FK_GameLocale_Game", "GameLocale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameLocale>("RawCatalogDBModel.FK_GameLocale_Game", "GameLocale", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameCapabilityCountry in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameMediaId
    /// countryCode
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameCapabilityCountry")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameCapabilityCountry : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameCapabilityCountry object.
        /// </summary>
        /// <param name="gameMediaId">Initial value of gameMediaId.</param>
        /// <param name="countryCode">Initial value of countryCode.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameCapabilityCountry CreateGameCapabilityCountry(global::System.Guid gameMediaId, string countryCode, global::System.DateTime modifiedDate)
        {
            GameCapabilityCountry gameCapabilityCountry = new GameCapabilityCountry();
            gameCapabilityCountry.gameMediaId = gameMediaId;
            gameCapabilityCountry.countryCode = countryCode;
            gameCapabilityCountry.modifiedDate = modifiedDate;
            return gameCapabilityCountry;
        }
        /// <summary>
        /// There are no comments for Property gameMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameMediaId
        {
            get
            {
                return this._gameMediaId;
            }
            set
            {
                this.OngameMediaIdChanging(value);
                this.ReportPropertyChanging("gameMediaId");
                this._gameMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameMediaId");
                this.OngameMediaIdChanged();
            }
        }
        private global::System.Guid _gameMediaId;
        partial void OngameMediaIdChanging(global::System.Guid value);
        partial void OngameMediaIdChanged();
        /// <summary>
        /// There are no comments for Property countryCode in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string countryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                this.OncountryCodeChanging(value);
                this.ReportPropertyChanging("countryCode");
                this._countryCode = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("countryCode");
                this.OncountryCodeChanged();
            }
        }
        private string _countryCode;
        partial void OncountryCodeChanging(string value);
        partial void OncountryCodeChanged();
        /// <summary>
        /// There are no comments for Property offlinePlayersMin in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlinePlayersMin
        {
            get
            {
                return this._offlinePlayersMin;
            }
            set
            {
                this.OnofflinePlayersMinChanging(value);
                this.ReportPropertyChanging("offlinePlayersMin");
                this._offlinePlayersMin = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePlayersMin");
                this.OnofflinePlayersMinChanged();
            }
        }
        private global::System.Nullable<int> _offlinePlayersMin;
        partial void OnofflinePlayersMinChanging(global::System.Nullable<int> value);
        partial void OnofflinePlayersMinChanged();
        /// <summary>
        /// There are no comments for Property offlinePlayersMax in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlinePlayersMax
        {
            get
            {
                return this._offlinePlayersMax;
            }
            set
            {
                this.OnofflinePlayersMaxChanging(value);
                this.ReportPropertyChanging("offlinePlayersMax");
                this._offlinePlayersMax = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePlayersMax");
                this.OnofflinePlayersMaxChanged();
            }
        }
        private global::System.Nullable<int> _offlinePlayersMax;
        partial void OnofflinePlayersMaxChanging(global::System.Nullable<int> value);
        partial void OnofflinePlayersMaxChanged();
        /// <summary>
        /// There are no comments for Property offlineCoopPlayersMin in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlineCoopPlayersMin
        {
            get
            {
                return this._offlineCoopPlayersMin;
            }
            set
            {
                this.OnofflineCoopPlayersMinChanging(value);
                this.ReportPropertyChanging("offlineCoopPlayersMin");
                this._offlineCoopPlayersMin = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineCoopPlayersMin");
                this.OnofflineCoopPlayersMinChanged();
            }
        }
        private global::System.Nullable<int> _offlineCoopPlayersMin;
        partial void OnofflineCoopPlayersMinChanging(global::System.Nullable<int> value);
        partial void OnofflineCoopPlayersMinChanged();
        /// <summary>
        /// There are no comments for Property offlineCoopPlayersMax in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlineCoopPlayersMax
        {
            get
            {
                return this._offlineCoopPlayersMax;
            }
            set
            {
                this.OnofflineCoopPlayersMaxChanging(value);
                this.ReportPropertyChanging("offlineCoopPlayersMax");
                this._offlineCoopPlayersMax = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineCoopPlayersMax");
                this.OnofflineCoopPlayersMaxChanged();
            }
        }
        private global::System.Nullable<int> _offlineCoopPlayersMax;
        partial void OnofflineCoopPlayersMaxChanging(global::System.Nullable<int> value);
        partial void OnofflineCoopPlayersMaxChanged();
        /// <summary>
        /// There are no comments for Property offlineCoopHardDriveRequired in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlineCoopHardDriveRequired
        {
            get
            {
                return this._offlineCoopHardDriveRequired;
            }
            set
            {
                this.OnofflineCoopHardDriveRequiredChanging(value);
                this.ReportPropertyChanging("offlineCoopHardDriveRequired");
                this._offlineCoopHardDriveRequired = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineCoopHardDriveRequired");
                this.OnofflineCoopHardDriveRequiredChanged();
            }
        }
        private global::System.Nullable<bool> _offlineCoopHardDriveRequired;
        partial void OnofflineCoopHardDriveRequiredChanging(global::System.Nullable<bool> value);
        partial void OnofflineCoopHardDriveRequiredChanged();
        /// <summary>
        /// There are no comments for Property offlineCoopHardDriveStorageAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlineCoopHardDriveStorageAmount
        {
            get
            {
                return this._offlineCoopHardDriveStorageAmount;
            }
            set
            {
                this.OnofflineCoopHardDriveStorageAmountChanging(value);
                this.ReportPropertyChanging("offlineCoopHardDriveStorageAmount");
                this._offlineCoopHardDriveStorageAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineCoopHardDriveStorageAmount");
                this.OnofflineCoopHardDriveStorageAmountChanged();
            }
        }
        private global::System.Nullable<int> _offlineCoopHardDriveStorageAmount;
        partial void OnofflineCoopHardDriveStorageAmountChanging(global::System.Nullable<int> value);
        partial void OnofflineCoopHardDriveStorageAmountChanged();
        /// <summary>
        /// There are no comments for Property offlineSaveStorageAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlineSaveStorageAmount
        {
            get
            {
                return this._offlineSaveStorageAmount;
            }
            set
            {
                this.OnofflineSaveStorageAmountChanging(value);
                this.ReportPropertyChanging("offlineSaveStorageAmount");
                this._offlineSaveStorageAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineSaveStorageAmount");
                this.OnofflineSaveStorageAmountChanged();
            }
        }
        private global::System.Nullable<int> _offlineSaveStorageAmount;
        partial void OnofflineSaveStorageAmountChanging(global::System.Nullable<int> value);
        partial void OnofflineSaveStorageAmountChanged();
        /// <summary>
        /// There are no comments for Property offlineSystemLinkMin in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlineSystemLinkMin
        {
            get
            {
                return this._offlineSystemLinkMin;
            }
            set
            {
                this.OnofflineSystemLinkMinChanging(value);
                this.ReportPropertyChanging("offlineSystemLinkMin");
                this._offlineSystemLinkMin = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineSystemLinkMin");
                this.OnofflineSystemLinkMinChanged();
            }
        }
        private global::System.Nullable<int> _offlineSystemLinkMin;
        partial void OnofflineSystemLinkMinChanging(global::System.Nullable<int> value);
        partial void OnofflineSystemLinkMinChanged();
        /// <summary>
        /// There are no comments for Property offlineSystemLinkMax in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> offlineSystemLinkMax
        {
            get
            {
                return this._offlineSystemLinkMax;
            }
            set
            {
                this.OnofflineSystemLinkMaxChanging(value);
                this.ReportPropertyChanging("offlineSystemLinkMax");
                this._offlineSystemLinkMax = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineSystemLinkMax");
                this.OnofflineSystemLinkMaxChanged();
            }
        }
        private global::System.Nullable<int> _offlineSystemLinkMax;
        partial void OnofflineSystemLinkMaxChanging(global::System.Nullable<int> value);
        partial void OnofflineSystemLinkMaxChanged();
        /// <summary>
        /// There are no comments for Property offlineVoiceCommands in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlineVoiceCommands
        {
            get
            {
                return this._offlineVoiceCommands;
            }
            set
            {
                this.OnofflineVoiceCommandsChanging(value);
                this.ReportPropertyChanging("offlineVoiceCommands");
                this._offlineVoiceCommands = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineVoiceCommands");
                this.OnofflineVoiceCommandsChanged();
            }
        }
        private global::System.Nullable<bool> _offlineVoiceCommands;
        partial void OnofflineVoiceCommandsChanging(global::System.Nullable<bool> value);
        partial void OnofflineVoiceCommandsChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralWheel in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralWheel
        {
            get
            {
                return this._offlinePeripheralWheel;
            }
            set
            {
                this.OnofflinePeripheralWheelChanging(value);
                this.ReportPropertyChanging("offlinePeripheralWheel");
                this._offlinePeripheralWheel = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralWheel");
                this.OnofflinePeripheralWheelChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralWheel;
        partial void OnofflinePeripheralWheelChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralWheelChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralGamePad in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralGamePad
        {
            get
            {
                return this._offlinePeripheralGamePad;
            }
            set
            {
                this.OnofflinePeripheralGamePadChanging(value);
                this.ReportPropertyChanging("offlinePeripheralGamePad");
                this._offlinePeripheralGamePad = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralGamePad");
                this.OnofflinePeripheralGamePadChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralGamePad;
        partial void OnofflinePeripheralGamePadChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralGamePadChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralArcadeStick in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralArcadeStick
        {
            get
            {
                return this._offlinePeripheralArcadeStick;
            }
            set
            {
                this.OnofflinePeripheralArcadeStickChanging(value);
                this.ReportPropertyChanging("offlinePeripheralArcadeStick");
                this._offlinePeripheralArcadeStick = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralArcadeStick");
                this.OnofflinePeripheralArcadeStickChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralArcadeStick;
        partial void OnofflinePeripheralArcadeStickChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralArcadeStickChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralFlightStick in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralFlightStick
        {
            get
            {
                return this._offlinePeripheralFlightStick;
            }
            set
            {
                this.OnofflinePeripheralFlightStickChanging(value);
                this.ReportPropertyChanging("offlinePeripheralFlightStick");
                this._offlinePeripheralFlightStick = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralFlightStick");
                this.OnofflinePeripheralFlightStickChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralFlightStick;
        partial void OnofflinePeripheralFlightStickChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralFlightStickChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralDancePad in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralDancePad
        {
            get
            {
                return this._offlinePeripheralDancePad;
            }
            set
            {
                this.OnofflinePeripheralDancePadChanging(value);
                this.ReportPropertyChanging("offlinePeripheralDancePad");
                this._offlinePeripheralDancePad = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralDancePad");
                this.OnofflinePeripheralDancePadChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralDancePad;
        partial void OnofflinePeripheralDancePadChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralDancePadChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralForceFeedbackWheel in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralForceFeedbackWheel
        {
            get
            {
                return this._offlinePeripheralForceFeedbackWheel;
            }
            set
            {
                this.OnofflinePeripheralForceFeedbackWheelChanging(value);
                this.ReportPropertyChanging("offlinePeripheralForceFeedbackWheel");
                this._offlinePeripheralForceFeedbackWheel = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralForceFeedbackWheel");
                this.OnofflinePeripheralForceFeedbackWheelChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralForceFeedbackWheel;
        partial void OnofflinePeripheralForceFeedbackWheelChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralForceFeedbackWheelChanged();
        /// <summary>
        /// There are no comments for Property offlinePeripheralCamera in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlinePeripheralCamera
        {
            get
            {
                return this._offlinePeripheralCamera;
            }
            set
            {
                this.OnofflinePeripheralCameraChanging(value);
                this.ReportPropertyChanging("offlinePeripheralCamera");
                this._offlinePeripheralCamera = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlinePeripheralCamera");
                this.OnofflinePeripheralCameraChanged();
            }
        }
        private global::System.Nullable<bool> _offlinePeripheralCamera;
        partial void OnofflinePeripheralCameraChanging(global::System.Nullable<bool> value);
        partial void OnofflinePeripheralCameraChanged();
        /// <summary>
        /// There are no comments for Property offlineCustomSoundtracks in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlineCustomSoundtracks
        {
            get
            {
                return this._offlineCustomSoundtracks;
            }
            set
            {
                this.OnofflineCustomSoundtracksChanging(value);
                this.ReportPropertyChanging("offlineCustomSoundtracks");
                this._offlineCustomSoundtracks = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineCustomSoundtracks");
                this.OnofflineCustomSoundtracksChanged();
            }
        }
        private global::System.Nullable<bool> _offlineCustomSoundtracks;
        partial void OnofflineCustomSoundtracksChanging(global::System.Nullable<bool> value);
        partial void OnofflineCustomSoundtracksChanged();
        /// <summary>
        /// There are no comments for Property offlineDolbyDigital in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlineDolbyDigital
        {
            get
            {
                return this._offlineDolbyDigital;
            }
            set
            {
                this.OnofflineDolbyDigitalChanging(value);
                this.ReportPropertyChanging("offlineDolbyDigital");
                this._offlineDolbyDigital = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineDolbyDigital");
                this.OnofflineDolbyDigitalChanged();
            }
        }
        private global::System.Nullable<bool> _offlineDolbyDigital;
        partial void OnofflineDolbyDigitalChanging(global::System.Nullable<bool> value);
        partial void OnofflineDolbyDigitalChanged();
        /// <summary>
        /// There are no comments for Property onlineMultiplayerMin in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> onlineMultiplayerMin
        {
            get
            {
                return this._onlineMultiplayerMin;
            }
            set
            {
                this.OnonlineMultiplayerMinChanging(value);
                this.ReportPropertyChanging("onlineMultiplayerMin");
                this._onlineMultiplayerMin = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineMultiplayerMin");
                this.OnonlineMultiplayerMinChanged();
            }
        }
        private global::System.Nullable<int> _onlineMultiplayerMin;
        partial void OnonlineMultiplayerMinChanging(global::System.Nullable<int> value);
        partial void OnonlineMultiplayerMinChanged();
        /// <summary>
        /// There are no comments for Property onlineMultiplayerMax in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> onlineMultiplayerMax
        {
            get
            {
                return this._onlineMultiplayerMax;
            }
            set
            {
                this.OnonlineMultiplayerMaxChanging(value);
                this.ReportPropertyChanging("onlineMultiplayerMax");
                this._onlineMultiplayerMax = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineMultiplayerMax");
                this.OnonlineMultiplayerMaxChanged();
            }
        }
        private global::System.Nullable<int> _onlineMultiplayerMax;
        partial void OnonlineMultiplayerMaxChanging(global::System.Nullable<int> value);
        partial void OnonlineMultiplayerMaxChanged();
        /// <summary>
        /// There are no comments for Property onlineMultiplayerHardDriveRequired in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineMultiplayerHardDriveRequired
        {
            get
            {
                return this._onlineMultiplayerHardDriveRequired;
            }
            set
            {
                this.OnonlineMultiplayerHardDriveRequiredChanging(value);
                this.ReportPropertyChanging("onlineMultiplayerHardDriveRequired");
                this._onlineMultiplayerHardDriveRequired = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineMultiplayerHardDriveRequired");
                this.OnonlineMultiplayerHardDriveRequiredChanged();
            }
        }
        private global::System.Nullable<bool> _onlineMultiplayerHardDriveRequired;
        partial void OnonlineMultiplayerHardDriveRequiredChanging(global::System.Nullable<bool> value);
        partial void OnonlineMultiplayerHardDriveRequiredChanged();
        /// <summary>
        /// There are no comments for Property onlineCoopPlayersMin in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> onlineCoopPlayersMin
        {
            get
            {
                return this._onlineCoopPlayersMin;
            }
            set
            {
                this.OnonlineCoopPlayersMinChanging(value);
                this.ReportPropertyChanging("onlineCoopPlayersMin");
                this._onlineCoopPlayersMin = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineCoopPlayersMin");
                this.OnonlineCoopPlayersMinChanged();
            }
        }
        private global::System.Nullable<int> _onlineCoopPlayersMin;
        partial void OnonlineCoopPlayersMinChanging(global::System.Nullable<int> value);
        partial void OnonlineCoopPlayersMinChanged();
        /// <summary>
        /// There are no comments for Property onlineCoopPlayersMax in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> onlineCoopPlayersMax
        {
            get
            {
                return this._onlineCoopPlayersMax;
            }
            set
            {
                this.OnonlineCoopPlayersMaxChanging(value);
                this.ReportPropertyChanging("onlineCoopPlayersMax");
                this._onlineCoopPlayersMax = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineCoopPlayersMax");
                this.OnonlineCoopPlayersMaxChanged();
            }
        }
        private global::System.Nullable<int> _onlineCoopPlayersMax;
        partial void OnonlineCoopPlayersMaxChanging(global::System.Nullable<int> value);
        partial void OnonlineCoopPlayersMaxChanged();
        /// <summary>
        /// There are no comments for Property onlineCoopHardDriveRequired in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineCoopHardDriveRequired
        {
            get
            {
                return this._onlineCoopHardDriveRequired;
            }
            set
            {
                this.OnonlineCoopHardDriveRequiredChanging(value);
                this.ReportPropertyChanging("onlineCoopHardDriveRequired");
                this._onlineCoopHardDriveRequired = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineCoopHardDriveRequired");
                this.OnonlineCoopHardDriveRequiredChanged();
            }
        }
        private global::System.Nullable<bool> _onlineCoopHardDriveRequired;
        partial void OnonlineCoopHardDriveRequiredChanging(global::System.Nullable<bool> value);
        partial void OnonlineCoopHardDriveRequiredChanged();
        /// <summary>
        /// There are no comments for Property onlineCoopHardDriveStorageAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> onlineCoopHardDriveStorageAmount
        {
            get
            {
                return this._onlineCoopHardDriveStorageAmount;
            }
            set
            {
                this.OnonlineCoopHardDriveStorageAmountChanging(value);
                this.ReportPropertyChanging("onlineCoopHardDriveStorageAmount");
                this._onlineCoopHardDriveStorageAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineCoopHardDriveStorageAmount");
                this.OnonlineCoopHardDriveStorageAmountChanged();
            }
        }
        private global::System.Nullable<int> _onlineCoopHardDriveStorageAmount;
        partial void OnonlineCoopHardDriveStorageAmountChanging(global::System.Nullable<int> value);
        partial void OnonlineCoopHardDriveStorageAmountChanged();
        /// <summary>
        /// There are no comments for Property onlineHardDriveRequired in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineHardDriveRequired
        {
            get
            {
                return this._onlineHardDriveRequired;
            }
            set
            {
                this.OnonlineHardDriveRequiredChanging(value);
                this.ReportPropertyChanging("onlineHardDriveRequired");
                this._onlineHardDriveRequired = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineHardDriveRequired");
                this.OnonlineHardDriveRequiredChanged();
            }
        }
        private global::System.Nullable<bool> _onlineHardDriveRequired;
        partial void OnonlineHardDriveRequiredChanging(global::System.Nullable<bool> value);
        partial void OnonlineHardDriveRequiredChanged();
        /// <summary>
        /// There are no comments for Property onlinePlayStorageAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> onlinePlayStorageAmount
        {
            get
            {
                return this._onlinePlayStorageAmount;
            }
            set
            {
                this.OnonlinePlayStorageAmountChanging(value);
                this.ReportPropertyChanging("onlinePlayStorageAmount");
                this._onlinePlayStorageAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlinePlayStorageAmount");
                this.OnonlinePlayStorageAmountChanged();
            }
        }
        private global::System.Nullable<int> _onlinePlayStorageAmount;
        partial void OnonlinePlayStorageAmountChanging(global::System.Nullable<int> value);
        partial void OnonlinePlayStorageAmountChanged();
        /// <summary>
        /// There are no comments for Property onlineContentDownload in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineContentDownload
        {
            get
            {
                return this._onlineContentDownload;
            }
            set
            {
                this.OnonlineContentDownloadChanging(value);
                this.ReportPropertyChanging("onlineContentDownload");
                this._onlineContentDownload = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineContentDownload");
                this.OnonlineContentDownloadChanged();
            }
        }
        private global::System.Nullable<bool> _onlineContentDownload;
        partial void OnonlineContentDownloadChanging(global::System.Nullable<bool> value);
        partial void OnonlineContentDownloadChanged();
        /// <summary>
        /// There are no comments for Property onlineLeaderboards in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineLeaderboards
        {
            get
            {
                return this._onlineLeaderboards;
            }
            set
            {
                this.OnonlineLeaderboardsChanging(value);
                this.ReportPropertyChanging("onlineLeaderboards");
                this._onlineLeaderboards = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineLeaderboards");
                this.OnonlineLeaderboardsChanged();
            }
        }
        private global::System.Nullable<bool> _onlineLeaderboards;
        partial void OnonlineLeaderboardsChanging(global::System.Nullable<bool> value);
        partial void OnonlineLeaderboardsChanged();
        /// <summary>
        /// There are no comments for Property onlineSpectatorMode in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineSpectatorMode
        {
            get
            {
                return this._onlineSpectatorMode;
            }
            set
            {
                this.OnonlineSpectatorModeChanging(value);
                this.ReportPropertyChanging("onlineSpectatorMode");
                this._onlineSpectatorMode = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineSpectatorMode");
                this.OnonlineSpectatorModeChanged();
            }
        }
        private global::System.Nullable<bool> _onlineSpectatorMode;
        partial void OnonlineSpectatorModeChanging(global::System.Nullable<bool> value);
        partial void OnonlineSpectatorModeChanged();
        /// <summary>
        /// There are no comments for Property onlineVoice in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineVoice
        {
            get
            {
                return this._onlineVoice;
            }
            set
            {
                this.OnonlineVoiceChanging(value);
                this.ReportPropertyChanging("onlineVoice");
                this._onlineVoice = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineVoice");
                this.OnonlineVoiceChanged();
            }
        }
        private global::System.Nullable<bool> _onlineVoice;
        partial void OnonlineVoiceChanging(global::System.Nullable<bool> value);
        partial void OnonlineVoiceChanged();
        /// <summary>
        /// There are no comments for Property onlineOnly in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> onlineOnly
        {
            get
            {
                return this._onlineOnly;
            }
            set
            {
                this.OnonlineOnlyChanging(value);
                this.ReportPropertyChanging("onlineOnly");
                this._onlineOnly = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("onlineOnly");
                this.OnonlineOnlyChanged();
            }
        }
        private global::System.Nullable<bool> _onlineOnly;
        partial void OnonlineOnlyChanging(global::System.Nullable<bool> value);
        partial void OnonlineOnlyChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property offlineHardDriveRequired in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<bool> offlineHardDriveRequired
        {
            get
            {
                return this._offlineHardDriveRequired;
            }
            set
            {
                this.OnofflineHardDriveRequiredChanging(value);
                this.ReportPropertyChanging("offlineHardDriveRequired");
                this._offlineHardDriveRequired = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offlineHardDriveRequired");
                this.OnofflineHardDriveRequiredChanged();
            }
        }
        private global::System.Nullable<bool> _offlineHardDriveRequired;
        partial void OnofflineHardDriveRequiredChanging(global::System.Nullable<bool> value);
        partial void OnofflineHardDriveRequiredChanged();
        /// <summary>
        /// There are no comments for Property pcProcessorType1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcProcessorType1
        {
            get
            {
                return this._pcProcessorType1;
            }
            set
            {
                this.OnpcProcessorType1Changing(value);
                this.ReportPropertyChanging("pcProcessorType1");
                this._pcProcessorType1 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcProcessorType1");
                this.OnpcProcessorType1Changed();
            }
        }
        private global::System.Nullable<int> _pcProcessorType1;
        partial void OnpcProcessorType1Changing(global::System.Nullable<int> value);
        partial void OnpcProcessorType1Changed();
        /// <summary>
        /// There are no comments for Property pcProcessorSpeed1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<double> pcProcessorSpeed1
        {
            get
            {
                return this._pcProcessorSpeed1;
            }
            set
            {
                this.OnpcProcessorSpeed1Changing(value);
                this.ReportPropertyChanging("pcProcessorSpeed1");
                this._pcProcessorSpeed1 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcProcessorSpeed1");
                this.OnpcProcessorSpeed1Changed();
            }
        }
        private global::System.Nullable<double> _pcProcessorSpeed1;
        partial void OnpcProcessorSpeed1Changing(global::System.Nullable<double> value);
        partial void OnpcProcessorSpeed1Changed();
        /// <summary>
        /// There are no comments for Property pcProcessorType2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcProcessorType2
        {
            get
            {
                return this._pcProcessorType2;
            }
            set
            {
                this.OnpcProcessorType2Changing(value);
                this.ReportPropertyChanging("pcProcessorType2");
                this._pcProcessorType2 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcProcessorType2");
                this.OnpcProcessorType2Changed();
            }
        }
        private global::System.Nullable<int> _pcProcessorType2;
        partial void OnpcProcessorType2Changing(global::System.Nullable<int> value);
        partial void OnpcProcessorType2Changed();
        /// <summary>
        /// There are no comments for Property pcProcessorSpeed2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<double> pcProcessorSpeed2
        {
            get
            {
                return this._pcProcessorSpeed2;
            }
            set
            {
                this.OnpcProcessorSpeed2Changing(value);
                this.ReportPropertyChanging("pcProcessorSpeed2");
                this._pcProcessorSpeed2 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcProcessorSpeed2");
                this.OnpcProcessorSpeed2Changed();
            }
        }
        private global::System.Nullable<double> _pcProcessorSpeed2;
        partial void OnpcProcessorSpeed2Changing(global::System.Nullable<double> value);
        partial void OnpcProcessorSpeed2Changed();
        /// <summary>
        /// There are no comments for Property pcSystemMemoryAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<double> pcSystemMemoryAmount
        {
            get
            {
                return this._pcSystemMemoryAmount;
            }
            set
            {
                this.OnpcSystemMemoryAmountChanging(value);
                this.ReportPropertyChanging("pcSystemMemoryAmount");
                this._pcSystemMemoryAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcSystemMemoryAmount");
                this.OnpcSystemMemoryAmountChanged();
            }
        }
        private global::System.Nullable<double> _pcSystemMemoryAmount;
        partial void OnpcSystemMemoryAmountChanging(global::System.Nullable<double> value);
        partial void OnpcSystemMemoryAmountChanged();
        /// <summary>
        /// There are no comments for Property pcHardDriveStorageAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<double> pcHardDriveStorageAmount
        {
            get
            {
                return this._pcHardDriveStorageAmount;
            }
            set
            {
                this.OnpcHardDriveStorageAmountChanging(value);
                this.ReportPropertyChanging("pcHardDriveStorageAmount");
                this._pcHardDriveStorageAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcHardDriveStorageAmount");
                this.OnpcHardDriveStorageAmountChanged();
            }
        }
        private global::System.Nullable<double> _pcHardDriveStorageAmount;
        partial void OnpcHardDriveStorageAmountChanging(global::System.Nullable<double> value);
        partial void OnpcHardDriveStorageAmountChanged();
        /// <summary>
        /// There are no comments for Property pcVideoMemoryAmount in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<double> pcVideoMemoryAmount
        {
            get
            {
                return this._pcVideoMemoryAmount;
            }
            set
            {
                this.OnpcVideoMemoryAmountChanging(value);
                this.ReportPropertyChanging("pcVideoMemoryAmount");
                this._pcVideoMemoryAmount = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcVideoMemoryAmount");
                this.OnpcVideoMemoryAmountChanged();
            }
        }
        private global::System.Nullable<double> _pcVideoMemoryAmount;
        partial void OnpcVideoMemoryAmountChanging(global::System.Nullable<double> value);
        partial void OnpcVideoMemoryAmountChanged();
        /// <summary>
        /// There are no comments for Property pcVideoCardType1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcVideoCardType1
        {
            get
            {
                return this._pcVideoCardType1;
            }
            set
            {
                this.OnpcVideoCardType1Changing(value);
                this.ReportPropertyChanging("pcVideoCardType1");
                this._pcVideoCardType1 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcVideoCardType1");
                this.OnpcVideoCardType1Changed();
            }
        }
        private global::System.Nullable<int> _pcVideoCardType1;
        partial void OnpcVideoCardType1Changing(global::System.Nullable<int> value);
        partial void OnpcVideoCardType1Changed();
        /// <summary>
        /// There are no comments for Property pcVideoCardType2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcVideoCardType2
        {
            get
            {
                return this._pcVideoCardType2;
            }
            set
            {
                this.OnpcVideoCardType2Changing(value);
                this.ReportPropertyChanging("pcVideoCardType2");
                this._pcVideoCardType2 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcVideoCardType2");
                this.OnpcVideoCardType2Changed();
            }
        }
        private global::System.Nullable<int> _pcVideoCardType2;
        partial void OnpcVideoCardType2Changing(global::System.Nullable<int> value);
        partial void OnpcVideoCardType2Changed();
        /// <summary>
        /// There are no comments for Property pcSoundCardType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcSoundCardType
        {
            get
            {
                return this._pcSoundCardType;
            }
            set
            {
                this.OnpcSoundCardTypeChanging(value);
                this.ReportPropertyChanging("pcSoundCardType");
                this._pcSoundCardType = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcSoundCardType");
                this.OnpcSoundCardTypeChanged();
            }
        }
        private global::System.Nullable<int> _pcSoundCardType;
        partial void OnpcSoundCardTypeChanging(global::System.Nullable<int> value);
        partial void OnpcSoundCardTypeChanged();
        /// <summary>
        /// There are no comments for Property pcDirectXType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcDirectXType
        {
            get
            {
                return this._pcDirectXType;
            }
            set
            {
                this.OnpcDirectXTypeChanging(value);
                this.ReportPropertyChanging("pcDirectXType");
                this._pcDirectXType = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcDirectXType");
                this.OnpcDirectXTypeChanged();
            }
        }
        private global::System.Nullable<int> _pcDirectXType;
        partial void OnpcDirectXTypeChanging(global::System.Nullable<int> value);
        partial void OnpcDirectXTypeChanged();
        /// <summary>
        /// There are no comments for Property pcWindowsOSType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcWindowsOSType
        {
            get
            {
                return this._pcWindowsOSType;
            }
            set
            {
                this.OnpcWindowsOSTypeChanging(value);
                this.ReportPropertyChanging("pcWindowsOSType");
                this._pcWindowsOSType = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcWindowsOSType");
                this.OnpcWindowsOSTypeChanged();
            }
        }
        private global::System.Nullable<int> _pcWindowsOSType;
        partial void OnpcWindowsOSTypeChanging(global::System.Nullable<int> value);
        partial void OnpcWindowsOSTypeChanged();
        /// <summary>
        /// There are no comments for Property pcNetworkRequirements in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pcNetworkRequirements
        {
            get
            {
                return this._pcNetworkRequirements;
            }
            set
            {
                this.OnpcNetworkRequirementsChanging(value);
                this.ReportPropertyChanging("pcNetworkRequirements");
                this._pcNetworkRequirements = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcNetworkRequirements");
                this.OnpcNetworkRequirementsChanged();
            }
        }
        private global::System.Nullable<int> _pcNetworkRequirements;
        partial void OnpcNetworkRequirementsChanging(global::System.Nullable<int> value);
        partial void OnpcNetworkRequirementsChanged();
        /// <summary>
        /// There are no comments for Property pcExtendedRequirements in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<long> pcExtendedRequirements
        {
            get
            {
                return this._pcExtendedRequirements;
            }
            set
            {
                this.OnpcExtendedRequirementsChanging(value);
                this.ReportPropertyChanging("pcExtendedRequirements");
                this._pcExtendedRequirements = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pcExtendedRequirements");
                this.OnpcExtendedRequirementsChanged();
            }
        }
        private global::System.Nullable<long> _pcExtendedRequirements;
        partial void OnpcExtendedRequirementsChanging(global::System.Nullable<long> value);
        partial void OnpcExtendedRequirementsChanged();
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_Country", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountry_Country", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountry_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> CountryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountry_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountry_Country", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_GameMediaId", "Game")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Game Game
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountry_GameMediaId", "Game").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountry_GameMediaId", "Game").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Game> GameReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountry_GameMediaId", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountry_GameMediaId", "Game", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for HDTVMode in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_MaxHDTVMode", "HDTVMode")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public HDTVMode HDTVMode
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<HDTVMode>("RawCatalogDBModel.FK_GameCapabilityCountry_MaxHDTVMode", "HDTVMode").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<HDTVMode>("RawCatalogDBModel.FK_GameCapabilityCountry_MaxHDTVMode", "HDTVMode").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for HDTVMode in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<HDTVMode> HDTVModeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<HDTVMode>("RawCatalogDBModel.FK_GameCapabilityCountry_MaxHDTVMode", "HDTVMode");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<HDTVMode>("RawCatalogDBModel.FK_GameCapabilityCountry_MaxHDTVMode", "HDTVMode", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnitReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "StorageUnit", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnit1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "StorageUnit", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit2
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit2 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnit2Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "StorageUnit", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit3 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit3
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit3 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnit3Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "StorageUnit", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit4 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit4
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit4 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnit4Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "StorageUnit", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit5 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit5
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit5 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnit5Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "StorageUnit", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit6 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "StorageUnit")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public StorageUnit StorageUnit6
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "StorageUnit").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "StorageUnit").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for StorageUnit6 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<StorageUnit> StorageUnit6Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "StorageUnit");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<StorageUnit>("RawCatalogDBModel.FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "StorageUnit", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameCapabilityCountryMap in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameMediaId
    /// countryCode
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameCapabilityCountryMap")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameCapabilityCountryMap : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameCapabilityCountryMap object.
        /// </summary>
        /// <param name="gameMediaId">Initial value of gameMediaId.</param>
        /// <param name="countryCode">Initial value of countryCode.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameCapabilityCountryMap CreateGameCapabilityCountryMap(global::System.Guid gameMediaId, string countryCode, global::System.DateTime modifiedDate)
        {
            GameCapabilityCountryMap gameCapabilityCountryMap = new GameCapabilityCountryMap();
            gameCapabilityCountryMap.gameMediaId = gameMediaId;
            gameCapabilityCountryMap.countryCode = countryCode;
            gameCapabilityCountryMap.modifiedDate = modifiedDate;
            return gameCapabilityCountryMap;
        }
        /// <summary>
        /// There are no comments for Property gameMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameMediaId
        {
            get
            {
                return this._gameMediaId;
            }
            set
            {
                this.OngameMediaIdChanging(value);
                this.ReportPropertyChanging("gameMediaId");
                this._gameMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameMediaId");
                this.OngameMediaIdChanged();
            }
        }
        private global::System.Guid _gameMediaId;
        partial void OngameMediaIdChanging(global::System.Guid value);
        partial void OngameMediaIdChanged();
        /// <summary>
        /// There are no comments for Property countryCode in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string countryCode
        {
            get
            {
                return this._countryCode;
            }
            set
            {
                this.OncountryCodeChanging(value);
                this.ReportPropertyChanging("countryCode");
                this._countryCode = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("countryCode");
                this.OncountryCodeChanged();
            }
        }
        private string _countryCode;
        partial void OncountryCodeChanging(string value);
        partial void OncountryCodeChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_Country", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_Country", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> CountryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_Country", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Country1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_CountryMap", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_CountryMap", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_CountryMap", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> Country1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_CountryMap", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_GameCapabilityCountryMap_CountryMap", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountryMap_GameMediaId", "Game")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Game Game
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountryMap_GameMediaId", "Game").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountryMap_GameMediaId", "Game").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Game> GameReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountryMap_GameMediaId", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Game>("RawCatalogDBModel.FK_GameCapabilityCountryMap_GameMediaId", "Game", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameConsumable in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameAssetMediaId
    /// gameMediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameConsumable")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameConsumable : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameConsumable object.
        /// </summary>
        /// <param name="gameAssetMediaId">Initial value of gameAssetMediaId.</param>
        /// <param name="gameMediaId">Initial value of gameMediaId.</param>
        /// <param name="liveTitleAssetId">Initial value of liveTitleAssetId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameConsumable CreateGameConsumable(global::System.Guid gameAssetMediaId, global::System.Guid gameMediaId, int liveTitleAssetId, global::System.DateTime modifiedDate)
        {
            GameConsumable gameConsumable = new GameConsumable();
            gameConsumable.gameAssetMediaId = gameAssetMediaId;
            gameConsumable.gameMediaId = gameMediaId;
            gameConsumable.liveTitleAssetId = liveTitleAssetId;
            gameConsumable.modifiedDate = modifiedDate;
            return gameConsumable;
        }
        /// <summary>
        /// There are no comments for Property gameAssetMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameAssetMediaId
        {
            get
            {
                return this._gameAssetMediaId;
            }
            set
            {
                this.OngameAssetMediaIdChanging(value);
                this.ReportPropertyChanging("gameAssetMediaId");
                this._gameAssetMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameAssetMediaId");
                this.OngameAssetMediaIdChanged();
            }
        }
        private global::System.Guid _gameAssetMediaId;
        partial void OngameAssetMediaIdChanging(global::System.Guid value);
        partial void OngameAssetMediaIdChanged();
        /// <summary>
        /// There are no comments for Property gameMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameMediaId
        {
            get
            {
                return this._gameMediaId;
            }
            set
            {
                this.OngameMediaIdChanging(value);
                this.ReportPropertyChanging("gameMediaId");
                this._gameMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameMediaId");
                this.OngameMediaIdChanged();
            }
        }
        private global::System.Guid _gameMediaId;
        partial void OngameMediaIdChanging(global::System.Guid value);
        partial void OngameMediaIdChanged();
        /// <summary>
        /// There are no comments for Property liveTitleAssetId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int liveTitleAssetId
        {
            get
            {
                return this._liveTitleAssetId;
            }
            set
            {
                this.OnliveTitleAssetIdChanging(value);
                this.ReportPropertyChanging("liveTitleAssetId");
                this._liveTitleAssetId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("liveTitleAssetId");
                this.OnliveTitleAssetIdChanged();
            }
        }
        private int _liveTitleAssetId;
        partial void OnliveTitleAssetIdChanging(int value);
        partial void OnliveTitleAssetIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameConsumable_Game", "Game")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Game Game
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameConsumable_Game", "Game").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameConsumable_Game", "Game").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Game> GameReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameConsumable_Game", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Game>("RawCatalogDBModel.FK_GameConsumable_Game", "Game", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameConsumable_GameContent", "GameContent")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContent GameContent
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameConsumable_GameContent", "GameContent").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameConsumable_GameContent", "GameContent").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContent> GameContentReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameConsumable_GameContent", "GameContent");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContent>("RawCatalogDBModel.FK_GameConsumable_GameContent", "GameContent", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameContent in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameContentMediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameContent")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameContent : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameContent object.
        /// </summary>
        /// <param name="gameContentMediaId">Initial value of gameContentMediaId.</param>
        /// <param name="contentBitFilter">Initial value of contentBitFilter.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        /// <param name="effectiveLiveTitleId">Initial value of effectiveLiveTitleId.</param>
        /// <param name="inheritRating">Initial value of inheritRating.</param>
        public static GameContent CreateGameContent(global::System.Guid gameContentMediaId, int contentBitFilter, global::System.DateTime modifiedDate, int effectiveLiveTitleId, bool inheritRating)
        {
            GameContent gameContent = new GameContent();
            gameContent.gameContentMediaId = gameContentMediaId;
            gameContent.contentBitFilter = contentBitFilter;
            gameContent.modifiedDate = modifiedDate;
            gameContent.effectiveLiveTitleId = effectiveLiveTitleId;
            gameContent.inheritRating = inheritRating;
            return gameContent;
        }
        /// <summary>
        /// There are no comments for Property gameContentMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentMediaId
        {
            get
            {
                return this._gameContentMediaId;
            }
            set
            {
                this.OngameContentMediaIdChanging(value);
                this.ReportPropertyChanging("gameContentMediaId");
                this._gameContentMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentMediaId");
                this.OngameContentMediaIdChanged();
            }
        }
        private global::System.Guid _gameContentMediaId;
        partial void OngameContentMediaIdChanging(global::System.Guid value);
        partial void OngameContentMediaIdChanged();
        /// <summary>
        /// There are no comments for Property contentBitFilter in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int contentBitFilter
        {
            get
            {
                return this._contentBitFilter;
            }
            set
            {
                this.OncontentBitFilterChanging(value);
                this.ReportPropertyChanging("contentBitFilter");
                this._contentBitFilter = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("contentBitFilter");
                this.OncontentBitFilterChanged();
            }
        }
        private int _contentBitFilter;
        partial void OncontentBitFilterChanging(int value);
        partial void OncontentBitFilterChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property effectiveLiveTitleId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int effectiveLiveTitleId
        {
            get
            {
                return this._effectiveLiveTitleId;
            }
            set
            {
                this.OneffectiveLiveTitleIdChanging(value);
                this.ReportPropertyChanging("effectiveLiveTitleId");
                this._effectiveLiveTitleId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("effectiveLiveTitleId");
                this.OneffectiveLiveTitleIdChanged();
            }
        }
        private int _effectiveLiveTitleId;
        partial void OneffectiveLiveTitleIdChanging(int value);
        partial void OneffectiveLiveTitleIdChanged();
        /// <summary>
        /// There are no comments for Property inheritRating in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public bool inheritRating
        {
            get
            {
                return this._inheritRating;
            }
            set
            {
                this.OninheritRatingChanging(value);
                this.ReportPropertyChanging("inheritRating");
                this._inheritRating = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("inheritRating");
                this.OninheritRatingChanged();
            }
        }
        private bool _inheritRating;
        partial void OninheritRatingChanging(bool value);
        partial void OninheritRatingChanged();
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContent_Game", "Game")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Game Game
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameContent_Game", "Game").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameContent_Game", "Game").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Game> GameReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameContent_Game", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Game>("RawCatalogDBModel.FK_GameContent_Game", "Game", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameConsumable in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameConsumable_GameContent", "GameConsumable")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameConsumable> GameConsumable
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameConsumable>("RawCatalogDBModel.FK_GameConsumable_GameContent", "GameConsumable");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameConsumable>("RawCatalogDBModel.FK_GameConsumable_GameContent", "GameConsumable", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContent_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_GameContent_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_GameContent_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_GameContent_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_GameContent_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContentAvatarItem in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentAvatarItem_GameContent", "GameContentAvatarItem")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentAvatarItem GameContentAvatarItem
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentAvatarItem>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContentAvatarItem").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentAvatarItem>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContentAvatarItem").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentAvatarItem in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentAvatarItem> GameContentAvatarItemReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentAvatarItem>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContentAvatarItem");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentAvatarItem>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContentAvatarItem", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameContentAvatarItem in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameContentAvatarItemMediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameContentAvatarItem")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameContentAvatarItem : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameContentAvatarItem object.
        /// </summary>
        /// <param name="gameContentAvatarItemMediaId">Initial value of gameContentAvatarItemMediaId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        /// <param name="avatarItemAssetId">Initial value of avatarItemAssetId.</param>
        public static GameContentAvatarItem CreateGameContentAvatarItem(global::System.Guid gameContentAvatarItemMediaId, global::System.DateTime modifiedDate, global::System.Guid avatarItemAssetId)
        {
            GameContentAvatarItem gameContentAvatarItem = new GameContentAvatarItem();
            gameContentAvatarItem.gameContentAvatarItemMediaId = gameContentAvatarItemMediaId;
            gameContentAvatarItem.modifiedDate = modifiedDate;
            gameContentAvatarItem.avatarItemAssetId = avatarItemAssetId;
            return gameContentAvatarItem;
        }
        /// <summary>
        /// There are no comments for Property gameContentAvatarItemMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentAvatarItemMediaId
        {
            get
            {
                return this._gameContentAvatarItemMediaId;
            }
            set
            {
                this.OngameContentAvatarItemMediaIdChanging(value);
                this.ReportPropertyChanging("gameContentAvatarItemMediaId");
                this._gameContentAvatarItemMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentAvatarItemMediaId");
                this.OngameContentAvatarItemMediaIdChanged();
            }
        }
        private global::System.Guid _gameContentAvatarItemMediaId;
        partial void OngameContentAvatarItemMediaIdChanging(global::System.Guid value);
        partial void OngameContentAvatarItemMediaIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property avatarItemAssetId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid avatarItemAssetId
        {
            get
            {
                return this._avatarItemAssetId;
            }
            set
            {
                this.OnavatarItemAssetIdChanging(value);
                this.ReportPropertyChanging("avatarItemAssetId");
                this._avatarItemAssetId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("avatarItemAssetId");
                this.OnavatarItemAssetIdChanged();
            }
        }
        private global::System.Guid _avatarItemAssetId;
        partial void OnavatarItemAssetIdChanging(global::System.Guid value);
        partial void OnavatarItemAssetIdChanged();
        /// <summary>
        /// There are no comments for AvatarBodyType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentAvatarItem_AvatarBodyType", "AvatarBodyType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public AvatarBodyType AvatarBodyType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AvatarBodyType>("RawCatalogDBModel.FK_GameContentAvatarItem_AvatarBodyType", "AvatarBodyType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AvatarBodyType>("RawCatalogDBModel.FK_GameContentAvatarItem_AvatarBodyType", "AvatarBodyType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for AvatarBodyType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<AvatarBodyType> AvatarBodyTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AvatarBodyType>("RawCatalogDBModel.FK_GameContentAvatarItem_AvatarBodyType", "AvatarBodyType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<AvatarBodyType>("RawCatalogDBModel.FK_GameContentAvatarItem_AvatarBodyType", "AvatarBodyType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentAvatarItem_GameContent", "GameContent")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContent GameContent
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContent").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContent").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContent> GameContentReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContent");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContentAvatarItem_GameContent", "GameContent", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameContentInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameContentInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameContentInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameContentInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameContentInstance object.
        /// </summary>
        /// <param name="gameContentInstanceId">Initial value of gameContentInstanceId.</param>
        /// <param name="installSize">Initial value of installSize.</param>
        /// <param name="packageSize">Initial value of packageSize.</param>
        /// <param name="liveContentId">Initial value of liveContentId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameContentInstance CreateGameContentInstance(global::System.Guid gameContentInstanceId, long installSize, long packageSize, byte[] liveContentId, global::System.DateTime modifiedDate)
        {
            GameContentInstance gameContentInstance = new GameContentInstance();
            gameContentInstance.gameContentInstanceId = gameContentInstanceId;
            gameContentInstance.installSize = installSize;
            gameContentInstance.packageSize = packageSize;
            gameContentInstance.liveContentId = liveContentId;
            gameContentInstance.modifiedDate = modifiedDate;
            return gameContentInstance;
        }
        /// <summary>
        /// There are no comments for Property gameContentInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentInstanceId
        {
            get
            {
                return this._gameContentInstanceId;
            }
            set
            {
                this.OngameContentInstanceIdChanging(value);
                this.ReportPropertyChanging("gameContentInstanceId");
                this._gameContentInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentInstanceId");
                this.OngameContentInstanceIdChanged();
            }
        }
        private global::System.Guid _gameContentInstanceId;
        partial void OngameContentInstanceIdChanging(global::System.Guid value);
        partial void OngameContentInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property installSize in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public long installSize
        {
            get
            {
                return this._installSize;
            }
            set
            {
                this.OninstallSizeChanging(value);
                this.ReportPropertyChanging("installSize");
                this._installSize = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("installSize");
                this.OninstallSizeChanged();
            }
        }
        private long _installSize;
        partial void OninstallSizeChanging(long value);
        partial void OninstallSizeChanged();
        /// <summary>
        /// There are no comments for Property packageSize in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public long packageSize
        {
            get
            {
                return this._packageSize;
            }
            set
            {
                this.OnpackageSizeChanging(value);
                this.ReportPropertyChanging("packageSize");
                this._packageSize = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("packageSize");
                this.OnpackageSizeChanged();
            }
        }
        private long _packageSize;
        partial void OnpackageSizeChanging(long value);
        partial void OnpackageSizeChanged();
        /// <summary>
        /// There are no comments for Property liveContentId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] liveContentId
        {
            get
            {
                return global::System.Data.Objects.DataClasses.StructuralObject.GetValidValue(this._liveContentId);
            }
            set
            {
                this.OnliveContentIdChanging(value);
                this.ReportPropertyChanging("liveContentId");
                this._liveContentId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("liveContentId");
                this.OnliveContentIdChanged();
            }
        }
        private byte[] _liveContentId;
        partial void OnliveContentIdChanging(byte[] value);
        partial void OnliveContentIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameRegionMask in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstance_GameRegionMask", "GameRegionMask")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameRegionMask GameRegionMask
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameRegionMask>("RawCatalogDBModel.FK_GameContentInstance_GameRegionMask", "GameRegionMask").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameRegionMask>("RawCatalogDBModel.FK_GameContentInstance_GameRegionMask", "GameRegionMask").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameRegionMask in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameRegionMask> GameRegionMaskReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameRegionMask>("RawCatalogDBModel.FK_GameContentInstance_GameRegionMask", "GameRegionMask");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameRegionMask>("RawCatalogDBModel.FK_GameContentInstance_GameRegionMask", "GameRegionMask", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstance_MediaInstance", "MediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaInstance MediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "MediaInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "MediaInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaInstance> MediaInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "MediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "MediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PackageType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstance_PackageType", "PackageType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public PackageType PackageType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PackageType>("RawCatalogDBModel.FK_GameContentInstance_PackageType", "PackageType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PackageType>("RawCatalogDBModel.FK_GameContentInstance_PackageType", "PackageType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for PackageType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<PackageType> PackageTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PackageType>("RawCatalogDBModel.FK_GameContentInstance_PackageType", "PackageType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PackageType>("RawCatalogDBModel.FK_GameContentInstance_PackageType", "PackageType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstanceEncryptedKey in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstanceEncryptedKey")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentInstanceEncryptedKey GameContentInstanceEncryptedKey
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstanceEncryptedKey>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstanceEncryptedKey").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstanceEncryptedKey>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstanceEncryptedKey").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstanceEncryptedKey in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentInstanceEncryptedKey> GameContentInstanceEncryptedKeyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstanceEncryptedKey>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstanceEncryptedKey");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentInstanceEncryptedKey>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstanceEncryptedKey", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstanceFile in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstanceFile_GameContentInstance", "GameContentInstanceFile")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameContentInstanceFile> GameContentInstanceFile
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameContentInstanceFile>("RawCatalogDBModel.FK_GameContentInstanceFile_GameContentInstance", "GameContentInstanceFile");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameContentInstanceFile>("RawCatalogDBModel.FK_GameContentInstanceFile_GameContentInstance", "GameContentInstanceFile", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstance_GameContentInstance", "OfferInstanceGameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceGameContentInstance> OfferInstanceGameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceGameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_GameContentInstance", "OfferInstanceGameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceGameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_GameContentInstance", "OfferInstanceGameContentInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstanceAsset in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "OfferInstanceGameContentInstanceAsset")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceGameContentInstanceAsset> OfferInstanceGameContentInstanceAsset
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceGameContentInstanceAsset>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "OfferInstanceGameContentInstanceAsset");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceGameContentInstanceAsset>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "OfferInstanceGameContentInstanceAsset", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameContentInstanceEncryptedKey in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameContentInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameContentInstanceEncryptedKey")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameContentInstanceEncryptedKey : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameContentInstanceEncryptedKey object.
        /// </summary>
        /// <param name="gameContentInstanceId">Initial value of gameContentInstanceId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameContentInstanceEncryptedKey CreateGameContentInstanceEncryptedKey(global::System.Guid gameContentInstanceId, global::System.DateTime modifiedDate)
        {
            GameContentInstanceEncryptedKey gameContentInstanceEncryptedKey = new GameContentInstanceEncryptedKey();
            gameContentInstanceEncryptedKey.gameContentInstanceId = gameContentInstanceId;
            gameContentInstanceEncryptedKey.modifiedDate = modifiedDate;
            return gameContentInstanceEncryptedKey;
        }
        /// <summary>
        /// There are no comments for Property gameContentInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentInstanceId
        {
            get
            {
                return this._gameContentInstanceId;
            }
            set
            {
                this.OngameContentInstanceIdChanging(value);
                this.ReportPropertyChanging("gameContentInstanceId");
                this._gameContentInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentInstanceId");
                this.OngameContentInstanceIdChanged();
            }
        }
        private global::System.Guid _gameContentInstanceId;
        partial void OngameContentInstanceIdChanging(global::System.Guid value);
        partial void OngameContentInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property encryptedSymKey in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] encryptedSymKey
        {
            get
            {
                return global::System.Data.Objects.DataClasses.StructuralObject.GetValidValue(this._encryptedSymKey);
            }
            set
            {
                this.OnencryptedSymKeyChanging(value);
                this.ReportPropertyChanging("encryptedSymKey");
                this._encryptedSymKey = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("encryptedSymKey");
                this.OnencryptedSymKeyChanged();
            }
        }
        private byte[] _encryptedSymKey;
        partial void OnencryptedSymKeyChanging(byte[] value);
        partial void OnencryptedSymKeyChanged();
        /// <summary>
        /// There are no comments for Property encryptedPublicKey in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] encryptedPublicKey
        {
            get
            {
                return global::System.Data.Objects.DataClasses.StructuralObject.GetValidValue(this._encryptedPublicKey);
            }
            set
            {
                this.OnencryptedPublicKeyChanging(value);
                this.ReportPropertyChanging("encryptedPublicKey");
                this._encryptedPublicKey = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("encryptedPublicKey");
                this.OnencryptedPublicKeyChanged();
            }
        }
        private byte[] _encryptedPublicKey;
        partial void OnencryptedPublicKeyChanging(byte[] value);
        partial void OnencryptedPublicKeyChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentInstance GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentInstance> GameContentInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceEncryptedKey_GameContentInstance", "GameContentInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameContentInstanceFile in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameContentInstanceFileId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameContentInstanceFile")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameContentInstanceFile : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameContentInstanceFile object.
        /// </summary>
        /// <param name="gameContentInstanceFileId">Initial value of gameContentInstanceFileId.</param>
        /// <param name="sortOrder">Initial value of sortOrder.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameContentInstanceFile CreateGameContentInstanceFile(global::System.Guid gameContentInstanceFileId, int sortOrder, global::System.DateTime modifiedDate)
        {
            GameContentInstanceFile gameContentInstanceFile = new GameContentInstanceFile();
            gameContentInstanceFile.gameContentInstanceFileId = gameContentInstanceFileId;
            gameContentInstanceFile.sortOrder = sortOrder;
            gameContentInstanceFile.modifiedDate = modifiedDate;
            return gameContentInstanceFile;
        }
        /// <summary>
        /// There are no comments for Property gameContentInstanceFileId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentInstanceFileId
        {
            get
            {
                return this._gameContentInstanceFileId;
            }
            set
            {
                this.OngameContentInstanceFileIdChanging(value);
                this.ReportPropertyChanging("gameContentInstanceFileId");
                this._gameContentInstanceFileId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentInstanceFileId");
                this.OngameContentInstanceFileIdChanged();
            }
        }
        private global::System.Guid _gameContentInstanceFileId;
        partial void OngameContentInstanceFileIdChanging(global::System.Guid value);
        partial void OngameContentInstanceFileIdChanged();
        /// <summary>
        /// There are no comments for Property fileUrl in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string fileUrl
        {
            get
            {
                return this._fileUrl;
            }
            set
            {
                this.OnfileUrlChanging(value);
                this.ReportPropertyChanging("fileUrl");
                this._fileUrl = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("fileUrl");
                this.OnfileUrlChanged();
            }
        }
        private string _fileUrl;
        partial void OnfileUrlChanging(string value);
        partial void OnfileUrlChanged();
        /// <summary>
        /// There are no comments for Property sortOrder in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int sortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                this.OnsortOrderChanging(value);
                this.ReportPropertyChanging("sortOrder");
                this._sortOrder = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("sortOrder");
                this.OnsortOrderChanged();
            }
        }
        private int _sortOrder;
        partial void OnsortOrderChanging(int value);
        partial void OnsortOrderChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstanceFile_GameContentInstance", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentInstance GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceFile_GameContentInstance", "GameContentInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceFile_GameContentInstance", "GameContentInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentInstance> GameContentInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceFile_GameContentInstance", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstanceFile_GameContentInstance", "GameContentInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameLocale in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameMediaId
    /// lcid
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameLocale")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameLocale : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameLocale object.
        /// </summary>
        /// <param name="gameMediaId">Initial value of gameMediaId.</param>
        /// <param name="lcid">Initial value of lcid.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameLocale CreateGameLocale(global::System.Guid gameMediaId, int lcid, global::System.DateTime modifiedDate)
        {
            GameLocale gameLocale = new GameLocale();
            gameLocale.gameMediaId = gameMediaId;
            gameLocale.lcid = lcid;
            gameLocale.modifiedDate = modifiedDate;
            return gameLocale;
        }
        /// <summary>
        /// There are no comments for Property gameMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameMediaId
        {
            get
            {
                return this._gameMediaId;
            }
            set
            {
                this.OngameMediaIdChanging(value);
                this.ReportPropertyChanging("gameMediaId");
                this._gameMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameMediaId");
                this.OngameMediaIdChanged();
            }
        }
        private global::System.Guid _gameMediaId;
        partial void OngameMediaIdChanging(global::System.Guid value);
        partial void OngameMediaIdChanged();
        /// <summary>
        /// There are no comments for Property lcid in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int lcid
        {
            get
            {
                return this._lcid;
            }
            set
            {
                this.OnlcidChanging(value);
                this.ReportPropertyChanging("lcid");
                this._lcid = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("lcid");
                this.OnlcidChanged();
            }
        }
        private int _lcid;
        partial void OnlcidChanging(int value);
        partial void OnlcidChanged();
        /// <summary>
        /// There are no comments for Property customGenre in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string customGenre
        {
            get
            {
                return this._customGenre;
            }
            set
            {
                this.OncustomGenreChanging(value);
                this.ReportPropertyChanging("customGenre");
                this._customGenre = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("customGenre");
                this.OncustomGenreChanged();
            }
        }
        private string _customGenre;
        partial void OncustomGenreChanging(string value);
        partial void OncustomGenreChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property developer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string developer
        {
            get
            {
                return this._developer;
            }
            set
            {
                this.OndeveloperChanging(value);
                this.ReportPropertyChanging("developer");
                this._developer = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("developer");
                this.OndeveloperChanged();
            }
        }
        private string _developer;
        partial void OndeveloperChanging(string value);
        partial void OndeveloperChanged();
        /// <summary>
        /// There are no comments for Property publisher in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string publisher
        {
            get
            {
                return this._publisher;
            }
            set
            {
                this.OnpublisherChanging(value);
                this.ReportPropertyChanging("publisher");
                this._publisher = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("publisher");
                this.OnpublisherChanged();
            }
        }
        private string _publisher;
        partial void OnpublisherChanging(string value);
        partial void OnpublisherChanged();
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameLocale_Game", "Game")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Game Game
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameLocale_Game", "Game").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameLocale_Game", "Game").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Game> GameReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_GameLocale_Game", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Game>("RawCatalogDBModel.FK_GameLocale_Game", "Game", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameLocale_Locale", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Locale Locale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_GameLocale_Locale", "Locale").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_GameLocale_Locale", "Locale").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Locale> LocaleReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_GameLocale_Locale", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Locale>("RawCatalogDBModel.FK_GameLocale_Locale", "Locale", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.GameRegionMask in the schema.
    /// </summary>
    /// <KeyProperties>
    /// gameRegionMaskId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="GameRegionMask")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class GameRegionMask : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new GameRegionMask object.
        /// </summary>
        /// <param name="gameRegionMaskId">Initial value of gameRegionMaskId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static GameRegionMask CreateGameRegionMask(int gameRegionMaskId, string internalName, global::System.DateTime modifiedDate)
        {
            GameRegionMask gameRegionMask = new GameRegionMask();
            gameRegionMask.gameRegionMaskId = gameRegionMaskId;
            gameRegionMask.internalName = internalName;
            gameRegionMask.modifiedDate = modifiedDate;
            return gameRegionMask;
        }
        /// <summary>
        /// There are no comments for Property gameRegionMaskId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int gameRegionMaskId
        {
            get
            {
                return this._gameRegionMaskId;
            }
            set
            {
                this.OngameRegionMaskIdChanging(value);
                this.ReportPropertyChanging("gameRegionMaskId");
                this._gameRegionMaskId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameRegionMaskId");
                this.OngameRegionMaskIdChanged();
            }
        }
        private int _gameRegionMaskId;
        partial void OngameRegionMaskIdChanging(int value);
        partial void OngameRegionMaskIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstance_GameRegionMask", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameContentInstance> GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_GameRegionMask", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_GameRegionMask", "GameContentInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.HDTVMode in the schema.
    /// </summary>
    /// <KeyProperties>
    /// hdtvModeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="HDTVMode")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class HDTVMode : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new HDTVMode object.
        /// </summary>
        /// <param name="hdtvModeId">Initial value of hdtvModeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static HDTVMode CreateHDTVMode(int hdtvModeId, string internalName, global::System.DateTime modifiedDate)
        {
            HDTVMode hDTVMode = new HDTVMode();
            hDTVMode.hdtvModeId = hdtvModeId;
            hDTVMode.internalName = internalName;
            hDTVMode.modifiedDate = modifiedDate;
            return hDTVMode;
        }
        /// <summary>
        /// There are no comments for Property hdtvModeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int hdtvModeId
        {
            get
            {
                return this._hdtvModeId;
            }
            set
            {
                this.OnhdtvModeIdChanging(value);
                this.ReportPropertyChanging("hdtvModeId");
                this._hdtvModeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("hdtvModeId");
                this.OnhdtvModeIdChanged();
            }
        }
        private int _hdtvModeId;
        partial void OnhdtvModeIdChanging(int value);
        partial void OnhdtvModeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameCapabilityCountry in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_MaxHDTVMode", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_MaxHDTVMode", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_MaxHDTVMode", "GameCapabilityCountry", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Image in the schema.
    /// </summary>
    /// <KeyProperties>
    /// imageMediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Image")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Image : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Image object.
        /// </summary>
        /// <param name="imageMediaId">Initial value of imageMediaId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Image CreateImage(global::System.Guid imageMediaId, global::System.DateTime modifiedDate)
        {
            Image image = new Image();
            image.imageMediaId = imageMediaId;
            image.modifiedDate = modifiedDate;
            return image;
        }
        /// <summary>
        /// There are no comments for Property imageMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid imageMediaId
        {
            get
            {
                return this._imageMediaId;
            }
            set
            {
                this.OnimageMediaIdChanging(value);
                this.ReportPropertyChanging("imageMediaId");
                this._imageMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("imageMediaId");
                this.OnimageMediaIdChanged();
            }
        }
        private global::System.Guid _imageMediaId;
        partial void OnimageMediaIdChanging(global::System.Guid value);
        partial void OnimageMediaIdChanged();
        /// <summary>
        /// There are no comments for Property creator in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string creator
        {
            get
            {
                return this._creator;
            }
            set
            {
                this.OncreatorChanging(value);
                this.ReportPropertyChanging("creator");
                this._creator = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("creator");
                this.OncreatorChanged();
            }
        }
        private string _creator;
        partial void OncreatorChanging(string value);
        partial void OncreatorChanged();
        /// <summary>
        /// There are no comments for Property issuer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string issuer
        {
            get
            {
                return this._issuer;
            }
            set
            {
                this.OnissuerChanging(value);
                this.ReportPropertyChanging("issuer");
                this._issuer = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("issuer");
                this.OnissuerChanged();
            }
        }
        private string _issuer;
        partial void OnissuerChanging(string value);
        partial void OnissuerChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Image_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Image_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Image_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Image_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_Image_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for RatingValue in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_RatingValue_ImageMediaId", "RatingValue")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<RatingValue> RatingValue
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<RatingValue>("RawCatalogDBModel.FK_RatingValue_ImageMediaId", "RatingValue");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<RatingValue>("RawCatalogDBModel.FK_RatingValue_ImageMediaId", "RatingValue", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.ImageFormat in the schema.
    /// </summary>
    /// <KeyProperties>
    /// imageFormatId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="ImageFormat")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class ImageFormat : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new ImageFormat object.
        /// </summary>
        /// <param name="imageFormatId">Initial value of imageFormatId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static ImageFormat CreateImageFormat(int imageFormatId, string name, global::System.DateTime modifiedDate)
        {
            ImageFormat imageFormat = new ImageFormat();
            imageFormat.imageFormatId = imageFormatId;
            imageFormat.name = name;
            imageFormat.modifiedDate = modifiedDate;
            return imageFormat;
        }
        /// <summary>
        /// There are no comments for Property imageFormatId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int imageFormatId
        {
            get
            {
                return this._imageFormatId;
            }
            set
            {
                this.OnimageFormatIdChanging(value);
                this.ReportPropertyChanging("imageFormatId");
                this._imageFormatId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("imageFormatId");
                this.OnimageFormatIdChanged();
            }
        }
        private int _imageFormatId;
        partial void OnimageFormatIdChanging(int value);
        partial void OnimageFormatIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_ImageFormat", "ImageInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<ImageInstance> ImageInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_ImageFormat", "ImageInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_ImageFormat", "ImageInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.ImageInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// imageMediaInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="ImageInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class ImageInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new ImageInstance object.
        /// </summary>
        /// <param name="imageMediaInstanceId">Initial value of imageMediaInstanceId.</param>
        /// <param name="fileUrl">Initial value of fileUrl.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static ImageInstance CreateImageInstance(global::System.Guid imageMediaInstanceId, string fileUrl, global::System.DateTime modifiedDate)
        {
            ImageInstance imageInstance = new ImageInstance();
            imageInstance.imageMediaInstanceId = imageMediaInstanceId;
            imageInstance.fileUrl = fileUrl;
            imageInstance.modifiedDate = modifiedDate;
            return imageInstance;
        }
        /// <summary>
        /// There are no comments for Property imageMediaInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid imageMediaInstanceId
        {
            get
            {
                return this._imageMediaInstanceId;
            }
            set
            {
                this.OnimageMediaInstanceIdChanging(value);
                this.ReportPropertyChanging("imageMediaInstanceId");
                this._imageMediaInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("imageMediaInstanceId");
                this.OnimageMediaInstanceIdChanged();
            }
        }
        private global::System.Guid _imageMediaInstanceId;
        partial void OnimageMediaInstanceIdChanging(global::System.Guid value);
        partial void OnimageMediaInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property fileUrl in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string fileUrl
        {
            get
            {
                return this._fileUrl;
            }
            set
            {
                this.OnfileUrlChanging(value);
                this.ReportPropertyChanging("fileUrl");
                this._fileUrl = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("fileUrl");
                this.OnfileUrlChanged();
            }
        }
        private string _fileUrl;
        partial void OnfileUrlChanging(string value);
        partial void OnfileUrlChanged();
        /// <summary>
        /// There are no comments for Property fileSize in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> fileSize
        {
            get
            {
                return this._fileSize;
            }
            set
            {
                this.OnfileSizeChanging(value);
                this.ReportPropertyChanging("fileSize");
                this._fileSize = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("fileSize");
                this.OnfileSizeChanged();
            }
        }
        private global::System.Nullable<int> _fileSize;
        partial void OnfileSizeChanging(global::System.Nullable<int> value);
        partial void OnfileSizeChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for ImageFormat in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_ImageFormat", "ImageFormat")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public ImageFormat ImageFormat
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageFormat>("RawCatalogDBModel.FK_ImageInstance_ImageFormat", "ImageFormat").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageFormat>("RawCatalogDBModel.FK_ImageInstance_ImageFormat", "ImageFormat").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for ImageFormat in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<ImageFormat> ImageFormatReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageFormat>("RawCatalogDBModel.FK_ImageInstance_ImageFormat", "ImageFormat");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<ImageFormat>("RawCatalogDBModel.FK_ImageInstance_ImageFormat", "ImageFormat", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for ImageSize in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_ImageSize", "ImageSize")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public ImageSize ImageSize
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageSize>("RawCatalogDBModel.FK_ImageInstance_ImageSize", "ImageSize").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageSize>("RawCatalogDBModel.FK_ImageInstance_ImageSize", "ImageSize").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for ImageSize in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<ImageSize> ImageSizeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageSize>("RawCatalogDBModel.FK_ImageInstance_ImageSize", "ImageSize");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<ImageSize>("RawCatalogDBModel.FK_ImageInstance_ImageSize", "ImageSize", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_Locale", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Locale Locale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_ImageInstance_Locale", "Locale").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_ImageInstance_Locale", "Locale").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Locale> LocaleReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_ImageInstance_Locale", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Locale>("RawCatalogDBModel.FK_ImageInstance_Locale", "Locale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_MediaInstance", "MediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaInstance MediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "MediaInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "MediaInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaInstance> MediaInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "MediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "MediaInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.ImageSize in the schema.
    /// </summary>
    /// <KeyProperties>
    /// imageSizeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="ImageSize")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class ImageSize : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new ImageSize object.
        /// </summary>
        /// <param name="imageSizeId">Initial value of imageSizeId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static ImageSize CreateImageSize(int imageSizeId, global::System.DateTime modifiedDate)
        {
            ImageSize imageSize = new ImageSize();
            imageSize.imageSizeId = imageSizeId;
            imageSize.modifiedDate = modifiedDate;
            return imageSize;
        }
        /// <summary>
        /// There are no comments for Property imageSizeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int imageSizeId
        {
            get
            {
                return this._imageSizeId;
            }
            set
            {
                this.OnimageSizeIdChanging(value);
                this.ReportPropertyChanging("imageSizeId");
                this._imageSizeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("imageSizeId");
                this.OnimageSizeIdChanged();
            }
        }
        private int _imageSizeId;
        partial void OnimageSizeIdChanging(int value);
        partial void OnimageSizeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property width in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> width
        {
            get
            {
                return this._width;
            }
            set
            {
                this.OnwidthChanging(value);
                this.ReportPropertyChanging("width");
                this._width = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("width");
                this.OnwidthChanged();
            }
        }
        private global::System.Nullable<int> _width;
        partial void OnwidthChanging(global::System.Nullable<int> value);
        partial void OnwidthChanged();
        /// <summary>
        /// There are no comments for Property height in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> height
        {
            get
            {
                return this._height;
            }
            set
            {
                this.OnheightChanging(value);
                this.ReportPropertyChanging("height");
                this._height = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("height");
                this.OnheightChanged();
            }
        }
        private global::System.Nullable<int> _height;
        partial void OnheightChanging(global::System.Nullable<int> value);
        partial void OnheightChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_ImageSize", "ImageInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<ImageInstance> ImageInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_ImageSize", "ImageInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_ImageSize", "ImageInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.LicenseType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// licenseTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="LicenseType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class LicenseType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new LicenseType object.
        /// </summary>
        /// <param name="licenseTypeId">Initial value of licenseTypeId.</param>
        /// <param name="licenseClassId">Initial value of licenseClassId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="licenseXML">Initial value of licenseXML.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static LicenseType CreateLicenseType(int licenseTypeId, int licenseClassId, string name, string licenseXML, global::System.DateTime modifiedDate)
        {
            LicenseType licenseType = new LicenseType();
            licenseType.licenseTypeId = licenseTypeId;
            licenseType.licenseClassId = licenseClassId;
            licenseType.name = name;
            licenseType.licenseXML = licenseXML;
            licenseType.modifiedDate = modifiedDate;
            return licenseType;
        }
        /// <summary>
        /// There are no comments for Property licenseTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int licenseTypeId
        {
            get
            {
                return this._licenseTypeId;
            }
            set
            {
                this.OnlicenseTypeIdChanging(value);
                this.ReportPropertyChanging("licenseTypeId");
                this._licenseTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("licenseTypeId");
                this.OnlicenseTypeIdChanged();
            }
        }
        private int _licenseTypeId;
        partial void OnlicenseTypeIdChanging(int value);
        partial void OnlicenseTypeIdChanged();
        /// <summary>
        /// There are no comments for Property licenseClassId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int licenseClassId
        {
            get
            {
                return this._licenseClassId;
            }
            set
            {
                this.OnlicenseClassIdChanging(value);
                this.ReportPropertyChanging("licenseClassId");
                this._licenseClassId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("licenseClassId");
                this.OnlicenseClassIdChanged();
            }
        }
        private int _licenseClassId;
        partial void OnlicenseClassIdChanging(int value);
        partial void OnlicenseClassIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property licenseXML in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string licenseXML
        {
            get
            {
                return this._licenseXML;
            }
            set
            {
                this.OnlicenseXMLChanging(value);
                this.ReportPropertyChanging("licenseXML");
                this._licenseXML = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("licenseXML");
                this.OnlicenseXMLChanged();
            }
        }
        private string _licenseXML;
        partial void OnlicenseXMLChanging(string value);
        partial void OnlicenseXMLChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferInstanceMedia in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_LicenseType", "OfferInstanceMedia")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMedia> OfferInstanceMedia
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_LicenseType", "OfferInstanceMedia");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_LicenseType", "OfferInstanceMedia", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_LicenseType", "OfferInstanceMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMediaInstance> OfferInstanceMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_LicenseType", "OfferInstanceMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_LicenseType", "OfferInstanceMediaInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.LiveSubscriptionFamily in the schema.
    /// </summary>
    /// <KeyProperties>
    /// subscriptionFamilyId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="LiveSubscriptionFamily")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class LiveSubscriptionFamily : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new LiveSubscriptionFamily object.
        /// </summary>
        /// <param name="subscriptionFamilyId">Initial value of subscriptionFamilyId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static LiveSubscriptionFamily CreateLiveSubscriptionFamily(global::System.Guid subscriptionFamilyId, global::System.DateTime modifiedDate)
        {
            LiveSubscriptionFamily liveSubscriptionFamily = new LiveSubscriptionFamily();
            liveSubscriptionFamily.subscriptionFamilyId = subscriptionFamilyId;
            liveSubscriptionFamily.modifiedDate = modifiedDate;
            return liveSubscriptionFamily;
        }
        /// <summary>
        /// There are no comments for Property subscriptionFamilyId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid subscriptionFamilyId
        {
            get
            {
                return this._subscriptionFamilyId;
            }
            set
            {
                this.OnsubscriptionFamilyIdChanging(value);
                this.ReportPropertyChanging("subscriptionFamilyId");
                this._subscriptionFamilyId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("subscriptionFamilyId");
                this.OnsubscriptionFamilyIdChanged();
            }
        }
        private global::System.Guid _subscriptionFamilyId;
        partial void OnsubscriptionFamilyIdChanging(global::System.Guid value);
        partial void OnsubscriptionFamilyIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_LiveSubscriptionFamily_SubscriptionFamily", "SubscriptionFamily")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public SubscriptionFamily SubscriptionFamily
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "SubscriptionFamily").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "SubscriptionFamily").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<SubscriptionFamily> SubscriptionFamilyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "SubscriptionFamily");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "SubscriptionFamily", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Tier in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_LiveSubscriptionFamily_Tier", "Tier")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Tier Tier
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Tier>("RawCatalogDBModel.FK_LiveSubscriptionFamily_Tier", "Tier").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Tier>("RawCatalogDBModel.FK_LiveSubscriptionFamily_Tier", "Tier").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Tier in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Tier> TierReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Tier>("RawCatalogDBModel.FK_LiveSubscriptionFamily_Tier", "Tier");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Tier>("RawCatalogDBModel.FK_LiveSubscriptionFamily_Tier", "Tier", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Locale in the schema.
    /// </summary>
    /// <KeyProperties>
    /// lcid
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Locale")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Locale : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Locale object.
        /// </summary>
        /// <param name="lcid">Initial value of lcid.</param>
        /// <param name="locale1">Initial value of locale1.</param>
        /// <param name="collation">Initial value of collation.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Locale CreateLocale(int lcid, string locale1, string collation, global::System.DateTime modifiedDate)
        {
            Locale locale = new Locale();
            locale.lcid = lcid;
            locale.locale1 = locale1;
            locale.collation = collation;
            locale.modifiedDate = modifiedDate;
            return locale;
        }
        /// <summary>
        /// There are no comments for Property lcid in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int lcid
        {
            get
            {
                return this._lcid;
            }
            set
            {
                this.OnlcidChanging(value);
                this.ReportPropertyChanging("lcid");
                this._lcid = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("lcid");
                this.OnlcidChanged();
            }
        }
        private int _lcid;
        partial void OnlcidChanging(int value);
        partial void OnlcidChanged();
        /// <summary>
        /// There are no comments for Property locale1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string locale1
        {
            get
            {
                return this._locale1;
            }
            set
            {
                this.Onlocale1Changing(value);
                this.ReportPropertyChanging("locale1");
                this._locale1 = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("locale1");
                this.Onlocale1Changed();
            }
        }
        private string _locale1;
        partial void Onlocale1Changing(string value);
        partial void Onlocale1Changed();
        /// <summary>
        /// There are no comments for Property collation in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string collation
        {
            get
            {
                return this._collation;
            }
            set
            {
                this.OncollationChanging(value);
                this.ReportPropertyChanging("collation");
                this._collation = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("collation");
                this.OncollationChanged();
            }
        }
        private string _collation;
        partial void OncollationChanging(string value);
        partial void OncollationChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Locale_Country", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_Locale_Country", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_Locale_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> CountryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_Locale_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_Locale_Country", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameLocale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameLocale_Locale", "GameLocale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameLocale> GameLocale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameLocale>("RawCatalogDBModel.FK_GameLocale_Locale", "GameLocale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameLocale>("RawCatalogDBModel.FK_GameLocale_Locale", "GameLocale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_Locale", "ImageInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<ImageInstance> ImageInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_Locale", "ImageInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_Locale", "ImageInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Locale11 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Locale_Locale", "Locale1")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Locale> Locale11
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Locale>("RawCatalogDBModel.FK_Locale_Locale", "Locale1");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Locale>("RawCatalogDBModel.FK_Locale_Locale", "Locale1", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Locale2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Locale_Locale", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Locale Locale2
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_Locale_Locale", "Locale").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_Locale_Locale", "Locale").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Locale2 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Locale> Locale2Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_Locale_Locale", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Locale>("RawCatalogDBModel.FK_Locale_Locale", "Locale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocale_Locale", "MediaLocale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocale> MediaLocale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocale>("RawCatalogDBModel.FK_MediaLocale_Locale", "MediaLocale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocale>("RawCatalogDBModel.FK_MediaLocale_Locale", "MediaLocale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocaleMap in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_Locale", "MediaLocaleMap")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocaleMap> MediaLocaleMap
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocaleMap>("RawCatalogDBModel.FK_MediaLocaleMap_Locale", "MediaLocaleMap");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocaleMap>("RawCatalogDBModel.FK_MediaLocaleMap_Locale", "MediaLocaleMap", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocaleMap1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_LocaleMap", "MediaLocaleMap")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocaleMap> MediaLocaleMap1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocaleMap>("RawCatalogDBModel.FK_MediaLocaleMap_LocaleMap", "MediaLocaleMap");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocaleMap>("RawCatalogDBModel.FK_MediaLocaleMap_LocaleMap", "MediaLocaleMap", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_VideoInstance_BurntInSubtitleLcid", "VideoInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<VideoInstance> VideoInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_BurntInSubtitleLcid", "VideoInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_BurntInSubtitleLcid", "VideoInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for AppLocale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_AppLocale_Locale", "AppLocale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<AppLocale> AppLocale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<AppLocale>("RawCatalogDBModel.FK_AppLocale_Locale", "AppLocale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<AppLocale>("RawCatalogDBModel.FK_AppLocale_Locale", "AppLocale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocaleUnmapped in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleUnmapped_Locale", "MediaLocaleUnmapped")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocaleUnmapped> MediaLocaleUnmapped
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocaleUnmapped>("RawCatalogDBModel.FK_MediaLocaleUnmapped_Locale", "MediaLocaleUnmapped");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocaleUnmapped>("RawCatalogDBModel.FK_MediaLocaleUnmapped_Locale", "MediaLocaleUnmapped", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaTerm in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaTerm_Locale", "MediaTerm")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaTerm> MediaTerm
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaTerm>("RawCatalogDBModel.FK_MediaTerm_Locale", "MediaTerm");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaTerm>("RawCatalogDBModel.FK_MediaTerm_Locale", "MediaTerm", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Media in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Media")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Media : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Media object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="metadataProviderId">Initial value of metadataProviderId.</param>
        /// <param name="visibilityDate">Initial value of visibilityDate.</param>
        /// <param name="geoCheckPolicy">Initial value of geoCheckPolicy.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Media CreateMedia(global::System.Guid mediaId, int metadataProviderId, global::System.DateTime visibilityDate, byte geoCheckPolicy, global::System.DateTime modifiedDate)
        {
            Media media = new Media();
            media.mediaId = mediaId;
            media.metadataProviderId = metadataProviderId;
            media.visibilityDate = visibilityDate;
            media.geoCheckPolicy = geoCheckPolicy;
            media.modifiedDate = modifiedDate;
            return media;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property metadataProviderId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int metadataProviderId
        {
            get
            {
                return this._metadataProviderId;
            }
            set
            {
                this.OnmetadataProviderIdChanging(value);
                this.ReportPropertyChanging("metadataProviderId");
                this._metadataProviderId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("metadataProviderId");
                this.OnmetadataProviderIdChanged();
            }
        }
        private int _metadataProviderId;
        partial void OnmetadataProviderIdChanging(int value);
        partial void OnmetadataProviderIdChanged();
        /// <summary>
        /// There are no comments for Property originalReleaseDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<global::System.DateTime> originalReleaseDate
        {
            get
            {
                return this._originalReleaseDate;
            }
            set
            {
                this.OnoriginalReleaseDateChanging(value);
                this.ReportPropertyChanging("originalReleaseDate");
                this._originalReleaseDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("originalReleaseDate");
                this.OnoriginalReleaseDateChanged();
            }
        }
        private global::System.Nullable<global::System.DateTime> _originalReleaseDate;
        partial void OnoriginalReleaseDateChanging(global::System.Nullable<global::System.DateTime> value);
        partial void OnoriginalReleaseDateChanged();
        /// <summary>
        /// There are no comments for Property displayOriginalReleaseDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string displayOriginalReleaseDate
        {
            get
            {
                return this._displayOriginalReleaseDate;
            }
            set
            {
                this.OndisplayOriginalReleaseDateChanging(value);
                this.ReportPropertyChanging("displayOriginalReleaseDate");
                this._displayOriginalReleaseDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("displayOriginalReleaseDate");
                this.OndisplayOriginalReleaseDateChanged();
            }
        }
        private string _displayOriginalReleaseDate;
        partial void OndisplayOriginalReleaseDateChanging(string value);
        partial void OndisplayOriginalReleaseDateChanged();
        /// <summary>
        /// There are no comments for Property visibilityDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime visibilityDate
        {
            get
            {
                return this._visibilityDate;
            }
            set
            {
                this.OnvisibilityDateChanging(value);
                this.ReportPropertyChanging("visibilityDate");
                this._visibilityDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("visibilityDate");
                this.OnvisibilityDateChanged();
            }
        }
        private global::System.DateTime _visibilityDate;
        partial void OnvisibilityDateChanging(global::System.DateTime value);
        partial void OnvisibilityDateChanged();
        /// <summary>
        /// There are no comments for Property geoCheckPolicy in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte geoCheckPolicy
        {
            get
            {
                return this._geoCheckPolicy;
            }
            set
            {
                this.OngeoCheckPolicyChanging(value);
                this.ReportPropertyChanging("geoCheckPolicy");
                this._geoCheckPolicy = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("geoCheckPolicy");
                this.OngeoCheckPolicyChanged();
            }
        }
        private byte _geoCheckPolicy;
        partial void OngeoCheckPolicyChanging(byte value);
        partial void OngeoCheckPolicyChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Game_Media", "Game")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Game Game
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_Game_Media", "Game").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_Game_Media", "Game").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Game in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Game> GameReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Game>("RawCatalogDBModel.FK_Game_Media", "Game");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Game>("RawCatalogDBModel.FK_Game_Media", "Game", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContent_Media", "GameContent")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContent GameContent
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContent_Media", "GameContent").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContent_Media", "GameContent").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContent in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContent> GameContentReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContent_Media", "GameContent");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContent>("RawCatalogDBModel.FK_GameContent_Media", "GameContent", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Image_Media", "Image")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Image Image
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Image>("RawCatalogDBModel.FK_Image_Media", "Image").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Image>("RawCatalogDBModel.FK_Image_Media", "Image").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Image> ImageReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Image>("RawCatalogDBModel.FK_Image_Media", "Image");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Image>("RawCatalogDBModel.FK_Image_Media", "Image", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Cache_Media_MediaType", "MediaType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaType MediaType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaType>("RawCatalogDBModel.FK_Cache_Media_MediaType", "MediaType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaType>("RawCatalogDBModel.FK_Cache_Media_MediaType", "MediaType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaType> MediaTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaType>("RawCatalogDBModel.FK_Cache_Media_MediaType", "MediaType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaType>("RawCatalogDBModel.FK_Cache_Media_MediaType", "MediaType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Media_VisibilityStatus", "VisibilityStatus")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public VisibilityStatus VisibilityStatus
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_Media_VisibilityStatus", "VisibilityStatus").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_Media_VisibilityStatus", "VisibilityStatus").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<VisibilityStatus> VisibilityStatusReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_Media_VisibilityStatus", "VisibilityStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_Media_VisibilityStatus", "VisibilityStatus", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaCategory in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaCategory_Media", "MediaCategory")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaCategory> MediaCategory
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaCategory>("RawCatalogDBModel.FK_MediaCategory_Media", "MediaCategory");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaCategory>("RawCatalogDBModel.FK_MediaCategory_Media", "MediaCategory", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaInstance_Media", "MediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaInstance> MediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaInstance>("RawCatalogDBModel.FK_MediaInstance_Media", "MediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaInstance>("RawCatalogDBModel.FK_MediaInstance_Media", "MediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocale_Media", "MediaLocale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocale> MediaLocale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocale>("RawCatalogDBModel.FK_MediaLocale_Media", "MediaLocale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocale>("RawCatalogDBModel.FK_MediaLocale_Media", "MediaLocale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocaleMap in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_Media", "MediaLocaleMap")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocaleMap> MediaLocaleMap
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocaleMap>("RawCatalogDBModel.FK_MediaLocaleMap_Media", "MediaLocaleMap");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocaleMap>("RawCatalogDBModel.FK_MediaLocaleMap_Media", "MediaLocaleMap", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRating in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRating_Video", "MediaRating")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRating> MediaRating
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRating>("RawCatalogDBModel.FK_MediaRating_Video", "MediaRating");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRating>("RawCatalogDBModel.FK_MediaRating_Video", "MediaRating", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRatingDescriptor in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRatingDescriptor_Media", "MediaRatingDescriptor")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRatingDescriptor> MediaRatingDescriptor
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_Media", "MediaRatingDescriptor");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_Media", "MediaRatingDescriptor", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRelationship in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRelationship_Media", "MediaRelationship")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRelationship> MediaRelationship
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRelationship>("RawCatalogDBModel.FK_MediaRelationship_Media", "MediaRelationship");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRelationship>("RawCatalogDBModel.FK_MediaRelationship_Media", "MediaRelationship", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRelationship1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRelationship_RelatedMediaId", "MediaRelationship")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRelationship> MediaRelationship1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRelationship>("RawCatalogDBModel.FK_MediaRelationship_RelatedMediaId", "MediaRelationship");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRelationship>("RawCatalogDBModel.FK_MediaRelationship_RelatedMediaId", "MediaRelationship", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRevenueSku in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRevenueSku_Media", "MediaRevenueSku")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaRevenueSku MediaRevenueSku
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaRevenueSku>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "MediaRevenueSku").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaRevenueSku>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "MediaRevenueSku").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaRevenueSku in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaRevenueSku> MediaRevenueSkuReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaRevenueSku>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "MediaRevenueSku");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaRevenueSku>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "MediaRevenueSku", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Offer_Media", "Offer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Offer> Offer
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Offer>("RawCatalogDBModel.FK_Offer_Media", "Offer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Offer>("RawCatalogDBModel.FK_Offer_Media", "Offer", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceMedia in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_Media", "OfferInstanceMedia")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMedia> OfferInstanceMedia
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_Media", "OfferInstanceMedia");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_Media", "OfferInstanceMedia", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PointsBundle in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PointsBundle_Media", "PointsBundle")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public PointsBundle PointsBundle
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PointsBundle>("RawCatalogDBModel.FK_PointsBundle_Media", "PointsBundle").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PointsBundle>("RawCatalogDBModel.FK_PointsBundle_Media", "PointsBundle").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for PointsBundle in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<PointsBundle> PointsBundleReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PointsBundle>("RawCatalogDBModel.FK_PointsBundle_Media", "PointsBundle");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PointsBundle>("RawCatalogDBModel.FK_PointsBundle_Media", "PointsBundle", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_Media", "Subscription")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Subscription Subscription
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Subscription>("RawCatalogDBModel.FK_Subscription_Media", "Subscription").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Subscription>("RawCatalogDBModel.FK_Subscription_Media", "Subscription").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Subscription> SubscriptionReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Subscription>("RawCatalogDBModel.FK_Subscription_Media", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Subscription>("RawCatalogDBModel.FK_Subscription_Media", "Subscription", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionFamily_Media", "SubscriptionFamily")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public SubscriptionFamily SubscriptionFamily
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "SubscriptionFamily").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "SubscriptionFamily").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<SubscriptionFamily> SubscriptionFamilyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "SubscriptionFamily");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "SubscriptionFamily", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for App in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_App_Media", "App")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public App App
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<App>("RawCatalogDBModel.FK_App_Media", "App").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<App>("RawCatalogDBModel.FK_App_Media", "App").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for App in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<App> AppReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<App>("RawCatalogDBModel.FK_App_Media", "App");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<App>("RawCatalogDBModel.FK_App_Media", "App", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaCapabilityCountry in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaCapabilityCountry_Media", "MediaCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaCapabilityCountry> MediaCapabilityCountry
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaCapabilityCountry>("RawCatalogDBModel.FK_MediaCapabilityCountry_Media", "MediaCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaCapabilityCountry>("RawCatalogDBModel.FK_MediaCapabilityCountry_Media", "MediaCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaLocaleUnmapped in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleUnmapped_Media", "MediaLocaleUnmapped")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaLocaleUnmapped> MediaLocaleUnmapped
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaLocaleUnmapped>("RawCatalogDBModel.FK_MediaLocaleUnmapped_Media", "MediaLocaleUnmapped");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaLocaleUnmapped>("RawCatalogDBModel.FK_MediaLocaleUnmapped_Media", "MediaLocaleUnmapped", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaTerm in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaTerm_Media", "MediaTerm")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaTerm> MediaTerm
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaTerm>("RawCatalogDBModel.FK_MediaTerm_Media", "MediaTerm");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaTerm>("RawCatalogDBModel.FK_MediaTerm_Media", "MediaTerm", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaCategory in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// categoryId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaCategory")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaCategory : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaCategory object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="categoryId">Initial value of categoryId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaCategory CreateMediaCategory(global::System.Guid mediaId, int categoryId, global::System.DateTime modifiedDate)
        {
            MediaCategory mediaCategory = new MediaCategory();
            mediaCategory.mediaId = mediaId;
            mediaCategory.categoryId = categoryId;
            mediaCategory.modifiedDate = modifiedDate;
            return mediaCategory;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property categoryId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int categoryId
        {
            get
            {
                return this._categoryId;
            }
            set
            {
                this.OncategoryIdChanging(value);
                this.ReportPropertyChanging("categoryId");
                this._categoryId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("categoryId");
                this.OncategoryIdChanged();
            }
        }
        private int _categoryId;
        partial void OncategoryIdChanging(int value);
        partial void OncategoryIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_VideoCategory_Category", "Category")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Category Category
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RawCatalogDBModel.FK_VideoCategory_Category", "Category").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RawCatalogDBModel.FK_VideoCategory_Category", "Category").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Category in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Category> CategoryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Category>("RawCatalogDBModel.FK_VideoCategory_Category", "Category");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Category>("RawCatalogDBModel.FK_VideoCategory_Category", "Category", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaCategory_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaCategory_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaCategory_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaCategory_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaCategory_Media", "Media", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaInstance object.
        /// </summary>
        /// <param name="mediaInstanceId">Initial value of mediaInstanceId.</param>
        /// <param name="isAcquirable">Initial value of isAcquirable.</param>
        /// <param name="isAdSupported">Initial value of isAdSupported.</param>
        /// <param name="isPreview">Initial value of isPreview.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaInstance CreateMediaInstance(global::System.Guid mediaInstanceId, byte isAcquirable, byte isAdSupported, byte isPreview, global::System.DateTime modifiedDate)
        {
            MediaInstance mediaInstance = new MediaInstance();
            mediaInstance.mediaInstanceId = mediaInstanceId;
            mediaInstance.isAcquirable = isAcquirable;
            mediaInstance.isAdSupported = isAdSupported;
            mediaInstance.isPreview = isPreview;
            mediaInstance.modifiedDate = modifiedDate;
            return mediaInstance;
        }
        /// <summary>
        /// There are no comments for Property mediaInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaInstanceId
        {
            get
            {
                return this._mediaInstanceId;
            }
            set
            {
                this.OnmediaInstanceIdChanging(value);
                this.ReportPropertyChanging("mediaInstanceId");
                this._mediaInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaInstanceId");
                this.OnmediaInstanceIdChanged();
            }
        }
        private global::System.Guid _mediaInstanceId;
        partial void OnmediaInstanceIdChanging(global::System.Guid value);
        partial void OnmediaInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property isAcquirable in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte isAcquirable
        {
            get
            {
                return this._isAcquirable;
            }
            set
            {
                this.OnisAcquirableChanging(value);
                this.ReportPropertyChanging("isAcquirable");
                this._isAcquirable = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("isAcquirable");
                this.OnisAcquirableChanged();
            }
        }
        private byte _isAcquirable;
        partial void OnisAcquirableChanging(byte value);
        partial void OnisAcquirableChanged();
        /// <summary>
        /// There are no comments for Property isAdSupported in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte isAdSupported
        {
            get
            {
                return this._isAdSupported;
            }
            set
            {
                this.OnisAdSupportedChanging(value);
                this.ReportPropertyChanging("isAdSupported");
                this._isAdSupported = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("isAdSupported");
                this.OnisAdSupportedChanged();
            }
        }
        private byte _isAdSupported;
        partial void OnisAdSupportedChanging(byte value);
        partial void OnisAdSupportedChanged();
        /// <summary>
        /// There are no comments for Property isPreview in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public byte isPreview
        {
            get
            {
                return this._isPreview;
            }
            set
            {
                this.OnisPreviewChanging(value);
                this.ReportPropertyChanging("isPreview");
                this._isPreview = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("isPreview");
                this.OnisPreviewChanged();
            }
        }
        private byte _isPreview;
        partial void OnisPreviewChanging(byte value);
        partial void OnisPreviewChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstance_MediaInstance", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentInstance GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "GameContentInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "GameContentInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentInstance> GameContentInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_MediaInstance", "GameContentInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_ImageInstance_MediaInstance", "ImageInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public ImageInstance ImageInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "ImageInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "ImageInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for ImageInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<ImageInstance> ImageInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "ImageInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<ImageInstance>("RawCatalogDBModel.FK_ImageInstance_MediaInstance", "ImageInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaInstance_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaInstance_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaInstance_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaInstance_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaInstance_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstanceClientType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaInstanceClientType_MediaInstance", "MediaInstanceClientType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaInstanceClientType> MediaInstanceClientType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaInstanceClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_MediaInstance", "MediaInstanceClientType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaInstanceClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_MediaInstance", "MediaInstanceClientType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_MediaInstance", "OfferInstanceMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMediaInstance> OfferInstanceMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_MediaInstance", "OfferInstanceMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_MediaInstance", "OfferInstanceMediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_MediaInstance", "PreviewMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public PreviewMediaInstance PreviewMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "PreviewMediaInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "PreviewMediaInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<PreviewMediaInstance> PreviewMediaInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "PreviewMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "PreviewMediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_VideoInstance_MediaInstance", "VideoInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public VideoInstance VideoInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_MediaInstance", "VideoInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_MediaInstance", "VideoInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<VideoInstance> VideoInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_MediaInstance", "VideoInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_MediaInstance", "VideoInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for AppInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_AppInstance_MediaInstance", "AppInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public AppInstance AppInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AppInstance>("RawCatalogDBModel.FK_AppInstance_MediaInstance", "AppInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AppInstance>("RawCatalogDBModel.FK_AppInstance_MediaInstance", "AppInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for AppInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<AppInstance> AppInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<AppInstance>("RawCatalogDBModel.FK_AppInstance_MediaInstance", "AppInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<AppInstance>("RawCatalogDBModel.FK_AppInstance_MediaInstance", "AppInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaInstanceClientType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaInstanceId
    /// clientTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaInstanceClientType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaInstanceClientType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaInstanceClientType object.
        /// </summary>
        /// <param name="mediaInstanceId">Initial value of mediaInstanceId.</param>
        /// <param name="clientTypeId">Initial value of clientTypeId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaInstanceClientType CreateMediaInstanceClientType(global::System.Guid mediaInstanceId, int clientTypeId, global::System.DateTime modifiedDate)
        {
            MediaInstanceClientType mediaInstanceClientType = new MediaInstanceClientType();
            mediaInstanceClientType.mediaInstanceId = mediaInstanceId;
            mediaInstanceClientType.clientTypeId = clientTypeId;
            mediaInstanceClientType.modifiedDate = modifiedDate;
            return mediaInstanceClientType;
        }
        /// <summary>
        /// There are no comments for Property mediaInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaInstanceId
        {
            get
            {
                return this._mediaInstanceId;
            }
            set
            {
                this.OnmediaInstanceIdChanging(value);
                this.ReportPropertyChanging("mediaInstanceId");
                this._mediaInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaInstanceId");
                this.OnmediaInstanceIdChanged();
            }
        }
        private global::System.Guid _mediaInstanceId;
        partial void OnmediaInstanceIdChanging(global::System.Guid value);
        partial void OnmediaInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property clientTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int clientTypeId
        {
            get
            {
                return this._clientTypeId;
            }
            set
            {
                this.OnclientTypeIdChanging(value);
                this.ReportPropertyChanging("clientTypeId");
                this._clientTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("clientTypeId");
                this.OnclientTypeIdChanged();
            }
        }
        private int _clientTypeId;
        partial void OnclientTypeIdChanging(int value);
        partial void OnclientTypeIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for ClientType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaInstanceClientType_ClientType", "ClientType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public ClientType ClientType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_ClientType", "ClientType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_ClientType", "ClientType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for ClientType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<ClientType> ClientTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<ClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_ClientType", "ClientType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<ClientType>("RawCatalogDBModel.FK_MediaInstanceClientType_ClientType", "ClientType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaInstanceClientType_MediaInstance", "MediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaInstance MediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_MediaInstanceClientType_MediaInstance", "MediaInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_MediaInstanceClientType_MediaInstance", "MediaInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaInstance> MediaInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_MediaInstanceClientType_MediaInstance", "MediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaInstance>("RawCatalogDBModel.FK_MediaInstanceClientType_MediaInstance", "MediaInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaLocale in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// lcid
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaLocale")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaLocale : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaLocale object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="lcid">Initial value of lcid.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaLocale CreateMediaLocale(global::System.Guid mediaId, int lcid, global::System.DateTime modifiedDate)
        {
            MediaLocale mediaLocale = new MediaLocale();
            mediaLocale.mediaId = mediaId;
            mediaLocale.lcid = lcid;
            mediaLocale.modifiedDate = modifiedDate;
            return mediaLocale;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property lcid in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int lcid
        {
            get
            {
                return this._lcid;
            }
            set
            {
                this.OnlcidChanging(value);
                this.ReportPropertyChanging("lcid");
                this._lcid = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("lcid");
                this.OnlcidChanged();
            }
        }
        private int _lcid;
        partial void OnlcidChanging(int value);
        partial void OnlcidChanged();
        /// <summary>
        /// There are no comments for Property title in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string title
        {
            get
            {
                return this._title;
            }
            set
            {
                this.OntitleChanging(value);
                this.ReportPropertyChanging("title");
                this._title = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("title");
                this.OntitleChanged();
            }
        }
        private string _title;
        partial void OntitleChanging(string value);
        partial void OntitleChanged();
        /// <summary>
        /// There are no comments for Property titleSort in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string titleSort
        {
            get
            {
                return this._titleSort;
            }
            set
            {
                this.OntitleSortChanging(value);
                this.ReportPropertyChanging("titleSort");
                this._titleSort = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("titleSort");
                this.OntitleSortChanged();
            }
        }
        private string _titleSort;
        partial void OntitleSortChanging(string value);
        partial void OntitleSortChanged();
        /// <summary>
        /// There are no comments for Property reducedTitle in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string reducedTitle
        {
            get
            {
                return this._reducedTitle;
            }
            set
            {
                this.OnreducedTitleChanging(value);
                this.ReportPropertyChanging("reducedTitle");
                this._reducedTitle = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("reducedTitle");
                this.OnreducedTitleChanged();
            }
        }
        private string _reducedTitle;
        partial void OnreducedTitleChanging(string value);
        partial void OnreducedTitleChanged();
        /// <summary>
        /// There are no comments for Property description in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this.OndescriptionChanging(value);
                this.ReportPropertyChanging("description");
                this._description = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("description");
                this.OndescriptionChanged();
            }
        }
        private string _description;
        partial void OndescriptionChanging(string value);
        partial void OndescriptionChanged();
        /// <summary>
        /// There are no comments for Property reducedDescription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string reducedDescription
        {
            get
            {
                return this._reducedDescription;
            }
            set
            {
                this.OnreducedDescriptionChanging(value);
                this.ReportPropertyChanging("reducedDescription");
                this._reducedDescription = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("reducedDescription");
                this.OnreducedDescriptionChanged();
            }
        }
        private string _reducedDescription;
        partial void OnreducedDescriptionChanging(string value);
        partial void OnreducedDescriptionChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property copyright in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string copyright
        {
            get
            {
                return this._copyright;
            }
            set
            {
                this.OncopyrightChanging(value);
                this.ReportPropertyChanging("copyright");
                this._copyright = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("copyright");
                this.OncopyrightChanged();
            }
        }
        private string _copyright;
        partial void OncopyrightChanging(string value);
        partial void OncopyrightChanged();
        /// <summary>
        /// There are no comments for Property voiceDisplayTitle in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string voiceDisplayTitle
        {
            get
            {
                return this._voiceDisplayTitle;
            }
            set
            {
                this.OnvoiceDisplayTitleChanging(value);
                this.ReportPropertyChanging("voiceDisplayTitle");
                this._voiceDisplayTitle = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("voiceDisplayTitle");
                this.OnvoiceDisplayTitleChanged();
            }
        }
        private string _voiceDisplayTitle;
        partial void OnvoiceDisplayTitleChanging(string value);
        partial void OnvoiceDisplayTitleChanged();
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocale_Locale", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Locale Locale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocale_Locale", "Locale").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocale_Locale", "Locale").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Locale> LocaleReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocale_Locale", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocale_Locale", "Locale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocale_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocale_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocale_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocale_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocale_Media", "Media", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaLocaleMap in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// lcid
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaLocaleMap")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaLocaleMap : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaLocaleMap object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="lcid">Initial value of lcid.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaLocaleMap CreateMediaLocaleMap(global::System.Guid mediaId, int lcid, global::System.DateTime modifiedDate)
        {
            MediaLocaleMap mediaLocaleMap = new MediaLocaleMap();
            mediaLocaleMap.mediaId = mediaId;
            mediaLocaleMap.lcid = lcid;
            mediaLocaleMap.modifiedDate = modifiedDate;
            return mediaLocaleMap;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property lcid in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int lcid
        {
            get
            {
                return this._lcid;
            }
            set
            {
                this.OnlcidChanging(value);
                this.ReportPropertyChanging("lcid");
                this._lcid = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("lcid");
                this.OnlcidChanged();
            }
        }
        private int _lcid;
        partial void OnlcidChanging(int value);
        partial void OnlcidChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_Locale", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Locale Locale
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_Locale", "Locale").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_Locale", "Locale").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Locale in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Locale> LocaleReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_Locale", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_Locale", "Locale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Locale1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_LocaleMap", "Locale")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Locale Locale1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_LocaleMap", "Locale").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_LocaleMap", "Locale").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Locale1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Locale> Locale1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_LocaleMap", "Locale");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Locale>("RawCatalogDBModel.FK_MediaLocaleMap_LocaleMap", "Locale", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaLocaleMap_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocaleMap_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocaleMap_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocaleMap_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaLocaleMap_Media", "Media", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaRating in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// ratingValueId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaRating")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaRating : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaRating object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="ratingValueId">Initial value of ratingValueId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaRating CreateMediaRating(global::System.Guid mediaId, int ratingValueId, global::System.DateTime modifiedDate)
        {
            MediaRating mediaRating = new MediaRating();
            mediaRating.mediaId = mediaId;
            mediaRating.ratingValueId = ratingValueId;
            mediaRating.modifiedDate = modifiedDate;
            return mediaRating;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property ratingValueId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int ratingValueId
        {
            get
            {
                return this._ratingValueId;
            }
            set
            {
                this.OnratingValueIdChanging(value);
                this.ReportPropertyChanging("ratingValueId");
                this._ratingValueId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ratingValueId");
                this.OnratingValueIdChanged();
            }
        }
        private int _ratingValueId;
        partial void OnratingValueIdChanging(int value);
        partial void OnratingValueIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRating_Video", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRating_Video", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRating_Video", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRating_Video", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaRating_Video", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for RatingValue in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRating_RatingValue", "RatingValue")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public RatingValue RatingValue
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<RatingValue>("RawCatalogDBModel.FK_MediaRating_RatingValue", "RatingValue").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<RatingValue>("RawCatalogDBModel.FK_MediaRating_RatingValue", "RatingValue").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for RatingValue in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<RatingValue> RatingValueReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<RatingValue>("RawCatalogDBModel.FK_MediaRating_RatingValue", "RatingValue");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<RatingValue>("RawCatalogDBModel.FK_MediaRating_RatingValue", "RatingValue", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaRatingDescriptor in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// ratingDescriptorId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaRatingDescriptor")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaRatingDescriptor : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaRatingDescriptor object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="ratingDescriptorId">Initial value of ratingDescriptorId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        /// <param name="level">Initial value of level.</param>
        public static MediaRatingDescriptor CreateMediaRatingDescriptor(global::System.Guid mediaId, int ratingDescriptorId, global::System.DateTime modifiedDate, double level)
        {
            MediaRatingDescriptor mediaRatingDescriptor = new MediaRatingDescriptor();
            mediaRatingDescriptor.mediaId = mediaId;
            mediaRatingDescriptor.ratingDescriptorId = ratingDescriptorId;
            mediaRatingDescriptor.modifiedDate = modifiedDate;
            mediaRatingDescriptor.level = level;
            return mediaRatingDescriptor;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property ratingDescriptorId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int ratingDescriptorId
        {
            get
            {
                return this._ratingDescriptorId;
            }
            set
            {
                this.OnratingDescriptorIdChanging(value);
                this.ReportPropertyChanging("ratingDescriptorId");
                this._ratingDescriptorId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ratingDescriptorId");
                this.OnratingDescriptorIdChanged();
            }
        }
        private int _ratingDescriptorId;
        partial void OnratingDescriptorIdChanging(int value);
        partial void OnratingDescriptorIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property level in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public double level
        {
            get
            {
                return this._level;
            }
            set
            {
                this.OnlevelChanging(value);
                this.ReportPropertyChanging("level");
                this._level = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("level");
                this.OnlevelChanged();
            }
        }
        private double _level;
        partial void OnlevelChanging(double value);
        partial void OnlevelChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRatingDescriptor_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRatingDescriptor_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRatingDescriptor_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRatingDescriptor_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaRatingDescriptor_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for RatingDescriptor in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRatingDescriptor_RatingDescriptor", "RatingDescriptor")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public RatingDescriptor RatingDescriptor
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<RatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_RatingDescriptor", "RatingDescriptor").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<RatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_RatingDescriptor", "RatingDescriptor").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for RatingDescriptor in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<RatingDescriptor> RatingDescriptorReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<RatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_RatingDescriptor", "RatingDescriptor");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<RatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_RatingDescriptor", "RatingDescriptor", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaRelationship in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// relatedMediaId
    /// mediaRelationshipTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaRelationship")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaRelationship : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaRelationship object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="relatedMediaId">Initial value of relatedMediaId.</param>
        /// <param name="mediaRelationshipTypeId">Initial value of mediaRelationshipTypeId.</param>
        /// <param name="sortOrder">Initial value of sortOrder.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaRelationship CreateMediaRelationship(global::System.Guid mediaId, global::System.Guid relatedMediaId, int mediaRelationshipTypeId, int sortOrder, global::System.DateTime modifiedDate)
        {
            MediaRelationship mediaRelationship = new MediaRelationship();
            mediaRelationship.mediaId = mediaId;
            mediaRelationship.relatedMediaId = relatedMediaId;
            mediaRelationship.mediaRelationshipTypeId = mediaRelationshipTypeId;
            mediaRelationship.sortOrder = sortOrder;
            mediaRelationship.modifiedDate = modifiedDate;
            return mediaRelationship;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property relatedMediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid relatedMediaId
        {
            get
            {
                return this._relatedMediaId;
            }
            set
            {
                this.OnrelatedMediaIdChanging(value);
                this.ReportPropertyChanging("relatedMediaId");
                this._relatedMediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("relatedMediaId");
                this.OnrelatedMediaIdChanged();
            }
        }
        private global::System.Guid _relatedMediaId;
        partial void OnrelatedMediaIdChanging(global::System.Guid value);
        partial void OnrelatedMediaIdChanged();
        /// <summary>
        /// There are no comments for Property mediaRelationshipTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int mediaRelationshipTypeId
        {
            get
            {
                return this._mediaRelationshipTypeId;
            }
            set
            {
                this.OnmediaRelationshipTypeIdChanging(value);
                this.ReportPropertyChanging("mediaRelationshipTypeId");
                this._mediaRelationshipTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaRelationshipTypeId");
                this.OnmediaRelationshipTypeIdChanged();
            }
        }
        private int _mediaRelationshipTypeId;
        partial void OnmediaRelationshipTypeIdChanging(int value);
        partial void OnmediaRelationshipTypeIdChanged();
        /// <summary>
        /// There are no comments for Property sortOrder in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int sortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                this.OnsortOrderChanging(value);
                this.ReportPropertyChanging("sortOrder");
                this._sortOrder = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("sortOrder");
                this.OnsortOrderChanged();
            }
        }
        private int _sortOrder;
        partial void OnsortOrderChanging(int value);
        partial void OnsortOrderChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRelationship_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRelationship_RelatedMediaId", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_RelatedMediaId", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_RelatedMediaId", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> Media1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_RelatedMediaId", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaRelationship_RelatedMediaId", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRelationshipType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRelationship_MediaRelationshipType", "MediaRelationshipType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaRelationshipType MediaRelationshipType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaRelationshipType>("RawCatalogDBModel.FK_MediaRelationship_MediaRelationshipType", "MediaRelationshipType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaRelationshipType>("RawCatalogDBModel.FK_MediaRelationship_MediaRelationshipType", "MediaRelationshipType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaRelationshipType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaRelationshipType> MediaRelationshipTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaRelationshipType>("RawCatalogDBModel.FK_MediaRelationship_MediaRelationshipType", "MediaRelationshipType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaRelationshipType>("RawCatalogDBModel.FK_MediaRelationship_MediaRelationshipType", "MediaRelationshipType", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaRelationshipType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaRelationshipTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaRelationshipType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaRelationshipType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaRelationshipType object.
        /// </summary>
        /// <param name="mediaRelationshipTypeId">Initial value of mediaRelationshipTypeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaRelationshipType CreateMediaRelationshipType(int mediaRelationshipTypeId, string name, global::System.DateTime modifiedDate)
        {
            MediaRelationshipType mediaRelationshipType = new MediaRelationshipType();
            mediaRelationshipType.mediaRelationshipTypeId = mediaRelationshipTypeId;
            mediaRelationshipType.name = name;
            mediaRelationshipType.modifiedDate = modifiedDate;
            return mediaRelationshipType;
        }
        /// <summary>
        /// There are no comments for Property mediaRelationshipTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int mediaRelationshipTypeId
        {
            get
            {
                return this._mediaRelationshipTypeId;
            }
            set
            {
                this.OnmediaRelationshipTypeIdChanging(value);
                this.ReportPropertyChanging("mediaRelationshipTypeId");
                this._mediaRelationshipTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaRelationshipTypeId");
                this.OnmediaRelationshipTypeIdChanged();
            }
        }
        private int _mediaRelationshipTypeId;
        partial void OnmediaRelationshipTypeIdChanging(int value);
        partial void OnmediaRelationshipTypeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for MediaRelationship in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRelationship_MediaRelationshipType", "MediaRelationship")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRelationship> MediaRelationship
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRelationship>("RawCatalogDBModel.FK_MediaRelationship_MediaRelationshipType", "MediaRelationship");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRelationship>("RawCatalogDBModel.FK_MediaRelationship_MediaRelationshipType", "MediaRelationship", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaRevenueSku in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaRevenueSku")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaRevenueSku : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaRevenueSku object.
        /// </summary>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="revenueSku">Initial value of revenueSku.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaRevenueSku CreateMediaRevenueSku(global::System.Guid mediaId, string revenueSku, global::System.DateTime modifiedDate)
        {
            MediaRevenueSku mediaRevenueSku = new MediaRevenueSku();
            mediaRevenueSku.mediaId = mediaId;
            mediaRevenueSku.revenueSku = revenueSku;
            mediaRevenueSku.modifiedDate = modifiedDate;
            return mediaRevenueSku;
        }
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property revenueSku in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string revenueSku
        {
            get
            {
                return this._revenueSku;
            }
            set
            {
                this.OnrevenueSkuChanging(value);
                this.ReportPropertyChanging("revenueSku");
                this._revenueSku = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("revenueSku");
                this.OnrevenueSkuChanged();
            }
        }
        private string _revenueSku;
        partial void OnrevenueSkuChanging(string value);
        partial void OnrevenueSkuChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRevenueSku_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_MediaRevenueSku_Media", "Media", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.MediaType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// mediaTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="MediaType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class MediaType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new MediaType object.
        /// </summary>
        /// <param name="mediaTypeId">Initial value of mediaTypeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="mediaClass">Initial value of mediaClass.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static MediaType CreateMediaType(int mediaTypeId, string name, string mediaClass, global::System.DateTime modifiedDate)
        {
            MediaType mediaType = new MediaType();
            mediaType.mediaTypeId = mediaTypeId;
            mediaType.name = name;
            mediaType.mediaClass = mediaClass;
            mediaType.modifiedDate = modifiedDate;
            return mediaType;
        }
        /// <summary>
        /// There are no comments for Property mediaTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int mediaTypeId
        {
            get
            {
                return this._mediaTypeId;
            }
            set
            {
                this.OnmediaTypeIdChanging(value);
                this.ReportPropertyChanging("mediaTypeId");
                this._mediaTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaTypeId");
                this.OnmediaTypeIdChanged();
            }
        }
        private int _mediaTypeId;
        partial void OnmediaTypeIdChanging(int value);
        partial void OnmediaTypeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property mediaClass in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string mediaClass
        {
            get
            {
                return this._mediaClass;
            }
            set
            {
                this.OnmediaClassChanging(value);
                this.ReportPropertyChanging("mediaClass");
                this._mediaClass = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("mediaClass");
                this.OnmediaClassChanged();
            }
        }
        private string _mediaClass;
        partial void OnmediaClassChanging(string value);
        partial void OnmediaClassChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Cache_Media_MediaType", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Media> Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Media>("RawCatalogDBModel.FK_Cache_Media_MediaType", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Media>("RawCatalogDBModel.FK_Cache_Media_MediaType", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_MediaType", "PricingRule")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PricingRule> PricingRule
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_MediaType", "PricingRule");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_MediaType", "PricingRule", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Offer in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Offer")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Offer : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Offer object.
        /// </summary>
        /// <param name="offerId">Initial value of offerId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Offer CreateOffer(global::System.Guid offerId, string name, global::System.DateTime modifiedDate)
        {
            Offer offer = new Offer();
            offer.offerId = offerId;
            offer.name = name;
            offer.modifiedDate = modifiedDate;
            return offer;
        }
        /// <summary>
        /// There are no comments for Property offerId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerId
        {
            get
            {
                return this._offerId;
            }
            set
            {
                this.OnofferIdChanging(value);
                this.ReportPropertyChanging("offerId");
                this._offerId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerId");
                this.OnofferIdChanged();
            }
        }
        private global::System.Guid _offerId;
        partial void OnofferIdChanging(global::System.Guid value);
        partial void OnofferIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Offer_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Offer_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Offer_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Offer_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_Offer_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Offer_OfferType", "OfferType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferType OfferType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferType>("RawCatalogDBModel.FK_Offer_OfferType", "OfferType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferType>("RawCatalogDBModel.FK_Offer_OfferType", "OfferType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferType> OfferTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferType>("RawCatalogDBModel.FK_Offer_OfferType", "OfferType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferType>("RawCatalogDBModel.FK_Offer_OfferType", "OfferType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_Offer", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstance> OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_Offer", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_Offer", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferRelationShip in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferRelationShip_Offer", "OfferRelationShip")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferRelationShip> OfferRelationShip
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferRelationShip>("RawCatalogDBModel.FK_OfferRelationShip_Offer", "OfferRelationShip");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferRelationShip>("RawCatalogDBModel.FK_OfferRelationShip_Offer", "OfferRelationShip", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferRelationShip1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferRelationShip_RelatedOffer", "OfferRelationShip")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferRelationShip> OfferRelationShip1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferRelationShip>("RawCatalogDBModel.FK_OfferRelationShip_RelatedOffer", "OfferRelationShip");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferRelationShip>("RawCatalogDBModel.FK_OfferRelationShip_RelatedOffer", "OfferRelationShip", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferStore in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferStore_Offer", "OfferStore")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferStore> OfferStore
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferStore>("RawCatalogDBModel.FK_OfferStore_Offer", "OfferStore");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferStore>("RawCatalogDBModel.FK_OfferStore_Offer", "OfferStore", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for LegacyOfferMapping in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_LegacyOfferMapping_Offer", "LegacyOfferMapping")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public LegacyOfferMapping LegacyOfferMapping
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LegacyOfferMapping>("RawCatalogDBModel.FK_LegacyOfferMapping_Offer", "LegacyOfferMapping").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LegacyOfferMapping>("RawCatalogDBModel.FK_LegacyOfferMapping_Offer", "LegacyOfferMapping").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for LegacyOfferMapping in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<LegacyOfferMapping> LegacyOfferMappingReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LegacyOfferMapping>("RawCatalogDBModel.FK_LegacyOfferMapping_Offer", "LegacyOfferMapping");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LegacyOfferMapping>("RawCatalogDBModel.FK_LegacyOfferMapping_Offer", "LegacyOfferMapping", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferInstance object.
        /// </summary>
        /// <param name="offerInstanceId">Initial value of offerInstanceId.</param>
        /// <param name="price">Initial value of price.</param>
        /// <param name="reportingRetailValue">Initial value of reportingRetailValue.</param>
        /// <param name="startDateTime">Initial value of startDateTime.</param>
        /// <param name="endDateTime">Initial value of endDateTime.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        /// <param name="suggestedRetailPrice">Initial value of suggestedRetailPrice.</param>
        /// <param name="wholesalePrice">Initial value of wholesalePrice.</param>
        public static OfferInstance CreateOfferInstance(global::System.Guid offerInstanceId, decimal price, decimal reportingRetailValue, global::System.DateTime startDateTime, global::System.DateTime endDateTime, global::System.DateTime modifiedDate, decimal suggestedRetailPrice, decimal wholesalePrice)
        {
            OfferInstance offerInstance = new OfferInstance();
            offerInstance.offerInstanceId = offerInstanceId;
            offerInstance.price = price;
            offerInstance.reportingRetailValue = reportingRetailValue;
            offerInstance.startDateTime = startDateTime;
            offerInstance.endDateTime = endDateTime;
            offerInstance.modifiedDate = modifiedDate;
            offerInstance.suggestedRetailPrice = suggestedRetailPrice;
            offerInstance.wholesalePrice = wholesalePrice;
            return offerInstance;
        }
        /// <summary>
        /// There are no comments for Property offerInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerInstanceId
        {
            get
            {
                return this._offerInstanceId;
            }
            set
            {
                this.OnofferInstanceIdChanging(value);
                this.ReportPropertyChanging("offerInstanceId");
                this._offerInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerInstanceId");
                this.OnofferInstanceIdChanged();
            }
        }
        private global::System.Guid _offerInstanceId;
        partial void OnofferInstanceIdChanging(global::System.Guid value);
        partial void OnofferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property price in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public decimal price
        {
            get
            {
                return this._price;
            }
            set
            {
                this.OnpriceChanging(value);
                this.ReportPropertyChanging("price");
                this._price = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("price");
                this.OnpriceChanged();
            }
        }
        private decimal _price;
        partial void OnpriceChanging(decimal value);
        partial void OnpriceChanged();
        /// <summary>
        /// There are no comments for Property reportingRetailValue in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public decimal reportingRetailValue
        {
            get
            {
                return this._reportingRetailValue;
            }
            set
            {
                this.OnreportingRetailValueChanging(value);
                this.ReportPropertyChanging("reportingRetailValue");
                this._reportingRetailValue = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("reportingRetailValue");
                this.OnreportingRetailValueChanged();
            }
        }
        private decimal _reportingRetailValue;
        partial void OnreportingRetailValueChanging(decimal value);
        partial void OnreportingRetailValueChanged();
        /// <summary>
        /// There are no comments for Property startDateTime in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime startDateTime
        {
            get
            {
                return this._startDateTime;
            }
            set
            {
                this.OnstartDateTimeChanging(value);
                this.ReportPropertyChanging("startDateTime");
                this._startDateTime = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("startDateTime");
                this.OnstartDateTimeChanged();
            }
        }
        private global::System.DateTime _startDateTime;
        partial void OnstartDateTimeChanging(global::System.DateTime value);
        partial void OnstartDateTimeChanged();
        /// <summary>
        /// There are no comments for Property endDateTime in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime endDateTime
        {
            get
            {
                return this._endDateTime;
            }
            set
            {
                this.OnendDateTimeChanging(value);
                this.ReportPropertyChanging("endDateTime");
                this._endDateTime = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("endDateTime");
                this.OnendDateTimeChanged();
            }
        }
        private global::System.DateTime _endDateTime;
        partial void OnendDateTimeChanging(global::System.DateTime value);
        partial void OnendDateTimeChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property externalOfferInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string externalOfferInstanceId
        {
            get
            {
                return this._externalOfferInstanceId;
            }
            set
            {
                this.OnexternalOfferInstanceIdChanging(value);
                this.ReportPropertyChanging("externalOfferInstanceId");
                this._externalOfferInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("externalOfferInstanceId");
                this.OnexternalOfferInstanceIdChanged();
            }
        }
        private string _externalOfferInstanceId;
        partial void OnexternalOfferInstanceIdChanging(string value);
        partial void OnexternalOfferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property suggestedRetailPrice in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public decimal suggestedRetailPrice
        {
            get
            {
                return this._suggestedRetailPrice;
            }
            set
            {
                this.OnsuggestedRetailPriceChanging(value);
                this.ReportPropertyChanging("suggestedRetailPrice");
                this._suggestedRetailPrice = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("suggestedRetailPrice");
                this.OnsuggestedRetailPriceChanged();
            }
        }
        private decimal _suggestedRetailPrice;
        partial void OnsuggestedRetailPriceChanging(decimal value);
        partial void OnsuggestedRetailPriceChanged();
        /// <summary>
        /// There are no comments for Property wholesalePrice in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public decimal wholesalePrice
        {
            get
            {
                return this._wholesalePrice;
            }
            set
            {
                this.OnwholesalePriceChanging(value);
                this.ReportPropertyChanging("wholesalePrice");
                this._wholesalePrice = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("wholesalePrice");
                this.OnwholesalePriceChanged();
            }
        }
        private decimal _wholesalePrice;
        partial void OnwholesalePriceChanging(decimal value);
        partial void OnwholesalePriceChanged();
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_Country", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_OfferInstance_Country", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_OfferInstance_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> CountryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_OfferInstance_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_OfferInstance_Country", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_PriceCurrencyCode", "Currency")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Currency Currency
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_PriceCurrencyCode", "Currency").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_PriceCurrencyCode", "Currency").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_PriceCurrencyCode", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_PriceCurrencyCode", "Currency", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Currency1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_ReportingRetailValueCurrencyCode", "Currency")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Currency Currency1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_ReportingRetailValueCurrencyCode", "Currency").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_ReportingRetailValueCurrencyCode", "Currency").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Currency1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Currency> Currency1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_ReportingRetailValueCurrencyCode", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Currency>("RawCatalogDBModel.FK_OfferInstance_ReportingRetailValueCurrencyCode", "Currency", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_Offer", "Offer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Offer Offer
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferInstance_Offer", "Offer").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferInstance_Offer", "Offer").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Offer> OfferReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferInstance_Offer", "Offer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Offer>("RawCatalogDBModel.FK_OfferInstance_Offer", "Offer", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PaymentType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_PaymentType", "PaymentType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public PaymentType PaymentType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PaymentType>("RawCatalogDBModel.FK_OfferInstance_PaymentType", "PaymentType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PaymentType>("RawCatalogDBModel.FK_OfferInstance_PaymentType", "PaymentType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for PaymentType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<PaymentType> PaymentTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PaymentType>("RawCatalogDBModel.FK_OfferInstance_PaymentType", "PaymentType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PaymentType>("RawCatalogDBModel.FK_OfferInstance_PaymentType", "PaymentType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_PricingRule", "PricingRule")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public PricingRule PricingRule
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PricingRule>("RawCatalogDBModel.FK_OfferInstance_PricingRule", "PricingRule").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PricingRule>("RawCatalogDBModel.FK_OfferInstance_PricingRule", "PricingRule").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<PricingRule> PricingRuleReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PricingRule>("RawCatalogDBModel.FK_OfferInstance_PricingRule", "PricingRule");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PricingRule>("RawCatalogDBModel.FK_OfferInstance_PricingRule", "PricingRule", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for VisibilityLevel in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_VisibilityLevel", "VisibilityLevel")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public VisibilityLevel VisibilityLevel
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityLevel>("RawCatalogDBModel.FK_OfferInstance_VisibilityLevel", "VisibilityLevel").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityLevel>("RawCatalogDBModel.FK_OfferInstance_VisibilityLevel", "VisibilityLevel").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for VisibilityLevel in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<VisibilityLevel> VisibilityLevelReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityLevel>("RawCatalogDBModel.FK_OfferInstance_VisibilityLevel", "VisibilityLevel");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<VisibilityLevel>("RawCatalogDBModel.FK_OfferInstance_VisibilityLevel", "VisibilityLevel", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstanceGameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceGameContentInstance> OfferInstanceGameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceGameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstanceGameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceGameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstanceGameContentInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceGameContentInstanceAsset in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstanceGameContentInstanceAsset")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceGameContentInstanceAsset> OfferInstanceGameContentInstanceAsset
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceGameContentInstanceAsset>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstanceGameContentInstanceAsset");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceGameContentInstanceAsset>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstanceGameContentInstanceAsset", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceMedia in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_OfferInstance", "OfferInstanceMedia")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMedia> OfferInstanceMedia
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_OfferInstance", "OfferInstanceMedia");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_OfferInstance", "OfferInstanceMedia", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstanceMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMediaInstance> OfferInstanceMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstanceMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstanceMediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceUserType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceUserType_OfferInstance", "OfferInstanceUserType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceUserType> OfferInstanceUserType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceUserType>("RawCatalogDBModel.FK_OfferInstanceUserType_OfferInstance", "OfferInstanceUserType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceUserType>("RawCatalogDBModel.FK_OfferInstanceUserType_OfferInstance", "OfferInstanceUserType", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferInstanceGameContentInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerInstanceId
    /// gameContentInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferInstanceGameContentInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferInstanceGameContentInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferInstanceGameContentInstance object.
        /// </summary>
        /// <param name="offerInstanceId">Initial value of offerInstanceId.</param>
        /// <param name="gameContentInstanceId">Initial value of gameContentInstanceId.</param>
        /// <param name="licenseExtensionBits">Initial value of licenseExtensionBits.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferInstanceGameContentInstance CreateOfferInstanceGameContentInstance(global::System.Guid offerInstanceId, global::System.Guid gameContentInstanceId, int licenseExtensionBits, global::System.DateTime modifiedDate)
        {
            OfferInstanceGameContentInstance offerInstanceGameContentInstance = new OfferInstanceGameContentInstance();
            offerInstanceGameContentInstance.offerInstanceId = offerInstanceId;
            offerInstanceGameContentInstance.gameContentInstanceId = gameContentInstanceId;
            offerInstanceGameContentInstance.licenseExtensionBits = licenseExtensionBits;
            offerInstanceGameContentInstance.modifiedDate = modifiedDate;
            return offerInstanceGameContentInstance;
        }
        /// <summary>
        /// There are no comments for Property offerInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerInstanceId
        {
            get
            {
                return this._offerInstanceId;
            }
            set
            {
                this.OnofferInstanceIdChanging(value);
                this.ReportPropertyChanging("offerInstanceId");
                this._offerInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerInstanceId");
                this.OnofferInstanceIdChanged();
            }
        }
        private global::System.Guid _offerInstanceId;
        partial void OnofferInstanceIdChanging(global::System.Guid value);
        partial void OnofferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property gameContentInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentInstanceId
        {
            get
            {
                return this._gameContentInstanceId;
            }
            set
            {
                this.OngameContentInstanceIdChanging(value);
                this.ReportPropertyChanging("gameContentInstanceId");
                this._gameContentInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentInstanceId");
                this.OngameContentInstanceIdChanged();
            }
        }
        private global::System.Guid _gameContentInstanceId;
        partial void OngameContentInstanceIdChanging(global::System.Guid value);
        partial void OngameContentInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property licenseExtensionBits in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int licenseExtensionBits
        {
            get
            {
                return this._licenseExtensionBits;
            }
            set
            {
                this.OnlicenseExtensionBitsChanging(value);
                this.ReportPropertyChanging("licenseExtensionBits");
                this._licenseExtensionBits = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("licenseExtensionBits");
                this.OnlicenseExtensionBitsChanged();
            }
        }
        private int _licenseExtensionBits;
        partial void OnlicenseExtensionBitsChanging(int value);
        partial void OnlicenseExtensionBitsChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstance_GameContentInstance", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentInstance GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_GameContentInstance", "GameContentInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_GameContentInstance", "GameContentInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentInstance> GameContentInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_GameContentInstance", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_GameContentInstance", "GameContentInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferInstance OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferInstance> OfferInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstance_OfferInstance", "OfferInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferInstanceGameContentInstanceAsset in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerInstanceId
    /// gameContentInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferInstanceGameContentInstanceAsset")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferInstanceGameContentInstanceAsset : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferInstanceGameContentInstanceAsset object.
        /// </summary>
        /// <param name="offerInstanceId">Initial value of offerInstanceId.</param>
        /// <param name="gameContentInstanceId">Initial value of gameContentInstanceId.</param>
        /// <param name="assetId">Initial value of assetId.</param>
        /// <param name="quantity">Initial value of quantity.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferInstanceGameContentInstanceAsset CreateOfferInstanceGameContentInstanceAsset(global::System.Guid offerInstanceId, global::System.Guid gameContentInstanceId, int assetId, int quantity, global::System.DateTime modifiedDate)
        {
            OfferInstanceGameContentInstanceAsset offerInstanceGameContentInstanceAsset = new OfferInstanceGameContentInstanceAsset();
            offerInstanceGameContentInstanceAsset.offerInstanceId = offerInstanceId;
            offerInstanceGameContentInstanceAsset.gameContentInstanceId = gameContentInstanceId;
            offerInstanceGameContentInstanceAsset.assetId = assetId;
            offerInstanceGameContentInstanceAsset.quantity = quantity;
            offerInstanceGameContentInstanceAsset.modifiedDate = modifiedDate;
            return offerInstanceGameContentInstanceAsset;
        }
        /// <summary>
        /// There are no comments for Property offerInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerInstanceId
        {
            get
            {
                return this._offerInstanceId;
            }
            set
            {
                this.OnofferInstanceIdChanging(value);
                this.ReportPropertyChanging("offerInstanceId");
                this._offerInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerInstanceId");
                this.OnofferInstanceIdChanged();
            }
        }
        private global::System.Guid _offerInstanceId;
        partial void OnofferInstanceIdChanging(global::System.Guid value);
        partial void OnofferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property gameContentInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid gameContentInstanceId
        {
            get
            {
                return this._gameContentInstanceId;
            }
            set
            {
                this.OngameContentInstanceIdChanging(value);
                this.ReportPropertyChanging("gameContentInstanceId");
                this._gameContentInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("gameContentInstanceId");
                this.OngameContentInstanceIdChanged();
            }
        }
        private global::System.Guid _gameContentInstanceId;
        partial void OngameContentInstanceIdChanging(global::System.Guid value);
        partial void OngameContentInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property assetId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int assetId
        {
            get
            {
                return this._assetId;
            }
            set
            {
                this.OnassetIdChanging(value);
                this.ReportPropertyChanging("assetId");
                this._assetId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("assetId");
                this.OnassetIdChanged();
            }
        }
        private int _assetId;
        partial void OnassetIdChanging(int value);
        partial void OnassetIdChanged();
        /// <summary>
        /// There are no comments for Property quantity in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int quantity
        {
            get
            {
                return this._quantity;
            }
            set
            {
                this.OnquantityChanging(value);
                this.ReportPropertyChanging("quantity");
                this._quantity = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("quantity");
                this.OnquantityChanged();
            }
        }
        private int _quantity;
        partial void OnquantityChanging(int value);
        partial void OnquantityChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public GameContentInstance GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "GameContentInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "GameContentInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<GameContentInstance> GameContentInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<GameContentInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_GameContentInstance", "GameContentInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferInstance OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferInstance> OfferInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceGameContentInstanceAsset_OfferInstance", "OfferInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferInstanceMedia in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerInstanceId
    /// mediaId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferInstanceMedia")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferInstanceMedia : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferInstanceMedia object.
        /// </summary>
        /// <param name="offerInstanceId">Initial value of offerInstanceId.</param>
        /// <param name="mediaId">Initial value of mediaId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferInstanceMedia CreateOfferInstanceMedia(global::System.Guid offerInstanceId, global::System.Guid mediaId, global::System.DateTime modifiedDate)
        {
            OfferInstanceMedia offerInstanceMedia = new OfferInstanceMedia();
            offerInstanceMedia.offerInstanceId = offerInstanceId;
            offerInstanceMedia.mediaId = mediaId;
            offerInstanceMedia.modifiedDate = modifiedDate;
            return offerInstanceMedia;
        }
        /// <summary>
        /// There are no comments for Property offerInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerInstanceId
        {
            get
            {
                return this._offerInstanceId;
            }
            set
            {
                this.OnofferInstanceIdChanging(value);
                this.ReportPropertyChanging("offerInstanceId");
                this._offerInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerInstanceId");
                this.OnofferInstanceIdChanged();
            }
        }
        private global::System.Guid _offerInstanceId;
        partial void OnofferInstanceIdChanging(global::System.Guid value);
        partial void OnofferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property mediaId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaId
        {
            get
            {
                return this._mediaId;
            }
            set
            {
                this.OnmediaIdChanging(value);
                this.ReportPropertyChanging("mediaId");
                this._mediaId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaId");
                this.OnmediaIdChanged();
            }
        }
        private global::System.Guid _mediaId;
        partial void OnmediaIdChanging(global::System.Guid value);
        partial void OnmediaIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for LicenseType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_LicenseType", "LicenseType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public LicenseType LicenseType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMedia_LicenseType", "LicenseType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMedia_LicenseType", "LicenseType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for LicenseType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<LicenseType> LicenseTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMedia_LicenseType", "LicenseType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMedia_LicenseType", "LicenseType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_OfferInstanceMedia_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_OfferInstanceMedia_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_OfferInstanceMedia_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_OfferInstanceMedia_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_OfferInstance", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferInstance OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMedia_OfferInstance", "OfferInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMedia_OfferInstance", "OfferInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferInstance> OfferInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMedia_OfferInstance", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMedia_OfferInstance", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_Provider", "Provider")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Provider Provider
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMedia_Provider", "Provider").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMedia_Provider", "Provider").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Provider> ProviderReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMedia_Provider", "Provider");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMedia_Provider", "Provider", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_VisibilityStatus", "VisibilityStatus")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public VisibilityStatus VisibilityStatus
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMedia_VisibilityStatus", "VisibilityStatus").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMedia_VisibilityStatus", "VisibilityStatus").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<VisibilityStatus> VisibilityStatusReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMedia_VisibilityStatus", "VisibilityStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMedia_VisibilityStatus", "VisibilityStatus", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferInstanceMediaInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerInstanceId
    /// mediaInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferInstanceMediaInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferInstanceMediaInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferInstanceMediaInstance object.
        /// </summary>
        /// <param name="offerInstanceId">Initial value of offerInstanceId.</param>
        /// <param name="mediaInstanceId">Initial value of mediaInstanceId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferInstanceMediaInstance CreateOfferInstanceMediaInstance(global::System.Guid offerInstanceId, global::System.Guid mediaInstanceId, global::System.DateTime modifiedDate)
        {
            OfferInstanceMediaInstance offerInstanceMediaInstance = new OfferInstanceMediaInstance();
            offerInstanceMediaInstance.offerInstanceId = offerInstanceId;
            offerInstanceMediaInstance.mediaInstanceId = mediaInstanceId;
            offerInstanceMediaInstance.modifiedDate = modifiedDate;
            return offerInstanceMediaInstance;
        }
        /// <summary>
        /// There are no comments for Property offerInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerInstanceId
        {
            get
            {
                return this._offerInstanceId;
            }
            set
            {
                this.OnofferInstanceIdChanging(value);
                this.ReportPropertyChanging("offerInstanceId");
                this._offerInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerInstanceId");
                this.OnofferInstanceIdChanged();
            }
        }
        private global::System.Guid _offerInstanceId;
        partial void OnofferInstanceIdChanging(global::System.Guid value);
        partial void OnofferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property mediaInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid mediaInstanceId
        {
            get
            {
                return this._mediaInstanceId;
            }
            set
            {
                this.OnmediaInstanceIdChanging(value);
                this.ReportPropertyChanging("mediaInstanceId");
                this._mediaInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("mediaInstanceId");
                this.OnmediaInstanceIdChanged();
            }
        }
        private global::System.Guid _mediaInstanceId;
        partial void OnmediaInstanceIdChanging(global::System.Guid value);
        partial void OnmediaInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for LicenseType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_LicenseType", "LicenseType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public LicenseType LicenseType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_LicenseType", "LicenseType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_LicenseType", "LicenseType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for LicenseType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<LicenseType> LicenseTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_LicenseType", "LicenseType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LicenseType>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_LicenseType", "LicenseType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_MediaInstance", "MediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaInstance MediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_MediaInstance", "MediaInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_MediaInstance", "MediaInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaInstance> MediaInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_MediaInstance", "MediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_MediaInstance", "MediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferInstance OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferInstance> OfferInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_OfferInstance", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_Provider", "Provider")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Provider Provider
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_Provider", "Provider").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_Provider", "Provider").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Provider> ProviderReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_Provider", "Provider");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Provider>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_Provider", "Provider", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_VisibilityStatus", "VisibilityStatus")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public VisibilityStatus VisibilityStatus
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_VisibilityStatus", "VisibilityStatus").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_VisibilityStatus", "VisibilityStatus").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for VisibilityStatus in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<VisibilityStatus> VisibilityStatusReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_VisibilityStatus", "VisibilityStatus");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<VisibilityStatus>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_VisibilityStatus", "VisibilityStatus", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferInstanceUserType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerInstanceId
    /// userTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferInstanceUserType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferInstanceUserType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferInstanceUserType object.
        /// </summary>
        /// <param name="offerInstanceId">Initial value of offerInstanceId.</param>
        /// <param name="userTypeId">Initial value of userTypeId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferInstanceUserType CreateOfferInstanceUserType(global::System.Guid offerInstanceId, int userTypeId, global::System.DateTime modifiedDate)
        {
            OfferInstanceUserType offerInstanceUserType = new OfferInstanceUserType();
            offerInstanceUserType.offerInstanceId = offerInstanceId;
            offerInstanceUserType.userTypeId = userTypeId;
            offerInstanceUserType.modifiedDate = modifiedDate;
            return offerInstanceUserType;
        }
        /// <summary>
        /// There are no comments for Property offerInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerInstanceId
        {
            get
            {
                return this._offerInstanceId;
            }
            set
            {
                this.OnofferInstanceIdChanging(value);
                this.ReportPropertyChanging("offerInstanceId");
                this._offerInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerInstanceId");
                this.OnofferInstanceIdChanged();
            }
        }
        private global::System.Guid _offerInstanceId;
        partial void OnofferInstanceIdChanging(global::System.Guid value);
        partial void OnofferInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property userTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int userTypeId
        {
            get
            {
                return this._userTypeId;
            }
            set
            {
                this.OnuserTypeIdChanging(value);
                this.ReportPropertyChanging("userTypeId");
                this._userTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("userTypeId");
                this.OnuserTypeIdChanged();
            }
        }
        private int _userTypeId;
        partial void OnuserTypeIdChanging(int value);
        partial void OnuserTypeIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceUserType_OfferInstance", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferInstance OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceUserType_OfferInstance", "OfferInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceUserType_OfferInstance", "OfferInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferInstance> OfferInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceUserType_OfferInstance", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferInstance>("RawCatalogDBModel.FK_OfferInstanceUserType_OfferInstance", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for UserType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceUserType_UserType", "UserType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public UserType UserType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UserType>("RawCatalogDBModel.FK_OfferInstanceUserType_UserType", "UserType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UserType>("RawCatalogDBModel.FK_OfferInstanceUserType_UserType", "UserType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for UserType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<UserType> UserTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<UserType>("RawCatalogDBModel.FK_OfferInstanceUserType_UserType", "UserType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<UserType>("RawCatalogDBModel.FK_OfferInstanceUserType_UserType", "UserType", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferRelationShip in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerId
    /// relatedOfferId
    /// relationshipTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferRelationShip")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferRelationShip : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferRelationShip object.
        /// </summary>
        /// <param name="offerId">Initial value of offerId.</param>
        /// <param name="relatedOfferId">Initial value of relatedOfferId.</param>
        /// <param name="relationshipTypeId">Initial value of relationshipTypeId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferRelationShip CreateOfferRelationShip(global::System.Guid offerId, global::System.Guid relatedOfferId, int relationshipTypeId, global::System.DateTime modifiedDate)
        {
            OfferRelationShip offerRelationShip = new OfferRelationShip();
            offerRelationShip.offerId = offerId;
            offerRelationShip.relatedOfferId = relatedOfferId;
            offerRelationShip.relationshipTypeId = relationshipTypeId;
            offerRelationShip.modifiedDate = modifiedDate;
            return offerRelationShip;
        }
        /// <summary>
        /// There are no comments for Property offerId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerId
        {
            get
            {
                return this._offerId;
            }
            set
            {
                this.OnofferIdChanging(value);
                this.ReportPropertyChanging("offerId");
                this._offerId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerId");
                this.OnofferIdChanged();
            }
        }
        private global::System.Guid _offerId;
        partial void OnofferIdChanging(global::System.Guid value);
        partial void OnofferIdChanged();
        /// <summary>
        /// There are no comments for Property relatedOfferId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid relatedOfferId
        {
            get
            {
                return this._relatedOfferId;
            }
            set
            {
                this.OnrelatedOfferIdChanging(value);
                this.ReportPropertyChanging("relatedOfferId");
                this._relatedOfferId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("relatedOfferId");
                this.OnrelatedOfferIdChanged();
            }
        }
        private global::System.Guid _relatedOfferId;
        partial void OnrelatedOfferIdChanging(global::System.Guid value);
        partial void OnrelatedOfferIdChanged();
        /// <summary>
        /// There are no comments for Property relationshipTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int relationshipTypeId
        {
            get
            {
                return this._relationshipTypeId;
            }
            set
            {
                this.OnrelationshipTypeIdChanging(value);
                this.ReportPropertyChanging("relationshipTypeId");
                this._relationshipTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("relationshipTypeId");
                this.OnrelationshipTypeIdChanged();
            }
        }
        private int _relationshipTypeId;
        partial void OnrelationshipTypeIdChanging(int value);
        partial void OnrelationshipTypeIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferRelationShip_Offer", "Offer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Offer Offer
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_Offer", "Offer").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_Offer", "Offer").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Offer> OfferReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_Offer", "Offer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_Offer", "Offer", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Offer1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferRelationShip_RelatedOffer", "Offer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Offer Offer1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_RelatedOffer", "Offer").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_RelatedOffer", "Offer").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Offer1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Offer> Offer1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_RelatedOffer", "Offer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Offer>("RawCatalogDBModel.FK_OfferRelationShip_RelatedOffer", "Offer", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferRelationShipType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferRelationShip_RelationShipType", "OfferRelationShipType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public OfferRelationShipType OfferRelationShipType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferRelationShipType>("RawCatalogDBModel.FK_OfferRelationShip_RelationShipType", "OfferRelationShipType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferRelationShipType>("RawCatalogDBModel.FK_OfferRelationShip_RelationShipType", "OfferRelationShipType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for OfferRelationShipType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<OfferRelationShipType> OfferRelationShipTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<OfferRelationShipType>("RawCatalogDBModel.FK_OfferRelationShip_RelationShipType", "OfferRelationShipType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<OfferRelationShipType>("RawCatalogDBModel.FK_OfferRelationShip_RelationShipType", "OfferRelationShipType", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferRelationShipType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerRelationShipTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferRelationShipType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferRelationShipType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferRelationShipType object.
        /// </summary>
        /// <param name="offerRelationShipTypeId">Initial value of offerRelationShipTypeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferRelationShipType CreateOfferRelationShipType(int offerRelationShipTypeId, string internalName, global::System.DateTime modifiedDate)
        {
            OfferRelationShipType offerRelationShipType = new OfferRelationShipType();
            offerRelationShipType.offerRelationShipTypeId = offerRelationShipTypeId;
            offerRelationShipType.internalName = internalName;
            offerRelationShipType.modifiedDate = modifiedDate;
            return offerRelationShipType;
        }
        /// <summary>
        /// There are no comments for Property offerRelationShipTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int offerRelationShipTypeId
        {
            get
            {
                return this._offerRelationShipTypeId;
            }
            set
            {
                this.OnofferRelationShipTypeIdChanging(value);
                this.ReportPropertyChanging("offerRelationShipTypeId");
                this._offerRelationShipTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerRelationShipTypeId");
                this.OnofferRelationShipTypeIdChanged();
            }
        }
        private int _offerRelationShipTypeId;
        partial void OnofferRelationShipTypeIdChanging(int value);
        partial void OnofferRelationShipTypeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferRelationShip in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferRelationShip_RelationShipType", "OfferRelationShip")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferRelationShip> OfferRelationShip
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferRelationShip>("RawCatalogDBModel.FK_OfferRelationShip_RelationShipType", "OfferRelationShip");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferRelationShip>("RawCatalogDBModel.FK_OfferRelationShip_RelationShipType", "OfferRelationShip", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferStore in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerId
    /// storeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferStore")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferStore : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferStore object.
        /// </summary>
        /// <param name="offerId">Initial value of offerId.</param>
        /// <param name="storeId">Initial value of storeId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferStore CreateOfferStore(global::System.Guid offerId, int storeId, global::System.DateTime modifiedDate)
        {
            OfferStore offerStore = new OfferStore();
            offerStore.offerId = offerId;
            offerStore.storeId = storeId;
            offerStore.modifiedDate = modifiedDate;
            return offerStore;
        }
        /// <summary>
        /// There are no comments for Property offerId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid offerId
        {
            get
            {
                return this._offerId;
            }
            set
            {
                this.OnofferIdChanging(value);
                this.ReportPropertyChanging("offerId");
                this._offerId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerId");
                this.OnofferIdChanged();
            }
        }
        private global::System.Guid _offerId;
        partial void OnofferIdChanging(global::System.Guid value);
        partial void OnofferIdChanged();
        /// <summary>
        /// There are no comments for Property storeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int storeId
        {
            get
            {
                return this._storeId;
            }
            set
            {
                this.OnstoreIdChanging(value);
                this.ReportPropertyChanging("storeId");
                this._storeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("storeId");
                this.OnstoreIdChanged();
            }
        }
        private int _storeId;
        partial void OnstoreIdChanging(int value);
        partial void OnstoreIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferStore_Offer", "Offer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Offer Offer
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferStore_Offer", "Offer").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferStore_Offer", "Offer").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Offer> OfferReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Offer>("RawCatalogDBModel.FK_OfferStore_Offer", "Offer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Offer>("RawCatalogDBModel.FK_OfferStore_Offer", "Offer", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Store in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferStore_Store", "Store")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Store Store
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Store>("RawCatalogDBModel.FK_OfferStore_Store", "Store").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Store>("RawCatalogDBModel.FK_OfferStore_Store", "Store").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Store in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Store> StoreReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Store>("RawCatalogDBModel.FK_OfferStore_Store", "Store");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Store>("RawCatalogDBModel.FK_OfferStore_Store", "Store", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.OfferType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// offerTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="OfferType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class OfferType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new OfferType object.
        /// </summary>
        /// <param name="offerTypeId">Initial value of offerTypeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static OfferType CreateOfferType(int offerTypeId, string internalName, global::System.DateTime modifiedDate)
        {
            OfferType offerType = new OfferType();
            offerType.offerTypeId = offerTypeId;
            offerType.internalName = internalName;
            offerType.modifiedDate = modifiedDate;
            return offerType;
        }
        /// <summary>
        /// There are no comments for Property offerTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int offerTypeId
        {
            get
            {
                return this._offerTypeId;
            }
            set
            {
                this.OnofferTypeIdChanging(value);
                this.ReportPropertyChanging("offerTypeId");
                this._offerTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("offerTypeId");
                this.OnofferTypeIdChanged();
            }
        }
        private int _offerTypeId;
        partial void OnofferTypeIdChanging(int value);
        partial void OnofferTypeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Offer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Offer_OfferType", "Offer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Offer> Offer
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Offer>("RawCatalogDBModel.FK_Offer_OfferType", "Offer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Offer>("RawCatalogDBModel.FK_Offer_OfferType", "Offer", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.PackageType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// packageTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="PackageType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class PackageType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new PackageType object.
        /// </summary>
        /// <param name="packageTypeId">Initial value of packageTypeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static PackageType CreatePackageType(int packageTypeId, string name, global::System.DateTime modifiedDate)
        {
            PackageType packageType = new PackageType();
            packageType.packageTypeId = packageTypeId;
            packageType.name = name;
            packageType.modifiedDate = modifiedDate;
            return packageType;
        }
        /// <summary>
        /// There are no comments for Property packageTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int packageTypeId
        {
            get
            {
                return this._packageTypeId;
            }
            set
            {
                this.OnpackageTypeIdChanging(value);
                this.ReportPropertyChanging("packageTypeId");
                this._packageTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("packageTypeId");
                this.OnpackageTypeIdChanged();
            }
        }
        private int _packageTypeId;
        partial void OnpackageTypeIdChanging(int value);
        partial void OnpackageTypeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameContentInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameContentInstance_PackageType", "GameContentInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameContentInstance> GameContentInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_PackageType", "GameContentInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameContentInstance>("RawCatalogDBModel.FK_GameContentInstance_PackageType", "GameContentInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for AppInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_AppInstance_PackageType", "AppInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<AppInstance> AppInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<AppInstance>("RawCatalogDBModel.FK_AppInstance_PackageType", "AppInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<AppInstance>("RawCatalogDBModel.FK_AppInstance_PackageType", "AppInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.PaymentType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// paymentTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="PaymentType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class PaymentType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new PaymentType object.
        /// </summary>
        /// <param name="paymentTypeId">Initial value of paymentTypeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static PaymentType CreatePaymentType(int paymentTypeId, string internalName, global::System.DateTime modifiedDate)
        {
            PaymentType paymentType = new PaymentType();
            paymentType.paymentTypeId = paymentTypeId;
            paymentType.internalName = internalName;
            paymentType.modifiedDate = modifiedDate;
            return paymentType;
        }
        /// <summary>
        /// There are no comments for Property paymentTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int paymentTypeId
        {
            get
            {
                return this._paymentTypeId;
            }
            set
            {
                this.OnpaymentTypeIdChanging(value);
                this.ReportPropertyChanging("paymentTypeId");
                this._paymentTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("paymentTypeId");
                this.OnpaymentTypeIdChanged();
            }
        }
        private int _paymentTypeId;
        partial void OnpaymentTypeIdChanging(int value);
        partial void OnpaymentTypeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_PaymentType", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstance> OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_PaymentType", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_PaymentType", "OfferInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.PointsBundle in the schema.
    /// </summary>
    /// <KeyProperties>
    /// pointsBundleId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="PointsBundle")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class PointsBundle : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new PointsBundle object.
        /// </summary>
        /// <param name="pointsBundleId">Initial value of pointsBundleId.</param>
        /// <param name="points">Initial value of points.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static PointsBundle CreatePointsBundle(global::System.Guid pointsBundleId, int points, global::System.DateTime modifiedDate)
        {
            PointsBundle pointsBundle = new PointsBundle();
            pointsBundle.pointsBundleId = pointsBundleId;
            pointsBundle.points = points;
            pointsBundle.modifiedDate = modifiedDate;
            return pointsBundle;
        }
        /// <summary>
        /// There are no comments for Property pointsBundleId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid pointsBundleId
        {
            get
            {
                return this._pointsBundleId;
            }
            set
            {
                this.OnpointsBundleIdChanging(value);
                this.ReportPropertyChanging("pointsBundleId");
                this._pointsBundleId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pointsBundleId");
                this.OnpointsBundleIdChanged();
            }
        }
        private global::System.Guid _pointsBundleId;
        partial void OnpointsBundleIdChanging(global::System.Guid value);
        partial void OnpointsBundleIdChanged();
        /// <summary>
        /// There are no comments for Property points in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int points
        {
            get
            {
                return this._points;
            }
            set
            {
                this.OnpointsChanging(value);
                this.ReportPropertyChanging("points");
                this._points = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("points");
                this.OnpointsChanged();
            }
        }
        private int _points;
        partial void OnpointsChanging(int value);
        partial void OnpointsChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PointsBundle_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_PointsBundle_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_PointsBundle_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_PointsBundle_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_PointsBundle_Media", "Media", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.PreviewMediaInstance in the schema.
    /// </summary>
    /// <KeyProperties>
    /// previewMediaInstanceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="PreviewMediaInstance")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class PreviewMediaInstance : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new PreviewMediaInstance object.
        /// </summary>
        /// <param name="previewMediaInstanceId">Initial value of previewMediaInstanceId.</param>
        /// <param name="externalLicenserContentId">Initial value of externalLicenserContentId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static PreviewMediaInstance CreatePreviewMediaInstance(global::System.Guid previewMediaInstanceId, string externalLicenserContentId, global::System.DateTime modifiedDate)
        {
            PreviewMediaInstance previewMediaInstance = new PreviewMediaInstance();
            previewMediaInstance.previewMediaInstanceId = previewMediaInstanceId;
            previewMediaInstance.externalLicenserContentId = externalLicenserContentId;
            previewMediaInstance.modifiedDate = modifiedDate;
            return previewMediaInstance;
        }
        /// <summary>
        /// There are no comments for Property previewMediaInstanceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid previewMediaInstanceId
        {
            get
            {
                return this._previewMediaInstanceId;
            }
            set
            {
                this.OnpreviewMediaInstanceIdChanging(value);
                this.ReportPropertyChanging("previewMediaInstanceId");
                this._previewMediaInstanceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("previewMediaInstanceId");
                this.OnpreviewMediaInstanceIdChanged();
            }
        }
        private global::System.Guid _previewMediaInstanceId;
        partial void OnpreviewMediaInstanceIdChanging(global::System.Guid value);
        partial void OnpreviewMediaInstanceIdChanged();
        /// <summary>
        /// There are no comments for Property requiredUserTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> requiredUserTypeId
        {
            get
            {
                return this._requiredUserTypeId;
            }
            set
            {
                this.OnrequiredUserTypeIdChanging(value);
                this.ReportPropertyChanging("requiredUserTypeId");
                this._requiredUserTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("requiredUserTypeId");
                this.OnrequiredUserTypeIdChanged();
            }
        }
        private global::System.Nullable<int> _requiredUserTypeId;
        partial void OnrequiredUserTypeIdChanging(global::System.Nullable<int> value);
        partial void OnrequiredUserTypeIdChanged();
        /// <summary>
        /// There are no comments for Property startDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<global::System.DateTime> startDate
        {
            get
            {
                return this._startDate;
            }
            set
            {
                this.OnstartDateChanging(value);
                this.ReportPropertyChanging("startDate");
                this._startDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("startDate");
                this.OnstartDateChanged();
            }
        }
        private global::System.Nullable<global::System.DateTime> _startDate;
        partial void OnstartDateChanging(global::System.Nullable<global::System.DateTime> value);
        partial void OnstartDateChanged();
        /// <summary>
        /// There are no comments for Property endDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<global::System.DateTime> endDate
        {
            get
            {
                return this._endDate;
            }
            set
            {
                this.OnendDateChanging(value);
                this.ReportPropertyChanging("endDate");
                this._endDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("endDate");
                this.OnendDateChanged();
            }
        }
        private global::System.Nullable<global::System.DateTime> _endDate;
        partial void OnendDateChanging(global::System.Nullable<global::System.DateTime> value);
        partial void OnendDateChanged();
        /// <summary>
        /// There are no comments for Property externalLicenserContentId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string externalLicenserContentId
        {
            get
            {
                return this._externalLicenserContentId;
            }
            set
            {
                this.OnexternalLicenserContentIdChanging(value);
                this.ReportPropertyChanging("externalLicenserContentId");
                this._externalLicenserContentId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("externalLicenserContentId");
                this.OnexternalLicenserContentIdChanged();
            }
        }
        private string _externalLicenserContentId;
        partial void OnexternalLicenserContentIdChanging(string value);
        partial void OnexternalLicenserContentIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_Country", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_PreviewMediaInstance_Country", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_PreviewMediaInstance_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> CountryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_PreviewMediaInstance_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_PreviewMediaInstance_Country", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for DRMLicenseIssuer in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_DRMLicenseIssuer", "DRMLicenseIssuer")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public DRMLicenseIssuer DRMLicenseIssuer
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DRMLicenseIssuer>("RawCatalogDBModel.FK_PreviewMediaInstance_DRMLicenseIssuer", "DRMLicenseIssuer").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DRMLicenseIssuer>("RawCatalogDBModel.FK_PreviewMediaInstance_DRMLicenseIssuer", "DRMLicenseIssuer").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for DRMLicenseIssuer in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<DRMLicenseIssuer> DRMLicenseIssuerReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DRMLicenseIssuer>("RawCatalogDBModel.FK_PreviewMediaInstance_DRMLicenseIssuer", "DRMLicenseIssuer");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DRMLicenseIssuer>("RawCatalogDBModel.FK_PreviewMediaInstance_DRMLicenseIssuer", "DRMLicenseIssuer", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_MediaInstance", "MediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaInstance MediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "MediaInstance").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "MediaInstance").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaInstance in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaInstance> MediaInstanceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "MediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_MediaInstance", "MediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstanceType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstanceType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public PreviewMediaInstanceType PreviewMediaInstanceType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PreviewMediaInstanceType>("RawCatalogDBModel.FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstanceType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PreviewMediaInstanceType>("RawCatalogDBModel.FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstanceType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstanceType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<PreviewMediaInstanceType> PreviewMediaInstanceTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<PreviewMediaInstanceType>("RawCatalogDBModel.FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstanceType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<PreviewMediaInstanceType>("RawCatalogDBModel.FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstanceType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_Provider", "Provider")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Provider Provider
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_PreviewMediaInstance_Provider", "Provider").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_PreviewMediaInstance_Provider", "Provider").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Provider> ProviderReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_PreviewMediaInstance_Provider", "Provider");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Provider>("RawCatalogDBModel.FK_PreviewMediaInstance_Provider", "Provider", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.PreviewMediaInstanceType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// previewMediaInstanceTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="PreviewMediaInstanceType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class PreviewMediaInstanceType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new PreviewMediaInstanceType object.
        /// </summary>
        /// <param name="previewMediaInstanceTypeId">Initial value of previewMediaInstanceTypeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static PreviewMediaInstanceType CreatePreviewMediaInstanceType(int previewMediaInstanceTypeId, string name, global::System.DateTime modifiedDate)
        {
            PreviewMediaInstanceType previewMediaInstanceType = new PreviewMediaInstanceType();
            previewMediaInstanceType.previewMediaInstanceTypeId = previewMediaInstanceTypeId;
            previewMediaInstanceType.name = name;
            previewMediaInstanceType.modifiedDate = modifiedDate;
            return previewMediaInstanceType;
        }
        /// <summary>
        /// There are no comments for Property previewMediaInstanceTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int previewMediaInstanceTypeId
        {
            get
            {
                return this._previewMediaInstanceTypeId;
            }
            set
            {
                this.OnpreviewMediaInstanceTypeIdChanging(value);
                this.ReportPropertyChanging("previewMediaInstanceTypeId");
                this._previewMediaInstanceTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("previewMediaInstanceTypeId");
                this.OnpreviewMediaInstanceTypeIdChanged();
            }
        }
        private int _previewMediaInstanceTypeId;
        partial void OnpreviewMediaInstanceTypeIdChanging(int value);
        partial void OnpreviewMediaInstanceTypeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PreviewMediaInstance> PreviewMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_PreviewMediaInstanceType", "PreviewMediaInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.PricingRule in the schema.
    /// </summary>
    /// <KeyProperties>
    /// pricingRuleId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="PricingRule")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class PricingRule : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new PricingRule object.
        /// </summary>
        /// <param name="pricingRuleId">Initial value of pricingRuleId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="startDatetime">Initial value of startDatetime.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static PricingRule CreatePricingRule(int pricingRuleId, string name, global::System.DateTime startDatetime, global::System.DateTime modifiedDate)
        {
            PricingRule pricingRule = new PricingRule();
            pricingRule.pricingRuleId = pricingRuleId;
            pricingRule.name = name;
            pricingRule.startDatetime = startDatetime;
            pricingRule.modifiedDate = modifiedDate;
            return pricingRule;
        }
        /// <summary>
        /// There are no comments for Property pricingRuleId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int pricingRuleId
        {
            get
            {
                return this._pricingRuleId;
            }
            set
            {
                this.OnpricingRuleIdChanging(value);
                this.ReportPropertyChanging("pricingRuleId");
                this._pricingRuleId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pricingRuleId");
                this.OnpricingRuleIdChanged();
            }
        }
        private int _pricingRuleId;
        partial void OnpricingRuleIdChanging(int value);
        partial void OnpricingRuleIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property startDatetime in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime startDatetime
        {
            get
            {
                return this._startDatetime;
            }
            set
            {
                this.OnstartDatetimeChanging(value);
                this.ReportPropertyChanging("startDatetime");
                this._startDatetime = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("startDatetime");
                this.OnstartDatetimeChanged();
            }
        }
        private global::System.DateTime _startDatetime;
        partial void OnstartDatetimeChanging(global::System.DateTime value);
        partial void OnstartDatetimeChanged();
        /// <summary>
        /// There are no comments for Property priceWholesale in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<decimal> priceWholesale
        {
            get
            {
                return this._priceWholesale;
            }
            set
            {
                this.OnpriceWholesaleChanging(value);
                this.ReportPropertyChanging("priceWholesale");
                this._priceWholesale = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("priceWholesale");
                this.OnpriceWholesaleChanged();
            }
        }
        private global::System.Nullable<decimal> _priceWholesale;
        partial void OnpriceWholesaleChanging(global::System.Nullable<decimal> value);
        partial void OnpriceWholesaleChanged();
        /// <summary>
        /// There are no comments for Property pointsRetail in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> pointsRetail
        {
            get
            {
                return this._pointsRetail;
            }
            set
            {
                this.OnpointsRetailChanging(value);
                this.ReportPropertyChanging("pointsRetail");
                this._pointsRetail = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("pointsRetail");
                this.OnpointsRetailChanged();
            }
        }
        private global::System.Nullable<int> _pointsRetail;
        partial void OnpointsRetailChanging(global::System.Nullable<int> value);
        partial void OnpointsRetailChanged();
        /// <summary>
        /// There are no comments for Property priceRetail in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<decimal> priceRetail
        {
            get
            {
                return this._priceRetail;
            }
            set
            {
                this.OnpriceRetailChanging(value);
                this.ReportPropertyChanging("priceRetail");
                this._priceRetail = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("priceRetail");
                this.OnpriceRetailChanged();
            }
        }
        private global::System.Nullable<decimal> _priceRetail;
        partial void OnpriceRetailChanging(global::System.Nullable<decimal> value);
        partial void OnpriceRetailChanged();
        /// <summary>
        /// There are no comments for Property margin in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<decimal> margin
        {
            get
            {
                return this._margin;
            }
            set
            {
                this.OnmarginChanging(value);
                this.ReportPropertyChanging("margin");
                this._margin = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("margin");
                this.OnmarginChanged();
            }
        }
        private global::System.Nullable<decimal> _margin;
        partial void OnmarginChanging(global::System.Nullable<decimal> value);
        partial void OnmarginChanged();
        /// <summary>
        /// There are no comments for Property rate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<decimal> rate
        {
            get
            {
                return this._rate;
            }
            set
            {
                this.OnrateChanging(value);
                this.ReportPropertyChanging("rate");
                this._rate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("rate");
                this.OnrateChanged();
            }
        }
        private global::System.Nullable<decimal> _rate;
        partial void OnrateChanging(global::System.Nullable<decimal> value);
        partial void OnrateChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_Country", "Country")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Country Country
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_PricingRule_Country", "Country").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_PricingRule_Country", "Country").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Country in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Country> CountryReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Country>("RawCatalogDBModel.FK_PricingRule_Country", "Country");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Country>("RawCatalogDBModel.FK_PricingRule_Country", "Country", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_RetailCurrency", "Currency")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Currency Currency
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_RetailCurrency", "Currency").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_RetailCurrency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Currency in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Currency> CurrencyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_RetailCurrency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_RetailCurrency", "Currency", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Currency1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_WholesaleCurrency", "Currency")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Currency Currency1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_WholesaleCurrency", "Currency").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_WholesaleCurrency", "Currency").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Currency1 in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Currency> Currency1Reference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_WholesaleCurrency", "Currency");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Currency>("RawCatalogDBModel.FK_PricingRule_WholesaleCurrency", "Currency", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_MediaType", "MediaType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public MediaType MediaType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaType>("RawCatalogDBModel.FK_PricingRule_MediaType", "MediaType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaType>("RawCatalogDBModel.FK_PricingRule_MediaType", "MediaType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for MediaType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<MediaType> MediaTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<MediaType>("RawCatalogDBModel.FK_PricingRule_MediaType", "MediaType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<MediaType>("RawCatalogDBModel.FK_PricingRule_MediaType", "MediaType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstance_PricingRule", "OfferInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstance> OfferInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_PricingRule", "OfferInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstance>("RawCatalogDBModel.FK_OfferInstance_PricingRule", "OfferInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_Provider", "Provider")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Provider Provider
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_PricingRule_Provider", "Provider").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_PricingRule_Provider", "Provider").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Provider in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Provider> ProviderReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Provider>("RawCatalogDBModel.FK_PricingRule_Provider", "Provider");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Provider>("RawCatalogDBModel.FK_PricingRule_Provider", "Provider", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Provider in the schema.
    /// </summary>
    /// <KeyProperties>
    /// providerId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Provider")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Provider : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Provider object.
        /// </summary>
        /// <param name="providerId">Initial value of providerId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Provider CreateProvider(int providerId, global::System.DateTime modifiedDate)
        {
            Provider provider = new Provider();
            provider.providerId = providerId;
            provider.modifiedDate = modifiedDate;
            return provider;
        }
        /// <summary>
        /// There are no comments for Property providerId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int providerId
        {
            get
            {
                return this._providerId;
            }
            set
            {
                this.OnproviderIdChanging(value);
                this.ReportPropertyChanging("providerId");
                this._providerId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("providerId");
                this.OnproviderIdChanged();
            }
        }
        private int _providerId;
        partial void OnproviderIdChanging(int value);
        partial void OnproviderIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferInstanceMedia in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMedia_Provider", "OfferInstanceMedia")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMedia> OfferInstanceMedia
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_Provider", "OfferInstanceMedia");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMedia>("RawCatalogDBModel.FK_OfferInstanceMedia_Provider", "OfferInstanceMedia", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for OfferInstanceMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceMediaInstance_Provider", "OfferInstanceMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceMediaInstance> OfferInstanceMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_Provider", "OfferInstanceMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceMediaInstance>("RawCatalogDBModel.FK_OfferInstanceMediaInstance_Provider", "OfferInstanceMediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PreviewMediaInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PreviewMediaInstance_Provider", "PreviewMediaInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PreviewMediaInstance> PreviewMediaInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_Provider", "PreviewMediaInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PreviewMediaInstance>("RawCatalogDBModel.FK_PreviewMediaInstance_Provider", "PreviewMediaInstance", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for PricingRule in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_PricingRule_Provider", "PricingRule")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<PricingRule> PricingRule
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_Provider", "PricingRule");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<PricingRule>("RawCatalogDBModel.FK_PricingRule_Provider", "PricingRule", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.RatingDescriptor in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ratingDescriptorId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="RatingDescriptor")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class RatingDescriptor : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new RatingDescriptor object.
        /// </summary>
        /// <param name="ratingDescriptorId">Initial value of ratingDescriptorId.</param>
        /// <param name="ratingSystemId">Initial value of ratingSystemId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static RatingDescriptor CreateRatingDescriptor(int ratingDescriptorId, int ratingSystemId, string name, global::System.DateTime modifiedDate)
        {
            RatingDescriptor ratingDescriptor = new RatingDescriptor();
            ratingDescriptor.ratingDescriptorId = ratingDescriptorId;
            ratingDescriptor.ratingSystemId = ratingSystemId;
            ratingDescriptor.name = name;
            ratingDescriptor.modifiedDate = modifiedDate;
            return ratingDescriptor;
        }
        /// <summary>
        /// There are no comments for Property ratingDescriptorId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int ratingDescriptorId
        {
            get
            {
                return this._ratingDescriptorId;
            }
            set
            {
                this.OnratingDescriptorIdChanging(value);
                this.ReportPropertyChanging("ratingDescriptorId");
                this._ratingDescriptorId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ratingDescriptorId");
                this.OnratingDescriptorIdChanged();
            }
        }
        private int _ratingDescriptorId;
        partial void OnratingDescriptorIdChanging(int value);
        partial void OnratingDescriptorIdChanged();
        /// <summary>
        /// There are no comments for Property ratingSystemId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int ratingSystemId
        {
            get
            {
                return this._ratingSystemId;
            }
            set
            {
                this.OnratingSystemIdChanging(value);
                this.ReportPropertyChanging("ratingSystemId");
                this._ratingSystemId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ratingSystemId");
                this.OnratingSystemIdChanged();
            }
        }
        private int _ratingSystemId;
        partial void OnratingSystemIdChanging(int value);
        partial void OnratingSystemIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property description in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this.OndescriptionChanging(value);
                this.ReportPropertyChanging("description");
                this._description = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("description");
                this.OndescriptionChanged();
            }
        }
        private string _description;
        partial void OndescriptionChanging(string value);
        partial void OndescriptionChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for MediaRatingDescriptor in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRatingDescriptor_RatingDescriptor", "MediaRatingDescriptor")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRatingDescriptor> MediaRatingDescriptor
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_RatingDescriptor", "MediaRatingDescriptor");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRatingDescriptor>("RawCatalogDBModel.FK_MediaRatingDescriptor_RatingDescriptor", "MediaRatingDescriptor", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.RatingValue in the schema.
    /// </summary>
    /// <KeyProperties>
    /// ratingValueId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="RatingValue")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class RatingValue : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new RatingValue object.
        /// </summary>
        /// <param name="ratingValueId">Initial value of ratingValueId.</param>
        /// <param name="ratingSystemId">Initial value of ratingSystemId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="sortOrder">Initial value of sortOrder.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static RatingValue CreateRatingValue(int ratingValueId, int ratingSystemId, string name, int sortOrder, global::System.DateTime modifiedDate)
        {
            RatingValue ratingValue = new RatingValue();
            ratingValue.ratingValueId = ratingValueId;
            ratingValue.ratingSystemId = ratingSystemId;
            ratingValue.name = name;
            ratingValue.sortOrder = sortOrder;
            ratingValue.modifiedDate = modifiedDate;
            return ratingValue;
        }
        /// <summary>
        /// There are no comments for Property ratingValueId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int ratingValueId
        {
            get
            {
                return this._ratingValueId;
            }
            set
            {
                this.OnratingValueIdChanging(value);
                this.ReportPropertyChanging("ratingValueId");
                this._ratingValueId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ratingValueId");
                this.OnratingValueIdChanged();
            }
        }
        private int _ratingValueId;
        partial void OnratingValueIdChanging(int value);
        partial void OnratingValueIdChanged();
        /// <summary>
        /// There are no comments for Property ratingSystemId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int ratingSystemId
        {
            get
            {
                return this._ratingSystemId;
            }
            set
            {
                this.OnratingSystemIdChanging(value);
                this.ReportPropertyChanging("ratingSystemId");
                this._ratingSystemId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("ratingSystemId");
                this.OnratingSystemIdChanged();
            }
        }
        private int _ratingSystemId;
        partial void OnratingSystemIdChanging(int value);
        partial void OnratingSystemIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property description in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string description
        {
            get
            {
                return this._description;
            }
            set
            {
                this.OndescriptionChanging(value);
                this.ReportPropertyChanging("description");
                this._description = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, true);
                this.ReportPropertyChanged("description");
                this.OndescriptionChanged();
            }
        }
        private string _description;
        partial void OndescriptionChanging(string value);
        partial void OndescriptionChanged();
        /// <summary>
        /// There are no comments for Property sortOrder in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int sortOrder
        {
            get
            {
                return this._sortOrder;
            }
            set
            {
                this.OnsortOrderChanging(value);
                this.ReportPropertyChanging("sortOrder");
                this._sortOrder = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("sortOrder");
                this.OnsortOrderChanged();
            }
        }
        private int _sortOrder;
        partial void OnsortOrderChanging(int value);
        partial void OnsortOrderChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_RatingValue_ImageMediaId", "Image")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Image Image
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Image>("RawCatalogDBModel.FK_RatingValue_ImageMediaId", "Image").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Image>("RawCatalogDBModel.FK_RatingValue_ImageMediaId", "Image").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Image in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Image> ImageReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Image>("RawCatalogDBModel.FK_RatingValue_ImageMediaId", "Image");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Image>("RawCatalogDBModel.FK_RatingValue_ImageMediaId", "Image", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for MediaRating in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_MediaRating_RatingValue", "MediaRating")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<MediaRating> MediaRating
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<MediaRating>("RawCatalogDBModel.FK_MediaRating_RatingValue", "MediaRating");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<MediaRating>("RawCatalogDBModel.FK_MediaRating_RatingValue", "MediaRating", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.SellType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// sellTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="SellType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class SellType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new SellType object.
        /// </summary>
        /// <param name="sellTypeId">Initial value of sellTypeId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static SellType CreateSellType(int sellTypeId, string internalName, global::System.DateTime modifiedDate)
        {
            SellType sellType = new SellType();
            sellType.sellTypeId = sellTypeId;
            sellType.internalName = internalName;
            sellType.modifiedDate = modifiedDate;
            return sellType;
        }
        /// <summary>
        /// There are no comments for Property sellTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int sellTypeId
        {
            get
            {
                return this._sellTypeId;
            }
            set
            {
                this.OnsellTypeIdChanging(value);
                this.ReportPropertyChanging("sellTypeId");
                this._sellTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("sellTypeId");
                this.OnsellTypeIdChanged();
            }
        }
        private int _sellTypeId;
        partial void OnsellTypeIdChanging(int value);
        partial void OnsellTypeIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_SellType", "Subscription")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Subscription> Subscription
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Subscription>("RawCatalogDBModel.FK_Subscription_SellType", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Subscription>("RawCatalogDBModel.FK_Subscription_SellType", "Subscription", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Service in the schema.
    /// </summary>
    /// <KeyProperties>
    /// serviceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Service")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Service : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Service object.
        /// </summary>
        /// <param name="serviceId">Initial value of serviceId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Service CreateService(int serviceId, string internalName, global::System.DateTime modifiedDate)
        {
            Service service = new Service();
            service.serviceId = serviceId;
            service.internalName = internalName;
            service.modifiedDate = modifiedDate;
            return service;
        }
        /// <summary>
        /// There are no comments for Property serviceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int serviceId
        {
            get
            {
                return this._serviceId;
            }
            set
            {
                this.OnserviceIdChanging(value);
                this.ReportPropertyChanging("serviceId");
                this._serviceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("serviceId");
                this.OnserviceIdChanged();
            }
        }
        private int _serviceId;
        partial void OnserviceIdChanging(int value);
        partial void OnserviceIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for SubscriptionFamilyService in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionFamilyService_Service", "SubscriptionFamilyService")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<SubscriptionFamilyService> SubscriptionFamilyService
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<SubscriptionFamilyService>("RawCatalogDBModel.FK_SubscriptionFamilyService_Service", "SubscriptionFamilyService");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<SubscriptionFamilyService>("RawCatalogDBModel.FK_SubscriptionFamilyService_Service", "SubscriptionFamilyService", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.StorageUnit in the schema.
    /// </summary>
    /// <KeyProperties>
    /// storageUnitId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="StorageUnit")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class StorageUnit : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new StorageUnit object.
        /// </summary>
        /// <param name="storageUnitId">Initial value of storageUnitId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static StorageUnit CreateStorageUnit(int storageUnitId, string internalName, global::System.DateTime modifiedDate)
        {
            StorageUnit storageUnit = new StorageUnit();
            storageUnit.storageUnitId = storageUnitId;
            storageUnit.internalName = internalName;
            storageUnit.modifiedDate = modifiedDate;
            return storageUnit;
        }
        /// <summary>
        /// There are no comments for Property storageUnitId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int storageUnitId
        {
            get
            {
                return this._storageUnitId;
            }
            set
            {
                this.OnstorageUnitIdChanging(value);
                this.ReportPropertyChanging("storageUnitId");
                this._storageUnitId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("storageUnitId");
                this.OnstorageUnitIdChanged();
            }
        }
        private int _storageUnitId;
        partial void OnstorageUnitIdChanging(int value);
        partial void OnstorageUnitIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for GameCapabilityCountry in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineCoopHardDriveStorageAmountUnit", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry1 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry1
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OfflineSaveStorageAmountUnit", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry2 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry2
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlineCoopHardDriveStorageAmountUnit", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry3 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry3
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_OnlinePlayStorageAmountUnit", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry4 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry4
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_PcHardDriveStorageAmountUnitId", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry5 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry5
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_PcSystemMemoryAmountUnitId", "GameCapabilityCountry", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for GameCapabilityCountry6 in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "GameCapabilityCountry")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<GameCapabilityCountry> GameCapabilityCountry6
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "GameCapabilityCountry");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<GameCapabilityCountry>("RawCatalogDBModel.FK_GameCapabilityCountry_PcVideoMemoryAmountUnitId", "GameCapabilityCountry", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Store in the schema.
    /// </summary>
    /// <KeyProperties>
    /// storeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Store")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Store : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Store object.
        /// </summary>
        /// <param name="storeId">Initial value of storeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Store CreateStore(int storeId, string name, global::System.DateTime modifiedDate)
        {
            Store store = new Store();
            store.storeId = storeId;
            store.name = name;
            store.modifiedDate = modifiedDate;
            return store;
        }
        /// <summary>
        /// There are no comments for Property storeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int storeId
        {
            get
            {
                return this._storeId;
            }
            set
            {
                this.OnstoreIdChanging(value);
                this.ReportPropertyChanging("storeId");
                this._storeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("storeId");
                this.OnstoreIdChanged();
            }
        }
        private int _storeId;
        partial void OnstoreIdChanging(int value);
        partial void OnstoreIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferStore in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferStore_Store", "OfferStore")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferStore> OfferStore
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferStore>("RawCatalogDBModel.FK_OfferStore_Store", "OfferStore");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferStore>("RawCatalogDBModel.FK_OfferStore_Store", "OfferStore", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Subscription in the schema.
    /// </summary>
    /// <KeyProperties>
    /// subscriptionId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Subscription")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Subscription : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Subscription object.
        /// </summary>
        /// <param name="subscriptionId">Initial value of subscriptionId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="isCancelable">Initial value of isCancelable.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Subscription CreateSubscription(global::System.Guid subscriptionId, string internalName, int isCancelable, global::System.DateTime modifiedDate)
        {
            Subscription subscription = new Subscription();
            subscription.subscriptionId = subscriptionId;
            subscription.internalName = internalName;
            subscription.isCancelable = isCancelable;
            subscription.modifiedDate = modifiedDate;
            return subscription;
        }
        /// <summary>
        /// There are no comments for Property subscriptionId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid subscriptionId
        {
            get
            {
                return this._subscriptionId;
            }
            set
            {
                this.OnsubscriptionIdChanging(value);
                this.ReportPropertyChanging("subscriptionId");
                this._subscriptionId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("subscriptionId");
                this.OnsubscriptionIdChanged();
            }
        }
        private global::System.Guid _subscriptionId;
        partial void OnsubscriptionIdChanging(global::System.Guid value);
        partial void OnsubscriptionIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property subscriptionDuration in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<int> subscriptionDuration
        {
            get
            {
                return this._subscriptionDuration;
            }
            set
            {
                this.OnsubscriptionDurationChanging(value);
                this.ReportPropertyChanging("subscriptionDuration");
                this._subscriptionDuration = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("subscriptionDuration");
                this.OnsubscriptionDurationChanged();
            }
        }
        private global::System.Nullable<int> _subscriptionDuration;
        partial void OnsubscriptionDurationChanging(global::System.Nullable<int> value);
        partial void OnsubscriptionDurationChanged();
        /// <summary>
        /// There are no comments for Property isCancelable in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int isCancelable
        {
            get
            {
                return this._isCancelable;
            }
            set
            {
                this.OnisCancelableChanging(value);
                this.ReportPropertyChanging("isCancelable");
                this._isCancelable = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("isCancelable");
                this.OnisCancelableChanged();
            }
        }
        private int _isCancelable;
        partial void OnisCancelableChanging(int value);
        partial void OnisCancelableChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for BillingFrequency in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_BillingFrequency", "BillingFrequency")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public BillingFrequency BillingFrequency
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<BillingFrequency>("RawCatalogDBModel.FK_Subscription_BillingFrequency", "BillingFrequency").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<BillingFrequency>("RawCatalogDBModel.FK_Subscription_BillingFrequency", "BillingFrequency").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for BillingFrequency in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<BillingFrequency> BillingFrequencyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<BillingFrequency>("RawCatalogDBModel.FK_Subscription_BillingFrequency", "BillingFrequency");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<BillingFrequency>("RawCatalogDBModel.FK_Subscription_BillingFrequency", "BillingFrequency", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for DurationType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "C_FK_Subscription_DurationType", "DurationType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public DurationType DurationType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DurationType>("RawCatalogDBModel.C_FK_Subscription_DurationType", "DurationType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DurationType>("RawCatalogDBModel.C_FK_Subscription_DurationType", "DurationType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for DurationType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<DurationType> DurationTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<DurationType>("RawCatalogDBModel.C_FK_Subscription_DurationType", "DurationType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<DurationType>("RawCatalogDBModel.C_FK_Subscription_DurationType", "DurationType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Subscription_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Subscription_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_Subscription_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_Subscription_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for SellType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_SellType", "SellType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public SellType SellType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SellType>("RawCatalogDBModel.FK_Subscription_SellType", "SellType").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SellType>("RawCatalogDBModel.FK_Subscription_SellType", "SellType").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for SellType in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<SellType> SellTypeReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SellType>("RawCatalogDBModel.FK_Subscription_SellType", "SellType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<SellType>("RawCatalogDBModel.FK_Subscription_SellType", "SellType", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_SubscriptionFamily", "SubscriptionFamily")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public SubscriptionFamily SubscriptionFamily
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_Subscription_SubscriptionFamily", "SubscriptionFamily").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_Subscription_SubscriptionFamily", "SubscriptionFamily").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<SubscriptionFamily> SubscriptionFamilyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_Subscription_SubscriptionFamily", "SubscriptionFamily");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_Subscription_SubscriptionFamily", "SubscriptionFamily", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionBillingInformation in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionBillingInformation_Subscription", "SubscriptionBillingInformation")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public SubscriptionBillingInformation SubscriptionBillingInformation
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionBillingInformation>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "SubscriptionBillingInformation").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionBillingInformation>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "SubscriptionBillingInformation").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionBillingInformation in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<SubscriptionBillingInformation> SubscriptionBillingInformationReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionBillingInformation>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "SubscriptionBillingInformation");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<SubscriptionBillingInformation>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "SubscriptionBillingInformation", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.SubscriptionBillingInformation in the schema.
    /// </summary>
    /// <KeyProperties>
    /// subscriptionId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="SubscriptionBillingInformation")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class SubscriptionBillingInformation : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new SubscriptionBillingInformation object.
        /// </summary>
        /// <param name="subscriptionId">Initial value of subscriptionId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static SubscriptionBillingInformation CreateSubscriptionBillingInformation(global::System.Guid subscriptionId, global::System.DateTime modifiedDate)
        {
            SubscriptionBillingInformation subscriptionBillingInformation = new SubscriptionBillingInformation();
            subscriptionBillingInformation.subscriptionId = subscriptionId;
            subscriptionBillingInformation.modifiedDate = modifiedDate;
            return subscriptionBillingInformation;
        }
        /// <summary>
        /// There are no comments for Property subscriptionId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid subscriptionId
        {
            get
            {
                return this._subscriptionId;
            }
            set
            {
                this.OnsubscriptionIdChanging(value);
                this.ReportPropertyChanging("subscriptionId");
                this._subscriptionId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("subscriptionId");
                this.OnsubscriptionIdChanged();
            }
        }
        private global::System.Guid _subscriptionId;
        partial void OnsubscriptionIdChanging(global::System.Guid value);
        partial void OnsubscriptionIdChanged();
        /// <summary>
        /// There are no comments for Property billingsvcComponentId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Nullable<global::System.Guid> billingsvcComponentId
        {
            get
            {
                return this._billingsvcComponentId;
            }
            set
            {
                this.OnbillingsvcComponentIdChanging(value);
                this.ReportPropertyChanging("billingsvcComponentId");
                this._billingsvcComponentId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("billingsvcComponentId");
                this.OnbillingsvcComponentIdChanged();
            }
        }
        private global::System.Nullable<global::System.Guid> _billingsvcComponentId;
        partial void OnbillingsvcComponentIdChanging(global::System.Nullable<global::System.Guid> value);
        partial void OnbillingsvcComponentIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionBillingInformation_Subscription", "Subscription")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Subscription Subscription
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Subscription>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "Subscription").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Subscription>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "Subscription").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Subscription> SubscriptionReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Subscription>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Subscription>("RawCatalogDBModel.FK_SubscriptionBillingInformation_Subscription", "Subscription", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.SubscriptionFamily in the schema.
    /// </summary>
    /// <KeyProperties>
    /// subscriptionFamilyId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="SubscriptionFamily")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class SubscriptionFamily : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new SubscriptionFamily object.
        /// </summary>
        /// <param name="subscriptionFamilyId">Initial value of subscriptionFamilyId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        /// <param name="titleId">Initial value of titleId.</param>
        public static SubscriptionFamily CreateSubscriptionFamily(global::System.Guid subscriptionFamilyId, string internalName, global::System.DateTime modifiedDate, int titleId)
        {
            SubscriptionFamily subscriptionFamily = new SubscriptionFamily();
            subscriptionFamily.subscriptionFamilyId = subscriptionFamilyId;
            subscriptionFamily.internalName = internalName;
            subscriptionFamily.modifiedDate = modifiedDate;
            subscriptionFamily.titleId = titleId;
            return subscriptionFamily;
        }
        /// <summary>
        /// There are no comments for Property subscriptionFamilyId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid subscriptionFamilyId
        {
            get
            {
                return this._subscriptionFamilyId;
            }
            set
            {
                this.OnsubscriptionFamilyIdChanging(value);
                this.ReportPropertyChanging("subscriptionFamilyId");
                this._subscriptionFamilyId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("subscriptionFamilyId");
                this.OnsubscriptionFamilyIdChanged();
            }
        }
        private global::System.Guid _subscriptionFamilyId;
        partial void OnsubscriptionFamilyIdChanging(global::System.Guid value);
        partial void OnsubscriptionFamilyIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Property titleId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int titleId
        {
            get
            {
                return this._titleId;
            }
            set
            {
                this.OntitleIdChanging(value);
                this.ReportPropertyChanging("titleId");
                this._titleId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("titleId");
                this.OntitleIdChanged();
            }
        }
        private int _titleId;
        partial void OntitleIdChanging(int value);
        partial void OntitleIdChanged();
        /// <summary>
        /// There are no comments for LiveSubscriptionFamily in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_LiveSubscriptionFamily_SubscriptionFamily", "LiveSubscriptionFamily")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public LiveSubscriptionFamily LiveSubscriptionFamily
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LiveSubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "LiveSubscriptionFamily").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LiveSubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "LiveSubscriptionFamily").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for LiveSubscriptionFamily in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<LiveSubscriptionFamily> LiveSubscriptionFamilyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<LiveSubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "LiveSubscriptionFamily");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<LiveSubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_SubscriptionFamily", "LiveSubscriptionFamily", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionFamily_Media", "Media")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Media Media
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "Media").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "Media").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Media in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Media> MediaReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Media>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "Media");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Media>("RawCatalogDBModel.FK_SubscriptionFamily_Media", "Media", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for Subscription in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_Subscription_SubscriptionFamily", "Subscription")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<Subscription> Subscription
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<Subscription>("RawCatalogDBModel.FK_Subscription_SubscriptionFamily", "Subscription");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<Subscription>("RawCatalogDBModel.FK_Subscription_SubscriptionFamily", "Subscription", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamilyService in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamilyService")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<SubscriptionFamilyService> SubscriptionFamilyService
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<SubscriptionFamilyService>("RawCatalogDBModel.FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamilyService");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<SubscriptionFamilyService>("RawCatalogDBModel.FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamilyService", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.SubscriptionFamilyService in the schema.
    /// </summary>
    /// <KeyProperties>
    /// subscriptionFamilyId
    /// serviceId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="SubscriptionFamilyService")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class SubscriptionFamilyService : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new SubscriptionFamilyService object.
        /// </summary>
        /// <param name="subscriptionFamilyId">Initial value of subscriptionFamilyId.</param>
        /// <param name="serviceId">Initial value of serviceId.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static SubscriptionFamilyService CreateSubscriptionFamilyService(global::System.Guid subscriptionFamilyId, int serviceId, global::System.DateTime modifiedDate)
        {
            SubscriptionFamilyService subscriptionFamilyService = new SubscriptionFamilyService();
            subscriptionFamilyService.subscriptionFamilyId = subscriptionFamilyId;
            subscriptionFamilyService.serviceId = serviceId;
            subscriptionFamilyService.modifiedDate = modifiedDate;
            return subscriptionFamilyService;
        }
        /// <summary>
        /// There are no comments for Property subscriptionFamilyId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Guid subscriptionFamilyId
        {
            get
            {
                return this._subscriptionFamilyId;
            }
            set
            {
                this.OnsubscriptionFamilyIdChanging(value);
                this.ReportPropertyChanging("subscriptionFamilyId");
                this._subscriptionFamilyId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("subscriptionFamilyId");
                this.OnsubscriptionFamilyIdChanged();
            }
        }
        private global::System.Guid _subscriptionFamilyId;
        partial void OnsubscriptionFamilyIdChanging(global::System.Guid value);
        partial void OnsubscriptionFamilyIdChanged();
        /// <summary>
        /// There are no comments for Property serviceId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int serviceId
        {
            get
            {
                return this._serviceId;
            }
            set
            {
                this.OnserviceIdChanging(value);
                this.ReportPropertyChanging("serviceId");
                this._serviceId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("serviceId");
                this.OnserviceIdChanged();
            }
        }
        private int _serviceId;
        partial void OnserviceIdChanging(int value);
        partial void OnserviceIdChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for Service in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionFamilyService_Service", "Service")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public Service Service
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Service>("RawCatalogDBModel.FK_SubscriptionFamilyService_Service", "Service").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Service>("RawCatalogDBModel.FK_SubscriptionFamilyService_Service", "Service").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for Service in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<Service> ServiceReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<Service>("RawCatalogDBModel.FK_SubscriptionFamilyService_Service", "Service");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<Service>("RawCatalogDBModel.FK_SubscriptionFamilyService_Service", "Service", value);
                }
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamily")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public SubscriptionFamily SubscriptionFamily
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamily").Value;
            }
            set
            {
                ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamily").Value = value;
            }
        }
        /// <summary>
        /// There are no comments for SubscriptionFamily in the schema.
        /// </summary>
        [global::System.ComponentModel.BrowsableAttribute(false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityReference<SubscriptionFamily> SubscriptionFamilyReference
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamily");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedReference<SubscriptionFamily>("RawCatalogDBModel.FK_SubscriptionFamilyService_SubscriptionFamily", "SubscriptionFamily", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.Tier in the schema.
    /// </summary>
    /// <KeyProperties>
    /// tierId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="Tier")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class Tier : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new Tier object.
        /// </summary>
        /// <param name="tierId">Initial value of tierId.</param>
        /// <param name="internalName">Initial value of internalName.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static Tier CreateTier(int tierId, string internalName, global::System.DateTime modifiedDate)
        {
            Tier tier = new Tier();
            tier.tierId = tierId;
            tier.internalName = internalName;
            tier.modifiedDate = modifiedDate;
            return tier;
        }
        /// <summary>
        /// There are no comments for Property tierId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int tierId
        {
            get
            {
                return this._tierId;
            }
            set
            {
                this.OntierIdChanging(value);
                this.ReportPropertyChanging("tierId");
                this._tierId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("tierId");
                this.OntierIdChanged();
            }
        }
        private int _tierId;
        partial void OntierIdChanging(int value);
        partial void OntierIdChanged();
        /// <summary>
        /// There are no comments for Property internalName in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string internalName
        {
            get
            {
                return this._internalName;
            }
            set
            {
                this.OninternalNameChanging(value);
                this.ReportPropertyChanging("internalName");
                this._internalName = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("internalName");
                this.OninternalNameChanged();
            }
        }
        private string _internalName;
        partial void OninternalNameChanging(string value);
        partial void OninternalNameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for LiveSubscriptionFamily in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_LiveSubscriptionFamily_Tier", "LiveSubscriptionFamily")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<LiveSubscriptionFamily> LiveSubscriptionFamily
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<LiveSubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_Tier", "LiveSubscriptionFamily");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<LiveSubscriptionFamily>("RawCatalogDBModel.FK_LiveSubscriptionFamily_Tier", "LiveSubscriptionFamily", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.UserType in the schema.
    /// </summary>
    /// <KeyProperties>
    /// userTypeId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="UserType")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class UserType : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new UserType object.
        /// </summary>
        /// <param name="userTypeId">Initial value of userTypeId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static UserType CreateUserType(int userTypeId, string name, global::System.DateTime modifiedDate)
        {
            UserType userType = new UserType();
            userType.userTypeId = userTypeId;
            userType.name = name;
            userType.modifiedDate = modifiedDate;
            return userType;
        }
        /// <summary>
        /// There are no comments for Property userTypeId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int userTypeId
        {
            get
            {
                return this._userTypeId;
            }
            set
            {
                this.OnuserTypeIdChanging(value);
                this.ReportPropertyChanging("userTypeId");
                this._userTypeId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("userTypeId");
                this.OnuserTypeIdChanged();
            }
        }
        private int _userTypeId;
        partial void OnuserTypeIdChanging(int value);
        partial void OnuserTypeIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for OfferInstanceUserType in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_OfferInstanceUserType_UserType", "OfferInstanceUserType")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<OfferInstanceUserType> OfferInstanceUserType
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<OfferInstanceUserType>("RawCatalogDBModel.FK_OfferInstanceUserType_UserType", "OfferInstanceUserType");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<OfferInstanceUserType>("RawCatalogDBModel.FK_OfferInstanceUserType_UserType", "OfferInstanceUserType", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.VideoDefinition in the schema.
    /// </summary>
    /// <KeyProperties>
    /// videoDefinitionId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="VideoDefinition")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class VideoDefinition : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new VideoDefinition object.
        /// </summary>
        /// <param name="videoDefinitionId">Initial value of videoDefinitionId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static VideoDefinition CreateVideoDefinition(int videoDefinitionId, string name, global::System.DateTime modifiedDate)
        {
            VideoDefinition videoDefinition = new VideoDefinition();
            videoDefinition.videoDefinitionId = videoDefinitionId;
            videoDefinition.name = name;
            videoDefinition.modifiedDate = modifiedDate;
            return videoDefinition;
        }
        /// <summary>
        /// There are no comments for Property videoDefinitionId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int videoDefinitionId
        {
            get
            {
                return this._videoDefinitionId;
            }
            set
            {
                this.OnvideoDefinitionIdChanging(value);
                this.ReportPropertyChanging("videoDefinitionId");
                this._videoDefinitionId = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("videoDefinitionId");
                this.OnvideoDefinitionIdChanged();
            }
        }
        private int _videoDefinitionId;
        partial void OnvideoDefinitionIdChanging(int value);
        partial void OnvideoDefinitionIdChanged();
        /// <summary>
        /// There are no comments for Property name in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public string name
        {
            get
            {
                return this._name;
            }
            set
            {
                this.OnnameChanging(value);
                this.ReportPropertyChanging("name");
                this._name = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value, false);
                this.ReportPropertyChanged("name");
                this.OnnameChanged();
            }
        }
        private string _name;
        partial void OnnameChanging(string value);
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for Property modifiedDate in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.DateTime modifiedDate
        {
            get
            {
                return this._modifiedDate;
            }
            set
            {
                this.OnmodifiedDateChanging(value);
                this.ReportPropertyChanging("modifiedDate");
                this._modifiedDate = global::System.Data.Objects.DataClasses.StructuralObject.SetValidValue(value);
                this.ReportPropertyChanged("modifiedDate");
                this.OnmodifiedDateChanged();
            }
        }
        private global::System.DateTime _modifiedDate;
        partial void OnmodifiedDateChanging(global::System.DateTime value);
        partial void OnmodifiedDateChanged();
        /// <summary>
        /// There are no comments for VideoInstance in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute("RawCatalogDBModel", "FK_VideoInstance_VideoDefinition", "VideoInstance")]
        [global::System.Xml.Serialization.XmlIgnoreAttribute()]
        [global::System.Xml.Serialization.SoapIgnoreAttribute()]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public global::System.Data.Objects.DataClasses.EntityCollection<VideoInstance> VideoInstance
        {
            get
            {
                return ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.GetRelatedCollection<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_VideoDefinition", "VideoInstance");
            }
            set
            {
                if ((value != null))
                {
                    ((global::System.Data.Objects.DataClasses.IEntityWithRelationships)(this)).RelationshipManager.InitializeRelatedCollection<VideoInstance>("RawCatalogDBModel.FK_VideoInstance_VideoDefinition", "VideoInstance", value);
                }
            }
        }
    }
    /// <summary>
    /// There are no comments for RawCatalogDBModel.VideoEncoding in the schema.
    /// </summary>
    /// <KeyProperties>
    /// videoEncodingId
    /// </KeyProperties>
    [global::System.Data.Objects.DataClasses.EdmEntityTypeAttribute(NamespaceName="RawCatalogDBModel", Name="VideoEncoding")]
    [global::System.Runtime.Serialization.DataContractAttribute(IsReference=true)]
    [global::System.Serializable()]
    public partial class VideoEncoding : global::System.Data.Objects.DataClasses.EntityObject
    {
        /// <summary>
        /// Create a new VideoEncoding object.
        /// </summary>
        /// <param name="videoEncodingId">Initial value of videoEncodingId.</param>
        /// <param name="name">Initial value of name.</param>
        /// <param name="modifiedDate">Initial value of modifiedDate.</param>
        public static VideoEncoding CreateVideoEncoding(int videoEncodingId, string name, global::System.DateTime modifiedDate)
        {
            VideoEncoding videoEncoding = new VideoEncoding();
            videoEncoding.videoEncodingId = videoEncodingId;
            videoEncoding.name = name;
            videoEncoding.modifiedDate = modifiedDate;
            return videoEncoding;
        }
        /// <summary>
        /// There are no comments for Property videoEncodingId in the schema.
        /// </summary>
        [global::System.Data.Objects.DataClasses.EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [global::System.Runtime.Serialization.DataMemberAttribute()]
        public int videoEncodingId
        {
            get
            {
                return this._videoEncodingId;
            }
            set
            {
                this.OnvideoEncodingIdChanging(value);
                this.ReportPropertyChanging("videoEncodingId");
                this._videoEncodingId = global::System.Data.Objects.DataClasses.Stru