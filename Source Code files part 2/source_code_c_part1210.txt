t
CBsString CBsString::SpanIncluding(LPCTSTR lpszCharSet) const
{
	ASSERT(BsAfxIsValidString(lpszCharSet));
	return Left((INT)_tcsspn(m_pchData, lpszCharSet));
}

// strcspn equivalent
CBsString CBsString::SpanExcluding(LPCTSTR lpszCharSet) const
{
	ASSERT(BsAfxIsValidString(lpszCharSet));
	return Left((INT)_tcscspn(m_pchData, lpszCharSet));
}

//////////////////////////////////////////////////////////////////////////////
// Finding

int CBsString::ReverseFind(TCHAR ch) const
{
	// find last single character
	LPTSTR lpsz = _tcsrchr(m_pchData, (_TUCHAR)ch);

	// return -1 if not found, distance from beginning otherwise
	return (lpsz == NULL) ? -1 : (int)(lpsz - m_pchData);
}

// find a sub-string (like strstr)
int CBsString::Find(LPCTSTR lpszSub) const
{
	return Find(lpszSub, 0);
}

int CBsString::Find(LPCTSTR lpszSub, int nStart) const
{
	ASSERT(BsAfxIsValidString(lpszSub));

	int nLength = GetData()->nDataLength;
	if (nStart > nLength)
		return -1;

	// find first matching substring
	LPTSTR lpsz = _tcsstr(m_pchData + nStart, lpszSub);

	// return -1 for not found, distance from beginning otherwise
	return (lpsz == NULL) ? -1 : (int)(lpsz - m_pchData);
}

/////////////////////////////////////////////////////////////////////////////
// CBsString formatting

#define TCHAR_ARG   TCHAR
#define WCHAR_ARG   WCHAR
#define CHAR_ARG    char

#ifdef _X86_
	#define DOUBLE_ARG  _BSAFX_DOUBLE
#else
	#define DOUBLE_ARG  double
#endif

#define FORCE_ANSI      0x10000
#define FORCE_UNICODE   0x20000
#define FORCE_INT64		0x40000

void CBsString::FormatV(LPCTSTR lpszFormat, va_list argList)
{
	ASSERT(BsAfxIsValidString(lpszFormat));

	va_list argListSave = argList;

	// make a guess at the maximum length of the resulting string
	
	int nMaxLen = 16 * 1024;  // Don't expect it to be larger than this - SRS

#if 0	
	for (LPCTSTR lpsz = lpszFormat; *lpsz != '\0'; lpsz = _tcsinc(lpsz))
	{
		// handle '%' character, but watch out for '%%'
		if (*lpsz != '%' || *(lpsz = _tcsinc(lpsz)) == '%')
		{
			nMaxLen += (INT)_tclen(lpsz);
			continue;
		}

		int nItemLen = 0;

		// handle '%' character with format
		int nWidth = 0;
		for (; *lpsz != '\0'; lpsz = _tcsinc(lpsz))
		{
			// check for valid flags
			if (*lpsz == '#')
				nMaxLen += 2;   // for '0x'
			else if (*lpsz == '*')
				nWidth = va_arg(argList, int);
			else if (*lpsz == '-' || *lpsz == '+' || *lpsz == '0' ||
				*lpsz == ' ')
				;
			else // hit non-flag character
				break;
		}
		// get width and skip it
		if (nWidth == 0)
		{
			// width indicated by
			nWidth = _ttoi(lpsz);
			for (; *lpsz != '\0' && _istdigit(*lpsz); lpsz = _tcsinc(lpsz))
				;
		}
		ASSERT(nWidth >= 0);

		int nPrecision = 0;
		if (*lpsz == '.')
		{
			// skip past '.' separator (width.precision)
			lpsz = _tcsinc(lpsz);

			// get precision and skip it
			if (*lpsz == '*')
			{
				nPrecision = va_arg(argList, int);
				lpsz = _tcsinc(lpsz);
			}
			else
			{
				nPrecision = _ttoi(lpsz);
				for (; *lpsz != '\0' && _istdigit(*lpsz); lpsz = _tcsinc(lpsz))
					;
			}
			ASSERT(nPrecision >= 0);
		}

		// should be on type modifier or specifier
		int nModifier = 0;
		if (_tcsncmp(lpsz, _T("I64"), 3) == 0)
		{
			lpsz += 3;
			nModifier = FORCE_INT64;
#if !defined(_X86_) && !defined(_ALPHA_)
			// __int64 is only available on X86 and ALPHA platforms
			ASSERT(FALSE);
#endif
		}
		else
		{
			switch (*lpsz)
			{
			// modifiers that affect size
			case 'h':
				nModifier = FORCE_ANSI;
				lpsz = _tcsinc(lpsz);
				break;
			case 'l':
				nModifier = FORCE_UNICODE;
				lpsz = _tcsinc(lpsz);
				break;

			// modifiers that do not affect size
			case 'F':
			case 'N':
			case 'L':
				lpsz = _tcsinc(lpsz);
				break;
			}
		}

		// now should be on specifier
		switch (*lpsz | nModifier)
		{
		// single characters
		case 'c':
		case 'C':
			nItemLen = 2;
			va_arg(argList, TCHAR_ARG);
			break;
		case 'c'|FORCE_ANSI:
		case 'C'|FORCE_ANSI:
			nItemLen = 2;
			va_arg(argList, CHAR_ARG);
			break;
		case 'c'|FORCE_UNICODE:
		case 'C'|FORCE_UNICODE:
			nItemLen = 2;
			va_arg(argList, WCHAR_ARG);
			break;

		// strings
		case 's':
			{
				LPCTSTR pstrNextArg = va_arg(argList, LPCTSTR);
				if (pstrNextArg == NULL)
				   nItemLen = 6;  // "(null)"
				else
				{
				   nItemLen = lstrlen(pstrNextArg);
				   nItemLen = max(1, nItemLen);
				}
			}
			break;

		case 'S':
			{
#ifndef _UNICODE
				LPWSTR pstrNextArg = va_arg(argList, LPWSTR);
				if (pstrNextArg == NULL)
				   nItemLen = 6;  // "(null)"
				else
				{
				   nItemLen = wcslen(pstrNextArg);
				   nItemLen = max(1, nItemLen);
				}
#else
				LPCSTR pstrNextArg = va_arg(argList, LPCSTR);
				if (pstrNextArg == NULL)
				   nItemLen = 6; // "(null)"
				else
				{
				   nItemLen = lstrlenA(pstrNextArg);
				   nItemLen = max(1, nItemLen);
				}
#endif
			}
			break;

		case 's'|FORCE_ANSI:
		case 'S'|FORCE_ANSI:
			{
				LPCSTR pstrNextArg = va_arg(argList, LPCSTR);
				if (pstrNextArg == NULL)
				   nItemLen = 6; // "(null)"
				else
				{
				   nItemLen = lstrlenA(pstrNextArg);
				   nItemLen = max(1, nItemLen);
				}
			}
			break;

		case 's'|FORCE_UNICODE:
		case 'S'|FORCE_UNICODE:
			{
				LPWSTR pstrNextArg = va_arg(argList, LPWSTR);
				if (pstrNextArg == NULL)
				   nItemLen = 6; // "(null)"
				else
				{
				   nItemLen = (INT)wcslen(pstrNextArg);
				   nItemLen = max(1, nItemLen);
				}
			}
			break;
		}

		// adjust nItemLen for strings
		if (nItemLen != 0)
		{
			if (nPrecision != 0)
				nItemLen = min(nItemLen, nPrecision);
			nItemLen = max(nItemLen, nWidth);
		}
		else
		{
			switch (*lpsz)
			{
			// integers
			case 'd':
			case 'i':
			case 'u':
			case 'x':
			case 'X':
			case 'o':
				if (nModifier & FORCE_INT64)
					va_arg(argList, __int64);
				else
					va_arg(argList, int);
				nItemLen = 32;
				nItemLen = max(nItemLen, nWidth+nPrecision);
				break;

			case 'e':
			case 'g':
			case 'G':
				va_arg(argList, DOUBLE_ARG);
				nItemLen = 128;
				nItemLen = max(nItemLen, nWidth+nPrecision);
				break;

			case 'f':
				{
					double f;
					LPTSTR pszTemp;

					// 312 == strlen("-1+(309 zeroes).")
					// 309 zeroes == max precision of a double
					// 6 == adjustment in case precision is not specified,
					//   which means that the precision defaults to 6
					pszTemp = (LPTSTR)_alloca(max(nWidth, 312+nPrecision+6));

					f = va_arg(argList, double);
					_stprintf( pszTemp, _T( "%*.*f" ), nWidth, nPrecision+6, f );
					nItemLen = _tcslen(pszTemp);
				}
				break;

			case 'p':
				va_arg(argList, void*);
				nItemLen = 32;
				nItemLen = max(nItemLen, nWidth+nPrecision);
				break;

			// no output
			case 'n':
				va_arg(argList, int*);
				break;

			default:
				ASSERT(FALSE);  // unknown formatting option
			}
		}

		// adjust nMaxLen for output nItemLen
		nMaxLen += nItemLen;
	}
#endif

	GetBuffer(nMaxLen);
	INT i = _vstprintf(m_pchData, lpszFormat, argListSave);
	ASSERT( i <= GetAllocLength() );
	ReleaseBuffer();

	va_end(argListSave);
}

// formatting (using wsprintf style formatting)
const CBsString& BSAFX_CDECL CBsString::Format(LPCTSTR lpszFormat, ...)
{
	ASSERT(BsAfxIsValidString(lpszFormat));

	va_list argList;
	va_start(argList, lpszFormat);
	FormatV(lpszFormat, argList);
	va_end(argList);

	return *this;
}

void CBsString::TrimRight(LPCTSTR lpszTargetList)
{
	// find beginning of trailing matches
	// by starting at beginning (DBCS aware)

	CopyBeforeWrite();
	LPTSTR lpsz = m_pchData;
	LPTSTR lpszLast = NULL;

	while (*lpsz != '\0')
	{
		if (_tcschr(lpszTargetList, *lpsz) != NULL)
		{
			if (lpszLast == NULL)
				lpszLast = lpsz;
		}
		else
			lpszLast = NULL;
		lpsz = _tcsinc(lpsz);
	}

	if (lpszLast != NULL)
	{
		// truncate at left-most matching character
		*lpszLast = '\0';
		GetData()->nDataLength = (int)(lpszLast - m_pchData);
	}
}

void CBsString::TrimRight(TCHAR chTarget)
{
	// find beginning of trailing matches
	// by starting at beginning (DBCS aware)

	CopyBeforeWrite();
	LPTSTR lpsz = m_pchData;
	LPTSTR lpszLast = NULL;

	while (*lpsz != '\0')
	{
		if (*lpsz == chTarget)
		{
			if (lpszLast == NULL)
				lpszLast = lpsz;
		}
		else
			lpszLast = NULL;
		lpsz = _tcsinc(lpsz);
	}

	if (lpszLast != NULL)
	{
		// truncate at left-most matching character
		*lpszLast = '\0';
		GetData()->nDataLength = (int)(lpszLast - m_pchData);
	}
}


void CBsString::TrimRight()
{
	// find beginning of trailing spaces by starting at beginning (DBCS aware)

	CopyBeforeWrite();
	LPTSTR lpsz = m_pchData;
	LPTSTR lpszLast = NULL;
	
	while (*lpsz != '\0')
	{
		if (_istspace(*lpsz))
		{
			if (lpszLast == NULL)
				lpszLast = lpsz;
		}
		else
			lpszLast = NULL;
		lpsz = _tcsinc(lpsz);
	}

	if (lpszLast != NULL)
	{
		// truncate at trailing space start
		*lpszLast = '\0';
		GetData()->nDataLength = (int)(lpszLast - m_pchData);
	}
}

void CBsString::TrimLeft(LPCTSTR lpszTargets)
{
	// if we're not trimming anything, we're not doing any work
	if (SafeStrlen(lpszTargets) == 0)
		return;

	CopyBeforeWrite();
	LPCTSTR lpsz = m_pchData;

	while (*lpsz != '\0')
	{
		if (_tcschr(lpszTargets, *lpsz) == NULL)
			break;
		lpsz = _tcsinc(lpsz);
	}

	if (lpsz != m_pchData)
	{
		// fix up data and length
		int nDataLength = GetData()->nDataLength - (int)(lpsz - m_pchData);
		memmove(m_pchData, lpsz, (nDataLength+1)*sizeof(TCHAR));
		GetData()->nDataLength = nDataLength;
	}
}

void CBsString::TrimLeft(TCHAR chTarget)
{
	// find first non-matching character

	CopyBeforeWrite();
	LPCTSTR lpsz = m_pchData;

	while (chTarget == *lpsz)
		lpsz = _tcsinc(lpsz);

	if (lpsz != m_pchData)
	{
		// fix up data and length
		int nDataLength = GetData()->nDataLength - (int)(lpsz - m_pchData);
		memmove(m_pchData, lpsz, (nDataLength+1)*sizeof(TCHAR));
		GetData()->nDataLength = nDataLength;
	}
}

void CBsString::TrimLeft()
{
	// find first non-space character

	CopyBeforeWrite();
	LPCTSTR lpsz = m_pchData;
	
	while (_istspace(*lpsz))
		lpsz = _tcsinc(lpsz);

	if (lpsz != m_pchData)
	{
    	// fix up data and length
    	int nDataLength = GetData()->nDataLength - (int)(lpsz - m_pchData);
    	memmove(m_pchData, lpsz, (nDataLength+1)*sizeof(TCHAR));
    	GetData()->nDataLength = nDataLength;
	}
}


//
//  From validadd.cpp
//

BOOL BSAFXAPI BsAfxIsValidString(LPCWSTR lpsz, int nLength)
{
    if (lpsz == NULL)
        return FALSE;
    return ::IsBadStringPtrW(lpsz, nLength) == 0;
}

BOOL BSAFXAPI BsAfxIsValidString(LPCSTR lpsz, int nLength)
{
    if (lpsz == NULL)
        return FALSE;
    return ::IsBadStringPtrA(lpsz, nLength) == 0;
}

BOOL BSAFXAPI BsAfxIsValidAddress(const void* lp, UINT nBytes, BOOL bReadWrite)
{
    // simple version using Win-32 APIs for pointer validation.
    return (lp != NULL && !IsBadReadPtr(lp, nBytes) &&
        (!bReadWrite || !IsBadWritePtr((LPVOID)lp, nBytes)));
}
///////////////////////////////////////////////////////////////////////////////
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststmsg.cxx ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    vststmsg.cxx

Abstract:

    Implementation of test message classes for the server


    Brian Berkowitz  [brianb]  05/22/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      05/22/2000  Created
    ssteiner    06/07/2000  Split client and server portions into
                            two files.  vststmsgclient.cxx contains
                            the client portion.

--*/


#include <stdafx.h>
#include <vststmsg.hxx>
#include <vststmsghandler.hxx>

void LogUnexpectedFailure(LPCWSTR wsz, ...);

/*++

Routine Description:

    This needs to be run once on the server side to install all of the message handlers.

Arguments:

    None

Return Value:

    <Enter return values here>

--*/
static void
InstallServerMsgHandlers()
{
    g_msgTypes[VSTST_MT_TEXT].pfnHandler                = CVsTstMsgHandlerRoutines::PrintMessage;
    g_msgTypes[VSTST_MT_IMMEDIATETEXT].pfnHandler       = CVsTstMsgHandlerRoutines::PrintMessage;
    g_msgTypes[VSTST_MT_FAILURE].pfnHandler             = CVsTstMsgHandlerRoutines::HandleFailure;
    g_msgTypes[VSTST_MT_OPERATIONFAILURE].pfnHandler    = CVsTstMsgHandlerRoutines::HandleOperationFailure;
    g_msgTypes[VSTST_MT_UNEXPECTEDEXCEPTION].pfnHandler = CVsTstMsgHandlerRoutines::HandleUnexpectedException;
    g_msgTypes[VSTST_MT_SUCCESS].pfnHandler             = CVsTstMsgHandlerRoutines::HandleSuccess;
}

CVsTstMsgHandler::CVsTstMsgHandler(
    IN LPCWSTR pwszLogFileName
    ) :
	m_bcsQueueInitialized(false),
	m_pmsgFirst(NULL),
	m_pmsgLast(NULL),
	m_cbMaxMsgLength(0),
	m_hThreadReader(NULL),
	m_hThreadWorker(NULL),
	m_hevtWorker(NULL),
	m_hevtReader(NULL),
	m_bReadEnabled(false),
	m_bTerminateWorker(false),
	m_bTerminateReader(false),
    m_pipeList(NULL),
    m_bcsPipeListInitialized(false),
    m_cNtLog( pwszLogFileName )
	{
	    //
	    //  Initialize the general message types array and install the message
	    //  handlers.
	    //
	    InitMsgTypes();
	    InstallServerMsgHandlers();
	}

// free data allocated by the class
void CVsTstMsgHandler::FreeData()
	{
	if (m_bcsQueueInitialized)
		{
		m_csQueue.Term();
		m_bcsQueueInitialized = false;
		}

    if (m_bcsPipeListInitialized)
		{
        m_csPipeList.Term();
		m_bcsPipeListInitialized = false;
		}

	while(m_pmsgFirst)
		{
		VSTST_MSG_HDR *pmsgNext = m_pmsgFirst->pmsgNext;
		delete m_pmsgFirst;
		m_pmsgFirst = pmsgNext;
		}

	if (m_hThreadWorker)
		{
		CloseHandle(m_hThreadWorker);
		m_hThreadWorker = NULL;
		}

	if (m_hevtWorker)
		{
		CloseHandle(m_hevtWorker);
		m_hevtWorker = NULL;
		}

	if (m_hevtReader)
		{
		CloseHandle(m_hevtReader);
		m_hevtReader = NULL;
		}
	}


CVsTstMsgHandler::~CVsTstMsgHandler()
	{
	ForceTermination();

	FreeData();
	}
	

// initailize message handler and worker thread
HRESULT CVsTstMsgHandler::Initialize(UINT cbMaxMsg)
	{
	m_cbMaxMsgLength = cbMaxMsg;
	try
		{
		m_csQueue.Init();
		m_bcsQueueInitialized = true;
        m_csPipeList.Init();
        m_bcsPipeListInitialized = true;
		}
	catch(...)
		{
		return E_UNEXPECTED;
		}

	HRESULT hr = S_OK;

	m_hevtWorker = CreateEvent(NULL, TRUE, FALSE, NULL);
	if (m_hevtWorker == NULL)
		goto _ErrExit;

	m_hevtReader = CreateEvent(NULL, TRUE, FALSE, NULL);
	if (m_hevtReader == NULL)
		goto _ErrExit;

	DWORD tid;

	m_hThreadWorker = CreateThread
							(
							NULL,
							64*1024,
							StartWorkerThread,
							this,
							0,
							&tid
							);


	if (m_hThreadWorker == NULL)
		goto _ErrExit;

    return S_OK;

_ErrExit:
	hr = HRESULT_FROM_WIN32(GetLastError());

	FreeData();
	return hr;
	}


// adjust message pointers
bool CVsTstMsgHandler::AdjustPointers(VSTST_MSG_HDR *phdr)
	{
	VSTST_MSG_TYPE_TABLE *pType = &g_msgTypes[phdr->type];
	BYTE *pb = phdr->rgb;
	VOID **ppv = (VOID **) (pb + pType->cbFixed);
	pb = (BYTE *) (ppv + pType->cVarPtr);
	for(unsigned iVarPtr = 0; iVarPtr < pType->cVarPtr; iVarPtr++, ppv++)
		{
		*ppv = pb;
		size_t cb;
		switch(pType->pointerTypes[iVarPtr])
			{
			default:
				return false;

			case VSTST_VPT_BYTE:
				cb = *(UINT *) pb;
				break;

            case VSTST_VPT_ANSI:
				cb = strlen((char *) pb) + 1;
				break;

            case VSTST_VPT_UNICODE:
				cb = (wcslen((WCHAR *) pb) + 1) * sizeof(WCHAR);
				break;
            }

		// align to pointer boundary
		cb = (cb + sizeof(PVOID) - 1) & ~(sizeof(PVOID) - 1);
		pb += cb;
		}

	return true;
	}

// process message immediately
bool CVsTstMsgHandler::ProcessMsgImmediate(VSTST_MSG_HDR *phdr)
	{
	if (!AdjustPointers(phdr))
		return false;

	VSTST_MSG_TYPE_TABLE *pType = &g_msgTypes[phdr->type];
	try
		{
		pType->pfnHandler(phdr, &m_cNtLog);
		}
	catch(...)
		{
		return false;
		}

	return true;
	}

// queue message for worker thrad
bool CVsTstMsgHandler::QueueMsg(VSTST_MSG_HDR *phdr)
	{
	BYTE *pbMsg = new BYTE[phdr->cbMsg];
	if (pbMsg == NULL)
		// can't allocate message, wait for queue to of messages
		// to complete and then process messages serially
		{
		WaitForQueueToComplete();
		return ProcessMsgImmediate(phdr);
		}

	memcpy(pbMsg, phdr, phdr->cbMsg);
	VSTST_MSG_HDR *phdrT = (VSTST_MSG_HDR *) pbMsg;
	if (!AdjustPointers(phdrT))
		return false;

	m_csQueue.Lock();
	if (m_pmsgLast == NULL)
		{
		VSTST_ASSERT(m_pmsgFirst == NULL);
		m_pmsgLast = m_pmsgFirst = phdrT;
		SetEvent(m_hevtWorker);
		}
	else
		{
		VSTST_ASSERT(m_pmsgLast->pmsgNext == NULL);
		m_pmsgLast->pmsgNext = phdrT;

		// replace last element on queue
		m_pmsgLast = phdrT;
		}

	m_csQueue.Unlock();
	return true;
	}


// execute items on the work queue
bool CVsTstMsgHandler::DoWork()
	{		
	//  Add this thread as a participant
	m_cNtLog.AddParticipant();
	
	//  For now start the one and only variation
	m_cNtLog.StartVariation( L"VssTestController" );
		
	while(TRUE)
		{
		// wait for something to get on the work queue or for 1 second
		if (WaitForSingleObject(m_hevtWorker, 1000) == WAIT_FAILED)
		{
		    //  Log severe error
		    m_cNtLog.Log( eSevLev_Severe, L"CVsTstMsgHandler::DoWork, WaitForSingleObject returned WAIT_FAILED, dwRet: %d", ::GetLastError() );

		    //  End the variation
        	m_cNtLog.EndVariation();

            //  Remove the thread as a participant
        	m_cNtLog.RemoveParticipant();
		
			return false;
		}
		
		while(TRUE)
			{
			// lock queue
			m_csQueue.Lock();

			// check whether queue is empty
			if (m_pmsgFirst == NULL)
				{
				VSTST_ASSERT(m_pmsgLast == NULL);

				// check whether we should terminate the thread
				if (m_bTerminateWorker)
					{
					// terminate thread
					m_csQueue.Unlock();
					
                	//  End the variation
                	m_cNtLog.EndVariation();
                	
                    //  Remove the thread as a participant
                	m_cNtLog.RemoveParticipant();
		
					return true;
					}

				// setup to wait again
				ResetEvent(m_hevtWorker);
				m_csQueue.Unlock();
				break;
				}

			// pull first message off of queue
			VSTST_MSG_HDR *phdr = m_pmsgFirst;

			// move head of queue to next element
			m_pmsgFirst = m_pmsgFirst->pmsgNext;

			// is queue now empty
			if (m_pmsgFirst == NULL)
				{
				VSTST_ASSERT(m_pmsgLast == phdr);

				// set tail of queue to null
				m_pmsgLast = NULL;
				}

			// unlock queue before executing item
			m_csQueue.Unlock();

			// execute item
			VSTST_MSG_TYPE_TABLE *pType = &g_msgTypes[phdr->type];
			try
				{
				pType->pfnHandler(phdr, &m_cNtLog );
				}
			catch(...)
				{
    		    //  Log severe error
    		    m_cNtLog.Log( eSevLev_Severe, L"CVsTstMsgHandler::DoWork, caught unexpected exception from message handler" );

    		    //  End the variation
            	m_cNtLog.EndVariation();
    		
                //  Remove the thread as a participant
            	m_cNtLog.RemoveParticipant();
		
				return false;
				}
			}
		}

	return true;
	}


// terminate worker thread, waiting for all work to complete
void CVsTstMsgHandler::WaitForQueueToComplete()
	{
	m_bTerminateWorker = true;
	if (WaitForSingleObject(m_hThreadWorker, INFINITE) == WAIT_FAILED)
		{
		// polling way to wait if we wait fails.  Note that we usually
		// would only expect to get here in stress situations
		while(TRUE)
			{
			m_csQueue.Lock();
			if (m_pmsgFirst == NULL)
				{
				m_csQueue.Unlock();
				break;
				}

			m_csQueue.Unlock();
			Sleep(100);
			}
		}
	}


DWORD CVsTstMsgHandler::StartWorkerThread(VOID *pv)
	{
	CVsTstMsgHandler *pHandler = (CVsTstMsgHandler *) pv;

	try
		{
		pHandler->DoWork();
		}
	catch(...)
		{
		LogUnexpectedFailure(L"Worker thread unexpectedly terminated");
		}

	return 0;
	}

void CVsTstMsgHandler::StartProcessingMessages()
	{
	m_bReadEnabled = true;
	SetEvent(m_hevtReader);
	}

void CVsTstMsgHandler::StopProcessingMessages()
	{
	ResetEvent(m_hevtReader);
	m_bReadEnabled = false;
	}

void CVsTstMsgHandler::ForceTermination()
	{
	m_bReadEnabled = false;
	m_bTerminateWorker = true;
	m_bTerminateReader = true;
	SetEvent(m_hevtReader);
	if (m_hThreadWorker)
		{
		DWORD dwErr = WaitForSingleObject(m_hThreadWorker, 5000);
		if (dwErr == WAIT_FAILED || dwErr == WAIT_TIMEOUT)
			// force termination of worker thread
			TerminateThread(m_hThreadWorker, 1);

		CloseHandle(m_hThreadWorker);
		m_hThreadWorker = NULL;
		}

    m_csPipeList.Lock();

    while(m_pipeList != NULL)
        {
		CVsTstPipe *pipe = m_pipeList;
		HANDLE hThread = pipe->m_hThreadReader;
		pipe->m_hThreadReader = NULL;
		m_csPipeList.Unlock();
        m_pipeList->ForceTermination(hThread);
		m_csPipeList.Lock();
		if (m_pipeList == pipe)
			delete m_pipeList;
        }

    m_csPipeList.Unlock();
	}

// launch a pipe reader thread
HRESULT CVsTstMsgHandler::LaunchReader()
    {
    CVsTstPipe *pipe = new CVsTstPipe(this);
    if (pipe == NULL)
        return E_OUTOFMEMORY;

    HRESULT hr = pipe->Initialize(m_cbMaxMsgLength);
    if (FAILED(hr))
        {
        delete pipe;
        return hr;
        }

    return S_OK;
    }


// link pipe into pipe list
void CVsTstMsgHandler::LinkPipe(CVsTstPipe *pipe)
    {
    VSTST_ASSERT(!pipe->m_bLinked);
    m_csPipeList.Lock();
    pipe->m_prev = NULL;
    pipe->m_next = m_pipeList;
	if (m_pipeList)
		{
		VSTST_ASSERT(m_pipeList->m_prev == NULL);
        m_pipeList->m_prev = pipe;
		}

    m_pipeList = pipe;
    m_csPipeList.Unlock();
    pipe->m_bLinked = true;
    }

// unlink pipe from pipe list
void CVsTstMsgHandler::UnlinkPipe(CVsTstPipe *pipe)
    {
    VSTST_ASSERT(pipe->m_bLinked);
    m_csPipeList.Lock();
    if (pipe->m_prev == NULL)
        {
        VSTST_ASSERT(m_pipeList == pipe);
        m_pipeList = pipe->m_next;
        if (m_pipeList)
            {
            VSTST_ASSERT(m_pipeList->m_prev == pipe);
            m_pipeList->m_prev = NULL;
            }
        }
    else
        {
        VSTST_ASSERT(pipe->m_prev->m_next == pipe);
        pipe->m_prev->m_next = pipe->m_next;
        if (pipe->m_next)
            {
            VSTST_ASSERT(pipe->m_next->m_prev == pipe);
            pipe->m_next->m_prev = pipe->m_prev;
            }
        }

    m_csPipeList.Unlock();
    pipe->m_bLinked = false;
    }


// constructor for a pipe
CVsTstPipe::CVsTstPipe(CVsTstMsgHandler *pHandler) :
    m_hPipe(NULL),
    m_hevtOverlapped(NULL),
    m_rgbMsg(NULL),
    m_cbMsg(0),
    m_hThreadReader(NULL),
    m_bLinked(NULL),
    m_pHandler(pHandler),
	m_bConnected(false)
    {
    }

// destructor for a pipe
CVsTstPipe::~CVsTstPipe()
    {
	// unlink pipe from list if linked
    if (m_bLinked)
        {
        VSTST_ASSERT(m_pHandler);
        m_pHandler->UnlinkPipe(this);
        }

    FreeData();
    }


// initailize message handler and worker thread
HRESULT CVsTstPipe::Initialize(UINT cbMaxMsg)
	{
	HRESULT hr = S_OK;

	// create pipe
	m_hPipe = CreateNamedPipe
				(
				s_wszPipeName,
				FILE_FLAG_OVERLAPPED|PIPE_ACCESS_INBOUND,
				PIPE_TYPE_MESSAGE|PIPE_READMODE_MESSAGE|PIPE_WAIT,
				PIPE_UNLIMITED_INSTANCES,
				0,
				cbMaxMsg,
				100,
				NULL
				);

    if (m_hPipe == INVALID_HANDLE_VALUE)
		return HRESULT_FROM_WIN32(GetLastError());

	// create message buffer
	m_cbMsg = cbMaxMsg;
	m_rgbMsg = new BYTE[m_cbMsg];
	if (m_rgbMsg == NULL)
		{
		hr = E_OUTOFMEMORY;
		goto _ErrCleanup;
		}

	// create overlapped read event
	m_hevtOverlapped = CreateEvent(NULL, TRUE, FALSE, NULL);
	if (m_hevtOverlapped == NULL)
		goto _ErrExit;



	// create reader thread
	DWORD tid;
	m_hThreadReader = CreateThread
							(
							NULL,
							256*1024,
							StartReaderThread,
							this,
							0,
							&tid
							);

    if (m_hThreadReader == NULL)
		goto _ErrExit;

	// link pipe into list
    m_pHandler->LinkPipe(this);

    return S_OK;

_ErrExit:
	hr = HRESULT_FROM_WIN32(GetLastError());

_ErrCleanup:
	FreeData();
	return hr;
	}


// free data allocated by the class
void CVsTstPipe::FreeData()
	{
	delete m_rgbMsg;
	m_rgbMsg = NULL;

	if (m_hPipe != INVALID_HANDLE_VALUE)
		{
		// disconnect pipe if connected
		if (m_bConnected)
			{
			DisconnectNamedPipe(m_hPipe);
			m_bConnected = false;
			}

		CloseHandle(m_hPipe);
		m_hPipe = NULL;
		}

	if (m_hThreadReader)
		{
		CloseHandle(m_hThreadReader);
		m_hThreadReader = NULL;
		}

	if (m_hevtOverlapped)
		{
		CloseHandle(m_hevtOverlapped);
		m_hevtOverlapped = NULL;
		}
	}

void CVsTstPipe::ForceTermination(HANDLE hThread)
	{
    // thread should already be terminated
	DWORD dwErr = WaitForSingleObject(hThread, 5000);
	if (dwErr == WAIT_FAILED || dwErr == WAIT_TIMEOUT)
		// force termination of thread
		TerminateThread(hThread, 1);

    CloseHandle(hThread);
	}



// setup overlapped I/O structure used for reading data
// from the pipe
void CVsTstPipe::SetupOverlapped()
	{
	VSTST_ASSERT(m_hevtOverlapped);
	ResetEvent(m_hevtOverlapped);
	memset(&m_overlap, 0, sizeof(m_overlap));
	m_overlap.hEvent = m_hevtOverlapped;
	}

bool CVsTstPipe::WaitForConnection()
	{
	SetupOverlapped();
	if (ConnectNamedPipe(m_hPipe, &m_overlap))
		return true;

	if (GetLastError() == ERROR_IO_PENDING)
		{
		while(TRUE)
			{
			if (!m_pHandler->m_bReadEnabled)
				{
				CancelIo(m_hPipe);
				return false;
				}

			DWORD dwErr = WaitForSingleObject(m_hevtOverlapped, 1000);
			if (dwErr == WAIT_OBJECT_0)
				break;

			if (dwErr == WAIT_FAILED)
				{
				Sleep(1000);
				CancelIo(m_hPipe);
				return false;
				}
			}
		}

	return true;
	}


// do the work of reading messages
VSTST_READER_STATUS CVsTstPipe::ReadMessages(bool bConnect)
	{
    if (bConnect)
        {
        if (!WaitForConnection())
			return VSTST_RS_NOTCONNECTED;

        // launch a new reader thread to wait for the next connection
        m_pHandler->LaunchReader();
        }

    // while we are doing reads
	while(m_pHandler->m_bReadEnabled)
		{
		DWORD cbRead;

        // setup overlapped structure
        SetupOverlapped();

		if (!ReadFile
				(
				m_hPipe,
				m_rgbMsg,
				m_cbMsg,
				&cbRead,
				&m_overlap
				))
           {
		   DWORD dwErr = GetLastError();
		   if (dwErr == ERROR_IO_PENDING)
			   {
			   while(TRUE)
				   {
				   if (!m_pHandler->m_bReadEnabled)
					   {
					   CancelIo(m_hPipe);
					   return VSTST_RS_READDISABLED;
					   }

				   DWORD dwErr = WaitForSingleObject(m_hevtOverlapped, 1000);
				   if (dwErr == WAIT_OBJECT_0)
					   break;

				   if (dwErr == WAIT_FAILED)
					   {
					   Sleep(1000);
					   CancelIo(m_hPipe);
					   continue;
					   }
				   }

			   if (!GetOverlappedResult(m_hPipe, &m_overlap, &cbRead, FALSE))
				   {
				   CancelIo(m_hPipe);
				   continue;
				   }
			   }
		   else
			   {
			   // unexpected error reading from pipe
			   DWORD dwErr = GetLastError();
			   if (dwErr == ERROR_BROKEN_PIPE)
				   {
                   // terminate thread as we are no longer reading from
                   // the pipe
				   DisconnectNamedPipe(m_hPipe);
                   return VSTST_RS_DISCONNECTED;
				   }
			   else
				   ReadPipeError(dwErr);

			   return VSTST_RS_ERROR;
			   }
		   }

       VSTST_MSG_HDR *phdr = (VSTST_MSG_HDR *) m_rgbMsg;
	   if (phdr->cbMsg != cbRead ||
		   phdr->type == VSTST_MT_UNDEFINED ||
		   phdr->type >= VSTST_MT_MAXMSGTYPE)
		   LogInvalidMessage(phdr);
	   else if (g_msgTypes[phdr->type].priority == VSTST_MP_IMMEDIATE)
		   {
		   if (!m_pHandler->ProcessMsgImmediate(phdr))
			   LogInvalidMessage(phdr);
		   }
	   else
		   {
		   if (!m_pHandler->QueueMsg(phdr))
			   LogInvalidMessage(phdr);
		   }
	   }

   return VSTST_RS_READDISABLED;
   }


DWORD CVsTstPipe::StartReaderThread(VOID *pv)
	{
	CVsTstPipe *pipe = (CVsTstPipe *) pv;

	bool bConnected = false;
	try
		{
		while(!pipe->m_pHandler->m_bTerminateReader)
			{
			if (WaitForSingleObject(pipe->m_pHandler->m_hevtReader, INFINITE) == WAIT_FAILED)
				break;

			VSTST_READER_STATUS status = pipe->ReadMessages(!bConnected);
            if (status == VSTST_RS_DISCONNECTED)
				{
				bConnected = false;
                break;
				}
			else if (status != VSTST_RS_NOTCONNECTED)
				bConnected = true;
			}
		}
	catch(...)
		{
		LogUnexpectedFailure(L"Read thread unexpectedly terminated");
		}

    delete pipe;
	return 0;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststmsgclient.cxx ===
/*++

Copyright (c) 2000-2001  Microsoft Corporation

Module Name:

    vststmsgclient.cxx

Abstract:

    Implementation of test message classes for the client and holder of
    shared methods and variables shared between client and server.


    Brian Berkowitz  [brianb]  05/22/2000

TBD:

Revision History:

    Name        Date        Comments
    brianb      05/22/2000  Created
    ssteiner    06/07/2000  Split client and server portions into
                            two files.  vststmsg.cxx contains
                            the server portion.

--*/

#include "stdafx.h"
#include "vststmsgclient.hxx"

void LogUnexpectedFailure(LPCWSTR wsz, ...);

VSTST_MSG_TYPE_TABLE g_msgTypes[VSTST_MT_MAXMSGTYPE];

void AddMessageType
	(
	VSTST_MSG_TYPE type,
	UINT cbFixed,
	UINT cVarPtr,
	VSTST_MSG_PRIORITY priority,
	VSTST_MSG_HANDLER pfnHandler,
	VSTST_VARPTR_TYPE ptype1 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype2 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype3 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype4 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype5 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype6 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype7 = VSTST_VPT_UNDEFINED,
	VSTST_VARPTR_TYPE ptype8 = VSTST_VPT_UNDEFINED
	)
	{
	VSTST_MSG_TYPE_TABLE *pEntry = &g_msgTypes[type];
	pEntry->cbFixed = cbFixed;
	pEntry->cVarPtr = cVarPtr;
	pEntry->priority = priority;
	pEntry->pfnHandler = pfnHandler;
	pEntry->pointerTypes[0] = (BYTE) ptype1;
	pEntry->pointerTypes[1] = (BYTE) ptype2;
	pEntry->pointerTypes[2] = (BYTE) ptype3;
	pEntry->pointerTypes[3] = (BYTE) ptype4;
	pEntry->pointerTypes[4] = (BYTE) ptype5;
	pEntry->pointerTypes[5] = (BYTE) ptype6;
	pEntry->pointerTypes[6] = (BYTE) ptype7;
	pEntry->pointerTypes[7] = (BYTE) ptype8;
	};


 void InitMsgTypes()
	{
	AddMessageType
		(
		VSTST_MT_TEXT,
		FIELD_OFFSET(VSTST_TEXTMSG, pch),
		1,
		VSTST_MP_QUEUED,
		NULL,   //  Not needed by client, server will fill in
		VSTST_VPT_ANSI
		);

	AddMessageType
		(
		VSTST_MT_IMMEDIATETEXT,
		FIELD_OFFSET(VSTST_TEXTMSG, pch),
		1,
		VSTST_MP_IMMEDIATE,
		NULL,
		VSTST_VPT_ANSI
		);

	AddMessageType
		(
		VSTST_MT_FAILURE,
		FIELD_OFFSET(VSTST_FAILUREMSG, szFailure),
		1,
		VSTST_MP_QUEUED,
		NULL,
		VSTST_VPT_ANSI
		);

	AddMessageType
		(
		VSTST_MT_OPERATIONFAILURE,
		FIELD_OFFSET(VSTST_OPERATIONFAILUREMSG, szFailedOperation),
		1,
		VSTST_MP_QUEUED,
		NULL,
		VSTST_VPT_ANSI
		);

	AddMessageType
		(
		VSTST_MT_UNEXPECTEDEXCEPTION,
		FIELD_OFFSET(VSTST_UNEXPECTEDEXCEPTIONMSG, szFailedRoutine),
		1,
		VSTST_MP_QUEUED,
		NULL,
		VSTST_VPT_ANSI
		);

	AddMessageType
		(
		VSTST_MT_SUCCESS,
		FIELD_OFFSET(VSTST_SUCCESSMSG, szMsg),
		1,
		VSTST_MP_QUEUED,
		NULL,
		VSTST_VPT_ANSI
		);

    }


CVsTstClientMsg::CVsTstClientMsg() :
	m_bcsInitialized(false),
	m_rgbMsg(NULL),
	m_hPipe(INVALID_HANDLE_VALUE),
	m_bSkipWrites(false),
	m_seqQueued(0),
	m_seqImmediate(0)
	{
	}

CVsTstClientMsg::~CVsTstClientMsg()
	{
	delete m_rgbMsg;
	if (m_bcsInitialized)
		m_cs.Term();

	if (m_hPipe != INVALID_HANDLE_VALUE)
		CloseHandle(m_hPipe);
	}

// initialize messaging to test controller
HRESULT CVsTstClientMsg::Init
	(
	LONGLONG processId,
	UINT cbMaxMsg,
	bool bIgnorePipeCreationFailure
	)
	{
	m_processId = processId;
	try
		{
		m_cs.Init();
		m_bcsInitialized = true;
		}
	catch(...)
		{
		return E_UNEXPECTED;
		}

	m_hPipe = CreateFile
					(
					s_wszPipeName,
					GENERIC_WRITE,
					FILE_SHARE_READ|FILE_SHARE_WRITE,
					NULL,
					OPEN_EXISTING,
					FILE_ATTRIBUTE_NORMAL,
					NULL
					);


   if (m_hPipe == INVALID_HANDLE_VALUE)
	   {
	   if (bIgnorePipeCreationFailure)
		   m_bSkipWrites = true;
	   else
		   return HRESULT_FROM_WIN32(GetLastError());
	   }
   else
	   {
	   m_cbMaxMsgLength = cbMaxMsg;
	   m_rgbMsg = new BYTE[cbMaxMsg];
	   if (m_rgbMsg == NULL)
		   {
		   CloseHandle(m_hPipe);
		   m_hPipe = INVALID_HANDLE_VALUE;
		   return E_OUTOFMEMORY;
		   }
	   }

   return S_OK;
   }

// send a message to the test controller
HRESULT CVsTstClientMsg::SendMessage(VSTST_MSG_TYPE type, void *pv)
	{
	m_cs.Lock();
	VSTST_ASSERT(type < VSTST_MT_MAXMSGTYPE);
	VSTST_MSG_TYPE_TABLE *pType = &g_msgTypes[type];

	VSTST_MSG_HDR *phdr = (VSTST_MSG_HDR *) m_rgbMsg;

	phdr->processId = m_processId;
	phdr->type = type;
	time(&phdr->time);
	if (pType->priority == VSTST_MP_IMMEDIATE)
		phdr->sequence = ++m_seqImmediate;
	else
		phdr->sequence = ++m_seqQueued;

	BYTE *pbMsg = phdr->rgb;

	size_t cbUsed = pType->cbFixed + FIELD_OFFSET(VSTST_MSG_HDR, rgb) +
				  pType->cVarPtr * sizeof(PVOID);

	if (cbUsed >= m_cbMaxMsgLength)
		{
		m_cs.Unlock();
		return HRESULT_FROM_WIN32(ERROR_BUFFER_OVERFLOW);
		}

	// copy in fixed portion of data structure
	memcpy(pbMsg, pv, pType->cbFixed);
	pbMsg += pType->cbFixed;

	// reserve room for pointers
	memset(pbMsg, 0, pType->cVarPtr * sizeof(PVOID));
	pbMsg += pType->cVarPtr * sizeof(PVOID);

	// walk and write out pointer data
	VOID **ppv = (VOID **) ((BYTE *) pv + pType->cbFixed);
	for(UINT iPtr = 0; iPtr < pType->cVarPtr; iPtr++, ppv++)
		{
		VSTST_VARPTR_TYPE type = (VSTST_VARPTR_TYPE) pType->pointerTypes[iPtr];
		BYTE *pb = NULL;
		size_t cb = 0;

		switch(type)
			{
			default:
				VSTST_ASSERT(FALSE);
				break;

			case VSTST_VPT_BYTE:
				pb = *(BYTE **) ppv;
				cb = *(UINT *) *pb;
				break;

            case VSTST_VPT_ANSI:
				pb = *(BYTE **) ppv;
				cb = strlen((char *) pb) + 1;
				break;

			case VSTST_VPT_UNICODE:
				pb = *(BYTE **) ppv;
				cb = (wcslen((WCHAR *) pb) + 1) * sizeof(WCHAR);
				break;
			}

		// round up to alignment boundary
		size_t cbAlign = (cb + sizeof(PVOID) - 1) & ~(sizeof(PVOID)-1);

		// check for buffer overflow
		if (cbAlign + cbUsed >= m_cbMaxMsgLength)
			{
			m_cs.Unlock();
			return HRESULT_FROM_WIN32(ERROR_BUFFER_OVERFLOW);
			}

		memcpy(pbMsg, pb, cb);

		// adjust pointer to alignment boundary
		pb += cbAlign;

		// adjust amount used
		cbUsed += cbAlign;
		}

	phdr->cbMsg = cbUsed;
	phdr->pmsgNext = NULL;

	DWORD cbWritten;
	if (!WriteFile(m_hPipe, m_rgbMsg, (UINT) cbUsed, &cbWritten, NULL) || cbUsed != cbWritten)
		{
		m_cs.Unlock();
		return HRESULT_FROM_WIN32(GetLastError());
		}

	VSTST_ASSERT(cbUsed == cbWritten);

	m_cs.Unlock();
	return S_OK;
	}

void CVsTstClientLogger::LogFailure(LPCSTR szFailure)
	{
	VSTST_ASSERT(m_pClient);
	VSTST_FAILUREMSG msg;
	msg.szFailure = szFailure;
	m_pClient->SendMessage(VSTST_MT_FAILURE, &msg);
	}

void CVsTstClientLogger::LogUnexpectedException(LPCSTR szRoutine)
	{
	VSTST_ASSERT(m_pClient);
	VSTST_UNEXPECTEDEXCEPTIONMSG msg;
	msg.szFailedRoutine = szRoutine;
	m_pClient->SendMessage(VSTST_MT_UNEXPECTEDEXCEPTION, &msg);
	}

void CVsTstClientLogger::ValidateResult(HRESULT hr, LPCSTR szOperation)
	{
	VSTST_ASSERT(m_pClient);
	if (FAILED(hr))
		{
		VSTST_OPERATIONFAILUREMSG msg;
		msg.hr = hr;
		msg.szFailedOperation = szOperation;
		m_pClient->SendMessage(VSTST_MT_OPERATIONFAILURE, &msg);
		throw hr;
		}
	}

void CVsTstClientLogger::LogSuccess(LPCSTR sz)
	{
	VSTST_ASSERT(m_pClient);
	VSTST_SUCCESSMSG msg;
	msg.szMsg = sz;
	m_pClient->SendMessage(VSTST_MT_SUCCESS, &msg);
	}

void CVsTstClientLogger::LogMessage(LPCSTR sz)
	{
	VSTST_ASSERT(m_pClient);

	VSTST_TEXTMSG msg;
	msg.pch = sz;
	m_pClient->SendMessage(VSTST_MT_TEXT, &msg);
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststntlog.cxx ===
/*++

Copyright (c) 2000-2001  Microsoft Corporation

Module Name:

    vststntlog.cxx

Abstract:

    Wrapper class for the test team's ntlog suite of APIs and VolSnap test harness.

Author:

    Stefan R. Steiner   [ssteiner]        06-05-2000

Revision History:

--*/

#include "stdafx.h"
#include "ntlog.h"
#include "vststntlog.hxx"

#define VS_TST_NT_LOG_INFO_LEVELS_AND_STYLES \
    TLS_INFO | TLS_WARN | TLS_SEV2 | TLS_PASS | TLS_VARIATION | TLS_REFRESH | TLS_TEST

/*++

Routine Description:

    Constructor for the CVsTstNtLog class

Arguments:

    None

--*/
CVsTstNtLog::CVsTstNtLog(
    IN LPCWSTR pwszLogFileName
    ) : m_cwsNtLogFileName( pwszLogFileName ),
        m_hNtLog( NULL ),
        m_bInVariation( FALSE ),
        m_dwHighestLogLev( TLS_PASS )
{
    //
    //  Create the NtLog log file
    //
    m_hNtLog = ::tlCreateLog( m_cwsNtLogFileName.c_str(), 
        VS_TST_NT_LOG_INFO_LEVELS_AND_STYLES );
    if ( m_hNtLog == NULL )
        VSTST_THROW( HRESULT_FROM_WIN32( ::GetLastError() ) ) ;

    //
    //  Add this thread as a participant
    //
    AddParticipant();
}


/*++

Routine Description:

    Destructor for the CVsTstNtLog class

Arguments:

    None

--*/
CVsTstNtLog::~CVsTstNtLog()
{
    if ( m_hNtLog != NULL )
    {
        //
        //  If we are still in a variation, end it
        //
        if ( m_bInVariation )
            EndVariation();

        //
        //  Specify that the test is finished
        //
        ::tlLog_W( m_hNtLog, m_dwHighestLogLev | TL_TEST, 
            L"Test finished, highest test log-lev: %d",
            m_dwHighestLogLev );
        
        //
        //  Report test stats
        //
        ::tlReportStats( m_hNtLog );

        //
        //  Remove main thread as a participant
        //
        ::tlRemoveParticipant( m_hNtLog );

        //
        //  Destroy the log object
        //
        ::tlDestroyLog( m_hNtLog );    
        
        m_hNtLog = INVALID_HANDLE_VALUE;
    }
}

/*++

Routine Description:

    When a new thread needs access to this logging object, this function
    needs to be called.

Arguments:

    None

Return Value:

    <Enter return values here>

--*/
VOID
CVsTstNtLog::AddParticipant()
{
    if ( !::tlAddParticipant( m_hNtLog, 0, 0 ) )
        VSTST_THROW( E_UNEXPECTED );

    //
    //  This next part is kind of a hack to make sure the new participant has
    //  a variation started.  This code needs to be changed when the coordinator
    //  is able to get it's message thread to start a variation.
    //
    if ( !m_cwsVariationName.IsEmpty() ) 
        if ( !::tlStartVariation( m_hNtLog ) )
            VSTST_THROW( E_UNEXPECTED );
    
    Log( eSevLev_Info, L"Participant added, thread id: 0x%04x", ::GetCurrentThreadId() );
}


/*++

Routine Description:

    When a thread is finished accessing this logging object, this function may
    be called.  The thread which created the object doesn't need to call this 
    function since it is done in the destructor.
    
Arguments:

    None

Return Value:

    <Enter return values here>

--*/
VOID
CVsTstNtLog::RemoveParticipant()
{
    ::tlRemoveParticipant( m_hNtLog );
    
    Log( eSevLev_Info, L"Participant removed, thread id: 0x%04x", ::GetCurrentThreadId() );
}


/*++

Routine Description:

    Call this function when a thread wants to start a new variation.

Arguments:

    None

Return Value:

    <Enter return values here>

--*/
VOID
CVsTstNtLog::StartVariation(
    IN LPCWSTR pwszVariationName
    )
{
    if ( m_bInVariation )
        EndVariation();
    
    m_cwsVariationName = pwszVariationName;    
    if ( !::tlStartVariation( m_hNtLog ) )
        VSTST_THROW( E_UNEXPECTED );
    
    m_bInVariation = TRUE;
    
    Log( eSevLev_Info, L"Variation '%s' started", m_cwsVariationName.c_str() );
}


/*++

Routine Description:

    Call this when a thread is finished with a variation.

Arguments:

    None

Return Value:

    Returns the most severe log-level encountered during the variation.

--*/
DWORD
CVsTstNtLog::EndVariation()
{
    DWORD dwMostSevereLev;    

    dwMostSevereLev = ::tlEndVariation( m_hNtLog );
    
    ::tlLog_W( m_hNtLog, dwMostSevereLev | TL_VARIATION, 
        L"Variation '%s' ended, highest log-lev: %d",
        m_cwsVariationName.c_str(), dwMostSevereLev );
        
    m_bInVariation = FALSE;
    m_cwsVariationName.Empty();
    return dwMostSevereLev;    
}


VOID 
CVsTstNtLog::Log(     
    IN EVsTstNtLogSeverityLevel eSevLev,
    IN LPCWSTR pwszFormat,
    IN ... 
    )
{
    va_list marker;
    va_start( marker, pwszFormat );

    CBsString cwsFormatted;

    cwsFormatted.FormatV( pwszFormat, marker );
    va_end( marker );

    DWORD dwStyle;
    switch( eSevLev )
    {
    case eSevLev_Info: dwStyle    = TLS_INFO; break;
    case eSevLev_Pass: dwStyle    = TLS_PASS; break;
    case eSevLev_Warning: dwStyle = TLS_WARN; break;
    case eSevLev_Severe: dwStyle  = TLS_SEV2; break;
    default:
        VSTST_THROW( E_FAIL );
    }
    
    if ( m_dwHighestLogLev > dwStyle )
         m_dwHighestLogLev = dwStyle;
        
    if ( m_bInVariation )
        dwStyle |= TLS_VARIATION;
    else
        dwStyle |= TLS_TEST;
    ::tlLog_W( m_hNtLog, dwStyle, TEXT( __FILE__ ), (int)__LINE__, L"%s", cwsFormatted.c_str() );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\tstiniconfig.cxx ===
/*++

Copyright (c) 2000-2001  Microsoft Corporation

Module Name:

    TstINIConfig.cxx

Abstract:

    Class that manages the reading of the test scenario INI file.

Author:

    Stefan R. Steiner   [ssteiner]        05-16-2000

Revision History:

--*/

#include <windows.h>
#include <stdio.h>
#include <stdlib.h>

#include "vststtools.hxx"
#include "vs_hash.hxx"

#include "tstiniconfig.hxx"
#include "tstiniconfigpriv.hxx" // has layouts of all the possible INI sections

static VOID
pVsTstWrapOutput(
    IN FILE *pfOut,
    IN LPCWSTR pwszBeginString,
    IN CBsString& cwsToBeWrapped,
    IN SIZE_T cWrapWidth
    );

static LPCWSTR x_wszDefaultINIPath = L"%SystemRoot%\\VsTestHarness.ini";

struct SVsTstSection
{
    LPWSTR m_pwszSectionTypeName;
    SVsTstINISectionDef *m_psSectionDef;
};
    
//
//  This array must match the EVsTstINISectionType enum in tstiniconfigpriv.h.  
//  These strings are the strings found in the INI file in the section headers.  E.g.
//  for section name [VssTestHarness.XXXX]
//  the XXXX is the section qualifier for the section type VssTestHarness.
//  See tstiniconfigpriv.hxx for definitions of sVsTstINISectionDefXXXX variables.
//
static SVsTstSection x_sSectionDefArr[] = 
{
    { L"INVALID",           NULL },
    { L"VssTestController", sVsTstINISectionDefController },
    { L"VssTestRequestor",  sVsTstINISectionDefRequester },
    { L"VssTestWriter",     sVsTstINISectionDefWriter },
    { L"VssTestProvider",   sVsTstINISectionDefProvider }
};

static LPCWSTR x_wszDefaultSectionName = L"DEFAULT";

//
//  Range delimiter
//
static LPCWSTR x_wszRangeString = L"...";

//
//  The following constants define the boolean values when writing to the
//  ini files.
//
static LPWSTR const x_pwszBooleanValueNames[] =
{
    L"No",      // eVsTstBool_False
    L"Yes",     // eVsTstBool_True
    L"Random"   // eVsTstBool_Random
};

//
//  The valid true values that can be specified as a boolean value.
//
static LPWSTR const x_pwszValidBooleanTrueValues[] =
{
    L"YES",
    L"TRUE",
    L"1",
    L"JA",
    L"SI",
    L"OUI",
    NULL
};

//
//  The valid false values that can be specified as a boolean value.
//  
static LPWSTR const x_pwszValidBooleanFalseValues[] =
{
    L"NO",
    L"FALSE",
    L"0",
    L"NEIN",
    L"NON",
    NULL
};

//
//  The valid strings to specify random values.
//
static LPWSTR const x_pwszValidBooleanRandomValues[] =
{
    L"RANDOM",
    L"-1",
    NULL
};

//
//  Function that finds a match within a string array
//
static BOOL
IsInArray( 
    IN const CBsString& cwsString,
    IN LPWSTR const *ppwszStringMatchArray
    )
{
    VSTST_ASSERT( ppwszStringMatchArray != NULL );
    
    while ( *ppwszStringMatchArray != NULL )
    {
        if ( cwsString == *ppwszStringMatchArray )
            return TRUE;
        ++ppwszStringMatchArray;
    }

    return FALSE;
}

//
//  Parent class the all in memory options subclass from
//
class CVsTstSectionOptionBase
{
public:
    CVsTstSectionOptionBase(
        IN EVsTstINIOptionType eOptionType
        ) : m_eOptionType( eOptionType ),
            m_bDefaultOverridden( FALSE ) { };
    
    virtual ~CVsTstSectionOptionBase() {};

    EVsTstINIOptionType GetOptionType() { return m_eOptionType; }

    // 
    //  The value after the "KeyName=" in the INI file
    //
    virtual VOID SetValueFromINIValue(
        IN CBsString cwsINIValue
        ) = 0;

    //
    //  Returns true if the default value was overridden by the INI
    //  file or a call to a SetValueXXXX method in derived classes.
    //
    BOOL IsDefaultOverridden() { return m_bDefaultOverridden; }
    
protected:
    VOID SetDefaultOverriden() { m_bDefaultOverridden = TRUE; }
    
private:
    EVsTstINIOptionType m_eOptionType;
    BOOL m_bDefaultOverridden;    //  TRUE if default value was overridden 
};

//
//  In-memory boolean option.  This maintains the state of
//  one option.  It takes care of using the option definition in 
//  tstiniconfigpriv.hxx to initialize the option with its default value
//  and if the option value changes, makes sure it matches what
//  is allowed by the definition.
//
class CVsTstSectionOptionBoolean : public CVsTstSectionOptionBase
{
public:
    CVsTstSectionOptionBoolean(
        IN SVsTstINIBooleanDef& rsBoolDef
        ) : CVsTstSectionOptionBase( eVsTstOptType_Boolean )
    {
        //  Set up option definition
        m_psBoolDef  = &rsBoolDef;

        //  Set up default values
        m_eBoolValue = m_psBoolDef->m_eBoolDefault;
    };
    
    virtual ~CVsTstSectionOptionBoolean() {};

    virtual VOID SetValueFromINIValue(
        IN CBsString cwsINIValue
        ) 
    { 
        cwsINIValue.TrimLeft();
        cwsINIValue.TrimRight();
        cwsINIValue.MakeUpper();
        if ( ::IsInArray( cwsINIValue, x_pwszValidBooleanTrueValues ) )
            SetValue( eVsTstBool_True );
        else if ( ::IsInArray( cwsINIValue, x_pwszValidBooleanFalseValues ) )
            SetValue( eVsTstBool_False );
        else if ( ::IsInArray( cwsINIValue, x_pwszValidBooleanRandomValues ) )
            SetValue( eVsTstBool_Random );
        else
        {
            CBsString cwsThrow;
            VSTST_THROW( cwsThrow.Format( L"Invalid boolean value '%s'", cwsINIValue.c_str() ) );
        }
            
    }

    VOID SetValue(
        IN EVsTstINIBoolType eBoolValue
        )
    { 
        CBsString cwsThrow;
        
        VSTST_ASSERT( eBoolValue == eVsTstBool_False || eBoolValue == eVsTstBool_True ||
                      eBoolValue == eVsTstBool_Random );
        if ( GetOptionType() != eVsTstOptType_Boolean )
            VSTST_THROW( E_INVALIDARG );
        
        if ( eBoolValue == eVsTstBool_Random && !m_psBoolDef->m_bCanHaveRandom )
            VSTST_THROW( cwsThrow.Format( L"Value 'Random' not allowed for this keyword" ) );
        
        m_eBoolValue = eBoolValue;
        SetDefaultOverriden();
    }

    EVsTstINIBoolType GetValue()
    {
        if ( GetOptionType() != eVsTstOptType_Boolean )
            VSTST_THROW( E_INVALIDARG );
        
        return m_eBoolValue;
    }
    
private:
    EVsTstINIBoolType m_eBoolValue;    
    SVsTstINIBooleanDef *m_psBoolDef;
    
};


//
//  In-memory number option.  This maintains the state of
//  one option.  It takes care of using the option definition in 
//  tstiniconfigpriv.hxx to initialize the option with its default value
//  and if the option value changes, makes sure it matches what
//  is allowed by the definition.
//
class CVsTstSectionOptionNumber : public CVsTstSectionOptionBase
{
public:
    CVsTstSectionOptionNumber(
        IN SVsTstININumberDef& rsNumDef
        ) : CVsTstSectionOptionBase( eVsTstOptType_Number )
    {
        //  Set up option definition
        m_psNumDef = &rsNumDef;

        //  Set up default values
        m_llMinNumberValue = m_psNumDef->m_llDefaultMinNumber;
        if ( m_psNumDef->m_bCanHaveRange )
            m_llMaxNumberValue = m_psNumDef->m_llDefaultMaxNumber;
        else
            m_llMaxNumberValue = m_psNumDef->m_llDefaultMinNumber;   
    };
    
    virtual ~CVsTstSectionOptionNumber() {};
    
    virtual VOID SetValueFromINIValue(
        IN CBsString cwsINIValue
        ) 
    { 
        INT iFind;
        LONGLONG llMinNumberValue;
        LONGLONG llMaxNumberValue;
        
        //
        //  See if the range characters are in the value
        //
        iFind = cwsINIValue.Find( x_wszRangeString );
        if ( iFind == -1 )
        {
            //
            //  Not a range
            //
            llMinNumberValue = _wtoi64( cwsINIValue );
            SetValue( llMinNumberValue, 0, FALSE );
        }
        else
        {
            CBsString cwsTemp( cwsINIValue );
            llMinNumberValue = _wtoi64( cwsTemp );  //  Will stop at ...
            cwsTemp = cwsINIValue.Mid( iFind + (INT)::wcslen( x_wszRangeString ) );
            llMaxNumberValue = _wtoi64( cwsTemp );
            SetValue( llMinNumberValue, llMaxNumberValue, TRUE );
        }            
    }

    VOID SetValue(
        IN LONGLONG llMinNumberValue,
        IN LONGLONG llMaxNumberValue,
        IN BOOL bRange
        )
    { 
        CBsString cwsThrow;
        
        if ( GetOptionType() != eVsTstOptType_Number )
            VSTST_THROW( E_INVALIDARG );

        if ( bRange  &&  llMinNumberValue != llMaxNumberValue  && 
             !m_psNumDef->m_bCanHaveRange )
            VSTST_THROW( cwsThrow.Format( L"%s number range not allowed in value", x_wszRangeString ) );

        if ( llMinNumberValue < m_psNumDef->m_llMinNumber || 
             llMinNumberValue > m_psNumDef->m_llMaxNumber )
            VSTST_THROW( cwsThrow.Format( L"%I64d not within valid min (%I64d) and max (%I64d) number values", 
                llMinNumberValue, m_psNumDef->m_llMinNumber, m_psNumDef->m_llMaxNumber ) );

        if ( bRange )
        {
            if ( llMaxNumberValue < m_psNumDef->m_llMinNumber || 
                 llMaxNumberValue > m_psNumDef->m_llMaxNumber )
                VSTST_THROW( cwsThrow.Format( L"%I64d not within valid min (%I64d) and max (%I64d) number values", 
                    llMaxNumberValue, m_psNumDef->m_llMinNumber, m_psNumDef->m_llMaxNumber ) );
            else if ( llMinNumberValue > llMaxNumberValue )            
                VSTST_THROW( cwsThrow.Format( L"Min value larger than max value" ) );
        }
        
        m_llMinNumberValue = llMinNumberValue;
        if ( bRange )
            m_llMaxNumberValue = llMaxNumberValue;
        else
            m_llMaxNumberValue = llMinNumberValue;
        SetDefaultOverriden();
    }

    VOID GetValue(
        OUT LONGLONG *pllMinNumberValue,
        OUT LONGLONG *pllMaxNumberValue,
        OUT BOOL *pbRange
        )
    {
        if ( GetOptionType() != eVsTstOptType_Number )
            VSTST_THROW( E_INVALIDARG );
        
        *pllMinNumberValue = m_llMinNumberValue;
        *pllMaxNumberValue = m_llMaxNumberValue;

        if ( m_llMinNumberValue == m_llMaxNumberValue )
            *pbRange = FALSE;
        else
            *pbRange = TRUE;
    }

private:    
    LONGLONG m_llMinNumberValue;
    LONGLONG m_llMaxNumberValue;
    SVsTstININumberDef *m_psNumDef;
};


//
//  In-memory string option.  This maintains the state of
//  one option.  It takes care of using the option definition in 
//  tstiniconfigpriv.hxx to initialize the option with its default value
//  and if the option value changes, makes sure it matches what
//  is allowed by the definition.
//
class CVsTstSectionOptionString : public CVsTstSectionOptionBase
{
public:
    CVsTstSectionOptionString(
        IN SVsTstINIStringDef& rsStringDef
        ) : CVsTstSectionOptionBase( eVsTstOptType_String )
    {
        //  Set up option definition
        m_psStringDef = &rsStringDef;

        //  Set up default values
        m_wsStringValue = m_psStringDef->m_pwszDefaultString;
    };
    
    virtual ~CVsTstSectionOptionString() {};

    virtual VOID SetValueFromINIValue(
        IN CBsString cwsINIValue
        ) 
    { 
        SetValue( cwsINIValue );
    }

    VOID SetValue(
        IN const CBsString& rwsStringValue
        )
    { 
        //
        //  If the PossibleValues field is NULL in the definition
        //  then, any string is allowed in the option.
        //
        if ( m_psStringDef->m_pwszPossibleValues != NULL )
        {
            //
            //  See if this string is part of the set of possible
            //  values.  The values are in a string delimited by '|' chars.
            //
            LPWSTR pwszPossibleValues = ::_wcsdup( m_psStringDef->m_pwszPossibleValues );
            if ( pwszPossibleValues == NULL )
                VSTST_THROW( E_OUTOFMEMORY );

            LPWSTR pwszToken;
            pwszToken = ::wcstok( pwszPossibleValues, L"|" );
            while ( pwszToken != NULL )
            {
                if ( ::_wcsicmp( pwszToken, rwsStringValue.c_str() ) == 0 )
                    break;
                pwszToken = ::wcstok( NULL, L"|" );
            }

            free( pwszPossibleValues );
            
            if ( pwszToken == NULL )
            {
                //  Not a string in the PossibleValues array, throw string
                CBsString cwsThrow;
                VSTST_THROW( cwsThrow.Format( L"Invalid value '%s', possible values are '%s'",
                    rwsStringValue.c_str(), m_psStringDef->m_pwszPossibleValues ) );
            }
        }

        m_wsStringValue = rwsStringValue;
        SetDefaultOverriden();
    }

    CBsString GetValue()
    {
        if ( GetOptionType() != eVsTstOptType_String )
            VSTST_THROW( E_INVALIDARG );
        
        return m_wsStringValue;
    }
    
private:
    CBsString m_wsStringValue;    
    SVsTstINIStringDef *m_psStringDef;
};

//
//  Definition of the hash table that maintains the option name to 
//  option class instance mapping.  This will efficiently allow
//  many options to be used in a section.  Pointer to instances
//  of this class are stored in the m_pvOptionsList field of 
//  CVsTstINIConfig.
//
typedef TBsHashMap< CBsString, CVsTstSectionOptionBase * > CVsTstOptionsList;

//
//  The equality test
//
inline BOOL AreKeysEqual( const CBsString& lhK, const CBsString& rhK )
{
    //
    //  Do a case independent compare
    //
    return ( lhK.CompareNoCase( rhK ) == 0 );
}

static LONG CBsStringHashFunc( const CBsString& Key, LONG NumBuckets ) 
{
    //
    //  Need a temp string to uppercase
    //
    CBsString cwsTemp( Key );
    cwsTemp.MakeUpper();
    
    const BYTE *pByteKey = (const BYTE *)cwsTemp.c_str();
    LONG dwHashVal = 0;
    SIZE_T cKeyLen = cwsTemp.GetLength() * sizeof WCHAR;
    
    for ( SIZE_T i = 0; i < cKeyLen; ++i ) 
    {
        dwHashVal += pByteKey[i];
    }
    return dwHashVal % NumBuckets;
}

/*++

Routine Description:

    Constructor for the CVsTstINIConfig class.

Arguments:

    eSectionType - The section type of the section to read.
    pwszSectionQualifier - The qualifier of the section in the INI file, the XXX in [SectionType.XXX]
    bWriteINIFile - If true and the INI file doesn't exist, the INI file
        will be created with the default values filled in.
    pwszINIFileName - The full path to the INI file.  If NULL, the default
        INI file location is used.
    bContinueOnINIFileErrors - If FALSE, an CVsTstINIConfigException class is thrown
        when an error is found in the ini file.  If TRUE, they are silently skipped; however,
        HRESULT's may be still thrown if programatic or memory errors occur.
        
Return Value:

    NONE
    May throw HRESULT and CVsTstINIConfigException exceptions.

--*/
CVsTstINIConfig::CVsTstINIConfig( 
    IN EVsTstINISectionType eSectionType,
    IN LPCWSTR pwszSectionQualifier,
    IN BOOL bWriteINIFile, 
    IN LPCWSTR pwszINIFileName,
    IN BOOL bContinueOnINIFileErrors
    ) : m_bWriteINIFile( bWriteINIFile ),
        m_eSectionType( eSectionType ),
        m_pvOptionsList( NULL ),
        m_bContinueOnINIFileErrors( bContinueOnINIFileErrors )
{
    VSTST_ASSERT( pwszSectionQualifier != NULL );
    VSTST_ASSERT( pwszSectionQualifier[ 0 ] != L'\0' );
    VSTST_ASSERT( eSectionType > eVsTstSectionType_UNKNOWN  &&
        eSectionType < eVsTstSectionType_SENTINEL );

    //
    //  Set up the hash table to be used to store the option values
    //
    m_pvOptionsList = new CVsTstOptionsList( BSHASHMAP_SMALL, CBsStringHashFunc );
    if ( m_pvOptionsList == NULL )
        VSTST_THROW( E_OUTOFMEMORY );
    
    //
    //  Set up the section that will be read
    //
    m_wsSectionName  = x_sSectionDefArr[ m_eSectionType ].m_pwszSectionTypeName;
    m_wsSectionName += L".";
    m_wsSectionName += pwszSectionQualifier;

    //
    //  Set up the INI file path.  If pwszINIFileName is NULL, use the default
    //  INI file name.  The paths can have environment variables that need
    //  to be expanded.
    //
    DWORD dwRet;
    dwRet = ::ExpandEnvironmentStringsW( 
                pwszINIFileName == NULL ? x_wszDefaultINIPath : pwszINIFileName,
                m_wsINIFileName.GetBuffer( MAX_PATH ),
                MAX_PATH );
    m_wsINIFileName.ReleaseBuffer();
    if ( dwRet == 0 )
        VSTST_THROW( E_UNEXPECTED );        

    HRESULT hr;

    //
    //  First initialize all options with their default values
    //
    hr = SetupDefaultValues();
    if ( FAILED( hr ) )
    {
        VSTST_THROW( hr );
    }
    
    //
    //  Now open the ini file.  If the file is not there and the caller wants a 
    //  default INI file created, then what are we waiting for, create it.
    // 
    hr = LoadINIFileData();
    if ( hr == STG_E_FILENOTFOUND && bWriteINIFile )
    {
        hr = CreateDefaultINIFile();
    } 
    
    if ( FAILED( hr ) )
    {
        VSTST_THROW( hr );
    }
}


CVsTstINIConfig::~CVsTstINIConfig()
{
    //
    //  Clean up the options list if necessary
    //
    if ( m_pvOptionsList != NULL )
    {
        CVsTstOptionsList *pcOptionsList = ( CVsTstOptionsList * )m_pvOptionsList;
        CBsString wsOptionName;
        CVsTstSectionOptionBase *pcSectionOptionBase;
        
        pcOptionsList->StartEnum();
        while ( pcOptionsList->GetNextEnum( &wsOptionName, &pcSectionOptionBase ) )
        {
            delete pcSectionOptionBase;
        }    
        pcOptionsList->EndEnum();
        
        delete pcOptionsList;
        
        m_pvOptionsList = NULL;
    }
}


HRESULT
CVsTstINIConfig::LoadINIFileData()
{
    DWORD dwSectionBufferSize = 1024;
    DWORD dwRet;
    LPWSTR pwszSectionBuffer = NULL;

    //
    //  See if the INI file exists, if not return file not found
    //
    if ( ::GetFileAttributesW( m_wsINIFileName ) == -1 )
    {
        if ( ::GetLastError() != ERROR_FILE_NOT_FOUND &&
             ::GetLastError() != ERROR_PATH_NOT_FOUND )
            VSTST_THROW( HRESULT_FROM_WIN32( ::GetLastError() ) );
        else
            return STG_E_FILENOTFOUND;
    }
    
    //
    //  First get the entire section from the INI file by using the funky
    //  GetPrivateProfileSection API.
    //
    do
    {
        if ( pwszSectionBuffer )
        {
            free( pwszSectionBuffer );
            dwSectionBufferSize <<= 2;   // bump up the size by a power of two and try again
        }
        
        pwszSectionBuffer = ( LPWSTR )malloc( sizeof( WCHAR ) * dwSectionBufferSize );
        if ( pwszSectionBuffer == NULL )
            VSTST_THROW( E_OUTOFMEMORY );
        
        dwRet = ::GetPrivateProfileSectionW( 
                    m_wsSectionName,
                    pwszSectionBuffer,
                    dwSectionBufferSize,
                    m_wsINIFileName );        
    } while ( dwRet == dwSectionBufferSize - 2 );  // who came up with this API ???    

    if ( dwRet > 0 )
    {
        //  Section is found and not empty
    
        //
        //  Now go through the section buffer, one option at a time, replacing defaults
        //  with the specified options.
        //
        CVsTstOptionsList *pcOptionsList = ( CVsTstOptionsList * ) m_pvOptionsList;
        
        LPWSTR pwszCurrOption = pwszSectionBuffer;
        while ( true )
        {
            SIZE_T cOptionLen = ::wcslen( pwszCurrOption );
            
            LPWSTR pwszValue = ::wcschr( pwszCurrOption, L'=' ); 
            if ( pwszValue != NULL )
            {
                pwszValue[ 0 ] = '\0'; //  blast away =
                ++pwszValue; //  Skip over blasted =

                //
                //  Now pwszCurrOption only contains the key name and pwszValue contains
                //  the value
                //  Find the key in the option list and set the value
                //
                CVsTstSectionOptionBase *pcSectionOptionBase;
                if ( pcOptionsList->Find( pwszCurrOption, &pcSectionOptionBase ) )
                {
                    //
                    //  Key found, set it.  Note, the SetValue methods
                    //  can throw CBsStrings when an INI file error is 
                    //  found.
                    //
                    try 
                    {
                        pcSectionOptionBase->SetValueFromINIValue( pwszValue );
                    }
                    catch ( CBsString cwsExcept )
                    {
                        if ( !m_bContinueOnINIFileErrors )
                        {
                            CVsTstINIConfigException cExcept;
                            cExcept.m_cwsExceptionString.Format( L"(%s), keyword '%s', section '%s', INI file '%s'", 
                                cwsExcept.c_str(), pwszCurrOption, m_wsSectionName.c_str(), m_wsINIFileName.c_str() );
                            free( pwszSectionBuffer );                
                            VSTST_THROW( cExcept );
                        }
                    }
                }
                else
                {
                    if ( !m_bContinueOnINIFileErrors )
                    {
                        //
                        //  Keyword not found, throw an error.  We might not want to do this
                        //  in the future.
                        //
                        CVsTstINIConfigException cExcept;
                        cExcept.m_cwsExceptionString.Format( L"Unknown keyword '%s', section '%s', INI file '%s'", 
                            pwszCurrOption, m_wsSectionName.c_str(), m_wsINIFileName.c_str() );
                        VSTST_THROW( cExcept );
                    }
                }
            }
            else
            {
                if ( !m_bContinueOnINIFileErrors )
                {
                    CVsTstINIConfigException cExcept;
                    cExcept.m_cwsExceptionString.Format( L"No '=' in line '%s', section '%s' of INI file '%s'", 
                        pwszCurrOption, m_wsSectionName.c_str(), m_wsINIFileName.c_str() );
                    free( pwszSectionBuffer );                
                    VSTST_THROW( cExcept );
                }
            }
            
            pwszCurrOption += cOptionLen;

            if ( pwszCurrOption[ 0 ] == L'\0' && 
                 pwszCurrOption[ 1 ] == L'\0' )
                break;
                
            ++pwszCurrOption;  //  Skip null char
        }
    }
    
    free( pwszSectionBuffer );
    
    return S_OK;
}


HRESULT
CVsTstINIConfig::SetupDefaultValues()
{
    VSTST_ASSERT( m_pvOptionsList != NULL );
    HRESULT hr = S_OK;
    
    //
    //  Initialize all of the section options with the hardwired option types,
    //  max sizes and default values.
    //
    SVsTstINISectionDef *psSectionDef = x_sSectionDefArr[ m_eSectionType ].m_psSectionDef;

    if ( psSectionDef == NULL )
        //  No section definition, return
        return S_OK;

    CVsTstOptionsList *pcOptionsList = ( CVsTstOptionsList * ) m_pvOptionsList;
    
    //
    //  Iterate through the list of options in the definition.
    //
    for( SIZE_T cOptionIdx = 0;
         psSectionDef[ cOptionIdx ].m_pwszKeyName != NULL;
         ++cOptionIdx )
    {
        // 
        //  Skip comments in definition
        //
        if ( psSectionDef[ cOptionIdx ].m_eOptionType == eVsTstOptType_Comment )
            continue;
        
        CVsTstSectionOptionBase *pcOptionBase = NULL;

        //
        //  Depending on type of option, create the correct
        //  object and place it into the hash table.  Yes,
        //  these new()'s can throw exceptions, not a 
        //  problem here, things will clean up properly.
        //
        switch ( psSectionDef[ cOptionIdx ].m_eOptionType )
        {
        case eVsTstOptType_Boolean:
            pcOptionBase = new CVsTstSectionOptionBoolean( 
                psSectionDef[ cOptionIdx ].m_sBooleanDef );
            break;
        case eVsTstOptType_String:
            pcOptionBase = new CVsTstSectionOptionString( 
                psSectionDef[ cOptionIdx ].m_sStringDef );
            break;            
        case eVsTstOptType_Number:
            pcOptionBase = new CVsTstSectionOptionNumber( 
                psSectionDef[ cOptionIdx ].m_sNumberDef );
            break;                        
        default:
            VSTST_ASSERT( "Invalid option type in definition array" && FALSE );
            VSTST_THROW( E_INVALIDARG );
            break;
        }

        if ( pcOptionBase == NULL )
            VSTST_THROW( E_OUTOFMEMORY );
        
        //
        //  Now insert the option object into the hash table.
        //
        try
        {
            LONG lRet;
            CBsString cwsKeyName( psSectionDef[ cOptionIdx ].m_pwszKeyName );

            //
            //  Store key names in uppercase
            //
            lRet = pcOptionsList->Insert( cwsKeyName, pcOptionBase );
            if ( lRet == BSHASHMAP_ALREADY_EXISTS )
            {
                VSTST_ASSERT( "Option name defined twice in definition array" && FALSE );
                VSTST_THROW( E_INVALIDARG );
            }
        }
        VSTST_STANDARD_CATCH();
        
        if ( FAILED( hr ) )
        {
            delete pcOptionBase;
            VSTST_THROW( hr );
        }
    }

    return S_OK;
}

#define VSTST_WRAP_WIDTH 97

/*++

Routine Description:

    Creates a default INI file that specifies all sections, keys
    and default values including comments about what each key
    is for.

Arguments:

    None

Return Value:

    <Enter return values here>

--*/
HRESULT
CVsTstINIConfig::CreateDefaultINIFile()
{
    FILE *pfINIFile = NULL;
    HRESULT hr = S_OK;
    
    try
    {
        //  Open the INI file
        pfINIFile = ::_wfopen( m_wsINIFileName, L"w" );
        if ( pfINIFile == NULL )
        {
            CVsTstINIConfigException cExcept;
            cExcept.m_cwsExceptionString.Format( L"Unable to open INI file '%s' for write", 
                m_wsINIFileName.c_str() );
            VSTST_THROW( cExcept );
        }
        
        //  Write out all known options for all sections.
        for ( SIZE_T idx = ( SIZE_T ) eVsTstSectionType_UNKNOWN + 1;
              idx < ( ( SIZE_T )eVsTstSectionType_SENTINEL );
              ++idx )
        { 
            fwprintf( pfINIFile, L"[%s.%s]\n", 
                x_sSectionDefArr[ idx ].m_pwszSectionTypeName, x_wszDefaultSectionName );
                
            SVsTstINISectionDef *psSectionDef = x_sSectionDefArr[ idx ].m_psSectionDef;
            if ( psSectionDef != NULL )
            {
                CBsString cwsToBeWrapped;
                
                //  Go through each option in the sections.
                for ( SIZE_T cSect = 0; psSectionDef[ cSect ].m_pwszKeyName != NULL; ++cSect )
                {
                    if ( psSectionDef[ cSect ].m_eOptionType != eVsTstOptType_Comment )
                    {
                        cwsToBeWrapped.Format( L"%s - %s", psSectionDef[ cSect ].m_pwszKeyName,
                            psSectionDef[ cSect ].m_pwszDescription );
                        ::pVsTstWrapOutput( pfINIFile, L"; ", cwsToBeWrapped, VSTST_WRAP_WIDTH );
                    }
                    
                    switch ( psSectionDef[ cSect ].m_eOptionType )
                    {
                    case eVsTstOptType_Comment:
                        if ( psSectionDef[ cSect ].m_pwszDescription == NULL )
                            fwprintf( pfINIFile, L"\n" );
                        else
                        {
                            fwprintf( pfINIFile, L";\n" );
                            cwsToBeWrapped.Format( L"%s\n", psSectionDef[ cSect ].m_pwszDescription );
                            ::pVsTstWrapOutput( pfINIFile, L"; ", cwsToBeWrapped, VSTST_WRAP_WIDTH );
                            fwprintf( pfINIFile, L";\n" );
                        }
                        break;
                        
                    case eVsTstOptType_String:
                        if ( psSectionDef[ cSect ].m_sStringDef.m_pwszPossibleValues == NULL )                        
                            cwsToBeWrapped.Format( L"Default value: '%s'\n", 
                                psSectionDef[ cSect ].m_sStringDef.m_pwszDefaultString );
                        else
                        {   
                            CBsString cwsPossibleValuesConverted( psSectionDef[ cSect ].m_sStringDef.m_pwszPossibleValues );
                            cwsPossibleValuesConverted.Replace( L'|', L',' );
                            cwsToBeWrapped.Format( L"Default value: '%s', possible values: '%s'\n", 
                                psSectionDef[ cSect ].m_sStringDef.m_pwszDefaultString,
                                cwsPossibleValuesConverted.c_str() );
                        }
                        ::pVsTstWrapOutput( pfINIFile, L"; ", cwsToBeWrapped, VSTST_WRAP_WIDTH );
                        fwprintf( pfINIFile, L";%s = %s\n\n", 
                            psSectionDef[ cSect ].m_pwszKeyName,
                            psSectionDef[ cSect ].m_sStringDef.m_pwszDefaultString );
                        break;
                        
                    case eVsTstOptType_Boolean:
                        cwsToBeWrapped.Format( L"Default value: '%s'%s", 
                            x_pwszBooleanValueNames[ psSectionDef[ cSect ].m_sBooleanDef.m_eBoolDefault ],
                            ( psSectionDef[ cSect ].m_sBooleanDef.m_bCanHaveRandom )
                               ? L", can have 'Random' value\n" : L"" );
                        ::pVsTstWrapOutput( pfINIFile, L"; ", cwsToBeWrapped, VSTST_WRAP_WIDTH );
                        fwprintf( pfINIFile, L";%s = %s\n\n", 
                            psSectionDef[ cSect ].m_pwszKeyName,
                            x_pwszBooleanValueNames[ psSectionDef[ cSect ].m_sBooleanDef.m_eBoolDefault ] );
                        break;
                            
                    case eVsTstOptType_Number:
                        {
                            SVsTstININumberDef *psNumDef = &( psSectionDef[ cSect ].m_sNumberDef );
                            if ( psNumDef->m_bCanHaveRange )
                            {
                                cwsToBeWrapped.Format( L"Default value: %I64d%s%I64d, Min value: %I64d, Max value: %I64d, can be a range\n", 
                                    psNumDef->m_llDefaultMinNumber, 
                                    x_wszRangeString,
                                    psNumDef->m_llDefaultMaxNumber,
                                    psNumDef->m_llMinNumber,
                                    psNumDef->m_llMaxNumber );
                                ::pVsTstWrapOutput( pfINIFile, L"; ", cwsToBeWrapped, VSTST_WRAP_WIDTH );
                                
                                fwprintf( pfINIFile, L";%s = %I64d%s%I64d\n\n", 
                                    psSectionDef[ cSect ].m_pwszKeyName,
                                    psNumDef->m_llDefaultMinNumber, 
                                    x_wszRangeString,
                                    psNumDef->m_llDefaultMaxNumber );
                            }
                            else
                            {
                                cwsToBeWrapped.Format( L"Default value: %I64d, Min value: %I64d, Max value: %I64d\n", 
                                    psNumDef->m_llDefaultMinNumber, 
                                    psNumDef->m_llMinNumber,
                                    psNumDef->m_llMaxNumber );
                                ::pVsTstWrapOutput( pfINIFile, L"; ", cwsToBeWrapped, VSTST_WRAP_WIDTH );
                                
                                fwprintf( pfINIFile, L";%s = %I64d\n\n", 
                                    psSectionDef[ cSect ].m_pwszKeyName,
                                    psNumDef->m_llDefaultMinNumber );
                            }                            
                        }
                        break;
                    }
                }            
            }
            
            fwprintf( pfINIFile, L"; ==================================================================\n" );
        }                
    }
    VSTST_STANDARD_CATCH();

    if ( pfINIFile != NULL )
        ::fclose( pfINIFile );
    
    return S_OK;
}

//  Gets a string value
VOID
CVsTstINIConfig::GetOptionValue(
    IN LPCWSTR pwszOptionName,
    OUT CBsString *pwsOptionValue,
    OUT BOOL *pbOverridden
    )
{
    CVsTstOptionsList *pcOptionsList = ( CVsTstOptionsList * ) m_pvOptionsList;
    CVsTstSectionOptionBase *pcSectionOptionBase;
    if ( pcOptionsList->Find( pwszOptionName, &pcSectionOptionBase ) )
    {
        if ( pcSectionOptionBase->GetOptionType() != eVsTstOptType_String )
        {
            VSTST_ASSERT( FALSE );
            VSTST_THROW( E_INVALIDARG );
        }
        
        CVsTstSectionOptionString *pcOptionString;
        pcOptionString = ( CVsTstSectionOptionString * )pcSectionOptionBase;
        
        *pwsOptionValue = pcOptionString->GetValue();
        if ( pbOverridden != NULL )
            *pbOverridden = pcOptionString->IsDefaultOverridden();
        return;
    }

    VSTST_THROW( E_INVALIDARG );
}


//  Gets a boolean value
VOID 
CVsTstINIConfig::GetOptionValue(
    IN LPCWSTR pwszOptionName,
    OUT EVsTstINIBoolType *peOptionValue,
    OUT BOOL *pbOverridden
    )
{
    CVsTstOptionsList *pcOptionsList = ( CVsTstOptionsList * ) m_pvOptionsList;
    CVsTstSectionOptionBase *pcSectionOptionBase;
    if ( pcOptionsList->Find( pwszOptionName, &pcSectionOptionBase ) )
    {
        if ( pcSectionOptionBase->GetOptionType() != eVsTstOptType_Boolean )
        {
            VSTST_ASSERT( FALSE );
            VSTST_THROW( E_INVALIDARG );
        }
        
        CVsTstSectionOptionBoolean *pcOptionBoolean;
        pcOptionBoolean = ( CVsTstSectionOptionBoolean * )pcSectionOptionBase;
        
        *peOptionValue = pcOptionBoolean->GetValue();
        if ( pbOverridden != NULL )
            *pbOverridden = pcOptionBoolean->IsDefaultOverridden();
        
        return;
    }

    VSTST_THROW( E_INVALIDARG );
}


//  Get a number value
VOID 
CVsTstINIConfig::GetOptionValue(
    IN LPCWSTR pwszOptionName,
    OUT LONGLONG *pllOptionMinValue,
    OUT LONGLONG *pllOptionMaxValue,
    OUT BOOL *pbOverridden
    )
{
    CVsTstOptionsList *pcOptionsList = ( CVsTstOptionsList * ) m_pvOptionsList;
    CVsTstSectionOptionBase *pcSectionOptionBase;
    if ( pcOptionsList->Find( pwszOptionName, &pcSectionOptionBase ) )
    {
        if ( pcSectionOptionBase->GetOptionType() != eVsTstOptType_Number )
        {
            VSTST_ASSERT( FALSE );
            VSTST_THROW( E_INVALIDARG );
        }
        
        CVsTstSectionOptionNumber *pcOptionNumber;
        pcOptionNumber = ( CVsTstSectionOptionNumber * )pcSectionOptionBase;

        BOOL bHasRange;
        pcOptionNumber->GetValue( pllOptionMinValue, pllOptionMaxValue, &bHasRange );
        if ( pbOverridden != NULL )
            *pbOverridden = pcOptionNumber->IsDefaultOverridden();
        
        return;
    }

    VSTST_THROW( E_INVALIDARG );
}

static VOID
pVsTstWrapOutput(
    IN FILE *pfOut,
    IN LPCWSTR pwszBeginString,
    IN CBsString& cwsToBeWrapped,
    IN SIZE_T cWrapWidth
    )
{
    cwsToBeWrapped.TrimLeft();
    cwsToBeWrapped.TrimRight();
    LPWSTR pwszCurrPosition = cwsToBeWrapped.GetBuffer( cwsToBeWrapped.GetLength() );
    LPWSTR pwszNextLine = NULL;
    LPWSTR pwszSpaces = L"";
    
    while( *pwszCurrPosition != L'\0' )
    {
        SIZE_T cLen;
        cLen = ::wcslen( pwszCurrPosition );

        //
        //  Get rid of the easy case
        //
        if ( cLen <= cWrapWidth )
        {
            fwprintf( pfOut, L"%s%s%s\n", pwszBeginString, pwszSpaces, pwszCurrPosition );
            break;
        }
        
        pwszNextLine = pwszCurrPosition + cWrapWidth - ::wcslen( pwszSpaces );
        while ( pwszNextLine > pwszCurrPosition )
        {
            if ( *pwszNextLine == L' ' )
                break;
            --pwszNextLine;
        }

        if ( pwszNextLine == pwszCurrPosition )
        {
            //
            //  No spaces within margin, move forward to first space.
            //
            pwszNextLine = ::wcschr( pwszCurrPosition, L' ' );

            //
            //  If pwszNextLine is NULL, then it means the entire rest of the line has no spaces
            //
            if ( pwszNextLine != NULL )
                *pwszNextLine = '\0';
        }
        else
        {
            *pwszNextLine = '\0';
        }
        fwprintf( pfOut, L"%s%s%s\n", pwszBeginString, pwszSpaces, pwszCurrPosition );

        //
        //  If special case where pwszNextLine is NULL, we are done
        //
        if ( pwszNextLine == NULL )
            break;
            
        pwszCurrPosition = pwszNextLine + 1;
        pwszSpaces = L"     ";
    }

    cwsToBeWrapped.ReleaseBuffer();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststutil.cxx ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    vststutil.cxx

Abstract:

    Implementation of CVsTstRandom class


    Brian Berkowitz  [brianb]  06/08/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      06/08/2000  Created

--*/

#include <stdafx.h>
#include <math.h>
#include <vststutil.hxx>

void CVsTstRandom::SetRandomSeed(UINT seed)
	{
	srand(seed);
	}

UINT CVsTstRandom::RandomChoice(UINT low, UINT high)
	{
	UINT val = rand();
	double d = (double) (high - low);
	double m = (double) val/ (double) RAND_MAX;
	double res = d * m + .5;
	return (UINT) floor(res);
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststparser.cxx ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    vststparser.cxx

Abstract:

    Implementation of CVsTstParser class


    Brian Berkowitz  [brianb]  06/07/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      06/07/2000  Created

--*/
#include <stdafx.h>
#include <bsstring.hxx>
#include <vststparser.hxx>

LPCWSTR CVsTstParser::SplitOptions(CBsString &bss)
	{
	bss.CopyBeforeWrite();
	LPCWSTR wsz = bss;
	LPCWSTR wszTop = bss;
	bool bMoreToDo = *wsz != L'\0';
	bool bLeadingSpacesFound = false;
	while(bMoreToDo)
		{
		while(*wsz == L' ')
			{
			bLeadingSpacesFound = true;
			wsz++;
			}

		LPCWSTR pwc = wsz;
		while(*pwc != L'\0' && *pwc != L',')
			pwc++;
		
		if (*pwc == L'\0')
			bMoreToDo = false;
		else
			bss.SetAt((UINT) (pwc - wszTop), L'\0');

		wsz = pwc + 1;
		}

	if (!bLeadingSpacesFound)
		return wsz;

	LPCWSTR wszEnd = wsz;
	wsz = bss;
    UINT iwc = 0;

	// remove leading spaces from options
	while(wsz < wszEnd)
		{
		while(*wsz == ' ')
			wsz++;

		while(*wsz != L'\0')
			bss.SetAt(iwc++, *wsz++);

		bss.SetAt(iwc++, *wsz++);
		}

	return wszEnd;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\controller\stdafx.h ===
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <atlbase.h>
#include <vststtools.hxx>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\writer\stdafx.h ===
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <atlbase.h>
#include <vststtools.hxx>
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststprocess.cxx ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    vststprocess.cxx

Abstract:

    Implementation of test message classes


    Brian Berkowitz  [brianb]  05/24/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      05/24/2000  Created

--*/


#include <stdafx.h>
#include <vststprocess.hxx>
#include <vststmsg.hxx>
#include <tstiniconfig.hxx>



void LogUnexpectedFailure(LPCWSTR, ...);


CVsTstProcessList::CVsTstProcessList() :
	m_processId(0L),
	m_processList(NULL),
	m_bcsProcessListInitialized(false),
	m_bNoMoreProcessesAreCreated(false),
	m_bShuttingDown(true)
	{
	}

CVsTstProcessList::~CVsTstProcessList()
	{
	m_bShuttingDown = true;

	if (WaitForSingleObject(m_hThreadMonitor, INFINITE) == WAIT_FAILED)
		{
		LogUnexpectedFailure(L"WaitForSingleObject failed for reason %d.\n", GetLastError());
		// wait for 1 minute for everything to shut down
		Sleep(60000);
		}

    CloseHandle(m_hThreadMonitor);
	if (m_bcsProcessListInitialized)
		m_csProcessList.Term();
	}


void CVsTstProcessList::LinkIntoProcessList(CVsTstProcess *process)
	{
	m_csProcessList.Lock();
	VSTST_ASSERT(m_processList == NULL || m_processList->m_prev == NULL);
	process->m_next = m_processList;
	process->m_prev = NULL;

	if (m_processList != NULL)
		m_processList->m_prev = process;

    m_processList = process;

	m_csProcessList.Unlock();
	}


void CVsTstProcessList::UnlinkFromProcessList(CVsTstProcess *process)
	{
	m_csProcessList.Lock();
	VSTST_ASSERT(m_processList);
	VSTST_ASSERT(m_processList->m_prev == NULL);

	if (process == m_processList)
		{
		m_processList = process->m_next;
		if (m_processList)
			{
			VSTST_ASSERT(m_processList->m_prev == process);
			m_processList->m_prev = NULL;
			}
		}
	else
		{
		VSTST_ASSERT(process->m_prev != NULL);
		process->m_prev->m_next = process->m_next;
		if (process->m_next)
			{
			VSTST_ASSERT(process->m_next->m_prev == process);
			process->m_next->m_prev = process->m_prev;
			}
		}

    m_csProcessList.Unlock();
	delete process;
	}

HRESULT CVsTstProcessList::Initialize
	(
	UINT maxLifetime,
	HANDLE hevtTermination
	)
	{
	try
		{
		m_csProcessList.Init();
		m_bcsProcessListInitialized = true;
		}
	catch(...)
		{
		return E_UNEXPECTED;
		}

	time_t timeCur;
	time(&timeCur);
	m_timeTerminateTest = timeCur + maxLifetime;
	m_hevtTermination = hevtTermination;

	DWORD tid;
	m_hThreadMonitor = CreateThread
							(
							NULL,
							256*1024,
							StartupMonitorThread,
							this,
							0,
							&tid
							);

    if (m_hThreadMonitor == NULL)
		return HRESULT_FROM_WIN32(GetLastError());

	return S_OK;
	}

DWORD CVsTstProcessList::StartupMonitorThread(void *pv)
	{
	CVsTstProcessList *processList = (CVsTstProcessList *) pv;

	try
		{
		processList->MonitorFunc();
		if (processList->m_hevtTermination)
			{
			if (!SetEvent(processList->m_hevtTermination))
				LogUnexpectedFailure(L"SetEvent failed with error %d", GetLastError());
			}
		}
	catch(...)
		{
		}

	return 0;
	}

//
void CVsTstProcessList::MonitorFunc()
	{
	while(TRUE)
		{
		time_t timeNow;
		Sleep(5000);

		time(&timeNow);
		if (timeNow > m_timeTerminateTest)
            {
			StartTermination();
            break;
            }
		else
			{
			m_csProcessList.Lock();

			// check if there are no processes and no more proceses
			// are created
			if (m_processList == NULL && m_bNoMoreProcessesAreCreated)
				{
				m_csProcessList.Unlock();
				break;
				}

			CVsTstProcess *process = m_processList;
			while(process != NULL)
				{
				CVsTstProcess *processNext = process->m_next;

                m_csProcessList.Unlock();
				if (process->HasProcessExpired())
					process->DoTerminateProcess(false);

                m_csProcessList.Lock();
				process = processNext;
				}

			m_csProcessList.Unlock();
			}
		}
	}

// start process termination
void CVsTstProcessList::StartTermination()
	{
	m_bNoMoreProcessesAreCreated = true;

	while(TRUE)
		{
		m_csProcessList.Lock();
		CVsTstProcess *process = m_processList;

		if (process == NULL)
			{
			m_csProcessList.Unlock();
			return;
			}
		
		while(process != NULL)
			{
			CVsTstProcess *processNext = process->m_next;
			m_csProcessList.Unlock();
			process->DoTerminateProcess(m_bShuttingDown);
			m_csProcessList.Lock();
			process = processNext;
			}

		// unlock list before going to sleep
		m_csProcessList.Unlock();
		Sleep(5000);
		}
	}


// constructor
CVsTstProcess::CVsTstProcess(CVsTstProcessList *list) :
	m_hProcess(NULL),
	m_hevtGracefullyTerminate(NULL),
	m_hevtNotifyProcessTermination(NULL),
	m_pvPrivateData(NULL),
	m_next(NULL),
	m_prev(NULL),
	m_bLinked(false),
	m_processList(list),
	m_bGracefullyTerminated(false)
	{
	}

// deastructor
CVsTstProcess::~CVsTstProcess()
	{
	if (m_bLinked)
		m_processList->UnlinkFromProcessList(this);

	if (m_hevtGracefullyTerminate)
		CloseHandle(m_hevtGracefullyTerminate);
	}


HRESULT CVsTstProcess::InitializeConformingExe
	(
	ULONGLONG processId,
	VSTST_PROCESS_TYPE type,
	VSTST_ACCOUNT_TYPE account,
	LPCWSTR wszExecutableName,
	LPCWSTR wszScenarioFile,
	LPCWSTR wszSection,
	DWORD seed,
	UINT lifetime,
	bool bAbnormalTermination,
	HANDLE hevtNotify
	)
	{
	WCHAR buf[256];
	SECURITY_ATTRIBUTES attributes;

	m_processId = processId;
	m_type = type;
	m_account = account;
	m_bConforming = true;
	
	attributes.nLength = sizeof(SECURITY_ATTRIBUTES);
	attributes.lpSecurityDescriptor = NULL;
	attributes.bInheritHandle = true;
    m_hevtGracefullyTerminate = CreateEvent(&attributes, TRUE, FALSE, NULL);
	if (m_hevtGracefullyTerminate == NULL)
		return HRESULT_FROM_WIN32(GetLastError());

	UINT pidLow = (UINT) (m_processId & 0xffffffff);
	UINT pidHigh = (UINT) (m_processId >> 32);
	swprintf
		(
		buf,
		L"%s -pidLow=%d -pidHigh=%d -scenario={%s} -section={%s} -seed=%u -lifetime=%d -event=0x%08x",
		wszExecutableName,
		pidLow,
		pidHigh,
		wszScenarioFile,
		wszSection,
		seed,
		lifetime,
		m_hevtGracefullyTerminate
		);

	PROCESS_INFORMATION info;
    STARTUPINFO startup;
    memset(&startup, 0, sizeof(STARTUPINFO));
    startup.cb = sizeof(STARTUPINFO);
	if (!CreateProcess
			(
			NULL,
			buf,
			NULL,
			NULL,
			TRUE,
			NORMAL_PRIORITY_CLASS,
			NULL,
			NULL,
            &startup,
			&info
			))
        {
		DWORD dwErr = GetLastError();
		CloseHandle(m_hevtGracefullyTerminate);
		m_hevtGracefullyTerminate = NULL;
		return HRESULT_FROM_WIN32(dwErr);
		}

	m_hProcess = info.hProcess;
	m_hevtNotifyProcessTermination = hevtNotify;
	m_bAbnormallyTerminate = bAbnormalTermination;
	time(&m_timeProcessStart);
	m_timeProcessTerminate = m_timeProcessStart + lifetime;
	m_processList->LinkIntoProcessList(this);
	return S_OK;
	}

// startup a process associated with a non-conforming executable
HRESULT CVsTstProcess::InitializeNonConformingExe
	(
	ULONGLONG processId,
	VSTST_PROCESS_TYPE type,
	VSTST_ACCOUNT_TYPE account,
	LPCWSTR wszCommandLine,
	UINT lifetime,
	HANDLE hevtNotify
	)
	{
	m_processId = processId;
	m_type = type;
	m_account = account;
	m_bConforming = false;
	
	PROCESS_INFORMATION info;
    STARTUPINFO startup;

    memset(&startup, 0, sizeof(STARTUPINFO));
    startup.cb = sizeof(STARTUPINFO);
	if (!CreateProcess
			(
			NULL,
			(LPWSTR) wszCommandLine,
			NULL,
			NULL,
			TRUE,
			NORMAL_PRIORITY_CLASS,
			NULL,
			NULL,
			&startup,
			&info
			))
		return HRESULT_FROM_WIN32(GetLastError());

	m_hProcess = info.hProcess;
	m_hevtNotifyProcessTermination = hevtNotify;
	m_bAbnormallyTerminate = true;
	time(&m_timeProcessStart);
	m_timeProcessTerminate = m_timeProcessStart + lifetime;
	m_processList->LinkIntoProcessList(this);
	return S_OK;
	}

void CVsTstProcess::DoTerminateProcess(bool bAgressive)
	{
	if (m_bAbnormallyTerminate)
		ForceTerminateProcess();
	else if (!m_bGracefullyTerminated)
		GracefullyTerminateProcess(bAgressive);
	else
		{
		// see if process is terminated
		DWORD dwErr = WaitForSingleObject(m_hProcess, 0);
		
		if (dwErr == WAIT_FAILED)
			ForceTerminateProcess();
		else if (dwErr == WAIT_TIMEOUT)
			{
			time_t timeCur;
			time(&timeCur);
			if (m_timeProcessTerminationExpiration < timeCur)
				// forcefully terminate the process
				ForceTerminateProcess();

			// if we are shutting down, give the process 10 seconds
			// to shut down before we forcefully terminate it
			if (bAgressive && m_timeProcessTerminationExpiration > timeCur + 10)
				m_timeProcessTerminationExpiration = timeCur + 10;
			}
		else
			CleanupProcess();
		}
	}


// has process expired
bool CVsTstProcess::HasProcessExpired()
    {
    // see if process is terminated
    DWORD dwErr = WaitForSingleObject(m_hProcess, 0);
    if (dwErr == WAIT_OBJECT_0)
        {
        CleanupProcess();
        return false;
        }
	
    time_t timeVal;

    time(&timeVal);

    return timeVal > m_timeProcessTerminate;
    }


// cleanup process at termination				
void CVsTstProcess::CleanupProcess()
	{
	if (m_hevtNotifyProcessTermination)
		{
		if (!SetEvent(m_hevtNotifyProcessTermination))
			LogUnexpectedFailure(L"SetEvent failed with error %d", GetLastError());
		}

	m_processList->UnlinkFromProcessList(this);
	}

// forceably terminate the process
void CVsTstProcess::ForceTerminateProcess()
	{
	if (!TerminateProcess(m_hProcess, 0))
		LogUnexpectedFailure(L"Terminate process failed with error %d", GetLastError());

	CleanupProcess();
	}

// try terminating the process gracefully
void CVsTstProcess::GracefullyTerminateProcess(bool bAgressive)
	{
	VSTST_ASSERT(m_hevtGracefullyTerminate);

	if (!SetEvent(m_hevtGracefullyTerminate))
		LogUnexpectedFailure(L"SetEvent failed with error %d", GetLastError());

	m_bGracefullyTerminated = true;
	time(&m_timeProcessStartTermination);

	// allow 2 minutes for the process to gracefully terminate, 10 seconds if
	// if we are agressive
	m_timeProcessTerminationExpiration = m_timeProcessStartTermination + bAgressive ? 10 : 120;
	}


HRESULT CVsTstProcessList::CreateConformingExe
	(
	VSTST_PROCESS_TYPE type,
	VSTST_ACCOUNT_TYPE account,
	LPCWSTR wszExecutableName,
	LPCWSTR wszScenarioFile,
	LPCWSTR wszSectionName,
	DWORD seed,
	UINT lifetime,
	bool bAbnormalTerminate,
	HANDLE hevtNotify,
	ULONGLONG &processId
	)
	{
	processId = AllocateProcessId();
	CVsTstProcess *process = new CVsTstProcess(this);
	if (process == NULL)
		return E_OUTOFMEMORY;

	HRESULT hr = process->InitializeConformingExe
					(
					processId,
					type,
					account,
					wszExecutableName,
					wszScenarioFile,
					wszSectionName,
					seed,
					lifetime,
					bAbnormalTerminate,
					hevtNotify
					);

	if (FAILED(hr))
		delete process;

	return hr;
	}

// create a process for a non-conforming executable
HRESULT CVsTstProcessList::CreateNonConformingExe
	(
	VSTST_PROCESS_TYPE type,
	VSTST_ACCOUNT_TYPE account,
	LPCWSTR wszCommandLine,
	UINT lifetime,
	HANDLE hevtNotify,
	ULONGLONG &processId
	)
	{
	processId = AllocateProcessId();
	CVsTstProcess *process = new CVsTstProcess(this);
	if (process == NULL)
		return E_OUTOFMEMORY;

	HRESULT hr = process->InitializeNonConformingExe
					(
					processId,
					type,
					account,
					wszCommandLine,
					lifetime,
					hevtNotify
					);

	if (FAILED(hr))
		delete process;

	return hr;
	}

// find a specific process
CVsTstProcess *CVsTstProcessList::FindProcess(ULONGLONG processId)
	{
	m_csProcessList.Lock();
	CVsTstProcess *process = m_processList;
	while(process != NULL)
		{
		if (process->m_processId == processId)
			{
			m_csProcessList.Unlock();
			return process;
			}

		process = process->m_next;
		}

	return NULL;
	}



// get private data associated with a process
void *CVsTstProcessList::GetProcessPrivateData(LONGLONG processId)
	{
	CVsTstProcess *process = FindProcess(processId);

	if (process == NULL)
		return NULL;
	else
		return process->GetPrivateData();
	}

	// set private data associated with a process
void CVsTstProcessList::SetProcessPrivateData(LONGLONG processId, void *pv)
	{
	CVsTstProcess *process = FindProcess(processId);

	if (process != NULL)
		process->SetPrivateData(pv);
	}

// indicate that no more processes will be created
void CVsTstProcessList::EndOfProcessCreation()
	{
	m_bNoMoreProcessesAreCreated = true;
	}

ULONGLONG CVsTstProcessList::AllocateProcessId()
	{
	m_csProcessList.Lock();
	ULONGLONG processId = ++m_processId;
	m_csProcessList.Unlock();

	return processId;
	}

static VSTST_CMDDESC x_rgCommands[] =
	{
		{
		L"scenario",
		VSTST_CT_STRING,
		VSTST_CP_SCENARIOFILE
		},
		{
		L"testseries",
		VSTST_CT_STRING,
		VSTST_CP_TESTSERIES
		},
		{
		L"section",
		VSTST_CT_STRING,
		VSTST_CP_SECTIONNAME
		},
		{
		L"seed",
		VSTST_CT_UINT,
		VSTST_CP_SEED
		},
		{
		L"lifetime",
		VSTST_CT_UINT,
		VSTST_CP_LIFETIME,
		},
		{
		L"event",
		VSTST_CT_HANDLE,
		VSTST_CP_TERMINATIONEVENT
		},
		{
		L"pidLow",
		VSTST_CT_UINT,
		VSTST_CP_PIDLOW
		},
		{
		L"pidHigh",
		VSTST_CT_UINT,
		VSTST_CP_PIDHIGH
		}

	};

static UINT x_cCommands = sizeof(x_rgCommands)/sizeof(x_rgCommands[0]);

// constructor
CVsTstParams::CVsTstParams() :
	m_wszScenarioFile(NULL),
	m_wszSectionName(NULL),
	m_wszTestSeries(NULL),
	m_supplied(0)
	{
	}

// destructor
CVsTstParams::~CVsTstParams()
	{
	delete m_wszScenarioFile;
	delete m_wszSectionName;
	}

// parse the command line
bool CVsTstParams::ParseCommandLine(WCHAR **argv, UINT argc)
	{
	for(UINT iarg = 1; iarg < argc; iarg++)
		{
		WCHAR *wsz = argv[iarg];

		if (wsz[0] != '-')
			return false;

		wsz++;

		WCHAR *pwc = wsz;
		while(*pwc != L'\0' && *pwc != L'=')
			pwc++;

		if (*pwc != '=')
			return false;

		*pwc++ = '\0';
		for(UINT icmd = 0; icmd < x_cCommands; icmd++)
			{
			if (wcscmp(wsz, x_rgCommands[icmd].wszParam) == 0)
				break;
			}

		if (icmd == x_cCommands)
			return false;

		VSTST_CMDDESC *pCommand = &x_rgCommands[icmd];
		UINT ulVal;
		LPWSTR wszVal;
		HANDLE hVal;

		switch(pCommand->type)
			{
			default:
				VSTST_ASSERT(FALSE && "shouldn't get here");
				return false;

            case VSTST_CT_UINT:
				if (!ParseUINT(pwc, &ulVal))
					return false;
					
				switch(pCommand->param)
					{
					default:
						VSTST_ASSERT(FALSE && "shouldn't get here");
						return false;

					case VSTST_CP_SEED:
						SetSeed(ulVal);
						break;

					case VSTST_CP_LIFETIME:
						SetLifetime(ulVal);
						break;

                    case VSTST_CP_PIDLOW:
						SetPidLow(ulVal);
						break;

                    case VSTST_CP_PIDHIGH:
						SetPidHigh(ulVal);
						break;
					}	

				break;

            case VSTST_CT_HANDLE:
				if (!ParseHandle(pwc, &hVal))
					return false;

				if (pCommand->param == VSTST_CP_TERMINATIONEVENT)
					SetTerminationEvent(hVal);
				else
					{
					VSTST_ASSERT(FALSE && "shouldn't get here");
					return false;
					}

				break;


            case VSTST_CT_STRING:
				if (!ParseString(pwc, &wszVal))
					return false;

				switch(pCommand->param)
					{
					default:
						VSTST_ASSERT(FALSE && "shouldn't get here");
						return false;

					case VSTST_CP_SCENARIOFILE:
						SetScenarioFile(wszVal);
						break;

                    case VSTST_CP_TESTSERIES:
						SetTestSeries(wszVal);
						break;

					case VSTST_CP_SECTIONNAME:
						SetSectionName(wszVal);
						break;

					}

				break;
			}
		}

	m_hTestTerminationEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
	if (m_hTerminationEvent == NULL)
		return false;

	m_supplied |= VSTST_CP_TESTTERMINATIONEVENT;

	return true;
	}

bool CVsTstParams::ParseUINT(LPCWSTR wsz, UINT *pulVal)
	{
	UINT ulVal = 0;

	if (*wsz == L'\0')
		return false;

	do
		{
		WCHAR wc = *wsz++;

		if (wc < L'0' || wc > L'9')
			return false;

		UINT ulValNew = ulVal * 10 + (wc - L'0');
		if (ulValNew < ulVal)
			return false;

		ulVal = ulValNew;
		} while(*wsz != L'\0');

    *pulVal = ulVal;
	return true;
	}

// parse a string value of the form "..."
bool CVsTstParams::ParseString(LPCWSTR wsz, LPWSTR *pwszVal)
	{
	if (*wsz != L'{')
		return false;

	wsz++;
	LPCWSTR wszStart = wsz;

	while(*wsz != L'\0' && *wsz != '}')
		wsz++;

	if (*wsz != L'}')
		return false;

	UINT cwc = (UINT)( wsz - wszStart );

	LPWSTR wszRet = new WCHAR[cwc + 1];
	memcpy(wszRet, wszStart, cwc * sizeof(WCHAR));
	wszRet[cwc] = L'\0';
	*pwszVal = wszRet;
	return true;
	}

bool CVsTstParams::ParseHandle(LPCWSTR wsz, HANDLE *phVal)
	{
	UINT ulVal = 0;

	if (*wsz++ != L'0')
		return false;

	if (*wsz++ != L'x')
		return false;

	if (*wsz == L'\0')
		return false;

	do
		{
		WCHAR wc = *wsz++;
		UINT digit;

		if (wc >= L'0' && wc <= L'9')
			digit = wc - L'0';
		else if (wc >= L'a' && wc <= L'f')
			digit = wc - L'a' + 10;
		else if (wc >= L'A' && wc <= L'F')
			digit = wc - L'A' + 10;
		else
			return false;

		if (ulVal & 0xf0000000)
			return false;

		ulVal = ulVal << 4 | digit;
		} while(*wsz != L'\0');

    *phVal = (HANDLE)(ULONGLONG) ulVal;
	return true;
	}

bool CVsTstParams::GetScenarioFileName(LPCWSTR *pwszScenarioFile)
	{
	if ((m_supplied & VSTST_CP_SCENARIOFILE) == 0)
		{
		*pwszScenarioFile = NULL;
		return false;
		}
	else
		{
		*pwszScenarioFile = m_wszScenarioFile;
		return true;
		}
	}

bool CVsTstParams::GetTestSeries(LPCWSTR *pwszTestSeries)
	{
	if ((m_supplied & VSTST_CP_TESTSERIES) == 0)
		{
		*pwszTestSeries = NULL;
		return false;
		}
	else
		{
		*pwszTestSeries = m_wszTestSeries;
		return true;
		}
	}



bool CVsTstParams::GetSectionName(LPCWSTR *pwszSectionName)
	{
	if ((m_supplied & VSTST_CP_SECTIONNAME) == 0)
		{
		*pwszSectionName = NULL;
		return false;
		}
	else
		{
		*pwszSectionName = m_wszSectionName;
		return true;
		}
	}


bool CVsTstParams::GetRandomSeed(UINT *pSeed)
	{
	if ((m_supplied & VSTST_CP_SEED) == 0)
		return false;
	else
		{
		*pSeed = m_seed;
		return true;
		}
	}

bool CVsTstParams::GetLifetime(UINT *pLifetime)
	{
	if ((m_supplied & VSTST_CP_LIFETIME) == 0)
		return false;
	else
		{
		*pLifetime = m_lifetime;
		return true;
		}
	}

bool CVsTstParams::GetTerminationEvent(HANDLE *pHandle)
	{
	if ((m_supplied & VSTST_CP_TERMINATIONEVENT) == 0)
		{
		*pHandle = NULL;
		return false;
		}
	else
		{
		*pHandle = m_hTerminationEvent;
		return true;
		}
	}

bool CVsTstParams::GetTestTerminationEvent(HANDLE *pHandle)
	{
	if ((m_supplied & VSTST_CP_TESTTERMINATIONEVENT) == 0)
		{
		*pHandle = NULL;
		return false;
		}
	else
		{
		*pHandle = m_hTestTerminationEvent;
		return true;
		}
	}

bool CVsTstParams::GetProcessId(ULONGLONG *pid)
	{
	if ((m_supplied & VSTST_CP_PIDLOW) == 0)
		return false;
	else if ((m_supplied & VSTST_CP_PIDHIGH) == 0)
		{
		*pid = m_pidLow;
		return true;
		}
	else
		{
		*pid = (((ULONGLONG) m_pidHigh) << 32) + m_pidLow;
		return true;
		}
	}

void CVsTstParams::SetSeed(UINT ulVal)
	{
	if (ulVal != 0)
		{
		m_supplied |= VSTST_CP_SEED;
		m_seed = ulVal;
		}
	}

void CVsTstParams::SetLifetime(UINT ulVal)
	{
	if (ulVal != 0)
		{
		m_supplied |= VSTST_CP_LIFETIME;
		m_lifetime = ulVal;
		}
	}

void CVsTstParams::SetPidLow(UINT ulVal)
	{
	m_supplied |= VSTST_CP_PIDLOW;
	m_pidLow = ulVal;
	}

void CVsTstParams::SetPidHigh(UINT ulVal)
	{
	m_supplied |= VSTST_CP_PIDHIGH;
	m_pidHigh = ulVal;
	}

void CVsTstParams::SetTerminationEvent(HANDLE hEvent)
	{
	if (hEvent != NULL)
		{
		m_supplied |= VSTST_CP_TERMINATIONEVENT;
		m_hTerminationEvent = hEvent;
		}
	}

void CVsTstParams::SetScenarioFile(LPWSTR wsz)
	{
	m_supplied |= VSTST_CP_SCENARIOFILE;
	m_wszScenarioFile = wsz;
	}

void CVsTstParams::SetTestSeries(LPWSTR wsz)
	{
	m_supplied |= VSTST_CP_TESTSERIES;
	m_wszTestSeries = wsz;
	}


void CVsTstParams::SetSectionName(LPWSTR wsz)
	{
	m_supplied |= VSTST_CP_SECTIONNAME;
	m_wszSectionName = wsz;
	}


// arguments to the test termination thread
typedef struct _TerminationThreadParams
	{
	CVsTstParams *pParams;
	IVsTstRunningTest *pTest;
	} TerminationThreadParams;

static LPCWSTR x_wszVssTestController = L"VssTestController.";
static LPCWSTR x_wszVssTestRequestor = L"VssTestRequestor.";
static LPCWSTR x_wszVssTestWriter = L"VssTestWriter.";

// toplevel routine to run a test
// it parses the parameters
// creates a configuration file parser
// creates a message pipe to the server
// creates a thread to terminate the test
// calls the supplied test
//
HRESULT CVsTstRunner::RunVsTest
	(
	WCHAR **argv,
	UINT argc,
	IVsTstRunningTest *pTest,
	bool bCreateTerminationThread
	)
	{
	CVsTstParams params;
	params.ParseCommandLine(argv, argc);
	LPCWSTR wszScenarioFile, wszSectionName, wszQualifier;

	if (!params.GetScenarioFileName(&wszScenarioFile) ||
		!params.GetSectionName(&wszSectionName))
		{
		VSTST_ASSERT(FALSE && "missing scenario");
		return E_FAIL;
		}

	EVsTstINISectionType sectionType;

	if (memcmp(wszSectionName, x_wszVssTestWriter, wcslen(x_wszVssTestWriter) * sizeof(WCHAR)) == 0)
		{
		sectionType = eVsTstSectionType_TestWriter;
		wszQualifier = wszSectionName + wcslen(x_wszVssTestWriter);
		}
	else if (memcmp(wszSectionName, x_wszVssTestRequestor, wcslen(x_wszVssTestRequestor)) == 0)
		{
		sectionType = eVsTstSectionType_TestRequesterApp;
		wszQualifier = wszSectionName + wcslen(x_wszVssTestRequestor);
		}
	else if (memcmp(wszSectionName, x_wszVssTestController, wcslen(x_wszVssTestController)) == 0)
		{
		sectionType = eVsTstSectionType_TestCoordinator;
		wszQualifier = wszSectionName + wcslen(x_wszVssTestController);
		}
	else
		{
		VSTST_ASSERT(FALSE && "bad test type");
		return E_FAIL;
		}

	HRESULT hr = S_OK;
	DWORD tid;

	TerminationThreadParams *pTTParm = NULL;
	HANDLE hTerminationThread = NULL;

	if (bCreateTerminationThread)
		{
        pTTParm = new TerminationThreadParams;
		if (pTTParm == NULL)
			{
			VSTST_ASSERT(FALSE && "Out of memory");
			return E_OUTOFMEMORY;
			}

		pTTParm->pParams = &params;
		pTTParm->pTest = pTest;
		hTerminationThread = CreateThread
								(
								NULL,
								32*1024,
								CVsTstRunner::StartupTerminationThread,
								pTTParm,
								0,
								&tid
								);

		if(hTerminationThread == NULL)
			{
			VSTST_ASSERT(FALSE && "Thread creation failed");
			delete pTTParm;
			return HRESULT_FROM_WIN32(GetLastError());
			}
		}

	try
		{
		InitMsgTypes();
		unsigned cwc = (unsigned)wcslen(wszScenarioFile);
		WCHAR *wszFileName = new WCHAR[cwc * 2];
		if (!ExpandEnvironmentStrings(wszScenarioFile, wszFileName, cwc * 2))
			{
			VSTST_ASSERT(FALSE && "ExpandEnvironmentStrings failed");
			LogUnexpectedFailure(L"ExpandEnvironmentStrings failed with error %d", GetLastError());
			throw E_UNEXPECTED;
			}

		CVsTstINIConfig config(sectionType, wszQualifier, FALSE, wszFileName);
		CVsTstClientMsg client;
		ULONGLONG processId;
		if (!params.GetProcessId(&processId))
			{
			VSTST_ASSERT(FALSE && "no process id");
			throw(E_FAIL);
			}

		client.Init(processId, 1024, false);
		hr = pTest->RunTest(&config, &client, &params);
		}
	catch(...)
		{
		VSTST_ASSERT(FALSE && "unexpected exception");
		hr = E_FAIL;
		}

	HANDLE hTestTerminationEvent;

	if (!params.GetTestTerminationEvent(&hTestTerminationEvent))
		LogUnexpectedFailure(L"Test Termination Event wasn't created");
	else if (!SetEvent(hTestTerminationEvent))
		LogUnexpectedFailure(L"SetEvent failed with error %d", GetLastError());
	else
		{
        if (hTerminationThread != NULL &&
			WaitForSingleObject(hTerminationThread, INFINITE) == WAIT_FAILED)
			LogUnexpectedFailure(L"WaitForSingleObject failed with error %d", GetLastError());
		}

	if (hTerminationThread != NULL)
		CloseHandle(hTerminationThread);

	return hr;
	}

// termination thread routine waits until either
// test lifetime is exceeded
// termination event is set by controller
// test termination event is set when test completes
//
DWORD CVsTstRunner::StartupTerminationThread(void *pv)
	{
	TerminationThreadParams *pTTParms = (TerminationThreadParams *) pv;
	CVsTstParams *pParams = pTTParms->pParams;
	IVsTstRunningTest *pTest = pTTParms->pTest;

	delete pTTParms;

	HANDLE hTestTerminationEvent;
	HANDLE hTerminationEvent = NULL;
	if (!pParams->GetTestTerminationEvent(&hTestTerminationEvent))
		{
		LogUnexpectedFailure(L"No Test Termination event was created.");
		return 0xffffffff;
		}

	pParams->GetTerminationEvent(&hTerminationEvent);

	UINT ulLifetime;
	bool bLifetime = pParams->GetLifetime(&ulLifetime);

	// more than one months worth of lifetime is infinite
	if (bLifetime && ulLifetime < 3600 * 24 * 30)
		ulLifetime = ulLifetime * 1000;
	else
		ulLifetime = INFINITE;

	HANDLE rghEvt[2];
	unsigned cEvt = 1;

	rghEvt[0] = hTestTerminationEvent;
	if (hTerminationEvent != NULL)
		{
		rghEvt[1] = hTerminationEvent;
		cEvt++;
		}

	DWORD dwWait = WaitForMultipleObjects(cEvt, rghEvt, FALSE, ulLifetime);

	if (dwWait == WAIT_FAILED)
		LogUnexpectedFailure(L"Wait failed for reason %d", GetLastError());
	else if (dwWait == WAIT_TIMEOUT)
		pTest->ShutdownTest(VSTST_SR_LIFETIME_EXCEEDED);
	else if (dwWait == WAIT_OBJECT_0 + 1)
		pTest->ShutdownTest(VSTST_SR_CONTROLLER_SIGNALLED);

	return 0;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\jettest\stdafx.h ===
#include <wtypes.h>
#pragma warning( disable: 4201 )    // C4201: nonstandard extension used : nameless struct/union
#include <winioctl.h>
#pragma warning( default: 4201 )	// C4201: nonstandard extension used : nameless struct/union
#include <winbase.h>



#include <wchar.h>
#include <string.h>
#include <iostream.h>
#include <stdio.h>
#include <stdlib.h>

#include <vs_assert.hxx>

#include <stddef.h>
#include <atlconv.h>
#include <atlbase.h>
CComModule _Module;
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\test\commontest.cxx ===
/*++

Copyright (c) 2000-2001  Microsoft Corporation

Module Name:

    client.cpp

Abstract:

    Test program to drive the 

Author:

    Stefan R. Steiner   [ssteiner]        01-30-2000

Revision History:

--*/

/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <windows.h>
#include <wtypes.h>
#include <stddef.h>
#include <stdio.h>
#include <objbase.h>

#include "vststtools.hxx"
#include "tstiniconfig.hxx"

static BOOL AssertPrivilege( LPCWSTR privName );

/////////////////////////////////////////////////////////////////////////////
//  WinMain

extern "C" int __cdecl wmain( int argc, WCHAR *argv[] )
{
    HRESULT hr;
    if ( !AssertPrivilege( SE_BACKUP_NAME ) )
    {
        wprintf( L"AssertPrivilege returned error, rc:%d\n", GetLastError() );
        return 2;
    }
    
    hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
    if ( FAILED( hr ) )
    {
        wprintf( L"CoInitialize() returned rc:%d\n", GetLastError() );
        return 1;
    }
  
    try 
    {
        CVsTstINIConfig cINIConfigWriter( eVsTstSectionType_TestWriter );
        BOOL bOverridden;
        CBsString cwsString;
        cINIConfigWriter.GetOptionValue( L"UserAccount", &cwsString, &bOverridden );
        wprintf( L"Writer: UserAccount: '%s' %s\n", cwsString.c_str(),
            bOverridden ? L" - Overridden" : L"" );

        CVsTstINIConfig cINIConfigCoordinator( eVsTstSectionType_TestCoordinator );

        LONGLONG llMaxValue;
        LONGLONG llMinValue;
        cINIConfigCoordinator.GetOptionValue( L"Coordinatorstoptime", &llMinValue, &llMaxValue, &bOverridden );
        wprintf( L"Coordinator: CoordinatorStopTime: %I64d...%I64d %s\n", llMinValue, llMaxValue,
            bOverridden ? L" - Overridden" : L"" );

        cINIConfigCoordinator.GetOptionValue( L"Coordinatorstart", &cwsString, &bOverridden );
        wprintf( L"Coordinator: CoordinatorStart: '%s' %s\n", cwsString.c_str(),
            bOverridden ? L" - Overridden" : L"" );

        CVsTstINIConfig cINIConfigProvider( eVsTstSectionType_TestProvider );
        CVsTstINIConfig cINIConfigRequester( eVsTstSectionType_TestRequesterApp );
        //
        //  The next call will cause an exception.
        //
//        cINIConfigWriter.GetOptionValue( L"Level", &eBoolVal );
    }
    catch( CVsTstINIConfigException cConfigException )
    {
        wprintf( L"Error: %s\n", cConfigException.GetExceptionString().c_str() );
    }
    catch( HRESULT hr )
    {
        wprintf( L"Caught HRESULT exception, hr = 0x%08x\n", hr );
    }
    catch( ... )
    {
        wprintf( L"Caught expected exception\n" );
    }
     
    // Uninitialize COM library
    CoUninitialize();

    return 0;

    UNREFERENCED_PARAMETER( argv );
    UNREFERENCED_PARAMETER( argc );
}


static BOOL AssertPrivilege( LPCWSTR privName )
{
    HANDLE  tokenHandle;
    BOOL    stat = FALSE;

    if ( OpenProcessToken( GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &tokenHandle ) )
    {
        LUID value;

        if ( LookupPrivilegeValue( NULL, privName, &value ) )
        {
            TOKEN_PRIVILEGES newState;
            DWORD            error;

            newState.PrivilegeCount           = 1;
            newState.Privileges[0].Luid       = value;
            newState.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

            /*
            * We will always call GetLastError below, so clear
            * any prior error values on this thread.
            */
            SetLastError( ERROR_SUCCESS );

            stat =  AdjustTokenPrivileges( 
                tokenHandle,
                FALSE,
                &newState,
                (DWORD)0,
                NULL,
                NULL );
            /*
            * Supposedly, AdjustTokenPriveleges always returns TRUE
            * (even when it fails). So, call GetLastError to be
            * extra sure everything's cool.
            */
            if ( (error = GetLastError()) != ERROR_SUCCESS )
            {
                stat = FALSE;
            }

            if ( !stat )
            {
                wprintf( L"AdjustTokenPrivileges for %s failed with %d",
                    privName,
                    error );
            }
        }
        CloseHandle( tokenHandle );
    }
    return stat;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\inc\ntlog.h ===
/*---------------------------------------------------------------------------*\
| NTLOG OBJECT
|   This module defines the NTLOG object.  This header must be include in all
|   modules which make NTLOG calls, or utilizes the definitions.
|
|
| Copyright (C) 1990-1994 Microsoft Corp.
|
| created: 01-Oct-90
| history: 01-Oct-90 <chriswil> created.
|          05-Feb-91 <chriswil> added NOPROLOG style.
|          23-Feb-91 <chriswil> expanded log-flags to DWORD.
|          28-May-91 <chriswil> added per-thread variation tracking.
|          19-Mar-92 <chriswil> redefined struct for shared memory.
|          10-Oct-92 <martys>   added thread macros
|          05-Oct-93 <chriswil> unicode enabled.
|          10-Oct-96 (darrenf)  fixed _FILE_ for unicode, added _NTLOG_LOGPATH handling
|
\*---------------------------------------------------------------------------*/

#ifndef _NTLOG_
#define _NTLOG_

// If doing C++ stuff, this needs to be here to
// prevent decorating of symbols.
//
#ifdef __cplusplus
extern "C" {
#endif

// **NEW** 10/26/96 Log path environment variable **NEW**
// if the environment variable _NTLOG_LOGPATH is set to a non-empty string
// the value of this variable will be prepended to the log name
// The path should NOT include a trailing backslash.

// No validation is performed on the path, however, if the value is invalid,
// the call to tlCreateLog will fail because CreateFile will fail.

// Basically should be used to force logfiles to a location other than the current directory
// without changing the source file.

// **NEW** 1/20/97 environment variable to force diffable files **NEW**
// if the environment variable _NTLOG_DIFFABLE is set, then log files
// will not contain process and thread specific data, and time and date data.
//


// NTLOG STYLES
//  The folowing are logging levels in which the Log Object can prejudice
//  itself.  These are used by the tlLogCreate() in initializing the
//  Log Object information.  A combination of characteristics is obtained
//  by bitwise OR'ing these identifiers together.
//
#define LOG_LEVELS    0x0000FFFFL    // These are used to mask out the
#define LOG_STYLES    0xFFFF0000L    // styles or levels from log object.

#define TLS_LOGALL    0x0000FFFFL    // Log output.  Logs all the time.
#define TLS_LOG       0x00000000L    // Log output.  Logs all the time.
#define TLS_INFO      0x00002000L    // Log information.
#define TLS_ABORT     0x00000001L    // Log Abort, then kill process.
#define TLS_SEV1      0x00000002L    // Log at Severity 1 level
#define TLS_SEV2      0x00000004L    // Log at Severity 2 level
#define TLS_SEV3      0x00000008L    // Log at Severity 3 level
#define TLS_WARN      0x00000010L    // Log at Warn level
#define TLS_PASS      0x00000020L    // Log at Pass level
#define TLS_BLOCK     0x00000400L    // Block the variation.
#define TLS_BREAK     0x00000800L    // Debugger break;
#define TLS_CALLTREE  0x00000040L    // Log call-tree (function tracking).
#define TLS_SYSTEM    0x00000080L    // Log System debug.
#define TLS_TESTDEBUG 0x00001000L    // Debug level.
#define TLS_TEST      0x00000100L    // Log Test information (user).
#define TLS_VARIATION 0x00000200L    // Log testcase level.

#define TLS_REFRESH   0x00010000L    // Create new file || trunc to zero.
#define TLS_SORT      0x00020000L    // Sort file output by instance.
#define TLS_DEBUG     0x00040000L    // Output to debug (com) monitor).
#define TLS_MONITOR   0x00080000L    // Output to 2nd screen.
#define TLS_VIDCOLOR  0x00100000L    // Use different colors for display output
#define TLS_PROLOG    0x00200000L    // Prolog line information.
#define TLS_WINDOW    0x00400000L    // Log to windows.
#define TLS_ACCESSON  0x00800000L    // Keep log-file open.
#define TLS_DIFFABLE  0x01000000L    // make log file windiff'able (no dates..)
#define TLS_NOHEADER  0x02000000L    // suppress headers so it is more diffable
#define TLS_TIMESTAMP 0x04000000L    // To print the timestamps
#define TLS_VIDEOLOG  0x08000000L    // convert ?.log to ?.bpp.log (color depth)
#define TLS_HTML      0x10000000L    // write log file as an html.


// NTLOG tlLogOut() PARAMETERS
//   The following defines are used in the tlLogOut() function to output the
//   filename and line numbers associated with the caller.  This uses the
//   preprocessors capabilities for obtaining the file/line.
//
#define TL_LOG       TLS_LOG      ,TEXT(__FILE__),(int)__LINE__
#define TL_ABORT     TLS_ABORT    ,TEXT(__FILE__),(int)__LINE__
#define TL_SEV1      TLS_SEV1     ,TEXT(__FILE__),(int)__LINE__
#define TL_SEV2      TLS_SEV2     ,TEXT(__FILE__),(int)__LINE__
#define TL_SEV3      TLS_SEV3     ,TEXT(__FILE__),(int)__LINE__
#define TL_WARN      TLS_WARN     ,TEXT(__FILE__),(int)__LINE__
#define TL_PASS      TLS_PASS     ,TEXT(__FILE__),(int)__LINE__
#define TL_BLOCK     TLS_BLOCK    ,TEXT(__FILE__),(int)__LINE__
#define TL_INFO      TLS_INFO     ,TEXT(__FILE__),(int)__LINE__
#define TL_BREAK     TLS_BREAK    ,TEXT(__FILE__),(int)__LINE__
#define TL_CALLTREE  TLS_CALLTREE ,TEXT(__FILE__),(int)__LINE__
#define TL_SYSTEM    TLS_SYSTEM   ,TEXT(__FILE__),(int)__LINE__
#define TL_TESTDEBUG TLS_TESTDEBUG,TEXT(__FILE__),(int)__LINE__
#define TL_TEST      TLS_TEST     ,TEXT(__FILE__),(int)__LINE__
#define TL_VARIATION TLS_VARIATION,TEXT(__FILE__),(int)__LINE__


//  Struct used by tlGet/SetVar/TestStats
//
typedef struct _NTLOGSTATS {
    int nAbort;
    int nBlock;
    int nSev1;
    int nSev2;
    int nSev3;
    int nWarn;
    int nPass;
}
NTLOGSTATS, *LPNTLOGSTATS;


//  Use enumerated indexes to access palette.
//  Colors are defined in wincon.h

typedef struct _VIDEOPALETTE {
    WORD  wINDEX_DEFAULT;
    WORD  wINDEX_INFO;
    WORD  wINDEX_SEV1;
    WORD  wINDEX_SEV2;
    WORD  wINDEX_SEV3;
    WORD  wINDEX_BLOCK;
    WORD  wINDEX_ABORT;
    WORD  wINDEX_WARN;
    WORD  wINDEX_PASS;
}
VIDEOPALETTE, *LPVIDEOPALETTE;


// NTLOG API (EXPORT METHODS)
//   These routines are exported from the library.  These should be the only
//   interface with the NTLOG object.
//
HANDLE APIENTRY  tlCreateLog_W(LPCWSTR,DWORD);
HANDLE APIENTRY  tlCreateLog_A(LPCSTR,DWORD);
HANDLE APIENTRY  tlCreateLogEx_W(LPCWSTR,DWORD,LPSECURITY_ATTRIBUTES);
HANDLE APIENTRY  tlCreateLogEx_A(LPCSTR,DWORD,LPSECURITY_ATTRIBUTES);
BOOL   APIENTRY  tlDestroyLog(HANDLE);
BOOL   APIENTRY  tlAddParticipant(HANDLE,DWORD,int);
BOOL   APIENTRY  tlRemoveParticipant(HANDLE);
DWORD  APIENTRY  tlParseCmdLine_W(LPCWSTR);
DWORD  APIENTRY  tlParseCmdLine_A(LPCSTR);
int    APIENTRY  tlGetLogFileName_W(HANDLE,LPWSTR);
int    APIENTRY  tlGetLogFileName_A(HANDLE,LPSTR);
BOOL   APIENTRY  tlSetLogFileName_W(HANDLE,LPCWSTR);
BOOL   APIENTRY  tlSetLogFileName_A(HANDLE,LPCSTR);
DWORD  APIENTRY  tlGetLogInfo(HANDLE);
DWORD  APIENTRY  tlSetLogInfo(HANDLE,DWORD);
HANDLE APIENTRY  tlPromptLog(HWND,HANDLE);
int    APIENTRY  tlGetTestStat(HANDLE,DWORD);
int    APIENTRY  tlGetVariationStat(HANDLE,DWORD);
VOID   APIENTRY  tlClearTestStats(HANDLE);
VOID   APIENTRY  tlClearVariationStats(HANDLE);
VOID   APIENTRY  tlSetTestStats(HANDLE,LPNTLOGSTATS);
VOID   APIENTRY  tlSetVariationStats(HANDLE,LPNTLOGSTATS);
BOOL   APIENTRY  tlStartVariation(HANDLE);
DWORD  APIENTRY  tlEndVariation(HANDLE);
VOID   APIENTRY  tlReportStats(HANDLE);
BOOL   APIENTRY  tlLogX_W(HANDLE,DWORD,LPCWSTR,int,LPCWSTR);
BOOL   APIENTRY  tlLogX_A(HANDLE,DWORD,LPCSTR,int,LPCSTR);
BOOL   FAR __cdecl tlLog_W(HANDLE,DWORD,LPCWSTR,int,LPCWSTR,...);
BOOL   FAR __cdecl tlLog_A(HANDLE,DWORD,LPCSTR,int,LPCSTR,...);
BOOL   APIENTRY  tlGetVideoPalette(HANDLE,LPVIDEOPALETTE);
BOOL   APIENTRY  tlSetVideoPalette(HANDLE,LPVIDEOPALETTE);
BOOL   APIENTRY  tlResetVideoPalette(HANDLE);
VOID   APIENTRY  tlAdjustFileName_W(HANDLE,LPWSTR,UINT);
VOID   APIENTRY  tlAdjustFileName_A(HANDLE,LPSTR,UINT);
BOOL   APIENTRY  tlIsTerminalServerSession();

#ifdef UNICODE
#define tlCreateLog         tlCreateLog_W
#define tlCreateLogEx       tlCreateLogEx_W
#define tlParseCmdLine      tlParseCmdLine_W
#define tlGetLogFileName    tlGetLogFileName_W
#define tlSetLogFileName    tlSetLogFileName_W
#define tlLogX              tlLogX_W
#define tlLog               tlLog_W
#define tlAdjustFileName    tlAdjustFileName_W
#else
#define tlCreateLog         tlCreateLog_A
#define tlCreateLogEx       tlCreateLogEx_A
#define tlParseCmdLine      tlParseCmdLine_A
#define tlGetLogFileName    tlGetLogFileName_A
#define tlSetLogFileName    tlSetLogFileName_A
#define tlLogX              tlLogX_A
#define tlLog               tlLog_A
#define tlAdjustFileName    tlAdjustFileName_A
#endif



// RATS MACROS
//   These macros are provided as a common logging interface which is
//   compatible with the RATS logging-macros.
//
#define TESTDATA                 HANDLE        hLog;
#define TESTOTHERDATA            extern HANDLE hLog;


//  These must be useless.  TL_* macros do not include TLS_TEST or
//  TLS_VARIATION, so they DO NOT count in the stats.  Leaving them around
//  for 'backwards compatibility, if anyone was actually using them...
//
#define L_PASS                   hLog,TL_PASS
#define L_WARN                   hLog,TL_WARN
#define L_DEBUG                  hLog,TL_TESTDEBUG
#define L_TRACE                  hLog,TL_SYSTEM
#define L_FAIL                   hLog,TL_SEV1
#define L_FAIL2                  hLog,TL_SEV2
#define L_FAIL3                  hLog,TL_SEV3
#define L_BLOCK                  hLog,TL_BLOCK


//  macros for incrementing test/variation counts for various log levels
//
#define L_TESTPASS                   hLog,TLS_TEST | TL_PASS
#define L_TESTWARN                   hLog,TLS_TEST | TL_WARN
#define L_TESTDEBUG                  hLog,TLS_TEST | TL_TESTDEBUG
#define L_TESTTRACE                  hLog,TLS_TEST | TL_SYSTEM
#define L_TESTFAIL                   hLog,TLS_TEST | TL_SEV1
#define L_TESTFAIL2                  hLog,TLS_TEST | TL_SEV2
#define L_TESTFAIL3                  hLog,TLS_TEST | TL_SEV3
#define L_TESTBLOCK                  hLog,TLS_TEST | TL_BLOCK
#define L_TESTABORT                  hLog,TLS_TEST | TL_ABORT

#define L_VARPASS                   hLog,TLS_VARIATION | TL_PASS
#define L_VARWARN                   hLog,TLS_VARIATION | TL_WARN
#define L_VARDEBUG                  hLog,TLS_VARIATION | TL_TESTDEBUG
#define L_VARTRACE                  hLog,TLS_VARIATION | TL_SYSTEM
#define L_VARFAIL                   hLog,TLS_VARIATION | TL_SEV1
#define L_VARFAIL2                  hLog,TLS_VARIATION | TL_SEV2
#define L_VARFAIL3                  hLog,TLS_VARIATION | TL_SEV3
#define L_VARBLOCK                  hLog,TLS_VARIATION | TL_BLOCK
#define L_VARABORT                  hLog,TLS_VARIATION | TL_ABORT


#define TESTBEGIN(cmd,logfilename){                                                       \
                                      DWORD __tlFlags;                                    \
                                      __tlFlags = tlParseCmdLine(cmd);                    \
                                      hLog      = tlCreateLog(logfilename,__tlFlags);     \
                                      tlAddParticipant(hLog,0l,0);

#define TESTEND                       tlRemoveParticipant(hLog);                          \
                                      tlDestroyLog(hLog);                                 \
                                  }

#define VARIATION(name,flags)    if(tlStartVariation(hLog))                                                  \
                                 {                                                                           \
                                     DWORD __dwResult;                                                       \
                                     tlLog(hLog,TL_VARIATION,TEXT("%s"),(LPTSTR)name);

#define ENDVARIATION                 __dwResult = tlEndVariation(hLog);                                      \
                                     tlLog(hLog,__dwResult | TL_VARIATION,TEXT("End Variation reported"));   \
                                 }


#define ENTERTHREAD(_hLG,_szNM)  {                                                                           \
                                    LPTSTR _lpFN = _szNM;                                                    \
                                    tlAddParticipant(_hLG,0,0);                                              \
                                    tlLog(_hLG,TL_CALLTREE,TEXT("Entering %s()"),(LPTSTR)_lpFN);


#define LEAVETHREAD(_hLG,_ret)                                                                               \
                                    tlLog(_hLG,TL_CALLTREE,TEXT("Exiting  %s()"),(LPTSTR)_lpFN);             \
                                    tlRemoveParticipant(_hLG);                                               \
                                    return(_ret);                                                            \
                                 }

#define LEAVETHREADVOID(_hLG)                                                                                \
                                     tlLog(_hLG,TL_CALLTREE,TEXT("Exiting  %s()"),(LPTSTR)_lpFN);            \
                                     tlRemoveParticipant(_hLG);                                              \
                                     return;                                                                 \
                                 }


// Macro to report variation PASS/FAIL statistic (based on an expression)
//
#define THPRINTF                tlLog
#define TESTRESULT(expr,msg)    (expr) ? tlLog(L_TESTPASS,TEXT("%s"),(LPTSTR)msg) : tlLog(L_TESTFAIL2,TEXT("%s"),(LPTSTR)msg)
#define TESTFAIL(msg)           TESTSEV2(msg)
#define TESTSEV1(msg)           tlLog(L_TESTFAIL ,TEXT("%s"),(LPTSTR)msg);
#define TESTSEV2(msg)           tlLog(L_TESTFAIL2,TEXT("%s"),(LPTSTR)msg);
#define TESTSEV3(msg)           tlLog(L_TESTFAIL3,TEXT("%s"),(LPTSTR)msg);
#define TESTPASS(msg)           tlLog(L_TESTPASS ,TEXT("%s"),(LPTSTR)msg);
#define TESTABORT(msg)          tlLog(L_TESTABORT,TEXT("%s"),(LPTSTR)msg);
#define TESTWARN(expr,msg)      if(expr) tlLog(L_TESTWARN,TEXT("%s"),(LPTSTR)msg);
#define TESTBLOCK(expr,msg)     if(expr) tlLog(L_TESTBLOCK,TEXT("%s"),(LPTSTR)msg);

#define VARRESULT(expr,msg)    (expr) ? tlLog(L_VARPASS,TEXT("%s"),(LPTSTR)msg) : tlLog(L_VARFAIL2,TEXT("%s"),(LPTSTR)msg)
#define VARFAIL(msg)           VARSEV2(msg)
#define VARSEV1(msg)           tlLog(L_VARFAIL ,TEXT("%s"),(LPTSTR)msg);
#define VARSEV2(msg)           tlLog(L_VARFAIL2,TEXT("%s"),(LPTSTR)msg);
#define VARSEV3(msg)           tlLog(L_VARFAIL3,TEXT("%s"),(LPTSTR)msg);
#define VARPASS(msg)           tlLog(L_VARPASS ,TEXT("%s"),(LPTSTR)msg);
#define VARABORT(msg)          tlLog(L_VARABORT,TEXT("%s"),(LPTSTR)msg);
#define VARWARN(expr,msg)      if(expr) tlLog(L_VARWARN,TEXT("%s"),(LPTSTR)msg);
#define VARBLOCK(expr,msg)     if(expr) tlLog(L_VARBLOCK,TEXT("%s"),(LPTSTR)msg);


#define VAR_SI          0x01                                 // Ship Issue
#define VAR_NSI         0x02                                 // Non-ship Issue
#define VAR_LI          0x03                                 // Less Important
#define VAR_ISSUE_MASK  0x03                                 // To get ship-issue bits only
#define VAR_TIMEABLE    0x04                                 // Var. used in timing suites
#define CORE_API        0x08                                 // API is in most used list
#define CORE_SI         (CORE_API | VAR_TIMEABLE | VAR_SI )  //
#define CORE_NSI        (CORE_API | VAR_TIMEABLE | VAR_NSI)  //
#define NONCORE_SI      (VAR_TIMEABLE | VAR_SI )             //
#define NONCORE_NSI     (VAR_TIMEABLE | VAR_NSI)             //



// CALLTREE Macros
//   These macros are useful for bracketing function-calls.
//
#define ENTER(_hLG,_szNM) {                                                                 \
                              LPTSTR _lpFN = _szNM;                                         \
                              tlLog(_hLG,TL_CALLTREE,TEXT("Entering %s()"),(LPTSTR)_lpFN);


#define LEAVE(_hLG,_ret)                                                                    \
                              tlLog(_hLG,TL_CALLTREE,TEXT("Exiting  %s()"),(LPTSTR)_lpFN);  \
                              return(_ret);                                                 \
                          }

#define LEAVEVOID(_hLG)                                                                     \
                              tlLog(_hLG,TL_CALLTREE,TEXT("Exiting  %s()"),(LPTSTR)_lpFN);  \
                              return;                                                       \
                          }

#ifdef __cplusplus
}
#endif

#define LPSZ_KEY_EMPTY    TEXT("None")
#define LPSZ_TERM_SERVER  TEXT("Terminal Server")

#endif  // _NTLOG_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\writer\writer.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    writer.cpp

Abstract:

    main module of test writer


    Brian Berkowitz  [brianb]  06/02/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      06/02/2000  Created

--*/

#include <stdafx.h>
#include <vststmsgclient.hxx>
#include <tstiniconfig.hxx>
#include <vststprocess.hxx>

#include <vss.h>
#include <vswriter.h>

#include <writer.h>

void LogUnexpectedFailure(LPCWSTR wsz, ...);

#define IID_PPV_ARG( Type, Expr ) IID_##Type, reinterpret_cast< void** >( static_cast< Type** >( Expr ) )
#define SafeQI( Type, Expr ) QueryInterface( IID_PPV_ARG( Type, Expr ) )

static BYTE x_rgbIcon[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
static unsigned x_cbIcon = 10;


static VSS_ID s_WRITERID =
	{
	0xc0577ae6, 0xd741, 0x452a,
	0x8c, 0xba, 0x99, 0xd7, 0x44, 0x00, 0x8c, 0x04
	};

static LPCWSTR s_WRITERNAME = L"Test Writer";



HRESULT CVsWriterTest::RunTest
	(
	CVsTstINIConfig *pConfig,
	CVsTstClientMsg *pClient,
	CVsTstParams *pParams
	)
	{
	try
		{
		m_pConfig = pConfig;
		m_pParams = pParams;
		SetClientMsg(pClient);

		HANDLE hShutdownEvent;
		UINT lifetime;
		if (!m_pParams->GetTerminationEvent(&hShutdownEvent))
			{
			LogFailure("NoShutdownEvent");
			throw E_FAIL;
			}

		if (!m_pParams->GetLifetime(&lifetime) || lifetime > 30 * 24 * 3600)
			lifetime = INFINITE;
		else
			lifetime = lifetime * 1000;


		if (!Initialize())
			{
			LogFailure("CVsWriterTest::Initialize failed");
			throw E_FAIL;
			}

		HRESULT hr = Subscribe();
		ValidateResult(hr, "CVssWriter::Subscribe");
			

		DWORD dwResult = WaitForSingleObject(hShutdownEvent, lifetime);
		Unsubscribe();

		UNREFERENCED_PARAMETER( dwResult );
		}
	catch(HRESULT hr)
		{
		return hr;
		}

	catch(...)
		{
		LogUnexpectedException("CVsWriterTest::RunTest");
		return E_UNEXPECTED;
		}

	return S_OK;
	}


extern "C" __cdecl wmain(int argc, WCHAR **argv)
	{
	bool bCoinitializeSucceeded = false;
	CVsWriterTest *pTest = NULL;
	try
		{
		HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
		if (FAILED(hr))
			{
			LogUnexpectedFailure(L"CoInitializeEx failed. hr=0x%08lx", hr);
			throw E_UNEXPECTED;
			}

		bCoinitializeSucceeded = true;

		pTest = new CVsWriterTest;
		if (pTest == NULL)
			{
			LogUnexpectedFailure(L"Cannot create test writer");
			throw E_OUTOFMEMORY;
			}

		hr = CVsTstRunner::RunVsTest(argv, argc, pTest, false);
		if (FAILED(hr))
			{
			LogUnexpectedFailure(L"CVsTstRunner::RunVsTest failed.  hr = 0x%08lx", hr);
			throw hr;
			}
		}
	catch(...)
		{
		}

	delete pTest;
	if (bCoinitializeSucceeded)
		CoUninitialize();

	return 0;
	}

void PrintMessage(VSTST_MSG_HDR *phdr)
	{
	VSTST_ASSERT(phdr->type == VSTST_MT_TEXT || phdr->type == VSTST_MT_IMMEDIATETEXT);
	VSTST_TEXTMSG *pmsg = (VSTST_TEXTMSG *) phdr->rgb;
	printf("%d: %s", (UINT) phdr->sequence, pmsg->pch);
	}

void LogUnexpectedFailure(LPCWSTR wsz, ...)
	{
	va_list args;

	va_start(args, wsz);

	VSTST_ASSERT(FALSE);
	wprintf(L"\n!!!UNEXPECTED FAILURE!!!\n");
	vwprintf(wsz, args);
	wprintf(L"\n");
	}


bool CVsWriterTest::Initialize()
	{
	try
		{
		HRESULT hr = CVssWriter::Initialize
					(
					s_WRITERID,
					s_WRITERNAME,
					VSS_UT_USERDATA,
					VSS_ST_OTHER
					);

		ValidateResult(hr, "CVssWriter::Initialize");
		}
	catch(HRESULT)
		{
		return false;
		}
	catch(...)
		{
		LogUnexpectedException("CVsWriterTest::Initialize");
		return false;
		}

	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnIdentify(IN IVssCreateWriterMetadata *pMetadata)
	{
	try
		{
		HRESULT hr = pMetadata->AddIncludeFiles
					(
					L"%systemroot%\\config",
					L"mytestfiles.*",
					false,
					NULL
					);

		ValidateResult(hr, "IVssCreateWriterMetadata::AddIncludeFiles");

		hr = pMetadata->AddExcludeFiles
						(
						L"%systemroot%\\config",
						L"*.tmp",
						true
						);

		ValidateResult(hr, "IVssCreateWriterMetadata::AddExcludeFiles");

		hr = pMetadata->AddComponent
						(
						VSS_CT_DATABASE,
						L"\\mydatabases",
						L"db1",
						L"this is my main database",
						x_rgbIcon,
						x_cbIcon,
						true,
						true,
						true
						);

        ValidateResult(hr, "IVssCreateWriterMetadata::AddComponent");

		hr = pMetadata->AddDatabaseFiles
					(
					L"\\mydatabases",
					L"db1",
					L"e:\\databases",
					L"foo.db"
					);

	    ValidateResult(hr, "IVssCreateWriterMetadata::AddDatabaseFiles");

		hr = pMetadata->AddDatabaseLogFiles
					(
					L"\\mydatabases",
					L"db1",
					L"e:\\logs",
					L"foo.log"
					);

        ValidateResult(hr, "IVssCreateWriterMetadata::AddDatabaseLogFiles");

		hr = pMetadata->SetRestoreMethod
					(
					VSS_RME_RESTORE_TO_ALTERNATE_LOCATION,
					NULL,
					NULL,
					VSS_WRE_ALWAYS,
					true
					);

        ValidateResult(hr, "IVssCreateWriterMetadata::SetRestoreMethod");

		hr = pMetadata->AddAlternateLocationMapping
					(
					L"c:\\databases",
					L"*.db",
					false,
					L"e:\\databases\\restore"
					);

		ValidateResult(hr, "IVssCreateWriterMetadata::AddAlternateLocationMapping");

		hr = pMetadata->AddAlternateLocationMapping
					(
					L"d:\\logs",
					L"*.log",
					false,
					L"e:\\databases\\restore"
					);

		ValidateResult(hr, "IVssCreateWriterMetadata::AddAlternateLocationMapping");
		}
	catch(HRESULT)
		{
		return false;
		}
	catch(...)
		{
		LogUnexpectedException("CVsWriterTest::OnIdentify");
		return false;
		}

	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnPrepareBackup(IN IVssWriterComponents *pWriterComponents)
	{
	try
		{
		unsigned cComponents;
		LPCWSTR wszBackupType;
		switch(GetBackupType())
			{
			default:
				wszBackupType = L"undefined";
				break;

			case VSS_BT_FULL:
				wszBackupType = L"full";
				break;

			case VSS_BT_INCREMENTAL:
				wszBackupType = L"incremental";
				break;

			case VSS_BT_DIFFERENTIAL:
				wszBackupType = L"differential";
				break;

			case VSS_BT_OTHER:
				wszBackupType = L"other";
				break;
			}

		if (!pWriterComponents)
			return true;

	    HRESULT hr = pWriterComponents->GetComponentCount(&cComponents);
		ValidateResult(hr, "IVssWriterComponents::GetComponentCount");

		for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
			{
			CComPtr<IVssComponent> pComponent;
			VSS_COMPONENT_TYPE ct;
			CComBSTR bstrLogicalPath;
			CComBSTR bstrComponentName;

			hr = pWriterComponents->GetComponent(iComponent, &pComponent);
			ValidateResult(hr, "IVssWriterComponents::GetComponent");
			hr = pComponent->GetLogicalPath(&bstrLogicalPath);
			ValidateResult(hr, "IVssComponent::GetLogicalPath");
			hr = pComponent->GetComponentType(&ct);
			ValidateResult(hr, "IVssComponent::GetComponentType");
			hr = pComponent->GetComponentName(&bstrComponentName);
			ValidateResult(hr, "IVssComponent::GetComponentName");
			CComPtr<IXMLDOMNode> pNode;
			hr = pComponent->SetPrivateXMLMetadata(L"BACKUPINFO", &pNode);
			ValidateResult(hr, "IVssComponent::SetPrivateXMLMetadata");

			CComPtr<IXMLDOMElement> pElement;
			hr = pNode->SafeQI(IXMLDOMElement, &pElement);
			ValidateResult(hr, "IXMLDOMNode::QueryInterface");

			CComBSTR bstrAttributeName = L"backupTime";
			if (bstrAttributeName.Length() == 0)
				throw(E_OUTOFMEMORY);

			CComVariant varValue = (INT) time(NULL);
	
			// Set the attribute
		    hr = pElement->setAttribute(bstrAttributeName, varValue);
			ValidateResult(hr, "IXMLDOMElement::setAttribute");
			}
		}
	catch(HRESULT)
		{
		return false;
		}
	catch(...)
		{
		LogUnexpectedException("CVsWriterTest::OnPrepareBackup");
		return false;
		}

	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnPrepareSnapshot()
	{
	Sleep(5000);
	return true;
	}


bool STDMETHODCALLTYPE CVsWriterTest::OnFreeze()
	{
	Sleep(1000);
	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnThaw()
	{
	Sleep(1000);
	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnBackupComplete(IN IVssWriterComponents *pWriterComponents)
	{
	try
		{
		HRESULT hr;
		unsigned cComponents;

		hr = pWriterComponents->GetComponentCount(&cComponents);
		ValidateResult(hr, "IVssWriterComponents::GetComponentCount");

		for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
			{
			CComPtr<IVssComponent> pComponent;
			VSS_COMPONENT_TYPE ct;
			CComBSTR bstrLogicalPath;
			CComBSTR bstrComponentName;
			bool bBackupSucceeded;

			hr = pWriterComponents->GetComponent(iComponent, &pComponent);
			ValidateResult(hr, "IVssWriterComponents::GetComponent");
			hr = pComponent->GetLogicalPath(&bstrLogicalPath);
			ValidateResult(hr, "IVssComponent::GetLogicalPath");
			hr = pComponent->GetComponentType(&ct);
            ValidateResult(hr, "IVssComponent::GetComponentType");
		    hr = pComponent->GetComponentName(&bstrComponentName);
			ValidateResult(hr, "IVssComponent::GetComponentName");
			hr = pComponent->GetBackupSucceeded(&bBackupSucceeded);
			ValidateResult(hr, "IVssComponent::GetBackupSucceeded");

			CComPtr<IXMLDOMNode> pNode;
			hr = pComponent->GetPrivateXMLData(L"BACKUPINFO", &pNode);
			ValidateResult(hr, "IVssComponent::GetPrivateXMLData");

			// create attribute map if one doesn't exist
			CComPtr<IXMLDOMNamedNodeMap>pAttributeMap;
			hr = pNode->get_attributes(&pAttributeMap);
			ValidateResult(hr, "IVssDOMNamedNodeMap::get_attributes");

			bool bFound = false;
			CComPtr<IXMLDOMNode> pNodeT = NULL;
			if (pAttributeMap != NULL)
				{
				// get attribute
				HRESULT hr = pAttributeMap->getNamedItem(L"backupTime", &pNodeT);
				if (SUCCEEDED(hr))
					bFound = true;
				if (bFound)
					{
					CComBSTR bstrAttrValue;
					hr = pNodeT->get_text(&bstrAttrValue);
					ValidateResult(hr, "IXMLDOMNode::get_text");
					}
				else
					{
					LogFailure("didn't find private backupTime attribute");
					}
				}
			}
		}
	catch(HRESULT)
		{
		return false;
		}
	catch(...)
		{
		LogUnexpectedException("CVsWriterTest::OnBackupComplete");
		return false;
		}

	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnRestore(IN IVssWriterComponents *pComponent)
	{
	UNREFERENCED_PARAMETER(pComponent);
	Sleep(10000);
	return true;
	}

bool STDMETHODCALLTYPE CVsWriterTest::OnAbort()
	{
	return true;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\common\vststvolinfo.cxx ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

   vststvolinfo.cxx

Abstract:

    Implementation of volume information class


    Brian Berkowitz  [brianb]  06/06/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      06/06/2000  Created

--*/

#include <stdafx.h>
#include <vststvolinfo.hxx>



CVsTstVolumeInfo::CVsTstVolumeInfo() :
	m_wszVolumeName(NULL),
	m_wszFileSystemName(NULL),
	m_llTotalSize(0L),
	m_llTotalFreeSpace(0L),
	m_flags(0),
	m_driveType(0),
	m_pVolumeNext(NULL)
	{
	}

CVsTstVolumeInfo::~CVsTstVolumeInfo()
	{
	delete m_wszVolumeName;
	delete m_wszFileSystemName;
	}

void CVsTstVolumeList::FreeVolumeList()
	{
	CVsTstVolumeInfo *pVolume = m_pVolumeFirst;
	m_pVolumeFirst = NULL;
	while(pVolume)
		{
		CVsTstVolumeInfo *pVolumeNext = pVolume->m_pVolumeNext;

		delete pVolume;
		pVolume = pVolumeNext;
		}
	}


HRESULT CVsTstVolumeList::RefreshVolumeList()
	{
	FreeVolumeList();

	WCHAR bufVolumeName[MAX_PATH];

	HANDLE hVolumes = FindFirstVolume(bufVolumeName, sizeof(bufVolumeName));
	if (hVolumes == INVALID_HANDLE_VALUE)
		return HRESULT_FROM_WIN32(GetLastError());

	HRESULT hr = S_OK;

	try
		{
		do
			{
			WCHAR bufFileSystemName[MAX_PATH];
			DWORD serialNumber = 0;
			DWORD maxFileNameLength = 0;
			DWORD flags = 0;

			ULARGE_INTEGER freeSpace;
			ULARGE_INTEGER totalSpace;
			ULARGE_INTEGER totalFreeSpace;

			freeSpace.QuadPart = 0i64;
			totalSpace.QuadPart = 0i64;
			totalFreeSpace.QuadPart = 0i64;

			bufFileSystemName[0] = L'\0';

			UINT driveType = GetDriveType(bufVolumeName);

			if (driveType == DRIVE_FIXED)
				{
				if (!GetVolumeInformation
						(
						bufVolumeName,
						NULL,
						0,
						&serialNumber,
						&maxFileNameLength,
						&flags,
						bufFileSystemName,
						sizeof(bufFileSystemName)
						))
					throw(HRESULT_FROM_WIN32(GetLastError()));


				if (!GetDiskFreeSpaceEx
						(
						bufVolumeName,
						&freeSpace,
						&totalSpace,
						&totalFreeSpace
						))
					throw(HRESULT_FROM_WIN32(GetLastError()));
				}


			CVsTstVolumeInfo *pVolume = new CVsTstVolumeInfo;
			if (pVolume == NULL)
				throw(E_OUTOFMEMORY);

			pVolume->m_wszVolumeName = new WCHAR[wcslen(bufVolumeName) + 1];
			if (pVolume->m_wszVolumeName == NULL)
				{
				delete pVolume;
				throw(E_OUTOFMEMORY);
				}

			wcscpy(pVolume->m_wszVolumeName, bufVolumeName);

			pVolume->m_wszFileSystemName = new WCHAR[wcslen(bufFileSystemName) + 1];
			if (pVolume->m_wszFileSystemName == NULL)
				{
				delete pVolume;
				throw(E_OUTOFMEMORY);
				}

			wcscpy(pVolume->m_wszFileSystemName, bufFileSystemName);
			pVolume->m_llTotalSize = totalSpace.QuadPart;
			pVolume->m_llTotalFreeSpace = totalFreeSpace.QuadPart;
			pVolume->m_llUserFreeSpace = freeSpace.QuadPart;
			pVolume->m_flags = flags;
			pVolume->m_serialNumber = serialNumber;
			pVolume->m_driveType = driveType;
			pVolume->m_pVolumeNext = m_pVolumeFirst;
			m_pVolumeFirst = pVolume;
			} while(FindNextVolume(hVolumes, bufVolumeName, sizeof(bufVolumeName)));

		DWORD dwErr = GetLastError();
		if (dwErr != ERROR_NO_MORE_FILES)
			throw(HRESULT_FROM_WIN32(dwErr));
		}
	catch(HRESULT hrExcept)
		{
		hr = hrExcept;
		}
	catch(...)
		{
		hr = E_UNEXPECTED;
		}

	if (FAILED(hr))
		FreeVolumeList();

	FindVolumeClose(hVolumes);
	return hr;
	}
	

UINT CVsTstVolumeList::GetVolumeCount()
	{
	UINT cVolumes = 0;

	CVsTstVolumeInfo *pVolume = m_pVolumeFirst;
	while(pVolume)
		{
		cVolumes++;
		pVolume = pVolume->m_pVolumeNext;
		}

	return cVolumes;
	}

const CVsTstVolumeInfo *CVsTstVolumeList::GetVolumeInfo(UINT iVolume)
	{
	CVsTstVolumeInfo *pVolume = m_pVolumeFirst;

	while(pVolume && iVolume > 0)
		{
		pVolume = pVolume->m_pVolumeNext;
		iVolume--;
		}

	return pVolume;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\jettest\main.cpp ===
#include <stdafx.h>

#include <vss.h>
#include <vswriter.h>

#include <jetwriter.h>
#include <esent98.h>

#define	DATABASE_ROOT		L"%SystemDrive%\\JetTestDatabases"
#define	DATABASE_ROOT_A		 "%SystemDrive%\\JetTestDatabases"
#define INCLUDED_DATABASES	L"\\IncludedDatabases"
#define INCLUDED_DATABASES_A	 "\\IncludedDatabases"
#define	EXCLUDED_DATABASES	L"\\ExcludedDatabases"
#define	EXCLUDED_DATABASES_A	 "\\ExcludedDatabases"



#if 1
#define FilesToInclude	L"X:\\Element-00\\/s;"						\
			L"x:\\Element-01\\/s;"						\
			L"x:\\Element-02\\*      /S     ;"				\
			L" x:\\Element-03\\a very long path\\with a long dir\\a.bat"

#define FilesToExclude	DATABASE_ROOT EXCLUDED_DATABASES L"\\" L" /s"

#else

/*
** These are the paths used by RSS at one point.
*/
#define	FilesToExclude	L"%SystemRoot%\\System32\\RemoteStorage\\FsaDb\\*;"	\
			L"%SystemRoot%\\System32\\RemoteStorage\\Trace\\*"

#define	FilesToInclude	L""

#endif




#define	GET_STATUS_FROM_BOOL(_bSucceeded)	((_bSucceeded)       ? NOERROR : HRESULT_FROM_WIN32 (GetLastError()))
#define GET_STATUS_FROM_HANDLE(_handle)		((NULL != (_handle)) ? NOERROR : HRESULT_FROM_WIN32 (GetLastError()))
#define GET_STATUS_FROM_POINTER(_ptr)		((NULL != (_ptr))    ? NOERROR : E_OUTOFMEMORY)


static const PCHAR achDatabaseNames [] =
    {
    DATABASE_ROOT_A INCLUDED_DATABASES_A "\\jettest_db0.jdb",
    DATABASE_ROOT_A EXCLUDED_DATABASES_A "\\jettest_db1.jdb",
    DATABASE_ROOT_A INCLUDED_DATABASES_A "\\jettest_db2.jdb",
    DATABASE_ROOT_A EXCLUDED_DATABASES_A "\\jettest_db3.jdb",
    DATABASE_ROOT_A INCLUDED_DATABASES_A "\\jettest_db4.jdb",
    DATABASE_ROOT_A EXCLUDED_DATABASES_A "\\jettest_db5.jdb",
    DATABASE_ROOT_A INCLUDED_DATABASES_A "\\jettest_db6.jdb",
    DATABASE_ROOT_A EXCLUDED_DATABASES_A "\\jettest_db7.jdb"
    };


#define MAX_DATABASE_COUNT		(sizeof (achDatabaseNames) / sizeof (PWCHAR))

static CHAR achExpandedDatabaseNames [MAX_DATABASE_COUNT] [MAX_PATH + 1];



static const char szUser []		= "admin";
static const char szPassword []		= "\0";

static const char szTable1 []		= "table1";
static const char szTable2 []		= "table2";

static const char szF1Name []		= "F1PAD";
static const char szF2Name []		= "F2";
static const char szF3Name []		= "F3";
static const char szV1Name []		= "V1";
static const char szT1Name []		= "T1";
static const char szT2Name []		= "T2";
					
static const char szXF1Name []		= "XF1";
static const char szXF3F2Name []	= "XF3F2";
static const char szXV1Name []		= "XV1";
static const char szXT1Name []		= "XT1";
static const char szXT2Name []		= "XT2";


HANDLE *g_phEventHandles = NULL;

typedef enum
    {
    eHandleControlC = 0,
    eHandleStepToNextConfig,
    eHandleMaxHandleCount
    } EHANDLEOFFSETS;



typedef struct
    {
	PCHAR		pszDatabaseName;
	JET_DBID	idDatabase;
} CONTEXTDB, *PCONTEXTDB, **PPCONTEXTDB;

typedef struct
    {
	JET_INSTANCE	idInstance;
	JET_SESID	idSession;

	CONTEXTDB	aDatabase [MAX_DATABASE_COUNT];
} CONTEXTJET, *PCONTEXTJET, **PPCONTEXTJET;





class CVssJetWriterLocal : public CVssJetWriter
    {
public:

	virtual bool STDMETHODCALLTYPE OnThawEnd (bool fJetThawSucceeded);

	virtual void STDMETHODCALLTYPE OnAbortEnd ();

	virtual bool STDMETHODCALLTYPE OnPostRestoreEnd(IVssWriterComponents *pComponents, bool bSucceeded);
};


bool STDMETHODCALLTYPE CVssJetWriterLocal::OnThawEnd (bool fJetThawSucceeded)
    {
	UNREFERENCED_PARAMETER(fJetThawSucceeded);
	wprintf(L"OnThawEnd\n");
    SetEvent (g_phEventHandles [eHandleStepToNextConfig]);

    return (true);
    }

void STDMETHODCALLTYPE CVssJetWriterLocal::OnAbortEnd ()
    {
	wprintf(L"OnAbortEnd\n");
    SetEvent (g_phEventHandles [eHandleStepToNextConfig]);
    }

// This function displays the formatted message at the console and throws
void Error(
    IN  INT nReturnCode,
    IN  const WCHAR* pwszMsgFormat,
    IN  ...
    )
	{
    va_list marker;
    va_start( marker, pwszMsgFormat );
    vwprintf( pwszMsgFormat, marker );
    va_end( marker );

	BS_ASSERT(FALSE);
    // throw that return code.
    throw(nReturnCode);
	}

// Convert a component type into a string
LPCWSTR GetStringFromComponentType (VSS_COMPONENT_TYPE eComponentType)
{
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eComponentType)
	{
	case VSS_CT_DATABASE:  pwszRetString = L"Database";  break;
	case VSS_CT_FILEGROUP: pwszRetString = L"FileGroup"; break;

	default:
	    break;
	}


    return (pwszRetString);
}


// Convert a failure type into a string
LPCWSTR GetStringFromFailureType(HRESULT hrStatus)
{
    LPCWSTR pwszFailureType = L"";

    switch (hrStatus)
	{
	case VSS_E_WRITERERROR_INCONSISTENTSNAPSHOT:        pwszFailureType = L"VSS_E_WRITERERROR_INCONSISTENTSNAPSHOT";    break;
	case VSS_E_WRITERERROR_OUTOFRESOURCES:              pwszFailureType = L"VSS_E_WRITERERROR_OUTOFRESOURCES";          break;
	case VSS_E_WRITERERROR_TIMEOUT:                     pwszFailureType = L"VSS_E_WRITERERROR_TIMEOUT";                 break;
	case VSS_E_WRITERERROR_NONRETRYABLE:                pwszFailureType = L"VSS_E_WRITERERROR_NONRETRYABLE";            break;
	case VSS_E_WRITERERROR_RETRYABLE:                   pwszFailureType = L"VSS_E_WRITERERROR_RETRYABLE";               break;
	case VSS_E_BAD_STATE:                               pwszFailureType = L"VSS_E_BAD_STATE";                           break;
	case VSS_E_PROVIDER_ALREADY_REGISTERED:             pwszFailureType = L"VSS_E_PROVIDER_ALREADY_REGISTERED";         break;
	case VSS_E_PROVIDER_NOT_REGISTERED:                 pwszFailureType = L"VSS_E_PROVIDER_NOT_REGISTERED";             break;
	case VSS_E_PROVIDER_VETO:                           pwszFailureType = L"VSS_E_PROVIDER_VETO";                       break;
	case VSS_E_PROVIDER_IN_USE:				            pwszFailureType = L"VSS_E_PROVIDER_IN_USE";                     break;
	case VSS_E_OBJECT_NOT_FOUND:						pwszFailureType = L"VSS_E_OBJECT_NOT_FOUND";                    break;						
	case VSS_S_ASYNC_PENDING:							pwszFailureType = L"VSS_S_ASYNC_PENDING";                       break;
	case VSS_S_ASYNC_FINISHED:						    pwszFailureType = L"VSS_S_ASYNC_FINISHED";                      break;
	case VSS_S_ASYNC_CANCELLED:						    pwszFailureType = L"VSS_S_ASYNC_CANCELLED";                     break;
	case VSS_E_VOLUME_NOT_SUPPORTED:					pwszFailureType = L"VSS_E_VOLUME_NOT_SUPPORTED";                break;
	case VSS_E_VOLUME_NOT_SUPPORTED_BY_PROVIDER:		pwszFailureType = L"VSS_E_VOLUME_NOT_SUPPORTED_BY_PROVIDER";    break;
	case VSS_E_OBJECT_ALREADY_EXISTS:					pwszFailureType = L"VSS_E_OBJECT_ALREADY_EXISTS";               break;
	case VSS_E_UNEXPECTED_PROVIDER_ERROR:				pwszFailureType = L"VSS_E_UNEXPECTED_PROVIDER_ERROR";           break;
	case VSS_E_CORRUPT_XML_DOCUMENT:				    pwszFailureType = L"VSS_E_CORRUPT_XML_DOCUMENT";                break;
	case VSS_E_INVALID_XML_DOCUMENT:					pwszFailureType = L"VSS_E_INVALID_XML_DOCUMENT";                break;
	case VSS_E_MAXIMUM_NUMBER_OF_VOLUMES_REACHED:       pwszFailureType = L"VSS_E_MAXIMUM_NUMBER_OF_VOLUMES_REACHED";   break;
	case VSS_E_FLUSH_WRITES_TIMEOUT:                    pwszFailureType = L"VSS_E_FLUSH_WRITES_TIMEOUT";                break;
	case VSS_E_HOLD_WRITES_TIMEOUT:                     pwszFailureType = L"VSS_E_HOLD_WRITES_TIMEOUT";                 break;
	case VSS_E_UNEXPECTED_WRITER_ERROR:                 pwszFailureType = L"VSS_E_UNEXPECTED_WRITER_ERROR";             break;
	case VSS_E_SNAPSHOT_SET_IN_PROGRESS:                pwszFailureType = L"VSS_E_SNAPSHOT_SET_IN_PROGRESS";            break;
	case VSS_E_MAXIMUM_NUMBER_OF_SNAPSHOTS_REACHED:     pwszFailureType = L"VSS_E_MAXIMUM_NUMBER_OF_SNAPSHOTS_REACHED"; break;
	case VSS_E_WRITER_INFRASTRUCTURE:	 		        pwszFailureType = L"VSS_E_WRITER_INFRASTRUCTURE";               break;
	case VSS_E_WRITER_NOT_RESPONDING:			        pwszFailureType = L"VSS_E_WRITER_NOT_RESPONDING";               break;
    case VSS_E_WRITER_ALREADY_SUBSCRIBED:		        pwszFailureType = L"VSS_E_WRITER_ALREADY_SUBSCRIBED";           break;
	
	case NOERROR:
	default:
	    break;
	}

    return (pwszFailureType);
}



// Execute the given call and check that the return code must be S_OK
#define CHECK_SUCCESS( Call )                                                                           \
    {                                                                                                   \
        hr = Call;                                                                                    \
		if (hr != S_OK)                                                                               \
            Error(1, L"\nError in %S(%d): \n\t- Call %S not succeeded. \n"                              \
                L"\t  Error code = 0x%08lx. Error description = %s\n",                                  \
                __FILE__, __LINE__, #Call, hr, GetStringFromFailureType(hr));                       \
    }


#define CHECK_NOFAIL( Call )                                                                            \
    {                                                                                                   \
        hr = Call;                                                                                    \
        if (FAILED(hr))                                                                               \
            Error(1, L"\nError in %S(%d): \n\t- Call %S not succeeded. \n"                              \
                L"\t  Error code = 0x%08lx. Error description = %s\n",                                  \
                __FILE__, __LINE__, #Call, hr, GetStringFromFailureType(hr));                       \
    }


bool STDMETHODCALLTYPE CVssJetWriterLocal::OnPostRestoreEnd(IVssWriterComponents *pWriter, bool bRestoreSucceeded)
	{
	wprintf(L"Restore invoked.\n");
	if (bRestoreSucceeded)
		wprintf(L"Restore succeeded.\n");
	else
		wprintf(L"Restore failed.");

	try
		{
		HRESULT hr;

		unsigned cComponents;
		CHECK_SUCCESS(pWriter->GetComponentCount(&cComponents));
		VSS_ID idWriter, idInstance;
		CHECK_SUCCESS(pWriter->GetWriterInfo(&idInstance, &idWriter));
		for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
			{
			CComPtr<IVssComponent> pComponent;
			CHECK_SUCCESS(pWriter->GetComponent(iComponent, &pComponent));
				
			VSS_COMPONENT_TYPE ct;
			CComBSTR bstrLogicalPath;
			CComBSTR bstrComponentName;

			CHECK_NOFAIL(pComponent->GetLogicalPath(&bstrLogicalPath));
			CHECK_SUCCESS(pComponent->GetComponentType(&ct));
			CHECK_SUCCESS(pComponent->GetComponentName(&bstrComponentName));
			wprintf(L"COMPONENT path = %s, type=%s, name=%s\n", bstrLogicalPath, GetStringFromComponentType(ct), bstrComponentName);
			}
		}
	catch(...)
		{
		wprintf(L"***Unexpected exception thrown.***\n");
		}

	return true;
	}


#define DO_CALL(xCall) \
    { \
	JET_ERR jetStatus = xCall; \
    if (jetStatus < JET_errSuccess) \
		Error(1, L"\nError in %S(%d): \n\t- Call %S not succeeded. \n" \
			  L"\t  Error code = 0x%08lx.\n", \
			  __FILE__, __LINE__, #xCall, jetStatus); \
	 }


BOOL WINAPI Ctrl_C_Handler_Routine(IN DWORD type)
    {
    UNREFERENCED_PARAMETER(type);

    if (g_phEventHandles [eHandleControlC])
	{
	SetEvent (g_phEventHandles [eHandleControlC]);
	}

    return TRUE;
    }







JET_ERR CreateAndPopulateDatabase (JET_SESID	idSession,
				   const char	*szDatabase,
				   JET_DBID *pidDatabase)
    {
    JET_DBID		idDatabase;
    JET_TABLEID		idTable;
    JET_COLUMNDEF	columndef;
    JET_COLUMNID	idColumnF1;
    JET_COLUMNID	idColumnF2;
    JET_COLUMNID	idColumnF3;
    JET_COLUMNID	idColumnV1;
    JET_COLUMNID	idColumnT1;
    JET_COLUMNID	idColumnT2;

    const unsigned short	usCodePage = 1252;
    const unsigned short	usLanguage = 0x409;
    const long			lOne       = 1;


    DO_CALL (JetCreateDatabase (idSession, szDatabase, NULL, &idDatabase, 0));
    DO_CALL (JetCloseDatabase  (idSession, idDatabase, 0));

    /*
    **	check multiple opens of same database
    */
    DO_CALL (JetOpenDatabase (idSession, szDatabase, NULL, &idDatabase, 0));


    DO_CALL (JetBeginTransaction (idSession));

    DO_CALL (JetCreateTable      (idSession, idDatabase, szTable1, 0, 100, &idTable));
    DO_CALL (JetCloseTable       (idSession, idTable));


    DO_CALL (JetOpenTable        (idSession, idDatabase, szTable1, NULL, 0, JET_bitTableDenyRead, &idTable));


    columndef.cbStruct = sizeof (columndef);
    columndef.cp       = usCodePage;
    columndef.langid   = usLanguage;
    columndef.wCountry = 1;
    columndef.columnid = 0;
    columndef.coltyp   = JET_coltypLong;
    columndef.cbMax    = 0;
    columndef.grbit    = 0;

    DO_CALL (JetAddColumn (idSession, idTable, szF1Name, &columndef, &lOne, sizeof(lOne), &idColumnF1));



    columndef.cbStruct = sizeof (columndef);
    columndef.cp       = usCodePage;
    columndef.langid   = usLanguage;
    columndef.wCountry = 1;
    columndef.columnid = 0;
    columndef.coltyp   = JET_coltypUnsignedByte;
    columndef.cbMax    = 0;
    columndef.grbit    = 0;

    DO_CALL (JetAddColumn (idSession, idTable, szF2Name, &columndef, NULL, 0, &idColumnF2));



    columndef.cbStruct = sizeof (columndef);
    columndef.cp       = usCodePage;
    columndef.langid   = usLanguage;
    columndef.wCountry = 1;
    columndef.columnid = 0;
    columndef.coltyp   = JET_coltypLong;
    columndef.cbMax    = 0;
    columndef.grbit    = 0;

    DO_CALL (JetAddColumn (idSession, idTable, szF3Name, &columndef, NULL, 0, &idColumnF3));



    columndef.cbStruct = sizeof (columndef);
    columndef.cp       = usCodePage;
    columndef.langid   = usLanguage;
    columndef.wCountry = 1;
    columndef.columnid = 0;
    columndef.coltyp   = JET_coltypText;
    columndef.cbMax    = 0;
    columndef.grbit    = 0;

    DO_CALL (JetAddColumn (idSession, idTable, szV1Name, &columndef, NULL, 0, &idColumnV1));



    columndef.cbStruct = sizeof (columndef);
    columndef.cp       = usCodePage;
    columndef.langid   = usLanguage;
    columndef.wCountry = 1;
    columndef.columnid = 0;
    columndef.coltyp   = JET_coltypLongText;
    columndef.cbMax    = 0;
    columndef.grbit    = JET_bitColumnTagged | JET_bitColumnMultiValued;

    DO_CALL (JetAddColumn (idSession, idTable, szT1Name, &columndef, NULL, 0, &idColumnT1));



    columndef.cbStruct = sizeof (columndef);
    columndef.cp       = usCodePage;
    columndef.langid   = usLanguage;
    columndef.wCountry = 1;
    columndef.columnid = 0;
    columndef.coltyp   = JET_coltypBinary;
    columndef.cbMax    = 0;
    columndef.grbit    = JET_bitColumnTagged | JET_bitColumnMultiValued;

    DO_CALL (JetAddColumn (idSession, idTable, szT2Name, &columndef, NULL, 0, &idColumnT2));


    {
    char		rgbCols[50];
    sprintf( rgbCols, "+%s", szF1Name);

    rgbCols[ 1 + strlen(szF1Name) + 1] = '\0';
    *(unsigned short *)(&rgbCols[ 1 + strlen(szF1Name) + 1 + 1]) = usLanguage;
    rgbCols[ 1 + strlen(szF1Name) + 1 + 1 + sizeof(usLanguage) ]    = '\0';
    rgbCols[ 1 + strlen(szF1Name) + 1 + 1 + sizeof(usLanguage) + 1] = '\0';

    DO_CALL (JetCreateIndex (idSession,
			  idTable,
			  szXF1Name,
			  JET_bitIndexPrimary | JET_bitIndexUnique,
			  rgbCols,
			  1 + strlen( szF1Name) + 1 + 1 + sizeof(usLanguage) + 1 + 1,
			  100));
    }

    DO_CALL (JetCloseTable (idSession, idTable));
    DO_CALL (JetCommitTransaction (idSession, 0));

	*pidDatabase = idDatabase;


    return (JET_errSuccess);
    }


void DatabaseSetup (PCONTEXTJET pctxJet, ULONG ulDatabaseCount)
    {
    JET_ERR		jetStatus;


    DO_CALL (JetBeginSession (pctxJet->idInstance, &pctxJet->idSession, szUser, szPassword));


    while (ulDatabaseCount-- > 0)
	{
	jetStatus = JetAttachDatabase (pctxJet->idSession,
				       pctxJet->aDatabase [ulDatabaseCount].pszDatabaseName,
				       0);


	if (jetStatus >= JET_errSuccess)
	    {
	    DO_CALL (JetOpenDatabase (pctxJet->idSession,
				   pctxJet->aDatabase [ulDatabaseCount].pszDatabaseName,
				   NULL,
				   &pctxJet->aDatabase [ulDatabaseCount].idDatabase,
				   0));
	    }
	else
	    {
	    DO_CALL (CreateAndPopulateDatabase (pctxJet->idSession,
					     pctxJet->aDatabase [ulDatabaseCount].pszDatabaseName,
						 &pctxJet->aDatabase [ulDatabaseCount].idDatabase));
	    }

	}
    }


void DatabaseCleanup (PCONTEXTJET pctxJet, ULONG ulDatabaseCount)
    {
    while (ulDatabaseCount-- > 0)
	{
	DO_CALL (JetCloseDatabase (pctxJet->idSession,
				pctxJet->aDatabase [ulDatabaseCount].idDatabase,
				0));


	DO_CALL (JetDetachDatabase (pctxJet->idSession,
				 pctxJet->aDatabase [ulDatabaseCount].pszDatabaseName));
	}


    DO_CALL (JetEndSession (pctxJet->idSession, 0));
    }




extern "C" int _cdecl wmain(int argc, WCHAR **argv)
    {
	UNREFERENCED_PARAMETER(argc);
	UNREFERENCED_PARAMETER(argv);

    HRESULT		hrStatus        = NOERROR;
    DWORD		dwStatus        = 0;
    GUID		idWriter        = GUID_NULL;
    CVssJetWriter	*pWriter        = NULL;
    bool		bContinue       = true;
    BOOL		bSucceeded      = FALSE;
    ULONG		ulDatabaseCount = 3;
    ULONG		ulIndex;
    HANDLE		hEventHandles [eHandleMaxHandleCount];
    CONTEXTJET		ctxJet;
	WCHAR		wszBufferName [MAX_PATH + 1];
    DWORD		dwCharCount;



    dwCharCount = ExpandEnvironmentStringsW (DATABASE_ROOT, wszBufferName, sizeof (wszBufferName));

    hrStatus = GET_STATUS_FROM_BOOL (0 != dwCharCount);

    if (FAILED (hrStatus))
	{
	wprintf (L"ExpandEnvironmentStringsW (%s) FAILED with error code %08x\n",
		 DATABASE_ROOT,
		 hrStatus);
	}


    bSucceeded = CreateDirectoryW (wszBufferName, NULL);

    hrStatus = GET_STATUS_FROM_BOOL (bSucceeded);

    if (FAILED (hrStatus) && (HRESULT_FROM_WIN32 (ERROR_ALREADY_EXISTS) != hrStatus))
	{
	wprintf (L"CreateDirectoryW (%s) FAILED with error code %08x\n",
		 wszBufferName,
		 hrStatus);
	}




    dwCharCount = ExpandEnvironmentStringsW (DATABASE_ROOT INCLUDED_DATABASES, wszBufferName, sizeof (wszBufferName));

    hrStatus = GET_STATUS_FROM_BOOL (0 != dwCharCount);

    if (FAILED (hrStatus))
	{
	wprintf (L"ExpandEnvironmentStringsW (%s) FAILED with error code %08x\n",
		 DATABASE_ROOT INCLUDED_DATABASES,
		 hrStatus);
	}


    bSucceeded = CreateDirectoryW (wszBufferName, NULL);

    hrStatus = GET_STATUS_FROM_BOOL (bSucceeded);

    if (FAILED (hrStatus) && (HRESULT_FROM_WIN32 (ERROR_ALREADY_EXISTS) != hrStatus))
	{
	wprintf (L"CreateDirectoryW (%s) FAILED with error code %08x\n",
		 wszBufferName,
		 hrStatus);
	}




    dwCharCount = ExpandEnvironmentStringsW (DATABASE_ROOT EXCLUDED_DATABASES, wszBufferName, sizeof (wszBufferName));

    hrStatus = GET_STATUS_FROM_BOOL (0 != dwCharCount);

    if (FAILED (hrStatus))
	{
	wprintf (L"ExpandEnvironmentStringsW (%s) FAILED with error code %08x\n",
		 DATABASE_ROOT EXCLUDED_DATABASES,
		 hrStatus);
	}


    bSucceeded = CreateDirectoryW (wszBufferName, NULL);

    hrStatus = GET_STATUS_FROM_BOOL (bSucceeded);

    if (FAILED (hrStatus) && (HRESULT_FROM_WIN32 (ERROR_ALREADY_EXISTS) != hrStatus))
	{
	wprintf (L"CreateDirectoryW (%s) FAILED with error code %08x\n",
		 wszBufferName,
		 hrStatus);
	}




    hrStatus = NOERROR;



    /*
    ** Initialise the database contexts
    */
    ctxJet.idInstance = 0;
    ctxJet.idSession  = 0;

    for (ulIndex = 0; ulIndex < MAX_DATABASE_COUNT; ulIndex++)
	{
	dwCharCount = ExpandEnvironmentStringsA (achDatabaseNames [ulIndex],
						 achExpandedDatabaseNames [ulIndex],
						 sizeof (achExpandedDatabaseNames [ulIndex]));

	ctxJet.aDatabase [ulIndex].idDatabase      = 0;
	ctxJet.aDatabase [ulIndex].pszDatabaseName = achExpandedDatabaseNames [ulIndex];
	}



    /*
    ** Initialise the event handles array
    */
    for (ulIndex = 0; ulIndex < eHandleMaxHandleCount; ulIndex++)
	{
	if (SUCCEEDED (hrStatus))
	    {
	    hEventHandles [ulIndex] = CreateEvent (NULL, FALSE, FALSE, NULL);

	    hrStatus = GET_STATUS_FROM_HANDLE (hEventHandles [ulIndex] );

	    if (NULL == hEventHandles [ulIndex])
		{
		wprintf (L"CreateEvent %u failed with error code %08X\n", ulIndex, hrStatus);
		}
	    }
	}



    /*
    ** Hook up the console GetOutOfJail device
    */
    if (SUCCEEDED (hrStatus))
	{
	g_phEventHandles = hEventHandles;

	::SetConsoleCtrlHandler (Ctrl_C_Handler_Routine, TRUE);
	}



    /*
    ** Tally-ho chaps!
    */
    try
	{
	DO_CALL (JetInit(&ctxJet.idInstance));

	hrStatus = CoInitializeEx (NULL, COINIT_MULTITHREADED);

	if (FAILED (hrStatus))
	    {
	    wprintf (L"CoInitializeEx failed with error code %08x\n", hrStatus);
	    }


    hrStatus = CoInitializeSecurity
			(
			NULL,                                //  IN PSECURITY_DESCRIPTOR         pSecDesc,
			-1,                                  //  IN LONG                         cAuthSvc,
			NULL,                                //  IN SOLE_AUTHENTICATION_SERVICE *asAuthSvc,
			NULL,                                //  IN void                        *pReserved1,
			RPC_C_AUTHN_LEVEL_CONNECT,           //  IN DWORD                        dwAuthnLevel,
			RPC_C_IMP_LEVEL_IMPERSONATE,         //  IN DWORD                        dwImpLevel,
			NULL,                                //  IN void                        *pAuthList,
			EOAC_NONE,                           //  IN DWORD                        dwCapabilities,
			NULL                                 //  IN void                        *pReserved3
			);


	if (FAILED (hrStatus))
	    {
	    wprintf (L"CoInitializeSecurity failed with error code %08x\n", hrStatus);
	    }

	if (SUCCEEDED (hrStatus))
	    {
	    pWriter = new CVssJetWriterLocal;

	    if (NULL == pWriter)
		{
		wprintf (L"new CVssJetWriter failed");

		hrStatus = HRESULT_FROM_WIN32 (ERROR_NOT_ENOUGH_MEMORY);
		}
	    }



	if (SUCCEEDED (hrStatus))
	    {
	    hrStatus = pWriter->Initialize (idWriter,		// id of writer
					    L"JetTest Writer",	// name of writer
					    true,		// system service
					    false,		// bootable state
					    FilesToInclude,	// files to include
					    FilesToExclude);	// files to exclude

	    if (FAILED (hrStatus))
		{
		wprintf (L"CVssJetWriter::Initialize failed with error code %08x\n", hrStatus);
		}
	    }




	while (SUCCEEDED (hrStatus) && bContinue)
	    {
	    DatabaseSetup (&ctxJet, ulDatabaseCount);


	    dwStatus = WaitForMultipleObjects (eHandleMaxHandleCount, hEventHandles, FALSE, INFINITE);


	    DatabaseCleanup (&ctxJet, ulDatabaseCount);

	    switch (dwStatus - WAIT_OBJECT_0)
		{
		case (eHandleControlC):
		    bContinue = FALSE;
		    break;


		case (eHandleStepToNextConfig):
		    ulDatabaseCount = (ulDatabaseCount + 1) % (MAX_DATABASE_COUNT + 1);
		    break;


		default:
		    BS_ASSERT (0);
		    break;
		}
	    }
	}



    catch(...)
	{
	wprintf(L"unexpected exception\n");
	exit(-1);
	}



    for (ulIndex = 0; ulIndex < eHandleMaxHandleCount; ulIndex++)
	{
	if (NULL != hEventHandles [ulIndex])
	    {
	    CloseHandle (hEventHandles [ulIndex]);

	    hEventHandles [ulIndex] = NULL;
	    }
	}



    if (NULL != pWriter)
	{
	pWriter->Uninitialize();
	delete pWriter;
	pWriter = NULL;
	}


    DO_CALL (JetTerm (ctxJet.idInstance));


    return (hrStatus);
    }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\controller\controller.cpp ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    controller.cpp

Abstract:

    main module of controller exe


    Brian Berkowitz  [brianb]  05/23/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      05/23/2000  Created

--*/

#include <stdafx.h>
#include <bsstring.hxx>
#include <vststmsg.hxx>
#include <tstiniconfig.hxx>
#include <vststmsghandler.hxx>
#include <vststprocess.hxx>
#include <winsvc.h>
#include <vss.h>
#include <vscoordint.h>
#include <vststutil.hxx>


#ifdef _DEBUG
#pragma warning(disable: 4701)  // local variable *may* be used without init
#endif

CVsTstNtLog *g_pcTstNtLog = NULL;

void LogUnexpectedFailure(LPCWSTR, ...);

static LPCWSTR x_wszVssTestController = L"VssTestController.";
static LPCWSTR x_wszVssTestRequestor = L"VssTestRequestor.";
static LPCWSTR x_wszVssTestWriter = L"VssTestWriter.";
static LPCWSTR x_wszProcessExecutable = L"ProcessExecutable";
static LPCWSTR x_wszMaxTestTime = L"MaxTestTime";
static LPCWSTR x_wszProcessesToStart = L"ProcessesToStart";
static LPCWSTR x_wszProcessCommandLine = L"ProcessCommandLine";
static LPCWSTR x_wszConformingExecutable = L"ConformingExecutable";
static LPCWSTR x_wszCoordinatorStart = L"CoordinatorStart";
static LPCWSTR x_wszNo = L"No";
static LPCWSTR x_wszStart = L"Start";
static LPCWSTR x_wszStop = L"Stop";
static LPCWSTR x_wszRestart = L"Restart";
static LPCWSTR x_wszDeleteExistingSnapshots = L"DeleteExistingSnapshots";



// name of volume snapshot service
static LPCWSTR x_wszVSS = L"VSS";


BOOL EnableDebugPriv(VOID)

/*++

Routine Description:

    Changes the process's privilege so that controller works properly.

Arguments:


Return Value:

    TRUE             - success
    FALSE            - failure

--*/

	{
    HANDLE hToken;
    LUID DebugValue;
    TOKEN_PRIVILEGES tkp;

    //
    // Enable the SE_DEBUG_NAME privilege
    //
    if (!LookupPrivilegeValue
			(
			NULL,
            SE_DEBUG_NAME,
            &DebugValue
			))
		{
        LogUnexpectedFailure(L"LookupPrivilegeValue failed with %d\n", GetLastError());
        return FALSE;
		}

    //
    // Retrieve a handle of the access token
    //
    if (!OpenProcessToken
			(
			GetCurrentProcess(),
            TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY,
            &hToken
			))
		{
        LogUnexpectedFailure(L"OpenProcessToken failed with %d\n", GetLastError());
        return FALSE;
		}

	tkp.PrivilegeCount = 1;
    tkp.Privileges[0].Luid = DebugValue;
    tkp.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

    AdjustTokenPrivileges
		(
		hToken,
        FALSE,
        &tkp,
        sizeof(TOKEN_PRIVILEGES),
        (PTOKEN_PRIVILEGES) NULL,
        (PDWORD) NULL
		);

	DWORD dwErr = GetLastError();

	CloseHandle(hToken);

    //
    // The return value of AdjustTokenPrivileges can't be tested
    //
    if (dwErr != ERROR_SUCCESS)
		{
        LogUnexpectedFailure(L"AdjustTokenPrivileges failed with %d\n", dwErr);
		return FALSE;
		}

    return TRUE;
	}

// stop and possibly restart the service
// if bTerminateIfCantStop is true, then try terminating the process
// if bRestart is true, then try restarting the process if it was
// able to be stopped or terminated.
HRESULT StartStopVssService
	(
	bool bStop,
	bool bTerminateIfCantStop,
	bool bRestart
	)
	{
	SC_HANDLE hSCM = NULL;
	SC_HANDLE hService = NULL;
	HANDLE hProcess = NULL;
	HRESULT hr = S_OK;

	try
		{
		SERVICE_STATUS_PROCESS info;
		DWORD cbNeeded;


		hSCM = OpenSCManager(NULL, SERVICES_ACTIVE_DATABASE, SC_MANAGER_CONNECT);
		if (hSCM == NULL)
			{
			DWORD dwErr = GetLastError();
			LogUnexpectedFailure(L"OpenSCManager failed with error code %d.", dwErr);
			throw(HRESULT_FROM_WIN32(dwErr));
			}

		hService = OpenService(hSCM, x_wszVSS, SERVICE_START|SERVICE_STOP|SERVICE_QUERY_STATUS);
		if (hService == NULL)
			{
			DWORD dwErr = GetLastError();
			LogUnexpectedFailure(L"OpenService failed with error code %d.", dwErr);
			throw(HRESULT_FROM_WIN32(dwErr));
			}

		if (bStop)
			{
			for(UINT i = 0; i < 10; i++)
				{
				if (!QueryServiceStatusEx
						(
						hService,
						SC_STATUS_PROCESS_INFO,
						(LPBYTE) &info,
						sizeof(info),
						&cbNeeded
						))
					{
					DWORD dwErr = GetLastError();
					LogUnexpectedFailure(L"QueryServiceStatusEx failed with error code %d.", dwErr);
					throw(HRESULT_FROM_WIN32(dwErr));
					}
				
				if (info.dwCurrentState == SERVICE_STOPPED)
					break;

				if (info.dwCurrentState != SERVICE_STOP_PENDING)
					{
					SERVICE_STATUS status;
					if (!ControlService
							(
							hService,
							SERVICE_CONTROL_STOP,
							&status
							))
						{
						DWORD dwErr = GetLastError();

						if (dwErr != ERROR_SERVICE_NOT_ACTIVE &&
							dwErr != ERROR_SERVICE_CANNOT_ACCEPT_CTRL)
							{
							LogUnexpectedFailure(L"ServiceControl failed with error %d", dwErr);
							throw(HRESULT_FROM_WIN32(dwErr));
							}
						}
					}
				
				Sleep(6000);
				}

			if (info.dwCurrentState != SERVICE_STOPPED &&
				bTerminateIfCantStop)
				{
				if (info.dwServiceType != SERVICE_WIN32_OWN_PROCESS)
					{
					LogUnexpectedFailure(L"Service %s is not running in its own process", x_wszVSS);
					throw(E_FAIL);
					}

				hProcess = OpenProcess(PROCESS_TERMINATE, FALSE, info.dwProcessId);
				if (hProcess == NULL)
					{
					DWORD dwErr = GetLastError();
					if (dwErr != ERROR_PROCESS_ABORTED)
						{
						LogUnexpectedFailure(L"OpenProcess failed with error %d", dwErr);
						throw(HRESULT_FROM_WIN32(dwErr));
						}
					}
				else
					{
					if (!TerminateProcess(hProcess, 0xffffffff))
						{
						DWORD dwErr = GetLastError();
						if (dwErr != ERROR_PROCESS_ABORTED)
							{
							LogUnexpectedFailure(L"TerminateProcess failed with error %d", dwErr);
							throw(HRESULT_FROM_WIN32(dwErr));
							}
						}
					}
				}
			}

		if (bRestart)
			{
			bool bStopped = true;

			if (!bStop)
				{
				if (!QueryServiceStatusEx
						(
						hService,
						SC_STATUS_PROCESS_INFO,
						(LPBYTE) &info,
						sizeof(info),
						&cbNeeded
						))
					{
					DWORD dwErr = GetLastError();
					LogUnexpectedFailure(L"QueryServiceStatusEx failed with error code %d.", dwErr);
					throw(HRESULT_FROM_WIN32(dwErr));
					}
				
				if (info.dwCurrentState == SERVICE_RUNNING ||
					info.dwCurrentState == SERVICE_START_PENDING)
					bStopped = false;
				}

			if (bStopped)
				{
				if (!StartService(hService, 0, NULL))
					{
					DWORD dwErr = GetLastError();
					LogUnexpectedFailure(L"ServiceStart failed with error %d.", dwErr);
					throw(HRESULT_FROM_WIN32(dwErr));
					}
				}

			for(UINT i = 0; i < 10; i++)
				{
				if (!QueryServiceStatusEx
						(
						hService,
						SC_STATUS_PROCESS_INFO,
						(LPBYTE) &info,
						sizeof(info),
						&cbNeeded
						))
					{
					DWORD dwErr = GetLastError();
					LogUnexpectedFailure(L"QueryServiceStatusEx failed with error code %d.", dwErr);
					throw(HRESULT_FROM_WIN32(dwErr));
					}

				if (info.dwCurrentState == SERVICE_RUNNING)
					break;
				else if (info.dwCurrentState != SERVICE_START_PENDING)
					{
					LogUnexpectedFailure(L"Cannot start service %s.", x_wszVSS);
					throw(E_FAIL);
					}

				Sleep(6000);
				}
			}
		}
	catch(HRESULT hrFailure)
		{
		hr = hrFailure;
		}
	catch(...)
		{
		hr = E_UNEXPECTED;
		}

	if (hProcess)
		CloseHandle(hProcess);

	if (hService)
		CloseServiceHandle(hService);

	if (hSCM)
		CloseServiceHandle(hSCM);

	return hr;
	}
	

void StartupProcess
	(
	CVsTstProcessList &processList,
	LPCWSTR wszSectionName,
	UINT maxTestTime,
	LPCWSTR wszScenarioFile
	)
	{
    ULONGLONG processId;
	LPCWSTR wszQualifier;
	EVsTstINISectionType sectionType;
	VSTST_PROCESS_TYPE processType;

	if (memcmp(wszSectionName, x_wszVssTestWriter, wcslen(x_wszVssTestWriter) * sizeof(WCHAR)) == 0)
		{
		sectionType = eVsTstSectionType_TestWriter;
		processType = VSTST_PT_WRITER;
		wszQualifier = wszSectionName + wcslen(x_wszVssTestWriter);
		}
	else if (memcmp(wszSectionName, x_wszVssTestRequestor, wcslen(x_wszVssTestRequestor)) == 0)
		{
		sectionType = eVsTstSectionType_TestRequesterApp;
		wszQualifier = wszSectionName + wcslen(x_wszVssTestRequestor);
		processType =  VSTST_PT_BACKUP;
		}


	CVsTstINIConfig config
		(
		sectionType,
		wszQualifier,
		false,
		wszScenarioFile
		);

	CBsString bssExeName;
	config.GetOptionValue(x_wszProcessExecutable, &bssExeName);

	EVsTstINIBoolType boolVal;
	config.GetOptionValue(x_wszConformingExecutable, &boolVal);

	CBsString bssCmdLine;
	config.GetOptionValue(x_wszProcessCommandLine, &bssCmdLine);

	bool bConforming = boolVal == eVsTstBool_True;

	if (bConforming)
		{
		processType = (processType == VSTST_PT_WRITER)
					? VSTST_PT_TESTWRITER : VSTST_PT_TESTBACKUP;

        g_pcTstNtLog->Log( eSevLev_Info, L"Controller: Conforming exe: '%s', cmdline: '%s'",
            bssExeName.c_str(), bssCmdLine.c_str() );

		processList.CreateConformingExe
			(
			processType,
			VSTST_AT_ADMIN,
			bssExeName,
			wszScenarioFile,
			wszSectionName,
			(UINT) -1,
			maxTestTime,
			false,
			NULL,
			processId
			);

        if(processType == VSTST_PT_WRITER || processType ==  VSTST_PT_TESTWRITER)
			Sleep(10000);
		}
	else
		processList.CreateNonConformingExe
			(
			processType,
			VSTST_AT_ADMIN,
			bssCmdLine,
			maxTestTime,
			NULL,
			processId
			);
    }

void DeleteExistingSnapshots()
	{
	CComPtr<IVssCoordinator> pCoord;
	HRESULT hrResult = S_OK;

	HRESULT hr = CoCreateInstance
					(
					CLSID_VSSCoordinator,
					NULL,
					CLSCTX_LOCAL_SERVER,
					IID_IVssCoordinator,
					(void **) &pCoord
					);

    if (FAILED(hr))
		{
		LogUnexpectedFailure(L"CoCreating the coordinator failed.  hr = 0x%08lx", hr);
		throw(hr);
		}

	WCHAR bufVolume[MAX_PATH];

	HANDLE hVolumes = FindFirstVolume(bufVolume, sizeof(bufVolume));
	
	if (hVolumes == INVALID_HANDLE_VALUE)
		{
		DWORD dwErr = GetLastError();
		LogUnexpectedFailure(L"FindFirstVolume failed with error %d", dwErr);
		throw(HRESULT_FROM_WIN32(dwErr));
		}

	try
		{
		do
			{
			WCHAR wszVolume[MAX_PATH];
			if (!GetVolumeNameForVolumeMountPoint
					(
					bufVolume,
					wszVolume,
					sizeof(wszVolume)/sizeof(WCHAR)
					))
				{
				DWORD dwErr = GetLastError();
				LogUnexpectedFailure(L"GetVolumeNameFromVolumeMountPoint failed with error %d", dwErr);
				throw(HRESULT_FROM_WIN32(dwErr));
				}

			if (wszVolume[wcslen(wszVolume) - 1] == L'\\')
				wszVolume[wcslen(wszVolume) - 1] = L'\0';

			VSTST_ASSERT(memcmp(wszVolume, L"\\\\?\\Volume{", 22) == 0);
			LPCWSTR wsz = wszVolume + 10;
			VSTST_ASSERT(wsz[wcslen(wsz) - 1] == L'}');
			CVssID id;
			id.Initialize(wsz, E_OUTOFMEMORY);

			LONG lDeletedSnapshots;
			VSS_ID SnapshotIDNotDeleted;
			hr = pCoord->DeleteSnapshots
					(
					id,
					VSS_OBJECT_VOLUME,
					false,
					&lDeletedSnapshots,
					&SnapshotIDNotDeleted
					);

			} while(FindNextVolume(hVolumes, bufVolume, sizeof(bufVolume)));

        DWORD dwErr = GetLastError();
		if (dwErr != ERROR_NO_MORE_FILES)
			{
			LogUnexpectedFailure(L"FindNextVolume failed with error %d", GetLastError());
			throw(HRESULT_FROM_WIN32(dwErr));
			}
		}
	catch(HRESULT hr)
		{
		hrResult = hr;
		}
	catch(...)
		{
		LogUnexpectedFailure(L"DeleteExistingSnapshots got unexpected exception");
		hrResult = E_UNEXPECTED;
		}

	FindVolumeClose(hVolumes);
	if (FAILED(hrResult))
		throw(hrResult);
	}


void RunScenario(LPCWSTR wszScenarioFile, LPCWSTR wszSectionName)
	{
	try
		{
		CVsTstINIConfig config
			(
			eVsTstSectionType_TestCoordinator,
			wszSectionName,
			FALSE,
			wszScenarioFile
			);

        EVsTstINIBoolType boolVal;
		config.GetOptionValue(x_wszDeleteExistingSnapshots, &boolVal);
		if (boolVal == eVsTstBool_True)
			DeleteExistingSnapshots();

        LONGLONG llTestTime, llMaxTestTime;
		CBsString bssProcesses;
		CBsString bssCoordinatorStart;

		config.GetOptionValue(x_wszMaxTestTime, &llTestTime, &llMaxTestTime);

		// stop, start, or restart coordinator service based on
		// configuration
		config.GetOptionValue(x_wszCoordinatorStart, &bssCoordinatorStart);
		if (wcscmp(bssCoordinatorStart, x_wszStop) == 0)
			StartStopVssService(true, true, false);
		else if (wcscmp(bssCoordinatorStart, x_wszStart) == 0)
			StartStopVssService(false, false, true);
		else if (wcscmp(bssCoordinatorStart, x_wszRestart) == 0)
			StartStopVssService(true, true, true);


		config.GetOptionValue(x_wszProcessesToStart, &bssProcesses);

		bssProcesses.CopyBeforeWrite();

		CVsTstProcessList processList;
				

		HANDLE hevtDone = CreateEvent(NULL, TRUE, FALSE, NULL);
		if (hevtDone == NULL)
			{
			LogUnexpectedFailure(L"Cannot create termination event for reason %d", GetLastError());
			exit(-1);
			}


		processList.Initialize((UINT) llTestTime, hevtDone);

		LPCWSTR wsz = bssProcesses;
		LPCWSTR wszTop = wsz;
		if (wsz == NULL || *wsz == L'\0')
			{
			LogUnexpectedFailure(L"no processes to start");
			exit(-1);
			}

		bool fMoreToRun = true;
		while(fMoreToRun)
			{
			while(*wsz == L' ')
				wsz++;

			LPCWSTR pwc = wsz;
			while(*pwc != L'\0' && *pwc != L',')
				pwc++;

			if (*pwc == L'\0')
				fMoreToRun = false;
			else
				bssProcesses.SetAt((UINT) (pwc - wszTop), L'\0');

			g_pcTstNtLog->Log( eSevLev_Info, L"Controller: Starting process '%s'", wsz );

			StartupProcess
				(
				processList,
				wsz,
				(UINT) llTestTime,
				wszScenarioFile
				);

			wsz = pwc + 1;
			}

		WaitForSingleObject(hevtDone, INFINITE);
		}
	catch(...)
		{
		LogUnexpectedFailure(L"Failure running scenario %s.%s.", wszScenarioFile, wszSectionName);
		}
	}

class CSeriesReader
	{
public:
	CSeriesReader(HANDLE hFile, LPCWSTR wszFile) :
		m_hFile(hFile),
		m_pch((char *) m_buf),
		m_pchEnd((char *) m_buf),
		m_fMoreToRead(true),
		m_wszFile(wszFile)
		{
		}

	~CSeriesReader()
		{
		CloseHandle(m_hFile);
		}

	bool FillBuffer();

	bool TrimSpaces(bool fStopAtEol);

	bool ReadToComma(LPSTR *pszRead);
private:

	// buffer
	BYTE m_buf[1024];

	// current position
	char *m_pch;

	// end of buffer
	char *m_pchEnd;

	// where to preserve from when filling buffer
	char *m_pchPreserve;

	// is there more to read
	bool m_fMoreToRead;

	// handle to file
	HANDLE m_hFile;

	// file name
	LPCWSTR m_wszFile;
	};

bool CSeriesReader::FillBuffer()
	{
	if (!m_fMoreToRead)
		return false;

	DWORD cbPreserved = m_pch - m_pchPreserve;
	DWORD cbRead;
	memmove(m_buf, m_pchPreserve, cbPreserved);
	if (!ReadFile
			(
			m_hFile,
			m_buf + cbPreserved,
			// allow trailing null to be placed in buffer
			sizeof(m_buf) - cbPreserved - 1,
			&cbRead,
			NULL
			))
       LogUnexpectedFailure(L"Failure to read %s due to error %d", m_wszFile, GetLastError());

   m_pch = (char *) m_buf + cbPreserved;
   m_pchEnd = (char *) m_buf + cbPreserved + cbRead;
   if (cbRead == 0)
	   {
	   DWORD dwErr = GetLastError();
	   if (dwErr == ERROR_HANDLE_EOF)
		   m_fMoreToRead = false;
	   else
		   LogUnexpectedFailure(L"Read failure %d.", dwErr);

	   return false;
	   }
   else if (cbRead + cbPreserved < sizeof(m_buf) - 1)
	   m_fMoreToRead = false;

   return true;
   }

bool CSeriesReader::TrimSpaces(bool fStopAtEol)
	{
	while(TRUE)
		{
		if (m_pch >= m_pchEnd)
			{
			m_pchPreserve = m_pch;
			if (!FillBuffer())
				return false;
			}

		if (*m_pch == ' ' ||
			*m_pch == '\t')
			m_pch++;

		else if (*m_pch == '\r' ||
			*m_pch == '\n')
			{
			if (fStopAtEol)
				return false;
			else
				m_pch++;
			}
		else
			break;
		}

	return true;
	}


bool CSeriesReader::ReadToComma(LPSTR *psz)
	{
	if (!TrimSpaces(true))
		return(false);
	m_pchPreserve = m_pch;
	while (TRUE)
		{
		if (m_pch >= m_pchEnd)
			{
			if (!FillBuffer())
				{
				if (m_pch - m_pchPreserve > 0)
					break;
				else
					return false;
				}
			}
		else if (*m_pch == ',' || *m_pch == '\r' || *m_pch == '\n')
			break;

		m_pch++;
		}

	*m_pch++ = '\0';
	*psz = m_pchPreserve;
	return true;
	}
		

void ProcessTestSeriesFile(LPCWSTR wszFile)
	{
	HANDLE hFile;

	hFile = CreateFile
				(
				wszFile,
				GENERIC_READ,
				FILE_SHARE_READ,
				NULL,
				OPEN_EXISTING,
				0,
				NULL
				);

    if (hFile == INVALID_HANDLE_VALUE)
		{
		LogUnexpectedFailure(L"Cannot open file %s due to error %d", wszFile, GetLastError());
		return;
		}

   CSeriesReader reader(hFile, wszFile);

   while(TRUE)
	   {
	   if(!reader.TrimSpaces(false))
		   // no more data in file
		   break;

	   LPSTR szScenarioFile;

	   if (!reader.ReadToComma(&szScenarioFile))
		   break;

	   WCHAR wszScenarioFile[1024];
	   mbstowcs(wszScenarioFile, szScenarioFile, sizeof(wszScenarioFile)/sizeof(WCHAR));

	   bool fSectionFound = false;
	   while(TRUE)
		   {
		   LPSTR szSection;

		   if (!reader.ReadToComma(&szSection))
			   break;

		   WCHAR wszSection[257];
		   mbstowcs(wszSection, szSection, sizeof(wszSection)/sizeof(WCHAR));
		   RunScenario(wszScenarioFile, wszSection);
		   fSectionFound = true;
		   }

	   if (!fSectionFound)
		   RunScenario(wszScenarioFile, L"Default");
	   }
   }

extern "C" __cdecl wmain(int argc, WCHAR **argv)
	{
	bool bCoInitializeSucceeded = false;
	try
		{
		HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
		if (FAILED(hr))
			{
			LogUnexpectedFailure(L"CoInitialize Failed hr = 0x%08lx", hr);
			throw hr;
			}

		CVsTstParams params;
		params.ParseCommandLine(argv, argc);

		if (!EnableDebugPriv())
			exit(-1);

		CVsTstMsgHandler handler;

		g_pcTstNtLog = handler.GetTstNtLogP();
		handler.Initialize(1024);
		handler.LaunchReader();
		handler.StartProcessingMessages();
				


		LPCWSTR wszScenarioFile;
		LPCWSTR wszSectionName;
		LPCWSTR wszTestSeriesFile;

		if (params.GetTestSeries(&wszTestSeriesFile))
			ProcessTestSeriesFile(wszTestSeriesFile);
		else if (params.GetScenarioFileName(&wszScenarioFile) &&
				 params.GetSectionName(&wszSectionName))
			RunScenario(wszScenarioFile, wszSectionName);
		else
			LogUnexpectedFailure(L"Bad Input parameters");
		
		handler.StopProcessingMessages();
		g_pcTstNtLog = NULL;
		}
	catch( HRESULT hr )
    	{
        LogUnexpectedFailure( L"Caught HRESULT: 0x%08x", hr );
	    }
	catch(...)
		{
        LogUnexpectedFailure( L"Caught an unexpected exception" );
		}

	if (bCoInitializeSucceeded)
		CoUninitialize();

	return 0;
	}

void CVsTstMsgHandlerRoutines::PrintMessage(VSTST_MSG_HDR *phdr, VOID *pPrivateData)
	{
	VSTST_ASSERT(phdr->type == VSTST_MT_TEXT || phdr->type == VSTST_MT_IMMEDIATETEXT);
	CVsTstNtLog *pcTestLog = (CVsTstNtLog *)pPrivateData;
	VSTST_TEXTMSG *pmsg = (VSTST_TEXTMSG *) phdr->rgb;
	
	printf("%d: %s\n", (UINT) phdr->sequence, pmsg->pch);

	pcTestLog->Log( eSevLev_Info, L"(%I64u) %S", phdr->processId, pmsg->pch );
	}

void CVsTstMsgHandlerRoutines::HandleUnexpectedException(VSTST_MSG_HDR *phdr, VOID *pPrivateData)
	{
	VSTST_ASSERT(phdr->type == VSTST_MT_UNEXPECTEDEXCEPTION);
	CVsTstNtLog *pcTestLog = (CVsTstNtLog *)pPrivateData;
	VSTST_UNEXPECTEDEXCEPTIONMSG *pmsg = (VSTST_UNEXPECTEDEXCEPTIONMSG *) phdr->rgb;
	
	printf("!!!Unexpected Exception caught in routine %s\n", pmsg->szFailedRoutine);
  	pcTestLog->Log( eSevLev_Severe,
  	    L"(%I64u) !!!Unexpected Exception caught in routine %S", phdr->processId, pmsg->szFailedRoutine );
	}

void CVsTstMsgHandlerRoutines::HandleFailure(VSTST_MSG_HDR *phdr, VOID *pPrivateData)
	{
	VSTST_ASSERT(phdr->type == VSTST_MT_FAILURE);
	CVsTstNtLog *pcTestLog = (CVsTstNtLog *)pPrivateData;
	VSTST_FAILUREMSG *pmsg = (VSTST_FAILUREMSG *) phdr->rgb;
	printf("!!!FAILURE: %s\n", pmsg->szFailure);
  	pcTestLog->Log( eSevLev_Severe,
    	L"(%I64u) !!!FAILURE: %S", phdr->processId, pmsg->szFailure);
	}

void CVsTstMsgHandlerRoutines::HandleSuccess(VSTST_MSG_HDR *phdr, VOID *pPrivateData)
	{
	VSTST_ASSERT(phdr->type == VSTST_MT_SUCCESS);
	CVsTstNtLog *pcTestLog = (CVsTstNtLog *)pPrivateData;
	VSTST_SUCCESSMSG *pmsg = (VSTST_SUCCESSMSG *) phdr->rgb;
	printf("SUCCESS: %s\n", phdr->processId, pmsg->szMsg);
  	pcTestLog->Log( eSevLev_Pass,
    	L"(%I64u) Success: %S", pmsg->szMsg);
	}

void CVsTstMsgHandlerRoutines::HandleOperationFailure(VSTST_MSG_HDR *phdr, VOID *pPrivateData)
	{
	VSTST_ASSERT(phdr->type == VSTST_MT_OPERATIONFAILURE);
	CVsTstNtLog *pcTestLog = (CVsTstNtLog *)pPrivateData;
	VSTST_OPERATIONFAILUREMSG *pmsg = (VSTST_OPERATIONFAILUREMSG *) phdr->rgb;
	printf("!!!Operation %s failed. hr = 0x%08lx\n", pmsg->szFailedOperation, pmsg->hr);
  	pcTestLog->Log( eSevLev_Severe,
    	L"(%I64u) !!!Operation %S failed. hr = 0x%08lx\n", phdr->processId, pmsg->szFailedOperation, pmsg->hr);
	}

void LogInvalidMessage(VSTST_MSG_HDR *phdr)
	{
	UNREFERENCED_PARAMETER(phdr);

	VSTST_ASSERT(FALSE);

    printf( "Controller: !!! Invalid harness message\n" );

  	if ( g_pcTstNtLog != NULL )
      	g_pcTstNtLog->Log( eSevLev_Severe, L"Controller: !!! Invalid harness message" );
	}

void ReadPipeError(DWORD dwErr)
	{
	UNREFERENCED_PARAMETER(dwErr);

	VSTST_ASSERT(FALSE);

  	printf( "Controller: !!! Pipe read error\n" );

  	if ( g_pcTstNtLog != NULL )
      	g_pcTstNtLog->Log( eSevLev_Severe, L"Controller: !!! Pipe read error" );
	}

void LogUnexpectedFailure(LPCWSTR wsz, ...)
	{
	va_list args;
	va_start(args, wsz);

    VSTST_ASSERT( "In LogUnexpectedFailure" && FALSE);
	CBsString cwsErrorMessage;

	cwsErrorMessage.FormatV( wsz, args );

  	wprintf( L"Controller: %s\n", cwsErrorMessage.c_str() );

  	if ( g_pcTstNtLog != NULL )
      	g_pcTstNtLog->Log( eSevLev_Severe, L"Controller: %s", cwsErrorMessage.c_str() );

	va_end( args );
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\mptest\backup\debug.h ===
inline void CHECK_SUCCESS(HRESULT hr)
	{
	if (hr != S_OK)
		{
		wprintf(L"operation failed with HRESULT=%08x\n", hr);
		DebugBreak();
		}
	}

inline void CHECK_NOFAIL(HRESULT hr)
	{
	if (FAILED(hr))
		{
		wprintf(L"operation failed with HRESULT=%08x\n", hr);
		DebugBreak();
		}
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\harness\writer\writer.h ===
/*++

Copyright (c) 2000  Microsoft Corporation

Module Name:

    writer.h

Abstract:

    definitions for test writer


    Brian Berkowitz  [brianb]  06/02/2000

TBD:
	

Revision History:

    Name        Date        Comments
    brianb      06/02/2000  Created
    mikejohn	09/19/2000  176860: Added calling convention methods where missing


--*/


class CVsWriterTest :
	public IVsTstRunningTest,
	public CVssWriter,
	public CVsTstClientLogger
	{
public:
	HRESULT RunTest
		(
		CVsTstINIConfig *pConfig,
		CVsTstClientMsg *pMsg,
		CVsTstParams *pParams
		);


	HRESULT ShutdownTest(VSTST_SHUTDOWN_REASON reason)
		{
		UNREFERENCED_PARAMETER(reason);
		VSTST_ASSERT(FALSE && "shouldn't get here");
		return S_OK;
		}

   	virtual bool STDMETHODCALLTYPE OnIdentify(IN IVssCreateWriterMetadata *pMetadata);

	virtual bool STDMETHODCALLTYPE OnPrepareBackup(IN IVssWriterComponents *pComponent);

	virtual bool STDMETHODCALLTYPE OnPrepareSnapshot();

	virtual bool STDMETHODCALLTYPE OnFreeze();

	virtual bool STDMETHODCALLTYPE OnThaw();

	virtual bool STDMETHODCALLTYPE OnAbort();

	virtual bool STDMETHODCALLTYPE OnBackupComplete(IN IVssWriterComponents *pComponent);

	virtual bool STDMETHODCALLTYPE OnRestore(IN IVssWriterComponents *pComponent);

private:
	bool Initialize();

	// configuration file
	CVsTstINIConfig *m_pConfig;

	// command line parameters
	CVsTstParams *m_pParams;
	};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\mptest\backup\main.cpp ===
#include "stdafx.hxx"
#include "vs_idl.hxx"
#include "vswriter.h"
#include "vsbackup.h"
#include <debug.h>
#include <vsswprv.h>



CComModule _Module;

static LPCWSTR s_rgwszStates[] =
	{
	NULL,
	L"STABLE",
	L"WAIT_FOR_FREEZE",
	L"WAIT_FOR_THAW",
	L"WAIT_FOR_COMPLETION",
	L"FAILED_AT_IDENTIFY",
	L"FAILED_AT_PREPARE_BACKUP",
	L"FAILED_AT_PREPARE_SNAPSHOT",
	L"FAILED_AT_FREEZE",
	L"FAILED_AT_THAW"
	};



void CheckStatus(IVssBackupComponents *pvbc, LPCWSTR wszWhen)
	{
	unsigned cWriters;
	CComPtr<IVssAsync> pAsync;

	CHECK_NOFAIL(pvbc->GatherWriterStatus(&pAsync));
	CHECK_NOFAIL(pAsync->Wait());
	CHECK_NOFAIL(pvbc->GetWriterStatusCount(&cWriters));


	wprintf(L"status %s\n%d writers\n\n", wszWhen, cWriters);
	for(unsigned iWriter = 0; iWriter < cWriters; iWriter++)
		{
		VSS_ID idInstance;
		VSS_ID idWriter;
		CComBSTR bstrWriter;
		VSS_WRITER_STATE status;
		HRESULT hrWriterFailure;

		CHECK_SUCCESS(pvbc->GetWriterStatus
							(
							iWriter,
							&idInstance,
							&idWriter,
							&bstrWriter,
							&status,
							&hrWriterFailure
							));

		wprintf
			(
			L"Status for writer %s: %s(0x%08lx)\n",
			bstrWriter,
			s_rgwszStates[status],
			hrWriterFailure
			);
        }

	pvbc->FreeWriterStatus();
	}


void PrintFiledesc(IVssWMFiledesc *pFiledesc, LPCWSTR wszDescription)
	{
	CComBSTR bstrPath;
	CComBSTR bstrFilespec;
	CComBSTR bstrAlternate;
	CComBSTR bstrDestination;
	bool bRecursive;

	CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
	CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
	CHECK_NOFAIL(pFiledesc->GetRecursive(&bRecursive));
	CHECK_NOFAIL(pFiledesc->GetAlternateLocation(&bstrAlternate));
	CHECK_NOFAIL(pFiledesc->GetAlternateLocation(&bstrDestination));

	wprintf
		(
		L"%s\nPath=%s,Filespec=%s, Recursive=%s\n",
		wszDescription,
		bstrPath,
		bstrFilespec,
		bRecursive ? L"yes" : L"no"
		);

    if (bstrAlternate && wcslen(bstrAlternate) > 0)
		wprintf(L"Alternate Location = %s\n", bstrAlternate);

	if (bstrDestination && wcslen(bstrDestination) > 0)
		wprintf(L"Destination Location = %s\n", bstrDestination);
	}

HANDLE LaunchWriterProcess()
	{
	HANDLE hEventW = CreateEvent(NULL, TRUE, FALSE, L"TESTWRITEREVENT");
	if (hEventW == NULL)
		{
		wprintf(L"CreateEvent failed with error %d.\n", GetLastError());
		DebugBreak();
		}

	HANDLE hEventB = CreateEvent(NULL, TRUE, FALSE, L"TESTBACKUPEVENT");
	if (hEventB == NULL)
		{
		wprintf(L"CreateEvent failed with error %d.\n", GetLastError());
		DebugBreak();
		}

	WaitForSingleObject(hEventB, INFINITE);
	return hEventW;
	}

void DoAddToSnapshotSet
	(
	IN IVssBackupComponents *pvbc,
	IN BSTR bstrPath,
	IN LPWSTR wszVolumes
	)
	{
	WCHAR wszVolume[100];
	WCHAR *pwc = bstrPath;
	WCHAR *pwcDest = wszVolume;


	for(; *pwc != ':'; pwc++, pwcDest++)
		*pwcDest = *pwc;

	*pwcDest++ = L':';
	*pwcDest++ = L'\\';
	*pwcDest++ = L'\0';
	pwc = wszVolumes;
	while(*pwc != '\0')
		{
		if (wcsncmp(pwc, wszVolume, wcslen(wszVolume)) == 0)
			return;

		pwc = wcschr(pwc, L';');
		if (pwc == NULL)
			break;
		}

	pwc = wszVolumes + wcslen(wszVolumes);
	wcscpy(pwc, wszVolume);
	VSS_ID SnapshotId;
	CHECK_SUCCESS(pvbc->AddToSnapshotSet
						(
						wszVolume,
						VSS_SWPRV_ProviderId,
						&SnapshotId
						));
    }



extern "C" __cdecl wmain(int argc, WCHAR **argv)
	{
	HANDLE hEvent = NULL;
	HRESULT hr = S_OK;

	try
		{
		WCHAR wszVolumes[100];
        CHECK_SUCCESS(CoInitializeEx(NULL, COINIT_MULTITHREADED));
		hEvent = LaunchWriterProcess();

		CComBSTR strSnapshotSetId = "12345678-1234-1234-1234-1234567890ab";

		CComPtr<IVssBackupComponents> pvbc;

		CHECK_SUCCESS(CreateVssBackupComponents(&pvbc));

		CHECK_SUCCESS(pvbc->InitializeForBackup());
		CHECK_SUCCESS(pvbc->SetBackupState
						(
						true,
						false,
						VSS_BT_INCREMENTAL
						));

		unsigned cWriters;
		CComPtr<IVssAsync> pAsync;

		CHECK_NOFAIL(pvbc->GatherWriterMetadata(&pAsync));
		CHECK_NOFAIL(pAsync->Wait());
		CHECK_NOFAIL(pvbc->GetWriterMetadataCount(&cWriters));

		VSS_ID id;

		CHECK_SUCCESS(pvbc->StartSnapshotSet(&id));

		for(unsigned iWriter = 0; iWriter < cWriters; iWriter++)
			{
			CComPtr<IVssExamineWriterMetadata> pMetadata;
			VSS_ID idInstance;

			CHECK_SUCCESS(pvbc->GetWriterMetadata(iWriter, &idInstance, &pMetadata));
			VSS_ID idInstanceT;
			VSS_ID idWriter;
			CComBSTR bstrWriterName;
			VSS_USAGE_TYPE usage;
			VSS_SOURCE_TYPE source;

			CHECK_SUCCESS(pMetadata->GetIdentity
							(
							&idInstanceT,
							&idWriter,
							&bstrWriterName,
							&usage,
							&source
							));

            if (memcmp(&idInstance, &idInstanceT, sizeof(VSS_ID)) != 0)
				{
				wprintf(L"Instance id mismatch\n");
				DebugBreak();
				}

			WCHAR *pwszInstanceId;
			WCHAR *pwszWriterId;
			UuidToString(&idInstance, &pwszInstanceId);
			UuidToString(&idWriter, &pwszWriterId);
			wprintf
				(
				L"InstanceId=%s\nWriterId=%s\nWriterName=%s\nUsageType=%d\nSourceType=%d\n",
				pwszInstanceId,
				pwszWriterId,
				bstrWriterName,
				usage,
				source
				);

			RpcStringFree(&pwszInstanceId);
			RpcStringFree(&pwszWriterId);

			unsigned cIncludeFiles, cExcludeFiles, cComponents;
			CHECK_SUCCESS(pMetadata->GetFileCounts
								(
								&cIncludeFiles,
								&cExcludeFiles,
								&cComponents
								));

			CComBSTR bstrPath;
			CComBSTR bstrFilespec;
			CComBSTR bstrAlternate;
			CComBSTR bstrDestination;
			bool bRecursive;

			for(unsigned i = 0; i < cIncludeFiles; i++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;
				CHECK_SUCCESS(pMetadata->GetIncludeFile(i, &pFiledesc));

				PrintFiledesc(pFiledesc, L"Include File");
				}

			for(i = 0; i < cExcludeFiles; i++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;
				CHECK_SUCCESS(pMetadata->GetExcludeFile(i, &pFiledesc));
				PrintFiledesc(pFiledesc, L"Exclude File");
				}

			for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
				{
				CComPtr<IVssWMComponent> pComponent;
				PVSSCOMPONENTINFO pInfo;
				CHECK_SUCCESS(pMetadata->GetComponent(iComponent, &pComponent));
				CHECK_SUCCESS(pComponent->GetComponentInfo(&pInfo));
				wprintf
					(
					L"Component %d, type=%d\nLogicalPath=%s,Name=%s\nCaption=%s\n",
					i,
					pInfo->type,
					pInfo->bstrLogicalPath,
					pInfo->bstrComponentName,
					pInfo->bstrCaption
					);

				wprintf
					(
					L"RestoreMetadata=%s,NotifyOnBackupComplete=%s,Selectable=%s\n",
					pInfo->bRestoreMetadata ? L"yes" : L"no",
					pInfo->bNotifyOnBackupComplete ? L"yes" : L"no",
					pInfo->bSelectable ? L"yes" : L"no"
					);


				CHECK_SUCCESS(pvbc->AddComponent
								(
								idInstance,
								idWriter,
								pInfo->type,
								pInfo->bstrLogicalPath,
								pInfo->bstrComponentName
								));


				if (pInfo->cFileCount > 0)
					{
					for(i = 0; i < pInfo->cFileCount; i++)
						{
						CComPtr<IVssWMFiledesc> pFiledesc;
						CHECK_SUCCESS(pComponent->GetFile(i, &pFiledesc));

						CComBSTR bstrPath;
						CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
						DoAddToSnapshotSet(pvbc, bstrPath, wszVolumes);

						PrintFiledesc(pFiledesc, L"FileGroupFile");
						}
					}

				if (pInfo->cDatabases > 0)
					{
					for(i = 0; i < pInfo->cDatabases; i++)
						{
						CComPtr<IVssWMFiledesc> pFiledesc;
						CHECK_SUCCESS(pComponent->GetDatabaseFile(i, &pFiledesc));

						CComBSTR bstrPath;
						CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
						DoAddToSnapshotSet(pvbc, bstrPath, wszVolumes);
						PrintFiledesc(pFiledesc, L"DatabaseFile");
						}
					}

				if (pInfo->cLogFiles > 0)
					{
					for(i = 0; i < pInfo->cLogFiles; i++)
						{
						CComPtr<IVssWMFiledesc> pFiledesc;
						CHECK_SUCCESS(pComponent->GetDatabaseLogFile(i, &pFiledesc));

						CComBSTR bstrPath;
						CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
						DoAddToSnapshotSet(pvbc, bstrPath, wszVolumes);
						PrintFiledesc(pFiledesc, L"DatabaseLogFile");
						}
					}

				pComponent->FreeComponentInfo(pInfo);
				}

			VSS_RESTOREMETHOD_ENUM method;
			CComBSTR bstrUserProcedure;
			CComBSTR bstrService;
			VSS_WRITERRESTORE_ENUM writerRestore;
			unsigned cMappings;
			bool bRebootRequired;

			CHECK_SUCCESS(pMetadata->GetRestoreMethod
							(
							&method,
							&bstrService,
							&bstrUserProcedure,
							&writerRestore,
							&bRebootRequired,
							&cMappings
							));


			wprintf
				(
				L"Restore method=%d\nService=%s\nUser Procedure=%s\nwriterRestore=%d\nrebootRequired=%s\n\n",
				method,
				bstrService,
				bstrUserProcedure,
				writerRestore,
				bRebootRequired ? L"yes" : L"no"
				);

			for(i = 0; i < cMappings; i++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;

				CHECK_SUCCESS(pMetadata->GetAlternateLocationMapping(i, &pFiledesc));

				PrintFiledesc(pFiledesc, L"AlternateMapping");
				}
			}

		CHECK_SUCCESS(pvbc->FreeWriterMetadata());

			{
			CComPtr<IVssAsync> pAsync;
			HRESULT hr;
			INT nPercentDone;

			CHECK_SUCCESS(pvbc->PrepareForBackup(&pAsync));
			CHECK_SUCCESS(pAsync->Wait());
			CHECK_SUCCESS(pAsync->QueryStatus(&hr, &nPercentDone));
			CHECK_NOFAIL(hr);
			}

		CheckStatus(pvbc, L"After Prepare Backup");
		unsigned cWriterComponents;
		CHECK_SUCCESS(pvbc->GetWriterComponentsCount(&cWriterComponents));
		for(iWriter = 0; iWriter < cWriterComponents; iWriter++)
			{
			CComPtr<IVssWriterComponentsExt> pWriter;
			CHECK_SUCCESS(pvbc->GetWriterComponents(iWriter, &pWriter));

			unsigned cComponents;
			CHECK_SUCCESS(pWriter->GetComponentCount(&cComponents));
			VSS_ID idWriter, idInstance;
			CHECK_SUCCESS(pWriter->GetWriterInfo(&idInstance, &idWriter));
			for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
				{
				CComPtr<IVssComponent> pComponent;
				CHECK_SUCCESS(pWriter->GetComponent(iComponent, &pComponent));
				
				VSS_COMPONENT_TYPE ct;
				CComBSTR bstrLogicalPath;
				CComBSTR bstrComponentName;
				bool bBackupSucceeded;

				CHECK_NOFAIL(pComponent->GetLogicalPath(&bstrLogicalPath));
				CHECK_SUCCESS(pComponent->GetComponentType(&ct));
				CHECK_SUCCESS(pComponent->GetComponentName(&bstrComponentName));
				CHECK_SUCCESS(pvbc->SetBackupSucceeded
								(
								idInstance,
								idWriter,
								ct,
								bstrLogicalPath,
								bstrComponentName,
								true
								));
				}
			}

			{
			CComPtr<IVssAsync> pAsync;
			INT nPercentDone;
			CHECK_SUCCESS(pvbc->DoSnapshotSet
								(
								&pAsync
								));


			CHECK_SUCCESS(pAsync->Wait());
			CHECK_SUCCESS(pAsync->QueryStatus(&hr, &nPercentDone));
			}

        if (FAILED(hr))
			{
			wprintf(L"Creating the snapshot failed.  hr = 0x%08lx\n", hr);
			CheckStatus(pvbc, L"After Do Snapshot");
			}
		else
			{
			CheckStatus(pvbc, L"After Do Snapshot");
			LONG lSnapshotsNotDeleted;
			VSS_ID rgSnapshotsNotDeleted[10];

            	{
				CComPtr<IVssAsync> pAsync;
				HRESULT hr;
				INT nPercentDone;

				CHECK_SUCCESS(pvbc->BackupComplete(&pAsync));
				CHECK_SUCCESS(pAsync->Wait());
				CHECK_SUCCESS(pAsync->QueryStatus(&hr, &nPercentDone));
				CHECK_NOFAIL(hr);
				}

			CheckStatus(pvbc, L"After Backup Complete");
			hr  = pvbc->DeleteSnapshots
					(
					id,
					VSS_OBJECT_SNAPSHOT_SET,
					false,
					&lSnapshotsNotDeleted,
					rgSnapshotsNotDeleted
					);

			if (FAILED(hr))
				wprintf(L"Deletion of Snapshots failed.  hr = 0x%08lx\n", hr);
			}
		}
	catch(...)
		{
		hr = E_UNEXPECTED;
		}

	if (hEvent)
		SetEvent(hEvent);

	if (FAILED(hr))
		wprintf(L"Failed with %08x.\n", hr);

	return(0);
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\metasnap\metasnap.cpp ===
/*
**++
**
** Copyright (c) 2000-2001  Microsoft Corporation
**
**
** Module Name:
**
**	metasnap.cpp
**
**
** Abstract:
**
**	Test program to obtain and display the Writer metadata.
**
**
** Author:
**
**	Michael C. Johnson   [mikejohn]        21-Jul-2000
**
**	(Based on another test program BETEST by Brian Berkowitz)
**
**
** Revision History:
**
**--
*/

/*
** Defines
**
**
**	   C4290: C++ Exception Specification ignored
** warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
** warning C4127: conditional expression is constant
*/
#pragma warning(disable:4290)
#pragma warning(disable:4511)
#pragma warning(disable:4127)


/*
** Includes
*/
#include <windows.h>
#include <wtypes.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>

#include <vss.h>
#include <vswriter.h>
#include <vsbackup.h>


#include <oleauto.h>

#define ATLASSERT(_condition)

#include <atlconv.h>
#include <atlbase.h>

extern CComModule _Module;
#include <atlcom.h>



inline void CHECK_SUCCESS (HRESULT hr)
    {
    if (hr != S_OK)
	{
	wprintf(L"operation failed with HRESULT =0x%08x\n", hr);
	DebugBreak();
	}
    }

inline void CHECK_NOFAIL (HRESULT hr)
    {
    if (FAILED(hr))
	{
	wprintf(L"operation failed with HRESULT =0x%08x\n", hr);
	DebugBreak();
	}
    }



BOOL AssertPrivilege( LPCWSTR privName )
    {
    HANDLE		 tokenHandle;
    TOKEN_PRIVILEGES	 newState;
    TOKEN_PRIVILEGES	*pTokens = NULL;
    BOOL		 stat    = FALSE;
    LUID		 value;
    DWORD		 error;
    DWORD		 cbTokens;


    if (OpenProcessToken (GetCurrentProcess(),
			  TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY,
			  &tokenHandle))
	{

	if (LookupPrivilegeValue (NULL, privName, &value))
	    {
	    newState.PrivilegeCount            = 1;
	    newState.Privileges [0].Luid       = value;
	    newState.Privileges [0].Attributes = SE_PRIVILEGE_ENABLED_BY_DEFAULT|SE_PRIVILEGE_ENABLED;

	    /*
	    ** We will always call GetLastError below, so clear
	    ** any prior error values on this thread.
	    */
	    SetLastError (ERROR_SUCCESS);

	    stat = AdjustTokenPrivileges (tokenHandle,
					  FALSE,
					  &newState,
					  (DWORD)0,
					  NULL,
					  NULL);

	    /*
	    ** Supposedly, AdjustTokenPriveleges always returns TRUE
	    ** (even when it fails). So, call GetLastError to be
	    ** extra sure everything's cool.
	    */
	    if ((error = GetLastError()) != ERROR_SUCCESS)
		{
		stat = FALSE;
		}

	    if (!stat)
		{
		wprintf (L"AdjustTokenPrivileges for %s failed with %d",
			 privName,
			 error);
		}
	    }



	GetTokenInformation (tokenHandle,
			     TokenPrivileges,
			     NULL,
			     0,
			     &cbTokens);


	pTokens = (TOKEN_PRIVILEGES *) new BYTE[cbTokens];

	GetTokenInformation (tokenHandle,
			     TokenPrivileges,
			     pTokens,
			     cbTokens,
			     &cbTokens);

	delete pTokens;
	CloseHandle (tokenHandle);
	}


    return stat;
    }


LPCWSTR GetStringFromUsageType (VSS_USAGE_TYPE eUsageType)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eUsageType)
	{
	case VSS_UT_BOOTABLESYSTEMSTATE: pwszRetString = L"BootableSystemState"; break;
	case VSS_UT_SYSTEMSERVICE:       pwszRetString = L"SystemService";       break;
	case VSS_UT_USERDATA:            pwszRetString = L"UserData";            break;
	case VSS_UT_OTHER:               pwszRetString = L"Other";               break;
					
	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromSourceType (VSS_SOURCE_TYPE eSourceType)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eSourceType)
	{
	case VSS_ST_TRANSACTEDDB:    pwszRetString = L"TransactionDb";    break;
	case VSS_ST_NONTRANSACTEDDB: pwszRetString = L"NonTransactionDb"; break;
	case VSS_ST_OTHER:           pwszRetString = L"Other";            break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromRestoreMethod (VSS_RESTOREMETHOD_ENUM eRestoreMethod)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eRestoreMethod)
	{
	case VSS_RME_RESTORE_IF_NOT_THERE:          pwszRetString = L"RestoreIfNotThere";          break;
	case VSS_RME_RESTORE_IF_CAN_REPLACE:        pwszRetString = L"RestoreIfCanReplace";        break;
	case VSS_RME_STOP_RESTORE_START:            pwszRetString = L"StopRestoreStart";           break;
	case VSS_RME_RESTORE_TO_ALTERNATE_LOCATION: pwszRetString = L"RestoreToAlternateLocation"; break;
	case VSS_RME_RESTORE_AT_REBOOT:             pwszRetString = L"RestoreAtReboot";            break;
	case VSS_RME_CUSTOM:                        pwszRetString = L"Custom";                     break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromWriterRestoreMethod (VSS_WRITERRESTORE_ENUM eWriterRestoreMethod)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eWriterRestoreMethod)
	{
	case VSS_WRE_NEVER:            pwszRetString = L"RestoreNever";           break;
	case VSS_WRE_IF_REPLACE_FAILS: pwszRetString = L"RestoreIfReplaceFailsI"; break;
	case VSS_WRE_ALWAYS:           pwszRetString = L"RestoreAlways";          break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromComponentType (VSS_COMPONENT_TYPE eComponentType)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eComponentType)
	{
	case VSS_CT_DATABASE:  pwszRetString = L"Database";  break;
	case VSS_CT_FILEGROUP: pwszRetString = L"FileGroup"; break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromFailureType (HRESULT hrStatus)
    {
    LPCWSTR pwszFailureType;

    switch (hrStatus)
	{
	case NOERROR:                                pwszFailureType = L"";                     break;
	case VSS_E_WRITERERROR_INCONSISTENTSNAPSHOT: pwszFailureType = L"InconsistentSnapshot"; break;
	case VSS_E_WRITERERROR_OUTOFRESOURCES:       pwszFailureType = L"OutOfResources";       break;
	case VSS_E_WRITERERROR_TIMEOUT:              pwszFailureType = L"Timeout";              break;
	case VSS_E_WRITERERROR_NONRETRYABLE:         pwszFailureType = L"Non-Retryable";        break;
	case VSS_E_WRITERERROR_RETRYABLE:            pwszFailureType = L"Retryable";            break;
	default:                                     pwszFailureType = L"UNDEFINED";            break;
	}

    return (pwszFailureType);
    }





void PrintFiledesc (IVssWMFiledesc *pFiledesc, LPCWSTR wszDescription)
    {
    CComBSTR bstrPath;
    CComBSTR bstrFilespec;
    CComBSTR bstrAlternate;
    bool     bRecursive;


    CHECK_SUCCESS (pFiledesc->GetPath (&bstrPath));
    CHECK_SUCCESS (pFiledesc->GetFilespec (&bstrFilespec));
    CHECK_NOFAIL  (pFiledesc->GetRecursive (&bRecursive));
    CHECK_NOFAIL  (pFiledesc->GetAlternateLocation (&bstrAlternate));

    wprintf (L"%s\n            Path = %s, Filespec = %s, Recursive = %s\n",
	     wszDescription,
	     bstrPath,
	     bstrFilespec,
	     bRecursive ? L"yes" : L"no");

    if (bstrAlternate && wcslen (bstrAlternate) > 0)
	{
	wprintf(L"            Alternate Location = %s\n", bstrAlternate);
	}
    }



extern "C" __cdecl wmain(int argc, WCHAR **argv)
    {
    HRESULT	hr                     = NOERROR;
    bool	bCoInitializeSucceeded = false;


    UNREFERENCED_PARAMETER (argc);
    UNREFERENCED_PARAMETER (argv);


    try
	{
	unsigned cWriters;
	CComBSTR bstrXML;
	CComBSTR bstrXMLOut;
	CComBSTR strSnapshotSetId = "12345678-1234-1234-1234-1234567890ab";
	CComPtr<IVssBackupComponents> pvbc;
	CComPtr<IVssAsync> pAsync;


        CHECK_SUCCESS (CoInitializeEx (NULL, COINIT_MULTITHREADED));

	bCoInitializeSucceeded = true;

	if (!AssertPrivilege (SE_BACKUP_NAME))
	    {
	    wprintf(L"AssertPrivilege returned error, rc:%d\n", GetLastError ());
	    return 2;
	    }

	CHECK_SUCCESS (CreateVssBackupComponents (&pvbc));

	CHECK_SUCCESS (pvbc->InitializeForBackup  ());
	CHECK_SUCCESS (pvbc->SetBackupState       (true, false, VSS_BT_FULL));
	CHECK_NOFAIL  (pvbc->GatherWriterMetadata (&pAsync));
	CHECK_NOFAIL  (pAsync->Wait ());
	CHECK_NOFAIL  (pvbc->GetWriterMetadataCount (&cWriters));


	for (unsigned iWriter = 0; iWriter < cWriters; iWriter++)
	    {
	    CComPtr<IVssExamineWriterMetadata> pMetadata;

	    VSS_ID           idInstance;
	    VSS_ID           idInstanceT;
	    VSS_ID           idWriter;
	    CComBSTR         bstrWriterName;
	    VSS_USAGE_TYPE   usage;
	    VSS_SOURCE_TYPE  source;
	    WCHAR           *pwszInstanceId;
	    WCHAR           *pwszWriterId;
	    unsigned cIncludeFiles, cExcludeFiles, cComponents;
	    CComBSTR bstrPath;
	    CComBSTR bstrFilespec;
	    CComBSTR bstrAlternate;
	    CComBSTR bstrDestination;



	    CHECK_SUCCESS (pvbc->GetWriterMetadata(iWriter, &idInstance, &pMetadata));

	    CHECK_SUCCESS (pMetadata->GetIdentity (&idInstanceT,
						   &idWriter,
						   &bstrWriterName,
						   &usage,
						   &source));

	    wprintf (L"\n\n");

            if (memcmp (&idInstance, &idInstanceT, sizeof(VSS_ID)) != 0)
		{
		wprintf(L"Instance id mismatch\n");
		DebugBreak();
		}


	    UuidToString (&idInstance, &pwszInstanceId);
	    UuidToString (&idWriter,   &pwszWriterId);

	    wprintf (L"WriterName = %s\n\n"
		     L"    WriterId   = %s\n"
		     L"    InstanceId = %s\n"
		     L"    UsageType  = %d (%s)\n"
		     L"    SourceType = %d (%s)\n",
		     bstrWriterName,
		     pwszWriterId,
		     pwszInstanceId,
		     usage,
		     GetStringFromUsageType (usage),
		     source,
		     GetStringFromSourceType (source));

	    RpcStringFree (&pwszInstanceId);
	    RpcStringFree (&pwszWriterId);

	    CHECK_SUCCESS(pMetadata->GetFileCounts (&cIncludeFiles,
						    &cExcludeFiles,
						    &cComponents));

	    for(unsigned i = 0; i < cIncludeFiles; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS (pMetadata->GetIncludeFile (i, &pFiledesc));

		PrintFiledesc(pFiledesc, L"\n    Include File");
		}


	    for(i = 0; i < cExcludeFiles; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS (pMetadata->GetExcludeFile (i, &pFiledesc));

		PrintFiledesc (pFiledesc, L"\n    Exclude File");
		}


	    for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
		{
		CComPtr<IVssWMComponent> pComponent;
		PVSSCOMPONENTINFO pInfo;

		CHECK_SUCCESS (pMetadata->GetComponent      (iComponent, &pComponent));
		CHECK_SUCCESS (pComponent->GetComponentInfo (&pInfo));

		wprintf (L"\n"
			 L"    Component %d, type = %d (%s)\n"
			 L"        LogicalPath = %s\n"
			 L"        Name        = %s\n"
			 L"        Caption     = %s\n"
			 L"        Icon size   = %u\n",
			 iComponent,
			 pInfo->type,
			 GetStringFromComponentType (pInfo->type),
			 pInfo->bstrLogicalPath,
			 pInfo->bstrComponentName,
			 pInfo->bstrCaption,
			 pInfo->cbIcon );
					
		wprintf (L"        RestoreMetadata        = %s\n"
			 L"        NotifyOnBackupComplete = %s\n"
			 L"        Selectable             = %s\n",
			 pInfo->bRestoreMetadata        ? L"yes" : L"no",
			 pInfo->bNotifyOnBackupComplete ? L"yes" : L"no",
			 pInfo->bSelectable             ? L"yes" : L"no");


		if (pInfo->cFileCount > 0)
		    {
		    for(i = 0; i < pInfo->cFileCount; i++)
			{
			CComPtr<IVssWMFiledesc> pFiledesc;

			CHECK_SUCCESS (pComponent->GetFile (i, &pFiledesc));

			PrintFiledesc (pFiledesc, L"        FileGroupFile");
			}
		    }

		if (pInfo->cDatabases > 0)
		    {
		    for(i = 0; i < pInfo->cDatabases; i++)
			{
			CComPtr<IVssWMFiledesc> pFiledesc;

			CHECK_SUCCESS (pComponent->GetDatabaseFile (i, &pFiledesc));

			PrintFiledesc (pFiledesc, L"        DatabaseFile");
			}
		    }


		if (pInfo->cLogFiles > 0)
		    {
		    for(i = 0; i < pInfo->cLogFiles; i++)
			{
			CComPtr<IVssWMFiledesc> pFiledesc;

			CHECK_SUCCESS (pComponent->GetDatabaseLogFile (i, &pFiledesc));

			PrintFiledesc (pFiledesc, L"        DatabaseLogFile");
			}
		    }

		pComponent->FreeComponentInfo (pInfo);
		}



	    VSS_RESTOREMETHOD_ENUM method;
	    CComBSTR bstrUserProcedure;
	    CComBSTR bstrService;
	    VSS_WRITERRESTORE_ENUM writerRestore;
	    unsigned cMappings;
	    bool bRebootRequired;

	    CHECK_NOFAIL (pMetadata->GetRestoreMethod (&method,
						       &bstrService,
						       &bstrUserProcedure,
						       &writerRestore,
						       &bRebootRequired,
						       &cMappings));


	    wprintf (L"\n"
		     L"    Restore method = %d (%s)\n"
		     L"    Service        = %d\n"
		     L"    User Procedure = %s\n"
		     L"    WriterRestore  = %d (%s)\n"
		     L"    RebootRequired = %s\n",
		     method,
		     GetStringFromRestoreMethod (method),
		     bstrService,
		     bstrUserProcedure,
		     writerRestore,
		     GetStringFromWriterRestoreMethod (writerRestore),
		     bRebootRequired ? L"yes" : L"no");

	    for(i = 0; i < cMappings; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS (pMetadata->GetAlternateLocationMapping (i, &pFiledesc));

		PrintFiledesc (pFiledesc, L"    AlternateMapping");
		}
	    }


	CHECK_SUCCESS (pvbc->FreeWriterMetadata());
	}
    catch(...)
	{
	hr = E_UNEXPECTED;
	}


    if (FAILED(hr))             wprintf (L"Failed with 0x%08X.\n", hr);
    if (bCoInitializeSucceeded) CoUninitialize();

    return (0);
    }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\mptest\writer\cwriter.h ===
//
//  ATL debugging support turned on at debug version
//  BUGBUG: the ATL thunking support is not enable yet in IA64
//  When this will be enabled then enable it here also!
//
#ifdef _DEBUG
#ifdef _M_IX86
#define _ATL_DEBUG_INTERFACES
#define _ATL_DEBUG_QI
#define _ATL_DEBUG_REFCOUNT
#endif
#endif // _DEBUG

class CTestVssWriter : public CVssWriter
	{
public:
	void Initialize();

	virtual bool STDMETHODCALLTYPE OnIdentify(IN IVssCreateWriterMetadata *pMetadata);

	virtual bool STDMETHODCALLTYPE OnPrepareBackup(IN IVssWriterComponents *pComponent);

	virtual bool STDMETHODCALLTYPE OnPrepareSnapshot();

	virtual bool STDMETHODCALLTYPE OnFreeze();

	virtual bool STDMETHODCALLTYPE OnThaw();

	virtual bool STDMETHODCALLTYPE OnAbort();

	virtual bool STDMETHODCALLTYPE OnBackupComplete(IN IVssWriterComponents *pComponent);

	virtual bool STDMETHODCALLTYPE OnPostRestore(IN IVssWriterComponents *pComponent);
	};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\mptest\writer\cwriter.cpp ===
#include "stdafx.hxx"
#include "vss.h"
#include "vswriter.h"
#include "cwriter.h"
#include "debug.h"
#include "time.h"
#include "msxml.h"

#define IID_PPV_ARG( Type, Expr ) IID_##Type, reinterpret_cast< void** >( static_cast< Type** >( Expr ) )
#define SafeQI( Type, Expr ) QueryInterface( IID_PPV_ARG( Type, Expr ) )

static BYTE x_rgbIcon[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
static unsigned x_cbIcon = 10;


static VSS_ID s_WRITERID =
	{
	0xc0577ae6, 0xd741, 0x452a,
	0x8c, 0xba, 0x99, 0xd7, 0x44, 0x00, 0x8c, 0x05
	};

static LPCWSTR s_WRITERNAME = L"MP Test Writer";

void CTestVssWriter::Initialize()
	{
	CHECK_SUCCESS(CVssWriter::Initialize
					(
					s_WRITERID,
					s_WRITERNAME,
					VSS_UT_USERDATA,
					VSS_ST_OTHER
					));
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnIdentify(IN IVssCreateWriterMetadata *pMetadata)
	{
	CHECK_SUCCESS(pMetadata->AddIncludeFiles
					(
					L"%systemroot%\\config",
					L"mytestfiles.*",
					false,
					NULL
					));

    CHECK_SUCCESS(pMetadata->AddExcludeFiles
						(
						L"%systemroot%\\config",
						L"*.tmp",
						true
						));

    CHECK_SUCCESS(pMetadata->AddComponent
						(
						VSS_CT_DATABASE,
						L"\\mydatabases",
						L"db1",
						L"this is my main database",
						x_rgbIcon,
						x_cbIcon,
						true,
						true,
						true
						));

    CHECK_SUCCESS(pMetadata->AddDatabaseFiles
					(
					L"\\mydatabases",
					L"db1",
					L"e:\\databases",
					L"foo.db"
					));

    CHECK_SUCCESS(pMetadata->AddDatabaseLogFiles
					(
					L"\\mydatabases",
					L"db1",
					L"e:\\logs",
					L"foo.log"
					));

    CHECK_SUCCESS(pMetadata->SetRestoreMethod
					(
					VSS_RME_RESTORE_TO_ALTERNATE_LOCATION,
					NULL,
					NULL,
					VSS_WRE_ALWAYS,
					true
					));

    CHECK_SUCCESS(pMetadata->AddAlternateLocationMapping
					(
					L"c:\\databases",
					L"*.db",
					false,
					L"e:\\databases\\restore"
					));

    CHECK_SUCCESS(pMetadata->AddAlternateLocationMapping
					(
					L"d:\\logs",
					L"*.log",
					false,
					L"e:\\databases\\restore"
					));


	return true;
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnPrepareBackup(IN IVssWriterComponents *pWriterComponents)
	{
	unsigned cComponents;
	LPCWSTR wszBackupType;
	switch(GetBackupType())
		{
		default:
			wszBackupType = L"undefined";
			break;

		case VSS_BT_FULL:
			wszBackupType = L"full";
			break;

        case VSS_BT_INCREMENTAL:
			wszBackupType = L"incremental";
			break;

        case VSS_BT_DIFFERENTIAL:
			wszBackupType = L"differential";
			break;

        case VSS_BT_OTHER:
			wszBackupType = L"other";
			break;
		}

	wprintf(L"\n\n****WRITER*****\nBackup Type = %s\n", wszBackupType);

	wprintf
		(
		L"AreComponentsSelected = %s\n",
		AreComponentsSelected() ? L"yes" : L"no"
		);

	wprintf
		(
		L"BootableSystemStateBackup = %s\n\n",
		IsBootableSystemStateBackedUp() ? L"yes" : L"no"
		);

	if (pWriterComponents)
		{
		pWriterComponents->GetComponentCount(&cComponents);
		for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
			{
			CComPtr<IVssComponent> pComponent;
			VSS_COMPONENT_TYPE ct;
			CComBSTR bstrLogicalPath;
			CComBSTR bstrComponentName;


			CHECK_SUCCESS(pWriterComponents->GetComponent(iComponent, &pComponent));
			CHECK_SUCCESS(pComponent->GetLogicalPath(&bstrLogicalPath));
			CHECK_SUCCESS(pComponent->GetComponentType(&ct));
			CHECK_SUCCESS(pComponent->GetComponentName(&bstrComponentName));
			if (ct != VSS_CT_DATABASE)
				{
				wprintf(L"component type is incorrect\n");
				DebugBreak();
				}

			wprintf
				(
				L"Backing up database %s\\%s.\n",
				bstrLogicalPath,
				bstrComponentName
				);

            WCHAR buf[100];

			swprintf (buf, L"backupTime = %d", (INT) time(NULL));

			CHECK_SUCCESS(pComponent->SetBackupMetadata(buf));
			wprintf(L"%s\n", buf);
			}
		}

	wprintf(L"\n******END WRITER******\n\n");
	return true;
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnPrepareSnapshot()
	{
	wprintf(L"OnPrepareSnapshot\n");
	return true;
	}


bool STDMETHODCALLTYPE CTestVssWriter::OnFreeze()
	{
	wprintf(L"OnFreeze\n");
	return true;
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnThaw()
	{
	wprintf(L"OnThaw\n");
	return true;
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnBackupComplete(IN IVssWriterComponents *pWriterComponents)
	{
	unsigned cComponents;
	if (pWriterComponents == NULL)
		return true;

	pWriterComponents->GetComponentCount(&cComponents);
	for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
		{
		CComPtr<IVssComponent> pComponent;
		VSS_COMPONENT_TYPE ct;
		CComBSTR bstrLogicalPath;
		CComBSTR bstrComponentName;
		bool bBackupSucceeded;

		CHECK_SUCCESS(pWriterComponents->GetComponent(iComponent, &pComponent));
		CHECK_SUCCESS(pComponent->GetLogicalPath(&bstrLogicalPath));
		CHECK_SUCCESS(pComponent->GetComponentType(&ct));
		CHECK_SUCCESS(pComponent->GetComponentName(&bstrComponentName));
		CHECK_SUCCESS(pComponent->GetBackupSucceeded(&bBackupSucceeded));
		if (ct != VSS_CT_DATABASE)
			{
			wprintf(L"component type is incorrect\n");
			DebugBreak();
			}

		wprintf
			(
			L"Database %s\\%s backup %s.\n",
			bstrLogicalPath,
			bstrComponentName,
			bBackupSucceeded ? L"succeeded" : L"failed"
			);

        CComBSTR bstrMetadata;
		CHECK_SUCCESS(pComponent->GetBackupMetadata(&bstrMetadata));
		wprintf(L"%s\n", bstrMetadata);
		}

	return true;
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnPostRestore(IN IVssWriterComponents *pComponent)
	{
	UNREFERENCED_PARAMETER(pComponent);
	return true;
	}

bool STDMETHODCALLTYPE CTestVssWriter::OnAbort()
	{
	return true;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\mptest\writer\debug.h ===
inline void CHECK_SUCCESS(HRESULT hr)
	{
	if (hr != S_OK)
		{
		wprintf(L"operation failed with HRESULT=%08x\n", hr);
		DebugBreak();
		}
	}

inline void CHECK_NOFAIL(HRESULT hr)
	{
	if (FAILED(hr))
		{
		wprintf(L"operation failed with HRESULT=%08x\n", hr);
		DebugBreak();
		}
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\shimtest\shimtest.cpp ===
/*++

Copyright (c) 2000-2001  Microsoft Corporation

Module Name:

    client.cpp

Abstract:

    Test program to drive the VSS Writer Shim contained in VssAPI.DLL

Author:

    Stefan R. Steiner   [ssteiner]        01-30-2000

Revision History:

--*/

/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <windows.h>
#include <wtypes.h>
#include <stddef.h>
#include <stdio.h>
#include <objbase.h>

#include <vss.h>

typedef HRESULT ( APIENTRY *PFUNC_RegisterSnapshotSubscriptions )( void );
typedef HRESULT ( APIENTRY *PFUNC_UnregisterSnapshotSubscriptions )( void );
typedef HRESULT ( APIENTRY *PFUNC_SimulateSnapshotFreeze )( PWCHAR pwszSnapshotSetId, PWCHAR pwszVolumeNamesList );
typedef HRESULT ( APIENTRY *PFUNC_SimulateSnapshotThaw )( PWCHAR pwszSnapshotSetId );



static BOOL AssertPrivilege( LPCWSTR privName );

/////////////////////////////////////////////////////////////////////////////
//  WinMain

extern "C" int __cdecl wmain( int argc, WCHAR *argv[] )
{
    HINSTANCE hInstLib;
    PFUNC_RegisterSnapshotSubscriptions pFnRegisterSS;
    PFUNC_UnregisterSnapshotSubscriptions pFnUnregisterSS;
    HRESULT hr;

    if ( !AssertPrivilege( SE_BACKUP_NAME ) )
    {
        wprintf( L"AssertPrivilege returned error, rc:%d\n", GetLastError() );
        return 2;
    }

    hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
    if ( FAILED( hr ) )
    {
        wprintf( L"CoInitialize() returned rc:%d\n", GetLastError() );
        return 1;
    }

    //  Get a handle to the DLL module
    hInstLib = LoadLibrary( L"VssAPI.dll" );

    if ( hInstLib != NULL )
    {
        pFnRegisterSS = ( PFUNC_RegisterSnapshotSubscriptions )GetProcAddress( hInstLib, "RegisterSnapshotSubscriptions" );
        if ( pFnRegisterSS != NULL )
            wprintf( L"pFnRegisterSS returned: 0x%08x\n", ( pFnRegisterSS )() );
        else
            wprintf( L"Couldn't import RegisterSnapshotSubscriptions function, rc:%d\n", GetLastError() );

        wprintf( L"\nPress return to continue...\n" );
        getchar();
        wprintf( L"continuing...\n" );

        pFnUnregisterSS = ( PFUNC_UnregisterSnapshotSubscriptions )GetProcAddress( hInstLib, "UnregisterSnapshotSubscriptions" );
        if ( pFnUnregisterSS != NULL )
            wprintf( L"pFnUnregisterSS returned: 0x%08x\n", ( pFnUnregisterSS )() );
        else
            wprintf( L"Couldn't import UnregisterSnapshotSubscriptions function, rc:%d\n", GetLastError() );

        FreeLibrary( hInstLib );
    }
    else
        printf( "LoadLibrary error, rc:%d\n", GetLastError() );


    // Uninitialize COM library
    CoUninitialize();

    return 0;

    UNREFERENCED_PARAMETER( argv );
    UNREFERENCED_PARAMETER( argc );
}


static BOOL AssertPrivilege( LPCWSTR privName )
{
    HANDLE  tokenHandle;
    BOOL    stat = FALSE;

    if ( OpenProcessToken( GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES, &tokenHandle ) )
    {
        LUID value;

        if ( LookupPrivilegeValue( NULL, privName, &value ) )
        {
            TOKEN_PRIVILEGES newState;
            DWORD            error;

            newState.PrivilegeCount           = 1;
            newState.Privileges[0].Luid       = value;
            newState.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

            /*
            * We will always call GetLastError below, so clear
            * any prior error values on this thread.
            */
            SetLastError( ERROR_SUCCESS );

            stat =  AdjustTokenPrivileges(
                tokenHandle,
                FALSE,
                &newState,
                (DWORD)0,
                NULL,
                NULL );
            /*
            * Supposedly, AdjustTokenPriveleges always returns TRUE
            * (even when it fails). So, call GetLastError to be
            * extra sure everything's cool.
            */
            if ( (error = GetLastError()) != ERROR_SUCCESS )
            {
                stat = FALSE;
            }

            if ( !stat )
            {
                wprintf( L"AdjustTokenPrivileges for %s failed with %d",
                    privName,
                    error );
            }
        }
        CloseHandle( tokenHandle );
    }
    return stat;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\sqltest\main.cpp ===
// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <stdio.h>


#include "vss.h"
#include "vswriter.h"
#include "sqlsnap.h"
#include "sqlwriter.h"

DWORD g_dwMainThreadId;

/////////////////////////////////////////////////////////////////////////////
//  Control-C handler routine


BOOL WINAPI CtrlC_HandlerRoutine(
	IN DWORD /* dwType */
	)
	{
	// End the message loop
	if (g_dwMainThreadId != 0)
		PostThreadMessage(g_dwMainThreadId, WM_QUIT, 0, 0);

	// Mark that the break was handled.
	return TRUE;
	}

CVssSqlWriterWrapper g_Wrapper;

extern "C" int __cdecl wmain(HINSTANCE /*hInstance*/,
    HINSTANCE /*hPrevInstance*/, LPTSTR /*lpCmdLine*/, int /*nShowCmd*/)
	{
	int nRet = 0;

    try
		{
    	// Preparing the CTRL-C handling routine - only for testing...
		g_dwMainThreadId = GetCurrentThreadId();
		::SetConsoleCtrlHandler(CtrlC_HandlerRoutine, TRUE);

        // Initialize COM library
        HRESULT hr = CoInitializeEx(NULL, COINIT_MULTITHREADED);
        if (FAILED(hr))
			throw hr;

		// Declare a CVssTSubWriter instance
		hr = g_Wrapper.CreateSqlWriter();
		if (FAILED(hr))
			throw hr;

        // message loop - need for STA server
        MSG msg;
        while (GetMessage(&msg, 0, 0, 0))
            DispatchMessage(&msg);

		// Subscribe the object.
		g_Wrapper.DestroySqlWriter();

        // Uninitialize COM library
        CoUninitialize();
		}
	catch(...)
		{
		}

    return nRet;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\mptest\writer\main.cpp ===
#include "stdafx.hxx"
#include "vss.h"
#include "vswriter.h"
#include <debug.h>
#include <cwriter.h>

CComModule _Module;

HANDLE g_hEvent = NULL;


BOOL WINAPI CtrlCHandler(DWORD type)
	{
	wprintf(L"Control handler called.\n");
	if (g_hEvent)
        SetEvent(g_hEvent);

	return TRUE;
	}


BOOL AssertPrivilege( LPCWSTR privName )
    {
    HANDLE  tokenHandle;
    BOOL    stat = FALSE;

    if ( OpenProcessToken (GetCurrentProcess(),
			   TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY,
			   &tokenHandle))
	{
	LUID value;

	if ( LookupPrivilegeValue( NULL, privName, &value ) )
	    {
	    TOKEN_PRIVILEGES newState;
	    DWORD            error;

	    newState.PrivilegeCount           = 1;
	    newState.Privileges[0].Luid       = value;
	    newState.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED_BY_DEFAULT|SE_PRIVILEGE_ENABLED;

	    /*
	     * We will always call GetLastError below, so clear
	     * any prior error values on this thread.
	     */
	    SetLastError( ERROR_SUCCESS );

	    stat = AdjustTokenPrivileges (tokenHandle,
					  FALSE,
					  &newState,
					  (DWORD)0,
					  NULL,
					  NULL );

	    /*
	     * Supposedly, AdjustTokenPriveleges always returns TRUE
	     * (even when it fails). So, call GetLastError to be
	     * extra sure everything's cool.
	     */
	    if ( (error = GetLastError()) != ERROR_SUCCESS )
		{
		stat = FALSE;
		}

	    if ( !stat )
		{
		wprintf( L"AdjustTokenPrivileges for %s failed with %d",
			 privName,
			 error );
		}
	    }

	DWORD cbTokens;
	GetTokenInformation (tokenHandle,
			     TokenPrivileges,
			     NULL,
			     0,
			     &cbTokens);

	TOKEN_PRIVILEGES *pTokens = (TOKEN_PRIVILEGES *) new BYTE[cbTokens];
	GetTokenInformation (tokenHandle,
			     TokenPrivileges,
			     pTokens,
			     cbTokens,
			     &cbTokens);

	delete pTokens;
	CloseHandle( tokenHandle );
	}


    return stat;
    }



extern "C" __cdecl wmain(int argc, WCHAR **argv)
	{
	CTestVssWriter *pInstance;
	bool bCreated = false;
	bool bSubscribed = false;
	HRESULT hr = S_OK;
	SetConsoleCtrlHandler(CtrlCHandler, TRUE);
	BS_ASSERT(FALSE);
			
	try
		{
        CHECK_SUCCESS(CoInitializeEx(NULL, COINIT_MULTITHREADED));

	    if ( !AssertPrivilege( SE_BACKUP_NAME ) )
	        {
	        wprintf( L"AssertPrivilege returned error, rc:%d\n", GetLastError() );
	        return 2;
	        }


        CHECK_SUCCESS
		(
		CoInitializeSecurity
			(
			NULL,                                //  IN PSECURITY_DESCRIPTOR         pSecDesc,
			-1,                                  //  IN LONG                         cAuthSvc,
			NULL,                                //  IN SOLE_AUTHENTICATION_SERVICE *asAuthSvc,
			NULL,                                //  IN void                        *pReserved1,
			RPC_C_AUTHN_LEVEL_CONNECT,           //  IN DWORD                        dwAuthnLevel,
			RPC_C_IMP_LEVEL_IMPERSONATE,         //  IN DWORD                        dwImpLevel,
			NULL,                                //  IN void                        *pAuthList,
			EOAC_NONE,                           //  IN DWORD                        dwCapabilities,
			NULL                                 //  IN void                        *pReserved3
			)
		);


		pInstance = new CTestVssWriter;
		if (pInstance == NULL)
			{
			wprintf(L"allocation failure\n");
			DebugBreak();
			}

		bCreated = true;
		pInstance->Initialize();
		pInstance->Subscribe();
		bSubscribed = true;
		HANDLE hEventW = CreateEvent(NULL, TRUE, FALSE, L"TESTWRITEREVENT");
		if (hEventW == NULL)
			{
			wprintf(L"CreateEvent failed with error %d.\n", GetLastError());
			DebugBreak();
			}

		g_hEvent = hEventW;

		wprintf(L"Ready to receive events.\n");

		HANDLE hEventB = CreateEvent(NULL, TRUE, FALSE, L"TESTBACKUPEVENT");
		if (hEventB == NULL)
			{
			wprintf(L"CreateEvent failed with error %d.\n", GetLastError());
			DebugBreak();
			}

		SetEvent(hEventB);
		WaitForSingleObject(hEventW, INFINITE);
		}
	catch(...)
		{
		_ASSERTE(FALSE && "Unexpected exception");
		hr = E_UNEXPECTED;
		}

	SetConsoleCtrlHandler(CtrlCHandler, FALSE);
	if (bSubscribed)
		CHECK_SUCCESS(pInstance->Unsubscribe());

	if (bCreated)
		delete pInstance;

	if (FAILED(hr))
		wprintf(L"Failed with %08x.\n", hr);

	return(0);
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\psub\psub.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module psub.h | Declaration of the permanent subscriber
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created
    mikejohn	09/18/2000  176860: Added calling convention methods where missing

--*/


#ifndef __VSS_PSUB_WRITER_H_
#define __VSS_PSUB_WRITER_H_


#ifdef _DEBUG
#define _ATL_DEBUG_INTERFACES
#define _ATL_DEBUG_QI
#define _ATL_DEBUG_REFCOUNT
#endif // _DEBUG


/////////////////////////////////////////////////////////////////////////////
//  globals

extern GUID CLSID_PSub;


/////////////////////////////////////////////////////////////////////////////
// CVssWriter


class CVssPSubWriter :
	public CComCoClass<CVssPSubWriter, &CLSID_PSub>,
	public CVssWriter
{

// Constructors and destructors
public:
	CVssPSubWriter();

// ATL stuff
public:

	DECLARE_REGISTRY_RESOURCEID(IDR_VSS_PSUB)

// Ovverides
public:

	virtual bool STDMETHODCALLTYPE OnPrepareSnapshot();

	virtual bool STDMETHODCALLTYPE OnFreeze();

	virtual bool STDMETHODCALLTYPE OnThaw();

	virtual bool STDMETHODCALLTYPE OnAbort();

};


#endif //__VSS_PSUB_WRITER_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\psub\psub.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module psub.cpp | Implementation of Writer
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created
    aoltean	09/22/1999  Making console output clearer
    mikejohn	09/19/2000  176860: Added calling convention methods where missing

--*/


/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <comadmin.h>

#include "vs_assert.hxx"

// ATL
#include <atlconv.h>
#include <atlbase.h>
extern CComModule _Module;
#include <atlcom.h>

#include "vs_inc.hxx"

#include "vss.h"

#include "comadmin.hxx"
#include "vsevent.h"
#include "vswriter.h"
#include "resource.h"

#include "psub.h"


/////////////////////////////////////////////////////////////////////////////
//  constants

const WCHAR g_wszPSubApplicationName[]	= L"PSub";
const MAX_BUFFER = 1024;


// {621D30C6-EC47-4b66-A91A-D3FA03472FCA}
GUID CLSID_PSub =
{ 0x621d30c6, 0xec47, 0x4b66, { 0xa9, 0x1a, 0xd3, 0xfa, 0x3, 0x47, 0x2f, 0xca } };



CVssPSubWriter::CVssPSubWriter()
	{
	Initialize
		(
		CLSID_PSub,
		L"PSUB",
		VSS_UT_USERDATA,
		VSS_ST_OTHER
		);
    }



/////////////////////////////////////////////////////////////////////////////
//  class CVssPSubWriter

bool STDMETHODCALLTYPE CVssPSubWriter::OnPrepareSnapshot()
{
	WCHAR wszBuffer[MAX_BUFFER];
	WCHAR wszBuffer2[MAX_BUFFER];
	
	swprintf( wszBuffer, L"OnPrepare\n\t#volumes = %ld\n", GetCurrentVolumeCount() );
	for(int nIndex = 0; nIndex < GetCurrentVolumeCount(); nIndex++) {
		swprintf( wszBuffer2, L"\tVolume no. %ld: %s\n", nIndex, GetCurrentVolumeArray()[nIndex]);
		wcscat( wszBuffer, wszBuffer2 );
	}

	WCHAR wszPwd[MAX_PATH];
	DWORD dwChars = GetCurrentDirectoryW( MAX_PATH, wszPwd);

	bool bPwdIsAffected = IsPathAffected( wszPwd );
	if (dwChars > 0) {
		swprintf( wszBuffer2, L"Current directory %s is affected by snapshot? %s\n\n",
			wszPwd, bPwdIsAffected? L"Yes": L"No");
		wcscat( wszBuffer, wszBuffer2 );
	}

	MessageBoxW( NULL, wszBuffer, L"Writer test", MB_OK | MB_SERVICE_NOTIFICATION );

	return true;
}


bool STDMETHODCALLTYPE CVssPSubWriter::OnFreeze()
{
	WCHAR wszBuffer[MAX_BUFFER];
	swprintf( wszBuffer, L"OnFreeze\n\tmy level = %d\n\n", GetCurrentLevel() );

	MessageBoxW( NULL, wszBuffer, L"Writer test", MB_OK | MB_SERVICE_NOTIFICATION );

	return true;
}


bool STDMETHODCALLTYPE CVssPSubWriter::OnThaw()
{
	MessageBoxW( NULL, L"OnThaw", L"Writer test", MB_OK | MB_SERVICE_NOTIFICATION );

	return true;
}


bool STDMETHODCALLTYPE CVssPSubWriter::OnAbort()
{
	MessageBoxW( NULL, L"OnAbort", L"Writer test", MB_OK | MB_SERVICE_NOTIFICATION );

	return true;
}


/////////////////////////////////////////////////////////////////////////////
//  DLL methods

CComModule _Module;

BEGIN_OBJECT_MAP(ObjectMap)
	OBJECT_ENTRY(CLSID_PSub, CVssPSubWriter)
END_OBJECT_MAP()

/////////////////////////////////////////////////////////////////////////////
// DLL Entry Point
extern "C"
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
        //  Set the correct tracing context. This is an inproc DLL
        g_cDbgTrace.SetContextNum(VSS_CONTEXT_DELAYED_DLL);

        //  initialize COM module
        _Module.Init(ObjectMap, hInstance);

        //  optimization
        DisableThreadLibraryCalls(hInstance);
    }
    else if (dwReason == DLL_PROCESS_DETACH)
        _Module.Term();

    return TRUE;    // ok
}


/////////////////////////////////////////////////////////////////////////////
// Used to determine whether the DLL can be unloaded by OLE
STDAPI DllCanUnloadNow(void)
{
    return (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
}

/////////////////////////////////////////////////////////////////////////////
// Returns a class factory to create an object of the requested type
STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
{
    return _Module.GetClassObject(rclsid, riid, ppv);
}

/////////////////////////////////////////////////////////////////////////////
// DllRegisterServer - Adds entries to the system registry
STDAPI DllRegisterServer(void)
{
    return _Module.RegisterServer(TRUE);
}

/////////////////////////////////////////////////////////////////////////////
// DllUnregisterServer - Removes entries from the system registry
STDAPI DllUnregisterServer(void)
{
    _Module.UnregisterServer();
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\psub\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by writer.rc
//
#define IDS_PROJNAME                    100
#define IDR_Writer_1                    100
#define IDR_VSS_PSUB           			101

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        201
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\snapcp\snapcp.cpp ===
/*
**++
**
** Copyright (c) 2000-2001  Microsoft Corporation
**
**
** Module Name:
**
**	SnapCp.cpp
**
**
** Abstract:
**
**	Test program to accept commands and drive the snapshot stuff
**
**
** Author:
**
**	Michael C. Johnson   [mikejohn]        15-Mar-2001
**
**	Based in part on test programs :-
**		BETEST		by Brian Berkowitz
**		metasnap	by Michael C. Johnson
**
**
** Revision History:
**
**	X-3			Michael C. Johnson		 7-May-2001
**		Still more updates needed to keep up.
**
**	X-2			Michael C. Johnson		11-Apr-2001
**		Update to cater for recent changes to AddToSnapshotSet() API
**		Also clean up a few 64 bit compilation troubles.
**
**
**
** ToDo:
**	Allow for multiple (simultaneous) snapshot sets
**	Assign drive letters (manual and automatically) (mapping?)
**	Proper error handling
**	Better user feedback for operation in progress...
**	Logging
**	Default drive list
**	Comma separated drive list
**	Command line prompt
**	auto add all local hard drives
**
**--
*/

#include <windows.h>
#include <wtypes.h>
#include <stddef.h>
#include <stdlib.h>
#include <stdio.h>
#include <time.h>
#include <string.h>

#include <vss.h>
#include <vswriter.h>
#include <vsbackup.h>


#include <oleauto.h>

#define ATLASSERT(_condition)

#include <atlconv.h>
#include <atlbase.h>

extern CComModule _Module;
#include <atlcom.h>



#define	PROGRAM_TITLE				L"SnapCp - Snapshot Control Program V0.3"


#if !defined (SIZEOF_ARRAY)
#define SIZEOF_ARRAY(_arrayname)		(sizeof (_arrayname) / sizeof ((_arrayname)[0]))
#endif

#define MAX_COMMAND				(SIZEOF_ARRAY (CommandTable))
#define MAX_COMMAND_LINE_LENGTH			(1024)
#define MAX_VOLUMES_IN_SNAPSHOT_SET		(64)
#define VolumeNameTemplate			"\\\\?\\Volume{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}\\"



#define HandleInvalid(_Handle)			((NULL == (_Handle)) || (INVALID_HANDLE_VALUE == (_Handle)))

#define	GET_STATUS_FROM_BOOL(_bSucceeded)	((_bSucceeded)             ? NOERROR : HRESULT_FROM_WIN32 (GetLastError()))
#define GET_STATUS_FROM_HANDLE(_handle)		((!HandleInvalid(_handle)) ? NOERROR : HRESULT_FROM_WIN32 (GetLastError()))
#define GET_STATUS_FROM_POINTER(_ptr)		((NULL != (_ptr))          ? NOERROR : E_OUTOFMEMORY)



typedef	IVssBackupComponents		*PIVssBackupComponents;
typedef IVssExamineWriterMetadata	*PIVssExamineWriterMetadata;
typedef IVssWMComponent			*PIVssWMComponent;
typedef IVssAsync			*PIVssAsync;



typedef enum _SnapshotSetState
    {
     STATE_MIN_STATE = 50
    ,STATE_INITIALISED
    ,STATE_SNAPSHOT_SET_CREATED
    ,STATE_SNAPSHOT_CREATED
    ,STATE_SNAPSHOT_BEING_DESTROYED
    ,STATE_UNKNOWN
    ,STATE_MAX_STATE
    } SNAPSHOTSET_STATE, *PSNAPSHOTSET_STATE;

typedef enum _CommandCode
    {
     COMMAND_MIN_COMMAND = 20
    ,COMMAND_QUIT
    ,COMMAND_EXIT
    ,COMMAND_HELP
    ,COMMAND_SHOW_METADATA
    ,COMMAND_SHOW_WRITERS
    ,COMMAND_ADD_VOLUME
    ,COMMAND_CREATE_SNAPSHOT_SET
    ,COMMAND_CREATE_SNAPSHOT
    ,COMMAND_DELETE_SNAPSHOT_SET
    ,COMMAND_SET_DEFAULT_VOLUME_LIST
    ,COMMAND_SET_BACKUP_TYPE
    ,COMMAND_SET_LOGGING_LEVEL
    ,COMMAND_SET_LOGGING_FILE
    ,COMMAND_NOT_IMPLEMENTED
    ,COMMAND_UNKNOWN
    ,COMMAND_MAX_COMMAND
    } COMMAND_CODE, *PCOMMAND_CODE;


typedef struct _CommandDescriptor
    {
    COMMAND_CODE	eCommandCode;
    PWCHAR		pwszCommandString;
    } COMMANDDESCRIPTOR, *PCOMMANDDESCRIPTOR;



typedef struct _ContextSnapshotSet
    {
    COMMAND_CODE		eCommand;
    SNAPSHOTSET_STATE		eState;
    bool			bIncludeBootableState;
    ULONG			ulVolumesInSnapshotSet;
    PWSTR			pwszVolumeArgument [MAX_VOLUMES_IN_SNAPSHOT_SET];
    PWSTR			pwszVolumeName     [MAX_VOLUMES_IN_SNAPSHOT_SET];
    PWSTR			pwszVolumeDevice   [MAX_VOLUMES_IN_SNAPSHOT_SET];
    PWSTR			pwszSnapshotDevice [MAX_VOLUMES_IN_SNAPSHOT_SET];
    VSS_ID		        SnapshotId         [MAX_VOLUMES_IN_SNAPSHOT_SET];
    VSS_SNAPSHOT_PROP		SnapshotProperties [MAX_VOLUMES_IN_SNAPSHOT_SET];

    PIVssBackupComponents	pIVssBackupComponents;
    PIVssAsync			pIVssAsyncDoSnapshotSet;

    GUID			guidSnapshotSetId;
    } CONTEXTSNAPSHOTSET, *PCONTEXTSNAPSHOTSET;







inline void CHECK_SUCCESS (HRESULT hr);
inline void CHECK_NOFAIL  (HRESULT hr);


BOOL WINAPI CtrlC_HandlerRoutine (DWORD dwCtrlType);

HRESULT AssertPrivilege (LPCWSTR privName);

ULONG FormatGUID (GUID guidValue, PWCHAR pszFormattedGUID, ULONG ulBufferLength);
void PrintFiledesc (IVssWMFiledesc *pFiledesc, LPCWSTR wszDescription);

LPCWSTR GetStringFromUsageType           (VSS_USAGE_TYPE         eUsageType);
LPCWSTR GetStringFromSourceType          (VSS_SOURCE_TYPE        eSourceType);
LPCWSTR GetStringFromRestoreMethod       (VSS_RESTOREMETHOD_ENUM eRestoreMethod);
LPCWSTR GetStringFromWriterRestoreMethod (VSS_WRITERRESTORE_ENUM eWriterRestoreMethod);
LPCWSTR GetStringFromComponentType       (VSS_COMPONENT_TYPE     eComponentType);
LPCWSTR GetStringFromFailureType         (HRESULT hrStatus);


HRESULT GetNextCommandLine (PWSTR pwszCommandLineBuffer, ULONG ulCommandLineBufferLength);
HRESULT ParseCommandLine   (PWSTR pwszCommandLineBuffer, PCOMMAND_CODE peReturnedCommandCode);

HRESULT InitialiseSnapshotSetContext (PCONTEXTSNAPSHOTSET pctxSnapshotSet);
HRESULT GetVolumeNameFromArgument (LPCWSTR pwszVolumeArgument, LPWSTR *ppwszReturnedVolumeName);


HRESULT ShowAnnouncement   (void);
HRESULT ShowHelp           (void);
HRESULT ShowMetadata       (void);
HRESULT ShowWriters        (void);
HRESULT AddVolume          (PCONTEXTSNAPSHOTSET pctxSnapshotSet);
HRESULT CreateSnapshotSet  (PCONTEXTSNAPSHOTSET pctxSnapshotSet);
HRESULT CreateSnapshot     (PCONTEXTSNAPSHOTSET pctxSnapshotSet);
HRESULT DeleteSnapshot     (PCONTEXTSNAPSHOTSET pctxSnapshotSet);
HRESULT CleanupSnapshotSet (PCONTEXTSNAPSHOTSET pctxSnapshotSet);






COMMANDDESCRIPTOR CommandTable [] = 
    {
    { COMMAND_QUIT,                    L"Quit"     },
    { COMMAND_EXIT,                    L"Exit"     },
    { COMMAND_HELP,                    L"Help"     },
    { COMMAND_SHOW_METADATA,           L"Metadata" },
    { COMMAND_SHOW_WRITERS,            L"Writers"  },
    { COMMAND_ADD_VOLUME,              L"Add"      },
    { COMMAND_CREATE_SNAPSHOT_SET,     L"Set"      },
    { COMMAND_CREATE_SNAPSHOT,         L"Create"   },
    { COMMAND_DELETE_SNAPSHOT_SET,     L"Delete"   },
    { COMMAND_SET_DEFAULT_VOLUME_LIST, L"Default"  },
    { COMMAND_SET_BACKUP_TYPE,         L"Type"     },
    { COMMAND_SET_LOGGING_LEVEL,       L"Level"    },
    { COMMAND_SET_LOGGING_FILE,        L"File"     }
    };


WCHAR			g_awchCommandLine [MAX_COMMAND_LINE_LENGTH];
PWCHAR			g_pwchNextArgument       = NULL;
PCONTEXTSNAPSHOTSET	g_pctxSnapshotSet        = NULL;
BOOL			g_bCoInitializeSucceeded = false;





extern "C" __cdecl wmain(int argc, WCHAR **argv)
    {
    HRESULT		hrStatus        = NOERROR;
    PCONTEXTSNAPSHOTSET	pctxSnapshotSet = NULL;
    CONTEXTSNAPSHOTSET	ctxSnapshotSet;


    UNREFERENCED_PARAMETER (argc);
    UNREFERENCED_PARAMETER (argv);



    InitialiseSnapshotSetContext (&ctxSnapshotSet);

    g_pctxSnapshotSet = &ctxSnapshotSet;


    SetConsoleCtrlHandler (CtrlC_HandlerRoutine, TRUE);



    ShowAnnouncement ();

    hrStatus = CoInitializeEx (NULL, COINIT_MULTITHREADED);

    g_bCoInitializeSucceeded = SUCCEEDED (hrStatus);

    if (FAILED (hrStatus))
	{
	wprintf (L"SnapCp (wmain) - CoInitializeEx() returned error 0x%08X\n", hrStatus);
	}



    if (SUCCEEDED (hrStatus))
	{
	hrStatus = AssertPrivilege (SE_BACKUP_NAME);

	if (FAILED (hrStatus))
	    {
	    wprintf (L"SnapCp (wmain) - AssertPrivilege() returned error 0x%08X\n", hrStatus);
	    }
	}



    /*
    ** Parse command loop here
    */
    while (SUCCEEDED (hrStatus) && 
	   (COMMAND_EXIT != ctxSnapshotSet.eCommand) && 
	   (COMMAND_QUIT != ctxSnapshotSet.eCommand))
	{
	hrStatus = GetNextCommandLine (g_awchCommandLine, sizeof (g_awchCommandLine));
 	hrStatus = ParseCommandLine (g_awchCommandLine, &ctxSnapshotSet.eCommand);

	switch (ctxSnapshotSet.eCommand)
	    {
	    case COMMAND_EXIT:                                                                    break;
	    case COMMAND_QUIT:                                                                    break;
	    case COMMAND_HELP:                    hrStatus = ShowHelp          ();                break;
	    case COMMAND_SHOW_METADATA:           hrStatus = ShowMetadata      ();                break;
	    case COMMAND_SHOW_WRITERS:            hrStatus = ShowWriters       ();                break;
	    case COMMAND_CREATE_SNAPSHOT_SET:     hrStatus = CreateSnapshotSet (&ctxSnapshotSet); break;
	    case COMMAND_ADD_VOLUME:              hrStatus = AddVolume         (&ctxSnapshotSet); break;
	    case COMMAND_CREATE_SNAPSHOT:         hrStatus = CreateSnapshot    (&ctxSnapshotSet); break;
	    case COMMAND_DELETE_SNAPSHOT_SET:     hrStatus = DeleteSnapshot    (&ctxSnapshotSet); break;

	    case COMMAND_SET_DEFAULT_VOLUME_LIST:
	    case COMMAND_SET_BACKUP_TYPE:
	    case COMMAND_SET_LOGGING_LEVEL:
	    case COMMAND_SET_LOGGING_FILE:

	    default:
		ctxSnapshotSet.eCommand = COMMAND_UNKNOWN;
		break;
	    }
	}



    pctxSnapshotSet = (PCONTEXTSNAPSHOTSET) InterlockedExchangePointer ((PVOID *)&g_pctxSnapshotSet, NULL);

    if (NULL != pctxSnapshotSet)   CleanupSnapshotSet (pctxSnapshotSet);
    if (g_bCoInitializeSucceeded)  CoUninitialize ();
    if (FAILED(hrStatus))          wprintf (L"Failed with 0x%08X.\n", hrStatus);

    return (0);
    }
	



BOOL WINAPI CtrlC_HandlerRoutine (DWORD dwCtrlType)
    {
    PCONTEXTSNAPSHOTSET	pctxSnapshotSet = NULL;


    UNREFERENCED_PARAMETER (dwCtrlType);


    pctxSnapshotSet = (PCONTEXTSNAPSHOTSET) InterlockedExchangePointer ((PVOID *)&g_pctxSnapshotSet, NULL);

    if (NULL != pctxSnapshotSet)   CleanupSnapshotSet (pctxSnapshotSet);
    if (g_bCoInitializeSucceeded)  CoUninitialize ();


    return (false);
    }




HRESULT AssertPrivilege (LPCWSTR privName)
    {
    HRESULT		 hrStatus   = NOERROR;
    BOOL		 bSucceeded = FALSE;
    TOKEN_PRIVILEGES	*pTokens    = NULL;
    TOKEN_PRIVILEGES	 newState;
    HANDLE		 tokenHandle;
    LUID		 value;
    DWORD		 cbTokens;


    if (OpenProcessToken (GetCurrentProcess(),
			  TOKEN_ADJUST_PRIVILEGES|TOKEN_QUERY,
			  &tokenHandle))
	{
	if (LookupPrivilegeValue (NULL, privName, &value))
	    {
	    newState.PrivilegeCount            = 1;
	    newState.Privileges [0].Luid       = value;
	    newState.Privileges [0].Attributes = SE_PRIVILEGE_ENABLED_BY_DEFAULT|SE_PRIVILEGE_ENABLED;


	    /*
	    ** We will always call GetLastError below, so clear
	    ** any prior error values on this thread.
	    */
	    SetLastError (ERROR_SUCCESS);

	    bSucceeded = AdjustTokenPrivileges (tokenHandle,
						FALSE,
						&newState,
						(DWORD)0,
						NULL,
						NULL);

	    /*
	    ** Supposedly, AdjustTokenPriveleges always returns TRUE
	    ** (even when it fails). So, call GetLastError to be
	    ** extra sure everything's cool.
	    */
	    hrStatus = GET_STATUS_FROM_BOOL (FALSE);


	    if (FAILED (hrStatus))
		{
		wprintf (L"AdjustTokenPrivileges for %s failed with 0x%08X",
			 privName,
			 hrStatus);
		}
	    }


	if (SUCCEEDED (hrStatus))
	    {
	    GetTokenInformation (tokenHandle,
				 TokenPrivileges,
				 NULL,
				 0,
				 &cbTokens);


	    pTokens = (TOKEN_PRIVILEGES *) new BYTE[cbTokens];

	    GetTokenInformation (tokenHandle,
				 TokenPrivileges,
				 pTokens,
				 cbTokens,
				 &cbTokens);
	    }

	delete pTokens;
	CloseHandle (tokenHandle);
	}


    return (hrStatus);
    }




inline void CHECK_SUCCESS (HRESULT hr)
    {
    if (hr != S_OK)
	{
	wprintf(L"operation failed with HRESULT =0x%08x\n", hr);
	DebugBreak();
	}
    }


inline void CHECK_NOFAIL (HRESULT hr)
    {
    if (FAILED(hr))
	{
	wprintf(L"operation failed with HRESULT =0x%08x\n", hr);
	DebugBreak();
	}
    }




LPCWSTR GetStringFromUsageType (VSS_USAGE_TYPE eUsageType)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eUsageType)
	{
	case VSS_UT_BOOTABLESYSTEMSTATE: pwszRetString = L"BootableSystemState"; break;
	case VSS_UT_SYSTEMSERVICE:       pwszRetString = L"SystemService";       break;
	case VSS_UT_USERDATA:            pwszRetString = L"UserData";            break;
	case VSS_UT_OTHER:               pwszRetString = L"Other";               break;
					
	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromSourceType (VSS_SOURCE_TYPE eSourceType)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eSourceType)
	{
	case VSS_ST_TRANSACTEDDB:    pwszRetString = L"TransactionDb";    break;
	case VSS_ST_NONTRANSACTEDDB: pwszRetString = L"NonTransactionDb"; break;
	case VSS_ST_OTHER:           pwszRetString = L"Other";            break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromRestoreMethod (VSS_RESTOREMETHOD_ENUM eRestoreMethod)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eRestoreMethod)
	{
	case VSS_RME_RESTORE_IF_NOT_THERE:          pwszRetString = L"RestoreIfNotThere";          break;
	case VSS_RME_RESTORE_IF_CAN_REPLACE:        pwszRetString = L"RestoreIfCanReplace";        break;
	case VSS_RME_STOP_RESTORE_START:            pwszRetString = L"StopRestoreStart";           break;
	case VSS_RME_RESTORE_TO_ALTERNATE_LOCATION: pwszRetString = L"RestoreToAlternateLocation"; break;
	case VSS_RME_RESTORE_AT_REBOOT:             pwszRetString = L"RestoreAtReboot";            break;
	case VSS_RME_CUSTOM:                        pwszRetString = L"Custom";                     break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromWriterRestoreMethod (VSS_WRITERRESTORE_ENUM eWriterRestoreMethod)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eWriterRestoreMethod)
	{
	case VSS_WRE_NEVER:            pwszRetString = L"RestoreNever";           break;
	case VSS_WRE_IF_REPLACE_FAILS: pwszRetString = L"RestoreIfReplaceFailsI"; break;
	case VSS_WRE_ALWAYS:           pwszRetString = L"RestoreAlways";          break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromComponentType (VSS_COMPONENT_TYPE eComponentType)
    {
    LPCWSTR pwszRetString = L"UNDEFINED";

    switch (eComponentType)
	{
	case VSS_CT_DATABASE:  pwszRetString = L"Database";  break;
	case VSS_CT_FILEGROUP: pwszRetString = L"FileGroup"; break;

	default:
	    break;
	}


    return (pwszRetString);
    }


LPCWSTR GetStringFromFailureType (HRESULT hrStatus)
    {
    LPCWSTR pwszFailureType;

    switch (hrStatus)
	{
	case NOERROR:                                pwszFailureType = L"";                     break;
	case VSS_E_WRITERERROR_INCONSISTENTSNAPSHOT: pwszFailureType = L"InconsistentSnapshot"; break;
	case VSS_E_WRITERERROR_OUTOFRESOURCES:       pwszFailureType = L"OutOfResources";       break;
	case VSS_E_WRITERERROR_TIMEOUT:              pwszFailureType = L"Timeout";              break;
	case VSS_E_WRITERERROR_NONRETRYABLE:         pwszFailureType = L"Non-Retryable";        break;
	case VSS_E_WRITERERROR_RETRYABLE:            pwszFailureType = L"Retryable";            break;
	default:                                     pwszFailureType = L"UNDEFINED";            break;
	}

    return (pwszFailureType);
    }


/*
** {XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX} 
*/
ULONG FormatGUID (GUID guidValue, PWCHAR pszFormattedGUID, ULONG ulBufferLength)
    {
    DWORD	dwStatus = 0;


    if (sizeof (L"{XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX}") > ulBufferLength)
	{
	dwStatus = ERROR_INSUFFICIENT_BUFFER;
	}


    if (0 == dwStatus)
	{
	_snwprintf (pszFormattedGUID, 
		    ulBufferLength / sizeof (WCHAR), 
		    L"{%08x-%04x-%04x-%02x%02x-%02x%02x%02x%02x%02x%02x}",
		    guidValue.Data1,
		    guidValue.Data2,
		    guidValue.Data3,
		    guidValue.Data4[0],
		    guidValue.Data4[1],
		    guidValue.Data4[2],
		    guidValue.Data4[3],
		    guidValue.Data4[4],
		    guidValue.Data4[5],
		    guidValue.Data4[6],
		    guidValue.Data4[7]);
	}


    return (dwStatus);
    }


void PrintFiledesc (IVssWMFiledesc *pFiledesc, LPCWSTR wszDescription)
    {
    CComBSTR bstrPath;
    CComBSTR bstrFilespec;
    CComBSTR bstrAlternate;
    bool     bRecursive;


    CHECK_SUCCESS (pFiledesc->GetPath (&bstrPath));
    CHECK_SUCCESS (pFiledesc->GetFilespec (&bstrFilespec));
    CHECK_NOFAIL  (pFiledesc->GetRecursive (&bRecursive));
    CHECK_NOFAIL  (pFiledesc->GetAlternateLocation (&bstrAlternate));

    wprintf (L"%s\n            Path = %s, Filespec = %s, Recursive = %s\n",
	     wszDescription,
	     bstrPath,
	     bstrFilespec,
	     bRecursive ? L"yes" : L"no");

    if (bstrAlternate && wcslen (bstrAlternate) > 0)
	{
	wprintf(L"            Alternate Location = %s\n", bstrAlternate);
	}
    }




HRESULT GetNextCommandLine (PWSTR pwszCommandLineBuffer, ULONG ulCommandLineBufferLength)
    {
    UNREFERENCED_PARAMETER (pwszCommandLineBuffer);
    UNREFERENCED_PARAMETER (ulCommandLineBufferLength);


    g_pwchNextArgument = NULL;

    _getws (pwszCommandLineBuffer);


    return (NOERROR);
    }



HRESULT ParseCommandLine (PWSTR pwszCommandLineBuffer, PCOMMAND_CODE peReturnedCommandCode)
    {
    ULONG		ulIndexCommandTable;
    COMMAND_CODE	eCommandCode = COMMAND_UNKNOWN;


    for (ulIndexCommandTable = 0; 
	 (ulIndexCommandTable < MAX_COMMAND) && (COMMAND_UNKNOWN == eCommandCode);
	 ulIndexCommandTable++)
	{
	if (0 == _wcsnicmp (pwszCommandLineBuffer, 
			    CommandTable [ulIndexCommandTable].pwszCommandString,
			    wcslen (CommandTable [ulIndexCommandTable].pwszCommandString)))
	    {
	    size_t ulCommandStringLength = wcslen (CommandTable [ulIndexCommandTable].pwszCommandString);

	    eCommandCode = CommandTable [ulIndexCommandTable].eCommandCode;

	    if ((pwszCommandLineBuffer [ulCommandStringLength + 0] == ' ') &&
		(pwszCommandLineBuffer [ulCommandStringLength + 1] != '\0'))
		{
		g_pwchNextArgument = &pwszCommandLineBuffer [ulCommandStringLength + 1];
		}
	    }
	}
	

    *peReturnedCommandCode = eCommandCode;

    return (NOERROR);
    }





HRESULT InitialiseSnapshotSetContext (PCONTEXTSNAPSHOTSET pctxSnapshotSet)
    {
    HRESULT	hrStatus = NOERROR;
    ULONG	ulIndex;


    pctxSnapshotSet->eCommand                = COMMAND_UNKNOWN;
    pctxSnapshotSet->bIncludeBootableState   = false;
    pctxSnapshotSet->ulVolumesInSnapshotSet  = 0;
    pctxSnapshotSet->pIVssBackupComponents   = NULL;
    pctxSnapshotSet->pIVssAsyncDoSnapshotSet = NULL;
    pctxSnapshotSet->guidSnapshotSetId       = GUID_NULL;

    for (ulIndex = 0; ulIndex < SIZEOF_ARRAY (pctxSnapshotSet->pwszVolumeName); ulIndex++)
	{
	pctxSnapshotSet->pwszVolumeArgument [ulIndex]              = NULL;
	pctxSnapshotSet->pwszVolumeName     [ulIndex]              = NULL;
	pctxSnapshotSet->pwszVolumeDevice   [ulIndex]              = NULL;
	pctxSnapshotSet->pwszSnapshotDevice [ulIndex]              = NULL;
	pctxSnapshotSet->SnapshotProperties [ulIndex].m_SnapshotId = GUID_NULL;
	pctxSnapshotSet->SnapshotId         [ulIndex]              = GUID_NULL;
	}


    pctxSnapshotSet->eState = STATE_INITIALISED;


    return (hrStatus);
    }



HRESULT CleanupSnapshotSet (PCONTEXTSNAPSHOTSET pctxSnapshotSet)
    {
    HRESULT	hrStatus = NOERROR;
    ULONG	ulIndex;


    pctxSnapshotSet->eState = STATE_SNAPSHOT_BEING_DESTROYED;


    if (GUID_NULL != pctxSnapshotSet->guidSnapshotSetId)
	{
	hrStatus = pctxSnapshotSet->pIVssBackupComponents->AbortBackup ();

	hrStatus = pctxSnapshotSet->pIVssBackupComponents->DeleteSnapshots (pctxSnapshotSet->guidSnapshotSetId,
									    VSS_OBJECT_SNAPSHOT_SET,
									    true,
									    NULL,
									    NULL);
	}

    for (ulIndex = 0; ulIndex < pctxSnapshotSet->ulVolumesInSnapshotSet; ulIndex++)
	{
	if (NULL != pctxSnapshotSet->pwszVolumeArgument [ulIndex]) 
	    {
	    free (pctxSnapshotSet->pwszVolumeArgument [ulIndex]);
	    }

	if (NULL != pctxSnapshotSet->pwszVolumeName [ulIndex])
	    {
	    free (pctxSnapshotSet->pwszVolumeName [ulIndex]);
	    }

	if (NULL != pctxSnapshotSet->pwszVolumeDevice [ulIndex])
	    {
	    free (pctxSnapshotSet->pwszVolumeDevice [ulIndex]);
	    }

	if (NULL != pctxSnapshotSet->pwszSnapshotDevice [ulIndex])
	    {
	    CoTaskMemFree (pctxSnapshotSet->pwszSnapshotDevice [ulIndex]);
	    }

	if (GUID_NULL != pctxSnapshotSet->SnapshotProperties [ulIndex].m_SnapshotId)
	    {
	    VssFreeSnapshotProperties (&pctxSnapshotSet->SnapshotProperties [ulIndex]);
	    }
	}


    if (NULL != pctxSnapshotSet->pIVssBackupComponents)   pctxSnapshotSet->pIVssBackupComponents->Release ();
    if (NULL != pctxSnapshotSet->pIVssAsyncDoSnapshotSet) pctxSnapshotSet->pIVssAsyncDoSnapshotSet->Release ();


    InitialiseSnapshotSetContext (pctxSnapshotSet);



    return (hrStatus);
    }



HRESULT GetVolumeNameFromArgument (LPCWSTR pwszVolumeArgument, LPWSTR *ppwszReturnedVolumeName)
    {
    HRESULT	hrStatus                   = NOERROR;
    PWCHAR	pwszPath                   = NULL;
    PWCHAR	pwszMountPointName         = NULL;
    PWCHAR	pwszVolumeName             = NULL;
    ULONG	ulPathLength               = 0;
    ULONG	ulMountpointBufferLength   = 0;
    BOOL	bSucceeded                 = FALSE;
    ULONG	ulVolumeNameCharacterCount = sizeof (VolumeNameTemplate);



    pwszVolumeName = (PWCHAR) calloc (ulVolumeNameCharacterCount, sizeof (WCHAR));

    bSucceeded = (NULL != pwszVolumeName);


    if (bSucceeded)
	{
	ulPathLength = ExpandEnvironmentStringsW (pwszVolumeArgument, NULL, 0);

	pwszPath = (PWCHAR) calloc (ulPathLength, sizeof (WCHAR));

	bSucceeded = (NULL != pwszPath);
	}


    if (bSucceeded)
	{
	ulPathLength = ExpandEnvironmentStringsW (pwszVolumeArgument, pwszPath, ulPathLength);

	ulMountpointBufferLength = GetFullPathName (pwszPath, 0, NULL, NULL);

	pwszMountPointName = (PWCHAR) calloc (ulMountpointBufferLength, sizeof (WCHAR));

	bSucceeded = (NULL != pwszMountPointName);
	}


    if (bSucceeded)
	{
	bSucceeded = GetVolumePathNameW (pwszPath, pwszMountPointName, ulMountpointBufferLength);
	}


    if (bSucceeded)
	{
	bSucceeded = GetVolumeNameForVolumeMountPointW (pwszMountPointName, 
							pwszVolumeName, 
							ulVolumeNameCharacterCount);
	}


    if (bSucceeded)
	{
	*ppwszReturnedVolumeName = pwszVolumeName;
	pwszVolumeName = NULL;
	}


    hrStatus = GET_STATUS_FROM_BOOL (bSucceeded);

    if (NULL != pwszPath)           free (pwszPath);
    if (NULL != pwszMountPointName) free (pwszMountPointName);
    if (NULL != pwszVolumeName)     free (pwszVolumeName);


    return (hrStatus);
    }






HRESULT ShowMetadata (void)
    {
    HRESULT	hr = NOERROR;

    try
	{
	unsigned cWriters;
	CComBSTR bstrXML;
	CComBSTR bstrXMLOut;
	CComBSTR strSnapshotSetId = "12345678-1234-1234-1234-1234567890ab";
	CComPtr<IVssBackupComponents> pvbc;
	CComPtr<IVssAsync> pAsync;


	CHECK_SUCCESS (CreateVssBackupComponents (&pvbc));

	CHECK_SUCCESS (pvbc->InitializeForBackup  ());
	CHECK_SUCCESS (pvbc->SetBackupState       (true, false, VSS_BT_FULL));
	CHECK_NOFAIL  (pvbc->GatherWriterMetadata (&pAsync));
	CHECK_NOFAIL  (pAsync->Wait ());
	CHECK_NOFAIL  (pvbc->GetWriterMetadataCount (&cWriters));


	for (unsigned iWriter = 0; iWriter < cWriters; iWriter++)
	    {
	    CComPtr<IVssExamineWriterMetadata> pMetadata;

	    VSS_ID           idInstance;
	    VSS_ID           idInstanceT;
	    VSS_ID           idWriter;
	    CComBSTR         bstrWriterName;
	    VSS_USAGE_TYPE   usage;
	    VSS_SOURCE_TYPE  source;
	    WCHAR           *pwszInstanceId;
	    WCHAR           *pwszWriterId;
	    unsigned cIncludeFiles, cExcludeFiles, cComponents;
	    CComBSTR bstrPath;
	    CComBSTR bstrFilespec;
	    CComBSTR bstrAlternate;
	    CComBSTR bstrDestination;



	    CHECK_SUCCESS (pvbc->GetWriterMetadata(iWriter, &idInstance, &pMetadata));

	    CHECK_SUCCESS (pMetadata->GetIdentity (&idInstanceT,
						   &idWriter,
						   &bstrWriterName,
						   &usage,
						   &source));

	    wprintf (L"\n\n");

            if (memcmp (&idInstance, &idInstanceT, sizeof(VSS_ID)) != 0)
		{
		wprintf(L"Instance id mismatch\n");
		DebugBreak();
		}


	    UuidToString (&idInstance, &pwszInstanceId);
	    UuidToString (&idWriter,   &pwszWriterId);

	    wprintf (L"WriterName = %s\n\n"
		     L"    WriterId   = %s\n"
		     L"    InstanceId = %s\n"
		     L"    UsageType  = %d (%s)\n"
		     L"    SourceType = %d (%s)\n",
		     bstrWriterName,
		     pwszWriterId,
		     pwszInstanceId,
		     usage,
		     GetStringFromUsageType (usage),
		     source,
		     GetStringFromSourceType (source));

	    RpcStringFree (&pwszInstanceId);
	    RpcStringFree (&pwszWriterId);

	    CHECK_SUCCESS(pMetadata->GetFileCounts (&cIncludeFiles,
						    &cExcludeFiles,
						    &cComponents));

	    for(unsigned i = 0; i < cIncludeFiles; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS (pMetadata->GetIncludeFile (i, &pFiledesc));

		PrintFiledesc(pFiledesc, L"\n    Include File");
		}


	    for(i = 0; i < cExcludeFiles; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS (pMetadata->GetExcludeFile (i, &pFiledesc));

		PrintFiledesc (pFiledesc, L"\n    Exclude File");
		}


	    for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
		{
		CComPtr<IVssWMComponent> pComponent;
		PVSSCOMPONENTINFO pInfo;

		CHECK_SUCCESS (pMetadata->GetComponent      (iComponent, &pComponent));
		CHECK_SUCCESS (pComponent->GetComponentInfo (&pInfo));

		wprintf (L"\n"
			 L"    Component %d, type = %d (%s)\n"
			 L"        LogicalPath = %s\n"
			 L"        Name        = %s\n"
			 L"        Caption     = %s\n",
			 iComponent,
			 pInfo->type,
			 GetStringFromComponentType (pInfo->type),
			 pInfo->bstrLogicalPath,
			 pInfo->bstrComponentName,
			 pInfo->bstrCaption);

					

                if (pInfo->cbIcon > 0)
		    {
		    if (pInfo->cbIcon != 10 ||
			pInfo->pbIcon[0] != 1 ||
			pInfo->pbIcon[1] != 2 ||
			pInfo->pbIcon[2] != 3 ||
			pInfo->pbIcon[3] != 4 ||
			pInfo->pbIcon[4] != 5 ||
			pInfo->pbIcon[5] != 6 ||
			pInfo->pbIcon[6] != 7 ||
			pInfo->pbIcon[7] != 8 ||
			pInfo->pbIcon[8] != 9 ||
			pInfo->pbIcon[9] != 10)
			{
			wprintf(L"        Icon is not valid.\n");
			DebugBreak();
			}
		    else
			wprintf(L"        Icon is valid.\n");
		    }

		wprintf (L"        RestoreMetadata        = %s\n"
			 L"        NotifyOnBackupComplete = %s\n"
			 L"        Selectable             = %s\n",
			 pInfo->bRestoreMetadata        ? L"yes" : L"no",
			 pInfo->bNotifyOnBackupComplete ? L"yes" : L"no",
			 pInfo->bSelectable             ? L"yes" : L"no");


		if (pInfo->cFileCount > 0)
		    {
		    for(i = 0; i < pInfo->cFileCount; i++)
			{
			CComPtr<IVssWMFiledesc> pFiledesc;

			CHECK_SUCCESS (pComponent->GetFile (i, &pFiledesc));

			PrintFiledesc (pFiledesc, L"        FileGroupFile");
			}
		    }

		if (pInfo->cDatabases > 0)
		    {
		    for(i = 0; i < pInfo->cDatabases; i++)
			{
			CComPtr<IVssWMFiledesc> pFiledesc;

			CHECK_SUCCESS (pComponent->GetDatabaseFile (i, &pFiledesc));

			PrintFiledesc (pFiledesc, L"        DatabaseFile");
			}
		    }


		if (pInfo->cLogFiles > 0)
		    {
		    for(i = 0; i < pInfo->cLogFiles; i++)
			{
			CComPtr<IVssWMFiledesc> pFiledesc;

			CHECK_SUCCESS (pComponent->GetDatabaseLogFile (i, &pFiledesc));

			PrintFiledesc (pFiledesc, L"        DatabaseLogFile");
			}
		    }

		pComponent->FreeComponentInfo (pInfo);
		}



	    VSS_RESTOREMETHOD_ENUM method;
	    CComBSTR bstrUserProcedure;
	    CComBSTR bstrService;
	    VSS_WRITERRESTORE_ENUM writerRestore;
	    unsigned cMappings;
	    bool bRebootRequired;

	    CHECK_NOFAIL (pMetadata->GetRestoreMethod (&method,
						       &bstrService,
						       &bstrUserProcedure,
						       &writerRestore,
						       &bRebootRequired,
						       &cMappings));


	    wprintf (L"\n"
		     L"    Restore method = %d (%s)\n"
		     L"    Service        = %d\n"
		     L"    User Procedure = %s\n"
		     L"    WriterRestore  = %d (%s)\n"
		     L"    RebootRequired = %s\n",
		     method,
		     GetStringFromRestoreMethod (method),
		     bstrService,
		     bstrUserProcedure,
		     writerRestore,
		     GetStringFromWriterRestoreMethod (writerRestore),
		     bRebootRequired ? L"yes" : L"no");

	    for(i = 0; i < cMappings; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS (pMetadata->GetAlternateLocationMapping (i, &pFiledesc));

		PrintFiledesc (pFiledesc, L"    AlternateMapping");
		}
	    }


	CHECK_SUCCESS (pvbc->FreeWriterMetadata());
	}

    catch(...)
	{
	hr = E_UNEXPECTED;
	}


    if (FAILED(hr)) wprintf (L"Failed with 0x%08X.\n", hr);

    return (hr);
    }




HRESULT ShowWriters (void)
    {
    HRESULT	hr = NOERROR;

    try
	{
	unsigned cWriters;
	CComBSTR bstrXML;
	CComBSTR bstrXMLOut;
	CComBSTR strSnapshotSetId = "12345678-1234-1234-1234-1234567890ab";
	CComPtr<IVssBackupComponents> pvbc;
	CComPtr<IVssAsync> pIVssAsync;


	CHECK_SUCCESS (CreateVssBackupComponents (&pvbc));

	CHECK_SUCCESS (pvbc->InitializeForBackup  ());
	CHECK_SUCCESS (pvbc->SetBackupState       (true, false, VSS_BT_FULL));
	CHECK_NOFAIL  (pvbc->GatherWriterMetadata (&pIVssAsync));
	CHECK_NOFAIL  (pIVssAsync->Wait ());
	CHECK_NOFAIL  (pvbc->GetWriterMetadataCount (&cWriters));


	for (unsigned iWriter = 0; iWriter < cWriters; iWriter++)
	    {
	    CComPtr<IVssExamineWriterMetadata> pMetadata;

	    VSS_ID           idInstance;
	    VSS_ID           idInstanceT;
	    VSS_ID           idWriter;
	    CComBSTR         bstrWriterName;
	    VSS_USAGE_TYPE   usage;
	    VSS_SOURCE_TYPE  source;
	    WCHAR           *pwszInstanceId;
	    WCHAR           *pwszWriterId;
	    CComBSTR	 bstrPath;
	    CComBSTR bstrFilespec;
	    CComBSTR bstrAlternate;
	    CComBSTR bstrDestination;



	    CHECK_SUCCESS (pvbc->GetWriterMetadata(iWriter, &idInstance, &pMetadata));

	    CHECK_SUCCESS (pMetadata->GetIdentity (&idInstanceT,
						   &idWriter,
						   &bstrWriterName,
						   &usage,
						   &source));

	    wprintf (L"\n\n");

            if (memcmp (&idInstance, &idInstanceT, sizeof(VSS_ID)) != 0)
		{
		wprintf(L"Instance id mismatch\n");
		DebugBreak();
		}


	    UuidToString (&idInstance, &pwszInstanceId);
	    UuidToString (&idWriter,   &pwszWriterId);

	    wprintf (L"WriterName = %s\n\n"
		     L"    WriterId   = %s\n"
		     L"    InstanceId = %s\n"
		     L"    UsageType  = %d (%s)\n"
		     L"    SourceType = %d (%s)\n",
		     bstrWriterName,
		     pwszWriterId,
		     pwszInstanceId,
		     usage,
		     GetStringFromUsageType (usage),
		     source,
		     GetStringFromSourceType (source));

	    RpcStringFree (&pwszInstanceId);
	    RpcStringFree (&pwszWriterId);
	    }


	CHECK_SUCCESS (pvbc->FreeWriterMetadata());
	}
    catch(...)
	{
	hr = E_UNEXPECTED;
	}


    if (FAILED(hr)) wprintf (L"Failed with 0x%08X.\n", hr);

    return (hr);
    }




HRESULT ShowAnnouncement (void)
    {
    wprintf (L"\n"
	     L"\t%s\n\n"
	     L"\t\n",
	     PROGRAM_TITLE);


    return (NOERROR);
    }



HRESULT ShowHelp (void)
    {
    wprintf (L"\n\n"
	     L"\t%s\n\n"
	     L"\t\n"
	     L"\t    Commands:\n"
	     L"\t\n"
	     L"\t        help\n"
	     L"\t        exit\n"
	     L"\t        quit\n"
	     L"\t        metadata\n"
	     L"\t        writers\n"
	     L"\t        set\n"
	     L"\t        add\n"
	     L"\t        create\n"
	     L"\t        delete\n"
	     L"\t\n"
	     L"\t\n"
	     L"\tOnce the snapshots are created use DosDev to map a drive letter to\n"
	     L"\tthe snapshot devices for convenient access\n"
	     L"\t\n"
	     L"\te.g. DosDev u: \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeSnapshot1\n"
	     L"\t\n",
	     PROGRAM_TITLE);


    return (NOERROR);
    }







HRESULT CreateSnapshotSet (PCONTEXTSNAPSHOTSET pctxSnapshotSet)
    {
    HRESULT	hrStatus = NOERROR;
    PIVssAsync  pIVssAsync;


    hrStatus = CreateVssBackupComponents (&pctxSnapshotSet->pIVssBackupComponents);

    hrStatus = pctxSnapshotSet->pIVssBackupComponents->InitializeForBackup ();


    hrStatus = pctxSnapshotSet->pIVssBackupComponents->GatherWriterMetadata (&pIVssAsync);
    hrStatus = pIVssAsync->Wait ();
    hrStatus = pIVssAsync->QueryStatus (&hrStatus, NULL);


    hrStatus = pctxSnapshotSet->pIVssBackupComponents->SetBackupState (true, 
								       pctxSnapshotSet->bIncludeBootableState, 
								       VSS_BT_FULL);

    hrStatus = pctxSnapshotSet->pIVssBackupComponents->StartSnapshotSet (&pctxSnapshotSet->guidSnapshotSetId);


    if (SUCCEEDED (hrStatus))
	{
	WCHAR awchGuidBuffer [65];


	FormatGUID (pctxSnapshotSet->guidSnapshotSetId,
		    awchGuidBuffer,
		    sizeof (awchGuidBuffer));

	wprintf (L"Created snapshot set %s\n\n", awchGuidBuffer);

	pctxSnapshotSet->eState = STATE_SNAPSHOT_SET_CREATED;
	}

    else
	{
	wprintf (L"ERROR - Unable to create snapshot set (0x%08X)\n\n", hrStatus);
	}


    return (hrStatus);
    }



HRESULT AddVolume (PCONTEXTSNAPSHOTSET pctxSnapshotSet)
    {
    HRESULT	hrStatus         = NOERROR;
    size_t	ulArgumentLength = 0;
    ULONG	ulIndexVolume    = 0;
    BOOL	bSupported       = FALSE;


    if (STATE_SNAPSHOT_SET_CREATED != pctxSnapshotSet->eState)
	{
	wprintf (L"ERROR - Unable to add volumes add this time (%d)\n\n", pctxSnapshotSet->eState);
	}


    else if (pctxSnapshotSet->ulVolumesInSnapshotSet >= SIZEOF_ARRAY (pctxSnapshotSet->pwszVolumeArgument))
	{
	wprintf (L"ERROR - Maximum number of volumes already present in snapshot set\n\n");
	}


    else if ((NULL != g_pwchNextArgument) && (ulArgumentLength = wcslen (g_pwchNextArgument)) > 0)
	{
	ulIndexVolume = pctxSnapshotSet->ulVolumesInSnapshotSet;

	pctxSnapshotSet->pwszVolumeArgument [ulIndexVolume] = (PWSTR) calloc (ulArgumentLength + 1, sizeof (WCHAR));

	wcscpy (pctxSnapshotSet->pwszVolumeArgument [ulIndexVolume], g_pwchNextArgument);

	hrStatus = GetVolumeNameFromArgument (pctxSnapshotSet->pwszVolumeArgument [ulIndexVolume],
					      &pctxSnapshotSet->pwszVolumeName [ulIndexVolume]);

	hrStatus = pctxSnapshotSet->pIVssBackupComponents->IsVolumeSupported (GUID_NULL, 
									      pctxSnapshotSet->pwszVolumeName [ulIndexVolume], 
									      &bSupported);

	if (bSupported)
	    {
	    hrStatus = pctxSnapshotSet->pIVssBackupComponents->AddToSnapshotSet (pctxSnapshotSet->pwszVolumeName [ulIndexVolume],
										 GUID_NULL, 
										 &pctxSnapshotSet->SnapshotId [ulIndexVolume]);

	    if (SUCCEEDED (hrStatus))
		{
		pctxSnapshotSet->ulVolumesInSnapshotSet++;

		wprintf (L"Added volume '%s' (%s) to snapshot set\n\n",
			 pctxSnapshotSet->pwszVolumeName     [ulIndexVolume],
			 pctxSnapshotSet->pwszVolumeArgument [ulIndexVolume]);
		}

	    else
		{
		wprintf (L"ERROR - Unable to add volume '%s' (%s) to snapshot set (0x%08X)\n\n",
			 pctxSnapshotSet->pwszVolumeName     [ulIndexVolume],
			 pctxSnapshotSet->pwszVolumeArgument [ulIndexVolume],
			 hrStatus);
		}
	    }
	}


    else
	{
	wprintf (L"ERROR - Missing argument\n\n");
	}




    return (hrStatus);
    }


HRESULT CreateSnapshot (PCONTEXTSNAPSHOTSET pctxSnapshotSet)
    {
    HRESULT	hrStatus      = NOERROR;
    ULONG	ulIndexVolume = 0;
    PIVssAsync  pIVssAsync;



    hrStatus = pctxSnapshotSet->pIVssBackupComponents->PrepareForBackup (&pIVssAsync);
    hrStatus = pIVssAsync->Wait ();
    hrStatus = pIVssAsync->QueryStatus (&hrStatus, NULL);


    /*
    ** Could check the status of all the writers at this point but we choose to press on regardless.
    */


    hrStatus = pctxSnapshotSet->pIVssBackupComponents->DoSnapshotSet (&pctxSnapshotSet->pIVssAsyncDoSnapshotSet);
    hrStatus = pctxSnapshotSet->pIVssAsyncDoSnapshotSet->Wait ();
    hrStatus = pctxSnapshotSet->pIVssAsyncDoSnapshotSet->QueryStatus (&hrStatus, NULL);


    /*
    ** Could check the status of all the writers at this point but we choose to press on regardless.
    */


    for (ulIndexVolume = 0; ulIndexVolume < pctxSnapshotSet->ulVolumesInSnapshotSet; ulIndexVolume++) 
	{
	hrStatus = pctxSnapshotSet->pIVssBackupComponents->GetSnapshotProperties (pctxSnapshotSet->SnapshotId [ulIndexVolume], 
										  &pctxSnapshotSet->SnapshotProperties [ulIndexVolume]);
	}



    wprintf (L"Created snapshots for the following volume%s:\n", 
	     pctxSnapshotSet->ulVolumesInSnapshotSet > 1 ? "s" : "");

    for (ulIndexVolume = 0; ulIndexVolume < pctxSnapshotSet->ulVolumesInSnapshotSet; ulIndexVolume++) 
	{
	wprintf (L"    %s for volume %s (%s)\n",
		 pctxSnapshotSet->SnapshotProperties [ulIndexVolume].m_pwszSnapshotDeviceObject,
		 pctxSnapshotSet->pwszVolumeName     [ulIndexVolume], // or SnapshotProperties [ulIndexVolume].m_pwszSnapshotOriginalVolumeName
		 pctxSnapshotSet->pwszVolumeArgument [ulIndexVolume]);
	}


    wprintf (L"\n");


    return (hrStatus);
    }


HRESULT DeleteSnapshot (PCONTEXTSNAPSHOTSET pctxSnapshotSet)
    {
    HRESULT	hrStatus = NOERROR;

    CleanupSnapshotSet (pctxSnapshotSet);


    return (hrStatus);
    }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\enum.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Enum.cxx | Implementation of class VSS_OBJECT_PROP_Manager
    @end

Author:

    Adi Oltean  [aoltean]  09/01/1999

Revision History:

    Name        Date        Comments
    aoltean     09/01/1999  Created
    aoltean     09/09/1999  dss -> vss
	aoltean		09/20/1999	VSS_OBJECT_PROP_Copy renamed as VSS_OBJECT_PROP_Manager
	aoltean		09/21/1999  Adding headers for the _Ptr class

--*/

/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include "resource.h"

#include "bsdebug.hxx"
#include "bsexcept.hxx"
#include "snap_gen.hxx"
#include "snap_err.hxx"

// Generated file from Coord.IDL
#include "vss.h"
#include "vscoordint.h"
#include "vsevent.h"
#include "vsprov.h"

#include "swprv.hxx"
#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"


// Static methods that define the Copy class
#include "copy.inl"
#include "pointer.inl"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\delete.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Delete.hxx | Declarations used by the Software Snapshot Provider interface
    @end

Author:

    Adi Oltean  [aoltean]   02/01/2000

Revision History:

    Name        Date        Comments

    aoltean     02/01/2000  Created.

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"
#include "provider.hxx"
#include "snapshot.hxx"


#include "ntddsnap.h"


/////////////////////////////////////////////////////////////////////////////
//  Implementation


STDMETHODIMP CVsTestProvider::DeleteSnapshots(
    IN      VSS_ID          SourceObjectId,
	IN      VSS_OBJECT_TYPE eSourceObjectType,
	IN		BOOL			bForceDelete,			
	OUT		LONG*			plDeletedSnapshots,		
	OUT		VSS_ID*			pNondeletedSnapshotID
    )

/*++

Description:

	This routine deletes all snapshots that match the proper filter criteria.
	If one snapshot fails to be deleted but other snapshots were deleted
	then pNondeletedSnapshotID must ve filled. Otherwise it must be GUID_NULL.

	At first error the deletion process stops.

	If snapshot set cannot be found then S_OK is returned.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::DeleteSnapshots" );

    try
    {
    	// Zero out parameters
		::VssZeroOut(plDeletedSnapshots);
		::VssZeroOut(pNondeletedSnapshotID);

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
				L"  SourceObjectId = " WSTR_GUID_FMT L"\n"
				L"  eSourceObjectType = %d\n"
				L"  bForceDelete = %d"
				L"  plDeletedSnapshots = %p"
				L"  pNondeletedSnapshotID = %p",
				GUID_PRINTF_ARG( SourceObjectId ),
				eSourceObjectType,
				bForceDelete,			
				plDeletedSnapshots,		
				pNondeletedSnapshotID
             	);

		// Check arguments
		BS_ASSERT(plDeletedSnapshots);
		if (plDeletedSnapshots == NULL)
			ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"plDeletedSnapshots == NULL");
		BS_ASSERT(pNondeletedSnapshotID);
		if (pNondeletedSnapshotID == NULL)
			ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"pNondeletedSnapshotID == NULL");

		// Delete snapshots based on the given filter
		switch(eSourceObjectType) {
		case VSS_OBJECT_SNAPSHOT_SET:
			// Delete all snapshots in the snapshot set
			ft.hr = InternalDeleteSnapshotSet(SourceObjectId,
						bForceDelete,
						plDeletedSnapshots,
						pNondeletedSnapshotID);
			break;
			
		case VSS_OBJECT_SNAPSHOT:
			// Delete the snapshot
			ft.hr = InternalDeleteSnapshot(SourceObjectId,
						bForceDelete);

			// Fill the out parameters
			if (ft.HrSucceeded())
				(*plDeletedSnapshots)++;
			else
				(*pNondeletedSnapshotID) = SourceObjectId;
				
			break;
			
		case VSS_OBJECT_VOLUME:
			// Delete all snapshots on the volume
			// bForceDelete ignored.
			ft.hr = InternalDeleteSnapshotOnVolume(SourceObjectId,
						plDeletedSnapshots,
						pNondeletedSnapshotID);
			break;
			
		default:
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"Incompatible type %d", eSourceObjectType);
		}
		
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


/////////////////////////////////////////////////////////////////////////////
// Internal methods


HRESULT CVsTestProvider::InternalDeleteSnapshotSet(
    IN      VSS_ID			SnapshotSetId,
	IN		BOOL			bForceDelete,			
	OUT		LONG*			plDeletedSnapshots,		
	OUT		VSS_ID*			pNondeletedSnapshotID
    )

/*++

Description:

	This routine deletes all snapshots in the snapshot set.
	If one snapshot fails to be deleted but other snapshots were deleted
	then pNondeletedSnapshotID must ve filled. Otherwise it must be GUID_NULL.

	At first error the deletion process stops.

	If snapshot set cannot be found then VSS_E_OBJECT_NOT_FOUND is returned.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::InternalDeleteSnapshotSet" );
	HANDLE hSearch = INVALID_HANDLE_VALUE;
	LPWSTR pwszSnapshotName = NULL;

    try
    {
		BS_ASSERT(*plDeletedSnapshots == 0);
		BS_ASSERT(*pNondeletedSnapshotID == GUID_NULL);

        // Trace
        ft.Trace( VSSDBG_SWPRV, L"SnapshotSetId = " WSTR_GUID_FMT,
					  GUID_PRINTF_ARG( SnapshotSetId ));

		// Enumerate snapshots through all the volumes
		CVssIOCTLChannel volumeIChannel;	// For enumeration of snapshots on a volume
		CVssIOCTLChannel volumeIChannel2;	// For snapshots deletion
		CVssIOCTLChannel snapshotIChannel;	// For snapshots attributes
		WCHAR wszVolumeName[MAX_PATH+1];
		bool bFirstVolume = true;
		bool bSnapshotSetFound = false;

		// Search for snapshots in all mounted volumes
		while(true) {
		
			// Get the volume name
			if (bFirstVolume) {
				hSearch = ::FindFirstVolumeW( wszVolumeName, MAX_PATH);
				if (hSearch == INVALID_HANDLE_VALUE)
					ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error on FindFirstVolume 0x%08lx", GetLastError());
				bFirstVolume = false;
			} else {
				if (!::FindNextVolumeW( hSearch, wszVolumeName, MAX_PATH) ) {
					if (GetLastError() == ERROR_NO_MORE_FILES)
						break;	// End of iteration
					else
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error on FindNextVolume 0x%08lx", GetLastError());
				}
			}

			// Eliminate the last backslash in order to open the volume
			EliminateLastBackslash(wszVolumeName);

			// Check if the snapshot(s) within this snapshot set is belonging to that volume
			// Open a IOCTL channel on that volume
			volumeIChannel.Open(ft, wszVolumeName);

			// Get the list of snapshots
			// If IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS not
			// supported then try with the next volume.

			ft.hr = volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS, false);
			if (ft.HrFailed()) {
				ft.hr = S_OK;
				continue;
			}

			// Get the length of snapshot names multistring
			ULONG ulMultiszLen;
			volumeIChannel.Unpack(ft, &ulMultiszLen);

#ifdef _DEBUG
			// Try to find the snapshot with the corresponding Id
			DWORD dwInitialOffset = volumeIChannel.GetCurrentOutputOffset();
#endif

			bool bFirstSnapshot = true;
			while(volumeIChannel.UnpackZeroString(ft, pwszSnapshotName)) {
				// Compose the snapshot name in a user-mode style
				WCHAR wszUserModeSnapshotName[MAX_PATH];
				if (::_snwprintf(wszUserModeSnapshotName, MAX_PATH - 1,
						L"\\\\?\\GLOBALROOT%s", pwszSnapshotName) < 0)
					ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Not enough memory." );
			
				// Open that snapshot and verify if it has our ID
				snapshotIChannel.Open(ft, wszUserModeSnapshotName);

				// Get the application buffer
				snapshotIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_APPLICATION_INFO);

				// Get the length of the application buffer
				ULONG ulLen;
				snapshotIChannel.Unpack(ft, &ulLen);

				if (ulLen == 0) {
					ft.Warning(VSSDBG_SWPRV, L"Warning: zero-size snapshot detected: %s", pwszSnapshotName);
					continue;
				}

				// Get the snapshot Id
				VSS_ID CurrentSnapshotId;
				snapshotIChannel.Unpack(ft, &CurrentSnapshotId);

				// Get the snapshot set Id
				VSS_ID CurrentSnapshotSetId;
				snapshotIChannel.Unpack(ft, &CurrentSnapshotSetId);

				// Check if this snapshot belongs to the snapshot set.
				if (SnapshotSetId != CurrentSnapshotSetId) {
					// Go to the next snapshot
					bFirstSnapshot = false;
					continue;
				}

				// We found a snapshot belonging to the set.
				bSnapshotSetFound = true;

				// Set in order to deal with failure cases
				(*pNondeletedSnapshotID) = CurrentSnapshotId;
				
				// We found a snapshot. Delete it if the first one or if bForceDelete is enabled.
				if (bFirstSnapshot) {
					// Open another IOCTL channel on that volume
					volumeIChannel2.Open(ft, wszVolumeName);

					// Delete the snapshot
					volumeIChannel2.Call(ft, IOCTL_VOLSNAP_DELETE_OLDEST_SNAPSHOT);
					
					(*plDeletedSnapshots)++;
				} else if (bForceDelete) {
					ft.Throw( VSSDBG_SWPRV, E_NOTIMPL, L"Not implemented since there are no multiple snapshots");
					// TBD: Enumerate again all previous snapshots and delete them including this snapshot
				}
				else
					ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"A snapshot cannot be deleted if is not the oldest one");
			}

#ifdef _DEBUG
			// Check if all strings were browsed correctly
			DWORD dwFinalOffset = volumeIChannel.GetCurrentOutputOffset();
			BS_ASSERT( dwFinalOffset - dwInitialOffset == ulMultiszLen);
#endif
		}

		if (!bSnapshotSetFound)
			ft.Throw( VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND, L"Snapshot set not found");
    }
    VSS_STANDARD_CATCH(ft)

	// Close the search handle, if needed
	if (hSearch != INVALID_HANDLE_VALUE) {
		if (!::FindVolumeClose(hSearch))
			ft.Trace( VSSDBG_SWPRV, L"Error while closing the search handle 0x%08lx", GetLastError());
	}

	// Delete the temporary snapshot name
	::VssFreeString(pwszSnapshotName);

	if (ft.HrSucceeded())
		(*pNondeletedSnapshotID) = GUID_NULL;

    return ft.hr;
}


HRESULT CVsTestProvider::InternalDeleteSnapshot(
    IN      VSS_ID			SnapshotId,
	IN		BOOL			bForceDelete
    )

/*++

Description:

	This routine deletes a snapshot.

	If snapshot cannot be found then VSS_E_OBJECT_NOT_FOUND is returned.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::InternalDeleteSnapshot" );
	HANDLE hSearch = INVALID_HANDLE_VALUE;
	LPWSTR pwszSnapshotName = NULL;

    try
    {
        // Trace
        ft.Trace( VSSDBG_SWPRV, L"SnapshotId = " WSTR_GUID_FMT L" bForceDelete = %d ",
					  GUID_PRINTF_ARG( SnapshotId ), bForceDelete );

		// Enumerate snapshots through all the volumes
		CVssIOCTLChannel volumeIChannel;	// For enumeration of snapshots on a volume
		CVssIOCTLChannel volumeIChannel2;	// For deletion of snapshots
		CVssIOCTLChannel snapshotIChannel;	// For snapshots attributes
		WCHAR wszVolumeName[MAX_PATH+1];
		bool bFirstVolume = true;
		bool bSnapshotFound = false;
		
		// Search for snapshots in all mounted volumes
		while(true) {
		
			// Get the volume name
			if (bFirstVolume) {
				hSearch = ::FindFirstVolumeW( wszVolumeName, MAX_PATH);
				if (hSearch == INVALID_HANDLE_VALUE)
					ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error on FindFirstVolume 0x%08lx", GetLastError());
				bFirstVolume = false;
			} else {
				if (!::FindNextVolumeW( hSearch, wszVolumeName, MAX_PATH) ) {
					if (GetLastError() == ERROR_NO_MORE_FILES)
						break;	// End of iteration
					else
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error on FindNextVolume 0x%08lx", GetLastError());
				}
			}

			// Eliminate the last backslash in order to open the volume
			EliminateLastBackslash(wszVolumeName);

			// Check if the snapshot(s) within this snapshot set is belonging to that volume
			// Open a IOCTL channel on that volume
			volumeIChannel.Open(ft, wszVolumeName);

			// Get the list of snapshots
			// If IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS not
			// supported then try with the next volume.
			ft.hr = volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS, false);
			if (ft.HrFailed()) {
				ft.hr = S_OK;
				continue;
			}

			// Get the length of snapshot names multistring
			ULONG ulMultiszLen;
			volumeIChannel.Unpack(ft, &ulMultiszLen);

			// Try to find the snapshot with the corresponding Id
			bool bFirstSnapshot = true;
			while(volumeIChannel.UnpackZeroString(ft, pwszSnapshotName)) {
				// Compose the snapshot name in a user-mode style
				WCHAR wszUserModeSnapshotName[MAX_PATH];
				if (::_snwprintf(wszUserModeSnapshotName, MAX_PATH - 1,
						L"\\\\?\\GLOBALROOT%s", pwszSnapshotName) < 0)
					ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Not enough memory." );
			
				// Open that snapshot and verify if it has our ID
				snapshotIChannel.Open(ft, wszUserModeSnapshotName);

				// Get the application buffer
				snapshotIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_APPLICATION_INFO);

				// Get the length of the application buffer
				ULONG ulLen;
				snapshotIChannel.Unpack(ft, &ulLen);

				if (ulLen == 0) {
					ft.Warning(VSSDBG_SWPRV, L"Warning: zero-size snapshot detected: %s", pwszSnapshotName);
					bFirstSnapshot = false;
					continue;
				}

				// Get the snapshot Id
				VSS_ID CurrentSnapshotId;
				snapshotIChannel.Unpack(ft, &CurrentSnapshotId);

				// Check if this is the snapshot.
				if (SnapshotId != CurrentSnapshotId) {
					// Go to the next snapshot
					bFirstSnapshot = false;
					continue;
				}

				bSnapshotFound = true;

				// We found the snapshot. Delete it if the first one or if bForceDelete is enabled.
				if (bFirstSnapshot)
				{
					// Open another IOCTL channel on that volume
					volumeIChannel2.Open(ft, wszVolumeName);

					// Delete the snapshot
					volumeIChannel2.Call(ft, IOCTL_VOLSNAP_DELETE_OLDEST_SNAPSHOT);
				}
				else if (bForceDelete)
				{
					ft.Throw( VSSDBG_SWPRV, E_NOTIMPL, L"Not implemented since there are no multiple snapshots");
					// TBD: Enumerate again all previous snapshots and delete them including this snapshot
				}
				else
					ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"A snapshot cannot be deleted if is not the oldest one");

				// If a snapshot was found then end the cycle
				break;
			}

			// If a snapshot was found then do not continue to search it on other volumes.
			if (bSnapshotFound)
				break;
		}
		
		if (!bSnapshotFound)
			ft.Throw( VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND, L"Snapshot set not found");
    }
    VSS_STANDARD_CATCH(ft)

	// Close the search handle, if needed
	if (hSearch != INVALID_HANDLE_VALUE) {
		if (!::FindVolumeClose(hSearch))
			ft.Trace( VSSDBG_SWPRV, L"Error while closing the search handle 0x%08lx", GetLastError());
	}

	// Delete the temporary snapshot name
	::VssFreeString(pwszSnapshotName);

    return ft.hr;
}


HRESULT CVsTestProvider::InternalDeleteSnapshotOnVolume(
    IN      VSS_ID			VolumeId,
	OUT		LONG*			pDeletedSnapshots,		
	OUT		VSS_ID*			pNondeletedSnapshotID
    )

/*++

Description:

	This routine deletes a snapshot.

	If snapshot cannot be found then VSS_E_OBJECT_NOT_FOUND is returned.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::InternalDeleteSnapshotOnVolume" );
	HANDLE hSearch = INVALID_HANDLE_VALUE;
	LPWSTR pwszSnapshotName = NULL;

    try
    {
		BS_ASSERT(*pDeletedSnapshots == 0);
		BS_ASSERT(*pNondeletedSnapshotID == GUID_NULL);

        // Trace
        ft.Trace( VSSDBG_SWPRV, L"VolumeId = " WSTR_GUID_FMT, GUID_PRINTF_ARG( VolumeId ) );

		// Enumerate snapshots through all the volumes
		CVssIOCTLChannel volumeIChannel;	// For enumeration of snapshots on a volume
		CVssIOCTLChannel volumeIChannel2;	// For enumeration of snapshots on a volume
		CVssIOCTLChannel snapshotIChannel;	// For snapshots attributes
		WCHAR wszVolumeName[MAX_PATH+1];

		// Get the volume name
		::swprintf( wszVolumeName, L"\\\\?\\Volume" WSTR_GUID_FMT, GUID_PRINTF_ARG(VolumeId));

		// Open a IOCTL channel on that volume
		ft.hr = volumeIChannel.Open(ft, wszVolumeName, false);
		if (ft.HrFailed())
			ft.Throw( VSSDBG_SWPRV, ft.hr, L"Error on opening the volume %s", wszVolumeName);

		// Open another IOCTL channel on that volume
		volumeIChannel2.Open(ft, wszVolumeName);

		// Get the list of snapshots
		// If IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS not
		// supported then try with the next volume.
		ft.hr = volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS, false);
		if (ft.HrFailed())
			ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED,
				L"The volume %s does not support the IOCTL",
				wszVolumeName);

		// Get the length of snapshot names multistring
		ULONG ulMultiszLen;
		volumeIChannel.Unpack(ft, &ulMultiszLen);

		// Try to find the snapshot with the corresponding Id
		while(volumeIChannel.UnpackZeroString(ft, pwszSnapshotName)) {
			// Compose the snapshot name in a user-mode style
			WCHAR wszUserModeSnapshotName[MAX_PATH];
			if (::_snwprintf(wszUserModeSnapshotName, MAX_PATH - 1,
					L"\\\\?\\GLOBALROOT%s", pwszSnapshotName) < 0)
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Not enough memory." );
		
			// Open that snapshot and verify if it has our ID
			ft.hr = snapshotIChannel.Open(ft, wszUserModeSnapshotName, false);
			if (ft.HrFailed())
				ft.Warning( VSSDBG_SWPRV, L"Error 0x%08lx on opening the snapshot %s",
							wszUserModeSnapshotName);
			else {
				// Get the application buffer
				snapshotIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_APPLICATION_INFO);

				// Get the length of the application buffer
				ULONG ulLen;
				snapshotIChannel.Unpack(ft, &ulLen);

				if (ulLen == 0)
					ft.Warning(VSSDBG_SWPRV, L"Warning: zero-size snapshot detected: %s", pwszSnapshotName);
				else
					// Get the snapshot Id in eventuality of an error
					snapshotIChannel.Unpack(ft, pNondeletedSnapshotID);
			}

			// Delete the snapshot
			volumeIChannel2.Call(ft, IOCTL_VOLSNAP_DELETE_OLDEST_SNAPSHOT);

			// Increment the number of deleted snapshots
			(*pDeletedSnapshots)++;
		}
    }
    VSS_STANDARD_CATCH(ft)

	// Close the search handle, if needed
	if (hSearch != INVALID_HANDLE_VALUE) {
		if (!::FindVolumeClose(hSearch))
			ft.Trace( VSSDBG_SWPRV, L"Error while closing the search handle 0x%08lx", GetLastError());
	}

	// Delete the temporary snapshot name
	::VssFreeString(pwszSnapshotName);

	if (ft.HrSucceeded())
		(*pNondeletedSnapshotID) = GUID_NULL;

    return ft.hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\simsnap\simsnap.cpp ===
/*
**++
**
** Copyright (c) 2000-2001  Microsoft Corporation
**
**
** Module Name:
**
**	simsnap.cpp
**
**
** Abstract:
**
**	Test program to drive the VSS Writer Shim contained in VssAPI.DLL
**
**
** Author:
**
**	Michael C. Johnson   [mikejohn]        24-May-2000
**
**
** Revision History:
**
**	X-5	MCJ		Michael C. Johnson		15-Sep-2000
**		Add test for invalid volume array pointer, interleaved calls
**		and so on.
**
**	X-4	MCJ		Michael C. Johnson		15-Sep-2000
**		Add test for invalid bits in options parameter of call to
**		SimulateSnapshotFreeze()
**
**	X-3	MCJ		Michael C. Johnson		30-Jun-2000
**		Remove calls to RegisterSnapshotSubscriptions() and 
**		UnregisterSnapshotSubscriptions() as these are no longer 
**		required.
**
**	X-2	MCJ		Michael C. Johnson		26-May-2000
**		Add some extra tests to validate shim is properly sensitive
**		to volume name array contents.
**--
*/

/*
** Defines
**
**
**	   C4290: C++ Exception Specification ignored
** warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
** warning C4127: conditional expression is constant
*/
#pragma warning(disable:4290)
#pragma warning(disable:4511)
#pragma warning(disable:4127)


/*
** Includes
*/
#include <windows.h>
#include <wtypes.h>
#include <stddef.h>
#include <stdio.h>
#include <objbase.h>
#include <guiddef.h>

#include "vs_idl.hxx"

#include <vswriter.h>
#include <vsbackup.h>


static BOOL AssertPrivilege (LPCWSTR privName);

static HRESULT DoTest01 (VOID);
static HRESULT DoTest02 (VOID);
static HRESULT DoTest03 (VOID);
static HRESULT DoTest05 (VOID);
static HRESULT DoTest06 (VOID);
static HRESULT DoTest07 (VOID);
static HRESULT DoTest08 (VOID);
static HRESULT DoTest09 (VOID);
static HRESULT DoTest10 (VOID);
static HRESULT DoTest11 (VOID);
static HRESULT DoTest12 (VOID);
static HRESULT DoTest13 (VOID);
static HRESULT DoTest14 (VOID);




extern "C" int __cdecl wmain (int argc, char *argv[])
    {
    HRESULT	hrStatus;


    UNREFERENCED_PARAMETER (argv);
    UNREFERENCED_PARAMETER (argc);


    wprintf (L"Test for SimulateSnapshotXxxx calls (ProcessId 0x%04x)\nChecking privileges\n", 
	     GetCurrentProcessId ());


    if (!AssertPrivilege (SE_BACKUP_NAME))
	{
        wprintf (L"AssertPrivilege returned error 0x%08X\n", GetLastError ());
        return 2;
	}



    wprintf (L"Initializing COM\n");

    hrStatus = CoInitializeEx (NULL, COINIT_MULTITHREADED);

    if (FAILED (hrStatus))
	{
        wprintf (L"CoInitialize() returned 0x%08X\n", GetLastError ());
        return 1;
	}



    if ( argc == 1 )
    {
        hrStatus = DoTest01 ();

        hrStatus = DoTest02 ();

        hrStatus = DoTest05 ();

        hrStatus = DoTest06 ();

        hrStatus = DoTest02 ();

        hrStatus = DoTest07 ();

        hrStatus = DoTest08 ();

        hrStatus = DoTest09 ();

        hrStatus = DoTest10 ();

        hrStatus = DoTest11 ();

        hrStatus = DoTest12 ();

        hrStatus = DoTest13 ();

        hrStatus = DoTest14 ();
    }
    else
    {
        hrStatus = DoTest03();
    }


    CoUninitialize();

    return 0;
    }




static BOOL AssertPrivilege (LPCWSTR privName)
    {
    HANDLE  tokenHandle;
    BOOL    stat = FALSE;

    if (OpenProcessToken (GetCurrentProcess (), TOKEN_ADJUST_PRIVILEGES, &tokenHandle))
	{
        LUID value;

        if (LookupPrivilegeValue (NULL, privName, &value))
	    {
            TOKEN_PRIVILEGES newState;
            DWORD            error;

            newState.PrivilegeCount           = 1;
            newState.Privileges[0].Luid       = value;
            newState.Privileges[0].Attributes = SE_PRIVILEGE_ENABLED;

            /*
            ** We will always call GetLastError below, so clear
            ** any prior error values on this thread.
            */
            SetLastError (ERROR_SUCCESS);

            stat = AdjustTokenPrivileges (tokenHandle,
					  FALSE,
					  &newState,
					  (DWORD)0,
					  NULL,
					  NULL);

            /*
            ** Supposedly, AdjustTokenPriveleges always returns TRUE
            ** (even when it fails). So, call GetLastError to be
            ** extra sure everything's cool.
            */
            if ((error = GetLastError()) != ERROR_SUCCESS)
		{
                stat = FALSE;
		}

            if (!stat)
		{
                wprintf (L"AdjustTokenPrivileges for %s failed with 0x%08X",
			 privName,
			 error);
		}
	    }


        CloseHandle (tokenHandle);
	}

    return stat;
    }



static HRESULT DoTest01 ()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = VSS_SW_BOOTABLE_STATE;
    GUID	guidSnapshotSetId;
    
    ::CoCreateGuid( &guidSnapshotSetId );
    
    IVssAsync *pIAsync = NULL;
    
    wprintf (L"\n\nTest  1 - Bootable State, Synchronous\n\n");
    wprintf (L"Simulating snapshot freeze - should work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    
    wprintf (L"Simulating snapshot thaw\n");
        
    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}


    return (hrStatus);
    }



static HRESULT DoTest02 ()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = 0;
    GUID	guidSnapshotSetId;

    ::CoCreateGuid( &guidSnapshotSetId );

    IVssAsync *pIAsync = NULL;

    wprintf (L"\n\nTest  2 - Service State, Synchronous\n\n");
    wprintf (L"Simulating snapshot freeze - should work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }


static HRESULT DoTest03()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = VSS_SW_BOOTABLE_STATE;
    GUID	guidSnapshotSetId;

    ::CoCreateGuid( &guidSnapshotSetId );

    IVssAsync *pIAsync = NULL;

    wprintf (L"\n\nTest  3 - Bootable State, Asynchronous\n\n");
    wprintf (L"Simulating snapshot freeze with Cancel - should work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        wprintf (L"Waiting 5 seconds and then calling Cancel\n" );
        Sleep( 5000 );
        wprintf (L"Cancelling\n" );
        pIAsync->Cancel();

        do {
                Sleep( 1000 );
                hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
                wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);
        } while ( !FAILED( hrStatus ) && hrStatusAsync == VSS_S_ASYNC_PENDING );
        
        pIAsync->Release();
        }
#if 0
    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}
#endif
    return (hrStatus);
    }



static HRESULT DoTest05 ()
    {
    HRESULT	hrStatus;
    ULONG	ulOptionFlags       = VSS_SW_BOOTABLE_STATE;
    GUID	guidSnapshotSetId;

    ::CoCreateGuid( &guidSnapshotSetId );

    IVssAsync *pIAsync = NULL;

    wprintf (L"\n\nTest  5 - Bootable State, Synchronous, no volumes\n\n");
    wprintf (L"Simulating snapshot freeze - should work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					0,
					NULL,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }



static HRESULT DoTest06 ()
    {
    HRESULT	hrStatus;
    ULONG	ulOptionFlags       = 0;
    GUID	guidSnapshotSetId;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId );

    wprintf (L"\n\nTest  6 - Service State, Synchronous, no volumes\n\n");
    wprintf (L"Simulating snapshot freeze - should NOT work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					0,
					NULL,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    
    
    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }




static HRESULT DoTest07 ()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = 0x40 | VSS_SW_BOOTABLE_STATE;
    GUID	guidSnapshotSetId;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId );

    wprintf (L"\n\nTest  7 - Bootable State, Synchronous, Extra Options set\n\n");
    wprintf (L"Simulating snapshot freeze - should NOT work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    


    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }



static HRESULT DoTest08 ()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = 0x40;
    GUID	guidSnapshotSetId;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId );

    wprintf (L"\n\nTest  8 - Service State, Synchronous, Extra Options set\n\n");
    wprintf (L"Simulating snapshot freeze - should NOT work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }


static HRESULT DoTest09 ()
    {
    HRESULT	hrStatus;
    ULONG	ulOptionFlags       = 0x0 | VSS_SW_BOOTABLE_STATE;
    GUID	guidSnapshotSetId;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId );

    wprintf (L"\n\nTest  9 - Bootable State, Synchronous, No volume list\n\n");
    wprintf (L"Simulating snapshot freeze - should work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					0,
					NULL,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }


static HRESULT DoTest10 ()
    {
    HRESULT	hrStatus;
    ULONG	ulOptionFlags       = 0x0;
    GUID	guidSnapshotSetId;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId );

    wprintf (L"\n\nTest 10 - Service State, Synchronous, No volume list\n\n");
    wprintf (L"Simulating snapshot freeze - should NOT work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					0,
					NULL,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }


static HRESULT DoTest11 ()
    {
    HRESULT	hrStatus;
    ULONG	ulOptionFlags       = 0x0;
    GUID	guidSnapshotSetId;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId );

    wprintf (L"\n\nTest 11 - Service State, Synchronous, One volume with bad volume list pointer\n\n");
    wprintf (L"Simulating snapshot freeze - should NOT work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId,
					ulOptionFlags,
					01,
					NULL,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze() returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Simulating snapshot thaw\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw() returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }


static HRESULT DoTest12 ()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = 0x0;
    GUID	guidSnapshotSetId1;
    GUID	guidSnapshotSetId2;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId1 );
    ::CoCreateGuid( &guidSnapshotSetId2 );

    wprintf (L"\n\nTest 12 - Service State, Synchronous, nested call\n\n");
    wprintf (L"Simulating snapshot freeze (GUID1)\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId1,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze(GUID1) returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    IVssAsync *pIAsync2 = NULL;

    wprintf (L"Simulating snapshot freeze (GUID2) - should NOT work\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId2,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync2);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze(GUID2) returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync2 != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync2->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync2->Wait();

        hrStatus = pIAsync2->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync2->Release();
        }
    
    wprintf (L"Simulating snapshot thaw (GUID2)\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId2);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw(GUID2) returned 0x%08X\n", hrStatus);
	}


    wprintf (L"Simulating snapshot thaw (GUID1)\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId1);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw(GUID1) returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }



static HRESULT DoTest13 ()
    {
    HRESULT	hrStatus;
    LPWSTR	pwszVolumeArray [3] = {L"C:\\", L"V:\\", L"E:\\"};
    ULONG	ulOptionFlags       = 0x0;
    GUID	guidSnapshotSetId1;
    GUID	guidSnapshotSetId2;
    IVssAsync *pIAsync = NULL;

    ::CoCreateGuid( &guidSnapshotSetId1 );
    ::CoCreateGuid( &guidSnapshotSetId2 );

    wprintf (L"\n\nTest 13 - Service State, Synchronous, nested call (reverse thaw)\n\n");
    wprintf (L"Simulating snapshot freeze (GUID1)\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId1,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze(GUID1) returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    IVssAsync *pIAsync2 = NULL;


    wprintf (L"Simulating snapshot freeze (GUID2)\n");

    hrStatus = SimulateSnapshotFreeze  (guidSnapshotSetId2,
					ulOptionFlags,
					sizeof (pwszVolumeArray) / sizeof (pwszVolumeArray [0]),
					pwszVolumeArray,
					&pIAsync2);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze(GUID2) returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync2 != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync2->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync2->Wait();

        hrStatus = pIAsync2->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync2->Release();
        }
    

    wprintf (L"Simulating snapshot thaw (GUID1)\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId1);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw(GUID1) returned 0x%08X\n", hrStatus);
	}


    wprintf (L"Simulating snapshot thaw (GUID2)\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId2);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw(GUID2) returned 0x%08X\n", hrStatus);
	}



    return (hrStatus);
    }




static HRESULT DoTest14 ()
    {
    HRESULT			 hrStatus               = NOERROR;
    HRESULT			 hrStatusAsync          = NOERROR;
    IVssBackupComponents	*pIVssBackupComponents = NULL;
    VSS_ID		     SnapshotId             = GUID_NULL;
    IVssAsync			*pIVssAsync         = NULL;
    GUID			 guidSnapshotSetId      = GUID_NULL;
    GUID			 guidSnapshotSetId2;

    ::CoCreateGuid( &guidSnapshotSetId2 );

    wprintf (L"\n\nTest 14 - Bootable State, Synchronous, during DoSnapshot\n\n");

    wprintf (L"Calling CreateVssBackupComponents ()\n");

    hrStatus = CreateVssBackupComponents (&pIVssBackupComponents);

    if (FAILED (hrStatus))
	{
	wprintf (L"CreateVssBackupComponents () returned 0x%08X\n", hrStatus);
	}



    wprintf (L"Calling InitializeForBackup ()\n");

    hrStatus = pIVssBackupComponents->InitializeForBackup ();

    if (FAILED (hrStatus))
	{
	wprintf (L"InitializeForBackup () returned 0x%08X\n", hrStatus);
	}





    wprintf (L"Calling SetBackupState ()\n");

    hrStatus = pIVssBackupComponents->SetBackupState (true, true, VSS_BT_FULL);

    if (FAILED (hrStatus))
	{
	wprintf (L"SetBackupState () returned 0x%08X\n", hrStatus);
	}



    wprintf (L"Calling GatherWriterMetadata ()\n");

    hrStatus = pIVssBackupComponents->GatherWriterMetadata (&pIVssAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"GatherWriterMetadata () returned 0x%08X\n", hrStatus);
	}


    wprintf (L"Calling Wait () (for GatherWriterMetadata() to complete)\n");

    hrStatus = pIVssAsync->Wait ();

    if (FAILED (hrStatus))
	{
	wprintf (L"Wait () returned 0x%08X\n", hrStatus);
	}




    wprintf (L"Calling StartSnapshotSet ()\n");

    hrStatus = pIVssBackupComponents->StartSnapshotSet (&guidSnapshotSetId);

    if (FAILED (hrStatus))
	{
	wprintf (L"StartSnapshotSet () returned 0x%08X\n", hrStatus);
	}


        

    wprintf (L"Calling AddToSnapshotSet ()\n");

    hrStatus = pIVssBackupComponents->AddToSnapshotSet (L"E:\\",
							GUID_NULL,
							&SnapshotId);

    if (FAILED (hrStatus))
	{
	wprintf (L"AddToSnapshotSet () returned 0x%08X\n", hrStatus);
	}




    wprintf (L"Calling PrepareForBackup ()\n");

    hrStatus = pIVssBackupComponents->PrepareForBackup (&pIVssAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"PrepareForBackup () returned 0x%08X\n", hrStatus);
	}




    wprintf (L"Calling Wait () (for PrepareForBackup() to complete)\n");

    hrStatus = pIVssAsync->Wait ();

    if (FAILED (hrStatus))
	{
	wprintf (L"Wait () returned 0x%08X\n", hrStatus);
	}




    wprintf (L"Calling QueryStatus ()\n");

    hrStatus = pIVssAsync->QueryStatus (&hrStatusAsync, 0);

    if (FAILED (hrStatus))
	{
	wprintf (L"QueryStatus () returned 0x%08X\n", hrStatus);
	}


    

    wprintf (L"Calling DoSnapshotSet ()\n");

    hrStatus = pIVssBackupComponents->DoSnapshotSet (&pIVssAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"DoSnapshotSet () returned 0x%08X\n", hrStatus);
	}



    wprintf (L"Calling SimulateSnapshotFreeze () - should NOT work\n");

    IVssAsync *pIAsync = NULL;

    hrStatus = SimulateSnapshotFreeze (guidSnapshotSetId2,
				       VSS_SW_BOOTABLE_STATE,
				       0,
				       NULL,
  				       &pIAsync);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotFreeze () returned 0x%08X\n", hrStatus);
	}

    if ( pIAsync != NULL )
        {
        HRESULT hrStatusAsync;
        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Wait();

        hrStatus = pIAsync->QueryStatus( &hrStatusAsync, 0 );
        wprintf (L"QueryStatus () returned: 0x%08X, hrStatusAsync: 0x%08x\n", hrStatus, hrStatusAsync);

        pIAsync->Release();
        }
    

    wprintf (L"Calling SimulateSnapshotThaw ()\n");

    hrStatus = SimulateSnapshotThaw (guidSnapshotSetId2);

    if (FAILED (hrStatus))
	{
	wprintf (L"SimulateSnapshotThaw () returned 0x%08X\n", hrStatus);
	}


    wprintf (L"Calling Wait () (for DoSnapshotSet () to complete) ()\n");

    hrStatus = pIVssAsync->Wait();

    if (FAILED (hrStatus))
	{
	wprintf (L"Wait () returned 0x%08X\n", hrStatus);
	}

    pIVssAsync->Release();
    pIVssBackupComponents->Release();
    
    return (hrStatus);
    }
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\diff.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Diff.cxx | Diff area object implementation
    @end

Author:

    Adi Oltean  [aoltean]   01/24/2000

Revision History:

    Name        Date        Comments

    aoltean     01/24/2000  Created.

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL headers
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "vs_sec.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "diff.hxx"

#include "ntddsnap.h"


/////////////////////////////////////////////////////////////////////////////
//  Operations


CVsDiffArea::CVsDiffArea()
{
	CVssFunctionTracer ft( VSSDBG_COORD, L"CVsDiffArea::CVsDiffArea" );

	try
	{
		m_cs.Init();
	}
	VSS_STANDARD_CATCH(ft)

}


CVsDiffArea::~CVsDiffArea()
{
	CVssFunctionTracer ft( VSSDBG_COORD, L"CVsDiffArea::~CVsDiffArea" );

	try
	{
		m_cs.Term();
	}
	VSS_STANDARD_CATCH(ft)

}


HRESULT CVsDiffArea::Initialize(
    IN      LPCWSTR pwszVolumeMountPoint	// DO NOT transfer ownership
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::Initialize" );

    try
    {
		// Test the arguments
		if ((pwszVolumeMountPoint == NULL) ||
			(pwszVolumeMountPoint[0] == L'\0'))
			ft.Throw(VSSDBG_SWPRV, E_INVALIDARG, L"NULL volume mount point");

    	// Convert the volume mount point into a volume name
    	WCHAR wszVolumeName[MAX_PATH];
		if (!::GetVolumeNameForVolumeMountPointW( pwszVolumeMountPoint,
				wszVolumeName, ARRAY_LEN(wszVolumeName)))
			ft.Throw( VSSDBG_COORD, E_INVALIDARG,
					  L"Invalid pwszVolumeMountPoint. GetVolumeNameForVolumeMountPoint "
					  L"failed with error code 0x%08lx", pwszVolumeMountPoint, GetLastError());
		BS_ASSERT(::wcslen(wszVolumeName) != 0);
    		
		// Eliminate the last backslash from the volume name.
        EliminateLastBackslash(wszVolumeName);

		// Opening the channel
        // (if already opened then it will be closed automatically)
		m_volumeIChannel.Open(ft, wszVolumeName);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


/////////////////////////////////////////////////////////////////////////////
//  Interface methods

STDMETHODIMP CVsDiffArea::AddVolume(                      			
    IN      VSS_PWSZ pwszVolumeMountPoint						
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::AddVolume" );

    try
    {
        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

		// Test arguments
        if (pwszVolumeMountPoint == NULL)
            ft.Throw( VSSDBG_COORD, E_INVALIDARG, L"NULL pwszVolumeName");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		BS_ASSERT(m_volumeIChannel.IsOpen());

    	// Convert the volume mount point into a volume name
    	WCHAR wszVolumeName[MAX_PATH];
		if (!::GetVolumeNameForVolumeMountPointW( pwszVolumeMountPoint,
				wszVolumeName, ARRAY_LEN(wszVolumeName)))
			ft.Throw( VSSDBG_COORD, E_INVALIDARG,
					  L"Invalid pwszVolumeMountPoint. GetVolumeNameForVolumeMountPoint "
					  L"failed with error code 0x%08lx", pwszVolumeMountPoint, GetLastError());
		BS_ASSERT(::wcslen(wszVolumeName) != 0);

		if (!::ConvertVolMgmtVolumeNameIntoKernelObject(wszVolumeName))
			ft.Throw( VSSDBG_COORD, E_INVALIDARG,
					  L"ConvertVolMgmtVolumeNameIntoKernelObject failed. Invalid volume name %s",
					  wszVolumeName);

		// Send the IOCTL_VOLSNAP_ADD_VOLUME_TO_DIFF_AREA ioctl
    	m_volumeIChannel.PackSmallString(ft, wszVolumeName);
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_ADD_VOLUME_TO_DIFF_AREA);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::Query(									
    OUT     IVssEnumObject **ppEnum					
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::Query" );

    try
    {
        // Initialize [out] arguments
        VssZeroOutPtr( ppEnum );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        ft.Trace( VSSDBG_SWPRV, L"ppEnum = %p", ppEnum);

        // Argument validation
		BS_ASSERT(ppEnum);
        if (ppEnum == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL ppEnum");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

        // Create the collection object. Initial reference count is 0.
        VSS_OBJECT_PROP_Array* pArray = new VSS_OBJECT_PROP_Array;
        if (pArray == NULL)
            ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Memory allocation error.");

        // Get the pointer to the IUnknown interface.
		// The only purpose of this is to use a smart ptr to destroy correctly the array on error.
		// Now pArray's reference count becomes 1 (because of the smart pointer).
        CComPtr<IUnknown> pArrayItf = static_cast<IUnknown*>(pArray);
        BS_ASSERT(pArrayItf);

		// GEt the list of volumes that are part of the diff area
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_DIFF_AREA);

		// Get the length of snapshot names multistring
		ULONG ulMultiszLen;
		m_volumeIChannel.Unpack(ft, &ulMultiszLen);

#ifdef _DEBUG
		// Try to find the snapshot with the corresponding Id
		DWORD dwInitialOffset = m_volumeIChannel.GetCurrentOutputOffset();
#endif

		LPWSTR pwszVolumeName = NULL;
		while(m_volumeIChannel.UnpackZeroString(ft, pwszVolumeName))
		{
			// Compose the volume name in a user-mode style
			WCHAR wszMountPoint[MAX_PATH];
			if (::_snwprintf(wszMountPoint, MAX_PATH - 1,
					L"\\\\?\\GLOBALROOT%s\\", pwszVolumeName) < 0)
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Not enough memory." );

			// Get the mount point for the volume name
	    	WCHAR wszUserModeVolumeName[MAX_PATH];
			if (!::GetVolumeNameForVolumeMountPointW( wszMountPoint,
					wszUserModeVolumeName, MAX_PATH))
				ft.Throw( VSSDBG_COORD, E_INVALIDARG,
						  L"Invalid wszMountPoint. GetVolumeNameForVolumeMountPoint "
						  L"failed with error code 0x%08lx", wszMountPoint, GetLastError());
			BS_ASSERT(::wcslen(wszUserModeVolumeName) != 0);

			// Get the volume ID
			VSS_ID VolumeId;
			if (!GetVolumeGuid(wszUserModeVolumeName, VolumeId))
			{
				BS_ASSERT(false);
				ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
						L"Cannot get the volume Id for %s.",
						wszUserModeVolumeName);
			}

			// Initialize an empty volume properties structure
			VSS_OBJECT_PROP_Ptr ptrVolProp;
			ptrVolProp.InitializeAsVolume( ft,
				VolumeId,
				0,
				wszUserModeVolumeName,
				pwszVolumeName,
				VSS_SWPRV_ProviderId);

			if (!pArray->Add(ptrVolProp))
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Cannot add element to the array");

			// Reset the current pointer to NULL
			ptrVolProp.Reset(); // The internal pointer was detached into pArray.
		}

#ifdef _DEBUG
		// Check if all strings were browsed correctly
		DWORD dwFinalOffset = m_volumeIChannel.GetCurrentOutputOffset();
		BS_ASSERT( dwFinalOffset - dwInitialOffset == ulMultiszLen);
#endif

        // Create the enumerator object. Beware that its reference count will be zero.
        CComObject<CVssEnumFromArray>* pEnumObject = NULL;
        ft.hr = CComObject<CVssEnumFromArray>::CreateInstance(&pEnumObject);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
                      L"Cannot create enumerator instance. [0x%08lx]", ft.hr);
        BS_ASSERT(pEnumObject);

        // Get the pointer to the IVssEnumObject interface.
		// Now pEnumObject's reference count becomes 1 (because of the smart pointer).
		// So if a throw occurs the enumerator object will be safely destroyed by the smart ptr.
        CComPtr<IUnknown> pUnknown = pEnumObject->GetUnknown();
        BS_ASSERT(pUnknown);

        // Initialize the enumerator object.
		// The array's reference count becomes now 2, because IEnumOnSTLImpl::m_spUnk is also a smart ptr.
        BS_ASSERT(pArray);
		ft.hr = pEnumObject->Init(pArrayItf, *pArray);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
                      L"Cannot initialize enumerator instance. [0x%08lx]", ft.hr);

        // Initialize the enumerator object.
		// The enumerator reference count becomes now 2.
        ft.hr = pUnknown->SafeQI(IVssEnumObject, ppEnum);
        if ( ft.HrFailed() )
            ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
                      L"Error querying the IVssEnumObject interface. hr = 0x%08lx", ft.hr);
        BS_ASSERT(*ppEnum);

		BS_ASSERT( !ft.HrFailed() );
		ft.hr = (pArray->GetSize() != 0)? S_OK: S_FALSE;
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::Clear(                      				
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::Clear" );

    try
    {
        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Clear the diff area on the current volume
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_CLEAR_DIFF_AREA);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::GetUsedVolumeSpace(
    OUT      LONGLONG* pllBytes						
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::GetUsedVolumeSpace" );

    try
    {
		::VssZeroOut(pllBytes);

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        ft.Trace( VSSDBG_SWPRV, L"pllBytes = %p", pllBytes);

        // Argument validation
		BS_ASSERT(pllBytes);
        if (pllBytes == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pllBytes");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		VOLSNAP_DIFF_AREA_SIZES strSizes;

		// Get the sizes
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_DIFF_AREA_SIZES);
    	m_volumeIChannel.Unpack(ft, &strSizes);

		*pllBytes = strSizes.UsedVolumeSpace;
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::GetAllocatedVolumeSpace(               	
    OUT      LONGLONG* pllBytes						
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::GetAllocatedVolumeSpace" );

    try
    {
		::VssZeroOut(pllBytes);

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        ft.Trace( VSSDBG_SWPRV, L"pllBytes = %p", pllBytes);

        // Argument validation
		BS_ASSERT(pllBytes);
        if (pllBytes == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pllBytes");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		VOLSNAP_DIFF_AREA_SIZES strSizes;

		// Get the sizes
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_DIFF_AREA_SIZES);
    	m_volumeIChannel.Unpack(ft, &strSizes);

		*pllBytes = strSizes.AllocatedVolumeSpace;
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::GetMaximumVolumeSpace(              		
    OUT      LONGLONG* pllBytes						
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::GetMaximumVolumeSpace" );

    try
    {
		::VssZeroOut(pllBytes);

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        ft.Trace( VSSDBG_SWPRV, L"pllBytes = %p", pllBytes);

        // Argument validation
		BS_ASSERT(pllBytes);
        if (pllBytes == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pllBytes");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		VOLSNAP_DIFF_AREA_SIZES strSizes;

		// Get the sizes
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_DIFF_AREA_SIZES);
    	m_volumeIChannel.Unpack(ft, &strSizes);

		*pllBytes = strSizes.MaximumVolumeSpace;
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::SetAllocatedVolumeSpace(               	
    IN      LONGLONG llBytes						
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::SetAllocatedVolumeSpace" );

    try
    {
        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        ft.Trace( VSSDBG_SWPRV, L"llBytes = " WSTR_LONGLONG_FMT, LONGLONG_PRINTF_ARG(llBytes));

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		VOLSNAP_DIFF_AREA_SIZES strSizes;

		// Get the sizes
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_DIFF_AREA_SIZES);
    	m_volumeIChannel.Unpack(ft, &strSizes);

        // Argument validation
        // TBD: Supplementary checks?
        if (llBytes < strSizes.UsedVolumeSpace)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG,
            			L"Used volume space bigger: " WSTR_LONGLONG_FMT,
            			LONGLONG_PRINTF_ARG(strSizes.UsedVolumeSpace));

		strSizes.AllocatedVolumeSpace = llBytes;

		if (strSizes.MaximumVolumeSpace < llBytes)
			strSizes.MaximumVolumeSpace = llBytes;

		// Set the sizes
    	m_volumeIChannel.Pack(ft, strSizes);
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_SET_DIFF_AREA_SIZES);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsDiffArea::SetMaximumVolumeSpace(
    IN      LONGLONG llBytes						
    )												
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsDiffArea::SetMaximumVolumeSpace" );

    try
    {
        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        ft.Trace( VSSDBG_SWPRV, L"llBytes = " WSTR_LONGLONG_FMT, LONGLONG_PRINTF_ARG(llBytes));

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		VOLSNAP_DIFF_AREA_SIZES strSizes;

		// Get the sizes
		BS_ASSERT(m_volumeIChannel.IsOpen());
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_DIFF_AREA_SIZES);
    	m_volumeIChannel.Unpack(ft, &strSizes);

        // Argument validation
        // TBD: Supplementary checks?
        if (llBytes < strSizes.UsedVolumeSpace)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG,
            			L"Used volume space bigger: " WSTR_LONGLONG_FMT,
            			LONGLONG_PRINTF_ARG(strSizes.UsedVolumeSpace));

		strSizes.MaximumVolumeSpace = llBytes;

		// Set the sizes
    	m_volumeIChannel.Pack(ft, strSizes);
    	m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_SET_DIFF_AREA_SIZES);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\find.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Find.hxx | Defines the internal snapshot persistency-related methods.
    @end

Author:

    Adi Oltean  [aoltean]   01/10/2000

Revision History:

    Name        Date        Comments

    aoltean     01/10/2000  Created.


--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"

#include "ntddsnap.h"


/////////////////////////////////////////////////////////////////////////////
// CVssQueuedSnapshot::SaveXXX methods
//


void CVssQueuedSnapshot::EnumerateSnasphots(
	IN	CVssFunctionTracer& ft,
	IN	VSS_QUERY_TYPE eQueryType,
	IN	VSS_OBJECT_TYPE eObjectType,
	IN	LONG lMask,
	IN	VSS_ID&	FilterID,
	VSS_OBJECT_PROP_Array* pArray
	) throw(HRESULT)

/*++

Description:

	This method enumerates all snapshots

	It throws VSS_E_OBJECT_NOT_FOUND if no filter object was found.

--*/

{	
	// Reset the error code
	ft.hr = S_OK;
		
	HANDLE hSearch = INVALID_HANDLE_VALUE;
	LPWSTR pwszSnapshotName = NULL;

	try
	{
		// Enumerate snapshots through all the volumes
		CVssIOCTLChannel volumeIChannel;
		CVssIOCTLChannel snapshotIChannel;
		WCHAR wszVolumeName[MAX_PATH+1];
		bool bFirstVolume = true;
		bool bContinueWithVolumes = true;
		bool bFilterObjectFound = false;
		while(true) {
			// Get the volume name
			if (bFirstVolume) {
				hSearch = ::FindFirstVolumeW( wszVolumeName, MAX_PATH);
				if (hSearch == INVALID_HANDLE_VALUE)
					ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error on FindFirstVolume 0x%08lx", GetLastError());
				bFirstVolume = false;
			} else {
				if (!::FindNextVolumeW( hSearch, wszVolumeName, MAX_PATH) ) {
					if (GetLastError() == ERROR_NO_MORE_FILES)
						break;	// End of iteration
					else
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error on FindNextVolume 0x%08lx", GetLastError());
				}
			}

			// Get the volume Id
			VSS_ID OriginalVolumeId;
			if (!GetVolumeGuid(wszVolumeName, OriginalVolumeId)) {
				BS_ASSERT(false);
				ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
						L"Cannot get the original volume Id for %s.",
						wszVolumeName);
			}

			// Eliminate the last backslash in order to open the volume
			EliminateLastBackslash(wszVolumeName);

			// Check if the snapshot is belonging to that volume
			// Open a IOCTL channel on that volume
			volumeIChannel.Open(ft, wszVolumeName);

			// Get the list of snapshots
			// If IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS not
			// supported then try with the next volume.

			ft.hr = volumeIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS, false);
			if (ft.HrFailed()) {
				ft.hr = S_OK;
				continue;
			}

			// If we want to find a certain volume
			if ( (eObjectType == VSS_OBJECT_VOLUME) && ( eQueryType == VSS_FIND_BY_VOLUME) )
			{
				// Test if condition is reached
				if (OriginalVolumeId != FilterID)
					continue;
			
				// Initialize an empty volume properties structure
				VSS_OBJECT_PROP_Ptr ptrVolProp;
				ptrVolProp.InitializeAsVolume( ft,
					OriginalVolumeId,
					0,
					(lMask & VSS_PM_NAME_FLAG)? wszVolumeName: NULL,
					NULL,
					VSS_SWPRV_ProviderId);

				if (!pArray->Add(ptrVolProp))
					ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
							  L"Cannot add element to the array");

				// Reset the current pointer to NULL
				ptrVolProp.Reset(); // The internal pointer was detached into pArray.

				// Mark that an object (i.e. a volume) was found
				bFilterObjectFound = true;
			}
			// If we want to find all supported volumes
			else if ( (eObjectType == VSS_OBJECT_VOLUME) && (eQueryType == VSS_FIND_ALL) )
			{
				// Initialize an empty volume properties structure
				VSS_OBJECT_PROP_Ptr ptrVolProp;
				ptrVolProp.InitializeAsVolume( ft,
					OriginalVolumeId,
					0,
					(lMask & VSS_PM_NAME_FLAG)? wszVolumeName: NULL,
					NULL,
					VSS_SWPRV_ProviderId);

				if (!pArray->Add(ptrVolProp))
					ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
							  L"Cannot add element to the array");

				// Since there is no filter criteria, the returned error cannot be VSS_E_OBJECT_NOT_FOUND
				bFilterObjectFound = true;
				
				// Reset the current pointer to NULL
				ptrVolProp.Reset(); // The internal pointer was detached into pArray.
			// If we want to find a other kind of objects that require a snapshot opening
			} else {
				// Get the length of snapshot names multistring
				ULONG ulMultiszLen;
				volumeIChannel.Unpack(ft, &ulMultiszLen);

#ifdef _DEBUG
				// Try to find the snapshot with the corresponding Id
				DWORD dwInitialOffset = volumeIChannel.GetCurrentOutputOffset();
#endif

				bool bContinueWithSnapshots = true;
				while(volumeIChannel.UnpackZeroString(ft, pwszSnapshotName)) {
					// Compose the snapshot name in a user-mode style
					WCHAR wszUserModeSnapshotName[MAX_PATH];
					if (::_snwprintf(wszUserModeSnapshotName, MAX_PATH - 1,
							L"\\\\?\\GLOBALROOT%s", pwszSnapshotName) < 0)
						ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Not enough memory." );
				
					// Open that snapshot and verify if it has our ID
					ft.hr = snapshotIChannel.Open(ft, wszUserModeSnapshotName, false);
					if (ft.HrFailed()) {
						ft.Warning( VSSDBG_SWPRV, L"Warning: Error opening the snapshot device name %s [0x%08lx]",
									wszUserModeSnapshotName, ft.hr );
						continue;
					}

					// Get the application buffer
					ft.hr = snapshotIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_APPLICATION_INFO, false);
					if (ft.HrFailed()) {
						ft.Warning( VSSDBG_SWPRV,
									L"Warning: Error sending the query IOCTL to the snapshot device name %s [0x%08lx]",
									wszUserModeSnapshotName, ft.hr );
						continue;
					}

					// Get the length of the application buffer
					ULONG ulLen;
					snapshotIChannel.Unpack(ft, &ulLen);

					if (ulLen == 0) {
						ft.Warning(VSSDBG_SWPRV, L"Warning: zero-size snapshot detected: %s", pwszSnapshotName);
						continue;
					}

					// Get the snapshot Id
					VSS_ID CurrentSnapshotId;
					snapshotIChannel.Unpack(ft, &CurrentSnapshotId);

					// Get the snapshot set Id
					VSS_ID CurrentSnapshotSetId;
					snapshotIChannel.Unpack(ft, &CurrentSnapshotSetId);

					// Process the snapshot that was just found
					ProcessSnapshot( ft, eQueryType, eObjectType, lMask,
					 	FilterID, CurrentSnapshotId, CurrentSnapshotSetId,OriginalVolumeId,
						snapshotIChannel,
					 	wszVolumeName,pwszSnapshotName,
					 	bContinueWithSnapshots, bContinueWithVolumes, bFilterObjectFound, pArray);
					if (!bContinueWithSnapshots)
						break;
				}

#ifdef _DEBUG
				// Check if all strings were browsed correctly
				DWORD dwFinalOffset = volumeIChannel.GetCurrentOutputOffset();
				BS_ASSERT( dwFinalOffset - dwInitialOffset == ulMultiszLen);
#endif
			}
			
			// If a snapshot was found with that Id then stop.
			if (!bContinueWithVolumes)
				break;

		}

		// If the filter object was not found then throw the proper error
		if (!bFilterObjectFound)
			ft.Throw( VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND, L"Object not found");

	}
	VSS_STANDARD_CATCH(ft)

	// Close the search handle, if needed
	if (hSearch != INVALID_HANDLE_VALUE) {
		if (!::FindVolumeClose(hSearch))
			ft.Trace( VSSDBG_SWPRV, L"Error while closing the search handle 0x%08lx", GetLastError());
	}

	::VssFreeString(pwszSnapshotName);

	if (ft.HrFailed())
		ft.Throw( VSSDBG_SWPRV, ft.hr, L"Error while searching the snapshot 0x%08lx", ft.hr);
}


void CVssQueuedSnapshot::ProcessSnapshot(
	IN	CVssFunctionTracer& ft,
	IN	VSS_QUERY_TYPE eQueryType,
	IN	VSS_OBJECT_TYPE eObjectType,
	IN	LONG lMask,
	IN	VSS_ID&	FilterID,
	IN	VSS_ID&	SnapshotID,
	IN	VSS_ID&	SnapshotSetID,
	IN	VSS_ID& OriginalVolumeId,
	IN	CVssIOCTLChannel& snapshotIChannel,
	IN	LPWSTR	wszVolumeName,
	IN	LPWSTR	wszSnapshotName,
	OUT bool& bContinueWithSnapshots,
	OUT bool& bContinueWithVolumes,
	OUT bool& bFilterObjectFound,
	IN OUT	VSS_OBJECT_PROP_Array* pArray
	) throw(HRESULT)

/*++

Description:

	It is called to process each snapshot enumerated in process above.
	Mainly based on the parameters it will construct the appropriate objects and fill the array.

TBD:

	Optimize the lMask thing.

--*/

{
	WCHAR wszFunctionName[] = L"CVssQueuedSnapshot::ProcessSnapshot";

	// Reset the error code
	ft.hr = S_OK;
		
	// Perform filtering
	switch(eQueryType) {
	case VSS_FIND_BY_SNAPSHOT_SET_ID:
		if (SnapshotSetID != FilterID)
			return;
		else
			break;
	case VSS_FIND_BY_SNAPSHOT_ID:
		if (SnapshotID != FilterID)
			return;
		else
			break;
	case VSS_FIND_BY_VOLUME:
		if (OriginalVolumeId != FilterID)
			return;
		else
			break;
	case VSS_FIND_ALL:
		break;
		
	default:
		BS_ASSERT(false);
		ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED, L"Invalid query type %d", eQueryType);
	}

	// Mark that the filter object was found
	bFilterObjectFound = true;

	// Compute properties for the final objects
	switch(eObjectType) {
 	case VSS_OBJECT_SNAPSHOT_SET: {

			// Load the snapshot set properties
			LONG lSnapshotsCount;
			snapshotIChannel.Unpack(ft, &lSnapshotsCount);
			VSS_OBJECT_PROP_Ptr ptrSnapSetProp;
			ptrSnapSetProp.InitializeAsSnapshotSet(ft, SnapshotSetID, lSnapshotsCount);
			
			// Detect duplicates
			bool bSnapshotSetAlreadyInserted = false;
			for (int nIndex = 0; nIndex < pArray->GetSize(); nIndex++) {
				// Get the snapshot set structure object from the array
				VSS_OBJECT_PROP_Ptr& ptrProcessedSnapSet = (*pArray)[nIndex];

				// Get the snapshot structure
		        if (ptrProcessedSnapSet.GetStruct() == NULL) {
		        	BS_ASSERT(false);
		        	continue;
		        }
		
				if (ptrProcessedSnapSet.GetStruct()->Type != VSS_OBJECT_SNAPSHOT_SET) {
					BS_ASSERT(false);
					continue;
				}

				// Check if the snapshot set was already inserted
				VSS_SNAPSHOT_SET_PROP& SSProp = ptrProcessedSnapSet.GetStruct()->Obj.Set;
				if (SSProp.m_SnapshotSetId == SnapshotSetID) {
					bSnapshotSetAlreadyInserted = true;

					// Check if the SS properties are identical in each snapshot.
					if (SSProp.m_lSnapshotsCount != lSnapshotsCount)
						ft.Trace( VSSDBG_SWPRV, L"Bad number of snapshots %ld in snapshot set definition %ld",
							lSnapshotsCount, SSProp.m_lSnapshotsCount);
					break;
				}
			}

			// Add the snapshot set into the array, if not already added.
			if (!bSnapshotSetAlreadyInserted)
			{
				if (!pArray->Add(ptrSnapSetProp))
					ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
							  L"%s: Cannot add element to the array", wszFunctionName);
			}

			// Reset the current pointer to NULL
			ptrSnapSetProp.Reset(); // The internal pointer was detached into pArray.
		} break;
		
	case VSS_OBJECT_SNAPSHOT: {
			// Initialize an empty snapshot properties structure
			VSS_OBJECT_PROP_Ptr ptrSnapProp;
			ptrSnapProp.InitializeAsSnapshot( ft,
				SnapshotID,
				SnapshotSetID,
				NULL,
				(lMask & VSS_PM_NAME_FLAG)? wszSnapshotName: NULL,
				OriginalVolumeId,
				(lMask & VSS_PM_ORIGINAL_NAME_FLAG)? wszVolumeName: NULL,
				VSS_SWPRV_ProviderId,
				NULL,
				0,
				0,
				VSS_SS_UNKNOWN,
				0,0,0,NULL);

			// Get the snapshot structure
			VSS_OBJECT_PROP* pObj = ptrSnapProp.GetStruct();
			BS_ASSERT(pObj);
			VSS_SNAPSHOT_PROP* pSnap = &(pObj->Obj.Snap);

			// Temporary variables (ignored)
			// TBD: get rid of them
			LONG lSnapshotsCount;
			DWORD dwGlobalReservedField;
			USHORT usNumberOfNonstdSnapProperties;
			CVssGenericSnapProperties* pOpaqueSnapPropertiesList = NULL;
			USHORT usReserved;

			// Load the rest of properties
			// Do not load the Name and the Original volume name fields
			// twice since they are already known
			lMask &= ~(VSS_PM_ORIGINAL_NAME_FLAG | VSS_PM_NAME_FLAG);
			LoadSnapshotStructuresExceptIDs(ft, snapshotIChannel,pSnap,lMask, true,
				lSnapshotsCount,dwGlobalReservedField,
				usNumberOfNonstdSnapProperties,pOpaqueSnapPropertiesList,usReserved);

			if (!pArray->Add(ptrSnapProp))
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
						  L"%s: Cannot add element to the array", wszFunctionName);

			// Reset the current pointer to NULL
			ptrSnapProp.Reset(); // The internal pointer was detached into pArray.
		} break;
		
 	case VSS_OBJECT_VOLUME: {
			// Initialize an empty volume properties structure
			VSS_OBJECT_PROP_Ptr ptrVolProp;
			ptrVolProp.InitializeAsVolume( ft,
				OriginalVolumeId,
				0,
				(lMask & VSS_PM_NAME_FLAG)? wszVolumeName: NULL,
				NULL,
				VSS_SWPRV_ProviderId);

			if (!pArray->Add(ptrVolProp))
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
						  L"%s: Cannot add element to the array", wszFunctionName);

			// Reset the current pointer to NULL
			ptrVolProp.Reset(); // The internal pointer was detached into pArray.
		} break;
		
	default:
		BS_ASSERT(false);
		ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED, L"Invalid query type %d", eObjectType);
	}

	bContinueWithSnapshots =
		(eQueryType == VSS_FIND_BY_VOLUME || eQueryType == VSS_FIND_ALL)
		&& (eObjectType == VSS_OBJECT_SNAPSHOT_SET || eObjectType == VSS_OBJECT_SNAPSHOT );

	bContinueWithVolumes = (eQueryType == VSS_FIND_BY_SNAPSHOT_SET_ID)
		&& (eObjectType == VSS_OBJECT_SNAPSHOT || eObjectType == VSS_OBJECT_VOLUME )
		|| (eQueryType == VSS_FIND_ALL);
}


bool CVssQueuedSnapshot::FindDeviceNameFromID(
	IN	CVssFunctionTracer& ft
	) throw(HRESULT)

/*++

Description:

	Finds a snapshot device name based on its ID.

--*/
{
	// Reset the error code
	ft.hr = S_OK;
		
 	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL) {
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	BS_ASSERT(IsDuringCreation());
	BS_ASSERT(pProp->m_SnapshotId != GUID_NULL);
	BS_ASSERT(pProp->m_pwszSnapshotDeviceObject == NULL);

    // Create the collection object. Initial reference count is 0.
    VSS_OBJECT_PROP_Array* pArray = new VSS_OBJECT_PROP_Array;
    if (pArray == NULL)
        ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Memory allocation error.");

    // Get the pointer to the IUnknown interface.
	// The only purpose of this is to use a smart ptr to destroy correctly the array on error.
	// Now pArray's reference count becomes 1 (because of the smart pointer).
    CComPtr<IUnknown> pArrayItf = static_cast<IUnknown*>(pArray);
    BS_ASSERT(pArrayItf);

    // Put into the array only one element.
    EnumerateSnasphots(ft,
    	VSS_FIND_BY_SNAPSHOT_ID,
    	VSS_OBJECT_SNAPSHOT,
    	VSS_PM_DEVICE_FLAG,
    	pProp->m_SnapshotId,
    	pArray);

    // Extract the element from the array.
    if (pArray->GetSize() == 0)
    	return false;

	VSS_OBJECT_PROP_Ptr& ptrObj = (*pArray)[0];
	VSS_OBJECT_PROP* pObj = ptrObj.GetStruct();
	BS_ASSERT(pObj);
	BS_ASSERT(pObj->Type == VSS_OBJECT_SNAPSHOT);
	VSS_SNAPSHOT_PROP* pSnap = &(pObj->Obj.Snap);
	BS_ASSERT(pSnap->m_pwszSnapshotDeviceObject);
	::VssSafeDuplicateStr(ft, pProp->m_pwszSnapshotDeviceObject, pSnap->m_pwszSnapshotDeviceObject);

    return true;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\stdafx.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module stdafx.cxx | The file used to compile the precompiled header
    @end

Author:

    Adi Oltean  [aoltean]   06/30/1999

Revision History:

    Name        Date        Comments

    aoltean     07/13/1999  Created.

--*/


#include "stdafx.hxx"
#include "swprv.hxx"

#ifdef _ATL_STATIC_REGISTRY
#include <statreg.h>
#include <statreg.cpp>
#endif

#pragma warning( disable: 4189 )  /* local variable is initialized but not referenced */
#include <atlimpl.cpp>
#pragma warning( default: 4189 )  /* local variable is initialized but not referenced */
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\provider.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Provider.hxx | Declarations used by the Software Snapshot Provider interface
    @end

Author:

    Adi Oltean  [aoltean]   07/13/1999

Revision History:

    Name        Date        Comments

    aoltean     07/13/1999  Created.
    aoltean     08/17/1999  Change CommitSnapshots to CommitSnapshot
    aoltean     09/23/1999  Using CComXXX classes for better memory management
                            Renaming back XXXSnapshots -> XXXSnapshot
    aoltean     09/26/1999  Returning a Provider Id in OnRegister
    aoltean     09/09/1999  Adding PostCommitSnapshots
                            dss->vss
	aoltean		09/20/1999	Making asserts more cleaner.
	aoltean		09/21/1999	Small renames

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "vs_sec.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"
#include "provider.hxx"
#include "snapshot.hxx"
#include "diff.hxx"


/////////////////////////////////////////////////////////////////////////////
//  Macros for debugging



#undef VSSDBG_SWPRV
#define VSSDBG_SWPRV   CVssDebugInfo(__WFILE__, __LINE__, m_nTestIndex, 0)


/////////////////////////////////////////////////////////////////////////////
//  Definitions


STDMETHODIMP CVsTestProvider::BeginPrepareSnapshot(
    IN      VSS_ID          SnapshotSetId,
    IN      VSS_PWSZ		pwszVolumeName,
    IN      VSS_PWSZ        pwszDetails,
    IN      LONG            lAttributes,
    IN      LONG            lDataLength,
    IN      BYTE*           pbOpaqueData,
    OUT     IVssSnapshot**  ppSnapshot
    )

/*++

Description:

	Creates a Queued Snapshot object to be commited later.

Algorithm:

	1) Creates an internal VSS_SNAPSHOT_PROP structure that will keep most of the properties.
	2) Creates an CVssQueuedSnapshot object and insert it into the global queue of snapshots pending to commit.
	3) Set the state of the snapshot as PREPARING.
	4) If needed, create the snapshot object and return it to the caller.

Remarks:

	The queued snapshot object keeps a reference count. At the end of this function it will be:
		1 = the queued snap obj is reffered by the global queue (if no snapshot COM object was returned)
		2 = reffered by the global queue and by the returned snapshot COM object

Called by:

	IVssCoordinator::AddToSnapshotSet

--*/


{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::BeginPrepareSnapshot" );

    try
    {
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
             L"  SnapshotSetId = " WSTR_GUID_FMT 	L"\n"
             L"  VolumeName = %s,\n"
             L"  pwszDetails = %s,\n"
             L"  lAttributes = 0x%08lx,\n"
             L"  lDataLength = %ld,\n"
             L"  pbOpaqueData = %p,\n"
             L"  ppSnapshot = %p,\n",
             GUID_PRINTF_ARG( SnapshotSetId ),
             pwszVolumeName,
             pwszDetails? pwszDetails: L"NULL",
             lAttributes,
             lDataLength,
             pbOpaqueData,
             ppSnapshot);

        // Argument validation
		if ( SnapshotSetId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotSetId == GUID_NULL");
        if ( pwszVolumeName == NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"pwszVolumeName is NULL");
        if ( pwszDetails == NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"pwszDetails is NULL");
        if (lDataLength < 0)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"Negative lDataLength");
        if ((lDataLength > 0) && (pbOpaqueData == NULL))
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pbOpaqueData");
        if ((lDataLength == 0) && (pbOpaqueData != NULL))
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"Invalid pbOpaqueData length");

		// Eliminate the last backslash from the volume name.
		BS_ASSERT(pwszVolumeName[0] != L'\0');
		BS_ASSERT(::wcslen(pwszVolumeName) == nLengthOfVolMgmtVolumeName);
		BS_ASSERT(pwszVolumeName[nLengthOfVolMgmtVolumeName - 1] == L'\\');
		pwszVolumeName[nLengthOfVolMgmtVolumeName - 1] = L'\0';

		// Remark: Volume ID is not computed right now.
		// TBD: change this in the future?

		// Create the structure that will keep the prepared snapshot state.
		VSS_OBJECT_PROP_Ptr ptrSnapshot;
		ptrSnapshot.InitializeAsSnapshot( ft,
			GUID_NULL,
			SnapshotSetId,
			NULL,
			NULL,
			GUID_NULL,
			pwszVolumeName,
			VSS_SWPRV_ProviderId,
			pwszDetails,
			lAttributes,
			CVsFileTime(),
			VSS_SS_PREPARING,
			0,
			0,
			lDataLength,
			pbOpaqueData
			);

		// Create the snapshot object. After this assignment the ref count becomes 1.
		CComPtr<CVssQueuedSnapshot> ptrQueuedSnap = new CVssQueuedSnapshot(ptrSnapshot);
		if (ptrQueuedSnap == NULL)
			ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Memory allocation error");

		// The structure was detached into the queued object
		// since the ownership was passed to the constructor.
		ptrSnapshot.Reset();

		// Add the snapshot object to the global queue. No exceptions should be thrown here.
		// The reference count will be 2.
		ptrQueuedSnap->AttachToGlobalList(ft);

		// Create the Snapshot COM object to be returned, if needed.
        if (ppSnapshot != NULL)
        {
            if ( (*ppSnapshot) != NULL)
			{
                (*ppSnapshot)->Release();
				(*ppSnapshot) = NULL;
			}

            // [Create the snapshot object. The reference count will be 3]
            ft.hr = CVsSoftwareSnapshot::CreateInstance(
						ptrQueuedSnap,
						reinterpret_cast<IUnknown**>(ppSnapshot) );
            if ( ft.HrFailed() )
                ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
						  L"Error calling CVsSoftwareSnapshot::CreateInstance. hr = 0x%08lx", ft.hr);
            BS_ASSERT( (*ppSnapshot) != NULL );
        }

        // The destructor for the smart pointer will be called. The reference count will be 1 [or 2]
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


/////////////////////////////////////////////////////////////////////////////
//  Global declarations


CVssDLList<CVssQueuedSnapshot*>	 CVssQueuedSnapshot::m_list;


STDMETHODIMP CVsTestProvider::EndPrepareSnapshots(
    IN      VSS_ID          SnapshotSetId,
    IN      LONG			lCommitFlags,
    OUT     LONG*           plSnapshotsCount
    )

/*++

Description:

	This function gets called by the coordinator as a rendez-vous method
    in order to finish the prepare phase for snapshots
    (like ending the background prepare tasks or performing the lengthly operations before
    issuing the snapshots freeze).

	This function acts on the given snapshot set (i.e. to call IOCTL_VOLSNAP_PREPARE_FOR_SNAPSHOT
    on each snapshotted volume)

Algorithm:

	For each preparing snapshot (but not prepared yet) in this snapshot set:
		1) Set the remaining properties to be set: lCommitFlags
		2) Call IOCTL_VOLSNAP_PREPARE_FOR_SNAPSHOT
		3) Change the state of the snapshot to VSS_SS_PREPARED

	Compute the number of prepared snapshots.

	If a snapshot fails in operations above then set the state of all snapshots
    to PREPARING and return E_UNEXPECTED. The coordinator is responsible to Abort
    all prepared snapshots.

Called by:

	IVssCoordiantor::DoSnapshotsSet in the first phase (i.e. EndPrepare All Snapshots).

Remarks:

	- While calling this, Lovelace is not holding yet writes on snapshotted volumes.
	- The coordinator may issue many EndPrepareSnapshots calls for the same Snapshot Set ID.
	- This function can be called on a subsequent retry of DoSnapshotSet or immediately
	after PrepareSnasphots therefore the state of all snapshots must be PREPARING before calling this function.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::EndPrepareSnapshots" );
	LONG lProcessedSnapshotsCount = 0;

    try
    {
        // Initialize [out] arguments
        VssZeroOut( plSnapshotsCount );

        // Argument validation
		if ( SnapshotSetId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotSetId == GUID_NULL");
		BS_ASSERT(plSnapshotsCount);
		if ( plSnapshotsCount == NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"plSnapshotsCount = NULL");

		// Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
			L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
			L"  lCommitFlags = 0x%04x\n",
			GUID_PRINTF_ARG( SnapshotSetId ),
			lCommitFlags
			);

		CVssSnapIterator snapIterator;
        while (true)
        {
			CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

			// End of enumeration?
			if (ptrQueuedSnapshot == NULL)
				break;

			// Get the snapshot structure
			PVSS_SNAPSHOT_PROP pProp = ptrQueuedSnapshot->GetSnapshotProperties();
			BS_ASSERT(pProp != NULL);

            ft.Trace( VSSDBG_SWPRV, L"Field values for %p: \n"
                 L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
                 L"  VolumeName = %s\n"
                 L"  pwszDetails = %s\n"
                 L"  Creation timestamp = " WSTR_LONGLONG_FMT L"\n"
                 L"  lAttributes = 0x%08lx\n"
                 L"  lDataLength = %ld\n"
                 L"  pbOpaqueData = %p\n"
                 L"  status = %d\n",
                 pProp,
                 GUID_PRINTF_ARG( pProp->m_SnapshotSetId ),
				 pProp->m_pwszOriginalVolumeName,
                 pProp->m_pwszDetails? pProp->m_pwszDetails: L"NULL",
                 LONGLONG_PRINTF_ARG( pProp->m_tsCreationTimestamp ),
                 pProp->m_lSnapshotAttributes,
                 pProp->m_lDataLength,
                 pProp->m_pbOpaqueData,
				 pProp->m_eStatus);

			// Deal only with the snapshots that must be pre-commited.
			switch(ptrQueuedSnapshot->GetStatus())
			{
			case  VSS_SS_PREPARING:

				// End the preparation for this snapshot
				try
				{
					// Set the per-snapshot commit information
					ptrQueuedSnapshot->SetCommitInfo( lCommitFlags );

					// Open the volume IOCTL channel for that snapshot.
					ptrQueuedSnapshot->OpenVolumeChannel(ft);
					if (ft.HrFailed())
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
								 L"Opening the channel failed 0x%08lx", ft.hr);
						
					// Send the IOCTL_VOLSNAP_PREPARE_FOR_SNAPSHOT ioctl.
					ft.hr = ptrQueuedSnapshot->PrepareForSnapshotIoctl();
					if (ft.HrFailed())
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
								 L"sending IOCTL_VOLSNAP_PREPARE_FOR_SNAPSHOT failed 0x%08lx", ft.hr);

					// Increment the number of processed snapshots
					lProcessedSnapshotsCount++;

					// Mark the snapshot as prepared
					ptrQueuedSnapshot->MarkAsPrepared();
				}
				VSS_STANDARD_CATCH(ft)
				{
					if (ft.HrFailed())
					{
						// Abort current prepared/precommited snapshot
						ft.hr = ptrQueuedSnapshot->AbortPreparedSnapshotIoctl();
						if (ft.HrFailed())
							ft.Warning( VSSDBG_SWPRV, L"sending IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT failed");

						// Mark the state of this snapshot as failed
						ptrQueuedSnapshot->MarkAsFailed();

						// If Throw an error and abort all snapshots.
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
									L"Opening the channel failed 0x%08lx", ft.hr);
					}
				}
				break;

			case VSS_SS_PREPARED:

				// Snapshot was already prepared in another call
				break;

			default:
				BS_ASSERT(false);
				ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"bad state %d", ptrQueuedSnapshot->GetStatus());
			}
        }

        ft.Trace( VSSDBG_SWPRV, L"%ld snasphots were prepared", lProcessedSnapshotsCount);
    }
    VSS_STANDARD_CATCH(ft)

	// If an error occured then reset all snapshots to the PREPARING state. This will prepare
	// the provider for another series of EndPrepare/PreCommit/Commit/PostCommit calls.
	if ( ft.HrFailed() )
		ResetSnasphotSet(ft, SnapshotSetId); // This methods should not throw errors
	else
		// Set the out parameter
		(*plSnapshotsCount) = lProcessedSnapshotsCount;

    return ft.hr;
}


STDMETHODIMP CVsTestProvider::PreCommitSnapshots(
    IN      VSS_ID          SnapshotSetId,
    IN      LONG			lCommitFlags,
    OUT     LONG*           plSnapshotsCount
    )

/*++

Description:

	This function gets called by the coordinator in order to pre-commit all snapshots
	on the given snapshot set

Algorithm:

	For each prepared snapshot (but not precommited yet) in this snapshot set:
		1) Change the state of the snapshot to VSS_SS_PRECOMMITED

	Compute the number of pre-commited snapshots.

	If a snapshot fails in operations above then set the state of all snapshots to PREPARING and return E_UNEXPECTED.
	The coordinator is responsible to Abort all pre-commited snapshots.

Called by:

	IVssCoordiantor::DoSnapshotsSet in the second phase (i.e. Pre-Commit All Snapshots).

Remarks:

	- While calling this, Lovelace is not holding yet writes on snapshotted volumes.
	- The coordinator may issue many PreCommitSnapshots calls for the same Snapshot Set ID.
	- This function can be called on a subsequent retry of DoSnapshotSet or immediately
	after EndPrepareSnasphots therefore the state of all snapshots must be PREPARED before calling this function.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::PreCommitSnapshots" );
	LONG lProcessedSnapshotsCount = 0;

    try
    {
        // Initialize [out] arguments
        VssZeroOut( plSnapshotsCount );

        // Argument validation
		if ( SnapshotSetId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotSetId == GUID_NULL");
		BS_ASSERT(plSnapshotsCount);
		if ( plSnapshotsCount == NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"plSnapshotsCount = NULL");

		// Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
			L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
			L"  lCommitFlags = 0x%04x\n",
			GUID_PRINTF_ARG( SnapshotSetId ),
			lCommitFlags
			);

		CVssSnapIterator snapIterator;
        while (true)
        {
			CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

			// End of enumeration?
			if (ptrQueuedSnapshot == NULL)
				break;

			// Get the snapshot structure
			PVSS_SNAPSHOT_PROP pProp = ptrQueuedSnapshot->GetSnapshotProperties();
			BS_ASSERT(pProp != NULL);

            ft.Trace( VSSDBG_SWPRV, L"Field values for %p: \n"
                 L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
                 L"  VolumeName = %s\n"
                 L"  pwszDetails = %s\n"
                 L"  Creation timestamp = " WSTR_LONGLONG_FMT L"\n"
                 L"  lAttributes = 0x%08lx\n"
                 L"  lDataLength = %ld\n"
                 L"  pbOpaqueData = %p\n"
                 L"  status = %d\n",
                 pProp,
                 GUID_PRINTF_ARG( pProp->m_SnapshotSetId ),
				 pProp->m_pwszOriginalVolumeName,
                 pProp->m_pwszDetails? pProp->m_pwszDetails: L"NULL",
                 LONGLONG_PRINTF_ARG( pProp->m_tsCreationTimestamp ),
                 pProp->m_lSnapshotAttributes,
                 pProp->m_lDataLength,
                 pProp->m_pbOpaqueData,
				 pProp->m_eStatus);

			// Deal only with the snapshots that must be pre-commited.
			switch(ptrQueuedSnapshot->GetStatus())
			{
			case  VSS_SS_PREPARED:

				// Pre-commit this snapshot

				// Increment the number of processed snapshots
				lProcessedSnapshotsCount++;

				// Mark the snapshot as pre-commited
                // Do nothing in Babbage provider
				ptrQueuedSnapshot->MarkAsPreCommited();

				break;

			case VSS_SS_PRECOMMITED:

				// Snapshot was already pre-commited in another call
				break;

			default:
				BS_ASSERT(false);
				ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"bad state %d", ptrQueuedSnapshot->GetStatus());
			}
        }

        ft.Trace( VSSDBG_SWPRV, L"%ld snasphots were pre-commited", lProcessedSnapshotsCount);
    }
    VSS_STANDARD_CATCH(ft)

	// If an error occured then reset all snapshots to the PREPARED state. This will prepare
	// the provider for another series of PreCommit/Commit/PostCommit calls.
	if ( ft.HrFailed() )
		ResetSnasphotSet(ft, SnapshotSetId); // This methods should not throw errors
	else
		// Set the out parameter
		(*plSnapshotsCount) = lProcessedSnapshotsCount;

    return ft.hr;
}


STDMETHODIMP CVsTestProvider::CommitSnapshots(
    IN      VSS_ID          SnapshotSetId,
    OUT     LONG*           plSnapshotsCount
    )

/*++

Description:

	This function gets called by the coordinator in order to commit all snapshots
	on the given snapshot set (i.e. to call IOCTL_VOLSNAP_COMMIT_SNAPSHOT on each snapshotted volume)

Algorithm:

	For each precommited (but not yet commited) snapshot in this snapshot set:
		2) Call IOCTL_VOLSNAP_COMMIT_SNAPSHOT
		3) Change the state of the snapshot to VSS_SS_COMMITED

	Return the number of commited snapshots, if success.
	Otherwise return 0 (even if some snapshots were commited).

	If a snapshot fails in operations above then set the state of all snapshots to PREPARED and return E_UNEXPECTED.
	The coordinator is responsible to Abort all snapshots if he does not want to retry anymore.
	Anyway commited snapshots MUST be deleted by coordinator in this error case.

Called by:

	IVssCoordinator::DoSnapshotsSet in the third phase (i.e. Commit All Snapshots).

Remarks:

	- While calling this, Lovelace is already holding writes on snapshotted volumes.
	- The coordinator may issue many CommitSnapshots calls for the same Snapshot Set ID.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::CommitSnapshots" );
	LONG lProcessedSnapshotsCount = 0;

    try
    {
        // Initialize [out] arguments
        VssZeroOut( plSnapshotsCount );

        // Argument validation
		if ( SnapshotSetId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotSetId == GUID_NULL");
		BS_ASSERT(plSnapshotsCount);
		if ( plSnapshotsCount == NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"plSnapshotsCount == NULL");

		// Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
			L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
			L"  plSnapshotsCount = %p\n",
			GUID_PRINTF_ARG( SnapshotSetId ),
			plSnapshotsCount);

		CVssSnapIterator snapIterator;
        while (true)
        {
			CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

			// End of enumeration?
			if (ptrQueuedSnapshot == NULL)
				break;

			// Get the snapshot structure
			PVSS_SNAPSHOT_PROP pProp = ptrQueuedSnapshot->GetSnapshotProperties();
			BS_ASSERT(pProp != NULL);

            ft.Trace( VSSDBG_SWPRV, L"Field values for %p: \n"
                 L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
                 L"  VolumeName = %s\n"
                 L"  pwszDetails = %s\n"
                 L"  Creation timestamp = " WSTR_LONGLONG_FMT L"\n"
                 L"  lAttributes = 0x%08lx\n"
                 L"  lDataLength = %ld\n"
                 L"  pbOpaqueData = %p\n"
                 L"  status = %d\n",
                 pProp,
                 GUID_PRINTF_ARG( pProp->m_SnapshotSetId ),
				 pProp->m_pwszOriginalVolumeName,
                 pProp->m_pwszDetails? pProp->m_pwszDetails: L"NULL",
                 LONGLONG_PRINTF_ARG( pProp->m_tsCreationTimestamp ),
                 pProp->m_lSnapshotAttributes,
                 pProp->m_lDataLength,
                 pProp->m_pbOpaqueData,
				 pProp->m_eStatus);

			// Commit the snapshot, if not failed in pre-commit phase.
			switch(ptrQueuedSnapshot->GetStatus())
			{
			case VSS_SS_PRECOMMITED:

				// Send the IOCTL_VOLSNAP_COMMIT_SNAPSHOT ioctl.
				ft.hr = ptrQueuedSnapshot->CommitSnapshotIoctl();
				if (ft.HrFailed())
				{
					// Send IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT.
					ft.hr = ptrQueuedSnapshot->AbortPreparedSnapshotIoctl();
					if (ft.HrFailed())
						ft.Warning( VSSDBG_SWPRV,
								  L"Sending IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT failed. hr = 0x%08lx", ft.hr);

					// Mark that snapshot as failed anyway
					ptrQueuedSnapshot->MarkAsFailed();
					
					// Throw an error and abort all snapshots.
					ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
								L"sending IOCTL_VOLSNAP_COMMIT_SNAPSHOT failed 0x%08lx", ft.hr);

					BS_ASSERT(ft.HrSucceeded());
				}
				else
				{
					// Increment the number of processed snapshots
					lProcessedSnapshotsCount++;

					// Mark the snapshot as commited
					ptrQueuedSnapshot->MarkAsCommited();
				}
				break;

			case VSS_SS_COMMITED:

				// Commit was already done.
				// The provider may receive many CommitSnapshots
				// calls for the same Snapshot Set ID.
				break;

			default:
				BS_ASSERT(false);
			}
        }

        ft.Trace( VSSDBG_SWPRV, L"%ld snasphots were commited", lProcessedSnapshotsCount);
    }
    VSS_STANDARD_CATCH(ft)

	// If an error occured then reset all snapshots to the PREPARED state. This will prepare
	// the snapshot set for another series of PreCommit/Commit/PostCommit calls.
	// The coordinator is responsible to delete all commited snapshots until now.
	if ( ft.HrFailed() )
	{
		// This methods should not throw errors
		ResetSnasphotSet(ft, SnapshotSetId);
	}
	else
		// Set the out parameter
		(*plSnapshotsCount) = lProcessedSnapshotsCount;

	return ft.hr;
}


STDMETHODIMP CVsTestProvider::PostCommitSnapshots(
    IN      VSS_ID          SnapshotSetId,
    IN      LONG            lSnapshotsCount
    )

/*++

Description:

	This function gets called by the coordinator as a last phase after commit for all snapshots
	on the given snapshot set

Algorithm:

	For each commited snapshot in this snapshot set:
		1) Call IOCTL_VOLSNAP_END_COMMIT_SNAPSHOT. The purpose of this
			IOCTL is to get the Snapshot Device object name.
		2) Create a unique snapshot ID
		3) Change the state of the snapshot to VSS_SS_CREATED
		4) Set the "number of commited snapshots" attribute of the snapshot set
		5) Save the snapshot properties using the IOCTL_VOLSNAP_SET_APPLICATION_INFO ioctl.
		6) If everything is OK then remove all snapshots from the global list.

	Keep the number of post-commited snapshots.

	If a snapshot fails in operations above then return an error. The coordinator is responsible to
	issue a DeleteSnapshots call on all snapshots in this snapshot set when an error occurs in this case.

Called by:

	IVssCoordinator::DoSnapshotsSet in the third phase (i.e. Commit All Snapshots), after releasing writes
	by Lovelace

Remarks:

	- While calling this, Lovelace is not holding writes anymore.
	- The coordinator may issue many PostCommitSnapshots calls for the same Snapshot Set ID.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::PostCommitSnapshots" );
	LPWSTR pwszSnapshotDeviceObject = NULL;
	LONG lProcessedSnapshotsCount = 0;

    try
    {
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
				  L"  SnapshotSetId = " WSTR_GUID_FMT L" \n"
				  L"  lSnapshotsCount = %ld",
				  GUID_PRINTF_ARG( SnapshotSetId ),
				  lSnapshotsCount);

        // Argument validation
		if ( SnapshotSetId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotSetId == GUID_NULL");
		if ( lSnapshotsCount < 0 )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"lSnapshotsCount < 0");

		// On each commited snapshot store the lSnapshotsCount
		CVssSnapIterator snapIterator;
        while (true)
        {
			CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

			// End of enumeration?
			if (ptrQueuedSnapshot == NULL)
				break;

			// Get the snapshot structure
			PVSS_SNAPSHOT_PROP pProp = ptrQueuedSnapshot->GetSnapshotProperties();
			BS_ASSERT(pProp != NULL);

            ft.Trace( VSSDBG_SWPRV, L"Field values for %p: \n"
                 L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
                 L"  VolumeName = %s\n"
                 L"  pwszDetails = %s\n"
                 L"  Creation timestamp = " WSTR_LONGLONG_FMT L"\n"
                 L"  lAttributes = 0x%08lx\n"
                 L"  lDataLength = %ld\n"
                 L"  pbOpaqueData = %p\n"
                 L"  status = %d\n",
                 pProp,
                 GUID_PRINTF_ARG( pProp->m_SnapshotSetId ),
				 pProp->m_pwszOriginalVolumeName,
                 pProp->m_pwszDetails? pProp->m_pwszDetails: L"NULL",
                 LONGLONG_PRINTF_ARG( pProp->m_tsCreationTimestamp ),
                 pProp->m_lSnapshotAttributes,
                 pProp->m_lDataLength,
                 pProp->m_pbOpaqueData,
				 pProp->m_eStatus);

			try
			{
				// Get the snapshot volume name and set the snapshot data.
				switch(ptrQueuedSnapshot->GetStatus())
				{
				case VSS_SS_COMMITED:

					// Send the IOCTL_VOLSNAP_END_COMMIT_SNAPSHOT ioctl.
					// Get the snapshot device name
					ft.hr = ptrQueuedSnapshot->EndCommitSnapshotIoctl(
								pwszSnapshotDeviceObject);
					if (ft.HrFailed())
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
								L"sending IOCTL_VOLSNAP_END_COMMIT_SNAPSHOT failed. 0x%08lx", ft.hr);

					BS_ASSERT(pwszSnapshotDeviceObject);
					BS_ASSERT(pProp->m_pwszSnapshotDeviceObject == NULL);
					pProp->m_pwszSnapshotDeviceObject = pwszSnapshotDeviceObject;
					pwszSnapshotDeviceObject = NULL;

					// Create the snapshot ID
					BS_ASSERT(pProp->m_SnapshotId == GUID_NULL);
					ft.hr = ::CoCreateGuid(&(pProp->m_SnapshotId));
					if (ft.HrFailed())
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Guid generation failed. 0x%08lx", ft.hr);
									
					// Remark: the snapshot device name will not be persisted

					// Mark the snapshot as created
					ptrQueuedSnapshot->MarkAsCreated(lSnapshotsCount);

					// Save the snapshot properties to the store.
					ft.hr = ptrQueuedSnapshot->SaveSnapshotPropertiesIoctl();
					if (ft.HrFailed())
						ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Saving snapshot info failed. 0x%08lx", ft.hr);

					// Increment the number of processed snapshots
					lProcessedSnapshotsCount++;

					ft.Trace( VSSDBG_SWPRV, L"Snapshot created at %s", pwszSnapshotDeviceObject);
					break;

				case VSS_SS_CREATED:

					// This snapshot is already created.
					// The provider may receive many PostCommitSnapshots
					// calls for the same Snapshot Set ID.
					break;

				default:
					BS_ASSERT(false);
				}
			}
			VSS_STANDARD_CATCH(ft)

			// Check if an error occured during post-commit of this snapshot.
			if (ft.HrFailed())
			{
				// Delete the snapshot.
				ft.hr = ptrQueuedSnapshot->DeleteSnapshotIoctl();
				if (ft.HrFailed())
					ft.Warning( VSSDBG_SWPRV,
							  L"Deleting the snapshot failed. hr = 0x%08lx", ft.hr);

				// Mark that snapshot as failed anyway
				ptrQueuedSnapshot->MarkAsFailed();
				
				// Throw an error to let know
				// the Coordinator to delete all snapshots.
				ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
							L"Error while post-commiting the snapshot");
			}
			else
				ft.hr = S_OK;
        } // end while(true)

		// As the last step detach from the global list the snapshots in discussion
        RemoveSnapshotSetFromGlobalList(ft, SnapshotSetId);
    }
    VSS_STANDARD_CATCH(ft)

	// Free the snapshot device name, if needed.
	::VssFreeString(pwszSnapshotDeviceObject);

	// If an error occured then reset all snapshots to the PREPARED state. This will prepare
	// the provider for another series of PreCommit/Commit/PostCommit calls.
	if ( ft.HrFailed() )
	{
		// This methods should not throw errors
		ResetSnasphotSet(ft, SnapshotSetId);
	}

    return ft.hr;
}


STDMETHODIMP CVsTestProvider::AbortSnapshots(
    IN      VSS_ID          SnapshotSetId
    )

/*++

Description:

	This function gets called by the coordinator as to abort all snapshots from the given snapshot set

Algorithm:

 	For each pre-commited snapshot in this snapshot set calls IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT.
 	After that remove all snapshots from the global list.

Called by:

	IVssCoordinator::DoSnapshotsSet to abort precommited snapshots

Remarks:

	- While calling this, Lovelace may be holding writes on snapshotted volumes.
	- The coordinator may receive many AbortSnapshots calls for the same Snapshot Set ID.

--*/

{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::AbortSnapshots" );

    try
    {
        // Argument validation
		if ( SnapshotSetId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotSetId == GUID_NULL");

		// Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
			L"  SnapshotSetId = " WSTR_GUID_FMT L"\n",
			GUID_PRINTF_ARG( SnapshotSetId ));

		LONG lProcessedSnapshotsCount = 0;
		CVssSnapIterator snapIterator;
        while (true)
        {
			CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

			// End of enumeration?
			if (ptrQueuedSnapshot == NULL)
				break;

			// Get the snapshot structure
			PVSS_SNAPSHOT_PROP pProp = ptrQueuedSnapshot->GetSnapshotProperties();
			BS_ASSERT(pProp != NULL);

            ft.Trace( VSSDBG_SWPRV, L"Field values for %p: \n"
                 L"  SnapshotSetId = " WSTR_GUID_FMT L"\n"
                 L"  VolumeName = %s\n"
                 L"  pwszDetails = %s\n"
                 L"  Creation timestamp = " WSTR_LONGLONG_FMT L"\n"
                 L"  lAttributes = 0x%08lx\n"
                 L"  lDataLength = %ld\n"
                 L"  pbOpaqueData = %p\n"
                 L"  status = %d\n",
                 pProp,
                 GUID_PRINTF_ARG( pProp->m_SnapshotSetId ),
				 pProp->m_pwszOriginalVolumeName,
                 pProp->m_pwszDetails? pProp->m_pwszDetails: L"NULL",
                 LONGLONG_PRINTF_ARG( pProp->m_tsCreationTimestamp ),
                 pProp->m_lSnapshotAttributes,
                 pProp->m_lDataLength,
                 pProp->m_pbOpaqueData,
				 pProp->m_eStatus);

			// Set the correct state
			switch(ptrQueuedSnapshot->GetStatus())
			{
			case VSS_SS_PREPARED:
			case VSS_SS_PRECOMMITED:

				// If snapshot was prepared, send IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT.
				ft.hr = ptrQueuedSnapshot->AbortPreparedSnapshotIoctl();
				if (ft.HrFailed())
					ft.Warning( VSSDBG_SWPRV, L"sending IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT failed");

				// Mark the snapshot state as "aborted"
				ptrQueuedSnapshot->MarkAsAborted();

                break;

			case VSS_SS_PREPARING:

				// Mark the snapshot state as "aborted"
				ptrQueuedSnapshot->MarkAsAborted();

				break;

			case VSS_SS_COMMITED:

				// The coordinator must delete the snapshot explicitely.
                // It might be there if the snapshot is garbage collected.

                break;

			default:
				BS_ASSERT(false);
			}

			lProcessedSnapshotsCount++;
        }

        ft.Trace( VSSDBG_SWPRV, L"%ld snasphots were aborted", lProcessedSnapshotsCount);

		// As the last step detach from the global list the snapshots in discussion
        RemoveSnapshotSetFromGlobalList(ft, SnapshotSetId);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


void CVsTestProvider::ResetSnasphotSet(
	IN	CVssFunctionTracer& ft,
	IN	VSS_ID SnapshotSetId
	) throw(HRESULT)

/*++

Description:

	Reset the snapshots in this set. Prepare all snapshots to be subject for another
	EndPrepareSnapshots call.

Remark:

	We change the state of all snapshots to PREPARING and free any internal data
	that was possibly created during EndPrepareSnapshots, PreCommitSnapshots,
    CommitSnapshots, PostCommitSnapshots.

	This function should not throw errors!

Called by:

	EndPrepareSnasphots, PreCommitSnapshots, CommitSnapshots, PostCommitSnapshots

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	try
	{
		BS_ASSERT(SnapshotSetId != GUID_NULL);

		// For each snapshot in the snapshot set...
		LONG lProcessedSnapshotsCount = 0;
		CVssSnapIterator snapIterator;
	    while (true)
	    {
			CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

			// End of enumeration?
			if (ptrQueuedSnapshot == NULL)
				break;

			// Reset the snapshot state (change the snapshot state to PREPARE)
			// and deallocate all structures that were allocated during PreCommit, Commit and PostCommit.
			ptrQueuedSnapshot->ResetAsPreparing();
			
			lProcessedSnapshotsCount++;
		}

		ft.Trace( VSSDBG_SWPRV, L" %ld snapshots were reset to PREPARING", lProcessedSnapshotsCount);
	}
	VSS_STANDARD_CATCH(ft)

	if (ft.HrFailed())
		ft.Trace( VSSDBG_SWPRV, L"Suspect error while resetting all snapshots to PREPARE 0x%08lx", ft.hr);
}


void CVsTestProvider::RemoveSnapshotSetFromGlobalList(
	IN	CVssFunctionTracer& ft,
	IN	VSS_ID SnapshotSetId
	) throw(HRESULT)

/*++

Description:

	Detach from the global list all snapshots in this snapshot set

Remark:

	We detach all snapshots at once only in case of total success or total failure.
	This is because we want to be able to retry DoSnapshotSet if a failure happens.
	Therefore we must keep the list of snapshots as long as the client wants.

Called by:

	PostCommitSnapshots, AbortSnapshots

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	BS_ASSERT(SnapshotSetId != GUID_NULL);

	// For each snapshot in the snapshot set...
	LONG lProcessedSnapshotsCount = 0;
	CVssSnapIterator snapIterator;
    while (true)
    {
		CComPtr<CVssQueuedSnapshot> ptrQueuedSnapshot = snapIterator.GetNext(SnapshotSetId);

		// End of enumeration?
		if (ptrQueuedSnapshot == NULL)
			break;
			
		// Detach that element from the list. Release is called.
		ptrQueuedSnapshot->DetachFromGlobalList();
		
		lProcessedSnapshotsCount++;
	}

	ft.Trace( VSSDBG_SWPRV, L" %ld snapshots were detached", lProcessedSnapshotsCount);
}


STDMETHODIMP CVsTestProvider::GetSnapshot(
    IN      VSS_ID          SnapshotId,
    IN      REFIID          SnapshotInterfaceId,
    OUT     IUnknown**      ppSnapshot
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::GetSnapshot" );

    try
    {
        // Initialize [out] arguments
        VssZeroOutPtr(ppSnapshot);

        ft.Trace( VSSDBG_SWPRV, L"Parameters: \n"
             L"  SnapshotId = " WSTR_GUID_FMT 	L"\n"
             L"  ppSnapshot = %p,\n",
             GUID_PRINTF_ARG( SnapshotId ),
             ppSnapshot);

        // Argument validation
		if ( SnapshotId == GUID_NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"SnapshotId == GUID_NULL");
		BS_ASSERT(ppSnapshot);
        if ( ppSnapshot == NULL )
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL ppSnapshot");

		//	Search for that snapshot

		// Get an enumeration interface
		CComPtr<IVssEnumObject> pEnum;
		ft.hr = CVsTestProvider::Query( SnapshotId, VSS_OBJECT_SNAPSHOT, VSS_OBJECT_SNAPSHOT,
					VSS_PM_ALL_FLAGS, &pEnum);

		//  Create the structure that will keep the prepared snapshot properties.
		VSS_OBJECT_PROP_Ptr ptrSnapshot;
		ptrSnapshot.InitializeAsEmpty(ft);

		// Get the Next object in the newly allocated structure object.
		VSS_OBJECT_PROP* pProp = ptrSnapshot.GetStruct();
		BS_ASSERT(pProp);
		ULONG ulFetched;
		ft.hr = pEnum->Next(1, pProp, &ulFetched);

		// end of enumeration - this means no snapshots
		if (ft.hr == S_FALSE)
			ft.Throw( VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND, L"Snapshot not found");
		if (ft.HrFailed())
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error while getting hte snapshot structure 0x%08lx", ft.hr);

		// The returned object must be a snapshot
		BS_ASSERT(pProp->Type == VSS_OBJECT_SNAPSHOT);
		
		// Create the snapshot object.

		// After this assignment the ref count becomes 1.
		CComPtr<CVssQueuedSnapshot> ptrQueuedSnap = new CVssQueuedSnapshot(ptrSnapshot);
		if (ptrQueuedSnap == NULL)
			ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Memory allocation error");

		// The structure was detached into the queued object
		// since the ownership was passed to the constructor.
		ptrSnapshot.Reset();

        // Create the snapshot object. The reference count will be 2
        ft.hr = CVsSoftwareSnapshot::CreateInstance( ptrQueuedSnap, ppSnapshot, SnapshotInterfaceId );
        if ( ft.HrFailed() )
            ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
					  L"Error calling CVsSoftwareSnapshot::CreateInstance. hr = 0x%08lx", ft.hr);
        BS_ASSERT( (*ppSnapshot) != NULL );

        // The destructor for the smart pointer will be called. The reference count will be 1 again
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsTestProvider::GetExtension(	
	IN VSS_PWSZ pwszObjectConstructor,			
	IN REFIID InterfaceId, 				
	OUT IUnknown** ppProviderExtensionObject
	)												
{
    CVssFunctionTracer ft( VSSDBG_COORD, L"CVsTestProvider::GetExtension" );

    try
    {
        // Initialize [out] arguments
        VssZeroOutPtr( ppProviderExtensionObject );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_COORD, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        // Trace parameters
        ft.Trace( VSSDBG_COORD, L"Parameters: \n"
             L"  pwszObjectConstructor = %s\n"
             L"  InterfaceId = " WSTR_GUID_FMT L"\n"
             L"  ppProviderExtensionObject = %p\n",
             pwszObjectConstructor? pwszObjectConstructor: L"NULL",
             GUID_PRINTF_ARG( InterfaceId ),
             ppProviderExtensionObject);

        // Argument validation
		BS_ASSERT(ppProviderExtensionObject);
        if (ppProviderExtensionObject == NULL)
            ft.Throw( VSSDBG_COORD, E_INVALIDARG, L"NULL ppProviderExtensionObject");

		ft.Throw( VSSDBG_COORD, E_UNEXPECTED, L"Unknown interface ID.");
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsTestProvider::OnLoad(
	IN  	IUnknown* pCallback	
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::OnLoad" );

    return S_OK;
    UNREFERENCED_PARAMETER(pCallback);
}


STDMETHODIMP CVsTestProvider::OnUnload(
	IN  	BOOL	bForceUnload				
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::OnUnload" );

	// TBD - abort all snapshots

    return S_OK;
    UNREFERENCED_PARAMETER(bForceUnload);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\persist.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Persist.hxx | Defines the internal snapshot persistency-related methods.
    @end

Author:

    Adi Oltean  [aoltean]   01/10/2000

Revision History:

    Name        Date        Comments

    aoltean     01/10/2000  Created.


Storage Format for all structures:

	The snapshot structures for the MS Software Snapshot Provider
	have the following format:

	+-----------------+
	| Snapshot ID     |   GUID: Snapshot ID
	|                 |
	|                 |
	|                 |
	+-----------------+
	| Snapshot Set ID |   GUID: Snapshot Set ID
	|                 |
	|                 |
	|                 |
	+-----------------+
	| Snapshots count |   LONG: Snapshots count in the snapshot set.
	+-----------------+
	| Reserved        |   DWORD: Global reserved field. Can be zero.
	+-----------------+
	| #Structs  |      USHORT: Number of structures
	+--------------+
	| Struct1 ID   |   GUID: Unique structure format ID
	|              |
	+--------------+
	| Struct1 Len  |   DWORD: Structure length, in bytes.
	+--------------+
	| Struct1 data |   BYTE[]: Structure data
	| ...          |
	|              |
	+--------------+
	| Struct2 ID   |
	|              |
	+--------------+
	| Struct2 Len  |
	+--------------+
	| Struct2 data |
	| ...          |
	|              |
	+--------------+
	| ....         |
	+--------------+
	| StructN ID   |
	|              |
	+--------------+
	| StructN Len  |
	+--------------+
	| StructN data |
	| ...          |
	|              |
	+--------------+

	Each structure format may be dependent on the used CPU (alignment, byte ordering).
	The snapshot ID, snapshot set ID, etc. members above follows the x86 alignment and byte ordering format.

Storage format for the structure data for MS Software Provider version 1.0 for x86 and ia64 families:
	
	+--------+
	|Magic no|   USHORT: The magic number. Must be the VSS_SNAPSHOT_PROP length.
	+--------+
	|Reserved|   ULONG: Reserved field. Can be zero.
	+--------+
	| Len    |   USHORT: Details length, in WCHARs
	+--------+
	| Name   |   WCHAR[]: Details
	| ...    |
	+--------+
	| Flags  |   LONG: Commit flags
	+----------------+
	| Timestamp      |   VSS_TIMESTAMP: Creation timestamp
	|                |
	+----------------+
	| Status |   USHORT: Snapshot state
	+----------------+
	| Inc. no        |   LONGLONG: Incarnation number
	|                |
	+----------------+
	| Data len       |   LONG: Data length, in bytes
	+----------------+
	|Data|   BYTE[]: Data.
	|    |
	|    |
	+----+

Conventions:

	The meaning of fields set by this version of the MS Software Provider:

	 1) if "field value can be X" the provider:
	 - will write X onto that field when writing snapshot attributes at creation time.
	 - will write X' onto that field when writing snapshot attributes after creation time.
	   (X' = the previous value).
	 - will ignore the meaning of the field when reading snapshot attributes

	 2) if "field value must be X" the provider:
	 - will write X onto that field when writing snapshot attributes
	 - will throw an error if the field is not X when reading snapshot attributes

Storage place:

	typedef struct _VSS_SNAPSHOT_SET_PROP {						Method 						Set IOCTL								Get IOCTL								Remarks
		VSS_ID			m_SnapshotSetId;					//	SaveSnapshotPropertiesIoctl	IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		LONG			m_lSnapshotsCount;					//	SaveSnapshotPropertiesIoctl	IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
	} VSS_SNAPSHOT_SET_PROP, *PVSS_SNAPSHOT_SET_PROP;

	typedef struct _VSS_SNAPSHOT_PROP {
		VSS_ID			m_SnapshotId;						//	SaveSnapshotPropertiesIoctl	IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO	We need a special IOCTL in the future
		VSS_ID			m_SnapshotSetId;					//	SaveSnapshotPropertiesIoctl	IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO	Mentioned above
		VSS_PWSZ		m_pwszSnapshotVolumeName;			//	GetSnapshotVolumeName		None									None									Computed at request from the snapshot device name.
		VSS_PWSZ		m_pwszSnapshotDeviceObject; 		//	None						IOCTL_VOLSNAP_QUERY_NAMES_OF_SNAPSHOTS	None
		VSS_ID			m_OriginalVolumeId; 				//	LoadOriginalVolumeNameIoctl	IOCTL_VOLSNAP_QUERY_ORIGINAL_VOLUME_NAME None									
		VSS_PWSZ		m_pwszOriginalVolumeName;			//	LoadOriginalVolumeNameIoctl	IOCTL_VOLSNAP_QUERY_ORIGINAL_VOLUME_NAME None									Passed at creation
		VSS_ID			m_ProviderId;						//	None																None 									Already known (constant)
		LONG			m_lSnapshotAttributes;				//  Get/SetAttributes 			IOCTL_VOLSNAP_SET_ATTRIBUTE_INFO		IOCTL_VOLSNAP_QUERY_CONFIG_INFO			Also specified at creation
		VSS_PWSZ		m_pwszDetails;						//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		LONG			m_lCommitFlags; 					//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		VSS_TIMESTAMP	m_tsCreationTimestamp;				//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		VSS_SNAPSHOT_STATE	m_eStatus;						//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		LONGLONG		m_llIncarnationNumber;				//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		LONG			m_lDataLength;						//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
		[size_is(m_lDataLength)] BYTE* m_pbOpaqueData;		//	SaveStandardStructure		IOCTL_VOLSNAP_SET_APPLICATION_INFO		IOCTL_VOLSNAP_QUERY_APPLICATION_INFO
	} VSS_SNAPSHOT_PROP, *PVSS_SNAPSHOT_PROP;				

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"

#include "ntddsnap.h"


/////////////////////////////////////////////////////////////////////////////
// CVssQueuedSnapshot::SaveXXX methods
//


HRESULT CVssQueuedSnapshot::SaveSnapshotPropertiesIoctl()

/*++

Description:

	This function will save the properties related to the snapshot

--*/

{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::SaveSnapshotPropertiesIoctl");

	try
	{
		PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// Open the snapshot channel, if needed.
		OpenSnapshotChannel(ft);

		// Pack the length of the entire buffer
		PULONG pulBufferLength = m_snapIChannel.Pack(ft, (ULONG)0 ); // unknown right now
		
		// Start counting entire buffer length
		DWORD dwInitialOffset = m_snapIChannel.GetCurrentInputOffset();
		
		// Pack the Snapshot ID
		m_snapIChannel.Pack(ft, pProp->m_SnapshotId);
		
		// Pack the Snapshot Set ID
		m_snapIChannel.Pack(ft, pProp->m_SnapshotSetId);
		
		// Pack the number of snapshots in this snapshot set
		m_snapIChannel.Pack(ft, m_lSnapshotsCount);

		// Pack the reserved field - default value = 0
		m_snapIChannel.Pack(ft, m_dwGlobalReservedField);

		// Pack the number of structures (one standard and the rest nonstandard)
		m_snapIChannel.Pack(ft, (USHORT)(m_usNumberOfNonstdSnapProperties + 1));

		// Pack the standard properties structure,Save as the first one.
		SaveStandardStructure( ft, pProp );

		// Pack the non-standard properties structures (that were loaded by a previous call).
		if (CVssGenericSnapProperties* pNonstdElement = m_pOpaqueSnapPropertiesList)
			pNonstdElement->SaveRecursivelyIntoStream( ft, m_snapIChannel );
		
		// Compute the entire buffer length and save it.
		// TBD: move to ULONG
		DWORD dwFinalOffset = m_snapIChannel.GetCurrentInputOffset();
		
		BS_ASSERT( dwFinalOffset > dwInitialOffset );
		DWORD dwBufferLength = dwFinalOffset - dwInitialOffset;
		if ( dwBufferLength > (DWORD)((USHORT)(-1)) )
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
					L"Error: the buffer length cannot be stored in a USHORT %ld", dwBufferLength );
					
		BS_ASSERT( pulBufferLength );
		(*pulBufferLength) = (ULONG)dwBufferLength;
		BS_ASSERT( (DWORD)*pulBufferLength == dwBufferLength );

		// send the IOCTL
		m_snapIChannel.Call(ft, IOCTL_VOLSNAP_SET_APPLICATION_INFO);
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


void CVssQueuedSnapshot::SaveStandardStructure(
		IN	CVssFunctionTracer& ft,
		IN	PVSS_SNAPSHOT_PROP pProp
		) throw(HRESULT)
/*++

Description:

	This function will save the standard set of attributes (in this version of the provider)
	in the x86 and IA64 format.

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	// Pack the structure Format ID
	m_snapIChannel.Pack(ft, guidSnapshotPropVersion10 );

	// Pack the length of the data structure
	PDWORD pdwStructureLength = m_snapIChannel.Pack(ft, (DWORD)0 ); // unknown right now

	// Start counting structure length
	DWORD dwInitialOffset = m_snapIChannel.GetCurrentInputOffset();
	
	// Pack the magic number
	m_snapIChannel.Pack(ft, (USHORT)sizeof(VSS_SNAPSHOT_PROP));
	
	// Pack the reserved field
	m_snapIChannel.Pack(ft, m_usReserved);
	
	//
	// Pack the contents of the snapshot structure
	//
	BS_ASSERT(pProp != NULL);
	
	// Pack the Details
	m_snapIChannel.PackSmallString(ft, pProp->m_pwszDetails);

	// Pack the Commit flags
	m_snapIChannel.Pack(ft, pProp->m_lCommitFlags);

	// Pack the creation timestamp
	m_snapIChannel.Pack(ft, pProp->m_tsCreationTimestamp);

	// Pack the status
	m_snapIChannel.Pack(ft, (USHORT)pProp->m_eStatus);

	// Pack the incarnation number
	m_snapIChannel.Pack(ft, pProp->m_llIncarnationNumber);

	// Pack the opaque length and data
	m_snapIChannel.Pack(ft, pProp->m_lDataLength);

	if (pProp->m_lDataLength)
	{
		BS_ASSERT(pProp->m_pbOpaqueData);
		m_snapIChannel.PackArray(ft, pProp->m_pbOpaqueData, pProp->m_lDataLength);
	}
	else
		BS_ASSERT(pProp->m_pbOpaqueData == NULL);
		
	// Complete the length of the data structure
	DWORD dwFinalOffset = m_snapIChannel.GetCurrentInputOffset();
	BS_ASSERT( dwFinalOffset > dwInitialOffset );
	
	BS_ASSERT(pdwStructureLength);
	(*pdwStructureLength) = dwFinalOffset - dwInitialOffset;
}


void CVssQueuedSnapshot::SetAttributes(
	IN	CVssFunctionTracer& ft,
	IN	ULONG lNewAttributes,		// New attributes
	IN	ULONG lBitsToChange 		// Mask of bits to be changed
	) throw(HRESULT)

/*++

Description:

	Load the snapshot attributes mask.
	Uses IOCTL_VOLSNAP_QUERY_CONFIG_INFO and IOCTL_VOLSNAP_SET_ATTRIBUTE_INFO.

Warning:

	The snapshot device name must be already known!

--*/

{
	/*

	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL)
	{
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	// Open the snapshot channel, if needed.
	OpenSnapshotChannel(ft);

	// For all bits to be set
	for( LONG lRemainingBits = lBitsToChange; lRemainingBits; lRemainingBits &= lRemainingBits-1)
	{
		// Get the next bit (starting with the least signifiant bit that is set)
		LONG lNextBit = lRemainingBits ^ ~(lRemainingBits - 1);
		BS_ASSERT(lNextBit);

		// We do not rollback these changes!
		m_snapIChannel.Pack(ft, lNextBit);
		m_snapIChannel.Pack(ft, lNextBit & lNewAttibutes);
		
		// Send the IOCTL.
		m_snapIChannel.Call(ft, IOCTL_VOLSNAP_SET_ATTRIBUTE_INFO);
	}

	*/

	// Reset the error code
	ft.hr = S_OK;
		
	ft.Throw( VSSDBG_SWPRV, E_NOTIMPL, L"Set attributs not implemented");
	UNREFERENCED_PARAMETER(lNewAttributes);
	UNREFERENCED_PARAMETER(lBitsToChange);
}



/////////////////////////////////////////////////////////////////////////////
// CVssQueuedSnapshot::LoadXXX methods
//



void CVssQueuedSnapshot::LoadSnapshotProperties(
	IN	CVssFunctionTracer& ft,
	IN	LONG lMask,
	IN	bool bGetOnly
	) throw(HRESULT)

/*++

Description:

	This method loads various properties of a snapshot.
	It can call:
		- LoadDeviceNameFromID to load the device name
		- LoadStandardStructures to load the properties kept in the Application data
		- LoadAttributes to load the attributes mask
		- GetSnapshotVolumeName to get the snapshot volume name
		- LoadOriginalVolumeIoctl for getting the original volume name

	If bGetOnly == true then this method was called in a Get call.
	Otherwise it was called in a Set call.

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	// Get the snapshot properties structure
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL)
	{
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	// Assume that the Snapshot is completed
	BS_ASSERT(!IsDuringCreation());
	BS_ASSERT(pProp->m_SnapshotId != GUID_NULL);
	
	// If the device name is not completed, search for it
	if (pProp->m_pwszSnapshotDeviceObject == NULL)
	{
		// Try to find a created snapshot with this ID
		bool bFound = FindDeviceNameFromID(ft);
		
		// Handle the "snapshot not found" special error
		if (!bFound)
			ft.Throw(VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND,
					L"A snapshot with Id" WSTR_GUID_FMT L"was not found",
					GUID_PRINTF_ARG(pProp->m_SnapshotId) );
		BS_ASSERT(pProp->m_pwszSnapshotDeviceObject != NULL);
	}

	// Load the needed fields saved in snapshot header and standard structure
	// Do not load the non-standard structures since this is only a Get call
	ft.hr = LoadSnapshotStructures(lMask, bGetOnly);
	if (ft.HrFailed())
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error loading snapshot properties");

	// Load the snapshot attributes, if needed
	if (lMask & VSS_PM_ATTRIBUTES_FLAG)
		LoadAttributes(ft);
	else
		pProp->m_lSnapshotAttributes = 0;

	if (pProp->m_lSnapshotAttributes & VSS_VOLSNAP_ATTR_VISIBLE)
	{
		// Get the snapshot volume name
		if (lMask & VSS_PM_NAME_FLAG)
			GetSnapshotVolumeName(ft, pProp);
	}

	// Get the original volume name and Id, if needed
	if (lMask & VSS_PM_ORIGINAL_NAME_FLAG)
		LoadOriginalVolumeNameIoctl(ft);
}


HRESULT CVssQueuedSnapshot::LoadSnapshotStructures(
	IN	LONG lMask,
	IN	bool bForGetOnly
	)

/*++

Description:

	Called for retrieving the attributes of snapshots.

	If bForGetOnly is true we will NOT load the non-standard structures and we
	will load only the fields indicated in the mask.
	
	If bForGetOnly is false then this call precedes a Set call. In consequence
	we will load the non-standard structures and all fields in the standard structure.

	For searchig for a certain snapshot use SearchSnapshot


TBD:

	Optimize to not load non-std structs when bForGetOnly = true.

Warning:

	The snapshot device name must be already known!

--*/

{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::LoadSnapshotStructures");

	try
	{

		// If the call is part of a Set then ignore lMask
		if (!bForGetOnly)
			lMask = VSS_PM_ALL_FLAGS;

		// Get the snapshot structure
		PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// Open the snapshot channel, if needed.
		OpenSnapshotChannel(ft);

		// send the IOCTL.
		m_snapIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_APPLICATION_INFO);

		// Unpack the length of the entire buffer
		ULONG ulBufferLength = 0;
		m_snapIChannel.Unpack(ft, &ulBufferLength );
		
#ifdef _DEBUG
		// Start counting entire buffer length, for checking
		DWORD dwInitialOffset = m_snapIChannel.GetCurrentOutputOffset();
#endif
		
		// Unpack the Snapshot ID
		m_snapIChannel.Unpack(ft, &(pProp->m_SnapshotId));
		
		// Unpack the Snapshot Set ID
		m_snapIChannel.Unpack(ft, &(pProp->m_SnapshotSetId));
		m_SSID = pProp->m_SnapshotSetId;

		// Load the rest of properties, except IDs
		LoadSnapshotStructuresExceptIDs(ft, m_snapIChannel, pProp, lMask, bForGetOnly,
			m_lSnapshotsCount,m_dwGlobalReservedField,
			m_usNumberOfNonstdSnapProperties,m_pOpaqueSnapPropertiesList, m_usReserved);
		
		// Compute the entire buffer length and check it.
#ifdef _DEBUG
		DWORD dwFinalOffset = m_snapIChannel.GetCurrentOutputOffset();
		BS_ASSERT( dwFinalOffset > dwInitialOffset );
		BS_ASSERT( dwFinalOffset - dwInitialOffset == ulBufferLength );
#endif
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


void CVssQueuedSnapshot::LoadSnapshotStructuresExceptIDs(
	IN	CVssFunctionTracer& ft,
	IN	CVssIOCTLChannel& snapIChannel,
	IN	PVSS_SNAPSHOT_PROP pProp,
	IN	LONG lMask,
	IN	bool bForGetOnly,
	OUT LONG& lSnapshotsCount,
	OUT DWORD& dwGlobalReservedField,
	OUT USHORT& usNumberOfNonstdSnapProperties,
	OUT CVssGenericSnapProperties* & pOpaqueSnapPropertiesList,
	OUT USHORT& usReserved
	) throw(HRESULT)
{
	// Reset the error code
	ft.hr = S_OK;
		
	// Unpack the number of snapshots in this snapshot set
	snapIChannel.Unpack(ft, &lSnapshotsCount);

	// Unpack the reserved field
	snapIChannel.Unpack(ft, &dwGlobalReservedField);

	// Unpack the number of structures (one standard and the rest nonstandard)
	USHORT usStructuresCount;
	snapIChannel.Unpack(ft, &usStructuresCount);
	usNumberOfNonstdSnapProperties = 0;

	// Unpack each structure
	for(USHORT usIndex = 0; usIndex < usStructuresCount; usIndex++)
	{
		VSS_ID CurrentStructureID;
		snapIChannel.Unpack(ft, &CurrentStructureID);

		if (CurrentStructureID == guidSnapshotPropVersion10)
		{
			// The structure is a standard one
			LoadStandardStructure( ft, snapIChannel, pProp,
				lMask, usReserved );
		}
		else if (!bForGetOnly)
		{
			// The structure is a non-standard one
			CVssGenericSnapProperties* pStr = new CVssGenericSnapProperties;
			if (pStr == NULL)
				ft.Throw(VSSDBG_SWPRV, E_OUTOFMEMORY, L"Out of memory");

			// Initialize the structure from the stream
			pStr->InitializeFromStream( ft, snapIChannel, CurrentStructureID);

			// Append the structure to the list of opaque
			// (i.e. non-standard) structures.
			pStr->AppendToList(pOpaqueSnapPropertiesList);
		}
	}
}


void CVssQueuedSnapshot::LoadStandardStructure(
		IN	CVssFunctionTracer& ft,
		IN	CVssIOCTLChannel& snapIChannel,
		IN	PVSS_SNAPSHOT_PROP pProp,
		IN	LONG lMask,
		OUT USHORT& usReserved
		) throw(HRESULT)
		
/*++

Description:

	This function will load the standard set of attributes (in this version of the provider)
	in the x86 / IA64 format.

TBD:

	Use mask

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	// Unpack the length of the data structure
	DWORD dwStructureLength;
	snapIChannel.Unpack(ft, &dwStructureLength ); // unknown right now

#ifdef _DEBUG
	// Start counting structure length
	DWORD dwInitialOffset = snapIChannel.GetCurrentOutputOffset();
#endif
	
	// Unpack the magic number
	USHORT usMagicNumber;
	snapIChannel.Unpack(ft, &usMagicNumber);
	if (usMagicNumber != (USHORT)sizeof(VSS_SNAPSHOT_PROP))
		ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED, L"Invalid magic number %u", (UINT)usMagicNumber);
	
	// Unpack the reserved field
	snapIChannel.Unpack(ft, &usReserved);
	
	//
	// Unpack the contents of the snapshot structure
	//
	BS_ASSERT(pProp != NULL);
	
	// Unpack the Details
	snapIChannel.UnpackSmallString(ft, pProp->m_pwszDetails);

	// Unpack the Commit flags
	snapIChannel.Unpack(ft, &(pProp->m_lCommitFlags));

	// Unpack the creation timestamp
	snapIChannel.Unpack(ft, &(pProp->m_tsCreationTimestamp));

	// Unpack the status
	USHORT usStatus;
	snapIChannel.Unpack(ft, &usStatus);
	pProp->m_eStatus = (VSS_SNAPSHOT_STATE)usStatus;

	// Unpack the incarnation number
	snapIChannel.Unpack(ft, &(pProp->m_llIncarnationNumber));

	// Unpack the opaque length and data
	snapIChannel.Unpack(ft, &(pProp->m_lDataLength));

	BS_ASSERT(pProp->m_pbOpaqueData == NULL);
	::VssFreeOpaqueData(pProp->m_pbOpaqueData);
	if (pProp->m_lDataLength > 0)
	{
		// Allocate the opaque data buffer
		pProp->m_pbOpaqueData = ::VssAllocOpaqueData(ft, pProp->m_lDataLength);
		BS_ASSERT(pProp->m_pbOpaqueData);

		// Extract the opaque data
		snapIChannel.Unpack(ft, pProp->m_pbOpaqueData, pProp->m_lDataLength);
	}
	else if (pProp->m_lDataLength == 0)
	{
		// Now the opaque data must remain NULL
		BS_ASSERT(pProp->m_pbOpaqueData == NULL);
	}
	else
	{
		BS_ASSERT(false);
		ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED, L"Invalid data length %ld", pProp->m_lDataLength);
	}

#ifdef _DEBUG
	// Complete the length of the data structure
	DWORD dwFinalOffset = snapIChannel.GetCurrentOutputOffset();
	BS_ASSERT( dwFinalOffset > dwInitialOffset );
	BS_ASSERT( dwFinalOffset - dwInitialOffset == dwStructureLength );
#endif

    UNREFERENCED_PARAMETER( lMask );
}


void CVssQueuedSnapshot::LoadOriginalVolumeNameIoctl(
	IN	CVssFunctionTracer& ft
	) throw(HRESULT)

/*++

Description:

	Load the original volume name and ID.
	Uses IOCTL_VOLSNAP_QUERY_ORIGINAL_VOLUME_NAME.

Warning:

	The snapshot device name must be already known!

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL)
	{
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	// Open the snapshot channel, if needed.
	OpenSnapshotChannel(ft);

	// send the IOCTL.
	m_snapIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_ORIGINAL_VOLUME_NAME);

	// Load the Original volume name
	m_snapIChannel.UnpackSmallString(ft, pProp->m_pwszOriginalVolumeName);

	// Get the user-mode style device name
	WCHAR wszVolNameUsermode[MAX_PATH];
	if (::_snwprintf(wszVolNameUsermode, MAX_PATH - 1,
			L"\\\\?\\GLOBALROOT%s\\", pProp->m_pwszOriginalVolumeName) < 0)
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Not enough memory" );

	// Get the mount point for the original volume
	WCHAR wszMPMVolumeName[MAX_PATH];
	BOOL bSucceeded = ::GetVolumeNameForVolumeMountPointW(
							wszVolNameUsermode,
							wszMPMVolumeName, MAX_PATH );			
	if (!bSucceeded)
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
				  L"Unexpected error while getting the volume name 0x%08lx",
				  GetLastError());

	// Load the Original Volume ID
	if (!GetVolumeGuid(wszMPMVolumeName, pProp->m_OriginalVolumeId))
	{
		BS_ASSERT(false); // The volume name is expected in a predefined format
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
				L"Cannot get the original volume Id for %s.",
				pProp->m_pwszOriginalVolumeName);
	}
}


void CVssQueuedSnapshot::LoadAttributes(
	IN	CVssFunctionTracer& ft
	) throw(HRESULT)

/*++

Description:

	Load the snapshot attributes mask.
	Uses IOCTL_VOLSNAP_QUERY_CONFIG_INFO.

Warning:

	The snapshot device name must be already known!

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL)
	{
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	// Open the snapshot channel, if needed.
	OpenSnapshotChannel(ft);

	// Send the IOCTL.
	m_snapIChannel.Call(ft, IOCTL_VOLSNAP_QUERY_CONFIG_INFO);

	// Load the snapshot attributes
	m_snapIChannel.Unpack(ft, &(pProp->m_lSnapshotAttributes));
}


/////////////////////////////////////////////////////////////////////////////
// CVssGenericSnapProperties
//


void CVssGenericSnapProperties::InitializeFromStream(
	IN	CVssFunctionTracer& ft,
	IN	CVssIOCTLChannel& snapIChannel,
	IN	GUID& guidFormatID
	) throw(HRESULT)

/*++

Description:

	Will retrieve the snapshot property structures that are different
	than the standard property structure from the snapshot IOCTL stream

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	// The Format ID is already known
	m_guidFormatID = guidFormatID;

	// Unpack the length of the opaque data
	snapIChannel.Unpack(ft, &m_dwStructureLength);

	// Unpack the opaque data
	if (m_dwStructureLength != 0)
	{
		m_pbData = new BYTE[m_dwStructureLength];
		if (m_pbData == NULL)
			ft.Throw(VSSDBG_SWPRV, E_OUTOFMEMORY, L"Memory allocation error");
		snapIChannel.Unpack(ft, m_pbData, m_dwStructureLength);
	}
}


void CVssGenericSnapProperties::SaveRecursivelyIntoStream(
	IN	CVssFunctionTracer& ft,
	IN	CVssIOCTLChannel& snapIChannel
	) throw(HRESULT)

/*++

Description:

	Will save the snapshot property structures that are different
	than the standard property structure from the snapshot IOCTL stream

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	// Save the previous nodes
	if (m_pPrevious!= NULL)
		m_pPrevious->SaveRecursivelyIntoStream( ft, snapIChannel );

	// Pack the Format ID
	snapIChannel.Pack(ft, m_guidFormatID);

	// Pack the structure length
	snapIChannel.Pack(ft, m_dwStructureLength);

	// Pack the opaque data
	if (m_dwStructureLength)
	{
		BS_ASSERT(m_pbData);
		snapIChannel.PackArray(ft, m_pbData, m_dwStructureLength);
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by swprv.rc
//
#define IDS_PROJNAME                    100
#define IDR_SWPRV                       101

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        201
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\query.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Query.hxx | Declarations used by the Software Snapshot Provider interface
    @end

Author:

    Adi Oltean  [aoltean]   09/15/1999

Revision History:

    Name        Date        Comments

    aoltean     09/23/1999  Created.

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"
#include "provider.hxx"
#include "snapshot.hxx"


/////////////////////////////////////////////////////////////////////////////
//  Implementation


STDMETHODIMP CVsTestProvider::Query(
    IN      VSS_ID          QueriedObjectId,
    IN      VSS_OBJECT_TYPE eQueriedObjectType,
    IN      VSS_OBJECT_TYPE eReturnedObjectsType,
    IN      LONG            lMask,
    OUT     IVssEnumObject**ppEnum
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsTestProvider::Query" );

    try
    {
        // Initialize [out] arguments
        VssZeroOutPtr( ppEnum );

        ft.Trace( VSSDBG_SWPRV, L"Parameters: QueriedObjectId = " WSTR_GUID_FMT
				  L"eQueriedObjectType = %d. eReturnedObjectsType = %d, lPropertiesMask = 0x%08lx, ppEnum = %p",
				  GUID_PRINTF_ARG( QueriedObjectId ),
				  eQueriedObjectType,
				  eReturnedObjectsType,
				  lMask,
				  ppEnum);

        // Argument validation
		BS_ASSERT(ppEnum);
        if (ppEnum == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL ppEnum");

        // Create the collection object. Initial reference count is 0.
        VSS_OBJECT_PROP_Array* pArray = new VSS_OBJECT_PROP_Array;
        if (pArray == NULL)
            ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Memory allocation error.");

        // Get the pointer to the IUnknown interface.
		// The only purpose of this is to use a smart ptr to destroy correctly the array on error.
		// Now pArray's reference count becomes 1 (because of the smart pointer).
        CComPtr<IUnknown> pArrayItf = static_cast<IUnknown*>(pArray);
        BS_ASSERT(pArrayItf);

		// Establish the filtering
		CVssQueuedSnapshot::VSS_QUERY_TYPE eQueryType = CVssQueuedSnapshot::VSS_FIND_UNKNOWN;
		switch(eQueriedObjectType)
		{
		case VSS_OBJECT_SNAPSHOT_SET:
			eQueryType = CVssQueuedSnapshot::VSS_FIND_BY_SNAPSHOT_SET_ID;
			break;
			
		case VSS_OBJECT_SNAPSHOT:
			eQueryType = CVssQueuedSnapshot::VSS_FIND_BY_SNAPSHOT_ID;
			break;
			
		case VSS_OBJECT_VOLUME:
			eQueryType = CVssQueuedSnapshot::VSS_FIND_BY_VOLUME;
			break;
			
		case VSS_OBJECT_NONE:
			eQueryType = CVssQueuedSnapshot::VSS_FIND_ALL;
			break;
			
		default:
			ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"Incompatible types %d/%d",
					  eQueriedObjectType, eReturnedObjectsType);
		}
		
        // Fill now the collection
		switch(eReturnedObjectsType)
		{
		case VSS_OBJECT_SNAPSHOT_SET:
		case VSS_OBJECT_SNAPSHOT:
		case VSS_OBJECT_VOLUME:
			CVssQueuedSnapshot::EnumerateSnasphots(ft,
				eQueryType,
				eReturnedObjectsType,
				lMask,
				QueriedObjectId,
				pArray);
			break;

		default:
			ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"Incompatible types %d/%d",
					  eQueriedObjectType, eReturnedObjectsType);
		}

        // Create the enumerator object. Beware that its reference count will be zero.
        CComObject<CVssEnumFromArray>* pEnumObject = NULL;
        ft.hr = CComObject<CVssEnumFromArray>::CreateInstance(&pEnumObject);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
                      L"Cannot create enumerator instance. [0x%08lx]", ft.hr);
        BS_ASSERT(pEnumObject);

        // Get the pointer to the IVssEnumObject interface.
		// Now pEnumObject's reference count becomes 1 (because of the smart pointer).
		// So if a throw occurs the enumerator object will be safely destroyed by the smart ptr.
        CComPtr<IUnknown> pUnknown = pEnumObject->GetUnknown();
        BS_ASSERT(pUnknown);

        // Initialize the enumerator object.
		// The array's reference count becomes now 2, because IEnumOnSTLImpl::m_spUnk is also a smart ptr.
        BS_ASSERT(pArray);
		ft.hr = pEnumObject->Init(pArrayItf, *pArray);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
                      L"Cannot initialize enumerator instance. [0x%08lx]", ft.hr);

        // Initialize the enumerator object.
		// The enumerator reference count becomes now 2.
        ft.hr = pUnknown->SafeQI(IVssEnumObject, ppEnum);
        if ( ft.HrFailed() )
            ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED,
                      L"Error querying the IVssEnumObject interface. hr = 0x%08lx", ft.hr);
        BS_ASSERT(*ppEnum);

		BS_ASSERT( !ft.HrFailed() );
		ft.hr = (pArray->GetSize() != 0)? S_OK: S_FALSE;
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\qsnap.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module QSnap.hxx | Defines the internal data structure attached to a snapshot.
    @end

Author:

    Adi Oltean  [aoltean]   07/13/1999

Revision History:

    Name        Date        Comments

    aoltean     11/??/1999  Created.


--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "ichannel.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"

#include "ntddsnap.h"


/////////////////////////////////////////////////////////////////////////////
//  CVssQueuedSnapshot IOCTL commands


void CVssQueuedSnapshot::OpenVolumeChannel(
		IN	CVssFunctionTracer& ft
		) throw(HRESULT)

/*++

Description:

	Open the volume IOCTL.

Warning:

	The original volume name must be already known!

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL)
	{
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	// Reset the error code
	ft.hr = S_OK;
		
	// Open the volume channel, if needed.
	if( !m_snapIChannel.IsOpen() )
	{
		if (pProp->m_pwszOriginalVolumeName == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Unknown volume name." );
		}

		LPWSTR wszVolumeName = pProp->m_pwszOriginalVolumeName;

		// Open the channel
		BS_ASSERT(wszVolumeName[0] != L'\0');
		BS_ASSERT(::wcslen(wszVolumeName) == nLengthOfVolMgmtVolumeName - 1);
		m_volumeIChannel.Open(ft, wszVolumeName);
	}
}


void CVssQueuedSnapshot::OpenSnapshotChannel(
		IN	CVssFunctionTracer& ft
		) throw(HRESULT)

/*++

Description:

	Open the snapshot IOCTL.

Warning:

	The snapshot device name must be already known!

--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	if (pProp == NULL)
	{
		BS_ASSERT(false);
		ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
	}

	// Open the snapshot channel, if needed.
	if( !m_snapIChannel.IsOpen() )
	{
		if (pProp->m_pwszSnapshotDeviceObject == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Unknown device object." );
		}

		// Get the user-mode style device name
		WCHAR wszVolSnap[MAX_PATH];
		if (::_snwprintf(wszVolSnap, MAX_PATH - 1,
				L"\\\\?\\GLOBALROOT%s", pProp->m_pwszSnapshotDeviceObject) < 0)
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Not enough memory for computing the snapshot device object name." );
		
		for(int nRetriesCount = 0; nRetriesCount < nNumberOfPnPRetries; nRetriesCount++)
		{
			ft.hr = m_snapIChannel.Open(ft, wszVolSnap, false);

			if (ft.HrSucceeded())
				break;
			else if (ft.hr != VSS_E_OBJECT_NOT_FOUND)
				ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED, L"Error while opening the VolSnap channel" );
			
			::Sleep(nMillisecondsBetweenPnPRetries);
		}
		if (ft.HrFailed())
			ft.Throw(VSSDBG_SWPRV, E_UNEXPECTED, L"Error while opening the VolSnap channel" );
	}
}


HRESULT CVssQueuedSnapshot::PrepareForSnapshotIoctl()
{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::PrepareForSnapshotIoctl");

	try
	{
		BS_ASSERT(m_volumeIChannel.IsOpen());

		// Pack snapshot attributes
		PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
		BS_ASSERT(pProp != NULL);
		ULONG ulTmp = static_cast<ULONG>(pProp->m_lSnapshotAttributes);
		m_volumeIChannel.Pack(ft, ulTmp);

		// Pach the reserved field
		ulTmp = 0;
		m_volumeIChannel.Pack(ft, ulTmp);

		// Pack initial allocation size
		m_volumeIChannel.Pack(ft, m_llInitialAllocation);

		// Send the IOCTL
		m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_PREPARE_FOR_SNAPSHOT);
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


HRESULT CVssQueuedSnapshot::CommitSnapshotIoctl()
{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::CommitSnapshotIoctl");

	try
	{
		BS_ASSERT(m_volumeIChannel.IsOpen());

		// Send the IOCTL
		m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_COMMIT_SNAPSHOT);
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


HRESULT CVssQueuedSnapshot::EndCommitSnapshotIoctl(
	OUT	LPWSTR & rwszSnapVolumeName			// Ownership transferred to the caller.
	)
{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::EndCommitSnapshotIoctl");

	try
	{
		BS_ASSERT(m_volumeIChannel.IsOpen());

		// Send the IOCTL
		m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_END_COMMIT_SNAPSHOT);

		// Get the volume name length
		USHORT uVolumeNameLengthInBytes;
		m_volumeIChannel.Unpack(ft, &uVolumeNameLengthInBytes);
		INT nVolumeNameLength = uVolumeNameLengthInBytes/sizeof(WCHAR);

		// Allocate the volume name (allocate place for the zero character also)
		rwszSnapVolumeName = ::VssAllocString( ft, nVolumeNameLength );

		// Unpack ulVolumeNameLength wide characters.
		m_volumeIChannel.Unpack( ft, rwszSnapVolumeName, nVolumeNameLength );	
		rwszSnapVolumeName[nVolumeNameLength] = L'\0';
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


HRESULT CVssQueuedSnapshot::AbortPreparedSnapshotIoctl()
{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::AbortPreparedSnapshotIoctl");

	try
	{
		BS_ASSERT(m_volumeIChannel.IsOpen());

		// send the IOCTL
		m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_ABORT_PREPARED_SNAPSHOT);
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


HRESULT CVssQueuedSnapshot::DeleteSnapshotIoctl()
{
	CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVssQueuedSnapshot::DeleteSnapshotIoctl");

	try
	{
		BS_ASSERT(m_volumeIChannel.IsOpen());

		// send the IOCTL
		m_volumeIChannel.Call(ft, IOCTL_VOLSNAP_DELETE_OLDEST_SNAPSHOT);
	}
	VSS_STANDARD_CATCH(ft)

	return ft.hr;
}


/////////////////////////////////////////////////////////////////////////////
//  CVssQueuedSnapshot constructor


CVssQueuedSnapshot::CVssQueuedSnapshot(
	IN  VSS_OBJECT_PROP_Ptr& ptrSnap	// Ownership passed to the Constructor
	):
	m_cookie(VSS_NULL_COOKIE),
	m_llInitialAllocation(nDefaultInitialSnapshotAllocation),			// Babbage-related properties
	m_ptrSnap(ptrSnap),					// Properties related to the standard structure.
	m_SSID(GUID_NULL),					
	m_lSnapshotsCount(0),
	m_usReserved(0),
	m_usNumberOfNonstdSnapProperties(0),	// Properties related to other structures
	m_pOpaqueSnapPropertiesList(NULL),
	m_dwGlobalReservedField(0),
	m_lRefCount(0)						// Life-management
{
	if (ptrSnap.GetStruct() != NULL)
	{
		if (ptrSnap.GetStruct()->Type == VSS_OBJECT_SNAPSHOT)
			m_SSID = ptrSnap.GetStruct()->Obj.Snap.m_SnapshotSetId; // for caching.
		else
			BS_ASSERT(false);
	}
	else
		BS_ASSERT(false);
}


CVssQueuedSnapshot::~CVssQueuedSnapshot()
{
	delete m_pOpaqueSnapPropertiesList;
}


/////////////////////////////////////////////////////////////////////////////
// CVssQueuedSnapshot Operations


void CVssQueuedSnapshot::GetSnapshotVolumeName(
		IN	CVssFunctionTracer& ft,
		IN	PVSS_SNAPSHOT_PROP pProp
		) throw(HRESULT)

/*

Description:

	This function will fill the VSS_SNAPSHOT_PROP::m_pwszSnapshotVolumeName field.

*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	// Test arguments validity
	BS_ASSERT(pProp);
	BS_ASSERT(pProp->m_pwszSnapshotDeviceObject);

	// Free the previous volume name
	::VssFreeString(pProp->m_pwszSnapshotVolumeName);

	// Get the volume name only if the snashot must be visible.
	if (pProp->m_lSnapshotAttributes | VSS_VOLSNAP_ATTR_VISIBLE)
	{
		// Get the user-mode style device name
		WCHAR wszVolSnap[MAX_PATH];
		if (::_snwprintf(wszVolSnap, MAX_PATH - 1,
				L"\\\\?\\GLOBALROOT%s\\", pProp->m_pwszSnapshotDeviceObject) < 0)
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Not enough memory for computing the snapshot device object name." );

		// Retry a number of times to get the snapshot volume name from the Mount Manager
		WCHAR wszSnapshotMountPoint[MAX_PATH];
		for(int nRetriesCount = 0; nRetriesCount < nNumberOfMountMgrRetries; nRetriesCount++)
		{
			BOOL bSucceeded = ::GetVolumeNameForVolumeMountPointW( wszVolSnap, wszSnapshotMountPoint, MAX_PATH );
			if (bSucceeded)
			{							
				ft.Trace( VSSDBG_SWPRV, L"A snapshot mount point was found at %s", wszSnapshotMountPoint );
				::VssSafeDuplicateStr(ft, pProp->m_pwszSnapshotVolumeName, wszSnapshotMountPoint );
				break;
			}

			// DWORD dwError = GetLastError();
			// TBD: Deal with runtime errors (i.e. getting the snapshot volume name after deleting the snapshot.
							
			::Sleep(nMillisecondsBetweenMountMgrRetries);
		}
	}
}


PVSS_SNAPSHOT_PROP CVssQueuedSnapshot::GetSnapshotProperties()
{
	if (m_ptrSnap.GetStruct() != NULL)
	{
		if (m_ptrSnap.GetStruct()->Type == VSS_OBJECT_SNAPSHOT)
			return &(m_ptrSnap.GetStruct()->Obj.Snap);
		else
			BS_ASSERT(false);
	}
	else
		BS_ASSERT(false);

	return NULL;
}

void CVssQueuedSnapshot::SetInitialAllocation(
	LONGLONG llInitialAllocation
	)
{
	m_llInitialAllocation = llInitialAllocation;
}


LONGLONG CVssQueuedSnapshot::GetInitialAllocation()
{
	return m_llInitialAllocation;
}


VSS_SNAPSHOT_STATE CVssQueuedSnapshot::GetStatus()	
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);
	return pProp->m_eStatus;
}


bool CVssQueuedSnapshot::IsDuringCreation()

/*++

Description:

	This method returns true if the snapshot is during creation

--*/

{
	VSS_SNAPSHOT_STATE eState = GetStatus();

	switch(eState)
	{
	case VSS_SS_PREPARING:
	case VSS_SS_PREPARED:
	case VSS_SS_PRECOMMITED:
	case VSS_SS_COMMITED:
		return true;
	default:
		return false;
	}
}


void CVssQueuedSnapshot::ResetSnapshotProperties(
	IN	CVssFunctionTracer& ft,
	IN	bool bGetOnly
	) throw(HRESULT)

/*++

Description:

	Reset the internal fields that can change between Get calls.
	Cache only the immutable fields (for the future Gets on the same interface):
	- Snapshot ID
	- Snapshot Set ID
	- Provider ID
	- Snasphot Device name
	- m_lSnapshotsCount
	
--*/

{
	// Reset the error code
	ft.hr = S_OK;
		
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);

	// Reset the non-immutable property fields
	::VssFreeString(pProp->m_pwszSnapshotVolumeName);
	pProp->m_OriginalVolumeId = GUID_NULL;
	::VssFreeString(pProp->m_pwszOriginalVolumeName);
	pProp->m_lSnapshotAttributes = 0;
	::VssFreeString(pProp->m_pwszDetails);
	pProp->m_lCommitFlags = 0;
	pProp->m_tsCreationTimestamp = 0;
	pProp->m_eStatus = VSS_SS_UNKNOWN;
	pProp->m_llIncarnationNumber = 0;
	pProp->m_lDataLength = 0;
	::VssFreeOpaqueData(pProp->m_pbOpaqueData);

	// These fields are completed only inside a Set call
	if (bGetOnly)
	{
		BS_ASSERT(m_usReserved == 0);		
		BS_ASSERT(m_usNumberOfNonstdSnapProperties == 0);
		BS_ASSERT(m_pOpaqueSnapPropertiesList == NULL);
		BS_ASSERT(m_dwGlobalReservedField == 0);
	}
	else
	{
		m_usReserved = 0;		
		m_usNumberOfNonstdSnapProperties = 0;
		delete m_pOpaqueSnapPropertiesList;
		m_pOpaqueSnapPropertiesList = NULL;
		m_dwGlobalReservedField = 0;
	}

	// Close the opened IOCTL channels.
	m_volumeIChannel.Close();
	m_snapIChannel.Close();
}


void CVssQueuedSnapshot::ResetAsPreparing()	
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);
	BS_ASSERT((pProp->m_eStatus == VSS_SS_PREPARING)||
        (pProp->m_eStatus == VSS_SS_PREPARED)||
		(pProp->m_eStatus == VSS_SS_PRECOMMITED) ||
		(pProp->m_eStatus == VSS_SS_COMMITED)||
		(pProp->m_eStatus == VSS_SS_CREATED));

	// Reset the properties/members that were completed during PreCommit, Commit or PostCommit
	m_lSnapshotsCount = 0;
	pProp->m_SnapshotId = GUID_NULL;
	::VssFreeString(pProp->m_pwszSnapshotDeviceObject);
	::VssFreeString(pProp->m_pwszSnapshotVolumeName);
	pProp->m_OriginalVolumeId = GUID_NULL;
	pProp->m_lCommitFlags = 0;
	pProp->m_tsCreationTimestamp = 0;
	pProp->m_llIncarnationNumber = 0;

	// We will not Reset the properties/members that were allocated during Prepare
	// These allocation might not be executed in ResetToPrepare state!

	// These fields are completed only after a Get call that occured after creation.
	BS_ASSERT(m_usReserved == 0);		
	BS_ASSERT(m_usNumberOfNonstdSnapProperties == 0);
	BS_ASSERT(m_pOpaqueSnapPropertiesList == NULL);
	BS_ASSERT(m_dwGlobalReservedField == 0);

	// Close the opened IOCTL channels.
	m_volumeIChannel.Close();
	m_snapIChannel.Close();
		
	pProp->m_eStatus = VSS_SS_PREPARING;
}


void CVssQueuedSnapshot::MarkAsPrepared()	
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);
	BS_ASSERT(pProp->m_eStatus == VSS_SS_PREPARING);
	pProp->m_eStatus = VSS_SS_PREPARED;
}


void CVssQueuedSnapshot::MarkAsPreCommited()	
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);
	BS_ASSERT(pProp->m_eStatus == VSS_SS_PREPARED);
	pProp->m_eStatus = VSS_SS_PRECOMMITED;
}


void CVssQueuedSnapshot::MarkAsCommited()	
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);
	BS_ASSERT(pProp->m_eStatus == VSS_SS_PRECOMMITED);
	pProp->m_eStatus = VSS_SS_COMMITED;
}


void CVssQueuedSnapshot::MarkAsCreated(LONG lSnapshotsCount)
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);
	
	// Set the snapshot state
	BS_ASSERT(pProp->m_eStatus == VSS_SS_COMMITED);
	pProp->m_eStatus = VSS_SS_CREATED;

	// Set the snapshots count
	BS_ASSERT(lSnapshotsCount != 0);
	BS_ASSERT(m_lSnapshotsCount == 0);
	m_lSnapshotsCount = lSnapshotsCount;
}


void CVssQueuedSnapshot::MarkAsFailed()
{
}


void CVssQueuedSnapshot::MarkAsAborted()
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);

	BS_ASSERT((pProp->m_eStatus == VSS_SS_PREPARING)
		|| (pProp->m_eStatus == VSS_SS_PRECOMMITED));

	pProp->m_eStatus = VSS_SS_ABORTED;
}


void CVssQueuedSnapshot::SetCommitInfo(
	LONG			lCommitFlags
	)
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);

	BS_ASSERT(pProp->m_lCommitFlags == 0)
	pProp->m_lCommitFlags = lCommitFlags;
}


LONG CVssQueuedSnapshot::GetCommitFlags()
{
	PVSS_SNAPSHOT_PROP pProp = GetSnapshotProperties();
	BS_ASSERT(pProp);

	return pProp->m_lCommitFlags;
}


void CVssQueuedSnapshot::AttachToGlobalList(
	IN	CVssFunctionTracer& ft
	) throw(HRESULT)
{
	// The caller must have a separate reference to the object
	AddRef();

	BS_ASSERT( m_cookie == VSS_NULL_COOKIE );
	m_cookie = m_list.AddTail( ft, this );
}


void CVssQueuedSnapshot::DetachFromGlobalList()
{
	BS_ASSERT( m_cookie != VSS_NULL_COOKIE );

	CVssQueuedSnapshot* pThis;
	m_list.ExtractByCookie( m_cookie, pThis );
	BS_ASSERT( this == pThis );
	m_cookie = VSS_NULL_COOKIE;

	// The caller must have a separate reference to the object
	Release();
}


/////////////////////////////////////////////////////////////////////////////
// CVssSnapIterator
//


CVssSnapIterator::CVssSnapIterator():
	CVssDLListIterator<CVssQueuedSnapshot*>(CVssQueuedSnapshot::m_list)
{}


CVssQueuedSnapshot* CVssSnapIterator::GetNext(
	IN		VSS_ID SSID
	)
{
	CVssQueuedSnapshot* pObj;
	while (CVssDLListIterator<CVssQueuedSnapshot*>::GetNext(pObj))
		if (pObj->m_SSID == SSID)
			return pObj;
	return NULL;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\tsub\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by writer.rc
//
#define IDS_PROJNAME                    100
#define IDR_Writer_1                    100
#define IDR_DSSSNAPSHOTWRITER           101

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        201
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testxml\main.cpp ===
#include "stdafx.hxx"
#include "vs_inc.hxx"
#include "vss.h"
#include "vsevent.h"
#include "vswriter.h"
#include "vsbackup.h"


inline void CHECK_SUCCESS(HRESULT hr)
	{
	if (hr != S_OK)
		{
		wprintf(L"operation failed with HRESULT=%08x\n", hr);
		DebugBreak();
		}
	}

inline void CHECK_NOFAIL(HRESULT hr)
	{
	if (FAILED(hr))
		{
		wprintf(L"operation failed with HRESULT=%08x\n", hr);
		DebugBreak();
		}
	}


void PrintFiledesc(IVssWMFiledesc *pFiledesc, LPCWSTR wszDescription)
	{
	CComBSTR bstrPath;
	CComBSTR bstrFilespec;
	CComBSTR bstrAlternate;
	CComBSTR bstrDestination;
	bool bRecursive;

	CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
	CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
	CHECK_NOFAIL(pFiledesc->GetRecursive(&bRecursive));
	CHECK_NOFAIL(pFiledesc->GetAlternateLocation(&bstrAlternate));
	CHECK_NOFAIL(pFiledesc->GetAlternateLocation(&bstrDestination));

	wprintf
		(
		L"%s\nPath=%s,Filespec=%s, Recursive=%s\n",
		wszDescription,
		bstrPath,
		bstrFilespec,
		bRecursive ? L"yes" : L"no"
		);

    if (bstrAlternate && wcslen(bstrAlternate) > 0)
		wprintf(L"Alternate Location = %s\n", bstrAlternate);

	if (bstrDestination && wcslen(bstrDestination) > 0)
		wprintf(L"Destination Location = %s\n", bstrDestination);
	}

BSTR ProcessWMXML(BSTR bstrXML)
	{
	CVssFunctionTracer ft(VSSDBG_GEN, L"ProcessWMXML");
	CVssExamineWriterMetadata wm;
    CVssCreateWriterMetadata cwm;
	try
		{
		wm.Initialize(ft, bstrXML);
		}
	VSS_STANDARD_CATCH(ft);
	CHECK_SUCCESS(ft.hr);

	VSS_ID idInstance, idWriter;
	CComBSTR bstrWriterName;
	VSS_USAGE_TYPE usage;
	VSS_SOURCE_TYPE source;
	CHECK_SUCCESS(wm.GetIdentity(&idInstance, &idWriter, &bstrWriterName, &usage, &source));
	CHECK_SUCCESS
		(
		cwm.Initialize
			(
			idInstance,
			idWriter,
			bstrWriterName,
			usage,
			source
			)
		);

	WCHAR *pwszInstanceId;
	WCHAR *pwszWriterId;
	UuidToString(&idInstance, &pwszInstanceId);
	UuidToString(&idWriter, &pwszWriterId);
	wprintf
		(
		L"InstanceId=%s\nWriterId=%s\nWriterName=%s\nUsageType=%d\nSourceType=%d\n",
		pwszInstanceId,
		pwszWriterId,
		bstrWriterName,
		usage,
		source
		);

    RpcStringFree(&pwszInstanceId);
	RpcStringFree(&pwszWriterId);

	unsigned cIncludeFiles, cExcludeFiles, cComponents;
    CHECK_SUCCESS(wm.GetFileCounts(&cIncludeFiles, &cExcludeFiles, &cComponents));

	CComBSTR bstrPath;
	CComBSTR bstrFilespec;
	CComBSTR bstrAlternate;
	CComBSTR bstrDestination;
	bool bRecursive;

	for(unsigned i = 0; i < cIncludeFiles; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;
		CHECK_SUCCESS(wm.GetIncludeFile(i, &pFiledesc));

		CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
		CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
		CHECK_SUCCESS(pFiledesc->GetRecursive(&bRecursive));
		CHECK_SUCCESS(pFiledesc->GetAlternateLocation(&bstrAlternate));
		CHECK_SUCCESS
			(
			cwm.AddIncludeFiles
				(
				bstrPath,
				bstrFilespec,
				bRecursive,
				bstrAlternate
				)
			);

		PrintFiledesc(pFiledesc, L"Include File");
		}

	for(i = 0; i < cExcludeFiles; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;
		CHECK_SUCCESS(wm.GetExcludeFile(i, &pFiledesc));
		CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
		CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
		CHECK_SUCCESS(pFiledesc->GetRecursive(&bRecursive));
		CHECK_SUCCESS
			(
			cwm.AddExcludeFiles
				(
				bstrPath,
				bstrFilespec,
				bRecursive
				)
			);

		PrintFiledesc(pFiledesc, L"Exclude File");
		}

	for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
		{
		CComPtr<IVssWMComponent> pComponent;
		PVSSCOMPONENTINFO pInfo;
		CHECK_SUCCESS(wm.GetComponent(iComponent, &pComponent));
		CHECK_SUCCESS(pComponent->GetComponentInfo(&pInfo));
		wprintf
			(
			L"Component %d, type=%d\nLogicalPath=%s,Name=%s\nCaption=%s\n",
			i,
			pInfo->type,
			pInfo->bstrLogicalPath,
			pInfo->bstrComponentName,
			pInfo->bstrCaption
			);

        wprintf
			(
			L"RestoreMetadata=%s,NotifyOnBackupComplete=%s,Selectable=%s\n",
			pInfo->bRestoreMetadata ? L"yes" : L"no",
			pInfo->bNotifyOnBackupComplete ? L"yes" : L"no",
			pInfo->bSelectable ? L"yes" : L"no"
			);

        CHECK_SUCCESS
			(
			cwm.AddComponent
				(
				pInfo->type,
				pInfo->bstrLogicalPath,
				pInfo->bstrComponentName,
				pInfo->bstrCaption,
				pInfo->bstrIcon,
				pInfo->bRestoreMetadata,
				pInfo->bNotifyOnBackupComplete,
				pInfo->bSelectable
				)
			);

        if (pInfo->cFileCount > 0)
			{
			for(i = 0; i < pInfo->cFileCount; i++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;
				CHECK_SUCCESS(pComponent->GetFile(i, &pFiledesc));
				CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
				CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
				CHECK_SUCCESS(pFiledesc->GetRecursive(&bRecursive));
				CHECK_SUCCESS
					(
					cwm.AddFilesToFileGroup
						(
						pInfo->bstrLogicalPath,
						pInfo->bstrComponentName,
						bstrPath,
						bstrFilespec,
						bRecursive
						)
					);

				PrintFiledesc(pFiledesc, L"FileGroupFile");
				}
			}

		if (pInfo->cDatabases > 0)
			{
			for(i = 0; i < pInfo->cDatabases; i++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;
				CHECK_SUCCESS(pComponent->GetDatabaseFile(i, &pFiledesc));
				CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
				CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
				CHECK_SUCCESS
					(
					cwm.AddDatabaseFiles
						(
						pInfo->bstrLogicalPath,
						pInfo->bstrComponentName,
						bstrPath,
						bstrFilespec
						)
					);

				PrintFiledesc(pFiledesc, L"DatabaseFile");
				}
			}

		if (pInfo->cLogFiles > 0)
			{
			for(i = 0; i < pInfo->cLogFiles; i++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;
				CHECK_SUCCESS(pComponent->GetDatabaseLogFile(i, &pFiledesc));
				CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
				CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
				CHECK_SUCCESS
					(
					cwm.AddDatabaseLogFiles
						(
						pInfo->bstrLogicalPath,
						pInfo->bstrComponentName,
						bstrPath,
						bstrFilespec
						)
					);

				PrintFiledesc(pFiledesc, L"DatabaseLogFile");
				}
			}

		pComponent->FreeComponentInfo(pInfo);
		}

	VSS_RESTOREMETHOD_ENUM method;
	VSS_WRITERRESTORE_ENUM writerRestore;
	CComBSTR bstrUserProcedure;
	CComBSTR bstrService;
	unsigned cMappings;

	CHECK_SUCCESS
		(
		wm.GetRestoreMethod
			(
			&method,
			&bstrService,
			&bstrUserProcedure,
			&writerRestore,
			&cMappings
			)
		);

    CHECK_SUCCESS
		(
		cwm.SetRestoreMethod
			(
			method,
			bstrService,
			bstrUserProcedure,
			writerRestore
			)
		);

    wprintf
		(
		L"Restore method=%d\nService=%s\nUser Procedure=%s\nwriterRestore=%d\n",
		method,
		bstrService,
		bstrUserProcedure,
		writerRestore
		);

	for(i = 0; i < cMappings; i++)
		{
		CComPtr<IVssWMFiledesc> pFiledesc;

		CHECK_SUCCESS(wm.GetAlternateLocationMapping(i, &pFiledesc));
		CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
		CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
		CHECK_SUCCESS(pFiledesc->GetRecursive(&bRecursive));
		CHECK_SUCCESS(pFiledesc->GetAlternateLocation(&bstrDestination));
		CHECK_SUCCESS
			(
			cwm.AddAlternateLocationMapping
				(
				bstrPath,
				bstrFilespec,
				bRecursive,
				bstrDestination
				)
			);

		PrintFiledesc(pFiledesc, L"AlternateMapping");
		}

	CHECK_SUCCESS(cwm.SaveAsXML(&bstrXML));
	return bstrXML;
	}


void SetBackupMetadata
	(
	IVssBackupComponents *pBackup,
	VSS_ID idInstance,
	VSS_ID idWriter,
	VSS_COMPONENT_TYPE ct,
	BSTR bstrLogicalPath,
	BSTR bstrComponentName,
	LPCWSTR wszMetadata
	)
	{
	unsigned cWriters;

	CHECK_SUCCESS(pBackup->GetWriterComponentsCount(&cWriters));
	for(unsigned iWriter = 0; iWriter < cWriters; iWriter++)
		{
		CComPtr<IVssWriterComponentsExt> pWriter;
		CHECK_SUCCESS(pBackup->GetWriterComponents(iWriter, &pWriter));
		VSS_ID idWriterT, idInstanceT;
		CHECK_SUCCESS(pWriter->GetWriterInfo(&idInstanceT, &idWriterT));
		if (memcmp(&idInstance, &idInstanceT, sizeof(GUID)) == 0 &&
			memcmp(&idWriter, &idWriterT, sizeof(GUID)) == 0)
			{
			unsigned cComponents;
			CHECK_SUCCESS(pWriter->GetComponentCount(&cComponents));

			for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
				{
				IVssComponent *pComponent;
				CHECK_SUCCESS(pWriter->GetComponent(iComponent, &pComponent));

				VSS_COMPONENT_TYPE ctT;
				CComBSTR bstrLogicalPathT;
				CComBSTR bstrComponentNameT;

				CHECK_NOFAIL(pComponent->GetLogicalPath(&bstrLogicalPathT));
				CHECK_SUCCESS(pComponent->GetComponentType(&ctT));
				CHECK_SUCCESS(pComponent->GetComponentName(&bstrComponentNameT));

				if (ct == ctT &&
					((bstrLogicalPath == NULL && bstrLogicalPathT.Length() == 0) ||
					 (bstrLogicalPath != NULL &&
					  bstrLogicalPathT.Length() != 0 &&
					  wcscmp(bstrLogicalPath, bstrLogicalPathT) == 0)) &&
					wcscmp(bstrComponentName, bstrComponentNameT) == 0)
					{
					CHECK_SUCCESS(pComponent->SetBackupMetadata(wszMetadata));
					break;
					}
				}
			}
		}
	}


BSTR ProcessCMXML(BSTR bstrXML)
	{
	CComPtr<IVssBackupComponents> pvbc;
	CComPtr<IVssBackupComponents> pvbcCreated;

	CHECK_SUCCESS(CreateVssBackupComponents(&pvbc));
	CHECK_SUCCESS(CreateVssBackupComponents(&pvbcCreated));


	BS_ASSERT(pvbc);
	BS_ASSERT(pvbcCreated);


	CHECK_SUCCESS(pvbc->LoadFromXML(bstrXML));
	CHECK_SUCCESS(pvbcCreated->Initialize(true, true));
	unsigned cWriters;
	CHECK_SUCCESS(pvbc->GetWriterComponentsCount(&cWriters));
	for(unsigned iWriter = 0; iWriter < cWriters; iWriter++)
		{
		CComPtr<IVssWriterComponentsExt> pWriter;
		CHECK_SUCCESS(pvbc->GetWriterComponents(iWriter, &pWriter));
		VSS_ID idWriter, idInstance;
		CHECK_SUCCESS(pWriter->GetWriterInfo(&idInstance, &idWriter));
		unsigned cComponents;
		CHECK_SUCCESS(pWriter->GetComponentCount(&cComponents));

		for(unsigned iComponent = 0; iComponent < cComponents; iComponent++)
			{
			IVssComponent *pComponent;
			CHECK_SUCCESS(pWriter->GetComponent(iComponent, &pComponent));

			VSS_COMPONENT_TYPE ct;
			CComBSTR bstrLogicalPath;
			CComBSTR bstrComponentName;
			bool bBackupSucceeded;

			CHECK_NOFAIL(pComponent->GetLogicalPath(&bstrLogicalPath));
			CHECK_SUCCESS(pComponent->GetComponentType(&ct));
			CHECK_SUCCESS(pComponent->GetComponentName(&bstrComponentName));
			CHECK_SUCCESS(pComponent->GetBackupSucceeded(&bBackupSucceeded));
			CHECK_SUCCESS
				(
				pvbcCreated->AddComponent
					(
					idInstance,
					idWriter,
					ct,
					bstrLogicalPath,
					bstrComponentName
					)
				);

			CHECK_SUCCESS
				(
				pvbcCreated->SetBackupSucceeded
					(
					idInstance,
					idWriter,
					ct,
					bstrLogicalPath,
					bstrComponentName,
					bBackupSucceeded
					)
                );

			CComBSTR bstrMetadata;

            CHECK_SUCCESS(pComponent->GetBackupMetadata(&bstrMetadata));
			SetBackupMetadata
				(
				pvbcCreated,
				idInstance,
				idWriter,
				ct,
				bstrLogicalPath,
				bstrComponentName,
				bstrMetadata
				);

			unsigned cMappings;
			CHECK_SUCCESS(pComponent->GetAlternateLocationMappingCount(&cMappings));
			for(unsigned iMapping = 0; iMapping < cMappings; iMapping++)
				{
				CComPtr<IVssWMFiledesc> pFiledesc;
				CHECK_SUCCESS(pComponent->GetAlternateLocationMapping(iMapping, &pFiledesc));
				CComBSTR bstrPath;
				CComBSTR bstrFilespec;
				CComBSTR bstrDestination;
				bool bRecursive;

				CHECK_SUCCESS(pFiledesc->GetPath(&bstrPath));
				CHECK_SUCCESS(pFiledesc->GetFilespec(&bstrFilespec));
				CHECK_SUCCESS(pFiledesc->GetAlternateLocation(&bstrDestination));
				CHECK_SUCCESS(pFiledesc->GetRecursive(&bRecursive));
				CHECK_SUCCESS
					(
					pvbcCreated->AddAlternativeLocationMapping
						(
						idWriter,
						ct,
						bstrLogicalPath,
						bstrComponentName,
						bstrPath,
						bstrFilespec,
						bRecursive,
						bstrDestination
						)
					);
				}
			}
		}

	BSTR bstrRet;
	CHECK_SUCCESS(pvbcCreated->SaveAsXML(&bstrRet));
	return bstrRet;
	}


extern "C" __cdecl wmain(int argc, WCHAR **argv)
	{
	CoInitializeEx(NULL, COINIT_APARTMENTTHREADED);
	if (argc != 3)
		{
		wprintf(L"testxml writer-metadata-file component-file");
		exit(-1);
		}


	CVssFunctionTracer ft(VSSDBG_GEN, L"main");

	try
		{
		CXMLDocument doc;
		CComBSTR bstrXML;
		CComBSTR bstrXMLOut;

		if (!doc.LoadFromFile(ft, argv[1]))
            {
			wprintf(L"couldn't load xml document %s", argv[1]);
			exit(-1);
			}

		bstrXML = doc.SaveAsXML(ft);
		bstrXMLOut = ProcessWMXML(bstrXML);
		bstrXML = ProcessWMXML(bstrXMLOut);
		wprintf(L"\n\n%s\n\n%s\n", bstrXMLOut, bstrXML);
		if (wcscmp(bstrXML, bstrXMLOut) == 0)
			wprintf(L"\n\nSUCCESS\n");
		else
			wprintf(L"\n\nFAILURE\n");

	    if (!doc.LoadFromFile(ft, argv[2]))
			{
			wprintf(L"couldn't load xml document %s", argv[1]);
			exit(-1);
			}

		bstrXML = doc.SaveAsXML(ft);
		bstrXMLOut = ProcessCMXML(bstrXML);
		bstrXML = ProcessCMXML(bstrXML);
		wprintf(L"\n\n%s\n\n%s\n", bstrXMLOut, bstrXML);
		if (wcscmp(bstrXML, bstrXMLOut) == 0)
			wprintf(L"\n\nSUCCESS\n");
		else
			wprintf(L"\n\nFAILURE\n");
		}
	VSS_STANDARD_CATCH(ft)

	if (FAILED(ft.hr))
		wprintf(L"Failed with %08x.\n", ft.hr);

	return(0);
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\tsub\tsub.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Writer.cpp | Implementation of Writer
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created
    aoltean	09/22/1999  Making console output clearer
    mikejohn	09/19/2000  176860: Added calling convention methods where missing

--*/


/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <stdio.h>

#include "vs_assert.hxx"

#include "vss.h"
#include "vsevent.h"
#include "vswriter.h"
#include "tsub.h"


/////////////////////////////////////////////////////////////////////////////
//  constants

const WCHAR g_wszTSubApplicationName[]	= L"TSub";


/////////////////////////////////////////////////////////////////////////////
//  globals


DWORD g_dwMainThreadId = 0;

VSS_ID s_WRITERID =
	{
    0xac510e8c, 0x6bef, 0x4c78,
	0x86, 0xb7, 0xcb, 0x99, 0xcd, 0x93, 0x45, 0x6c
	};

LPCWSTR s_WRITERNAME = L"TESTWRITER";

CVssTSubWriter::CVssTSubWriter()
	{
	Initialize
		(
		s_WRITERID,
		s_WRITERNAME,
		VSS_UT_USERDATA,
		VSS_ST_OTHER,
		VSS_APP_FRONT_END,
		60 * 1000 * 10
		);	// Timeout - ten minutes
	}



/////////////////////////////////////////////////////////////////////////////
//  class CVssTSubWriter

bool STDMETHODCALLTYPE CVssTSubWriter::OnPrepareSnapshot()
{
	wprintf( L"OnPrepare\n\t#volumes = %ld\n", GetCurrentVolumeCount() );
	for(UINT nIndex = 0; nIndex < GetCurrentVolumeCount(); nIndex++)
		wprintf( L"\tVolume no. %ld: %s\n", nIndex, GetCurrentVolumeArray()[nIndex]);

	WCHAR wszPwd[MAX_PATH];
	DWORD dwChars = GetCurrentDirectoryW( MAX_PATH, wszPwd);

	bool bPwdIsAffected = IsPathAffected( wszPwd );
	if (dwChars > 0)
		wprintf( L"Current directory %s is affected by snapshot? %s\n\n",
			wszPwd, bPwdIsAffected? L"Yes": L"No");

	return true;
}


bool STDMETHODCALLTYPE CVssTSubWriter::OnFreeze()
	{
	wprintf
		(
		L"OnFreeze\n\tmy level = %d\n\n",
		GetCurrentLevel()
		);

	return true;
}


bool STDMETHODCALLTYPE CVssTSubWriter::OnThaw()
	{
	wprintf( L"OnThaw\n\n");

	return true;
	}


bool STDMETHODCALLTYPE CVssTSubWriter::OnAbort()
	{
	wprintf( L"OnAbort\n\n");

	return true;
	}


/////////////////////////////////////////////////////////////////////////////
//  Control-C handler routine


BOOL WINAPI CtrlC_HandlerRoutine(
	IN DWORD /* dwType */
	)
	{
	// End the message loop
	if (g_dwMainThreadId != 0)
		PostThreadMessage(g_dwMainThreadId, WM_QUIT, 0, 0);

	// Mark that the break was handled.
	return TRUE;
	}


/////////////////////////////////////////////////////////////////////////////
//  WinMain

extern "C" int __cdecl wmain(HINSTANCE /*hInstance*/,
    HINSTANCE /*hPrevInstance*/, LPTSTR /*lpCmdLine*/, int /*nShowCmd*/)
	{
    int nRet = 0;

    try
		{
    	// Preparing the CTRL-C handling routine - only for testing...
		g_dwMainThreadId = GetCurrentThreadId();
		::SetConsoleCtrlHandler(CtrlC_HandlerRoutine, TRUE);

        // Initialize COM library
        HRESULT hr = CoInitialize(NULL);
        if (FAILED(hr))
			{
			_ASSERTE(FALSE && "Failure in initializing the COM library");
			throw hr;
			}

		// Declare a CVssTSubWriter instance
		CVssTSubWriter *pInstance = new CVssTSubWriter;
		if (pInstance == NULL)
			throw E_OUTOFMEMORY;

		// Subscribe the object.
		pInstance->Subscribe();

        // message loop - need for STA server
        MSG msg;
        while (GetMessage(&msg, 0, 0, 0))
            DispatchMessage(&msg);

		// Subscribe the object.
		pInstance->Unsubscribe();
		delete pInstance;

        // Uninitialize COM library
        CoUninitialize();
		}
	catch(...)
		{
		_ASSERTE(FALSE && "Unexpected exception");
		}

    return nRet;
	}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\snapshot.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Snapshot.cxx | Snapshot object implementation
    @end

Author:

    Adi Oltean  [aoltean]   07/30/1999

Revision History:

    Name        Date        Comments

    aoltean     07/30/1999  Created.
    aoltean     08/21/1999  Making CI simpler
    aoltean     09/09/1999  dss->vss

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include "stdafx.hxx"
#include <winnt.h>
#include "swprv.hxx"

//  Generated MIDL headers
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "resource.h"
#include "vs_inc.hxx"
#include "ichannel.hxx"
#include "vs_sec.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "qsnap.hxx"
#include "snapshot.hxx"



/////////////////////////////////////////////////////////////////////////////
//  Operations


CVsSoftwareSnapshot::CVsSoftwareSnapshot()
{
	CVssFunctionTracer ft( VSSDBG_COORD, L"CVsSoftwareSnapshot::CVsSoftwareSnapshot" );

	try
	{
		m_cs.Init();
	}
	VSS_STANDARD_CATCH(ft)

}


CVsSoftwareSnapshot::~CVsSoftwareSnapshot()
{
	CVssFunctionTracer ft( VSSDBG_COORD, L"CVsSoftwareSnapshot::~CVsSoftwareSnapshot" );

	try
	{
		m_cs.Term();
	}
	VSS_STANDARD_CATCH(ft)

}


HRESULT CVsSoftwareSnapshot::CreateInstance(
    IN      CVssQueuedSnapshot* pQElem,
    OUT		IUnknown** ppSnapItf,
    IN 		const IID iid /* = IID_IVssSnapshot */
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::CreateInstance" );

    try
    {
        // Initialize [out] arguments
        VssZeroOutPtr(ppSnapItf);
        BS_ASSERT(ppSnapItf);

        // Allocate the COM object.
        CComObject<CVsSoftwareSnapshot>* pObject;
        ft.hr = CComObject<CVsSoftwareSnapshot>::CreateInstance(&pObject);
        if ( ft.HrFailed() )
            ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY, L"Error creating the CVsSoftwareSnapshot instance. hr = 0x%08lx", ft.hr);
        BS_ASSERT(pObject);

        // Setting internal data
        BS_ASSERT(pQElem);
		BS_ASSERT(pObject->m_ptrQueuedSnapshot == NULL);

		// Now the reference count to the queued object will be increased by 1.
		pObject->m_ptrQueuedSnapshot = pQElem;	

        // Querying the IVssSnapshot interface
        CComPtr<IUnknown> pUnknown = pObject->GetUnknown();
        BS_ASSERT(pUnknown);
        ft.hr = pUnknown->QueryInterface(iid, reinterpret_cast<void**>(ppSnapItf) );
        if ( ft.HrFailed() )
            ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"Error querying the interface. hr = 0x%08lx", ft.hr);
        BS_ASSERT(*ppSnapItf);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


/////////////////////////////////////////////////////////////////////////////
//  Interface methods


STDMETHODIMP CVsSoftwareSnapshot::GetProperties(
    IN      LONG                lMask,
    OUT     PVSS_SNAPSHOT_PROP  pSavedProp
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::GetProperties" );

    try
    {
        // Initialize [out] arguments
        VssZeroOut( pSavedProp );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: lMask = %ld, pSavedProp = %p", lMask, pSavedProp );

        // Argument validation
		BS_ASSERT(pSavedProp);
        if (pSavedProp == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pSavedProp");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		// Get the internal snapshot structure
		PVSS_SNAPSHOT_PROP pProp = m_ptrQueuedSnapshot->GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// If the snapshot is not during creation make sure that the required fields are loaded
		// Otherwise we will just copy only the existing fields
		BS_ASSERT(m_ptrQueuedSnapshot != NULL);
		if (m_ptrQueuedSnapshot->IsDuringCreation())
		{
			// Copy the snapshot to the output parameter
			ft.hr = VSS_OBJECT_PROP_Copy::copySnapshot(pSavedProp, pProp, lMask);
			if (ft.HrFailed())
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
						  L"Error copying the structure to the out parameter");
		}
		else
		{
			// Load the needed properties into the internal structure
			m_ptrQueuedSnapshot->LoadSnapshotProperties(ft, lMask, true);
				
			// Copy the snapshot to the output parameter
			ft.hr = VSS_OBJECT_PROP_Copy::copySnapshot(pSavedProp, pProp, lMask);
			if (ft.HrFailed())
				ft.Throw( VSSDBG_SWPRV, E_OUTOFMEMORY,
						  L"Error copying the structure to the out parameter");

			// Reset the internal fields that can change between Get calls.
			// Cache only the immutable fields (for the future Gets on the same interface)
			m_ptrQueuedSnapshot->ResetSnapshotProperties(ft, true);
		}
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsSoftwareSnapshot::SetProperties(
    IN      LONG                lMask,
    IN      PVSS_SNAPSHOT_PROP  pNewProp
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::SetProperties" );

    try
    {
        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: lMask = %ld, pNewProp = %p", lMask, pNewProp );

        // Argument validation
        if (pNewProp == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pNewProp");

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		// Get the internal snapshot structure
		PVSS_SNAPSHOT_PROP pProp = m_ptrQueuedSnapshot->GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// If the snapshot is not during creation make sure that the required fields are loaded
		// Otherwise we will just copy only the existing fields
		if (m_ptrQueuedSnapshot->IsDuringCreation())
		{
			// Copy the setable fields from the given argument
			BS_ASSERT(m_ptrQueuedSnapshot != NULL);
			if (lMask & VSS_PM_DETAILS_FLAG)
			{
				::VssFreeString(pProp->m_pwszDetails);
				::VssSafeDuplicateStr(ft, pProp->m_pwszDetails, pNewProp->m_pwszDetails);
			}
			
			if (lMask & VSS_PM_OPAQUE_FLAG)
			{
				::VssFreeOpaqueData(pProp->m_pbOpaqueData);
				pProp->m_lDataLength = pNewProp->m_lDataLength;
				::VssSafeDuplicateOpaqueData(ft,
					pProp->m_pbOpaqueData,
					pNewProp->m_pbOpaqueData,
					pNewProp->m_lDataLength);
			}
		}
		else
		{
			// Load the needed properties into the internal structure
			m_ptrQueuedSnapshot->LoadSnapshotProperties(ft,
				lMask & (VSS_PM_DETAILS_FLAG |VSS_PM_OPAQUE_FLAG), false);
				
			// Copy the setable fields from the given argument
			BS_ASSERT(m_ptrQueuedSnapshot != NULL);
			if (lMask & VSS_PM_DETAILS_FLAG)
			{
				::VssFreeString(pProp->m_pwszDetails);
				::VssSafeDuplicateStr(ft, pProp->m_pwszDetails, pNewProp->m_pwszDetails);
			}
			
			if (lMask & VSS_PM_OPAQUE_FLAG)
			{
				::VssFreeOpaqueData(pProp->m_pbOpaqueData);
				pProp->m_lDataLength = pNewProp->m_lDataLength;
				::VssSafeDuplicateOpaqueData(ft,
					pProp->m_pbOpaqueData,
					pNewProp->m_pbOpaqueData,
					pNewProp->m_lDataLength);
			}

			// Save the new properties on disk
			ft.hr = m_ptrQueuedSnapshot->SaveSnapshotPropertiesIoctl();
			if (ft.HrFailed())
				ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"The properties cannot be saved 0x%08lx", ft.hr);

			// Reset the internal fields that can change between Get calls.
			// Cache only the immutable fields (for the future Gets on the same interface)
			m_ptrQueuedSnapshot->ResetSnapshotProperties(ft, true);
		}
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}


STDMETHODIMP CVsSoftwareSnapshot::GetID(										
    OUT     VSS_ID*				pSnapshotId
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::GetID" );

    try
    {
        // Initialize [out] arguments
        VssZeroOut( pSnapshotId );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

		// Check parameters
		BS_ASSERT(pSnapshotId);
		if (pSnapshotId == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL pSnapshotId");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: pSnapshotId = %p", pSnapshotId );

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		// Get the internal snapshot structure
		PVSS_SNAPSHOT_PROP pProp = m_ptrQueuedSnapshot->GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// If the snapshot is not during creation make sure that the required fields are loaded
		BS_ASSERT(m_ptrQueuedSnapshot != NULL);
		if (m_ptrQueuedSnapshot->IsDuringCreation())
			(*pSnapshotId) = GUID_NULL;
		else
			(*pSnapshotId) = pProp->m_SnapshotId;
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}



STDMETHODIMP CVsSoftwareSnapshot::GetOriginalVolumeName(						
    OUT     VSS_PWSZ*			ppwszVolumeName
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::GetOriginalVolumeName" );

    try
    {
        // Initialize [out] arguments
        VssZeroOut( ppwszVolumeName );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

		// Check parameters
		BS_ASSERT(ppwszVolumeName);
		if (ppwszVolumeName == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL ppwszVolumeName");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: ppwszVolumeName = %p", ppwszVolumeName );

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		// Get the internal snapshot structure
		PVSS_SNAPSHOT_PROP pProp = m_ptrQueuedSnapshot->GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// If the snapshot is not during creation make sure that the required fields are loaded
		// Otherwise we will just copy only the existing fields
		BS_ASSERT(m_ptrQueuedSnapshot != NULL);
		if (m_ptrQueuedSnapshot->IsDuringCreation())
		{
			::VssSafeDuplicateStr(ft, (*ppwszVolumeName), pProp->m_pwszOriginalVolumeName);
		}
		else
		{
			// If the device name is not completed, search for it
			if (pProp->m_pwszSnapshotDeviceObject == NULL)
			{
				// Try to find a created snapshot with this ID
				bool bFound = m_ptrQueuedSnapshot->FindDeviceNameFromID(ft);
				
				// Handle the "snapshot not found" special error
				if (!bFound)
					ft.Throw(VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND,
							L"A snapshot with Id" WSTR_GUID_FMT L"was not found",
							GUID_PRINTF_ARG(pProp->m_SnapshotId) );
				BS_ASSERT(pProp->m_pwszSnapshotDeviceObject != NULL);
			}
			
			// Load the needed properties into the internal structure
			m_ptrQueuedSnapshot->LoadOriginalVolumeNameIoctl(ft);
				
			::VssSafeDuplicateStr(ft, (*ppwszVolumeName), pProp->m_pwszOriginalVolumeName);

			// Reset the internal fields that can change between Get calls.
			// Cache only the immutable fields (for the future Gets on the same interface)
			m_ptrQueuedSnapshot->ResetSnapshotProperties(ft, true);
		}
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}



STDMETHODIMP CVsSoftwareSnapshot::GetAttributes(								
    OUT     LONG*				plAttributes			
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::GetOriginalVolumeName" );

    try
    {
        // Initialize [out] arguments
        VssZeroOut( plAttributes );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

		// Check parameters
		BS_ASSERT(plAttributes);
		if (plAttributes == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL plAttributes");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: plAttributes = %p", plAttributes );

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		// Get the internal snapshot structure
		PVSS_SNAPSHOT_PROP pProp = m_ptrQueuedSnapshot->GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// If the snapshot is not during creation make sure that the required fields are loaded
		// Otherwise we will just copy only the existing fields
		BS_ASSERT(m_ptrQueuedSnapshot != NULL);
		if (m_ptrQueuedSnapshot->IsDuringCreation())
		{
			(*plAttributes) = pProp->m_lSnapshotAttributes;
		}
		else
		{
			// If the device name is not completed, search for it
			if (pProp->m_pwszSnapshotDeviceObject == NULL)
			{
				// Try to find a created snapshot with this ID
				bool bFound = m_ptrQueuedSnapshot->FindDeviceNameFromID(ft);
				
				// Handle the "snapshot not found" special error
				if (!bFound)
					ft.Throw(VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND,
							L"A snapshot with Id" WSTR_GUID_FMT L"was not found",
							GUID_PRINTF_ARG(pProp->m_SnapshotId) );
				BS_ASSERT(pProp->m_pwszSnapshotDeviceObject != NULL);
			}
			
			// Load the needed properties into the internal structure
			m_ptrQueuedSnapshot->LoadAttributes(ft);
				
			(*plAttributes) = pProp->m_lSnapshotAttributes;

			// Reset the internal fields that can change between Get calls.
			// Cache only the immutable fields (for the future Gets on the same interface)
			m_ptrQueuedSnapshot->ResetSnapshotProperties(ft, true);
		}
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}



STDMETHODIMP CVsSoftwareSnapshot::SetAttributes(								
	IN	ULONG lNewAttributes,
	IN	ULONG lBitsToChange 		// Mask of bits to be changed
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::SetAttributes" );

    try
    {
        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV,
				  L"Parameters: lNewAttributes = %lx, lBitsToChange = %lx",
				  lNewAttributes, lBitsToChange );

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		m_ptrQueuedSnapshot->SetAttributes(ft, lNewAttributes, lBitsToChange);
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}



STDMETHODIMP CVsSoftwareSnapshot::GetCustomProperty(
    IN      VSS_PWSZ			pwszPropertyName,
    OUT     VARIANT*			pPropertyValue
    )
{
    return E_NOTIMPL;

    UNREFERENCED_PARAMETER(pwszPropertyName);
    UNREFERENCED_PARAMETER(pPropertyValue);
}



STDMETHODIMP CVsSoftwareSnapshot::SetCustomProperty(
    IN      VSS_PWSZ			pwszPropertyName,
    IN      VARIANT			    PropertyValue
    )
{
    return E_NOTIMPL;

    UNREFERENCED_PARAMETER(pwszPropertyName);
    UNREFERENCED_PARAMETER(PropertyValue);
}



STDMETHODIMP CVsSoftwareSnapshot::GetDevice(									
    OUT     VSS_PWSZ*			ppwszSnapshotDeviceName
    )
{
    CVssFunctionTracer ft( VSSDBG_SWPRV, L"CVsSoftwareSnapshot::GetDevice" );

    try
    {
        // Initialize [out] arguments
        VssZeroOut( ppwszSnapshotDeviceName );

        // Access check
        if (!IsAdministrator())
            ft.Throw( VSSDBG_SWPRV, E_ACCESSDENIED,
                L"The client process is not running under an administrator account");

		// Check parameters
		BS_ASSERT(ppwszSnapshotDeviceName);
		if (ppwszSnapshotDeviceName == NULL)
            ft.Throw( VSSDBG_SWPRV, E_INVALIDARG, L"NULL ppwszSnapshotDeviceName");

        // Trace parameters
        ft.Trace( VSSDBG_SWPRV, L"Parameters: ppwszSnapshotDeviceName = %p", ppwszSnapshotDeviceName );

		// The critical section will be left automatically at the end of scope.
		CVssAutomaticLock lock(m_cs);

		// Internal state validation
		if (m_ptrQueuedSnapshot == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL snapshot internal object." );
		}

		// Get the internal snapshot structure
		PVSS_SNAPSHOT_PROP pProp = m_ptrQueuedSnapshot->GetSnapshotProperties();
		if (pProp == NULL)
		{
			BS_ASSERT(false);
			ft.Throw( VSSDBG_SWPRV, E_UNEXPECTED, L"NULL properties structure." );
		}

		// If the snapshot is not during creation make sure that the required fields are loaded
		// Otherwise we will just copy only the existing fields
		BS_ASSERT(m_ptrQueuedSnapshot != NULL);
		if (m_ptrQueuedSnapshot->IsDuringCreation())
		{
			// TBD: Return the volume name instead?
			::VssSafeDuplicateStr(ft, (*ppwszSnapshotDeviceName), pProp->m_pwszSnapshotDeviceObject);
		}
		else
		{
			// If the device name is not completed, search for it
			if (pProp->m_pwszSnapshotDeviceObject == NULL)
			{
				// Try to find a created snapshot with this ID
				bool bFound = m_ptrQueuedSnapshot->FindDeviceNameFromID(ft);
				
				// Handle the "snapshot not found" special error
				if (!bFound)
					ft.Throw(VSSDBG_SWPRV, VSS_E_OBJECT_NOT_FOUND,
							L"A snapshot with Id" WSTR_GUID_FMT L"was not found",
							GUID_PRINTF_ARG(pProp->m_SnapshotId) );
				BS_ASSERT(pProp->m_pwszSnapshotDeviceObject != NULL);
			}
				
			::VssSafeDuplicateStr(ft, (*ppwszSnapshotDeviceName), pProp->m_pwszSnapshotDeviceObject);
		}
    }
    VSS_STANDARD_CATCH(ft)

    return ft.hr;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\tsub\tsub.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module tsub.h | Declaration of the transient subscriber
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created
    mikejohn	09/18/2000  176860: Added calling convention methods where missing

--*/


#ifndef __VSS_TSUB_WRITER_H_
#define __VSS_TSUB_WRITER_H_


#ifdef _DEBUG
#define _ATL_DEBUG_INTERFACES
#define _ATL_DEBUG_QI
#define _ATL_DEBUG_REFCOUNT
#endif // _DEBUG


/////////////////////////////////////////////////////////////////////////////
// Utility functions


LPWSTR QueryString(LPWSTR wszPrompt);
INT QueryInt(LPWSTR wszPrompt);


/////////////////////////////////////////////////////////////////////////////
// CVssWriter


class CVssTSubWriter : public CVssWriter
{

// Constructors and destructors
public:
	CVssTSubWriter();

// Ovverides
public:

	virtual bool STDMETHODCALLTYPE OnPrepareSnapshot();

	virtual bool STDMETHODCALLTYPE OnFreeze();

	virtual bool STDMETHODCALLTYPE OnThaw();

	virtual bool STDMETHODCALLTYPE OnAbort();

};


#endif //__VSS_TSUB_WRITER_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\testprv\src\swprv.cxx ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module swprv.hxx | Definition the COM server of the Software Snapshot provider
    @end

Author:

    Adi Oltean  [aoltean]   07/13/1999

Revision History:

    Name        Date        Comments

    aoltean     07/13/1999  Created.
    aoltean     09/09/1999  dss->vss

--*/


///////////////////////////////////////////////////////////////////////////////
//   Includes
//


#include "stdafx.hxx"
#include <process.h>
#include "initguid.h"

// Generated MIDL header
#include "vss.h"
#include "vscoordint.h"
#include "vsprov.h"
#include "vsswprv.h"

#include "resource.h"
#include "vs_inc.hxx"

#include "swprv.hxx"

#include "copy.hxx"
#include "pointer.hxx"
#include "enum.hxx"

#include "provider.hxx"

#include "vs_test.hxx"


///////////////////////////////////////////////////////////////////////////////
//   Static objects
//

CSwPrvSnapshotSrvModule _Module;


///////////////////////////////////////////////////////////////////////////////
//   COM classes and defines for debugging.
//

const CLSID* PCLSID_TestProvider1 = &CLSID_TestProvider1;
const CLSID* PCLSID_TestProvider2 = &CLSID_TestProvider2;
const CLSID* PCLSID_TestProvider3 = &CLSID_TestProvider3;
const CLSID* PCLSID_TestProvider4 = &CLSID_TestProvider4;


class CInstantiatedTestProvider1: public CVsTestProviderTemplate<DEBUG_TRACE_TEST1,PCLSID_TestProvider1> {};
class CInstantiatedTestProvider2: public CVsTestProviderTemplate<DEBUG_TRACE_TEST2,PCLSID_TestProvider2> {};
class CInstantiatedTestProvider3: public CVsTestProviderTemplate<DEBUG_TRACE_TEST3,PCLSID_TestProvider3> {};
class CInstantiatedTestProvider4: public CVsTestProviderTemplate<DEBUG_TRACE_TEST4,PCLSID_TestProvider4> {};


BEGIN_OBJECT_MAP(ObjectMap)
    OBJECT_ENTRY(CLSID_TestProvider1, CInstantiatedTestProvider1)
    OBJECT_ENTRY(CLSID_TestProvider2, CInstantiatedTestProvider2)
    OBJECT_ENTRY(CLSID_TestProvider3, CInstantiatedTestProvider3)
    OBJECT_ENTRY(CLSID_TestProvider4, CInstantiatedTestProvider4)
END_OBJECT_MAP()


///////////////////////////////////////////////////////////////////////////////
//   DLL Entry point
//

//
// The real DLL Entry Point is _DLLMainCrtStartup (initializes global objects and after that calls DllMain
// this is defined in the runtime libaray
//

extern "C"
BOOL WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID /*lpReserved*/)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
        //  Set the correct tracing context. This is an inproc DLL
        g_cDbgTrace.SetContextNum(VSS_CONTEXT_DELAYED_DLL);

        //  initialize COM module
        _Module.Init(ObjectMap, hInstance);

        //  optimization
        DisableThreadLibraryCalls(hInstance);
    }
    else if (dwReason == DLL_PROCESS_DETACH)
        _Module.Term();

    return TRUE;    // ok
}

/////////////////////////////////////////////////////////////////////////////
//   DLL Exports
//


// Used to determine whether the DLL can be unloaded by OLE
STDAPI DllCanUnloadNow(void)
{
    return (_Module.GetLockCount()==0) ? S_OK : S_FALSE;
}


// Returns a class factory to create an object of the requested type
STDAPI DllGetClassObject(REFCLSID rclsid, REFIID riid, LPVOID* ppv)
{
    return _Module.GetClassObject(rclsid, riid, ppv);
}


// DllRegisterServer - Adds entries to the system registry
STDAPI DllRegisterServer(void)
{
    // registers object, typelib and all interfaces in typelib
    return _Module.RegisterServer(TRUE);
}


// DllUnregisterServer - Removes entries from the system registry
STDAPI DllUnregisterServer(void)
{
    _Module.UnregisterServer();
    return S_OK;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_demo\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by vss_demo.rc
//
#define IDS_PROJNAME                    100
#define IDR_Writer_1                    100
#define IDR_DSSSNAPSHOTWRITER           101

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        201
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_demo\vss_demo.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module vss_demo.cpp | header of VSS demo
    @end

Author:

    Adi Oltean  [aoltean]  09/17/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     09/17/1999  Created

--*/


#ifndef __VSS_DEMO_H_
#define __VSS_DEMO_H_


/////////////////////////////////////////////////////////////////////////////
//  Defines and pragmas

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes


#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <comadmin.h>

#include "vs_assert.hxx"

// ATL
#include <atlconv.h>
#include <atlbase.h>

// Application specific
#include "vs_inc.hxx"

// Generated MIDL headers
#include "vss.h"
#include "vscoordint.h"
#include "vsswprv.h"
#include "vsprov.h"

#include "copy.hxx"
#include "pointer.hxx"

#endif //__VSS_DEMO_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\aboutdlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module AboutDlg.cpp | Implementation of the About dialog
    @end

Author:

    Adi Oltean  [aoltean]  08/05/1999

Revision History:

    Name        Date        Comments

    aoltean     08/05/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"

#include "AboutDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About


CAboutDlg::CAboutDlg() : CDialog(CAboutDlg::IDD)
{
    //{{AFX_DATA_INIT(CAboutDlg)
    //}}AFX_DATA_INIT
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CAboutDlg)
    //}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialog)
    //{{AFX_MSG_MAP(CAboutDlg)
        // No message handlers
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\asyncdlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module asyncdlg.h | Header file for the Async dialog
    @end

Author:

    Adi Oltean  [aoltean]  10/10/1999

Revision History:

    Name        Date        Comments

    aoltean     10/10/1999  Created

--*/


#if !defined(__VSS_ASYNC_DLG_H__)
#define __VSS_ASYNC_DLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CAsyncDlg dialog

class CAsyncDlg : public CVssTestGenericDlg
{
// Construction
public:
    CAsyncDlg(
        IVssAsync *pIAsync,
        CWnd* pParent = NULL); 
    ~CAsyncDlg();

// Dialog Data
    //{{AFX_DATA(CAsyncDlg)
	enum { IDD = IDD_ASYNC };
	CString	    m_strState;
	CString	    m_strPercentCompleted;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CAsyncDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssAsync> m_pIAsync;

    // Generated message map functions
    //{{AFX_MSG(CAsyncDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnWait();
    afx_msg void OnCancel();
    afx_msg void OnQueryStatus();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_ASYNC_DLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_demo\vss_demo.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module vss_demo.cpp | Implementation of the Volume Snapshots demo
    @end

Author:

    Adi Oltean  [aoltean]  09/17/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     09/17/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include "vss_demo.h"


/////////////////////////////////////////////////////////////////////////////
//  Implementation


const nMaxSnapshots = 10;			// Maximum number of snapshots in this demo.
const nInitialAllocatedSize = 20;	// 20 Mb by default for the diff area

const nStringBufferMax = 2048;		// Maximum size for the output buffer.

const LPWSTR wszDefaultSnapVolume = L"G:\\";

/////////////////////////////////////////////////////////////////////////////
//  Implementation


LPWSTR QueryString(
		IN	CVssFunctionTracer& ft,
		IN	LPWSTR wszPrompt,
		IN  LPWSTR wszDefaultValue = L""
		)
{
	static WCHAR wszBuffer[nStringBufferMax]; // No check for buffer overrun...

    if (wszDefaultValue[0])
	    ::wprintf(L"%s [\"%s\"]: ", wszPrompt, wszDefaultValue);
    else
	    ::wprintf(L"%s", wszPrompt);

	::_getws(wszBuffer);

	LPWSTR wszNewString = NULL;
	if (wszBuffer[0] != L'\0')
		::VssSafeDuplicateStr( ft, wszNewString, wszBuffer );
	else
		::VssSafeDuplicateStr( ft, wszNewString, wszDefaultValue );
	return wszNewString;
}


INT QueryInt(
		IN	LPWSTR wszPrompt,
		IN	INT nDefaultValue = 0
		)
{
	static WCHAR wszBuffer[nStringBufferMax];

	::wprintf(L"%s [%d]:", wszPrompt, nDefaultValue);
	_getws(wszBuffer);

	if (wszBuffer[0] != L'\0')
		return _wtoi(wszBuffer);
	else
		return nDefaultValue;
}


bool Question(
		IN	LPWSTR wszPrompt,
		IN	bool bDefaultTrue = true
		)
{
	static WCHAR wszBuffer[nStringBufferMax]; // No check for buffer overrun...
	::wprintf(L"%s [%c/%c] ", wszPrompt, bDefaultTrue? L'Y': L'y', bDefaultTrue? L'n': L'N' );
	::_getws(wszBuffer);

	if (bDefaultTrue)
		return (towupper(wszBuffer[0]) != 'N');
	else
		return (towupper(wszBuffer[0]) == 'Y');
}


HRESULT DemoMain()
{
    CVssFunctionTracer ft( VSSDBG_VSSDEMO, L"DemoMain" );
	LPWSTR wszVolumeName = NULL;
	CComPtr<IVssSnapshot> objSnapshotsArray[nMaxSnapshots];

    try
    {
		// Get the Snapshot Service object.
		CComPtr<IVssCoordinator> pICoord;
        ft.hr = pICoord.CoCreateInstance( CLSID_VSSCoordinator );
        if ( ft.HrFailed() )
            ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, L"Connection failed with hr = 0x%08lx", ft.hr);

        // Start the snapshot set
		VSS_ID SnapshotSetId;
		ft.hr = pICoord->StartSnapshotSet(&SnapshotSetId);
        if ( ft.HrFailed() )
            ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, 
					L"Error starting the snapshot set. hr = 0x%08lx", ft.hr);

        ft.Msg( L"\nSnapshot Set creation succeeded. GUID = " WSTR_GUID_FMT, 
				GUID_PRINTF_ARG( SnapshotSetId ), ft.hr);

		//
		// Add a volume to the new snapshot set. 
		//

		INT nSnapshotsCount = 0;
        while(true)
		{
            wszVolumeName = QueryString( ft, 
                L" If you want to add another volume, enter it now, using a terminating backslash, for example C:\\\n"
                L" Otherwise press enter to commit the snapshot set: ");
            if (wszVolumeName[0] == L'\0')
                break;

			CComPtr<IVssSnapshot> & pSnapshot = objSnapshotsArray[nSnapshotsCount];
			ft.hr = pICoord->AddToSnapshotSet( 
				wszVolumeName, 
				GUID_NULL, 
				&pSnapshot
				);
			if ( ft.HrFailed() )
				ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, L"Error on calling AddToSnapshotSet. hr = 0x%08lx", ft.hr);
			BS_ASSERT( objSnapshotsArray[nSnapshotsCount] );

			VssFreeString( wszVolumeName );

			ft.Msg( L"\nA Volume Snapshot was succesfully added to the snapshot set.", ft.hr);
/*							  
			// Access extended functionality on our particular snapshot.
			// The generic snapshot object obtained above is used.
			CComPtr<IVsSoftwareSnapshot> pSwSnapshot;
			ft.hr = pSnapshot->SafeQI( IVsSoftwareSnapshot, &pSwSnapshot );
			if ( ft.HrFailed() )
				ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, L"Error on querying IVsSoftwareSnapshot. hr = 0x%08lx", ft.hr);
			BS_ASSERT( pSwSnapshot );

			// Configure our volume snapshot.
			ft.hr = pSwSnapshot->SetInitialAllocation( lInitialAllocatedSize * 1024 * 1024 );
			if ( ft.HrFailed() )
				ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, L"Error on calling SetInitialAllocation. hr = 0x%08lx", ft.hr);

			ft.Msg( L"\nThe Volume Snapshot was succesfully configured. ");
*/
			if (++nSnapshotsCount == nMaxSnapshots)
				break;
		}

		//
		// Commit all prepared snapshots.
		//

        ft.Msg( L"\nCommiting the snapshot(s)..", ft.hr);

        ft.hr = pICoord->DoSnapshotSet( NULL,
					NULL);
        if ( ft.HrFailed() )
            ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, L"Error on commiting snapshot(s). hr = 0x%08lx", ft.hr);

		ft.Msg( L"\nThe snapshot(s) were succesfully created. \n");

		// Display the volume names for the created snapshots.
		for(int nIndex = 0; nIndex < nSnapshotsCount; nIndex++)
		{
			CComPtr<IVssSnapshot> & pSnapshot = objSnapshotsArray[nIndex];

			BS_ASSERT(pSnapshot);

			// Getting all the properties
			VSS_OBJECT_PROP_Ptr ptrSnapshot;
			ptrSnapshot.InitializeAsSnapshot( ft, 
				GUID_NULL,
				GUID_NULL,
				0,
				NULL,
				NULL,
				NULL,
				VSS_SWPRV_ProviderId,
				0,
				0,
				VSS_SS_UNKNOWN);
			VSS_SNAPSHOT_PROP* pSnap = &(ptrSnapshot.GetStruct()->Obj.Snap);

			ft.hr = pSnapshot->GetProperties( pSnap);
			WCHAR wszBuffer[nStringBufferMax];
			ptrSnapshot.Print(ft, wszBuffer, nStringBufferMax);

			ft.Msg( L"The properties of the snapshot #%d : %s\n", nIndex, wszBuffer);
				
			// Getting the snapshot name
			LPWSTR wszName;
			ft.hr = pSnapshot->GetDevice( &wszName );
			if (ft.HrFailed())
				ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, 
							L"Error on getting the snapshot name 0x%08lx at index %d",
							ft.hr, nIndex);

			ft.Msg( L"The name of snapshot #%d : %s\n", nIndex, wszName);
			::VssFreeString(wszName);
		}
    }
    VSS_STANDARD_CATCH(ft)

	VssFreeString( wszVolumeName );

    return ft.hr;
}

extern "C" int WINAPI _tWinMain(HINSTANCE /*hInstance*/, 
    HINSTANCE /*hPrevInstance*/, LPTSTR /*lpCmdLine*/, int /*nShowCmd*/)
{
    CVssFunctionTracer ft( VSSDBG_VSSDEMO, L"_tWinMain" );

    try
    {
		// Initialize COM library
		ft.hr = CoInitialize(NULL);
		if (ft.HrFailed())
			ft.Err( VSSDBG_VSSDEMO, E_UNEXPECTED, L"Failure in initializing the COM library 0x%08lx", ft.hr);

		// Run the demo
		ft.hr = DemoMain();

		WCHAR wszBuffer[10]; 
		::wprintf(L"Press enter...");
		::_getws(wszBuffer);

		// Uninitialize COM library
		CoUninitialize();
	}
    VSS_STANDARD_CATCH(ft)

    return ft.HrSucceeded();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\aboutdlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module AboutDlg.h | Definition of About Dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// CAboutDlg dialog used for App About

class CAboutDlg : public CDialog
{
public:
    CAboutDlg();

// Dialog Data
    //{{AFX_DATA(CAboutDlg)
    enum { IDD = IDD_ABOUTBOX };
    //}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CAboutDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

// Implementation
protected:
    //{{AFX_MSG(CAboutDlg)
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\asyncdlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module asyncdlg.cpp | Implementation of the CAsyncDlg dialog
    @end

Author:

    Adi Oltean  [aoltean]  10/10/1999

Revision History:

    Name        Date        Comments

    aoltean     10/10/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "AsyncDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


/////////////////////////////////////////////////////////////////////////////
// CAsyncDlg dialog

CAsyncDlg::CAsyncDlg(
        IVssAsync *pIAsync,
        CWnd* pParent
	)
    : CVssTestGenericDlg(CAsyncDlg::IDD, pParent),
    m_pIAsync(pIAsync)
{
    //{{AFX_DATA_INIT(CAsyncDlg)
	//}}AFX_DATA_INIT
    m_strState.Empty();
    m_strPercentCompleted.Empty();
}

CAsyncDlg::~CAsyncDlg()
{
}

void CAsyncDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CAsyncDlg)
	DDX_Text(pDX, IDC_ASYNC_STATUS,   m_strState);
	DDX_Text(pDX, IDC_ASYNC_PERF,     m_strPercentCompleted);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CAsyncDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CAsyncDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(IDC_ASYNC_WAIT, OnWait)
    ON_BN_CLICKED(IDC_ASYNC_CANCEL, OnCancel)
    ON_BN_CLICKED(IDC_ASYNC_QUERY, OnQueryStatus)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CAsyncDlg message handlers


BOOL CAsyncDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CAsyncDlg::OnInitDialog" );
    USES_CONVERSION;

    try
    {
        CVssTestGenericDlg::OnInitDialog();



        UpdateData(FALSE);
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}


void CAsyncDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CAsyncDlg::OnNext" );

    try
    {
		EndDialog(IDOK);
    }
    VSS_STANDARD_CATCH(ft)
}


void CAsyncDlg::OnWait()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CCoordDlg::OnWait" );

	try
	{
		ft.hr = m_pIAsync->Wait();
		if (ft.hr != S_OK)
			ft.MsgBox( L"Return value", L"Wait returned 0x%08lx", ft.hr );
    }
    VSS_STANDARD_CATCH(ft)
}


void CAsyncDlg::OnCancel()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CCoordDlg::OnCancel" );

	try
	{
		ft.hr = m_pIAsync->Cancel();
		if (ft.hr != S_OK)
			ft.MsgBox( L"Return value", L"Cancel returned 0x%08lx", ft.hr );
    }
    VSS_STANDARD_CATCH(ft)
}


void CAsyncDlg::OnQueryStatus()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CCoordDlg::OnQueryStatus" );

	try
	{
		HRESULT hrResult = S_OK;
		INT nPercentDone = 0;

		ft.hr = m_pIAsync->QueryStatus(&hrResult, &nPercentDone);

		WCHAR wszBuffer[30];

		wsprintfW(wszBuffer, L"0x%08lx", hrResult);
		m_strState = W2T(wszBuffer);

		wsprintfW(wszBuffer, L"%3d.%02d %%", nPercentDone/100, nPercentDone%100 );
		m_strPercentCompleted = W2T(wszBuffer);

		if (ft.hr != S_OK)
			ft.MsgBox( L"Return value", L"Cancel returned 0x%08lx", ft.hr );

		UpdateData(FALSE);
    }
    VSS_STANDARD_CATCH(ft)
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\conndlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module ConnDlg.cpp | Implementation of the main dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class
    aoltean     09/26/1999  Better interface pointers management with ATL smart pointers

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "CoordDlg.h"
#include "ConnDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// Utility defines

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))



/////////////////////////////////////////////////////////////////////////////
// CConnectDlg dialog

CConnectDlg::CConnectDlg(CWnd* pParent /*=NULL*/)
    : CVssTestGenericDlg(CConnectDlg::IDD, pParent)
{
    //{{AFX_DATA_INIT(CConnectDlg)
	m_strMachineName = _T("");
	//}}AFX_DATA_INIT
    m_bRemote = FALSE;
}

CConnectDlg::~CConnectDlg()
{
}

void CConnectDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CConnectDlg)
	DDX_Text(pDX, IDC_CONN_MACHINE_NAME, m_strMachineName);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CConnectDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CConnectDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(IDC_CONN_LOCAL, OnLocal)
    ON_BN_CLICKED(IDC_CONN_REMOTE, OnRemote)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CConnectDlg message handlers

BOOL CConnectDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CConnectDlg::OnInitDialog" );
    USES_CONVERSION;

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        UpdateData( FALSE );

        BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_CONN_LOCAL, IDC_CONN_REMOTE, IDC_CONN_LOCAL );
        _ASSERTE( bRes );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CConnectDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CConnectDlg::OnNext" );
    USES_CONVERSION;

    CComPtr<IVssCoordinator> pICoord;

    try
    {
        UpdateData();

        if (m_bRemote)
        {
            COSERVERINFO serverInfo;
            MULTI_QI sMultiQI;
            IID iid = IID_IVssCoordinator;

            // Zero out these structures
            VssZeroOut(&serverInfo);
            VssZeroOut(&sMultiQI);

            serverInfo.pwszName = STR2W(m_strMachineName);
            sMultiQI.pIID = &iid;
            ft.hr = ::CoCreateInstanceEx( CLSID_VSSCoordinator,
                NULL, CLSCTX_REMOTE_SERVER, &serverInfo, 1, &sMultiQI);
            if ( ft.HrFailed() )
                ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Connection failed.\n hr = 0x%08lx", ft.hr);

            BS_ASSERT(sMultiQI.pItf != NULL);
            BS_ASSERT(sMultiQI.hr == S_OK);
            pICoord.Attach(reinterpret_cast<IVssCoordinator*>(sMultiQI.pItf));
        }
        else
        {
            ft.hr = pICoord.CoCreateInstance( CLSID_VSSCoordinator );
            if ( ft.HrFailed() )
                ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Connection failed with hr = 0x%08lx", ft.hr);
        }

        BS_ASSERT( pICoord != NULL );

        ShowWindow(SW_HIDE);
        CCoordDlg dlg(pICoord);
        if (dlg.DoModal() == IDCANCEL)
            EndDialog(IDCANCEL);
        else
            ShowWindow(SW_SHOW);
    }
    VSS_STANDARD_CATCH(ft)
}


void CConnectDlg::OnLocal()
{
    CWnd *pWnd;
    pWnd = GetDlgItem(IDC_CONN_STATIC_MACHINE_NAME);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_CONN_MACHINE_NAME);
    if (pWnd)
        pWnd->EnableWindow(FALSE);

    m_bRemote = FALSE;
}


void CConnectDlg::OnRemote()
{
    CWnd *pWnd;
    pWnd = GetDlgItem(IDC_CONN_STATIC_MACHINE_NAME);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_CONN_MACHINE_NAME);
    if (pWnd)
        pWnd->EnableWindow(TRUE);

    m_bRemote = TRUE;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\coorddlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module CoordDlg.cpp | Implementation of the coord dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class
    aoltean     08/26/1999  Adding Register providers
    aoltean     08/27/1999  Adding Unregister providers
    aoltean     08/30/1999  Adding Unregister providers error cases
    aoltean     09/09/1999  Improving UI consistency (no results on query, etc)
    aoltean     09/20/1999  Adding Query dialog

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "CoordDlg.h"
#include "SsDlg.h"
#include "QueryDlg.h"
#include "DelDlg.h"
#include "DiffDlg.h"
#include "SnapDlg.h"
#include "VolDlg.h"

// Include the test provider stuff
#include "vs_test.hxx"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CCoordDlg dialog

CCoordDlg::CCoordDlg(
    IVssCoordinator *pICoord,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CCoordDlg::IDD, pParent), m_pICoord(pICoord)
{
    //{{AFX_DATA_INIT(CCoordDlg)
	//}}AFX_DATA_INIT
}

CCoordDlg::~CCoordDlg()
{
}

void CCoordDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CCoordDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CCoordDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CCoordDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(IDC_COORD_CREATE,     OnCreateSs)
    ON_BN_CLICKED(IDC_COORD_QUERY,      OnQueryObj)
    ON_BN_CLICKED(IDC_COORD_DELETE,     OnDeleteObj)
    ON_BN_CLICKED(IDC_ADMIN_REGISTER,   OnRegisterProv)
    ON_BN_CLICKED(IDC_ADMIN_UNREGISTER, OnUnregisterProv)
    ON_BN_CLICKED(IDC_ADMIN_QUERY,      OnQueryProv)
    ON_BN_CLICKED(IDC_COORD_DIFF_AREA,  OnDiffArea)
    ON_BN_CLICKED(IDC_COORD_SNAPSHOT,   OnSnapshot)
    ON_BN_CLICKED(IDC_COORD_ISVOLUME,   OnIsVolumeXXX)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CCoordDlg message handlers

BOOL CCoordDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CCoordDlg::OnInitDialog" );

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        m_eMethodType = VSST_E_CREATE_SS;
        BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_COORD_CREATE, IDC_ADMIN_QUERY, IDC_COORD_CREATE );
        _ASSERTE( bRes );

        CWnd* pWnd = GetDlgItem(IDC_COORD_DIFF_AREA);
        if (pWnd)
            pWnd->EnableWindow(false);

        UpdateData( FALSE );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CCoordDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CCoordDlg::OnNext" );
    USES_CONVERSION;

    try
    {
        UpdateData();

		int nRet;
        switch(m_eMethodType)
        {
        case VSST_E_CREATE_SS:
            {
                VSS_ID SnapshotSetId;

                BS_ASSERT( m_pICoord );
                ft.hr = m_pICoord->StartSnapshotSet( &SnapshotSetId );

                if ( ft.HrFailed() )
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"StartSnapshotSet failed with hr = 0x%08lx", ft.hr);

                ShowWindow(SW_HIDE);
                CSnapshotSetDlg dlg(m_pICoord, SnapshotSetId);
				nRet = (int)dlg.DoModal();

                switch(nRet)
				{
				case IDCANCEL:
                    EndDialog(IDCANCEL);
					break;
				case ID_BACK:
					{
						CComPtr<IVssAdmin> pAdmin;
						ft.hr = m_pICoord->SafeQI( IVssAdmin, &pAdmin);
						if ( ft.HrFailed() )
							ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"SafeQI( IVssAdmin, pAdmin) failed with hr = 0x%08lx", ft.hr);

						ft.hr = pAdmin->AbortAllSnapshotsInProgress();
						if ( ft.HrFailed() )
							ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"AbortAllSnapshotsInProgress() failed with hr = 0x%08lx", ft.hr);
					}
				case IDOK:
                    ShowWindow(SW_SHOW);
					break;
				}
            }
            break;
        case VSST_E_QUERY_OBJ:
			{
                ShowWindow(SW_HIDE);
                CQueryDlg dlg(m_pICoord);
                if (dlg.DoModal() == IDCANCEL)
                    EndDialog(IDCANCEL);
                else
                    ShowWindow(SW_SHOW);
			}
            break;
        case VSST_E_DELETE_OBJ:
			{
                ShowWindow(SW_HIDE);
                CDeleteDlg dlg(m_pICoord);
                if (dlg.DoModal() == IDCANCEL)
                    EndDialog(IDCANCEL);
                else
                    ShowWindow(SW_SHOW);
			}
            break;
        case VSST_E_REGISTER_PROV:
            {
                CComPtr<IVssAdmin> pAdminItf;
                BS_ASSERT(m_pICoord);
                ft.hr = m_pICoord.QueryInterface(&pAdminItf);
                if (ft.HrFailed())
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QI");
                ft.hr = pAdminItf->RegisterProvider( VSS_SWPRV_ProviderId,
                                                     CLSID_VSSoftwareProvider,
                                                     L"Software provider",
													 VSS_PROV_SYSTEM,
                                                     L"1.0.0.6",
                                                     VSS_SWPRV_ProviderVersionId
                                                     );
                if ( ft.HrSucceeded() )
                {
                    ft.MsgBox( L"OK", L"Software provider registered" );
                }
                else if ( ft.hr == VSS_E_PROVIDER_ALREADY_REGISTERED )
                    ft.MsgBox( L"OK", L"Software provider is already registered" );
                else
                    ft.MsgBox( L"Error", L"Registering the Software provider failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->RegisterProvider( PROVIDER_ID_Test1,
                                                     CLSID_TestProvider1,
                                                     L"Test provider 1",
													 VSS_PROV_SOFTWARE,
                                                     L"1.0.0.1",
                                                     PROVIDER_ID_Test1 );
                if ( ft.HrSucceeded() )
                {
                    ft.MsgBox( L"OK", L"Test provider 1 registered" );
                }
                else if ( ft.hr == VSS_E_PROVIDER_ALREADY_REGISTERED )
                    ft.MsgBox( L"OK", L"Test provider 1 is already registered" );
                else
                    ft.MsgBox( L"Error", L"Registering the Test provider 1 failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->RegisterProvider( PROVIDER_ID_Test2,
                                                     CLSID_TestProvider2,
                                                     L"Test provider 2",
													 VSS_PROV_SOFTWARE,
                                                     L"1.0.0.2",
                                                     PROVIDER_ID_Test2 );
                if ( ft.HrSucceeded() )
                {
                    ft.MsgBox( L"OK", L"Test provider 2 registered" );
                }
                else if ( ft.hr == VSS_E_PROVIDER_ALREADY_REGISTERED )
                    ft.MsgBox( L"OK", L"Test provider 2 is already registered" );
                else
                    ft.MsgBox( L"Error", L"Registering the Test provider 2 failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->RegisterProvider( PROVIDER_ID_Test3,
                                                     CLSID_TestProvider3,
                                                     L"Test provider 3",
													 VSS_PROV_HARDWARE,
                                                     L"1.0.0.3",
                                                     PROVIDER_ID_Test3 );
                if ( ft.HrSucceeded() )
                {
                    ft.MsgBox( L"OK", L"Test provider 3 registered" );
                }
                else if ( ft.hr == VSS_E_PROVIDER_ALREADY_REGISTERED )
                    ft.MsgBox( L"OK", L"Test provider 3 is already registered" );
                else
                    ft.MsgBox( L"Error", L"Registering the Test provider 3 failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->RegisterProvider( PROVIDER_ID_Test4,
                                                     CLSID_TestProvider4,
                                                     L"Test provider 4",
													 VSS_PROV_HARDWARE,
                                                     L"1.0.0.4",
                                                     PROVIDER_ID_Test4 );
                if ( ft.HrSucceeded() )
                {
                    ft.MsgBox( L"OK", L"Test provider 4 registered" );
                }
                else if ( ft.hr == VSS_E_PROVIDER_ALREADY_REGISTERED )
                    ft.MsgBox( L"OK", L"Test provider 4 is already registered" );
                else
                    ft.MsgBox( L"Error", L"Registering the Test provider 4 failed. hr = 0x%08lx", ft.hr);
            }
            break;
        case VSST_E_UNREGISTER_PROV:
            {
                CComPtr<IVssAdmin> pAdminItf;
                BS_ASSERT(m_pICoord);
                ft.hr = m_pICoord.QueryInterface(&pAdminItf);
                if (ft.HrFailed())
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QI");
                ft.hr = pAdminItf->UnregisterProvider( VSS_SWPRV_ProviderId );
                if ( ft.HrSucceeded() )
                    ft.MsgBox( L"OK", L"Software provider unregistered" );
                else if (ft.hr == VSS_E_PROVIDER_NOT_REGISTERED)
                    ft.MsgBox( L"Error", L"Software provider not registered. Nothing to unregister.");
                else
                    ft.MsgBox( L"Error", L"Unregistering the Software provider failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->UnregisterProvider( PROVIDER_ID_Test1 );
                if ( ft.HrSucceeded() )
                    ft.MsgBox( L"OK", L"Test provider 1 unregistered." );
                else if (ft.hr == VSS_E_PROVIDER_NOT_REGISTERED)
                    ft.MsgBox( L"Error", L"Test provider 1 not registered. Nothing to unregister.");
                else
                    ft.MsgBox( L"Error", L"Unregistering the Test provider 1 failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->UnregisterProvider( PROVIDER_ID_Test2 );
                if ( ft.HrSucceeded() )
                    ft.MsgBox( L"OK", L"Test provider 2 unregistered." );
                else if (ft.hr == VSS_E_PROVIDER_NOT_REGISTERED)
                    ft.MsgBox( L"Error", L"Test provider 2 not registered. Nothing to unregister.");
                else
                    ft.MsgBox( L"Error", L"Unregistering the Test provider 2 failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->UnregisterProvider( PROVIDER_ID_Test3 );
                if ( ft.HrSucceeded() )
                    ft.MsgBox( L"OK", L"Test provider 3 unregistered." );
                else if (ft.hr == VSS_E_PROVIDER_NOT_REGISTERED)
                    ft.MsgBox( L"Error", L"Test provider 3 not registered. Nothing to unregister.");
                else
                    ft.MsgBox( L"Error", L"Unregistering the Test provider 3 failed. hr = 0x%08lx", ft.hr);

                ft.hr = pAdminItf->UnregisterProvider( PROVIDER_ID_Test4 );
                if ( ft.HrSucceeded() )
                    ft.MsgBox( L"OK", L"Test provider 4 unregistered." );
                else if (ft.hr == VSS_E_PROVIDER_NOT_REGISTERED)
                    ft.MsgBox( L"Error", L"Test provider 4 not registered. Nothing to unregister.");
                else
                    ft.MsgBox( L"Error", L"Unregistering the Test provider 4 failed. hr = 0x%08lx", ft.hr);

            }
            break;
        case VSST_E_QUERY_PROV:
            {
                CComPtr<IVssAdmin> pAdminItf;
                BS_ASSERT(m_pICoord);
                ft.hr = m_pICoord.QueryInterface(&pAdminItf);
                if (ft.HrFailed())
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QI");
                CComPtr<IVssEnumObject> pEnum;
                ft.hr = pAdminItf->QueryProviders(&pEnum);
                if (ft.HrFailed())
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QueryProviders");

                ULONG ulFetched;
                VSS_OBJECT_PROP sObjProp;
                CComBSTR bstrList;
                WCHAR wszBuffer[2048];
                while(true)
                {
                    // Next snapshot
                    ft.hr = pEnum->Next(1, &sObjProp, &ulFetched);
                    if (ft.hr == S_FALSE) // end of enumeration
	                    break;
                    if (ft.HrFailed())
                        ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling Next");

                    // Build the string
                    ::wsprintf(wszBuffer, L"ID: " WSTR_GUID_FMT L", Name: %s, Type: %d, Version: %s, VersionID: "
                        WSTR_GUID_FMT L", ClassID: " WSTR_GUID_FMT L"\n\n",
                        GUID_PRINTF_ARG( sObjProp.Obj.Prov.m_ProviderId ),
                        sObjProp.Obj.Prov.m_pwszProviderName,
                        sObjProp.Obj.Prov.m_eProviderType,
                        sObjProp.Obj.Prov.m_pwszProviderVersion,
                        GUID_PRINTF_ARG( sObjProp.Obj.Prov.m_ProviderVersionId ),
                        GUID_PRINTF_ARG( sObjProp.Obj.Prov.m_ClassId )
                        );

                    bstrList.Append(T2W(wszBuffer));
                    if (!bstrList)
                        ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Memory allocation error");

                    // release COM allocated pointers at unmarshalling time
                    CoTaskMemFree((void**)sObjProp.Obj.Prov.m_pwszProviderName);
                    CoTaskMemFree((void**)sObjProp.Obj.Prov.m_pwszProviderVersion);
                }
                if (bstrList.Length() != 0)
                    ft.MsgBox( L"Results", bstrList.m_str);
                else
                    ft.MsgBox( L"Results", L"Empty query result");
            }
            break;
        case VSST_E_DIFF_AREA:
            {
                ShowWindow(SW_HIDE);
                CDiffDlg dlg(m_pICoord);
				nRet = (int)dlg.DoModal();

                switch(nRet)
				{
				case IDCANCEL:
                    EndDialog(IDCANCEL);
					break;
				case ID_BACK:
				case IDOK:
                    ShowWindow(SW_SHOW);
					break;
				default:
					BS_ASSERT(false);
				}
            }
            break;
        case VSST_E_SNAPSHOT:
            {
                ShowWindow(SW_HIDE);
                CSnapDlg dlg(m_pICoord);
				nRet = (int)dlg.DoModal();

                switch(nRet)
				{
				case IDCANCEL:
                    EndDialog(IDCANCEL);
					break;
				case ID_BACK:
				case IDOK:
                    ShowWindow(SW_SHOW);
					break;
				default:
					BS_ASSERT(false);
				}
            }
            break;
        case VSST_E_ISVOLUMEXXX:
            {
                ShowWindow(SW_HIDE);
                CVolDlg dlg(m_pICoord);
				nRet = (int)dlg.DoModal();

                switch(nRet)
				{
				case IDCANCEL:
                    EndDialog(IDCANCEL);
					break;
				case ID_BACK:
				case IDOK:
                    ShowWindow(SW_SHOW);
					break;
				default:
					BS_ASSERT(false);
				}
            }
            break;
        default:
            BS_ASSERT(false);
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Invalid method type");
        }

    }
    VSS_STANDARD_CATCH(ft)
}


void CCoordDlg::OnCreateSs()
{
    m_eMethodType = VSST_E_CREATE_SS;
}


void CCoordDlg::OnQueryObj()
{
    m_eMethodType = VSST_E_QUERY_OBJ;
}


void CCoordDlg::OnDeleteObj()
{
    m_eMethodType = VSST_E_DELETE_OBJ;
}


void CCoordDlg::OnRegisterProv()
{
    m_eMethodType = VSST_E_REGISTER_PROV;
}


void CCoordDlg::OnUnregisterProv()
{
    m_eMethodType = VSST_E_UNREGISTER_PROV;
}


void CCoordDlg::OnQueryProv()
{
    m_eMethodType = VSST_E_QUERY_PROV;
}

void CCoordDlg::OnDiffArea()
{
    m_eMethodType = VSST_E_DIFF_AREA;
}

void CCoordDlg::OnSnapshot()
{
    m_eMethodType = VSST_E_SNAPSHOT;
}

void CCoordDlg::OnIsVolumeXXX()
{
    m_eMethodType = VSST_E_ISVOLUMEXXX;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\coorddlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module CoordDlg.h | Header file for the coord dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class

--*/


#if !defined(__VSS_TEST_COORD_H__)
#define __VSS_TEST_COORD_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CCoordDlg dialog

class CCoordDlg : public CVssTestGenericDlg
{
    typedef enum _EMethodType {
        VSST_E_CREATE_SS,
        VSST_E_QUERY_OBJ,           
        VSST_E_DELETE_OBJ,          
        VSST_E_REGISTER_PROV,       
        VSST_E_UNREGISTER_PROV,     
        VSST_E_QUERY_PROV,
        VSST_E_DIFF_AREA,
        VSST_E_SNAPSHOT,
        VSST_E_ISVOLUMEXXX,
    } EMethodType;

// Construction
public:
    CCoordDlg(
        IVssCoordinator *pICoord,
        CWnd* pParent = NULL); 
    ~CCoordDlg();

// Dialog Data
    //{{AFX_DATA(CCoordDlg)
	enum { IDD = IDD_COORD };
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CCoordDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator> m_pICoord;
    EMethodType m_eMethodType;

    // Generated message map functions
    //{{AFX_MSG(CCoordDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnCreateSs();
    afx_msg void OnQueryObj();
    afx_msg void OnDeleteObj();
    afx_msg void OnRegisterProv();
    afx_msg void OnUnregisterProv();
    afx_msg void OnQueryProv();
    afx_msg void OnDiffArea();
    afx_msg void OnSnapshot();
    afx_msg void OnIsVolumeXXX();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_COORD_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\conndlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module ConnDlg.h | Header file for the main dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class

--*/


#if !defined(__VSS_TEST_CONN_H__)
#define __VSS_TEST_CONN_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CConnectDlg dialog

class CConnectDlg : public CVssTestGenericDlg
{
// Construction
public:
    CConnectDlg(CWnd* pParent = NULL); // standard constructor
    ~CConnectDlg();

// Dialog Data
    //{{AFX_DATA(CConnectDlg)
	enum { IDD = IDD_CONNECT };
	CString	m_strMachineName;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CConnectDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    BOOL    m_bRemote;
    HICON   m_hIcon;

    // Generated message map functions
    //{{AFX_MSG(CConnectDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnLocal();
    afx_msg void OnRemote();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_CONN_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\deldlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module DelDlg.h | Header file for the delete snapshots dialog
    @end

Author:

    Adi Oltean  [aoltean]  10/10/1999

Revision History:

    Name        Date        Comments

    aoltean     10/10/1999  Created

--*/


#if !defined(__VSS_TEST_DELETE_H__)
#define __VSS_TEST_DELETE_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CDeleteDlg dialog

class CDeleteDlg : public CVssTestGenericDlg
{
// Construction
public:
    CDeleteDlg(
        IVssCoordinator *pICoord,
        CWnd* pParent = NULL); 
    ~CDeleteDlg();

// Dialog Data
    //{{AFX_DATA(CDeleteDlg)
	enum { IDD = IDD_DELETE };
	CString	    m_strObjectId;
	BOOL 		m_bForceDelete;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CDeleteDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator> m_pICoord;
    VSS_OBJECT_TYPE m_eSrcType;

    // Generated message map functions
    //{{AFX_MSG(CDeleteDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnSrcSnap();
    afx_msg void OnSrcSet();
    afx_msg void OnSrcProv();
    afx_msg void OnSrcVol();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_DELETE_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\deldlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module DelDlg.cpp | Implementation of the delete dialog
    @end

Author:

    Adi Oltean  [aoltean]  10/10/1999

Revision History:

    Name        Date        Comments

    aoltean     10/10/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "DelDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CDeleteDlg dialog

CDeleteDlg::CDeleteDlg(
    IVssCoordinator *pICoord,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CDeleteDlg::IDD, pParent), m_pICoord(pICoord)
{
    //{{AFX_DATA_INIT(CDeleteDlg)
	m_strObjectId.Empty();
	m_bForceDelete = FALSE;
	//}}AFX_DATA_INIT
}

CDeleteDlg::~CDeleteDlg()
{
}

void CDeleteDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CDeleteDlg)
	DDX_Text(pDX, IDC_QUERY_OBJECT_ID, m_strObjectId);
	DDX_Check(pDX,IDC_DELETE_FORCE_DELETE, m_bForceDelete );
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CDeleteDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CDeleteDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(IDC_QUERY_SRC_SNAP,	OnSrcSnap)
    ON_BN_CLICKED(IDC_QUERY_SRC_SET,	OnSrcSet)
    ON_BN_CLICKED(IDC_QUERY_SRC_PROV,	OnSrcProv)
    ON_BN_CLICKED(IDC_QUERY_SRC_VOL,	OnSrcVol)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDeleteDlg message handlers

BOOL CDeleteDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CDeleteDlg::OnInitDialog" );

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        m_eSrcType = VSS_OBJECT_SNAPSHOT_SET;
        BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_SRC_SET, IDC_QUERY_SRC_SET, IDC_QUERY_SRC_SET );
        _ASSERTE( bRes );

		VSS_ID ObjectId;
		ft.hr = ::CoCreateGuid(&ObjectId);
		if (ft.HrFailed())
			ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
					   L"Cannot create object guid. [0x%08lx]", ft.hr);

        // Initializing Snapshot Set ID
        LPOLESTR strGUID;
        ft.hr = ::StringFromCLSID( ObjectId, &strGUID );
        if ( ft.HrFailed() )
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on calling StringFromCLSID. hr = 0x%08lx", ft.hr);

        m_strObjectId = OLE2T(strGUID);
        ::CoTaskMemFree(strGUID);

        UpdateData( FALSE );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CDeleteDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CDeleteDlg::OnNext" );
    USES_CONVERSION;

    try
    {
        UpdateData();

		// Get the queried object Id.
		LPTSTR ptszObjectId = const_cast<LPTSTR>(LPCTSTR(m_strObjectId));
		VSS_ID ObjectId;
        ft.hr = ::CLSIDFromString(T2OLE(ptszObjectId), &ObjectId);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_COORD, E_UNEXPECTED,
                      L"Error on converting the object Id %s to a GUID. lRes == 0x%08lx",
                      T2W(ptszObjectId), ft.hr );

		// Get the enumerator
		BS_ASSERT(m_pICoord);
		CComPtr<IVssEnumObject> pEnum;
		LONG lDeletedSnapshots;
		VSS_ID NondeletedSnapshotID;
		ft.hr = m_pICoord->DeleteSnapshots(
			ObjectId,
			m_eSrcType,
			m_bForceDelete,
			&lDeletedSnapshots,
			&NondeletedSnapshotID
			);
		if (ft.HrFailed())
			ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
					   L"Cannot delete (all) snapshots. [0x%08lx]\n"
					   L"%ld snapshot(s) succeeded to be deleted.\n"
					   L"The snapshot that cannot be deleted: " WSTR_GUID_FMT,
					   ft.hr, lDeletedSnapshots,
					   GUID_PRINTF_ARG(NondeletedSnapshotID));

        ft.MsgBox( L"Succeeded", L"%ld Snapshot(s) deleted!", lDeletedSnapshots );
    }
    VSS_STANDARD_CATCH(ft)
}


void CDeleteDlg::OnSrcSnap()
{
    m_eSrcType = VSS_OBJECT_SNAPSHOT;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SET );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
*/
}



void CDeleteDlg::OnSrcSet()
{
    m_eSrcType = VSS_OBJECT_SNAPSHOT_SET;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
*/
}


void CDeleteDlg::OnSrcProv()
{
    m_eSrcType = VSS_OBJECT_PROVIDER;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
*/
}


void CDeleteDlg::OnSrcVol()
{
//    m_eSrcType = VSS_OBJECT_VOLUME;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
*/
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\diffdlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module DiffDlg.cpp | Implementation of the diff dialog
    @end

Author:

    Adi Oltean  [aoltean]  01/25/2000

Revision History:

    Name        Date        Comments

    aoltean     01/25/2000  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "DiffDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CDiffDlg dialog

CDiffDlg::CDiffDlg(
    IVssCoordinator *pICoord,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CDiffDlg::IDD, pParent), m_pICoord(pICoord)
{
    //{{AFX_DATA_INIT(CDiffDlg)
	m_strVolumeName.Empty();
	m_strVolumeMountPoint.Empty();
	m_strVolumeDevice.Empty();
	m_strVolumeID.Empty();
	m_strUsedBytes.Empty();
	m_strAllocatedBytes.Empty();
	m_strMaximumBytes.Empty();
	//}}AFX_DATA_INIT
}

CDiffDlg::~CDiffDlg()
{
}

void CDiffDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CDiffDlg)
	DDX_Text(pDX, IDC_DIFF_VOLUME_NAME,	m_strVolumeName);
	DDX_Text(pDX, IDC_DIFF_MOUNT, 		m_strVolumeMountPoint);
	DDX_Text(pDX, IDC_DIFF_DEVICE, 		m_strVolumeDevice);
	DDX_Text(pDX, IDC_DIFF_VOLUME_ID, 	m_strVolumeID);
	DDX_Text(pDX, IDC_DIFF_USED, 		m_strUsedBytes);
	DDX_Text(pDX, IDC_DIFF_ALLOCATED, 	m_strAllocatedBytes);
	DDX_Text(pDX, IDC_DIFF_MAXIMUM, 	m_strMaximumBytes);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CDiffDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CDiffDlg)
    ON_BN_CLICKED(IDC_NEXT,					OnNext)
    ON_BN_CLICKED(IDC_DIFF_ADD_VOL,			OnAddVol)
    ON_BN_CLICKED(IDC_DIFF_QUERY_DIFF,		OnQueryDiff)
    ON_BN_CLICKED(IDC_DIFF_CLEAR_DIFF,		OnClearDiff)
    ON_BN_CLICKED(IDC_DIFF_GET_SIZES,		OnGetSizes)
    ON_BN_CLICKED(IDC_DIFF_SET_ALLOCATED,	OnSetAllocated)
    ON_BN_CLICKED(IDC_DIFF_SET_MAXIMUM,		OnSetMaximum)
    ON_BN_CLICKED(IDC_DIFF_NEXT_VOLUME,		OnNextVolume)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CDiffDlg message handlers

BOOL CDiffDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CDiffDlg::OnInitDialog" );

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        m_eMethodType = VSST_F_ADD_VOL;
        BOOL bRes = ::CheckRadioButton( m_hWnd,
			IDC_DIFF_ADD_VOL,
			IDC_DIFF_SET_MAXIMUM,
			IDC_DIFF_ADD_VOL );
        _ASSERTE( bRes );

        UpdateData( FALSE );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CDiffDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CDiffDlg::OnNext" );
    USES_CONVERSION;
/*
    try
    {
        UpdateData();

		// Get the volume mount point
		LPWSTR pwszVolumeMountPoint = T2W(const_cast<LPTSTR>(LPCTSTR(m_strVolumeName)));

		// Get the diff area interface
		m_pIDiffArea = NULL;
		ft.hr = m_pICoord->GetExtension(
			VSS_SWPRV_ProviderId,
			pwszVolumeMountPoint,
			IID_IVsDiffArea,
			reinterpret_cast<IUnknown**>(&m_pIDiffArea)
			);
		if (ft.HrFailed())
			ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error getting the diff area interface 0x%08lx", ft.hr);

        switch(m_eMethodType)
        {
        case VSST_F_ADD_VOL:
            {
				// Get the volume mount point
				LPWSTR pwszVolumeMountPoint = T2W(const_cast<LPTSTR>(LPCTSTR(m_strVolumeMountPoint)));

				// Add the volume
				BS_ASSERT(m_pIDiffArea);
				ft.hr = m_pIDiffArea->AddVolume(pwszVolumeMountPoint);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error adding the volume 0x%08lx", ft.hr);
            }
            break;
        case VSST_F_QUERY_DIFF:
			{
				// Query the diff area
				BS_ASSERT(m_pIDiffArea);
				m_pEnum = NULL;
				ft.hr = m_pIDiffArea->Query(&m_pEnum);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error querying the volumes 0x%08lx", ft.hr);

				// Enable the "Next volume" button
			    if (CWnd *pWnd = GetDlgItem(IDC_DIFF_NEXT_VOLUME))
			        pWnd->EnableWindow(true);

				// Print hte results for the first volume
				OnNextVolume();
			}
            break;
        case VSST_F_CLEAR_DIFF:
			{
				// Query the diff area
				BS_ASSERT(m_pIDiffArea);
				ft.hr = m_pIDiffArea->Clear();
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error clearing the diff area 0x%08lx", ft.hr);
			}
            break;
        case VSST_F_GET_SIZES:
            {
				// Get the used space
				BS_ASSERT(m_pIDiffArea);

				LONGLONG llTmp;
				ft.hr = m_pIDiffArea->GetUsedVolumeSpace(&llTmp);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error getting the used disk space 0x%08lx", ft.hr);
				m_strUsedBytes.Format( L"%ld", (LONG)(llTmp / 1024) );
				
				ft.hr = m_pIDiffArea->GetAllocatedVolumeSpace(&llTmp);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error getting the allocated disk space 0x%08lx", ft.hr);
				m_strAllocatedBytes.Format( L"%ld", (LONG)(llTmp / 1024) );
				
				ft.hr = m_pIDiffArea->GetMaximumVolumeSpace(&llTmp);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error getting the max disk space 0x%08lx", ft.hr);
				m_strMaximumBytes.Format( L"%ld", (LONG)(llTmp / 1024) );

				UpdateData( FALSE );
            }
            break;
        case VSST_F_SET_ALLOCATED:
            {
            	LONG lTmp = 0;
            	LPWSTR wszSpace = T2W((LPTSTR)(LPCTSTR)m_strAllocatedBytes);
				if ( 0==swscanf(wszSpace, L"%ld", &lTmp))
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error getting the allocated disk space from %s", wszSpace);

				if ( lTmp < 0)
					ft.MsgBox(L"Error", L"Negative allocated space %ld", lTmp);

				// Set the allocated space
				BS_ASSERT(m_pIDiffArea);

				LONGLONG llTmp;
				ft.hr = m_pIDiffArea->SetAllocatedVolumeSpace(((LONGLONG)lTmp)*1024);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error setting the allocated disk space 0x%08lx", ft.hr);
            }
            break;
        case VSST_F_SET_MAXIMUM:
            {
            	LONG lTmp = 0;
            	LPWSTR wszSpace = T2W((LPTSTR)(LPCTSTR)m_strMaximumBytes);
				if ( 0==swscanf(wszSpace, L"%ld", &lTmp))
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error getting the maximum disk space from %s", wszSpace);

				if ( lTmp < 0)
					ft.MsgBox(L"Error", L"Negative maximum space %ld", lTmp);

				// Set the maximum space
				BS_ASSERT(m_pIDiffArea);

				LONGLONG llTmp;
				ft.hr = m_pIDiffArea->SetMaximumVolumeSpace(((LONGLONG)lTmp)*1024);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error setting the maximum disk space 0x%08lx", ft.hr);
            }
            break;
        default:
            BS_ASSERT(false);
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Invalid method type");
        }

    }
    VSS_STANDARD_CATCH(ft)
*/
}


void CDiffDlg::OnAddVol()
{
    m_eMethodType = VSST_F_ADD_VOL;
}


void CDiffDlg::OnQueryDiff()
{
    m_eMethodType = VSST_F_QUERY_DIFF;
}


void CDiffDlg::OnClearDiff()
{
    m_eMethodType = VSST_F_CLEAR_DIFF;
}


void CDiffDlg::OnGetSizes()
{
    m_eMethodType = VSST_F_GET_SIZES;
}


void CDiffDlg::OnSetAllocated()
{
    m_eMethodType = VSST_F_SET_ALLOCATED;
}


void CDiffDlg::OnSetMaximum()
{
    m_eMethodType = VSST_F_SET_MAXIMUM;
}

void CDiffDlg::OnNextVolume()
{
	CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CDiffDlg::OnNextVolume");
	
    if (m_pEnum == NULL)
    	return;
/*
	// Empty the volume fields
	m_strVolumeDevice.Empty();
	m_strVolumeID.Empty();
	m_strVolumeMountPoint.Empty();

	// Get the properties
	VSS_OBJECT_PROP_Ptr ptrObjProp;
	ptrObjProp.InitializeAsEmpty(ft);

	VSS_OBJECT_PROP* pProp = ptrObjProp.GetStruct();
	BS_ASSERT(pProp);
	ULONG ulFetched;
    ft.hr = m_pEnum->Next(1, pProp, &ulFetched);
	if (ft.HrFailed())
		ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
					L"Error querying the next volume 0x%08lx", ft.hr);

	// If this is the last volume then disable enumeration
    if (ft.hr == S_FALSE)
    {
    	ft.Trace( VSSDBG_VSSTEST, L"End of enumeration");
	    if (CWnd *pWnd = GetDlgItem(IDC_DIFF_NEXT_VOLUME))
	        pWnd->EnableWindow(false);
    }

    // Fill the dialog fields
    if (pProp->Type == VSS_OBJECT_VOLUME)
    {
    	VSS_VOLUME_PROP* pVolProp = &(pProp->Obj.Vol);
    	
		if (pVolProp->m_pwszVolumeName)
			m_strVolumeMountPoint.Format(L"%s", pVolProp->m_pwszVolumeName);

		if (pVolProp->m_pwszVolumeDeviceObject)
			m_strVolumeDevice.Format(L"%s", pVolProp->m_pwszVolumeDeviceObject);

		m_strVolumeID.Format( WSTR_GUID_FMT, GUID_PRINTF_ARG(pVolProp->m_VolumeId) );
	}
*/
	UpdateData( FALSE );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\diffdlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module DiffDlg.h | Header file for the diff dialog
    @end

Author:

    Adi Oltean  [aoltean]  01/25/2000

Revision History:

    Name        Date        Comments

    aoltean     01/25/2000  Created

--*/


#if !defined(__VSS_DIFF_DLG_H__)
#define __VSS_DIFF_DLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CDiffDlg dialog

class CDiffDlg : public CVssTestGenericDlg
{
    typedef enum _EMethodType {
        VSST_F_ADD_VOL,
        VSST_F_QUERY_DIFF,           
        VSST_F_CLEAR_DIFF,          
        VSST_F_GET_SIZES,       
        VSST_F_SET_ALLOCATED,     
        VSST_F_SET_MAXIMUM
    } EMethodType;

// Construction
public:
    CDiffDlg(
        IVssCoordinator *pICoord,
        CWnd* pParent = NULL); 
    ~CDiffDlg();

// Dialog Data
    //{{AFX_DATA(CDiffDlg)
	enum { IDD = IDD_DIFF_AREA };
	CString m_strVolumeName;
	CString m_strVolumeMountPoint;
	CString m_strVolumeDevice;
	CString m_strVolumeID;
	CString m_strUsedBytes;
	CString m_strAllocatedBytes;
	CString m_strMaximumBytes;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CDiffDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator>	m_pICoord;
//    CComPtr<IVsDiffArea>		m_pIDiffArea;
	CComPtr<IVssEnumObject> 	m_pEnum;
    EMethodType m_eMethodType;

    // Generated message map functions
    //{{AFX_MSG(CDiffDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnAddVol();
    afx_msg void OnQueryDiff();
    afx_msg void OnClearDiff();
    afx_msg void OnGetSizes();
    afx_msg void OnSetAllocated();
    afx_msg void OnSetMaximum();
    afx_msg void OnNextVolume();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_DIFF_DLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\querydlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module CoordDlg.cpp | Implementation of the query dialog
    @end

Author:

    Adi Oltean  [aoltean]  09/22/1999

Revision History:

    Name        Date        Comments

    aoltean     09/22/1999  Created
	aoltean		09/27/1999	Adding Query mask flags

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "QueryDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CQueryDlg dialog

CQueryDlg::CQueryDlg(
    IVssCoordinator *pICoord,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CQueryDlg::IDD, pParent), m_pICoord(pICoord)
{
    //{{AFX_DATA_INIT(CQueryDlg)
	m_strObjectId.Empty();
	m_bCkQueriedObject = FALSE;
	m_bCkName = TRUE;
	m_bCkVersion = TRUE;
	m_bCkDevice = TRUE;
	m_bCkOriginal = TRUE;
	//}}AFX_DATA_INIT
}

CQueryDlg::~CQueryDlg()
{
}

void CQueryDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CQueryDlg)
	DDX_Text(pDX, IDC_QUERY_OBJECT_ID, m_strObjectId);
	DDX_Check(pDX,IDC_QUERY_CK_OBJECT, m_bCkQueriedObject );
	DDX_Check(pDX,IDC_QUERY_CK_DEVICE  ,m_bCkDevice );
	DDX_Check(pDX,IDC_QUERY_CK_ORIGINAL,m_bCkOriginal );
	DDX_Check(pDX,IDC_QUERY_CK_NAME   ,m_bCkName );
	DDX_Check(pDX,IDC_QUERY_CK_VERSION,m_bCkVersion );
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CQueryDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CQueryDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(IDC_QUERY_CK_OBJECT,	OnQueriedChk)
    ON_BN_CLICKED(IDC_QUERY_SRC_SNAP,	OnSrcSnap)
    ON_BN_CLICKED(IDC_QUERY_SRC_SET,	OnSrcSet)
    ON_BN_CLICKED(IDC_QUERY_SRC_PROV,	OnSrcProv)
    ON_BN_CLICKED(IDC_QUERY_SRC_VOL,	OnSrcVol)
    ON_BN_CLICKED(IDC_QUERY_DEST_SNAP,	OnDestSnap)
    ON_BN_CLICKED(IDC_QUERY_DEST_SET,	OnDestSet)
    ON_BN_CLICKED(IDC_QUERY_DEST_PROV,	OnDestProv)
    ON_BN_CLICKED(IDC_QUERY_DEST_VOL,	OnDestVol)
    ON_BN_CLICKED(IDC_QUERY_DEST_WRITER,OnDestWriter)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CQueryDlg message handlers

BOOL CQueryDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CQueryDlg::OnInitDialog" );

    try
    {
        CVssTestGenericDlg::OnInitDialog();

/*
        m_eSrcType = VSS_OBJECT_PROVIDER;
        BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_SRC_PROV, IDC_QUERY_SRC_PROV, IDC_QUERY_SRC_PROV );
        _ASSERTE( bRes );
*/
		m_eDestType = VSS_OBJECT_SNAPSHOT;
		BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
		_ASSERTE( bRes );

/*
		// Set destination button
		OnSrcSet();
*/
        // Initializing Snapshot Set ID
		VSS_ID ObjectId = VSS_SWPRV_ProviderId;
        LPOLESTR strGUID;
        ft.hr = ::StringFromCLSID( ObjectId, &strGUID );
        if ( ft.HrFailed() )
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on calling StringFromCLSID. hr = 0x%08lx", ft.hr);

        m_strObjectId = OLE2T(strGUID);
        ::CoTaskMemFree(strGUID);

        UpdateData( FALSE );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CQueryDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CQueryDlg::OnNext" );
    USES_CONVERSION;

	const nBuffLen = 2048; // including the zero character.
	WCHAR wszBuffer[nBuffLen];

    try
    {
        UpdateData();

		// Get the queried object Id.
		LPTSTR ptszObjectId = const_cast<LPTSTR>(LPCTSTR(m_strObjectId));
		VSS_ID ObjectId;
        ft.hr = ::CLSIDFromString(T2OLE(ptszObjectId), &ObjectId);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_COORD, E_UNEXPECTED,
                      L"Error on converting the object Id %s to a GUID. lRes == 0x%08lx",
                      T2W(ptszObjectId), ft.hr );

		// Get the enumerator
		BS_ASSERT(m_pICoord);
		CComPtr<IVssEnumObject> pEnum;
		ft.hr = m_pICoord->Query(
			m_bCkQueriedObject? ObjectId: GUID_NULL,
			m_bCkQueriedObject? m_eSrcType: VSS_OBJECT_NONE,
			m_eDestType,
			&pEnum
		);
		if (ft.HrFailed())
			ft.ErrBox( VSSDBG_VSSTEST, E_OUTOFMEMORY,
					   L"Cannot interogate enumerator instance. [0x%08lx]", ft.hr);

		if (ft.hr == S_FALSE)
			ft.MsgBox( L"Results", L"Empty result...");

		// Allocate the new structure object, but with zero contents.
		// The internal pointer must not be NULL.
		VSS_OBJECT_PROP_Ptr ptrObjProp;
		ptrObjProp.InitializeAsEmpty(ft);

		while(true)
		{
			// Get the Next object in the newly allocated structure object.
			VSS_OBJECT_PROP* pProp = ptrObjProp.GetStruct();
			BS_ASSERT(pProp);
			ULONG ulFetched;
			ft.hr = pEnum->Next(1, pProp, &ulFetched);
			if (ft.hr == S_FALSE) // end of enumeration
				break;
			if (ft.HrFailed())
				ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling Next");

			// Print the contents
			ptrObjProp.Print( ft, wszBuffer, nBuffLen - 1 );

			ft.Trace( VSSDBG_SWPRV, L"Results %s", wszBuffer);
			ft.MsgBox( L"Results", wszBuffer);

			// release COM allocated pointers at unmarshalling time
			// Warning: do not release the union pointer! It is needed for the next cicle.
			VSS_OBJECT_PROP_Copy::destroy(pProp);
		}
    }
    VSS_STANDARD_CATCH(ft)
}


void CQueryDlg::OnSrcSnap()
{
    m_eSrcType = VSS_OBJECT_SNAPSHOT;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SET );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
*/
}



void CQueryDlg::OnSrcSet()
{
    m_eSrcType = VSS_OBJECT_SNAPSHOT_SET;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
*/
}


void CQueryDlg::OnSrcProv()
{
    m_eSrcType = VSS_OBJECT_PROVIDER;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
*/
}


void CQueryDlg::OnSrcVol()
{
//    m_eSrcType = VSS_OBJECT_VOLUME;
/*
    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
    BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_QUERY_DEST_SNAP, IDC_QUERY_DEST_VOL, IDC_QUERY_DEST_SNAP );
    _ASSERTE( bRes );

    CWnd* pWnd = GetDlgItem(IDC_QUERY_DEST_SNAP);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_SET);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_PROV);
    if (pWnd)
        pWnd->EnableWindow(TRUE);
    pWnd = GetDlgItem(IDC_QUERY_DEST_VOL);
    if (pWnd)
        pWnd->EnableWindow(FALSE);
*/
}


void CQueryDlg::OnDestSnap()
{
    m_eDestType = VSS_OBJECT_SNAPSHOT;
}


void CQueryDlg::OnDestSet()
{
//    m_eDestType = VSS_OBJECT_SNAPSHOT_SET;
}


void CQueryDlg::OnDestProv()
{
    m_eDestType = VSS_OBJECT_PROVIDER;
}


void CQueryDlg::OnDestVol()
{
//    m_eDestType = VSS_OBJECT_VOLUME;
}


void CQueryDlg::OnDestWriter()
{
}


void CQueryDlg::OnQueriedChk()
{
	UpdateData();

	if (CWnd* pWnd = GetDlgItem(IDC_QUERY_OBJECT_ID))
		pWnd->EnableWindow(m_bCkQueriedObject);
	if (CWnd* pWnd = GetDlgItem(IDC_QUERY_SRC_SNAP))
		pWnd->EnableWindow(m_bCkQueriedObject);
	if (CWnd* pWnd = GetDlgItem(IDC_QUERY_SRC_SET))
		pWnd->EnableWindow(m_bCkQueriedObject);
	if (CWnd* pWnd = GetDlgItem(IDC_QUERY_SRC_VOL))
		pWnd->EnableWindow(m_bCkQueriedObject);
	if (CWnd* pWnd = GetDlgItem(IDC_QUERY_SRC_PROV))
		pWnd->EnableWindow(m_bCkQueriedObject);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\gendlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module GenDlg.cpp | Implementation of the generic dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"

#include "AboutDlg.h"
#include "GenDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif


/////////////////////////////////////////////////////////////////////////////
// CVssTestGenericDlg dialog

CVssTestGenericDlg::CVssTestGenericDlg(UINT nIDTemplate, CWnd* pParent /*=NULL*/)
    : CDialog(nIDTemplate, pParent)
{
    // Note that LoadIcon does not require a subsequent DestroyIcon in Win32
    m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
}

CVssTestGenericDlg::~CVssTestGenericDlg()
{
}

void CVssTestGenericDlg::DoDataExchange(CDataExchange* pDX)
{
    CDialog::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CVssTestGenericDlg)
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CVssTestGenericDlg, CDialog)
    //{{AFX_MSG_MAP(CVssTestGenericDlg)
    ON_WM_SYSCOMMAND()
    ON_WM_PAINT()
    ON_WM_QUERYDRAGICON()
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CVssTestGenericDlg message handlers

BOOL CVssTestGenericDlg::OnInitDialog()
{
    /*
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVssTestGenericDlg::OnInitDialog" );
    USES_CONVERSION;

    try
    {
    */
        CDialog::OnInitDialog();

        // Add "About..." menu item to system menu.

        // IDM_ABOUTBOX must be in the system command range.
        ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
        ASSERT(IDM_ABOUTBOX < 0xF000);

        CMenu* pSysMenu = GetSystemMenu(FALSE);
        if (pSysMenu != NULL)
        {
            CString strAboutMenu;
            strAboutMenu.LoadString(IDS_ABOUTBOX);
            if (!strAboutMenu.IsEmpty())
            {
                pSysMenu->AppendMenu(MF_SEPARATOR);
                pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
            }
        }

        // Set the icon for this dialog.  The framework does this automatically
        //  when the application's main window is not a dialog
        SetIcon(m_hIcon, TRUE);         // Set big icon
        SetIcon(m_hIcon, FALSE);        // Set small icon
    /*
    }
    VSS_STANDARD_CATCH(ft)
    */

    return TRUE;    //  Return TRUE  unless you set the focus to a control. 
                    //  Anyway it does not matter because derived classes ignore it.
}

void CVssTestGenericDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
    if ((nID & 0xFFF0) == IDM_ABOUTBOX)
    {
        CAboutDlg dlgAbout;
        dlgAbout.DoModal();
    }
    else
    {
        CDialog::OnSysCommand(nID, lParam);
    }
}


// If you add a minimize button to your dialog, you will need the code below
//  to draw the icon.  For MFC applications using the document/view model,
//  this is automatically done for you by the framework.

void CVssTestGenericDlg::OnPaint() 
{
    if (IsIconic())
    {
        CPaintDC dc(this); // device context for painting

        SendMessage(WM_ICONERASEBKGND, (WPARAM) dc.GetSafeHdc(), 0);

        // Center icon in client rectangle
        int cxIcon = GetSystemMetrics(SM_CXICON);
        int cyIcon = GetSystemMetrics(SM_CYICON);
        CRect rect;
        GetClientRect(&rect);
        int x = (rect.Width() - cxIcon + 1) / 2;
        int y = (rect.Height() - cyIcon + 1) / 2;

        // Draw the icon
        dc.DrawIcon(x, y, m_hIcon);
    }
    else
    {
        CDialog::OnPaint();
    }
}

// The system calls this to obtain the cursor to display while the user drags
//  the minimized window.
HCURSOR CVssTestGenericDlg::OnQueryDragIcon()
{
    return (HCURSOR) m_hIcon;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\gendlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module GenDlg.h | Header file for the generic dialog
    @end

Author:

    Adi Oltean  [aoltean]  08/05/1999

Revision History:

    Name        Date        Comments

    aoltean     08/05/1999  Created

--*/


#if !defined(__VSS_TEST_GENDLG_H__)
#define __VSS_TEST_GENDLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CVssTestGenericDlg dialog

class CVssTestGenericDlg : public CDialog
{
// Construction
public:
    CVssTestGenericDlg(UINT nIDTemplate, CWnd* pParent = NULL); // standard constructor
    ~CVssTestGenericDlg();

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CVssTestGenericDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    HICON   m_hIcon;

    // Generated message map functions
    //{{AFX_MSG(CVssTestGenericDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnSysCommand(UINT nID, LPARAM lParam);
    afx_msg void OnPaint();
    afx_msg HCURSOR OnQueryDragIcon();
    //}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_GENDLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by VssTest.rc
//
#define IDM_ABOUTBOX                    0x0010
#define IDD_ABOUTBOX                    100
#define IDS_ABOUTBOX                    101
#define IDD_CONNECT_DIALOG              102
#define IDD_CONNECT                     102
#define IDD_COORD                       103
#define IDD_SS                          104
#define IDD_SW_SNAP                     105
#define IDD_SWTST                       105
#define IDD_QUERY                       106
#define IDD_DELETE                      107
#define IDD_ASYNC                       108
#define IDD_INPUT                       109
#define IDD_DIFF_AREA                   110
#define IDD_SNAP                        111
#define IDD_VOLUME                      112
#define IDR_MAINFRAME                   128
#define IDC_SNAP_SET_ID                 202
#define IDC_NEXT                        1001
#define IDC_CONN_LOCAL                  1014
#define IDC_CONN_REMOTE                 1015
#define IDC_CONN_MACHINE_NAME           1016
#define IDC_CONN_STATIC_MACHINE_NAME    1017
#define IDC_SS_DO                       1020
#define IDC_SS_ADD                      1027
#define IDC_COORD_CREATE                1029
#define IDC_COORD_QUERY                 1030
#define IDC_COORD_DELETE                1031
#define IDC_ADMIN_REGISTER              1032
#define IDC_ADMIN_UNREGISTER            1033
#define IDC_ADMIN_QUERY                 1034
#define IDC_SS_ID                       1035
#define IDC_QUERY_SRC_VOL               1035
#define IDC_COORD_DIFF_AREA             1035
#define IDC_SS_COUNT                    1036
#define IDC_COORD_SNAPSHOT              1036
#define IDC_SS_VOLUME                   1037
#define IDC_QUERY_OBJECT_ID             1037
#define IDC_COORD_ISVOLUME              1037
#define IDC_SS_PROVIDER                 1038
#define IDC_SS_WRITER_VETOES            1039
#define IDC_SWTST_LOGFILE               1040
#define IDC_SS_ATTR                     1041
#define IDC_SWTST_READONLY              1041
#define IDC_SWTST_LOGFILE_SIZE          1042
#define IDC_SS_TIMEOUT                  1043
#define IDC_SS_PARTIAL_COMMIT           1043
#define IDC_SS_VOLUMES                  1044
#define IDC_COMBO2                      1045
#define IDC_SS_PROVIDERS                1045
#define IDC_QUERY_SRC_SNAP              1045
#define IDC_QUERY_SRC_SET               1046
#define IDC_SS_ASYNC                    1046
#define IDC_QUERY_SRC_PROV              1047
#define IDC_SS_WRITER_CANCEL            1047
#define IDC_QUERY_DEST_SNAP             1048
#define IDC_QUERY_DEST_SET              1049
#define IDC_QUERY_DEST_PROV             1050
#define IDC_QUERY_DEST_VOL              1051
#define IDC_QUERY_CK_NAME               1052
#define IDC_QUERY_CK_VERSION            1054
#define ID_BACK                         1056
#define IDC_QUERY_DEST_WRITER           1056
#define IDC_ASYNC_STATUS                1057
#define IDC_QUERY_CK_DEVICE             1057
#define IDC_ASYNC_PERF                  1058
#define IDC_QUERY_CK_ORIGINAL           1058
#define IDC_ASYNC_QUERY                 1059
#define IDC_ASYNC_CANCEL                1060
#define IDC_PROMPT_VALUE                1060
#define IDC_ASYNC_WAIT                  1061
#define IDC_PROMPT_TEXT                 1061
#define IDC_DIFF_MOUNT                  1062
#define IDC_DIFF_USED                   1063
#define IDC_DIFF_NEXT_VOLUME            1065
#define IDC_DIFF_ALLOCATED              1066
#define IDC_DIFF_MAXIMUM                1067
#define IDC_DIFF_DEVICE                 1069
#define IDC_DIFF_VOLUME_ID              1070
#define IDC_DIFF_VOLUME_ID2             1071
#define IDC_SNAP_ID                     1071
#define IDC_SNAP_SSID                   1072
#define IDC_VOLUME_NAME                 1073
#define IDC_DIFF_VOLUME_NAME            1073
#define IDC_SNAP_NAME                   1073
#define IDC_DIFF_ADD_VOL                1074
#define IDC_SNAP_DEVICE                 1074
#define IDC_DIFF_QUERY_DIFF             1075
#define IDC_SNAP_ORIGINAL_VOL_NAME      1075
#define IDC_DIFF_CLEAR_DIFF             1076
#define IDC_SNAP_ORIGINAL_VOLUME_ID     1076
#define IDC_DIFF_GET_SIZES              1077
#define IDC_DIFF_SET_MAXIMUM            1078
#define IDC_DIFF_SET_ALLOCATED          1079
#define IDC_SNAP_GET_PROPERTIES         1080
#define IDC_SNAP_SET_ATTRIBUTES         1081
#define IDC_SNAP_READ_ONLY              1084
#define IDC_SNAP_CHK_PERSISTENT         1085
#define IDC_SNAP_COMMIT                 1086
#define IDC_SNAP_INC                    1088
#define IDC_SNAP_STATUS                 1089
#define IDC_NEXT_OBJECT                 1090
#define IDC_DELETE_FORCE_DELETE         1091
#define IDC_QUERY_CK_OBJECT             1092
#define IDC_VOLUME_IS_VOL_SUPPORTED     1093
#define IDC_VOLUME_IS_VOL_SNAPSHOTTED   1094
#define IDC_VOLUME_OBJECT_ID            1095
#define IDC_EDIT1                       1096
#define IDC_VOLUME_IS_VOL_SUPPORTED2    1096
#define IDC_VOLUME_IS_VOL_SNAPSHOTTED2  1097

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        130
#define _APS_NEXT_COMMAND_VALUE         32771
#define _APS_NEXT_CONTROL_VALUE         1097
#define _APS_NEXT_SYMED_VALUE           105
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\snapdlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module snapdlg.cpp | Implementation of the snapshot dialog
    @end

Author:

    Adi Oltean  [aoltean]  01/25/2000

Revision History:

    Name        Date        Comments

    aoltean     01/25/2000  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "SnapDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CSnapDlg dialog

CSnapDlg::CSnapDlg(
    IVssCoordinator *pICoord,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CSnapDlg::IDD, pParent), m_pICoord(pICoord)
{
    //{{AFX_DATA_INIT(CSnapDlg)
	m_ID = GUID_NULL;
	m_SnapshotSetID = GUID_NULL;
	m_strSnapshotDeviceObject.Empty();
	m_strOriginalVolumeName.Empty();
	m_ProviderID = GUID_NULL;
	m_lSnapshotAttributes = 0;
	m_strCreationTimestamp.Empty();
	m_eStatus = 0;
	//}}AFX_DATA_INIT
}

CSnapDlg::~CSnapDlg()
{
}

void CSnapDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CSnapDlg)
	DDX_Text(pDX, IDC_SNAP_ID, 		m_ID);
	DDX_Text(pDX, IDC_SNAP_SSID, 	m_SnapshotSetID);
	DDX_Text(pDX, IDC_SNAP_DEVICE, 	m_strSnapshotDeviceObject);
	DDX_Text(pDX, IDC_SNAP_ORIGINAL_VOL_NAME, 	m_strOriginalVolumeName);
	DDX_Text(pDX, IDC_SNAP_STATUS,	m_eStatus);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSnapDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CSnapDlg)
    ON_BN_CLICKED(IDC_NEXT,					OnNext)
    ON_BN_CLICKED(IDC_NEXT_OBJECT,			OnNextSnapshot)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CSnapDlg message handlers

BOOL CSnapDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapDlg::OnInitDialog" );

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        m_eMethodType = VSST_S_GET_SNAPSHOT;
        BOOL bRes = ::CheckRadioButton( m_hWnd,
			IDC_SNAP_GET_PROPERTIES,
			IDC_SNAP_GET_PROPERTIES,
			IDC_SNAP_GET_PROPERTIES );
        _ASSERTE( bRes );

        UpdateData( FALSE );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CSnapDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapDlg::OnNext" );
    USES_CONVERSION;

    try
    {
        UpdateData();

		// Try to allocate the diff area object, if needed
		if (m_pISnap == NULL)
		{
			// Get the diff area interface
			ft.hr = m_pICoord->GetSnapshot(
				m_ID,
				IID_IVssSnapshot,
				reinterpret_cast<IUnknown**>(&m_pISnap)
				);
			if (ft.HrFailed())
				ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
						L"Error getting the snapshot interface 0x%08lx", ft.hr);
		}

        switch(m_eMethodType)
        {
        case VSST_S_GET_SNAPSHOT:
			{
				// Empty the fields
				m_ID = GUID_NULL;
				m_SnapshotSetID = GUID_NULL;
				m_strSnapshotDeviceObject.Empty();
				m_strOriginalVolumeName.Empty();
				m_ProviderID = GUID_NULL;
				m_lSnapshotAttributes = 0;
				m_strCreationTimestamp.Empty();
				m_eStatus = 0;

				// Get the properties
				VSS_OBJECT_PROP_Ptr ptrObjProp;
				ptrObjProp.InitializeAsEmpty(ft);

				VSS_OBJECT_PROP* pProp = ptrObjProp.GetStruct();
				BS_ASSERT(pProp);
			    VSS_SNAPSHOT_PROP* pSnapProp = &(pProp->Obj.Snap);
				
				// Get the properties
				BS_ASSERT(m_pISnap);
				ft.hr = m_pISnap->GetProperties(pSnapProp);
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error getting the properties 0x%08lx", ft.hr);

			    // Fill the dialog fields
				m_ID = pSnapProp->m_SnapshotId;
				m_SnapshotSetID = pSnapProp->m_SnapshotSetId;
				m_strSnapshotDeviceObject = pSnapProp->m_pwszSnapshotDeviceObject;
				m_strOriginalVolumeName = pSnapProp->m_pwszOriginalVolumeName;
				m_ProviderID = pSnapProp->m_ProviderId;
				m_lSnapshotAttributes = pSnapProp->m_lSnapshotAttributes;
				m_strCreationTimestamp.Format( L"0x%08lx%08lx", pSnapProp->m_tsCreationTimestamp);
				m_eStatus = pSnapProp->m_eStatus;

				UpdateData( FALSE );
			}
            break;
        default:
            BS_ASSERT(false);
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Invalid method type");
        }

    }
    VSS_STANDARD_CATCH(ft)
}


void CSnapDlg::OnGetSnapshot()
{
    m_eMethodType = VSST_S_GET_SNAPSHOT;
}


void CSnapDlg::OnNextSnapshot()
{
	CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapDlg::OnNextSnapshot");
	
    if (m_pEnum == NULL)
    	return;

	// Empty the fields
	m_ID = GUID_NULL;
	m_SnapshotSetID = GUID_NULL;
	m_strSnapshotDeviceObject.Empty();
	m_strOriginalVolumeName.Empty();
	m_ProviderID = GUID_NULL;
	m_lSnapshotAttributes = 0;
	m_strCreationTimestamp.Empty();
	m_eStatus = 0;

	// Get the properties
	VSS_OBJECT_PROP_Ptr ptrObjProp;
	ptrObjProp.InitializeAsEmpty(ft);

	VSS_OBJECT_PROP* pProp = ptrObjProp.GetStruct();
	BS_ASSERT(pProp);
	ULONG ulFetched;
    ft.hr = m_pEnum->Next(1, pProp, &ulFetched);
	if (ft.HrFailed())
		ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
					L"Error querying the next volume 0x%08lx", ft.hr);

	VSS_SNAPSHOT_PROP* pSnapProp = &(pProp->Obj.Snap);

	m_ID = pSnapProp->m_SnapshotId;
	m_SnapshotSetID = pSnapProp->m_SnapshotSetId;
	m_strSnapshotDeviceObject = pSnapProp->m_pwszSnapshotDeviceObject;
	m_ProviderID = pSnapProp->m_ProviderId;
	m_lSnapshotAttributes = pSnapProp->m_lSnapshotAttributes;
	m_strCreationTimestamp.Format( L"0x%08lx%08lx", pSnapProp->m_tsCreationTimestamp);
	m_eStatus = pSnapProp->m_eStatus;

	UpdateData( FALSE );
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\snapdlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module SnapDlg.h | Header file for the snapshot dialog
    @end

Author:

    Adi Oltean  [aoltean]  01/25/2000

Revision History:

    Name        Date        Comments

    aoltean     01/25/2000  Created

--*/


#if !defined(__VSS_SNAP_DLG_H__)
#define __VSS_SNAP_DLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CSnapDlg dialog

class CSnapDlg : public CVssTestGenericDlg
{
    typedef enum _EMethodType {
        VSST_S_GET_SNAPSHOT,
    } EMethodType;

// Construction
public:
    CSnapDlg(
        IVssCoordinator *pICoord,
        CWnd* pParent = NULL); 
    ~CSnapDlg();

// Dialog Data
    //{{AFX_DATA(CSnapDlg)
	enum { IDD = IDD_SNAP };
	VSS_ID	m_ID;
	VSS_ID	m_SnapshotSetID;
	CString	m_strSnapshotDeviceObject;
	CString	m_strOriginalVolumeName;
	VSS_ID 	m_ProviderID;
	LONG 	m_lSnapshotAttributes;
	CString	m_strCreationTimestamp;
	INT		m_eStatus;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CSnapDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator>	m_pICoord;
    CComPtr<IVssSnapshot>		m_pISnap;
	CComPtr<IVssEnumObject> 	m_pEnum;
    EMethodType m_eMethodType;

    // Generated message map functions
    //{{AFX_MSG(CSnapDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnNextSnapshot();
    afx_msg void OnGetSnapshot();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_SNAP_DLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\querydlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module QueryDlg.h | Header file for the query dialog
    @end

Author:

    Adi Oltean  [aoltean]  09/22/1999

Revision History:

    Name        Date        Comments

    aoltean     09/22/1999  Created
	aoltean		09/27/1999	Adding Query mask flags

--*/


#if !defined(__VSS_TEST_QUERY_H__)
#define __VSS_TEST_QUERY_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CQueryDlg dialog

class CQueryDlg : public CVssTestGenericDlg
{
// Construction
public:
    CQueryDlg(
        IVssCoordinator *pICoord,
        CWnd* pParent = NULL); 
    ~CQueryDlg();

// Dialog Data
    //{{AFX_DATA(CQueryDlg)
	enum { IDD = IDD_QUERY };
	CString	    m_strObjectId;
	BOOL        m_bCkQueriedObject;
    BOOL        m_bCkDevice;
    BOOL        m_bCkOriginal;
    BOOL        m_bCkName;
    BOOL        m_bCkVersion;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CQueryDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator> m_pICoord;
    VSS_OBJECT_TYPE m_eSrcType;
    VSS_OBJECT_TYPE m_eDestType;

    // Generated message map functions
    //{{AFX_MSG(CQueryDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
	afx_msg void OnQueriedChk();
    afx_msg void OnSrcSnap();
    afx_msg void OnSrcSet();
    afx_msg void OnSrcProv();
    afx_msg void OnSrcVol();
    afx_msg void OnDestSnap();
    afx_msg void OnDestSet();
    afx_msg void OnDestProv();
    afx_msg void OnDestVol();
	afx_msg void OnDestWriter();
	//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_QUERY_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\ssdlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module SsDlg.cpp | Implementation of the Snapshot Set dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/23/1999

Revision History:

    Name        Date        Comments

    aoltean     07/23/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class
                            Removing some memory leaks
                            Adding Test provider
                            Fixing an assert
	aoltean		09/27/1999	Small changes

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "SwTstDlg.h"
#include "SsDlg.h"
#include "AsyncDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// Constants and defines

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))

const WCHAR   wszGUIDDefinition[] = L"{00000000-0000-0000-0000-000000000000}";
const WCHAR   wszVolumeDefinition[] = L"\\\\?\\Volume";
const WCHAR   wszHarddiskDefinition[] = L"\\Device\\Harddisk";
const WCHAR   wszDriveLetterDefinition[] = L"_:\\";

// {F9566CC7-D588-416d-9243-921E93613C92}
static const VSS_ID VSS_TESTAPP_SampleAppId =
{ 0xf9566cc7, 0xd588, 0x416d, { 0x92, 0x43, 0x92, 0x1e, 0x93, 0x61, 0x3c, 0x92 } };


/////////////////////////////////////////////////////////////////////////////
// CSnapshotSetDlg dialog

CSnapshotSetDlg::CSnapshotSetDlg(
    IVssCoordinator *pICoord,
    VSS_ID SnapshotSetId,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CSnapshotSetDlg::IDD, pParent),
    m_pICoord(pICoord),
    m_SnapshotSetId(SnapshotSetId)
{
    //{{AFX_DATA_INIT(CSnapshotSetDlg)
	//}}AFX_DATA_INIT
    m_strSnapshotSetId.Empty();
    m_nSnapshotsCount = 0;
    m_nAttributes = 0;
	m_bAsync = TRUE;
    m_bDo = false;              // "Add" enabled by default
	m_pProvidersList = NULL;
}

CSnapshotSetDlg::~CSnapshotSetDlg()
{
    if (m_pProvidersList)
        delete m_pProvidersList;
	/* REMOVED:
    if (m_pVolumesList)
        delete m_pVolumesList;
	*/
}

void CSnapshotSetDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CSnapshotSetDlg)
	DDX_Text(pDX, IDC_SS_ID,        m_strSnapshotSetId);
	DDX_Text(pDX, IDC_SS_COUNT,     m_nSnapshotsCount);
	DDX_Control(pDX, IDC_SS_VOLUMES,   m_cbVolumes);
	DDX_Control(pDX, IDC_SS_PROVIDERS, m_cbProviders);
	DDX_Text(pDX, IDC_SS_ATTR,      m_nAttributes);
	DDX_Check(pDX,IDC_SS_ASYNC,    m_bAsync);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSnapshotSetDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CSnapshotSetDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(ID_BACK, OnBack)
    ON_BN_CLICKED(IDC_SS_ADD, OnAdd)
    ON_BN_CLICKED(IDC_SS_DO, OnDo)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CSnapshotSetDlg message handlers


void CSnapshotSetDlg::InitVolumes()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapshotSetDlg::InitVolumes" );
    USES_CONVERSION;

    try
    {

        HANDLE  hSearch;
        WCHAR   wszVolumeName[MAX_PATH];

        hSearch = ::FindFirstVolume(wszVolumeName, MAX_PATH);
        if (hSearch == INVALID_HANDLE_VALUE)
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"FindfirstVolume cannot start an enumeration");

        while (true)
        {
            WCHAR   wszEnumeratedDosVolumeName[4];
            WCHAR   wszEnumeratedVolumeName[MAX_PATH];
            WCHAR   wszLinkName[MAX_PATH];
            UCHAR   wchDriveLetter;
            WCHAR   chTmp;

            // Check if it is a hard-disk
            // TBD - generalize this code!!!
            chTmp = wszVolumeName[48];
            wszVolumeName[48] = L'\0';
            ::QueryDosDevice(&wszVolumeName[4], wszLinkName, MAX_PATH);
            wszVolumeName[48] = chTmp;
            if (::wcsncmp(wszLinkName, wszHarddiskDefinition, ::wcslen(wszHarddiskDefinition)) == 0)
            {
                // Get the DOS drive letter, if possible
                BOOL bFind = FALSE;
                wcscpy(wszEnumeratedDosVolumeName, wszDriveLetterDefinition);
                for (wchDriveLetter = L'A'; wchDriveLetter <= L'Z'; wchDriveLetter++)
                {
                    wszEnumeratedDosVolumeName[0] = wchDriveLetter;
                    ::GetVolumeNameForVolumeMountPoint(
                        wszEnumeratedDosVolumeName,
                        wszEnumeratedVolumeName,
                        MAX_PATH
                        );
                    if (::wcscmp(wszVolumeName, wszEnumeratedVolumeName) == 0)
                    {
                        bFind = TRUE;
                        break;
                    }
                }

                // Inserting the volume into combo box.
                int nIndex = m_cbVolumes.AddString( W2T(bFind? wszEnumeratedDosVolumeName: wszVolumeName) );
                if (nIndex  < 0)
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error adding string in combo box");

				/* REMOVED
                // Getting the volume GUID
                GUID VolumeId;
                BS_ASSERT(::wcslen(wszVolumeDefinition) + ::wcslen(wszGUIDDefinition) + 1 == ::wcslen(wszVolumeName));
                WCHAR* pwszVolumeGuid = wszVolumeName + ::wcslen(wszVolumeDefinition);
                pwszVolumeGuid[::wcslen(wszGUIDDefinition)] = L'\0';
                ft.hr = ::CLSIDFromString(W2OLE(pwszVolumeGuid), &VolumeId);
                if ( ft.HrFailed() )
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on recognizing Volume Id. hr = 0x%08lx", ft.hr);

                // Allocating a new item in the volume guid list
                GuidList* pVolumeGuid = new GuidList(VolumeId);
                if ( pVolumeGuid == NULL )
                    ft.ErrBox( VSSDBG_VSSTEST, E_OUTOFMEMORY, L"Memory allocation error");

                // Inserting the volume into combo box.
                int nIndex = m_cbVolumes.AddString( W2T(bFind? wszEnumeratedDosVolumeName: wszVolumeName) );
                if (nIndex  < 0)
                {
                    delete pVolumeGuid;
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error adding string in combo box");
                }

                int nResult = m_cbVolumes.SetItemDataPtr(nIndex, pVolumeGuid);
                if (nResult == CB_ERR)
                {
                    delete pVolumeGuid;
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error setting data to an item in combo box");
                }

                pVolumeGuid->m_pPrev = m_pVolumesList;
                m_pVolumesList = pVolumeGuid;
				*/
            }

            // Find next volume
            BOOL bResult = ::FindNextVolume(hSearch, wszVolumeName, MAX_PATH);
            if (!bResult)
                break;
        }

        // Close enumeration
        ::FindVolumeClose(hSearch);

        // Select the first element
        if (m_cbVolumes.GetCount() > 0)
            m_cbVolumes.SetCurSel(0);
    }
    VSS_STANDARD_CATCH(ft)
}


void CSnapshotSetDlg::InitProviders()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapshotSetDlg::InitProviders" );
    USES_CONVERSION;

    try
    {
        //
        //  Adding the Software provider item
        //

        // Allocating a GUID. It will be deallocated on OnClose
        GuidList* pProviderGuid = new GuidList(VSS_SWPRV_ProviderId);
        if ( pProviderGuid == NULL )
            ft.ErrBox( VSSDBG_VSSTEST, E_OUTOFMEMORY, L"Memory allocation error");

        // Inserting the software provider name into combo box.
        int nIndex = m_cbProviders.AddString( _T("Software Provider") );
        if (nIndex  < 0)
        {
            delete pProviderGuid;
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error adding string in combo box");
        }

        int nResult = m_cbProviders.SetItemDataPtr(nIndex, &(pProviderGuid->m_Guid));
        if (nResult == CB_ERR)
        {
            delete pProviderGuid;
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error setting data to an item in combo box");
        }

        pProviderGuid->m_pPrev = m_pProvidersList;
        m_pProvidersList = pProviderGuid;

        //
        //  Adding the NULL provider item
        //

        pProviderGuid = new GuidList(GUID_NULL);
        if ( pProviderGuid == NULL )
            ft.ErrBox( VSSDBG_VSSTEST, E_OUTOFMEMORY, L"Memory allocation error");

        // Inserting the software provider name into combo box.
        nIndex = m_cbProviders.AddString( _T("NULL Provider") );
        if (nIndex  < 0)
        {
            delete pProviderGuid;
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error adding string in combo box");
        }

        nResult = m_cbProviders.SetItemDataPtr(nIndex, &(pProviderGuid->m_Guid));
        if (nResult == CB_ERR)
        {
            delete pProviderGuid;
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error setting data to an item in combo box");
        }

        pProviderGuid->m_pPrev = m_pProvidersList;
        m_pProvidersList = pProviderGuid;

        // Select the first element
        if (m_cbProviders.GetCount() > 0)
            m_cbProviders.SetCurSel(0);
    }
    VSS_STANDARD_CATCH(ft)
}


void CSnapshotSetDlg::InitMembers()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapshotSetDlg::InitMembers" );
    USES_CONVERSION;

    try
    {
        // Initializing the radio buttons                   // bug??
        BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_SS_ADD, IDC_SS_ADD, IDC_SS_ADD );
        _ASSERTE( bRes );

        // Initializing Snapshot Set ID
        LPOLESTR strGUID;
        ft.hr = ::StringFromCLSID( m_SnapshotSetId, &strGUID );
        if ( ft.HrFailed() )
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on calling StringFromCLSID. hr = 0x%08lx", ft.hr);

        m_strSnapshotSetId = OLE2T(strGUID);
        ::CoTaskMemFree(strGUID);
    }
    VSS_STANDARD_CATCH(ft)
}


BOOL CSnapshotSetDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapshotSetDlg::OnInitDialog" );
    USES_CONVERSION;

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        InitVolumes();
        InitProviders();
        InitMembers();

        UpdateData(FALSE);
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}


void CSnapshotSetDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSnapshotSetDlg::OnNext" );

    USES_CONVERSION;
	LPTSTR ptszVolumeName = NULL;

    try
    {
        UpdateData();

        if (m_bDo)
        {
			if (m_bAsync)
			{
				CComPtr<IVssAsync> pAsync;

				ft.hr = m_pICoord->DoSnapshotSet(
				            NULL,
							&pAsync
							);

				if ( ft.HrFailed() )
				{
					BS_ASSERT(pAsync == NULL);
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
							   L"Error on calling DoSnapshotSet. hr = 0x%08lx", ft.hr);
				}
				BS_ASSERT(pAsync);

                ShowWindow(SW_HIDE);
                CAsyncDlg dlg(pAsync);
                if (dlg.DoModal() == IDCANCEL)
                    EndDialog(IDCANCEL);
                else
                    ShowWindow(SW_SHOW);

			}
			else
			{
				ft.hr = m_pICoord->DoSnapshotSet(
				            NULL,
							NULL
							);

				if ( ft.HrFailed() )
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
							   L"Error on calling DoSnapshotSet. hr = 0x%08lx", ft.hr);
			}

			// Get all snapshot attributes
			if (m_pSnap)
			{
			/*
				VSS_OBJECT_PROP_Ptr ptrSnapshot;
				ptrSnapshot.InitializeAsSnapshot( ft,
					GUID_NULL,
					GUID_NULL,
					NULL,
					NULL,
					GUID_NULL,
					NULL,
					VSS_SWPRV_ProviderId,
					NULL,
					0,
					0,
					VSS_SS_UNKNOWN,
					0,
					0,
					0,
					NULL
					);
				VSS_SNAPSHOT_PROP* pSnap = &(ptrSnapshot.GetStruct()->Obj.Snap);

				ft.hr = m_pSnap->GetProperties( pSnap);
				WCHAR wszBuffer[2048];
				ptrSnapshot.Print(ft, wszBuffer, 2048);

				ft.MsgBox( L"Results", wszBuffer);
			*/
				LPWSTR wszName;
				ft.hr = m_pSnap->GetDevice( &wszName );
				if (ft.HrFailed())
					ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
								L"Error on getting the snapshot name 0x%08lx", ft.hr);

				ft.MsgBox( L"Snapshot name = %s", wszName);

				::VssFreeString(wszName);
			}
			
            ft.MsgBox( L"OK", L"Snapshot Set created!" );

            EndDialog(IDOK);
        }
        else
        {
            // Getting the Volume Id
            int nIndex = m_cbVolumes.GetCurSel();
            if (nIndex == CB_ERR)
                ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on getting the currently selected volume");

            // REMOVED: GUID* pVolumeGuid = (GUID*)m_cbVolumes.GetItemDataPtr(nIndex);
			int nBufferLen = m_cbVolumes.GetLBTextLen(nIndex);
            if (nBufferLen == CB_ERR)
                ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on getting the currently selected volume");

			ptszVolumeName = new TCHAR[nBufferLen+1];
			if (ptszVolumeName == NULL)
                ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on getting the currently selected volume");

			if ( m_cbVolumes.GetLBText( nIndex, ptszVolumeName ) == CB_ERR)
				ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on getting the currently selected volume");

			LPWSTR pwszVolumeName = T2W(ptszVolumeName);

            // Getting the Provider Id
            nIndex = m_cbProviders.GetCurSel();
            if (nIndex == CB_ERR)
                ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on getting the currently selected provider");

            GUID* pProviderGuid = (GUID*)m_cbProviders.GetItemDataPtr(nIndex);

            if ( *pProviderGuid == VSS_SWPRV_ProviderId )
            {
			    CComPtr<IVssSnapshot> pSnapshot;
                m_pSnap = NULL;
                ft.hr = m_pICoord->AddToSnapshotSet(
                    pwszVolumeName,
                    VSS_SWPRV_ProviderId,
                    &m_pSnap
                    );

                if ( ft.HrFailed() )
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on calling AddToSnapshotSet. hr = 0x%08lx", ft.hr);

                // Increment the number of snapshots
                m_nSnapshotsCount++;
            }
            else if ( *pProviderGuid == GUID_NULL )
            {

#if 0
                // Software provider
                ShowWindow(SW_HIDE);
                CSoftwareSnapshotTestDlg dlg;
                if (dlg.DoModal() == IDCANCEL)
                    EndDialog(IDCANCEL);
                else
                    ShowWindow(SW_SHOW);

                // See if it is read-only
                if (! dlg.m_bReadOnly)
                    lAttributes |= VSS_VOLSNAP_ATTR_READ_WRITE;
                else
                    lAttributes &= ~VSS_VOLSNAP_ATTR_READ_WRITE;
#endif

                m_pSnap = NULL;
                ft.hr = m_pICoord->AddToSnapshotSet(
                    pwszVolumeName,
                    *pProviderGuid,
                    &m_pSnap
                    );

                if ( ft.HrFailed() )
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on calling AddToSnapshotSet. hr = 0x%08lx", ft.hr);
/*
                CComPtr<IVsSoftwareSnapshot> pSnapshot;
                ft.hr = m_pSnap->SafeQI( IVsSoftwareSnapshot, &pSnapshot );
                if ( ft.HrFailed() )
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
                        L"Error querying the IVssSnapshot interface. hr = 0x%08lx", ft.hr);
                BS_ASSERT( m_pSnap != NULL);

                ft.hr = pSnapshot->SetInitialAllocation( dlg.m_nLogFileSize*1024*1024 );
                if ( ft.HrFailed() )
                    ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
                        L"Error on calling SetInitialAllocation. hr = 0x%08lx", ft.hr);
*/
                // Increment the number of snapshots
                m_nSnapshotsCount++;

            }
            else
            {
                BS_ASSERT( false );
            }

			CWnd* pWnd = GetDlgItem(IDC_SS_DO);
			if (pWnd)
				pWnd->EnableWindow(TRUE);

            UpdateData(FALSE);
        }
    }
    VSS_STANDARD_CATCH(ft)

	delete ptszVolumeName;
}


void CSnapshotSetDlg::OnBack()
{
	EndDialog(ID_BACK);
}


void CSnapshotSetDlg::OnClose()
{
    CVssTestGenericDlg::OnClose();
}


void CSnapshotSetDlg::EnableGroup()
{
    CWnd *pWnd;
    pWnd = GetDlgItem(IDC_SS_VOLUMES);
    if (pWnd)
        pWnd->EnableWindow(!m_bDo);
    pWnd = GetDlgItem(IDC_SS_PROVIDERS);
    if (pWnd)
        pWnd->EnableWindow(!m_bDo);
    /*
    pWnd = GetDlgItem(IDC_SS_ATTR);
    if (pWnd)
        pWnd->EnableWindow(!m_bDo);
    */
    /*
    pWnd = GetDlgItem(IDC_SS_PARTIAL_COMMIT);
    if (pWnd)
        pWnd->EnableWindow(m_bDo);
    pWnd = GetDlgItem(IDC_SS_WRITER_VETOES);
    if (pWnd)
        pWnd->EnableWindow(m_bDo);
    pWnd = GetDlgItem(IDC_SS_WRITER_CANCEL);
    if (pWnd)
        pWnd->EnableWindow(m_bDo);
    pWnd = GetDlgItem(IDC_SS_ASYNC);
    if (pWnd)
        pWnd->EnableWindow(m_bDo);
    */
}

void CSnapshotSetDlg::OnAdd()
{
    m_bDo = FALSE;
    EnableGroup();
}


void CSnapshotSetDlg::OnDo()
{
    m_bDo = TRUE;
    EnableGroup();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\stdafx.cpp ===
/*++

Copyright (c) 1998  Microsoft Corporation

Module Name:

    StdAfx.cpp

Abstract:

    Source file that includes just the standard includes.  stdafx.pch will be
    the pre-compiled header and stdafx.obj will contain the pre-compiled type
    information.

Author:

    Adi Oltean  [aoltean]  11/01/1998

Revision History:
    Name        Date        Comments

--*/

#include "stdafx.hxx"
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\ssdlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module SsDlg.h | Header file for the Snapshot Set dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class

--*/


#if !defined(__VSS_SS_DLG_H__)
#define __VSS_SS_DLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CGuidList structure

struct GuidList
{
    GuidList(GUID Guid, GuidList* pPrev = NULL)
    {
        m_Guid = Guid;
        m_pPrev = pPrev;
    };

    ~GuidList()
    {
        if (m_pPrev)
            delete m_pPrev;
    };

    GUID        m_Guid;
    GuidList*   m_pPrev;

private:
    GuidList();
    GuidList(const GuidList&);
};



/////////////////////////////////////////////////////////////////////////////
// CSnapshotSetDlg dialog

class CSnapshotSetDlg : public CVssTestGenericDlg
{
// Construction
public:
    CSnapshotSetDlg(
        IVssCoordinator *pICoord,
        VSS_ID SnapshotSetId,
        CWnd* pParent = NULL); 
    ~CSnapshotSetDlg();

// Dialog Data
    //{{AFX_DATA(CSnapshotSetDlg)
	enum { IDD = IDD_SS };
	CString	    m_strSnapshotSetId;
    int         m_nSnapshotsCount;
	CComboBox	m_cbVolumes;
	CComboBox	m_cbProviders;
    int         m_nAttributes;
    BOOL        m_bAsync;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CSnapshotSetDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator> m_pICoord;
    VSS_ID      m_SnapshotSetId;
    VSS_ID      m_VolumeId;
    VSS_ID      m_ProviderId;
    bool        m_bDo;
    GuidList*   m_pProvidersList;
	// REMOVED:    GuidList*   m_pVolumesList;
	CComPtr<IVssSnapshot> m_pSnap;

    void EnableGroup();
    void InitMembers();
    void InitVolumes();
    void InitProviders();

    // Generated message map functions
    //{{AFX_MSG(CSnapshotSetDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnBack();
    afx_msg void OnAdd();
    afx_msg void OnDo();
    afx_msg void OnClose();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_SS_DLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\swtstdlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module SwTstDlg.cpp | Implementation of the Software Snapshot dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/26/1999

Revision History:

    Name        Date        Comments

    aoltean     07/26/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class
    aoltean     09/11/1999  More validation of log file name
    aoltean     09/09/1999  Adding a default value for the log file name

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "SwTstDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CSoftwareSnapshotTestDlg dialog

CSoftwareSnapshotTestDlg::CSoftwareSnapshotTestDlg(
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CSoftwareSnapshotTestDlg::IDD, pParent)
{
    //{{AFX_DATA_INIT(CSoftwareSnapshotTestDlg)
	//}}AFX_DATA_INIT

//    m_strLogFileName = _T("e:\\snap.log");
    m_nLogFileSize = 100;
    m_bReadOnly = TRUE;
}

CSoftwareSnapshotTestDlg::~CSoftwareSnapshotTestDlg()
{
}

void CSoftwareSnapshotTestDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CSoftwareSnapshotTestDlg)
//	DDX_Text(pDX, IDC_SWTST_LOGFILE,        m_strLogFileName);
	DDX_Text(pDX, IDC_SWTST_LOGFILE_SIZE,   m_nLogFileSize);
	DDX_Check(pDX,IDC_SWTST_READONLY,       m_bReadOnly);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CSoftwareSnapshotTestDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CSoftwareSnapshotTestDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()


/////////////////////////////////////////////////////////////////////////////
// CSoftwareSnapshotTestDlg message handlers


BOOL CSoftwareSnapshotTestDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CCoordDlg::OnInitDialog" );
    USES_CONVERSION;

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        UpdateData(FALSE);
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}


void CSoftwareSnapshotTestDlg::OnNext() 
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CSoftwareSnapshotTestDlg::OnNext" );

    USES_CONVERSION;

    try
    {
        UpdateData();
/*
        // Check if file name is empty
        if (m_strLogFileName.IsEmpty())
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, _T("Invalid value for the Log file name"));

        // Check if file name has a drive letter
		m_strLogFileName.MakeUpper();
        WCHAR* wszLogFileName = T2W((LPTSTR)(LPCTSTR)m_strLogFileName);

        WCHAR wszDrive[_MAX_DRIVE];
        WCHAR wszDir[_MAX_DIR];
        WCHAR wszFileName[_MAX_FNAME];
        WCHAR wszExt[_MAX_EXT];
        _wsplitpath(wszLogFileName, wszDrive, wszDir, wszFileName, wszExt);  
        if (wszDrive[0] == L'\0')
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, _T("Drive letter not specified for the Log file name"));
        if (wszDir[0] == L'\0')
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, _T("Directory not specified for the Log file name"));
*/
        // Check if file name has a drive letter
        if (m_nLogFileSize <= 0)
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, _T("Invalid value for the Log file initial size"));

        EndDialog(IDOK);
    }
    VSS_STANDARD_CATCH(ft)
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\writer\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by writer.rc
//
#define IDS_PROJNAME                    100
#define IDR_Writer_1                    100
#define IDR_DSSSNAPSHOTWRITER           101

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        201
#define _APS_NEXT_COMMAND_VALUE         32768
#define _APS_NEXT_CONTROL_VALUE         201
#define _APS_NEXT_SYMED_VALUE           102
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\voldlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module QueryDlg.h | Header file for the query dialog
    @end

Author:

    Adi Oltean  [aoltean]  09/22/1999

Revision History:

    Name        Date        Comments

    aoltean     09/22/1999  Created
	aoltean		09/27/1999	Adding Query mask flags

--*/


#if !defined(__VSS_TEST_VOLDLG_H__)
#define __VSS_TEST_VOLDLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CVolDlg dialog

class CVolDlg : public CVssTestGenericDlg
{
    typedef enum _VSS_IS_VOL_XXX { 
        VSS_IS_VOL_SUPPORTED, 
        VSS_IS_VOL_SNAPSHOTTED,
        VSS_IS_VOL_SUPPORTED2, 
        VSS_IS_VOL_SNAPSHOTTED2 
    } VSS_IS_VOL_XXX;

// Construction
public:
    CVolDlg(
        IVssCoordinator *pICoord,
        CWnd* pParent = NULL); 
    ~CVolDlg();

// Dialog Data
    //{{AFX_DATA(CVolDlg)
	enum { IDD = IDD_VOLUME };
	CString	    m_strObjectId;
	CString     m_strVolumeName;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CVolDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    CComPtr<IVssCoordinator> m_pICoord;
    VSS_IS_VOL_XXX m_eCallType;

    // Generated message map functions
    //{{AFX_MSG(CVolDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
	afx_msg void OnIsVolumeSupported();
    afx_msg void OnIsVolumeSnapshotted();
	afx_msg void OnIsVolumeSupported2();
    afx_msg void OnIsVolumeSnapshotted2();
	//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_VOLDLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\vsstest.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module VssTest.h | Main header file for the test application
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created

--*/


#if !defined(__VSS_TEST_H__)
#define __VSS_TEST_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#ifndef __AFXWIN_H__
	#error include 'stdafx.hxx' before including this file for PCH
#endif

#include "resource.h"		// main symbols

/////////////////////////////////////////////////////////////////////////////
// CVssTestApp:
// See Test.cpp for the implementation of this class
//

class CVssTestApp : public CWinApp
{
public:
	CVssTestApp();

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CVssTestApp)
	public:
	virtual BOOL InitInstance();
    virtual BOOL ExitInstance();
	//}}AFX_VIRTUAL

// Implementation

	//{{AFX_MSG(CVssTestApp)
		// NOTE - the ClassWizard will add and remove member functions here.
		//    DO NOT EDIT what you see in these blocks of generated code !
	//}}AFX_MSG
	DECLARE_MESSAGE_MAP()
};


inline void AFXAPI DDX_Text(CDataExchange* pDX, int nIDC, GUID& value)
{
   if (pDX->m_bSaveAndValidate)
	{
		CString str;
		DDX_Text(pDX, nIDC, str);

		LPTSTR ptszObjectId = const_cast<LPTSTR>(LPCTSTR(str));
        HRESULT hr = ::CLSIDFromString(T2OLE(ptszObjectId), &value);
        if (hr != S_OK)
			pDX->Fail();        // throws exception
	}
	else
	{
		CString str;
		str.Format(WSTR_GUID_FMT, GUID_PRINTF_ARG(value));
		DDX_Text(pDX, nIDC, str);
	}
}


/////////////////////////////////////////////////////////////////////////////

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_TEST_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\swtstdlg.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module SwTstDlg.h | Header file for the Software Snapshot dialog
    @end

Author:

    Adi Oltean  [aoltean]  07/26/1999

Revision History:

    Name        Date        Comments

    aoltean     07/26/1999  Created
    aoltean     08/05/1999  Splitting wizard functionality in a base class

--*/


#if !defined(__VSS_SWTST_DLG_H__)
#define __VSS_SWTST_DLG_H__

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000


/////////////////////////////////////////////////////////////////////////////
// CSoftwareSnapshotTestDlg dialog

class CSoftwareSnapshotTestDlg : public CVssTestGenericDlg
{
// Construction
public:
    CSoftwareSnapshotTestDlg(
        CWnd* pParent = NULL); 
    ~CSoftwareSnapshotTestDlg();

// Dialog Data
    //{{AFX_DATA(CSoftwareSnapshotTestDlg)
	enum { IDD = IDD_SWTST };
//	CString	m_strLogFileName;
    int     m_nLogFileSize;
    BOOL    m_bReadOnly;
	//}}AFX_DATA

    // ClassWizard generated virtual function overrides
    //{{AFX_VIRTUAL(CSoftwareSnapshotTestDlg)
    protected:
    virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV support
    //}}AFX_VIRTUAL

protected:
    // Generated message map functions
    //{{AFX_MSG(CSoftwareSnapshotTestDlg)
    virtual BOOL OnInitDialog();
    afx_msg void OnNext();
    afx_msg void OnAdd();
    afx_msg void OnDo();
//}}AFX_MSG
    DECLARE_MESSAGE_MAP()
};

//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(__VSS_SWTST_DLG_H__)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\vsstest.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module VssTest.cpp | Main file for the Vss test application
    @end

Author:

    Adi Oltean  [aoltean]  07/22/1999

Revision History:

    Name        Date        Comments

    aoltean     07/22/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"

#include "GenDlg.h"

#include "VssTest.h"
#include "ConnDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#pragma warning( disable: 4189 )  /* local variable is initialized but not referenced */
#include <atlimpl.cpp>
#pragma warning( default: 4189 )  /* local variable is initialized but not referenced */


/////////////////////////////////////////////////////////////////////////////
// CVssTestApp

BEGIN_MESSAGE_MAP(CVssTestApp, CWinApp)
    //{{AFX_MSG_MAP(CVssTestApp)
        // NOTE - the ClassWizard will add and remove mapping macros here.
        //    DO NOT EDIT what you see in these blocks of generated code!
    //}}AFX_MSG
    ON_COMMAND(ID_HELP, CWinApp::OnHelp)
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CVssTestApp construction

CVssTestApp::CVssTestApp()
{
    // TODO: add construction code here,
    // Place all significant initialization in InitInstance
}

/////////////////////////////////////////////////////////////////////////////
// The one and only CVssTestApp object

CVssTestApp theApp;

/////////////////////////////////////////////////////////////////////////////
// CVssTestApp initialization

BOOL CVssTestApp::InitInstance()
{
    // Standard initialization
    // If you are not using these features and wish to reduce the size
    //  of your final executable, you should remove from the following
    //  the specific initialization routines you do not need.

    CoInitialize(NULL);

#ifdef _AFXDLL
    Enable3dControls();         // Call this when using MFC in a shared DLL
#else
    Enable3dControlsStatic();   // Call this when linking to MFC statically
#endif

    CConnectDlg dlg;
    m_pMainWnd = &dlg;
    int nResponse = (int)dlg.DoModal();
    if (nResponse == IDOK)
    {
        // TODO: Place code here to handle when the dialog is
        //  dismissed with OK
    }
    else if (nResponse == IDCANCEL)
    {
        // TODO: Place code here to handle when the dialog is
        //  dismissed with Cancel
    }

    // Avoid a AV on lclosing the app.
    m_pMainWnd = NULL;

    // Since the dialog has been closed, return FALSE so that we exit the
    //  application, rather than start the application's message pump.
    return FALSE;
}


BOOL CVssTestApp::ExitInstance()
{
    CoUninitialize();
    return CWinApp::ExitInstance();
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\writer\resolve.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Resolve.cpp | Implementation of Writer
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created
	aoltean		09/22/1999	Making console output clearer

--*/


/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <comadmin.h>

#include "vs_assert.hxx"

// ATL
#include <atlconv.h>
#include <atlbase.h>
extern CComModule _Module;
#include <atlcom.h>

#include "vs_inc.hxx"


#include "comadmin.hxx"
#include "vsevent.h"
#include "writer.h"



/////////////////////////////////////////////////////////////////////////////
// User interaction functions

//
// During ResolveResource
//

void OnAddResource(IVssDependencies* pDep);
void OnAddDependency(IVssDependencies* pDep);
void OnCancel(IVssDependencies* pDep);
void OnPrint(IVssDependencies* pDep);

void AskDuringResolve(
	IN	CVssFunctionTracer& ft,
	IN	IDispatch* pCallback	
	);

/////////////////////////////////////////////////////////////////////////////
// CVssWriter


STDMETHODIMP CVssWriter::ResolveResource(
 		IN BSTR bstrAppInstance,			
 		IN BSTR bstrResourceName,			
		IN BSTR bstrResourceId,	
 		IN BSTR bstrProcessContext,
		IN BSTR bstrProcessId,		
		IN	IDispatch* pDepGraphCallback	
	)
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVssWriter::ResolveResource" );

    ft.Msg(L"\nReceived Event: ResolveResource\nParameters:");
    ft.Msg(L"\tstrAppInstance = %s", (LPWSTR)bstrAppInstance);
    ft.Msg(L"\tstrResourceName = %s", (LPWSTR)bstrResourceName);
    ft.Msg(L"\tstrResourceId = %s", (LPWSTR)bstrResourceId);
    ft.Msg(L"\tstrProcessContext = %s", (LPWSTR)bstrProcessContext);
    ft.Msg(L"\tstrProcessId = %s", (LPWSTR)bstrProcessId);
    ft.Msg(L"\tstrProcessId = %s", (LPWSTR)bstrProcessId);

	AskDuringResolve( ft, pDepGraphCallback );

	return S_OK;
}



/////////////////////////////////////////////////////////////////////////////
// Private implementation


void AskDuringResolve(
	IN	CVssFunctionTracer& ft,
	IN IDispatch* pCallback	
	)
{
	while(true)
	{
		ft.Msg(L"\nCommands:");
		ft.Msg(L"\t[1] Done");
		ft.Msg(L"\t[2] Add Resource");
		ft.Msg(L"\t[3] Add Dependency");
		ft.Msg(L"\t[4] Cancel");
		ft.Msg(L"\t[5] Print graph");

		try
		{
			CComPtr<IVssDependencies> pDep;
			ft.hr = pCallback->SafeQI(IVssDependencies, &pDep);
			if (ft.HrFailed())
				ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QI 0x%08lx", ft.hr );
			BS_ASSERT(pDep);

			int  nOption = QueryInt(L"Option: ");
			switch(nOption)
			{
			case 1:
				return;

			case 2:
				OnAddResource(pDep);
				break;

			case 3:
				OnAddDependency(pDep);
				break;

			case 4:
				OnCancel(pDep);
				break;

			case 5:
				OnPrint(pDep);
				break;
				
			default:
				break;
			}
		}
		VSS_STANDARD_CATCH(ft)
	}

}

void OnAddResource(IVssDependencies* pDep)
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"OnAddResource" );

	CComBSTR strNewResourceName = QueryString(L"New resource name: ");
	CComBSTR strAppInstance = QueryString(L"App Instance: ");
	WCHAR wchIsExternal = (QueryString(L"External? [y/N] "))[0];
	VSS_RESOURCE_TYPE eType = (towupper(wchIsExternal) == L'Y')?
		VSS_EXTERNAL_RESOURCE: VSS_LOCAL_RESOURCE;
	CComBSTR strVolumeList = QueryString(L"Volume List: ");
	CComBSTR strDetails = QueryString(L"Details: ");

	CComBSTR strResourceId;

	ft.hr = pDep->AddResource(
						strNewResourceName,
						strAppInstance,
						eType,
						strVolumeList,
						strDetails,
						&strResourceId
						);
	if (ft.HrFailed())
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling AddResource 0x%08lx", ft.hr );

	ft.Msg(L"Resource Id = %s ; HRESULT = 0x%08lx", strResourceId, ft.hr );
}


void OnAddDependency(IVssDependencies* pDep)
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"OnAddDependency" );

	CComBSTR strFromResourceId = QueryString(L"From Resource ID: ");
	CComBSTR strToResourceId = QueryString(L"To Resource ID: ");
	CComBSTR strDescription = QueryString(L"Description: ");

	ft.hr = pDep->AddDependency(
						strFromResourceId,
						strToResourceId,
						strDescription
						);
	if (ft.HrFailed())
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling AddDependency 0x%08lx", ft.hr );

	ft.Msg(L"HRESULT = 0x%08lx", ft.hr );
}


void OnCancel(IVssDependencies* pDep)
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"OnCancel" );

	HRESULT hrErrorCode = QueryInt(L"Error code: ");
	CComBSTR bstrCancelReason = QueryString(L"Cancel reason: ");

	ft.hr = pDep->Cancel( hrErrorCode, bstrCancelReason );
	if (ft.HrFailed())
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling AddDependency 0x%08lx", ft.hr );

	ft.Msg(L"HRESULT = 0x%08lx", ft.hr );
}


void OnPrint(IVssDependencies* pDep)
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"OnPrint" );

	CComPtr<IDispatch> pDisp;
	ft.hr = pDep->SaveAsXML( NULL, 1, &pDisp );
	if (ft.HrFailed())
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling SaveAsXML 0x%08lx", ft.hr );
	BS_ASSERT(pDisp);

	// Get the Document interface
	CComPtr<IXMLDOMDocument> pDoc;
	ft.hr = pDisp->SafeQI( IXMLDOMDocument, &pDoc );
	if (ft.HrFailed())
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QI 0x%08lx", ft.hr );
	BS_ASSERT(pDoc);
/*
	// Get a file name
	CComBSTR bstrOutputFile = QueryString(L"Output file name: ");
*/
	CComBSTR bstrOutputFile = L"output.xml";

	if (!bstrOutputFile)
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"NULL file name" );
	
	// Save the document into that file
	CComVariant varFileName = bstrOutputFile;
	ft.hr = pDoc->save(varFileName);
	if (ft.HrFailed())
		ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling IXMLDOCDocument::save 0x%08lx", ft.hr );

	// Execute the command
	_wsystem(L"start output.xml");
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\vss_test\voldlg.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module VolDlg.cpp | Implementation of the IsVolumeXXX dialog
    @end

Author:

    Adi Oltean  [aoltean]  10/22/2000

Revision History:

    Name        Date        Comments

    aoltean     10/22/2000  Created

--*/


/////////////////////////////////////////////////////////////////////////////
// Includes


#include "stdafx.hxx"
#include "resource.h"
#include "vsswprv.h"

#include "GenDlg.h"

#include "VssTest.h"
#include "VolDlg.h"
#include "vswriter.h"
#include "vsbackup.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

#define STR2W(str) ((LPTSTR)((LPCTSTR)(str)))


/////////////////////////////////////////////////////////////////////////////
// CVolDlg dialog

CVolDlg::CVolDlg(
    IVssCoordinator *pICoord,
    CWnd* pParent /*=NULL*/
    )
    : CVssTestGenericDlg(CVolDlg::IDD, pParent), m_pICoord(pICoord)
{
    //{{AFX_DATA_INIT(CVolDlg)
	m_strObjectId.Empty();
    m_strVolumeName.Empty();
	//}}AFX_DATA_INIT
}

CVolDlg::~CVolDlg()
{
}

void CVolDlg::DoDataExchange(CDataExchange* pDX)
{
    CVssTestGenericDlg::DoDataExchange(pDX);
    //{{AFX_DATA_MAP(CVolDlg)
	DDX_Text(pDX, IDC_VOLUME_OBJECT_ID, m_strObjectId);
	DDX_Text(pDX, IDC_VOLUME_NAME, m_strVolumeName);
	//}}AFX_DATA_MAP
}

BEGIN_MESSAGE_MAP(CVolDlg, CVssTestGenericDlg)
    //{{AFX_MSG_MAP(CVolDlg)
    ON_BN_CLICKED(IDC_NEXT, OnNext)
    ON_BN_CLICKED(IDC_VOLUME_IS_VOL_SUPPORTED,	OnIsVolumeSupported)
    ON_BN_CLICKED(IDC_VOLUME_IS_VOL_SNAPSHOTTED,OnIsVolumeSnapshotted)
    ON_BN_CLICKED(IDC_VOLUME_IS_VOL_SUPPORTED2,	OnIsVolumeSupported2)
    ON_BN_CLICKED(IDC_VOLUME_IS_VOL_SNAPSHOTTED2,OnIsVolumeSnapshotted2)
    //}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CVolDlg message handlers

BOOL CVolDlg::OnInitDialog()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVolDlg::OnInitDialog" );

    try
    {
        CVssTestGenericDlg::OnInitDialog();

        m_eCallType = VSS_IS_VOL_SUPPORTED;
        BOOL bRes = ::CheckRadioButton( m_hWnd, IDC_VOLUME_IS_VOL_SUPPORTED, IDC_VOLUME_IS_VOL_SUPPORTED, IDC_VOLUME_IS_VOL_SUPPORTED );
        _ASSERTE( bRes );

        // Initializing Snapshot Set ID
		VSS_ID ObjectId = VSS_SWPRV_ProviderId;
        LPOLESTR strGUID;
        ft.hr = ::StringFromCLSID( ObjectId, &strGUID );
        if ( ft.HrFailed() )
            ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error on calling StringFromCLSID. hr = 0x%08lx", ft.hr);

        m_strObjectId = OLE2T(strGUID);
        ::CoTaskMemFree(strGUID);

        UpdateData( FALSE );
    }
    VSS_STANDARD_CATCH(ft)

    return TRUE;  // return TRUE  unless you set the focus to a control
}

void CVolDlg::OnNext()
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVolDlg::OnNext" );
    USES_CONVERSION;

	const nBuffLen = 2048; // including the zero character.
	WCHAR wszBuffer[nBuffLen];

    try
    {
        UpdateData();

		// Get the provider Id.
		LPTSTR ptszObjectId = const_cast<LPTSTR>(LPCTSTR(m_strObjectId));
		VSS_ID ProviderId;
        ft.hr = ::CLSIDFromString(T2OLE(ptszObjectId), &ProviderId);
        if (ft.HrFailed())
            ft.Throw( VSSDBG_COORD, E_UNEXPECTED,
                      L"Error on converting the object Id %s to a GUID. lRes == 0x%08lx",
                      T2W(ptszObjectId), ft.hr );

		// Get the enumerator
		BS_ASSERT(m_pICoord);
		BOOL bResult = FALSE;
		LPWSTR pwszFunctionName = L"<unknown function>";
		switch (m_eCallType) {
	    case VSS_IS_VOL_SUPPORTED:
    		ft.hr = m_pICoord->IsVolumeSupported(
    			ProviderId,
    			T2W(LPTSTR((LPCTSTR)m_strVolumeName)),
    			&bResult
    		);
    		pwszFunctionName = L"IsVolumeSupported";
    		break;
	    case VSS_IS_VOL_SNAPSHOTTED:
    		ft.hr = m_pICoord->IsVolumeSnapshotted(
    			ProviderId,
    			T2W(LPTSTR((LPCTSTR)m_strVolumeName)),
    			&bResult
    		);
    		pwszFunctionName = L"IsVolumeSnapshotted";
    		break;
	    case VSS_IS_VOL_SUPPORTED2: 
	        {
    	        CComPtr<IVssBackupComponents> pComp;
    	        ft.hr = CreateVssBackupComponents(&pComp);
        		ft.hr = pComp->IsVolumeSupported(
        			ProviderId,
        			T2W(LPTSTR((LPCTSTR)m_strVolumeName)),
        			&bResult
        		);
        		pwszFunctionName = L"IsVolumeSupported2";
    	    }
    		break;
	    case VSS_IS_VOL_SNAPSHOTTED2:
    		ft.hr = IsVolumeSnapshotted(
    			T2W(LPTSTR((LPCTSTR)m_strVolumeName)),
    			&bResult
    		);
    		pwszFunctionName = L"IsVolumeSnapshotted2";
    		break;
    	default:
			ft.ErrBox( VSSDBG_VSSTEST, E_UNEXPECTED,
					   L"Invalid call type %s().", pwszFunctionName);
		}    		    
    		    
		if (ft.HrFailed())
			ft.ErrBox( VSSDBG_VSSTEST, ft.hr,
					   L"Error on calling %s(). [0x%08lx]", pwszFunctionName, ft.hr);

		ft.MsgBox(L"Function result", L"Function %s("WSTR_GUID_FMT L", %s, ...) returned %s", 
		        pwszFunctionName, 
		        GUID_PRINTF_ARG(ProviderId), 
		        T2W(LPTSTR((LPCTSTR)m_strVolumeName)),
		        bResult? L"TRUE":L"FALSE");
    }
    VSS_STANDARD_CATCH(ft)
}


void CVolDlg::OnIsVolumeSupported()
{
    m_eCallType = VSS_IS_VOL_SUPPORTED;
}


void CVolDlg::OnIsVolumeSnapshotted()
{
    m_eCallType = VSS_IS_VOL_SNAPSHOTTED;
}


void CVolDlg::OnIsVolumeSupported2()
{
    m_eCallType = VSS_IS_VOL_SUPPORTED;
}


void CVolDlg::OnIsVolumeSnapshotted2()
{
    m_eCallType = VSS_IS_VOL_SNAPSHOTTED;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\writer\util.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Util.cpp | Implementation of utility functions
    @end

Author:

    Adi Oltean  [aoltean]  12/02/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     12/02/1999  Created

--*/


/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <comadmin.h>

#include "vs_assert.hxx"

// ATL
#include <atlconv.h>
#include <atlbase.h>
extern CComModule _Module;
#include <atlcom.h>

#include "vs_inc.hxx"

#include "comadmin.hxx"
#include "vsevent.h"
#include "writer.h"


LPWSTR QueryString(LPWSTR wszPrompt)
{
	static WCHAR wszBuffer[200];
	wprintf(wszPrompt);
	return _getws(wszBuffer);
}


INT QueryInt(LPWSTR wszPrompt)
{
	static WCHAR wszBuffer[20];
	wprintf(wszPrompt);
	_getws(wszBuffer);
	return _wtoi(wszBuffer);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\xmlint\stdafx.cpp ===
// stdafx.cpp : source file that includes just the standard includes
//	xmlint.pch will be the pre-compiled header
//	stdafx.obj will contain the pre-compiled type information

#include "stdafx.h"

// TODO: reference any additional headers you need in STDAFX.H
// and not in this file
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\writer\writer.h ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Writer.h | Declaration of Writer
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created

--*/


#ifndef __VSSSNAPSHOTWRITER_H_
#define __VSSSNAPSHOTWRITER_H_


/////////////////////////////////////////////////////////////////////////////
// Utility functions


LPWSTR QueryString(LPWSTR wszPrompt);
INT QueryInt(LPWSTR wszPrompt);


/////////////////////////////////////////////////////////////////////////////
// CVssWriter


class ATL_NO_VTABLE CVssWriter : 
	public CComObjectRootEx<CComSingleThreadModel>,
	public IVssWriter
{
// IVssWriter
public:

	STDMETHOD(ResolveResource)(
 		IN BSTR strAppInstance,			    
 		IN BSTR strResourceName,			
		IN BSTR strResourceId,	
 		IN BSTR strProcessContext,
		IN BSTR strProcessId,		
		IN IDispatch* pDepGraphCallback	
		);
	
	STDMETHOD(PrepareForSnapshot)(                          
        IN  BSTR    bstrSnapshotSetId,   
        IN  BSTR    VolumeNamesList,      
        IN  VSS_FLUSH_TYPE		eFlushType,
		IN	BSTR	strFlushContext,
		IN	IDispatch* pDepGraphCallback,
		IN	IDispatch* pAsyncCallback	
        );

    STDMETHOD(Freeze)(
        IN  BSTR    bstrSnapshotSetId,   
        IN  INT     nApplicationLevel            
        );                                           

    STDMETHOD(Thaw)(
        IN  BSTR    bstrSnapshotSetId    
        );

BEGIN_COM_MAP(CVssWriter)
	COM_INTERFACE_ENTRY(IVssWriter)
END_COM_MAP()

// Implementation
private:

	void AskCancelDuringFreezeThaw(
		IN	CVssFunctionTracer& ft
		);

	CComPtr<IVssAsync> m_pAsync;
};

#endif //__VSSSNAPSHOTWRITER_H_
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\writer\writer.cpp ===
/*++

Copyright (c) 1999  Microsoft Corporation

Abstract:

    @doc
    @module Writer.cpp | Implementation of Writer
    @end

Author:

    Adi Oltean  [aoltean]  08/18/1999

TBD:
	
	Add comments.

Revision History:

    Name        Date        Comments
    aoltean     08/18/1999  Created
	aoltean		09/22/1999	Making console output clearer

--*/


/////////////////////////////////////////////////////////////////////////////
//  Defines

// C4290: C++ Exception Specification ignored
#pragma warning(disable:4290)
// warning C4511: 'CVssCOMApplication' : copy constructor could not be generated
#pragma warning(disable:4511)
// warning C4127: conditional expression is constant
#pragma warning(disable:4127)


/////////////////////////////////////////////////////////////////////////////
//  Includes

#include <wtypes.h>
#include <stddef.h>
#include <oleauto.h>
#include <comadmin.h>

#include "vs_assert.hxx"

// ATL
#include <atlconv.h>
#include <atlbase.h>
CComModule _Module;
#include <atlcom.h>

#include "vs_inc.hxx"

#include "vss.h"

#include "comadmin.hxx"
#include "vsevent.h"
#include "writer.h"



/////////////////////////////////////////////////////////////////////////////
// Constants

const CComBSTR g_bstrEventClassProgID     = L"VssEvent.VssEvent.1";
const CComBSTR g_bstrPublisherID          = L"VSS Publisher";             // Publisher ID

const CComBSTR g_bstrSubscriber1AppName   = L"Writer 1";                  // Subscriber 1 App Name
const CComBSTR g_bstrEventClsIID          = L"{2F7BF5AA-408A-4248-907A-2FD7D497A703}";
const CComBSTR g_bstrResolveResourceMethodName = L"ResolveResource";
const CComBSTR g_bstrPrepareForSnapshotMethodName = L"PrepareForSnapshot";
const CComBSTR g_bstrFreezeMethodName     = L"Freeze";
const CComBSTR g_bstrThawMethodName       = L"Thaw";
const CComBSTR g_bstrMeltMethodName       = L"Melt";


/////////////////////////////////////////////////////////////////////////////
// CVssWriter


STDMETHODIMP CVssWriter::PrepareForSnapshot(
    IN  BSTR    bstrSnapshotSetId,
    IN  BSTR    bstrVolumeNamesList,
    IN  VSS_FLUSH_TYPE		eFlushType,
	IN	BSTR	bstrFlushContext,
	IN	IDispatch* pDepGraphCallback,
	IN	IDispatch* pAsyncCallback	
    )
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVssWriter::PrepareForSnapshot" );

    wprintf(L"\nReceived Event: PrepareForSnapshot\nParameters:\n");
    wprintf(L"\tSnapshotSetID = %s\n", (LPWSTR)bstrSnapshotSetId);
    wprintf(L"\tVolumeNamesList = %s\n", (LPWSTR)bstrVolumeNamesList);
    wprintf(L"\tFlush Type = %d\n", eFlushType);
    wprintf(L"\tFlush Context = %s\n", (LPWSTR)bstrFlushContext);

	if (pAsyncCallback)
	{
		// Release the previous interface.
		// A smarter writer will associate one Async interface with one Snapshot Set ID.
		m_pAsync = NULL;	

		// Get the new async interface
		ft.hr = pAsyncCallback->SafeQI(IVssAsync, &m_pAsync);
		if (ft.HrFailed())
			ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED, L"Error calling QI 0x%08lx", ft.hr );
		BS_ASSERT(m_pAsync);
	}

	// Ask for cancel
	AskCancelDuringFreezeThaw(ft);

    return S_OK;
	UNREFERENCED_PARAMETER(pDepGraphCallback);
}


HRESULT CVssWriter::Freeze(
    IN  BSTR    bstrSnapshotSetId,
    IN  INT     nLevel
    )
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVssWriter::Freeze" );

    wprintf(L"\nReceived Event: Freeze\nParameters:\n");
    wprintf(L"\tSnapshotSetID = %s\n", (LPWSTR)bstrSnapshotSetId);
    wprintf(L"\tLevel = %d\n", nLevel);

	// Ask for cancel
	AskCancelDuringFreezeThaw(ft);

    return S_OK;
}


HRESULT CVssWriter::Thaw(
    IN  BSTR    bstrSnapshotSetId
    )
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"CVssWriter::Thaw" );

    wprintf(L"\nReceived Event: Thaw\nParameters:\n");
    wprintf(L"\tSnapshotSetId = %s\n", (LPWSTR)bstrSnapshotSetId);

	// Ask for cancel
	AskCancelDuringFreezeThaw(ft);

	// Release the Async interface
	m_pAsync = NULL;	
    return S_OK;
}


IUnknown* GetSubscriptionObject(CVssFunctionTracer& ft)
{
    IUnknown* pUnk;

    CComObject<CVssWriter>* pObj;
    ft.hr = CComObject<CVssWriter>::CreateInstance(&pObj);
    if (ft.HrFailed())
        ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in creating the subscription object 0x%08lx", ft.hr);
    pUnk = pObj->GetUnknown();
    pUnk->AddRef();
    return pUnk;
}


/////////////////////////////////////////////////////////////////////////////
// User interaction


void CVssWriter::AskCancelDuringFreezeThaw(
	IN	CVssFunctionTracer& ft
	)
{
	try
	{
		if(m_pAsync == NULL)
			return;

		WCHAR wchCancelPlease = (QueryString(L"Cancel? [y/N] "))[0];
		if (towupper(wchCancelPlease) == L'Y')
		{
			CComBSTR strReason = QueryString(L"Reason: ");

			ft.hr = m_pAsync->Cancel();
			if (ft.HrFailed())
				ft.Err( VSSDBG_VSSTEST, E_UNEXPECTED,
						L"Error calling AddDependency 0x%08lx", ft.hr );

			ft.Msg(L"HRESULT = 0x%08lx", ft.hr );
		}
	}
	VSS_STANDARD_CATCH(ft)
}


/////////////////////////////////////////////////////////////////////////////
//  WinMain

extern "C" int WINAPI _tWinMain(HINSTANCE /*hInstance*/,
    HINSTANCE /*hPrevInstance*/, LPTSTR /*lpCmdLine*/, int /*nShowCmd*/)
{
    CVssFunctionTracer ft( VSSDBG_VSSTEST, L"_tWinMain" );
    int nRet = 0;

    try
    {
        // Initialize COM library
        ft.hr = CoInitialize(NULL);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in initializing the COM library 0x%08lx", ft.hr);

        // Get the subscriber object
        IUnknown* pUnkSubscriber = GetSubscriptionObject(ft);

        // Initialize the catalog
        CVssCOMAdminCatalog catalog;
        ft.hr = catalog.Attach(g_bstrSubscriber1AppName);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in initializing the catalog object 0x%08lx", ft.hr);

        // Get the list of applications
        CVssCOMCatalogCollection transSubsList(VSS_COM_TRANSIENT_SUBSCRIPTIONS);
        ft.hr = transSubsList.Attach(catalog);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in initializing the subs collection object 0x%08lx", ft.hr);

        // Add our new transient subscription for PrepareForSnapshot
        CVssCOMTransientSubscription subscription;
        ft.hr = subscription.InsertInto(transSubsList);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in creating a new sub object 0x%08lx", ft.hr);

        subscription.m_bstrName = g_bstrSubscriber1AppName;
        subscription.m_bstrPublisherID = g_bstrPublisherID;
        subscription.m_bstrInterfaceID = g_bstrEventClsIID;
        subscription.m_varSubscriberInterface = CComVariant(pUnkSubscriber);
        subscription.m_bstrMethodName = g_bstrResolveResourceMethodName;

        ft.hr = subscription.InsertInto(transSubsList);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in creating a new sub object 0x%08lx", ft.hr);

        subscription.m_bstrName = g_bstrSubscriber1AppName;
        subscription.m_bstrPublisherID = g_bstrPublisherID;
        subscription.m_bstrInterfaceID = g_bstrEventClsIID;
        subscription.m_varSubscriberInterface = CComVariant(pUnkSubscriber);
        subscription.m_bstrMethodName = g_bstrPrepareForSnapshotMethodName;

        // Add our new transient subscription for Freeze
        ft.hr = subscription.InsertInto(transSubsList);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in creating a new sub object 0x%08lx", ft.hr);

        subscription.m_bstrName = g_bstrSubscriber1AppName;
        subscription.m_bstrPublisherID = g_bstrPublisherID;
        subscription.m_bstrInterfaceID = g_bstrEventClsIID;
        subscription.m_varSubscriberInterface = CComVariant(pUnkSubscriber);
        subscription.m_bstrMethodName = g_bstrFreezeMethodName;

        // Add our new transient subscription for Thaw
        ft.hr = subscription.InsertInto(transSubsList);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in creating a new sub object 0x%08lx", ft.hr);

        subscription.m_bstrName = g_bstrSubscriber1AppName;
        subscription.m_bstrPublisherID = g_bstrPublisherID;
        subscription.m_bstrInterfaceID = g_bstrEventClsIID;
        subscription.m_varSubscriberInterface = CComVariant(pUnkSubscriber);
        subscription.m_bstrMethodName = g_bstrThawMethodName;

        // Add our new transient subscription for Melt
        ft.hr = subscription.InsertInto(transSubsList);
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in creating a new sub object 0x%08lx", ft.hr);

        subscription.m_bstrName = g_bstrSubscriber1AppName;
        subscription.m_bstrPublisherID = g_bstrPublisherID;
        subscription.m_bstrInterfaceID = g_bstrEventClsIID;
        subscription.m_varSubscriberInterface = CComVariant(pUnkSubscriber);
        subscription.m_bstrMethodName = g_bstrMeltMethodName;

        // Save changes
        ft.hr = transSubsList.SaveChanges();
        if (ft.HrFailed())
            ft.Throw(VSSDBG_VSSTEST, E_UNEXPECTED, L"Failure in commiting changes. hr = 0x%08lx", ft.hr);

        // message loop - need for STA server
        MSG msg;
        while (GetMessage(&msg, 0, 0, 0))
            DispatchMessage(&msg);


        // Uninitialize COM library
        CoUninitialize();
    }
    VSS_STANDARD_CATCH(ft)

    return nRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\xmlint\xmlint.cpp ===
// xmlint.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

//====================================================================================
// Generic wild-card file finder that calls back to specified function with
// given void* arguments.

typedef HRESULT (*FILECALLBACK)(WCHAR* pszFile, void* arg);

WCHAR* WideString(const char* str)
{
    if (str == NULL)
        return NULL;
    WCHAR * result = new WCHAR[strlen(str) + 1];
    WCHAR* p = result;
    while (*str)
        *p++ = (WCHAR)*str++;
    *p = 0;
    return result;
}

int ProcessFiles(const char* pszFiles, FILECALLBACK pFunc, void* pArgs)
{
    HRESULT hr = S_OK;
    int i;

    WCHAR* wszArg = WideString(pszFiles);
    WIN32_FIND_DATA FindFileData;
    HANDLE handle = ::FindFirstFile(wszArg, &FindFileData);
    int failed = 0;

    if (handle == INVALID_HANDLE_VALUE)
    {
        // Then maybe it's a URL.
        hr = (*pFunc)(wszArg, pArgs);
        if (hr != 0) failed++;
        goto CleanUp;
    }
    for ( i = wcslen(wszArg)-1; i >= 0 && wszArg[i] != '\\'; i--)
    {
        wszArg[i] = 0;
    }
    
    while (handle != INVALID_HANDLE_VALUE)
    {
        ULONG len1 = wcslen(wszArg);
        ULONG len2 = wcslen(FindFileData.cFileName);
        WCHAR* buffer = new WCHAR[len1 + len2 + 1];
        if (buffer == NULL)
        {
            hr = E_OUTOFMEMORY;
            goto CleanUp;
        }
        memcpy(buffer, wszArg, sizeof(WCHAR) * len1);
        memcpy(&buffer[len1], FindFileData.cFileName, sizeof(WCHAR) * len2);
        buffer[len1+len2] = '\0';
        
        hr = (*pFunc)(buffer, pArgs);

        if (hr != 0) failed++;

        delete[] buffer;

        if (! ::FindNextFile(handle, &FindFileData))
            break;
    }
    if (handle != INVALID_HANDLE_VALUE)
        ::FindClose(handle);

CleanUp:
    delete wszArg;

    return failed;
}

struct XMLArgs
{
public:
    XMLArgs()
    {
        pDOM = NULL;
        pIE4 = NULL;
    }

    IXMLDOMDocument* pDOM;
    IXMLDocument* pIE4;
};


void FormatError(BSTR bstrReason, BSTR bstrURL, BSTR bstrText, long lLine, long lPos)
{
    if (bstrReason)
    {
        printf("\t%S", bstrReason);
    }
    if (bstrURL)
    {
        printf("\tURL: %S\n", bstrURL);
    }

    if (lLine > 0 && bstrText)
    {
        printf("\tLine %5.5ld: ", lLine);

        long lLen = ::SysStringLen(bstrText);
        for (int i = 0; i < lLen; i++)
        {
            if (bstrText[i] == '\t')
                printf(" ");
            else
                printf("%C", bstrText[i]);
        }
        printf("\n");

        if (lPos > 0 || lLen > 0)
        {
            printf("\tPos  %5.5d: ", lPos);
            for (int i = 1; i < lPos; i++)
            {
                printf("-");
            }
            printf("^\n");
        }
    }
}

void PrintIE4Error(IXMLDocument* pDoc)
{
    IXMLError *pError = NULL ;
    XML_ERROR xmle = { 0, 0, 0, 0, 0, 0 };
    HRESULT hr = S_OK;

    hr = pDoc->QueryInterface(IID_IXMLError, (void **)&pError);
    if (FAILED(hr))
    {
        printf("Error getting error information\n");
        goto done;
    }

    hr = pError->GetErrorInfo(&xmle);
    if (FAILED(hr))
    {
        printf("Error getting error information\n");
        goto done;
    }
    
    FormatError(xmle._pszFound, NULL, xmle._pchBuf, xmle._nLine, xmle._ich);

done:
    SysFreeString(xmle._pszFound);
    SysFreeString(xmle._pszExpected);
    SysFreeString(xmle._pchBuf);
    if (pError) pError->Release();
}

void PrintDOMError(IXMLDOMDocument* pDoc)
{
    IXMLDOMParseError* pError;
    BSTR bstrReason = NULL;
    BSTR bstrText = NULL;
    BSTR bstrURL = NULL;
    long lPos,lLine = 0;
    HRESULT hr = S_OK;

    hr = pDoc->get_parseError( &pError);
    if (FAILED(hr))
    {
        printf("Error getting error information\n");
        goto done;
    }

    pError->get_reason(&bstrReason);
    pError->get_url(&bstrURL);
    pError->get_line(&lLine);
    pError->get_srcText(&bstrText);
    pError->get_linepos(&lPos);

    FormatError(bstrReason, bstrURL, bstrText, lLine, lPos);

done:
    SysFreeString( bstrReason);
    SysFreeString( bstrText);
    SysFreeString( bstrURL);
    if (pError) pError->Release();
}

HRESULT xmlint(WCHAR* pszFile, void* arg)
{
    HRESULT hr = S_OK;
    XMLArgs* pArgs = (XMLArgs*)arg;

    printf("%S\n", pszFile);

    if (pArgs->pIE4)
    {
        IXMLElement * root;
        hr = pArgs->pIE4->put_URL(pszFile);
        pArgs->pIE4->get_root(&root);
        if (FAILED(hr) || ! root)
        {
            PrintIE4Error(pArgs->pIE4);
        }
        if (root) root->Release();
    }
    else
    {
        VARIANT_BOOL bSuccess;
        VARIANT url;
        url.vt = VT_BSTR;
        V_BSTR(&url) = ::SysAllocString(pszFile);
        hr = pArgs->pDOM->load(url, &bSuccess);
        VariantClear(&url);
        if (FAILED(hr) || bSuccess == VARIANT_FALSE)
        {
            PrintDOMError(pArgs->pDOM);
        }
    }
    return hr;
}

void PrintUsage()
{
    printf("Usage: xmlint [options] filename(s)\n");
    printf("Checks well-formedness and validation constraints for one or more XML documents.\n");
    printf("File names can contain wild cards for validating multiple files (e.g. \"*.xml\")\n");
    printf("Example:\n");
    printf("\txmlint *.xml\n\n");
    printf("Checks that all files ending with .xml are valid xml files.\n\n");
    printf("Options:\n");
    printf("-w\tOnly perform well-formedness check (no DTD validation)\n");
    printf("-ie4\tRun in IE4 compatibility mode (instead of new DOM mode)\n");
}

int __cdecl main(int argc, char* argv[])
{
    int count = 0;
    XMLArgs args;
    bool fIE4 = false;
    bool fValidate = true;
    bool fPause = false;
    HRESULT hr;
    int rc = 0;

    CoInitialize(NULL);

    for (int i = 1; i < argc; i++)
    {
        char* pszArg = argv[i];
        if (*pszArg == '-')
        {
            if (strcmp(pszArg,"-ie4") == 0)
            {
                fIE4 = true;
            }
            else
            {
                switch (pszArg[1])
                {
                case 'w':
                    fValidate = false;
                    break;
                case 'p':
                    fPause = true;
                    break;
                default:
                    PrintUsage();
                    rc = 1;
                    goto Error;
                }
            }
        }
        else
        {
            count++;
        }
    }

    if (count == 0)
    {
        PrintUsage();
        rc = 1;
        goto Error;
    }

    if (fIE4)
    {
        hr = CoCreateInstance(CLSID_XMLDocument, NULL, CLSCTX_INPROC_SERVER,
                    IID_IXMLDocument, (void**)&(args.pIE4));
        if (FAILED(hr))
        {
            printf("Error co-creating IE4 XML Document");
            goto Error;
        }
    }
    else
    {
        hr = CoCreateInstance(CLSID_DOMDocument, NULL, CLSCTX_INPROC_SERVER,
                      IID_IXMLDOMDocument, (void**)&(args.pDOM));
        if (FAILED(hr))
        {
            printf("Error co-creating XML DOM Document");
            goto Error;
        }

        args.pDOM->put_validateOnParse(fValidate ? VARIANT_TRUE : VARIANT_FALSE);
        args.pDOM->put_async(VARIANT_FALSE);
    }

    if (fPause)
    {
        printf("Press any key to continue...");
        getchar();
    }

    for (i = 1; i < argc; i++)
    {
        char* pszArg = argv[i];
        if (*pszArg != '-')
        {
            rc += ProcessFiles(pszArg, xmlint, &args);
        }
    }

Error:
    if (args.pDOM) args.pDOM->Release();
    if (args.pIE4) args.pIE4->Release();

    if (fPause)
    {
        printf("Press any key to continue...");
        getchar();
    }

    CoUninitialize();
    return rc;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\avalanchep.h ===
#ifndef __AVALANCHEP_H__

#define	__AVALANCHEP_H__

typedef struct tagDTWNODE
{
	int		iBestPrev;
	int		iBestPathCost;

	int		iNodeCost;

	char	iCh;
	char	iChNoSp;
	BYTE	bCont;

	int		iStrtSeg;
}
DTWNODE;							// structure used in DTW to determine the NN cost of a word


typedef struct tagPALTERNATES
{
	unsigned int cAlt;			// how many (up to 10) actual answers do we have
    unsigned int cAltMax;       // I can use this to say "I only want 4". !!! should be in xrc
	XRCRESULT *apAlt[MAXMAXALT];	// The array of pointers to XRCRESULT structures
} PALTERNATES;

#define	NODE_ALLOC_BLOCK	10		// # of nodes per column to allocate at a time during the DTW

#define TOT_CAND			10						// Total # of cand's entering the aval NN

#if (TOT_CAND > MAXMAXALT)
#error TOT_CAND is greater than MAXMAXALT
#endif

#define	MAD_CAND			5						// How many of them are madcow's
#define	CAL_CAND			(TOT_CAND - MAD_CAND)	// How many of them are callig's


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\storage\volsnap\vss\tests\xmlint\stdafx.h ===
// stdafx.h : include file for standard system include files,
//  or project specific include files that are used frequently, but
//      are changed infrequently
//

#if !defined(AFX_STDAFX_H__EA85751A_6947_11D2_9CC8_0060B0EC3D39__INCLUDED_)
#define AFX_STDAFX_H__EA85751A_6947_11D2_9CC8_0060B0EC3D39__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

#include <windows.h>
#include <stdio.h>
#import "msxml.dll" named_guids


//{{AFX_INSERT_LOCATION}}
// Microsoft Visual C++ will insert additional declarations immediately before the previous line.

#endif // !defined(AFX_STDAFX_H__EA85751A_6947_11D2_9CC8_0060B0EC3D39__INCLUDED_)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\avalanche.h ===
#ifndef __AVALANCHE_H__

#define	__AVALANCHE_H__

typedef struct tagCANDINFO
{
	int		NN;
	int		NNalt;
	int		Callig;
	int		Unigram;
	int		InfCharCost;
	int		Aspect;
	int		BaseLine;
	int		Height;
	int		WordLen;
}CANDINFO;
	
typedef struct tagALTINFO
{
	int			NumCand;
	
	CANDINFO	aCandInfo[MAXMAXALT];
}ALTINFO;


int Avalanche	(XRC *pxrc, ALTERNATES *pBearAlt);
void CallSole	(XRC * pxrc, GLYPH *pGlyph, GUIDE *pGuide, ALTERNATES *pWordAlt);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\avalanche.c ===
// Avalanche.c
// Ahmad A. AbdulKader
// Dec. 7th 1999

// COmbines the altlists of both madusa and callig for a single word

#ifndef UNDER_CE
#include <stdio.h>
#endif 

#include <stdlib.h>
#include "common.h"
#include <limits.h>
#include "nfeature.h"
#include "engine.h"
#include "nnet.h"
#include "charmap.h"
#include "charcost.h"

#include "Avalanche.h"
#include "panel.h"
#include <bear.h>
#include "avalanchep.h"
#include "confidence.h"
#include "oneCharNet.h"
#include <langmod.h>
#include <sole.h>
#include <baseline.h>
#include <GeoFeats.h>

extern BOOL LoadWordAvalNets		(HINSTANCE hInst);
extern BOOL LoadSoleNets			(HINSTANCE hInst);
extern BOOL	LoadSingleSegAvalNets	(HINSTANCE hInst);
extern BOOL	LoadMultiSegAvalNets	(HINSTANCE hInst);

extern void UnLoadWordAvalNets		();
extern void UnLoadSoleNets			();
extern void UnLoadSingleSegAvalNets	();
extern void UnLoadMultiSegAvalNets	();

int	UnigramCost(unsigned char *szWord);

int RunAvalancheNNet (XRC *pxrc, PALTERNATES *pAlt, ALTINFO *pAltInfo);
int RunOneCharAvalancheNNet (XRC *pxrc, PALTERNATES *pAlt, ALTINFO *pAltInfo);

#ifdef TRAINTIME_AVALANCHE
#include "runNet.h"

int SaveAvalancheTrainData (XRC *pxrc, ALTERNATES *pBearAlt, PALTERNATES *pAlt, ALTINFO *pAltInfo, int iDups, int cTokens,int more,int index);
void  ConfMadDump(XRC *prxc);
void ConfAvalDump(XRC *pxrc,void *pAlt,ALTINFO *AltInfo,RREAL *pOutput);
void ComputeReliabilityEst(XRC *pxrc,unsigned char *szInferno,unsigned char *szBear);
void SingleCharFeaturize(XRC *pxrc); //This function saves the feature vectors for training sole

#endif // #ifdef TRAINTIME_AVALANCHE
BOOL GetWordGeoCostsFromAlt (XRC *pXrc, PALTERNATES *pAlt, ALTINFO *pAltInfo);


// Perform Avalanche initialization
BOOL InitAvalanche(HINSTANCE hInst)
{
	if (!LoadWordAvalNets (hInst))
	{
		return FALSE;
	}

	if (!LoadSingleSegAvalNets (hInst))
	{
		return FALSE;
	}

	if (!LoadMultiSegAvalNets (hInst))
	{
		return FALSE;
	}

	if (!LoadSoleNets (hInst))
	{
		return FALSE;
	}

	if (FALSE == LoadConfidenceNets (hInst))
	{
		return FALSE;
	}

	if (FALSE == LoadOneCharNets(hInst))
	{
		return FALSE;
	}

	return TRUE;
}

BOOL DetachAvalanche()
{
	UnLoadWordAvalNets ();

	UnLoadSingleSegAvalNets ();

	UnLoadMultiSegAvalNets ();

	UnLoadSoleNets ();

	UnLoadConfidenceNets();

	UnLoadConfidenceNets();

	return TRUE;
}


// gets the TDNN cost of a specific word. we assue that the XRC still has the NNOuput of this piece of ink
int GetTDNNCost (XRC *pxrc, unsigned char *pszTarget)
{
	int			cSegment = pxrc->nfeatureset->cSegment;
	int			aActivations[512], cLen;
	int			iCh, iNewCost, i, j, k, cRemainSeg, iBest, iCost, iPrevSpaceCost;
	int			iNewAct, iContAct, cNoSpaceLen;
	REAL		*pCol;
	BOOL		bNew, bCont, bSpaceNext;
	unsigned char	*p;
	DTWNODE		**ppNode	=	NULL;
	int			*pcNode		=	NULL;
	int			iRet		=	-1;
	
	// remove the spaces
	cNoSpaceLen	=	cLen	=	strlen (pszTarget);

	p	=	pszTarget;
	while ((*p) && (p = strchr (p, ' ')))
	{
		cNoSpaceLen--;
		p++;
	}

	// alloc memo and init it
	pcNode	=	(int *) ExternAlloc (cSegment * sizeof (int));
	if (!pcNode)
		goto exit;

	ppNode	=	(DTWNODE **) ExternAlloc (cSegment * sizeof (DTWNODE *));
	if (!ppNode)
		goto exit;

	memset (ppNode, 0, cSegment * sizeof (DTWNODE *));

	// Initialize to max values to guard against unsupporetd characters
	for (i = 0 ; i < sizeof(aActivations) / sizeof(aActivations[0]) ; ++i)
	{
		aActivations[i] = 4096;
	}

	// for all segments
	for (i = 0, pCol = pxrc->NeuralOutput; i < cSegment; i++, pCol	+= gcOutputNode)
	{
		// init column i
		InitColumn (aActivations , pCol);

		pcNode[i]	=	0;
		ppNode[i]	=	NULL;

		// generate the possible nodes at this segment
		if (i == 0)
		{
			pcNode[0]	=	1;

			ppNode[0]	=	(DTWNODE *) ExternAlloc (sizeof (DTWNODE));
			if (!ppNode[0])
				goto exit;

			ppNode[0][0].iCh			=	0;
			ppNode[0][0].iBestPrev		=	-1;
			ppNode[0][0].iBestPathCost	=	0;
			ppNode[0][0].iNodeCost		=	
				NetFirstActivation (aActivations, pszTarget[0]);
		}
		else
		{
			// # of remaining segments
			cRemainSeg	=	cSegment - i - 1;

			for (j = 0; j < pcNode[i - 1]; j++)
			{
				// are we introducing a new stroke
			
				// check the valididy of starting a new char or continuing
				iCh			=	ppNode[i - 1][j].iCh;
				
				if (IsVirtualChar (pszTarget[iCh]))
				{
					BYTE	o;

					o			=	BaseVirtualChar(pszTarget[iCh]);
					bCont		=	ContinueChar2Out(o) < 255;
				}
				else
				{
					bCont		=	ContinueChar2Out(pszTarget[iCh]) < 255;
				}

				// continuation
				// we'll only do continuation of this same char
				// only if there are enough segments to hold the rest
				// of the chars
				if	(bCont && cRemainSeg >= (cNoSpaceLen - ppNode[i - 1][j].iCh - 1))
				{			
					iNewCost	=	ppNode[i - 1][j].iBestPathCost + 
						ppNode[i - 1][j].iNodeCost;

					// get the score of continuing that char
					iContAct	=	
						NetContActivation (aActivations, pszTarget[iCh]);

					// did we have that char before
					for (k = 0; k < pcNode[i]; k++)
					{
						if (ppNode[i][k].iCh	==	iCh)
							break;
					}

					// we have to create a new one
					if (k == pcNode[i])
					{
						if (!(pcNode[i] % NODE_ALLOC_BLOCK))
						{
							ppNode[i]	=	(DTWNODE *) ExternRealloc (ppNode[i], 
								(pcNode[i] + NODE_ALLOC_BLOCK) * sizeof (DTWNODE));

							if (!ppNode[i])
								goto exit;
						}

						pcNode[i]++;

						ppNode[i][k].iCh			=	(char)iCh;
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iContAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
					// is this a better path to the node the we found
					else
					if	( (ppNode[i][k].iBestPathCost + ppNode[i][k].iNodeCost) > 
						  (iContAct + iNewCost)
						)
					{
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iContAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
				} // continuation

				bNew		=	TRUE;
			
				// the next char
				if (iCh < (cLen - 1))
				{
					iCh			=	ppNode[i - 1][j].iCh + 1;

					while (pszTarget[iCh] == ' ' && pszTarget[iCh])
						iCh++;

					if (iCh > 1 && pszTarget[iCh - 1] == ' ')
						bSpaceNext	=	TRUE;
					else
						bSpaceNext	=	FALSE;
							
					iNewCost	=	ppNode[i - 1][j].iBestPathCost + 
						ppNode[i - 1][j].iNodeCost;

					// get the score of continuing that char
					iNewAct	=	
						NetFirstActivation (aActivations, pszTarget[iCh]);

					if (bSpaceNext)
						iNewAct	+=	iPrevSpaceCost;

					// did we have that char before
					for (k = 0; k < pcNode[i]; k++)
					{
						if (ppNode[i][k].iCh	==	iCh)
							break;
					}
					
					// we have to create a new one
					if (k == pcNode[i])
					{
						if (!(pcNode[i] % NODE_ALLOC_BLOCK))
						{
							ppNode[i]	=	(DTWNODE *) ExternRealloc (ppNode[i], 
								(pcNode[i] + NODE_ALLOC_BLOCK) * sizeof (DTWNODE));

							if (!ppNode[i])
								goto exit;
						}

						pcNode[i]++;

						ppNode[i][k].iCh			=	(char)iCh;
						ppNode[i][k].iBestPrev		=	j;

						ppNode[i][k].iNodeCost		=	iNewAct;

						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
					// is this a better path to the node the we found
					else
					if	( (ppNode[i][k].iBestPathCost + ppNode[i][k].iNodeCost) > 
						  (iNewAct + iNewCost)
						)
					{
						ppNode[i][k].iBestPrev		=	j;
						ppNode[i][k].iNodeCost		=	iNewAct;
						ppNode[i][k].iBestPathCost	=	iNewCost;
					}
				} // next char
			} // j
		} // i > 0

		// no new nodes added ==> fail
		if (!pcNode[i])
			goto exit;

		// get the space activation
		iPrevSpaceCost	=	NetFirstActivation (aActivations, ' ');

	} // i

	// let's look at the last segment and back track the optimal solution

	// find the best
	iBest		=	0;
	iNewCost	=	ppNode[cSegment - 1][0].iBestPathCost + 
		ppNode[cSegment - 1][0].iNodeCost;

	for (j = 1; j < pcNode[cSegment - 1]; j++)
	{
		iCost	=	ppNode[cSegment - 1][j].iBestPathCost + 
		ppNode[cSegment - 1][j].iNodeCost;

		if (iNewCost > iCost)
		{
			iNewCost	=	iCost;
			iBest		=	j;
		}	
	}

	iRet	=	iNewCost;

exit:
	// free allocated memory
	if (ppNode)
	{
		for (i = 0; i < cSegment; i++)
		{
			if (ppNode[i])
				ExternFree (ppNode[i]);
		}

		ExternFree (ppNode);
	}

	if (pcNode)
		ExternFree (pcNode);

	return iRet;
}
//----------------------------------------------------------------------------------------
//
// Look through a merged ALTINFO list and run bear in word mode for instances where
// we there is no bear score (i.e. when pAltInfo->aCandInfo[i].Callig == MAX_CALLIG
// Force bear to consider particular strings by inserting all the strings into the
// user dictinary, turning off the main dictionary and calling bear only once.
// 
//
// ARGUMENTS
//	XRC			pXrc	- Contains reco environemnt (guide etc that gets passed to Bear)
//  PALTERNATES *pAlt	- Parrallel list to ALTINFO containing actual strings
//	ALTINFO		*pAltInfo - Merged list of scores
//
// Notes:
//	(1) Since ALTINFO does not contain the actual strings we use the parallel structure
// PALTERNATES to extract the actual strings
//  (2) 
// 
// Oct 2001 - mrevow
//---------------------------------------------------------------------------------------
int FillInMissingBearAlts(XRC *pXrc, PALTERNATES *pAlt, ALTINFO *pAltInfo)
{
	int					iAlt;
	unsigned char		*paStrList = NULL;		// Holding buffer for List of strings for bear to Recognize
	int					cStrList = 1;			// Length of paStrList allocated (after first malloc)
												// The initial 1 allows for the string list to have a double terminating NULL
	int					cFilled = 0;

	for (iAlt = 0 ; iAlt < pAltInfo->NumCand ; ++iAlt)
	{
		// A score of 0 indicates that we have no score for this alternate
		// Make a copy of the string because we may modify the string through call to 
		// deleteFactoidSpaces()
		if (0 == pAltInfo->aCandInfo[iAlt].Callig)
		{
			unsigned char	*pStr = pAlt->apAlt[iAlt]->szWord;
			int				iLen;

			if (pStr)
			{
				// First copy into the holding buffer then remove any special characters
				iLen = strlen((char *)pStr);
				paStrList = (unsigned char *)ExternRealloc(paStrList, iLen + 1 + cStrList);
				if (NULL == paStrList)
				{
					return 0;
				}
				strcpy(paStrList+cStrList-1, pStr);

				//if (TRUE == deleteFactoidSpaces(paStrList+cStrList-1))
				deleteFactoidSpaces(paStrList+cStrList-1);

					++cFilled;
					cStrList += strlen(paStrList+cStrList-1) + 1;

				pAltInfo->aCandInfo[iAlt].Callig--;
			}
		}
	}

	// Now get bear to recognize the strings
	if (cFilled > 0)
	{
		BEARXRC			*pBearXrc;

		// Must be something in the list
		ASSERT (NULL != paStrList && cStrList > 1);

		paStrList[cStrList-1] = '\0';		// Double NULL terminate the list
		pBearXrc = BearRecoStrings(pXrc, paStrList);

		if (pBearXrc)
		{
			unsigned char		*pNextStr = paStrList;		// Next string in string list

			// copy back the answers - if any
			for (iAlt = 0 ; iAlt < pAltInfo->NumCand ; ++iAlt)
			{

				// Check if this was a string we marked as being used
				if (pAltInfo->aCandInfo[iAlt].Callig < 0)
				{
					int					jAlt;

					// Search through the newList to find it
					for (jAlt = 0 ; jAlt < (int)pBearXrc->answer.cAlt ; ++jAlt)
					{
						ASSERT(pNextStr && *pNextStr);
						if (0 == strcmp(pBearXrc->answer.aAlt[jAlt].szWord, pNextStr))
						{
							pAltInfo->aCandInfo[iAlt].Callig = pBearXrc->answer.aAlt[jAlt].cost;
							break;
						}
					}

					// we could not rescore it still, so we'll reset the score to the worst possible
					if (jAlt >= ((int)pBearXrc->answer.cAlt))
					{
						pAltInfo->aCandInfo[iAlt].Callig	=	0;
					}

					pNextStr += strlen((char *)pNextStr) + 1;
				}
			}

			// Must have looked at all strings in list so should hit the last null terminator
			ASSERT(*pNextStr == '\0');		
			BearDestroyHRC((HRC)pBearXrc);
		}
	}

	ExternFree(paStrList);
	return cFilled;
}
/**********************************************************************
* CheckInfernoAltList
*
* Search through the alt list in the XRC for an alternative that matches
* a particular string. 
*
* RETURNS
*  The cost in the alt list if a match is ound
*  -1 otherwise
*
* History:
*  Oct 2001 mrevow
**************************************************************************/ 
int CheckInfernoAltList(XRC	*pXrc,  unsigned char *pStr)
{
	unsigned int		iAlt;

	for (iAlt = 0 ; iAlt < pXrc->answer.cAlt ; ++iAlt)
	{
		if (	(FACTOID_OUT_OF_DICTIONARY != pXrc->answer.aAlt[iAlt].iLMcomponent)
			 && (0 == strcmp((char *)pXrc->answer.aAlt[iAlt].szWord, (char *)pStr)) )
		{
			return pXrc->answer.aAlt[iAlt].cost;
		}
	}

	// Did not find the string
	return -1;
}
// merges madcow's and callig's alt list bases on MAD_CAND & CAL_CAND. Also inits the cand info structures
// Merge inferno and altlist. The merged altlist will always have the
// same number of entries that inferno has. Up to half of the list will come from
// calligrapher's. Returns -1 on error otherwise the returned value is the number
// of duplicates found between the 2 lists
int	MergeAltLists	(	XRC			*pxrcMad,
					    XRC			*pxrcMad_1,
						ALTERNATES	*pBearAlt,
						PALTERNATES	*pAlt,
						ALTINFO		*pAltInfo
					)
{
	UINT		i, j, cCand	=	0, cCalCand;
	UINT		cMadCand	= pxrcMad->answer.cAlt,	cAllCalCand	= pBearAlt->cAlt, cMinCalCand;
	XRCRESULT	*pMadInfo	= pxrcMad->answer.aAlt,	*pCalInfo	= pBearAlt->aAlt;
	int			iDups = 0;

	// We want to take (TOT_CAND / 2) candidates from both Callig and Madcow
	// If Madcow has less candidates than (TOT_CAND / 2), we then try to take more from Callig
	// to add up to TOT_CAND and vice versa
	cMinCalCand	=	__max (cMadCand, TOT_CAND) / 2;
	//cMinCalCand	=	cMadCand/ 2;
	cCalCand	=	__min (__min (cAllCalCand, cMinCalCand), TOT_CAND / 2);

	// callig's list
	for (i = 0; i < cCalCand; i++)
	{
		if ( (pAltInfo->aCandInfo[i].NN = CheckInfernoAltList(pxrcMad, pCalInfo[i].szWord)) < 0)
		{
			// Did not find the word in Inferno's list - Do a DTW on the NN outputs
			pAltInfo->aCandInfo[i].NN		=	GetTDNNCost (pxrcMad, pCalInfo[i].szWord);
		}

		if (pxrcMad_1)
		{
			if ( (pAltInfo->aCandInfo[i].NNalt = CheckInfernoAltList(pxrcMad_1, pCalInfo[i].szWord)) < 0)
			{
				// Did not find the word in Inferno's list - Do a DTW on the NN outputs
				pAltInfo->aCandInfo[i].NNalt		=	GetTDNNCost (pxrcMad_1, pCalInfo[i].szWord);
			}
		}

		if (pAltInfo->aCandInfo[i].NN == -1)
		{
			pAltInfo->aCandInfo[i].NN	=	INT_MAX;
		}

		if (pAltInfo->aCandInfo[i].NNalt == -1)
		{
			pAltInfo->aCandInfo[i].NNalt	=	INT_MAX;
		}



		pAltInfo->aCandInfo[i].Callig	=	pCalInfo[i].cost;
		pAltInfo->aCandInfo[i].Height	=	INT_MAX;
		pAltInfo->aCandInfo[i].InfCharCost	= INT_MIN;
		pAltInfo->aCandInfo[i].Aspect	=	INT_MAX;
		pAltInfo->aCandInfo[i].BaseLine	=	INT_MAX;
		pAltInfo->aCandInfo[i].Unigram	=	UnigramCost (pCalInfo[i].szWord);
		pAltInfo->aCandInfo[i].WordLen	=	strlen (pCalInfo[i].szWord);

		pAlt->apAlt[i]					=	pCalInfo + i;
	}
	
	pAlt->cAlt	=	pAltInfo->NumCand	=	cCalCand;

	// madcow's list
	for (i = 0; pAlt->cAlt < TOT_CAND && i < cMadCand; i++)
	{
		// was this answer already in callig's list
		for (j = 0; j < cAllCalCand; j++)
		{
			if (!strcmp (pMadInfo[i].szWord, pCalInfo[j].szWord))
			{
				++iDups;
				break;
			}
		}

		if (j < cCalCand)
			continue;

		if (pxrcMad_1)
		{
			if ( (pAltInfo->aCandInfo[pAlt->cAlt].NNalt = CheckInfernoAltList(pxrcMad_1, pMadInfo[i].szWord)) < 0)
			{
				// Did not find the word in Inferno's list - Do a DTW on the NN outputs
				pAltInfo->aCandInfo[pAlt->cAlt].NNalt		=	GetTDNNCost (pxrcMad_1, pMadInfo[i].szWord);
				if (pAltInfo->aCandInfo[pAlt->cAlt].NNalt == -1)
				{
					pAltInfo->aCandInfo[pAlt->cAlt].NNalt	=	INT_MAX;
				}
			}

		}

		// a new cand
		pAlt->apAlt[pAlt->cAlt]						=	pMadInfo + i;

		pAltInfo->aCandInfo[pAlt->cAlt].NN			=	pMadInfo[i].cost;

		if (j < cAllCalCand)
			pAltInfo->aCandInfo[pAlt->cAlt].Callig		=	pCalInfo[j].cost;
		else
			pAltInfo->aCandInfo[pAlt->cAlt].Callig		=	0;

		pAltInfo->aCandInfo[pAlt->cAlt].Height		=	INT_MAX;
		pAltInfo->aCandInfo[pAlt->cAlt].InfCharCost	=	INT_MIN;
		pAltInfo->aCandInfo[pAlt->cAlt].Aspect		=	INT_MAX;
		pAltInfo->aCandInfo[pAlt->cAlt].BaseLine	=	INT_MAX;
		pAltInfo->aCandInfo[pAlt->cAlt].Unigram		=	UnigramCost (pMadInfo[i].szWord);
		pAltInfo->aCandInfo[pAlt->cAlt].WordLen		=	strlen (pMadInfo[i].szWord);

		++pAlt->cAlt;
	}

	pAltInfo->NumCand = pAlt->cAlt;

	return iDups;
}

/**************************************************************
 *
 *
 * NAME: AddGeoAndCharCosts
 *
 * DESCRIPTION:
 *
 *  Adds in the Geometric and charcter word costs for the words in 
 *  pALt list
 *
 * CAVEATES
 *
 *
 * RETURNS:
 *
 *  None
 *
 *************************************************************/

void AddGeoAndCharCosts(XRC *pXrc, PALTERNATES *pAlt, ALTINFO *pAltInfo)
{
	int				iAlt;
	XRCRESULT		**ppRes;
	
	if (NULL == pAltInfo)
	{
		return;
	}
	ppRes = pAlt->apAlt;

	if (NULL == pAlt)
	{
		for (iAlt = 0 ; iAlt < pAltInfo->NumCand ; ++iAlt)
		{
			pAltInfo->aCandInfo[iAlt].InfCharCost		= INT_MIN;
			pAltInfo->aCandInfo[iAlt].Aspect	= INT_MAX;
			pAltInfo->aCandInfo[iAlt].Height	= INT_MAX;
			pAltInfo->aCandInfo[iAlt].BaseLine	= INT_MAX;
		}
		return;
	}
	
	GetWordGeoCostsFromAlt (pXrc, pAlt, pAltInfo);
}

void CallSole(XRC * pxrc, GLYPH *pGlyph, GUIDE *pGuide, ALTERNATES *pWordAlt)
{
	ALTERNATES Alt; //This is the format of the charcter alt list for Sole
	unsigned int i; //loop variable
	unsigned char sz[2]; //This is the string buffer used to convert the sole results to a string
	unsigned int iSoleKeep=0;//COunt of the number of sole Alternatives that make it to the final alt list
	unsigned char SoleAlt[TOT_CAND]; //Contains the sole Alternatives that will make it to the final list	
	unsigned char *szAval[TOT_CAND]; //Contains the original avalanche alternatives that will survie and go into the final list
	unsigned int iAvalKeep=0; //Number of candidates from the original alt list that will be kept 
	unsigned int iAvalKeepTemp;
	unsigned int t; //Loop variable
	int iBaseCost; //The cost of the Best alternate
	int iDeltaCost; //The average delta between the costs returned from Avalanche
	int iCost; //Variable that stores the doctored cost
	unsigned int iOrigLength; //Stores the lenght of the original alt list
	unsigned int iTempLength ;//Stores the temporary length of the alt list

	// check if the existing altlist TOP1 is a one char word, otherwise do noting
	if (strlen(pWordAlt->aAlt[0].szWord) !=1)
	{
		return;
	}

	//We first zero out the alternates that sole will return
	memset(&Alt, 0, sizeof(Alt));

	//Sole should return the maximum number of possible candidates
	//
	Alt.cAltMax=TOT_CAND;
	Alt.cAlt = 0;

	iOrigLength=pWordAlt->cAlt;
	//Validate assumption
	ASSERT(iOrigLength <= TOT_CAND);


	//We make the call to Sole 
	if (!SoleRecog(pGlyph, pGuide, &Alt, !!pGuide))
	{
		return;
	}

	//Sole will always return TOT_CAND Candidates 
	ASSERT(Alt.cAlt == TOT_CAND);

	//For the time being we are only replacing the alternates and NOT the score for sole
	//Once the alt list from Sole is returned,we change the results to reflect those of Sole

	// We first find the number of sole candidates which can make it to the final alt list--
	// we also store the candidates in a separate list

	//Sole only replaces alternatives if the string is supported(assumes coerce flag is on
	//This is to prevent flaky behaviour when the NUMBER_FACTOID is set,Avalanche has a top choice of 1,and sole 
	//goes and replaces it with an l.


	//iSoleKeep stores the number of sole alternates that could be considered for putting into the final alt list
	iSoleKeep = 0;
	for (i = 0; i < TOT_CAND; ++i)
	{
		sz[0]=Alt.aAlt[i].szWord[0];
		sz[1]=0;

		if ( IsStringSupportedHRC((HRC)pxrc, sz))
		{
			SoleAlt[iSoleKeep++]=Alt.aAlt[i].szWord[0];
		}
	}

	//Max number of sole Alternates is 5
	iSoleKeep=__min(iSoleKeep,TOT_CAND/2);

	// We are now going to find those original Avalanche candidates which are different from that of sole
	// We are going to save copies of those....
	for (i=0;i<pWordAlt->cAlt;++i)
	{ 
		unsigned int j;

		for (j=0;j<iSoleKeep;++j)
		{
			sz[0]=SoleAlt[j];
			sz[1]=0;
			//If the string exists in any of the sole alternates then it will not be saved
			if (!strcmp(sz,pWordAlt->aAlt[i].szWord))
				break;
		}
		if (j<iSoleKeep)
			continue;

		//This string needs to be saved
		szAval[iAvalKeep]=(unsigned char*)Externstrdup(pWordAlt->aAlt[i].szWord);
		if (!szAval[iAvalKeep])
		{  
			//Free the ones that have already been allotted
			for (t=0;t<iAvalKeep;++t)
				ExternFree(szAval[t]);
			return;
		}

		++iAvalKeep; //Count of number of avalanche alternates that need to be saved
	}

	//Max number of Avalanche alternates we will keep is TOT_CAND-iSoleKeep
	iAvalKeepTemp=__min(iAvalKeep,TOT_CAND-iSoleKeep);

	for (t=iAvalKeepTemp;t<iAvalKeep;++t)
		ExternFree(szAval[t]);

	iAvalKeep=iAvalKeepTemp;

	//THe total number of candidates will be >= the original number of candidates
	//ASSERT((iAvalKeep+iSoleKeep) >=iOrigLength);


	//The total number of alternates that will be kept are <=TOT_CAND
	ASSERT((iSoleKeep+iAvalKeep) <=TOT_CAND);

	//Now find the base cost
	iBaseCost=pWordAlt->aAlt[0].cost;

	//Find the delta between the costs

	//If the length 
	if (1==iOrigLength)
	{

		iDeltaCost=pWordAlt->aAlt[0].cost/2;

	}
	else
	{
		iDeltaCost=(pWordAlt->aAlt[iOrigLength-1].cost - pWordAlt->aAlt[0].cost)/(iOrigLength-1);
	}

	//Just make sure that the delta for the costs is not zero
	if (0==iDeltaCost)
		iDeltaCost=10;

	//Now we put the sole Alt list into the main list
	for (i=0;i<iSoleKeep; ++i)
	{


		if (i>=iOrigLength)
		{
			sz[0]=SoleAlt[i];
			sz[1]=0;
			iCost=iBaseCost + iDeltaCost*i;
			//Check for an overflow condition
			if (iCost <=0)
				iCost=INT_MAX;
			InsertALTERNATES(pWordAlt,iCost,sz,pxrc);

		}
		else
		{
			//The costs remain unchanged
			//Just add this stuff in the alternates that already exsist
			pWordAlt->aAlt[i].szWord[0]=SoleAlt[i];
			pWordAlt->aAlt[i].szWord[1]=0;

		}					
	}	

	iTempLength=pWordAlt->cAlt;
	//Fill up whatever remains with the remaining answers from the original Avalanche results
	for (i=iSoleKeep; i<(iSoleKeep+iAvalKeep); ++i)
	{


		if (i>=iTempLength)
		{	

			iCost=iBaseCost + iDeltaCost*i;
			//Check for an overflow condition
			if (iCost <=0)
				iCost=INT_MAX;

			InsertALTERNATES(pWordAlt, iCost, szAval[i-iSoleKeep], pxrc);

			ExternFree(szAval[i-iSoleKeep]);
		}
		else
		{

			ExternFree(pWordAlt->aAlt[i].szWord);
			pWordAlt->aAlt[i].szWord = szAval[i-iSoleKeep];
		}
	}

	ClearALTERNATES(&Alt);
}

// The word map passed is BEAR's wordmap
int Avalanche (XRC *pxrc, ALTERNATES *pBearAlt)
{
	GLYPH			*pGlyph		=	pxrc->pGlyph;
	HRC				hrcBear		=	NULL;
	BEARXRC			*pxrcBear	=	NULL;
	int				iRet		=	HRCR_ERROR;
	XRC				*pXrcAlt	=	NULL;
	

#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif

	// inferno should at least have one candidate
	if (pxrc->answer.cAlt <= 0)
	{
		// fail
		goto exit;
	}
	
	// if we had not done that already:
	// we need to pass the ink to calligrapher and get its cand list
	// Calls callig in word mode attempting to recognize the ink inside the passed xrc
	// it wil use the context info (bSystemDict, ALC) in the passed xrc 
	if (!pBearAlt || pBearAlt->cAlt <= 0)
	{
		hrcBear		=	BearRecognize (pxrc, pxrc->pGlyph, NULL, 1);
		if (!hrcBear)
		{
			goto exit;
		}

		pxrcBear	=	(BEARXRC *)hrcBear;
		pBearAlt	=	&pxrcBear->answer;

		if (!pBearAlt || pBearAlt->cAlt <= 0)
		{
			goto exit;
		}
		
	}

#ifdef TRAINTIME_AVALANCHE
	//ConfMadDump(pxrc);
	ComputeReliabilityEst(pxrc,pxrc->answer.aAlt[0].szWord,pBearAlt->aAlt[0].szWord);

#endif
	// now start static constructing the combined alt list
	// from both madusa & callig
// If the first choice from both Inferno and Bear match then the confidence level is set to medium

		

	if (!strcmp(pxrc->answer.aAlt[0].szWord, pBearAlt->aAlt[0].szWord))
	{
		if (pxrc->answer.aAlt[1].szWord)
		{
			ASSERT(pxrc->answer.aAlt[1].cost >= pxrc->answer.aAlt[0].cost);
			ASSERT(pxrc->nfeatureset->cSegment > 0);

			if ((pxrc->answer.aAlt[1].cost-pxrc->answer.aAlt[0].cost)/pxrc->nfeatureset->cSegment < RECOCONF_DELTA_LEVEL)
			{
				pxrc->answer.iConfidence=RECOCONF_MEDIUMCONFIDENCE;
			}
			else 
			{
				pxrc->answer.iConfidence=RECOCONF_HIGHCONFIDENCE;
			}
		}
		else
		{
			
			pxrc->answer.iConfidence=RECOCONF_MEDIUMCONFIDENCE;
		}
	}

	if	(	pxrc->answer.cAlt >= 1
		&&	pBearAlt->cAlt >= 1
		&& strcmp (pxrc->answer.aAlt[0].szWord, pBearAlt->aAlt[0].szWord)
		)
	{
		PALTERNATES	AvalAlt;
		ALTINFO		AltInfo;
		int			iDups, cTokens = 0;
		BOOL		bOneCharWord;
		int			iOneCharNetRun = -1;		// Status of running OneCharNet 
												// -1 Onechar net has not run ; 0 - It failed ; 1 - It succeeded

		bOneCharWord	=	((strlen (pxrc->answer.aAlt[0].szWord) == 1) || (strlen (pBearAlt->aAlt[0].szWord) == 1));


		// merge the alt lists
		if ( (iDups = MergeAltLists	(pxrc, pXrcAlt, pBearAlt, &AvalAlt, &AltInfo)) < 0)
		{
			goto exit;
		}

		FillInMissingBearAlts(pxrc, &AvalAlt, &AltInfo);
		AddGeoAndCharCosts(pxrc, &AvalAlt, &AltInfo);

#ifdef TRAINTIME_AVALANCHE
		SaveAvalancheTrainData(pxrc, pBearAlt, &AvalAlt, &AltInfo, iDups, cTokens,0,0);
#endif

		// If we think the answer might be 1 character run the special one character net
		// otherwise run the regular avalanche
		if ( TRUE == bOneCharWord)
		{
			iOneCharNetRun = RunOneCharAvalancheNNet(pxrc, &AvalAlt, &AltInfo);

			if (0 == iOneCharNetRun)
			{
				goto exit;
			}
		}

		// NOTE: iOneCharNetRun can take on 1-of-3 values
		// -1 - Did not runOneCharNet or it is unavailable
		// 0   - It ran but failed - This is handled above
		// 1 - OncharNet ran and succeeeded
		ASSERT(iOneCharNetRun != 0);
		if (iOneCharNetRun < 0)
		{
			RunAvalancheNNet (pxrc, &AvalAlt, &AltInfo);
		}

		// Feature set was borrowed from the main inferno net
		// Note Delay this destruction till dont use ALtinfo
		if (pXrcAlt)
		{
			pXrcAlt->nfeatureset	= NULL;
			DestroyHRC((HRC)pXrcAlt);
		}

	}
	else
	{
	    //TruncateWordALTERNATES(&pxrc->answer, TOT_CAND);
 	
#ifdef TRAINTIME_AVALANCHE

		PALTERNATES	AvalAlt;
		ALTINFO		AltInfo;

		int			iDups, cTokens = 0;


		// merge the alt lists
		if ( (iDups = MergeAltLists	(pxrc, pXrcAlt, pBearAlt, &AvalAlt, &AltInfo)) < 0)
		{
			goto exit;
		}


		FillInMissingBearAlts(pxrc, &AvalAlt, &AltInfo);
		AddGeoAndCharCosts(pxrc, &AvalAlt, &AltInfo);

		//	ConfAvalDump(pxrc,&AvalAlt,&AltInfo,NULL);

		// Feature set was borrowed from the main inferno net
		// Note Delay this destruction till dont use ALtinfo
		if (pXrcAlt)
		{
			pXrcAlt->nfeatureset	= NULL;
			DestroyHRC((HRC)pXrcAlt);
		}
		
 	
#endif
	TruncateWordALTERNATES(&pxrc->answer, TOT_CAND);
	}

	// do the one char processing if needed		
	CallSole (pxrc, pxrc->pGlyph, pxrc->bGuide ? &pxrc->guide : NULL, &pxrc->answer);

#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	setMadTiming(iEndTime - iStartTime, MM_RUN_AVAL);
#endif

	iRet	=	HRCR_OK;

exit:
	// destory the bear handle if we had created one
	if (hrcBear)
	{
		BearDestroyHRC (hrcBear);
	}

	// if we failed for any reason, we set the confidence to low
	if (iRet != HRCR_OK)
	{
		if (pxrc)
		{
			pxrc->answer.iConfidence=RECOCONF_LOWCONFIDENCE;
		}
	}

	// compute baseline stuff if possible

	insertLatinLayoutMetrics(pxrc, &pxrc->answer, pxrc->pGlyph);

	return iRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\confidence.h ===
/****************************************************************
*
* NAME: confidence .h
*
*
* DESCRIPTION:
*
* Runs net for alt list confidence determination
* Not all languages will have this processing
*
***************************************************************/
#ifndef H_CONFIDENCE_H
#define H_CONFIDENCE_H

#include <runNet.h>
//Define the various levels that you will be returning for the confidece API


#define CONFIDENCE_NET_THRESHOLD 52428
#define RECOCONF_DELTA_LEVEL  71

BOOL LoadConfidenceNets (HINSTANCE hInst);
void UnLoadConfidenceNets();
BOOL ConfidenceLevel(XRC *pxrc, void *pAlt, ALTINFO *pAltInfo, RREAL *pOutput);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\avalapi.c ===
// avalapi.c
// Angshuman Guha, James A. Pittman
// November 6, 1997

// Interface to the combined HolyCow and Porky English cursive word recognizers.
// This file mostly stolen from inferno\api.c

#include "tchar.h"

#include "common.h"

#if defined(HWX_INTERNAL) && defined(HWX_SAVEINK)
#include <direct.h>
#include <time.h>
#endif

#include "nfeature.h"
#include "engine.h"
#include "nnet.h"

#include "Panel.h"

#include "Avalanche.h"
#include "recdefs.h"
#include <udictP.h>

#include "wordbrk.h"
#include "multsegm.h"
#include "recoutil.h"

int		CleanupHRC(HRC hrc);

#if defined(HWX_INTERNAL) && defined(HWX_SAVEINK)
void SaveInk (XRC *pxrc);
#endif

/******************************Public*Routine******************************\
* ProcessHRC
*
* Function to do main processing for recognition.
*
* The return value on success is as follows:
*    ProcessHRC did something  |  there is more to do  | return value
*    --------------------------+-----------------------+------------------
*           yes                |        no             |   HRCR_OK
*           yes                |        yes            |   HRCR_INCOMPLETE
*           no                 |        no             |   HRCR_COMPLETE
*           no                 |        yes            |   HRCR_NORESULTS
*
* History:
* 11-Mar-2002 -by- Angshuman Guha aguha
* Modified to have 4 success return values instead of 2 (HRCR_INCOMPLETE and HRCR_OK).
\**************************************************************************/
int WINAPI ProcessHRC(HRC hrc, DWORD dwRecoMode)
{
	XRC		*pxrc = (XRC *)hrc;

	// Check the validity of the xrc and the ink
	if (!pxrc || !pxrc->pGlyph || CframeGLYPH(pxrc->pGlyph) <= 0)
		return HRCR_ERROR;	

	// clean up the hrc
	CleanupHRC ((HRC)pxrc);

	// if we have a prefix or a suffix in the xrc make sure the mode supports this
	// the current implmentation supports prefixes and suffixes
	// only in word mode and only if the coerce flag is on
	if (pxrc->szPrefix || pxrc->szSuffix)
	{
		if ((!(pxrc->flags & RECOFLAG_WORDMODE)) || (!(pxrc->flags & RECOFLAG_COERCE)))
		{
			//return HRCR_ERROR;
			if (pxrc->szPrefix)
			{
				ExternFree(pxrc->szPrefix);
				pxrc->szPrefix = NULL;
			}
			if (pxrc->szSuffix)
			{
				ExternFree(pxrc->szSuffix);
				pxrc->szSuffix = NULL;
			}
		}
	}

	// to provide backwards compatiblity setting dwRecoMode to 0 or PH_MAX
	// is equivalent to RECO_MODE_REMAINING
	if (dwRecoMode == 0 || dwRecoMode == PH_MAX)
	{
		dwRecoMode	=	RECO_MODE_REMAINING;
	}

	// In word mode only RECO_MODE_REMAINING (full mode) is allowed
	if (pxrc->flags & RECOFLAG_WORDMODE)
	{
		if (dwRecoMode != RECO_MODE_REMAINING)
		{
			return HRCR_ERROR;
		}
	}

#if defined(HWX_INTERNAL) && defined(HWX_SAVEINK)
	SaveInk (pxrc);
#endif

	// set the ProcessCalled flag to TRUE. 
	// After we have passed all these checks we can regard ourseleves called
	pxrc->bProcessCalled	=	TRUE;
	
	// if we have a user dictionary attached, do the necessary locking
	if (pxrc->hwl)
	{
		// MultiProcess synchro
		UDictGetLock(pxrc->hwl, READER);
	}

	// Panel Mode processing
	if (!(pxrc->flags & RECOFLAG_WORDMODE))
	{
		pxrc->iProcessRet = PanelModeRecognize (pxrc, dwRecoMode);
	}
	// Word Mode processing
	else
	{
		pxrc->iProcessRet = WordModeRecognize (pxrc);
	}

	// if we had a user dictionary attached, do the necessary un-locking
	if (pxrc->hwl)
	{
		// MultiProcess synchro
		UDictReleaseLock(pxrc->hwl, READER);
	}

	return pxrc->iProcessRet;
}

// **************************************************************************
// private API
// **************************************************************************
#if defined(HWX_INTERNAL) && defined(HWX_TIMING)

#include <madTime.h>

static MAD_TIMING s_madTime = {0, 0, 0, 0};

void setMadTiming(DWORD dwTime, int iElement)
{
	s_madTime.dCnt[iElement]++;
	s_madTime.dTime[iElement] += dwTime;

}

__declspec(dllexport) DWORD WINAPI HwxGetTiming(void *pVoid, BOOL bReset)
{
	*(MAD_TIMING *) pVoid = s_madTime;

	if (bReset)
	{
		memset(&s_madTime, 0, sizeof(s_madTime));
	}

	return s_madTime.dTime[MM_TOT];
}

#endif // #if defined(HWX_INTERNAL) && defined(HWX_TIMING)


//********************** functions for internal build **********************************


#if defined(HWX_INTERNAL) && defined(HWX_SAVEINK)

#define INK_ROOT_DIR		"\\aval_ink"

void WriteInk(FILE *fp, GLYPH *pGlyph)
{
	fprintf(fp, "%d\n", CframeGLYPH(pGlyph));

	for (; pGlyph; pGlyph=pGlyph->next)
	{
		FRAME *frame = pGlyph->frame;
		int c = CrawxyFRAME(frame);
		XY *xy = RgrawxyFRAME(frame);
		fprintf(fp, "%d\n", c);
		for (; c; c--, xy++)
			fprintf(fp, "%d\t%d\n", xy->x, xy->y);
	}
}

void WriteGuide(FILE *fp, GUIDE *pGuide)
{
	GUIDE guide;

	if (pGuide)
		guide = *pGuide;
	else
		memset(&guide, 0, sizeof(GUIDE));

	fprintf(fp, "\
	xOrigin=%d	yOrigin=%d\n\
	cxBox=%d	cyBox=%d\n\
	cxBase=%d	cyBase=%d	cyMid=%d\n\
	cHorzBox=%d	cVertBox=%d\n",
			guide.xOrigin, guide.yOrigin, guide.cxBox, guide.cyBox, guide.cxBase, guide.cyBase, guide.cyMid, guide.cHorzBox, guide.cVertBox);

}

void SaveInk2File (XRC *pxrc, char *pszFileName)
{
	FILE	*fp;
	int L, R, T, B;
	GUIDE *pGuide = pxrc->bGuide ? &pxrc->guide : NULL;
	GLYPH *pGlyph = pxrc->pGlyph;

	if (!pGlyph)
		return;

	fp	= fopen (pszFileName, "w");
	if (!fp)
		return;

	if (pGuide)
	{
		L = pGuide->xOrigin;
		T = pGuide->yOrigin;
		R = pGuide->xOrigin + pGuide->cHorzBox*pGuide->cxBox;
		B = pGuide->yOrigin + pGuide->cVertBox*pGuide->cyBox;
	}
	else
	{
		RECT rect;
		int margin;
		GetRectGLYPH(pGlyph, &rect);
		if (rect.right - rect.left > rect.bottom - rect.top)
			margin = rect.bottom - rect.top;
		else
			margin = rect.right - rect.left;
		margin = margin/10 + 2;
		L = rect.left - margin;
		R = rect.right + margin;
		T = rect.top - margin;
		B = rect.bottom + margin;
	}

	fprintf(fp, "\
VERSION=2\n\
OS=Unknown\n\
SystemRoot=Unknown\n\
USERNAME=Unknown\n\
SCREEN: h=1 w=1\n\
Wordmode=%d\n\
UseGuide=%d\n\
Coerce=%d\n\
NNonly=0\n\
UseFactoid=%d\n\
Factoid=0\n\
Prefix=%s\n\
Suffix=%s\n\
UseWordlist=0\n\
DLL=Unknown\n\
WA=\n\
	L=%d T=%d R=%d B=%d\n",
				pxrc->flags & RECOFLAG_WORDMODE ? 1 : 0,
				pGuide?1:0,
				pxrc->flags * RECOFLAG_COERCE ? 1 : 0,
				pxrc->pvFactoid ? 1 : 0,
				pxrc->szPrefix ? pxrc->szPrefix : "",
				pxrc->szSuffix ? pxrc->szSuffix : "",
				L, T, R, B);

	WriteGuide(fp, pGuide);

	fprintf(fp, "\
	iMultInk=0	iDivInk=0\n\
WAGMM=\n\
	L=%d T=%d R=%d B=%d\n",
				L, T, R, B);

	WriteGuide(fp, pGuide);

	fprintf(fp, "\
	iMultInk=0	iDivInk=0\n\
label=\n\
comment=\n\
commentend=\n");

	fprintf(fp, "regular points\n");
	WriteInk(fp, pGlyph);
	fprintf(fp, "GMM points\n");
	WriteInk(fp, pGlyph);
	fclose (fp);
}

void SaveInk(XRC *pxrc)
{
	char		aszDate[10], aszTime[10];
	char		aszTodaysDir[128];
	char		aszFileName[256];
	time_t		ltime;
	struct	tm	*pNow;

	
	// make sure our root dir exists, if not create it
	if (_chdir (INK_ROOT_DIR))
	{
		// we failed to create dir
		if (_mkdir (INK_ROOT_DIR))
			return;
	}

	time( &ltime );
	pNow = localtime( &ltime );
    
	// now does a dir with today's date exist
	strftime(aszDate, sizeof (aszDate), "%m%d%Y", pNow);

	sprintf (aszTodaysDir, "%s\\%s", INK_ROOT_DIR, aszDate);

	if (_chdir (aszTodaysDir))
	{
		// we failed to create dir
		if (_mkdir (aszTodaysDir))
			return;
	}

	// generate file name
	strftime(aszTime, sizeof (aszTime), "%H%M%S", pNow);
	sprintf (aszFileName, "%s\\%s.ink", aszTodaysDir, aszTime);

	SaveInk2File (pxrc, aszFileName);
}

#endif // if defined(HWX_INTERNAL) && defined(HWX_SAVEINK)
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\confidence.c ===
/****************************************************************
*
* NAME: confidence.c
*
*
* DESCRIPTION:
*
* Common code to run confidence. This is common for all languages.
* Some languages may not support confidences then we just set the default values
*
*
* HISTORY
*
* Introduced March 2002 (mrevow)
*
***************************************************************/
#include <common.h>
#include <limits.h>
#include <nfeature.h>
#include <engine.h>
#include <nnet.h>
#include <charmap.h>
#include <charcost.h>
#include <runNet.h>
#include <avalanche.h>
#include <avalanchep.h>
#include <confidence.h>
#include <resource.h>


static LOCAL_NET	s_confidenceNet = {0};
static int			s_cConfidenceNet = 0;

// Attempt to load for languages - It is not ann error if it fails
// Simply means that the language does not support confidence
BOOL LoadConfidenceNets (HINSTANCE hInst)
{
	if ( FALSE == loadNet(hInst, RESID_AVAL_CONFIDENCE, &s_cConfidenceNet, &s_confidenceNet))
	{
		memset(&s_confidenceNet, 0, sizeof(s_confidenceNet));
		s_cConfidenceNet	= 0;
	}

	return TRUE;
}
// Unload Confidence nets
void UnLoadConfidenceNets()
{
}

//create a sort indedx array for the best order of the 
// alt list outputs 
static BOOL GetIndexes(int *pOutput,int cAlt,int *pOutIndex)
{
	int			*pSortOutput = NULL;
	int			c,temp1,temp2,j;
	
	if (!(pSortOutput=(int *)ExternAlloc(sizeof(int)*cAlt)))
		return 0;
	
	//Initialize pOutIndex and pSortOutput
	for (c=0;c<cAlt;++c)
	{
		pOutIndex[c]=c;
		pSortOutput[c]=pOutput[c];
	}
	
	
	
	for (c=0;c<=cAlt-1;++c)
	{
		for (j=0;j<cAlt-1-c;j++)
			
		{  if ( pSortOutput[j] < pSortOutput[j+1])
		{
			temp1=pSortOutput[j];
			pSortOutput[j]=pSortOutput[j+1];
			pSortOutput[j+1]=temp1;
			temp2=pOutIndex[j];
			pOutIndex[j]=pOutIndex[j+1];
			pOutIndex[j+1]=temp2;
		}
		
		
		}
		
		
	}

	ExternFree(pSortOutput);
	return 1;
}



// run the confidence nets if available
// Set default value if not available
BOOL ConfidenceLevel(XRC *pxrc, void *pAlt, ALTINFO *pAltInfo, RREAL *pOutput)

{ 
	int			cAlt;
	int			c, cOut, iWin;
	PALTERNATES *pAvalAlt=(PALTERNATES *)pAlt;
	int			*pOutIndex = NULL;
	RREAL		*pConfFeat = NULL, *pFeat, *pOut;
	int			iRet = FALSE;

	// Some languages will not have a confidence net
	if (0 == s_cConfidenceNet)
	{
		return FALSE;
	}

	cAlt= min (pxrc->answer.cAlt, (unsigned int)pAltInfo->NumCand);
	
	
	//Check the range of the number of candiudates
	ASSERT(cAlt>=0);
	ASSERT(cAlt<=TOT_CAND);

	if (!(pOutIndex=(int *)ExternAlloc(sizeof(int)*cAlt)))
	{
		// Nothing allocated yet - just return
		return 0 ;
	}

	if (!(pConfFeat=(RREAL *)ExternAlloc(sizeof(RREAL) * s_cConfidenceNet)))
	{
		goto fail;
	}

	if (!GetIndexes(pOutput, cAlt, pOutIndex))	
	{
		goto fail;
	}

	pFeat = pConfFeat;
	for (c = 0 ; c < cAlt ; c++)
	{	
		*pFeat++	= pAltInfo->aCandInfo[pOutIndex[c]].Callig;
		*pFeat++	= pAltInfo->aCandInfo[pOutIndex[c]].NN;
		*pFeat++	= pAltInfo->aCandInfo[pOutIndex[c]].InfCharCost;
		*pFeat++	= c;
	}

	for ( ; c < TOT_CAND; c++)
		
	{	
		*pFeat++ = INT_MIN;
		*pFeat++ = INT_MAX;
		*pFeat++ = INT_MAX;
		*pFeat++ = c;
	}
	
	ASSERT(pFeat - pConfFeat == s_confidenceNet.runNet.cUnitsPerLayer[0]);

	pOut = runLocalConnectNet(&s_confidenceNet, pConfFeat, &iWin, &cOut);

	if (*pOut > CONFIDENCE_NET_THRESHOLD)
	{
		pxrc->answer.iConfidence=RECOCONF_MEDIUMCONFIDENCE;
	}
	else 
	{
		pxrc->answer.iConfidence=RECOCONF_LOWCONFIDENCE;
	}

	// Success
	iRet = TRUE;

fail:
	ExternFree(pOutIndex);
	ExternFree(pConfFeat);

	return iRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\geofeats.h ===
#ifndef _GEO_FEATS_H
#define _GEO_FEATS_H

extern int GetGeoCosts(XRC *pXrc, unsigned char *pszWord, int *piAspect, int *piHeight, int *piMidpoint, int *piCharCost);
extern BOOL loadCharNets(HINSTANCE hInst);
extern void unloadCharNets();

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\multsegm.c ===
// Resolution of segmentation disputes using multiple segmentations from Bear and Inferno 
// Ahmad abdulKader: ahmadab
// March 2001

#include <common.h>
#include <limits.h>
#include <string.h>

#include "hwr_sys.h"
#include "pegrec.h"
#include "peg_util.h"
#include "xrwdict.h"
#include "xrword.h"
#include "xrlv.h"
#include "ws.h"

#include "xrcreslt.h"
#include "avalanchep.h"
#include "nfeature.h"
#include "engine.h"
#include "nnet.h"
#include "charcost.h"
#include "charmap.h"
#include "probcost.h"

#include "bear.h"
#include "bearp.h"
#include "panel.h"
#include "wordbrk.h"
#include "multsegm.h"
#include "avalanche.h"
#include "recoutil.h"
#include "runNet.h"
#include "resource.h"

#include <GeoFeats.h>

// May 2002 - This is the maximum number of segmentations allowed per line
// Too many segmentations can cause a process and memory blowup
// I found that non of the standard FRA DEU USA or UK BVT test sets exceed this value
#define CSEG_MAX	100
// this is the maximum # of m-segmentation nets that we can have
// This is computed by adding the # of special segmentation tuples
// and the max # of segmentations - 1 (there is not net for a single segmentation)
#define	NUM_MSEG_NET	(SPEC_SEG_TUPLE + MAX_SEG - 1)

static	LOCAL_NET		*s_msegNets		[NUM_MSEG_NET] = {NULL};	
static	int				s_cmSegNetMem	[NUM_MSEG_NET] = {0 };

extern int	UnigramCost			(unsigned char *szWord);
extern int	LastCharPunc		(unsigned char *psz);
extern int	LastCharNum			(unsigned char *psz);
extern int	LastCharLower		(unsigned char *psz);
extern int	LastCharUpper		(unsigned char *psz);
extern int	FirstCharPunc		(unsigned char *psz);
extern int	FirstCharNum		(unsigned char *psz);
extern int	FirstCharLower		(unsigned char *psz);
extern int	FirstCharUpper		(unsigned char *psz);

extern HRC	InfernoRecognize	(XRC *pMainXrc, GLYPH *pGlyph, int yDev, BOOL bWordMap);
extern int	GetNewWordMapBearSpaceOut	(BEARXRC *pxrc, GLYPH *pLineGlyph, WORD_MAP *pLeftMap, WORD_MAP *pRightMap);

extern unsigned short UniReliable(unsigned char *pszWord,BOOL bInf);
extern unsigned short BiReliable(unsigned char *pszWord,BOOL bInf);

extern BOOL GetWordGeoCostsFromAlt (XRC *pXrc, PALTERNATES *pAlt, ALTINFO *pAltInfo);

#ifdef TRAINTIME_AVALANCHE
extern void	SaveMultipleSegmentation (XRC *pxrc, BEARXRC *pxrcBear,
								  SEG_COLLECTION *pSegCol, int yDev, int iPrint, 
								  int iNetIndex, int cTuple); 

extern void		SaveSegCol	(SEG_COLLECTION *pSegCol);
extern int		FindCorrectSegmentation (SEG_COLLECTION *pSegCol);
extern int		AddCorrectSegmentation	(LINE_SEGMENTATION *pLineSeg, 
								 SEG_COLLECTION *pSegCol, GLYPH *pGlyph);

#endif


// load the segmentation nets from resources
BOOL LoadMultiSegAvalNets(HINSTANCE hInst)
{
	int			i,iRes;

	// this is the resource ID of the the 1st segmentation net
	iRes = RESID_MSEGAVALNET_SEG_1_2;

	// The multiple segmentation nets
	for (i = 0 ; i < NUM_MSEG_NET; ++i)
	{
		LOCAL_NET	net;
		int			iNetSize;

		if (loadNet(hInst, iRes, &iNetSize, &net))
		{
			ASSERT(iNetSize > 0);

			if (iNetSize >0)
			{
				s_msegNets[i] = (LOCAL_NET *)ExternAlloc(sizeof(*s_msegNets[i]));

				if (!s_msegNets[i])
				{
					return FALSE;
				}

				*s_msegNets[i] = net;
				s_cmSegNetMem[i] = iNetSize;
			}
		}

		++iRes;
	}

	return TRUE;
}

// Unload the segmentation nets
void UnLoadMultiSegAvalNets()
{
	int		i ;

	for (i = 0 ; i < NUM_MSEG_NET ; ++i)
	{
		if (s_cmSegNetMem[i] > 0)
		{
			ExternFree(s_msegNets[i]);
		}

		s_cmSegNetMem[i] = 0;
	}
}

// does a cross product of all the SegCols in a line segmentation to produce a 1-SegCol version
// of the line segmentation
BOOL SegColCrossMultiply	(	LINE_SEGMENTATION	*pInLineSegm, 
								LINE_SEGMENTATION	*pOutLineSegm, 
								int					iCurSegCol,
								int					*piCurSeg
							)
{
	SEGMENTATION	Seg, *pSrcSeg;
	SEG_COLLECTION			*pSegCol;
	int				iSeg, iSegCol;

	// did the path terminate (are we at the end)
	if (iCurSegCol == pInLineSegm->cSegCol)
	{
		// create a new SegCol in the output if was not created before
		if (pOutLineSegm->cSegCol < 1)
		{
			pSegCol		=	AddNewSegCol (pOutLineSegm);
		}
		else
		{
			pSegCol		=	pOutLineSegm->ppSegCol[0];
		}

		if (!pSegCol)
			return FALSE;

		// init a new segmentation
		memset (&Seg, 0, sizeof (Seg));

		// alloc memory for feat vector
		Seg.pFeat	=	(SEG_FEAT *) ExternAlloc (sizeof (*Seg.pFeat));
		if (!Seg.pFeat)
			return FALSE;

		// init them
		memset (Seg.pFeat, 0, sizeof (*Seg.pFeat));

		Seg.pFeat->bInfernoTop1	=	FALSE;
		Seg.pFeat->bBearTop1	=	TRUE;

		for (iSegCol = 0; iSegCol < pInLineSegm->cSegCol; iSegCol++)
		{
			// point to the src segmentation
			iSeg		=	piCurSeg[iSegCol];
			pSrcSeg		=	pInLineSegm->ppSegCol[iSegCol]->ppSeg[iSeg];

			// append the source segmentation
			if (!AppendSegmentation (pSrcSeg, -1, -1, &Seg))
			{
				return FALSE;
			}
			
			// update features
			if (iSeg != 0)
			{
				Seg.pFeat->bBearTop1	=	FALSE;
			}
		}

		// no need to look for duplicates, by definition each new segmentation
		// sould be unique
		if (!AddNewSegmentation (pOutLineSegm, pSegCol, &Seg, FALSE))
		{
			return FALSE;
		}

		// nullify the wordmap so that they do not get freed, pInLineSegm owns them
		memset (Seg.ppWord, 0, Seg.cWord * sizeof (*Seg.ppWord));

		// free it
		FreeSegmentation (&Seg);
	}
	else
	{
		int	cSeg	=	pInLineSegm->ppSegCol[iCurSegCol]->cSeg;
	
		// point to the source segmentation
		for (iSeg = 0; iSeg < cSeg; iSeg++)
		{
			piCurSeg[iCurSegCol]	=	iSeg;
			
			if (!SegColCrossMultiply (pInLineSegm, pOutLineSegm, iCurSegCol + 1, piCurSeg))
			{
				return FALSE;
			}
		}
	}

	return TRUE;
}

// adjusts the stroke IDs of a word map according to the passed glyph
BOOL AdjustStrokeID (WORD_MAP *pWordMap, GLYPH *pGlyph)
{
	int i, j, k;

	for (i = 0; i < pWordMap->cStroke; i++)
	{
		FRAME	*pFrm;

		pFrm	=	FrameAtGLYPH (pGlyph, pWordMap->piStrokeIndex[i]);
		if (!pFrm)
			return FALSE;
		else
			pWordMap->piStrokeIndex[i]	=	pFrm->iframe;
	}

	// now sort the strokes
	for (i = 0; i < (pWordMap->cStroke - 1); i++)
	{
		for (j = i + 1; j < pWordMap->cStroke; j++)
		{
			if (pWordMap->piStrokeIndex[i] > pWordMap->piStrokeIndex[j])
			{
				k							=	pWordMap->piStrokeIndex[i];
				pWordMap->piStrokeIndex[i]	=	pWordMap->piStrokeIndex[j];
				pWordMap->piStrokeIndex[j]	=	k;
			}
		}
	}

	return TRUE;
}

// adds inferno's segmentations to a seg col
// pLineseg is needed because it holds the wordmaps
BOOL AppendInfernoSegmentation	(	LINE_SEGMENTATION	*pResults, 
									SEG_COLLECTION		*pSegCol, 
									XRC					*pxrc, 
									int					cInfSeg, 
									int					*pInfSeg
								)
{
	int	i;

	for (i = 0; i < cInfSeg; i++)
	{
		int				cWord, w;
		XRCRESULT		*pAlt;
		SEGMENTATION	Seg;
		WORDMAP			*pSrcMap;

		// init new segmentation
		memset (&Seg, 0, sizeof (Seg));
	
		// alloc memory for feat vector
		Seg.pFeat	=	(SEG_FEAT *) ExternAlloc (sizeof (*Seg.pFeat));
		if (!Seg.pFeat)
			return FALSE;

		// init them
		memset (Seg.pFeat, 0, sizeof (*Seg.pFeat));

		if (i == 0)
			Seg.pFeat->bInfernoTop1	=	TRUE;
		else
			Seg.pFeat->bInfernoTop1	=	FALSE;

		Seg.pFeat->bBearTop1		=	FALSE;

		pAlt	=	pxrc->answer.aAlt + pInfSeg[i];

		// check all the wordmaps proposed by this segmentation
		cWord	=	pAlt->cWords;

		for (w = 0, pSrcMap = pAlt->pMap; w < cWord; w++, pSrcMap++)
		{
			WORD_MAP	*pMap;
			int			iStrk;

			pMap	=	AddNewWordMap (&Seg);
			if (!pMap)
				return FALSE;
			
			for (iStrk = 0; iStrk < pSrcMap->cStrokes; iStrk++)
			{
				if (!AddNewStroke (pMap, pSrcMap->piStrokeIndex[iStrk]))
					return FALSE;
			}
		}

		// add this segmentation if it is a new
		if (!AddNewSegmentation (pResults, pSegCol, &Seg, TRUE))
			return FALSE;

		// free it 
		FreeSegmentationWordMaps (&Seg);
		FreeSegmentation (&Seg);
	}

	return TRUE;
}

// compare two segmentations
BOOL IdenticalSegmentation (XRCRESULT *pAlt1, XRCRESULT *pAlt2)
{
	unsigned int w;

	if (pAlt1->cWords != pAlt2->cWords)
		return FALSE;

	for (w = 0; w < pAlt1->cWords; w++)
	{
		if (pAlt1->pMap[w].cStrokes != pAlt2->pMap[w].cStrokes)
			return FALSE;

		if (memcmp (pAlt1->pMap[w].piStrokeIndex,
			pAlt2->pMap[w].piStrokeIndex,
			pAlt1->pMap[w].cStrokes * sizeof (*pAlt1->pMap[w].piStrokeIndex)))
		{
			return FALSE;
		}
	}

	return TRUE;
}

// enumerate all the possible segmentation found in an XRC
int *FindInfernoSegmentations (XRC *pxrc, int *pcSeg)
{
	int			cSeg	=	0;
	int			*piSeg	=	NULL;
	int			i, j, cAlt;
	XRCRESULT	*pAlt;
	BOOL		bRet	=	FALSE;

	pAlt	=	pxrc->answer.aAlt;
	cAlt	=	pxrc->answer.cAlt;

	// go thru the alt list
	for (i = 0; i < cAlt; i++)
	{
		// check whether this alternative segmentation existed before
		for (j = 0; j < i; j++)
		{
			if (IdenticalSegmentation (pAlt + i, pAlt + j))
				break;
		}

		// this is a unique segmentation, add it to the list
		if (j == i)
		{	
			piSeg	=	(int *) ExternRealloc (piSeg, (cSeg + 1) * sizeof (int));
			if (!piSeg)
				goto exit;

			piSeg[cSeg]	=	i;
			cSeg		++;
		}
	}

	bRet	=	TRUE;

exit:
	if (!bRet)
	{
		if (piSeg)
			ExternFree (piSeg);

		(*pcSeg)	=	0;
		return NULL;
	}

	(*pcSeg)	=	cSeg;
	return piSeg;
}

// determines the min and max values for stroke IDs in a glyph
void GLYPHGetMinMaxStrokeID (GLYPH *pGlyph, int *piMin, int *piMax)
{
	GLYPH *pgl	=	pGlyph;

	(*piMin)	=	(*piMax)	=	-1;
	
	if (CframeGLYPH(pGlyph) < 1)
		return;

	(*piMin)	=	(*piMax)	=	pGlyph->frame->iframe;

	while (pgl)
	{
		(*piMin)	=	min ((*piMin), pgl->frame->iframe);
		(*piMax)	=	max ((*piMax), pgl->frame->iframe);

		pgl			=	pgl->next;
	}
}

// Update the bits in an anchor using the prev anchor an the new word
BOOL UpdateAnchorBits	(	ANCHOR		*pPrevAnch, 
							ANCHOR		*pCurAnch, 
							int			iMinStrk, 
							WORD_MAP	*pWordMap
						)
{
	int	i;

	// copy old bits if any
	if (pPrevAnch)
	{
		// make sure the new anchor has more bytes
		if (pPrevAnch->cByte > pCurAnch->cByte)
			return FALSE;

		memcpy (pCurAnch->pBits, pPrevAnch->pBits, pPrevAnch->cByte);

		pCurAnch->cStrk	=	pPrevAnch->cStrk;
	}

	// enable new bits
	for (i = 0; i < pWordMap->cStroke; i++)
	{
		int iStrk	=	pWordMap->piStrokeIndex[i] - iMinStrk;
		int	iByte, iBit;

		iByte		=	iStrk / 8;
		iBit		=	iStrk % 8;

		// bit was not enabled before
		if (!(pCurAnch->pBits[iByte] & (1 << iBit)))
		{
			pCurAnch->pBits[iByte]	|=	(1 << iBit);
			pCurAnch->cStrk++;
		}
	}

	return TRUE;
}

// aligns segmentation at anchor points. In other words, converts a 1 SegCol line segmentation
// to an optimal SegCol line segmentation
LINE_SEGMENTATION *AlignSegmentations (GLYPH *pGlyph, LINE_SEGMENTATION *pInLineSegm)
{
	int				i, 
					j, 
					iMinStrk, 
					iMaxStrk, 
					iWordMapMaxStrk,
					cStrk, 
					iRunMaxStrk, 
					iWrd, 
					cWrd, 
					cAnch,
					cOldByte,
					*pLastWord		=	NULL;

	WORD_MAP		**ppWordMap;
	
	ANCHOR			*pAnch			=	NULL, 
					*pPrevAnch, 
					*pCurAnch,
					AnchTemp;
		
	BOOL			bRet			=	FALSE;

	SEG_COLLECTION	*pInSegCol,
					*pOutSegCol;

	SEGMENTATION	*pSeg;

	LINE_SEGMENTATION		*pOutLineSegm	=	NULL;

	// point to the one and only set set in the line segmentation
	pInSegCol	=	pInLineSegm->ppSegCol[0];

	if (CframeGLYPH (pGlyph) < 1 || !pInSegCol || !pInSegCol->cSeg || pInLineSegm->cSegCol != 1)
		goto exit;

	// allocate memory for the output structure
	pOutLineSegm	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pOutLineSegm));
	if (!pOutLineSegm)
		goto exit;

	// init align struct
	memset (pOutLineSegm, 0, sizeof (*pOutLineSegm));

	// get the working stroke range
	GLYPHGetMinMaxStrokeID (pGlyph, &iMinStrk, &iMaxStrk);
	cStrk	=	iMaxStrk - iMinStrk + 1;

	// we have as many potential anchors as the number of strokes
	cAnch	=	cStrk;
	pAnch	=	(ANCHOR *) ExternAlloc (cAnch * sizeof (ANCHOR));
	if (!pAnch)
		goto exit;

	memset (pAnch, 0, cAnch * sizeof (ANCHOR));

	// init the anchors with the 1st segmentation
	cWrd		=	pInSegCol->ppSeg[0]->cWord;
	ppWordMap	=	pInSegCol->ppSeg[0]->ppWord;
	pPrevAnch	=	NULL;
	iRunMaxStrk	=	-1;
	AnchTemp.pBits = NULL;

	// we will not tolerate an empty segmentation
	if (!cWrd)
		goto exit;

	for (iWrd = 0; iWrd < cWrd; iWrd++)
	{
		// we will not tolerate an empty word
		if (ppWordMap[iWrd]->cStroke < 1)
		{
			goto exit;
		}

		// init the anchor corresponding to the 
		if (GetMinMaxStrokeID(ppWordMap[iWrd], NULL, &iWordMapMaxStrk) < 1)
		{
			goto exit;
		}

		iRunMaxStrk	=	max (iWordMapMaxStrk, iRunMaxStrk);

		pCurAnch	=	pAnch + (iRunMaxStrk - iMinStrk);

		// update info in Anchor
		if (pCurAnch->cByte || pCurAnch->pBits)
		{
			int	cOldSize = pCurAnch->cByte;

			pCurAnch->cByte		=	(iRunMaxStrk + 1) / 8;
			if ((iRunMaxStrk + 1) % 8)
				pCurAnch->cByte++;

			pCurAnch->cByte	=	max (cOldSize, pCurAnch->cByte);

			pCurAnch->pBits		=	(BYTE *)ExternRealloc (pCurAnch->pBits,
				pCurAnch->cByte * sizeof (BYTE));

			if (!pCurAnch->pBits)
				goto exit;

			memset (pCurAnch->pBits + cOldSize, 0, 
				(pCurAnch->cByte - cOldSize) * sizeof (BYTE));

		}
		else
		{
			// determine the # of bytes needed to code the bits and allocate/init them
			pCurAnch->cByte		=	(iRunMaxStrk + 1) / 8;
			if ((iRunMaxStrk + 1) % 8)
				pCurAnch->cByte++;

			pCurAnch->pBits		=	(BYTE *)ExternAlloc (pCurAnch->cByte * sizeof (BYTE));
			if (!pCurAnch->pBits)
				goto exit;

			memset (pCurAnch->pBits, 0, pCurAnch->cByte * sizeof (BYTE));
		}

		// now fill the appropriate bits
		UpdateAnchorBits (pPrevAnch, pCurAnch, iMinStrk, ppWordMap[iWrd]);

		// so far one seg aligns here
		pCurAnch->cAlign	=	1;

		pPrevAnch	=	pCurAnch;
	}

	// align the rest of the segmentations
	for (i = 1; i < pInSegCol->cSeg; i++)
	{
		// init the anchors with the 1st segmentation
		cWrd		=	pInSegCol->ppSeg[i]->cWord;
		ppWordMap	=	pInSegCol->ppSeg[i]->ppWord;
		pPrevAnch	=	NULL;
		iRunMaxStrk	=	-1;

		// we will not tolerate an empty segmentation
		if (!cWrd)
			goto exit;

		// init the temp anchor
		memset (&AnchTemp, 0, sizeof (AnchTemp));

		for (iWrd = 0; iWrd < cWrd; iWrd++)
		{
			// we will not tolerate an empty word
			if (ppWordMap[iWrd]->cStroke < 1)
			{
				goto exit;
			}

			// compute the anchor bits for the words so far
			cOldByte	=	AnchTemp.cByte;

			// init the anchor corresponding to the 
			if (GetMinMaxStrokeID(ppWordMap[iWrd], NULL, &iWordMapMaxStrk) < 1)
			{
				goto exit;
			}

			iRunMaxStrk	=	max (iWordMapMaxStrk, iRunMaxStrk);

			// determine the # of bytes needed to code the bits and allocate/init them
			AnchTemp.cByte		=	(iRunMaxStrk + 1) / 8;
			if ((iRunMaxStrk + 1) % 8)
				AnchTemp.cByte++;

			AnchTemp.pBits		=	(BYTE *)ExternRealloc (AnchTemp.pBits, 
				AnchTemp.cByte * sizeof (BYTE));
			if (!AnchTemp.pBits)
				goto exit;

			if (cOldByte != AnchTemp.cByte)
			{
				memset (AnchTemp.pBits + cOldByte, 
					0, (AnchTemp.cByte - cOldByte) * sizeof (BYTE));
			}

			// now fill the appropriate bits
			UpdateAnchorBits (NULL, &AnchTemp, iMinStrk, ppWordMap[iWrd]);
	
			// do we align ?
			pCurAnch	=	pAnch + (iRunMaxStrk - iMinStrk);

			// no anchor here or the anchor misaligned before
			if (pCurAnch->cByte == 0 || !pCurAnch->pBits || pCurAnch->cAlign < i)
				continue;

			// there is an anchor here check alignment
			if	(	pCurAnch->cByte == AnchTemp.cByte &&
					!memcmp (pCurAnch->pBits, AnchTemp.pBits, AnchTemp.cByte)
				)
			{
				//ASSERT (pCurAnch->cAlign == i);

				pCurAnch->cAlign	=	i + 1;
			}
		}	

		// now free the temp anchor
		if (AnchTemp.pBits)
		{
			ExternFree (AnchTemp.pBits);
			AnchTemp.pBits = NULL;
		}
	}

	// as a sanity check the last anchor has to exist and alignd
	if (pAnch[cAnch - 1].cAlign != pInSegCol->cSeg)
		goto exit;

	// create the SegCols resulting from alignment
	
	// init the starting word for each segmentation
	pLastWord	=	(int *) ExternAlloc (pInSegCol->cSeg * sizeof (int));
	if (!pLastWord)
		goto exit;

	for (i = 0; i < pInSegCol->cSeg; i++)
		pLastWord[i]	=	-1;

	pPrevAnch	=	NULL;
	cStrk		=	0;
	iRunMaxStrk	=	-1;

	for (i = 0; i < cAnch; i++)
	{
		if	(pAnch[i].cAlign != pInSegCol->cSeg)
			continue;

		// strokes
		if (pPrevAnch)
		{
			cStrk	=	pAnch[i].cStrk - pPrevAnch->cStrk;
		}
		else
		{
			cStrk	=	pAnch[i].cStrk;
		}

		// save current anchor
		pPrevAnch	=	pAnch + i;

		// add a new seg set to the output line segmentation
		pOutSegCol	=	AddNewSegCol (pOutLineSegm);
		if (!pOutSegCol)
			goto exit;

		// for each segmentation find the range of words starting
		// from the last word found in the prev anchor to the word completes
		// the number of strokes
		for (j = 0; j < pInSegCol->cSeg; j++)
		{
			int				iLastWord, cSegStrk = 0;
			SEGMENTATION	NewSeg;
			
			pSeg		=	pInSegCol->ppSeg[j];
			
			// sanity check
			//ASSERT (pLastWord[j] < pSeg->cWord);
			if (pLastWord[j] >= pSeg->cWord)
				goto exit;

			ppWordMap		=	pSeg->ppWord + pLastWord[j] + 1;
			iLastWord		=	pLastWord[j] + 1;
			cSegStrk		=	(*ppWordMap)->cStroke;
			
			while (iLastWord < pSeg->cWord && cSegStrk < cStrk) 
			{
				ppWordMap++;
				iLastWord++;

				cSegStrk		+=	(*ppWordMap)->cStroke;
			}

			// weird because alignment should at happen at the last word in the worst case
			if (cSegStrk != cStrk || iLastWord == pSeg->cWord)
			{
				//ASSERT (0);
				break;
			}

			// add these words to a new segmentation
			memset (&NewSeg, 0, sizeof (NewSeg));

			// create a feature struct
			NewSeg.pFeat		=	(SEG_FEAT *) ExternAlloc (sizeof (*NewSeg.pFeat));
			if (!NewSeg.pFeat)
				goto exit;

			// init the features 
			memset (NewSeg.pFeat, 0, sizeof (*NewSeg.pFeat));

			NewSeg.pFeat->bBearTop1		=	pSeg->pFeat->bBearTop1;
			NewSeg.pFeat->bInfernoTop1	=	pSeg->pFeat->bInfernoTop1;

			// create a segmentation with this range of words
			if (!AppendSegmentation (pSeg, pLastWord[j] + 1, iLastWord, &NewSeg))
				goto exit;

			// now add this segmentation to the range if it is new
			if (!AddNewSegmentation (pOutLineSegm, pOutSegCol, &NewSeg, TRUE))
				goto exit;

			FreeSegmentation (&NewSeg);

			pLastWord[j]	=	iLastWord;
		}
	}

	bRet	=	TRUE;

exit:
	if (pAnch)
	{
		int	iAnch;

		for (iAnch = 0; iAnch < cAnch; iAnch++)
		{
			if (pAnch[iAnch].pBits)
				ExternFree (pAnch[iAnch].pBits);
		}

		ExternFree (pAnch);
	}

	if (pLastWord)
		ExternFree (pLastWord);

	if (AnchTemp.pBits)
		ExternFree (AnchTemp.pBits);

	if (!bRet)
	{
		if (pOutLineSegm)
			FreeLineSegm (pOutLineSegm);

		ExternFree (pOutLineSegm);

		return NULL;
	}

	return pOutLineSegm;
}

// sorts segmentations in a SegCol
BOOL SortSegmentations (SEG_COLLECTION *pSegCol, BOOL bSortOnScore)
{
	int				iSeg, i, j, iWord;
	SEGMENTATION	*pSeg;
	BOOL			bSwap;

	// only one segmentation or less
	if (pSegCol->cSeg < 2)
		return TRUE;

	// compute a sort criteria for each segmentation if not sorting on score
	if (!bSortOnScore)
	{
		for (iSeg = 0; iSeg < pSegCol->cSeg; iSeg++)
		{
			// make sure we have a seg_feat
			pSeg	=	pSegCol->ppSeg[iSeg];

			// sould have a seg_feat by now
			if (!pSeg->pFeat)
				return FALSE;
			
			pSeg->pFeat->iSort1		=	pSeg->cWord;
			pSeg->pFeat->iSort2		=	0;

			// read the word and interword features
			for (iWord = 0; iWord < pSeg->cWord; iWord++)
			{
				// should have a word feat by now
				if (!pSeg->ppWord[iWord]->pFeat)
					return FALSE;

				pSeg->pFeat->iSort2	+=	pSeg->ppWord[iWord]->pFeat->iInfernoScore;
			}

			pSeg->pFeat->iSort2	/=	pSeg->cWord;
		}
	}
	
	for (i = 0; i < (pSegCol->cSeg - 1); i++)
	{
		for (j = i + 1; j < pSegCol->cSeg; j++)
		{
			bSwap	=	FALSE;

			// in case we are sorting based on score, sort order is score descending
			if (bSortOnScore)
			{
				if (pSegCol->ppSeg[i]->iScore < pSegCol->ppSeg[j]->iScore)
				{
					bSwap	=	TRUE;
				}
			}
			// we are using the isort values, sorting order is isort1 ascending
			// and isort2 ascending
			else
			{
				if	(	pSegCol->ppSeg[i]->pFeat->iSort1 > pSegCol->ppSeg[j]->pFeat->iSort1 ||
						(	
							(	pSegCol->ppSeg[i]->pFeat->iSort1 == 
								pSegCol->ppSeg[j]->pFeat->iSort1
							) &&
							(	pSegCol->ppSeg[i]->pFeat->iSort2 > 
								pSegCol->ppSeg[j]->pFeat->iSort2
							)
						)
					)
				{
					bSwap	=	TRUE;
				}
			}

			// swap if needed
			if (bSwap)
			{
				pSeg				=	pSegCol->ppSeg[i];
				pSegCol->ppSeg[i]	=	pSegCol->ppSeg[j];
				pSegCol->ppSeg[j]	=	pSeg;
			}
		}
	}

	return TRUE;
}

// scales a value
int	Scale (int iVal, int iMin, int iMax)
{
	__int64	iNewVal;

	iNewVal	=	min (max (iVal, iMin), iMax);
	iNewVal	=	(iNewVal - iMin);	

	iNewVal	=	((__int64)iNewVal * 0xFFFF) / (iMax - iMin);

	return ((int)iNewVal);
}

int GetMultiSegNetIndex (SEG_COLLECTION *pSegCol, int *piNetInput, int *piNetMem)
{
	int		i, j, cSeg, iNetIndex;

#ifdef TRAINTIME_AVALANCHE
	// during training, we want to save the segcol segmnetation and word count attributes
	// so that we can build the special tuple list for a new language
	//SaveSegCol (pSegCol);
#endif

	// init out params
	(*piNetMem)		=	0;
	(*piNetInput)	=	0;

	// is it one of the sepcial tuples
	for (i = 0; i < SPEC_SEG_TUPLE; i++)
	{
		if (min (MAX_SEG, pSegCol->cSeg) != g_aSpecialTuples[i].cSeg)
		{
			continue;
		}

		for (j = 0; j < g_aSpecialTuples[i].cSeg && j < MAX_SEG; j++)
		{
			if (pSegCol->ppSeg[j]->cWord != g_aSpecialTuples[i].aWrd[j])
			{
				break;
			}
		}
	
		// found it
		if (j == g_aSpecialTuples[i].cSeg)
		{
			(*piNetInput)	=	s_msegNets[i]->runNet.cUnitsPerLayer[0];
			(*piNetMem)		=	s_cmSegNetMem[i];

			return i;
		}
	}

	// so this is a generic tuple

	// # of segmentations will be truncated to the max, and it should 
	// not be less than 2
	cSeg	=	min (pSegCol->cSeg, MAX_SEG);
	if (cSeg < 2)
	{
		return -1;
	}

	iNetIndex		=	SPEC_SEG_TUPLE + cSeg - 2;
	(*piNetMem)		=	s_cmSegNetMem[iNetIndex];
	(*piNetInput)	=	s_msegNets[iNetIndex]->runNet.cUnitsPerLayer[0];

	return iNetIndex;
}


// finds the space output before the wordmap
int	GetSpaceOutputBeforeWordMap (XRC *pxrc, WORD_MAP *pMap)
{
	REAL		*pCol	=	pxrc->NeuralOutput;
	int			iStrk, iAct;
	NFEATURE	*pFeat;

	if (pMap->cStroke <= 0)
		return -1;

	iStrk	=	pMap->piStrokeIndex[0];
	pFeat	=	pxrc->nfeatureset->head;

	if (pFeat->iStroke	==	iStrk || pFeat->next->iSecondaryStroke == iStrk)
		return -1;

	while (pFeat->next && pFeat->next->iStroke != iStrk && pFeat->next->iSecondaryStroke != iStrk)
	{
		pFeat	=	pFeat->next;
		pCol	+=	gcOutputNode;
	}

	if (!pFeat->next)
		return -1;

	iAct	=	pCol[BeginChar2Out(' ')];

	return iAct;
}

// featurizes a mutli-segmentation 
RREAL *FeaturizeSegCol	(	XRC				*pxrc, 
							BEARXRC			*pxrcBear,
							SEG_COLLECTION	*pSegCol, 
							int				*pcFeat, 
							int				*piNetIndex
						)
{
	int				cFeat, iSeg, iWord, 
					cMaxSeg, cMaxWord, 
					iPrint, iNetIndex,
					iCost, iSpc, iDist,
					cNetMemSize, cNetInput;

	SEGMENTATION	*pSeg;
	WORD_MAP		**ppWordMap, *pWordMap, *pPrevWordMap;
	
	unsigned char	*pszInf,
					*pszCal,
					*pszPrevInf,
					*pszPrevCal;

	XRC				*pxrcInferno;

	int				yDev;

	RREAL			*pFeat	=	NULL;

#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
	TCHAR aDebugString[256];
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif


	// init out params
	(*pcFeat)		=	0;
	(*piNetIndex)	=	-1;

	// make sure we have an nfeatureset
	if (!pxrc->nfeatureset)
	{
		return NULL;
	}

	// get ydev from the xrc
	yDev			=	pxrc->nfeatureset->iyDev;

	// create the dispute structure
	(*pcFeat)		=	
	cFeat			=	0;

	iPrint	=	pxrc->nfeatureset->iPrint;

	for (iSeg = 0; iSeg < pSegCol->cSeg; iSeg++)
	{
		pSeg	=	pSegCol->ppSeg[iSeg];
		if (pSeg->cWord <= 0)
		{
			return NULL;
		}

		// point to the words
		ppWordMap	=	pSeg->ppWord;

		// make sure we have alt lists for every word
		for (iWord = 0; iWord < pSeg->cWord; iWord++)
		{
			pWordMap	=	ppWordMap[iWord];

			if (!pWordMap->cStroke)
			{
				return NULL;
			}

			// already computed
			if	(pWordMap->pFeat)
			{
				continue;
			}

			pxrcInferno	=	NULL;

			// run inferno if have not run it before
			if	(	!pWordMap->pFeat ||
					!pWordMap->pInfernoAltList || 
					pWordMap->pInfernoAltList->cAlt <= 0
				)
			{				
				pxrcInferno	=	WordMapRunInferno (pxrc, yDev, pWordMap);
			}

			// run Bear if have not ran it before
			if	(	!pWordMap->pFeat ||
					!pWordMap->pBearAltList || 
					pWordMap->pBearAltList->cAlt <= 0
				)
			{
				WordMapRunBear (pxrc, pWordMap);
			}

			if (pxrcInferno)
			{
				PALTERNATES			aAlt;
				XRCRESULT			xrRes[2];
				ALTINFO				aAltInfo;

				// WARNING: Fragile code follows. Here we try optimize the 
				// calls to get GEo costs, by constructing an ALt list one for
				// with 2 alternates. The first "alternate" is the inferno
				// word and the second is bear
				aAlt.cAlt =  0;
				aAlt.apAlt[aAlt.cAlt] = xrRes + aAlt.cAlt;
				if (pWordMap->pInfernoAltList && pWordMap->pInfernoAltList->cAlt > 0)
				{
					aAlt.apAlt[aAlt.cAlt++]->szWord = pWordMap->pInfernoAltList->pAlt[0].pszStr;
					pWordMap->pFeat->iInfRelUni = UniReliable (pWordMap->pInfernoAltList->pAlt[0].pszStr, TRUE);
					pWordMap->pFeat->iInfRelBi = BiReliable (pWordMap->pInfernoAltList->pAlt[0].pszStr, TRUE);
				}
				else
				{
					aAlt.apAlt[aAlt.cAlt++]->szWord = NULL;
					pWordMap->pFeat->iInfRelUni = INT_MAX;
					pWordMap->pFeat->iInfRelBi = INT_MAX;
				}

				aAlt.apAlt[aAlt.cAlt] = xrRes + aAlt.cAlt;
				if (pWordMap->pBearAltList && pWordMap->pBearAltList->cAlt > 0)
				{
					 //pWordMap->pFeat->iBearCharCost= GetCharCost(pxrcInferno, pWordMap->pBearAltList->pAlt[0].pszStr);
					aAlt.apAlt[aAlt.cAlt++]->szWord = pWordMap->pBearAltList->pAlt[0].pszStr;
					pWordMap->pFeat->iBearRelUni = UniReliable (pWordMap->pBearAltList->pAlt[0].pszStr, FALSE);
					pWordMap->pFeat->iBearRelBi = BiReliable (pWordMap->pBearAltList->pAlt[0].pszStr, FALSE);				}
				else
				{
					aAlt.apAlt[aAlt.cAlt++]->szWord = NULL;
					pWordMap->pFeat->iBearRelUni	= INT_MAX;
					pWordMap->pFeat->iBearRelBi		= INT_MAX;

				}

				aAltInfo.NumCand = aAlt.cAlt;
				GetWordGeoCostsFromAlt (pxrcInferno, &aAlt, &aAltInfo);

				pWordMap->pFeat->iInfCharCost	= aAltInfo.aCandInfo[0].InfCharCost;
				pWordMap->pFeat->iInfAspect		= aAltInfo.aCandInfo[0].Aspect;
				pWordMap->pFeat->iInfHeight		= aAltInfo.aCandInfo[0].Height;
				pWordMap->pFeat->iInfMidLine	= aAltInfo.aCandInfo[0].BaseLine;

				pWordMap->pFeat->iBearCharCost	= aAltInfo.aCandInfo[1].InfCharCost;
				pWordMap->pFeat->iBearAspect	= aAltInfo.aCandInfo[1].Aspect;
				pWordMap->pFeat->iBearHeight	= aAltInfo.aCandInfo[1].Height;
				pWordMap->pFeat->iBearMidLine	= aAltInfo.aCandInfo[1].BaseLine;

				DestroyHRC ((HRC)pxrcInferno);
			}
			else
			{
				pWordMap->pFeat->iInfCharCost	= pWordMap->pFeat->iBearCharCost	=	INT_MIN;
				pWordMap->pFeat->iInfAspect		= pWordMap->pFeat->iBearAspect		=	INT_MAX;
				pWordMap->pFeat->iInfHeight		= pWordMap->pFeat->iBearHeight		=	INT_MAX;
				pWordMap->pFeat->iInfMidLine	= pWordMap->pFeat->iBearMidLine		=	INT_MAX;

				pWordMap->pFeat->iInfRelUni		= INT_MAX;
				pWordMap->pFeat->iInfRelBi		= INT_MAX;			
				pWordMap->pFeat->iBearRelUni	= INT_MAX;
				pWordMap->pFeat->iBearRelBi		= INT_MAX;
			}

			// the pFeat should have been allocated by now
			if	(!pWordMap->pFeat)
			{
				return NULL;
			}

			// compute the word features
			if (pWordMap->pInfernoAltList && pWordMap->pInfernoAltList->cAlt > 0)
			{
				iCost	=	pWordMap->pInfernoAltList->pAlt[0].iCost;
				pszInf	=	pWordMap->pInfernoAltList->pAlt[0].pszStr;
			}
			else
			{
				iCost	=	INT_MAX;
				pszInf	=	NULL;
			}

			pWordMap->pFeat->iInfernoScore	=	iCost;

			// inferno's unigram & supported
			if (pszInf)
			{
				pWordMap->pFeat->iInfernoUnigram	=	UnigramCost (pszInf);
				pWordMap->pFeat->bInfTop1Supported	=	
					(BYTE)IsStringSupportedHRC ((HRC)pxrc, pszInf);
			}
			else
			{
				// this should return the worst unigram
				pWordMap->pFeat->iInfernoUnigram	=	INT_MAX;
				pWordMap->pFeat->bInfTop1Supported	=	INT_MIN;
			}
			
			// run bear if necessary
			if (pWordMap->pBearAltList && pWordMap->pBearAltList->cAlt > 0)
			{
				iCost	=	pWordMap->pBearAltList->pAlt[0].iCost;
				pszCal	=	pWordMap->pBearAltList->pAlt[0].pszStr;
			}
			else
			{
				iCost	=	INT_MIN;
				pszCal	=	NULL;
			}

			pWordMap->pFeat->iBearScore	=	iCost;

			if (pszCal)
			{
				pWordMap->pFeat->iBearUnigram		=	UnigramCost (pszCal);
				pWordMap->pFeat->bBearTop1Supported	=	
					(BYTE)IsStringSupportedHRC ((HRC)pxrc, pszCal);
			}
			else
			{
				pWordMap->pFeat->iBearUnigram		=	INT_MAX;
				pWordMap->pFeat->bBearTop1Supported	=	INT_MIN;
			}

			if (pszInf && pszCal)
			{
				pWordMap->pFeat->bIdentical	=	
					(stricmp ((const char *)pszInf, (const char *)pszCal)) ? 0 : 1;
			}
			else
			{
				pWordMap->pFeat->bIdentical	=	INT_MIN;
			}
		}
	}

	// sort the segmentations
	if (!SortSegmentations (pSegCol, FALSE))
	{
		return NULL;
	}

	iNetIndex		=	GetMultiSegNetIndex (pSegCol, &cNetInput, &cNetMemSize);
	if (iNetIndex < 0 || cNetMemSize <= 0) 
	{
		return NULL;
	}

	// allocate as much memory as needed
	pFeat			=	(RREAL *) ExternAlloc (cNetMemSize * sizeof (*pFeat));
	if (!pFeat)
	{
		return NULL;
	}

	// now compute the features
	cFeat			=	0;

	ASSERT (cFeat < cNetInput);
	pFeat[cFeat++]	=	iPrint;

	// this is the max # of segments we are going to look at
	cMaxSeg			=	min (MAX_SEG, pSegCol->cSeg);

	for (iSeg = 0; iSeg < cMaxSeg; iSeg++)
	{
		if (iSeg >= pSegCol->cSeg)
		{
			ASSERT (cFeat < cNetInput);
			pFeat[cFeat++]	=	INT_MIN;

			ASSERT (cFeat < cNetInput);
			pFeat[cFeat++]	=	INT_MIN;
		}
		else
		{
			ASSERT (cFeat < cNetInput);
			pFeat[cFeat++]	=	pSegCol->ppSeg[iSeg]->pFeat->bInfernoTop1 ? 1 : 0;

			ASSERT (cFeat < cNetInput);
			pFeat[cFeat++]	=	pSegCol->ppSeg[iSeg]->pFeat->bBearTop1 ? 1 : 0;
		}

		// if this is a special tuple, we only look at the
		// available # of words
		if (iNetIndex < SPEC_SEG_TUPLE)
		{
			cMaxWord	=	min (MAX_SEG_WORD, pSegCol->ppSeg[iSeg]->cWord);
		}
		// otherwise, we'll look at MAX_SEG_WORD to get a fixed # of inputs
		else
		{
			cMaxWord	=	MAX_SEG_WORD;
		}

		for (iWord = 0; iWord < cMaxWord; iWord++)
		{
			// pad the rest of the words
			if (iSeg >= pSegCol->cSeg || iWord >= pSegCol->ppSeg[iSeg]->cWord)
			{				
				// disabled
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	0;

				// INVALID # of inferno segments
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				// inferno INVALID score
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				// bear INVALID  score
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				// inferno INVALID unigram
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				// bear INVALID  unigram
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				// inferno INVALID  issupported
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				// bear INVALID issupported
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				// cost and geo
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				// reliability
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MAX;

				// INVALID infenro and bear's same top 1
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	INT_MIN;

				if (iWord > 0)
				{
					// inferno spc out
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					// bear spc out
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;
					
					// inferno's last char
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					// bear's last char
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					// inferno's first char
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					// bear's 1st char
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;

					// physical dist
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	INT_MIN;
				}
			}
			else
			{
				pWordMap	=	pSegCol->ppSeg[iSeg]->ppWord[iWord];

				// point to Inf Top1
				if (pWordMap->pInfernoAltList && pWordMap->pInfernoAltList->cAlt > 0)
				{
					pszInf	=	pWordMap->pInfernoAltList->pAlt[0].pszStr;
				}
				else
				{
					pszInf	=	NULL;
				}
				
				// point to Bear Top1
				if (pWordMap->pBearAltList && pWordMap->pBearAltList->cAlt > 0)
				{
					pszCal	=	pWordMap->pBearAltList->pAlt[0].pszStr;
				}
				else
				{
					pszCal	=	NULL;
				}

				// is the wordmap real or padded
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	1;

				// # of segments
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->cSeg;

				// reco scores
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfernoScore;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearScore;

				// unigrams
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfernoUnigram;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearUnigram;

				// supported by LM
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->bInfTop1Supported ? 1 : 0;					

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->bBearTop1Supported ? 1 : 0;

				// cost & geo
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfCharCost;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfAspect;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfHeight;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfMidLine;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearCharCost;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearAspect;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearHeight;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearMidLine;

				// reliability
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfRelUni;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iInfRelBi;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearRelUni;

				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->iBearRelBi;

				// are TOP1s the same 
				ASSERT (cFeat < cNetInput);
				pFeat[cFeat++]	=	pWordMap->pFeat->bIdentical ? 1 : 0;

				// the gap features
				if (iWord > 0)
				{
					pPrevWordMap	=	pSegCol->ppSeg[iSeg]->ppWord[iWord - 1];

					// point to Prev Inf Top1
					if (pPrevWordMap->pInfernoAltList && pPrevWordMap->pInfernoAltList->cAlt > 0)
					{
						pszPrevInf	=	pPrevWordMap->pInfernoAltList->pAlt[0].pszStr;
					}
					else
					{
						pszPrevInf	=	NULL;
					}
					
					// point to Prev Bear Top1
					if (pPrevWordMap->pBearAltList && pPrevWordMap->pBearAltList->cAlt > 0)
					{
						pszPrevCal	=	pPrevWordMap->pBearAltList->pAlt[0].pszStr;
					}
					else
					{
						pszPrevCal	=	NULL;
					}
		
					// inferno's space output
					iSpc	=	GetSpaceOutputBeforeWordMap (pxrc, pWordMap);
					if (iSpc < 0)
					{
						iSpc	=	INT_MIN;
					}

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	iSpc;

					// bear's space output
					iSpc	=	GetNewWordMapBearSpaceOut (pxrcBear, pxrcBear->pGlyph, 
						pPrevWordMap, pWordMap);

					if (iSpc < 0)
					{
						iSpc	=	INT_MIN;
					}

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	iSpc;
					
					// boundry character features
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevInf || !LastCharPunc (pszPrevInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevInf || !LastCharNum (pszPrevInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevInf || !LastCharLower (pszPrevInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevInf || !LastCharUpper (pszPrevInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevCal || !LastCharPunc (pszPrevCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevCal || !LastCharNum (pszPrevCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevCal || !LastCharLower (pszPrevCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszPrevCal || !LastCharUpper (pszPrevCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszInf || !FirstCharPunc (pszInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszInf || !FirstCharNum (pszInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszInf || !FirstCharLower (pszInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszInf || !FirstCharUpper (pszInf)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszCal || !FirstCharPunc (pszCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszCal || !FirstCharNum (pszCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszCal || !FirstCharLower (pszCal)) ? 0 : 1;

					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++] = (!pszCal || !FirstCharUpper (pszCal)) ? 0 : 1;

					// scaled inter-distance
					if (	IsRectEmpty (&pWordMap->pFeat->rect) || 
							IsRectEmpty (&pPrevWordMap->pFeat->rect)
						)
					{
						iDist = INT_MIN;
					}
					else
					{
						iDist = (1000 * (pWordMap->pFeat->rect.left - pPrevWordMap->pFeat->rect.right) / yDev);
					}
				
					ASSERT (cFeat < cNetInput);
					pFeat[cFeat++]	=	iDist;
				}
			}
		}
	}

	// set output parameters
	(*pcFeat)		=	cFeat;
	(*piNetIndex)	=	iNetIndex;

#ifdef TRAINTIME_AVALANCHE
	SaveMultipleSegmentation (pxrc, pxrcBear, pSegCol, yDev, iPrint, 
		iNetIndex, SPEC_SEG_TUPLE);
#endif

#ifdef HWX_TIMING
	iEndTime = GetTickCount();

	_stprintf(aDebugString, TEXT("Multi Segm Feat %d\n"), iEndTime - iStartTime); 
	OutputDebugString(aDebugString);
	setMadTiming(iEndTime - iStartTime, MM_MULT_SEG_FEAT);
#endif

	return pFeat;
}


// Applies a specific segmentation 
int ApplySegmentation	(	XRC					*pxrc, 
							BEARXRC				*pxrcBear,
							LINE_SEGMENTATION	*pLineSeg, 
							SEGMENTATION		*pSeg, 
							WORDINFO			*pWrd
						)
{
	int	i, cWrd	= 0;
	
	for (i = 0; i < pSeg->cWord; i++)
	{
		if (WordMapRecognize (pxrc, pxrcBear, pLineSeg, pSeg->ppWord[i], &pWrd[cWrd].alt))
		{
			pWrd[cWrd].cStrokes			=	pSeg->ppWord[i]->cStroke;			
			pWrd[cWrd].piStrokeIndex	=	pSeg->ppWord[i]->piStrokeIndex;

			cWrd++;
		}
	}

	return cWrd;
}

int FindAgreeTop1Seg (SEG_COLLECTION *pSegCol)
{
	int	i;

	for (i = 0; i < pSegCol->cSeg; i++)
	{
		ASSERT (pSegCol->ppSeg[i]->pFeat);

		if (!pSegCol->ppSeg[i]->pFeat)
			continue;

		if (pSegCol->ppSeg[i]->pFeat->bInfernoTop1 && pSegCol->ppSeg[i]->pFeat->bBearTop1)
			return i;
	}

	return -1;
}

LINE_SEGMENTATION * PrepareBearSegmentation (LINE_SEGMENTATION *pBearLineSegm, GLYPH *pGlyph)
{
	BOOL				bRet		=	FALSE;
	LINE_SEGMENTATION	*pResults	=	NULL;
	int					*piCurSeg	=	NULL;
	int					i,
						j,
						cStrk,
						cSegStrk;
	SEGMENTATION		*pSeg;
	SEG_COLLECTION		*pSegCol;
	WORD_MAP			*pWordMap;

	// create a new line segmentation
	pResults	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pResults));
	if (!pResults)
		goto exit;

	memset (pResults, 0, sizeof (*pResults));

	// prepare needed buffers
	piCurSeg	=	(int *) ExternAlloc (pBearLineSegm->cSegCol * sizeof (*piCurSeg));
	if (!piCurSeg)
		goto exit;

	memset (piCurSeg, 0, pBearLineSegm->cSegCol * sizeof (*piCurSeg));

	if (!SegColCrossMultiply (pBearLineSegm, pResults, 0, piCurSeg))
		goto exit;

	// check that we have only one SegCol
	if (pResults->cSegCol != 1)
		goto exit;

	pSegCol	=	pResults->ppSegCol[0];

	// count # of strokes
	cStrk	=	CframeGLYPH (pGlyph);

	// adjust the strk IDs relative to the glyph 
	for (i = 0; i < pResults->cWord; i++)
	{
		pWordMap	=	pResults->ppWord[i];

		// adjust the stroke IDs
		if (!AdjustStrokeID (pWordMap, pGlyph))
			goto exit;
	}

	// remove bad segmentations
	for (i = 0; i < pSegCol->cSeg; i++)
	{
		cSegStrk	=	0;
		pSeg		=	pSegCol->ppSeg[i];

		if (!pSeg)
			goto exit;

		// go thru all words
		for (j = 0; j < pSeg->cWord; j++)
		{
			pWordMap	=	pSeg->ppWord[j];

			cSegStrk	+=	pWordMap->cStroke;
		}

		// exclude segmentations that do not consume all strokes
		if (cSegStrk != cStrk)
		{
			FreeSegmentation (pSeg);
			ExternFree (pSeg);

			// TBD: we can just move the last segmentation instead
			if (i < (pSegCol->cSeg - 1) && pSegCol->cSeg > 1)
			{
				memcpy (pSegCol->ppSeg + i, pSegCol->ppSeg + i + 1,
					(pSegCol->cSeg - i - 1) * sizeof (SEGMENTATION *));
			}

			i--;
			pSegCol->cSeg--;
		}
	}

	bRet	=	TRUE;

exit:
	if (piCurSeg)
		ExternFree (piCurSeg);

	if (!bRet)
	{
		if (pResults)
			FreeLineSegm (pResults);

		ExternFree (pResults);

		return NULL;
	}

	return pResults;
}


// initializes all word confidence values to unset
void InitWordConfidenceValues  (LINE_SEGMENTATION *pResults)
{
	int	iWord;

	for (iWord = 0; iWord < pResults->cWord; iWord++)
	{
		pResults->ppWord[iWord]->iConfidence	=	RECOCONF_NOTSET;
	}
}

// finds and runs the required multi-segmentation net
int NNMultiSeg (int iNetIndex, int cFeat, RREAL *pFeat, int cSeg, int *pOutputScore)
{
	int		i, iBest	=	0;
	RREAL	*pOut;
	int		iWin,cOut;

	// is the Tupl (net) index a valid one
	if (iNetIndex < 0 || iNetIndex >= NUM_MSEG_NET)
	{
		return -1;
	}

	// validate the static net info
	ASSERT(s_cmSegNetMem[iNetIndex]> 0);
	ASSERT(s_msegNets[iNetIndex] != NULL);

	// validate # of features againts the # of inputs of the net
	if (cFeat != s_msegNets[iNetIndex]->runNet.cUnitsPerLayer[0])
	{
		return -1;
	}

	// validate that the # of segmentations does not exceed the outputs of the net
	if (cSeg > s_msegNets[iNetIndex]->runNet.cUnitsPerLayer[2])
	{
		return -1;
	}
				
	// feedforward
	pOut = runLocalConnectNet(s_msegNets[iNetIndex], pFeat, &iWin, &cOut);	

	// copy the output
	for (i = 0; i < cSeg; i++)
	{
		pOutputScore[i]	= pOut[i];
	}

	// return the winner
	return (iWin);
}

// resolves segmentation disputes by considering multiple segmentation from Inferno & Bear
WORDINFO *ResolveMultiWordBreaks (	XRC					*pxrc, 
									BEARXRC				*pxrcBear, 
									int					*pcWord,
									LINE_SEGMENTATION	**ppResults
								)
{
	BOOL				bRet			=	FALSE;
	int					cSeg			=	0, 
						*pSegIdx		=	NULL;

	p_rec_inst_type		pri				=	(p_rec_inst_type)pxrcBear->context;
	rc_type _PTR		prc				=	&pri->rc;
	LINE_SEGMENTATION	*pBearLineSegm	=	(LINE_SEGMENTATION *)prc->hSeg,
						*pInLineSegm	=	NULL,
						*pOutLineSegm	=	NULL;

	WORDINFO			*pWordInfo		=	NULL;
	int					*pSegScore		=	NULL;
	
	RREAL				*pFeat			=	NULL;

	SEG_COLLECTION		*pSegCol;
	WORDINFO			*pWrd;
	int					i, j, cWrd, iSeg;
	SEGMENTATION		*pSeg;

	if (!prc || !pBearLineSegm)
	{
		goto exit;
	}

	// init the o/p parameter
	(*ppResults)	=	NULL;

	// Prepare Bear's line segmentation
	pInLineSegm		=	PrepareBearSegmentation (pBearLineSegm, pxrc->pGlyph);

	if (!pInLineSegm)
	{
		goto exit;
	}
	
	// we should have only 1 SegCol
	ASSERT (pInLineSegm->cSegCol == 1);
	
	// find all the unique inferno segmentations
	pSegIdx	=	FindInfernoSegmentations (pxrc, &cSeg);
	if (!pSegIdx)
	{
		goto exit;
	}

	// append infero's segmentations
	if (!AppendInfernoSegmentation (pInLineSegm, 
		pInLineSegm->ppSegCol[0], pxrc, cSeg, pSegIdx))
	{
		goto exit;
	}
	
/*
#ifdef TRAINTIME_AVALANCHE

	// make sure the correct segmentation is in the segmentation collection
	AddCorrectSegmentation (pInLineSegm, pInLineSegm->ppSegCol[0], pxrc->pGlyph);

#endif
*/
	// align segmentations to get the optimal setset line segmentation
	pOutLineSegm	=	AlignSegmentations (pxrc->pGlyph, pInLineSegm);
	if (!pOutLineSegm)
	{
		goto exit;
	}

	// May 2002 mrevow - Bail out if we fail OR too many segmentations
	// were found - The latter can cause an exponential blowup later
	for (i = 0 ; i < pOutLineSegm->cSegCol ; ++i)
	{
		if (NULL == pOutLineSegm->ppSegCol[i] || pOutLineSegm->ppSegCol[i]->cSeg > CSEG_MAX)
		{
			goto exit;
		}
	}

	// allocate segmentation score buffer
	pSegScore		=	(int *) ExternAlloc (MAX_SEG * sizeof (*pSegScore));
	if (!pSegScore)
	{
		goto exit;
	}

	// overalloc wordinfo
	pWordInfo	=	(WORDINFO *) ExternAlloc (pInLineSegm->cWord * sizeof (WORDINFO));
	if (!pWordInfo)
	{
		goto exit;
	}

	// init confidence values for all words
	InitWordConfidenceValues  (pOutLineSegm);

	pWrd				=	pWordInfo;
	(*pcWord)			=	0;

	// copy ydev value for the line in the outlinesegmentation
	pOutLineSegm->iyDev	=	pxrc->nfeatureset->iyDev;

	for (i = 0; i < pOutLineSegm->cSegCol; i++)
	{
		pSegCol	=	pOutLineSegm->ppSegCol[i];

/*
#ifdef TRAINTIME_AVALANCHE
		pSeg		=	NULL;
		
		// find out where the correct segmentation is
		iSeg			=	FindCorrectSegmentation (pSegCol);

		// could not add it, just pick any segmentation, it does not really matter
		if (iSeg < 0)
		{
			iSeg = 0;
		}

		for (j = 0; j < pSegCol->cSeg; j++)
		{
			if (j == iSeg)
				pSegCol->ppSeg[j]->iScore	=	BEST_SEGMENTATION_SCORE;
			else
				pSegCol->ppSeg[j]->iScore	=	WORST_SEGMENTATION_SCORE;
		}

		// if the 1st segmentation is not the winning one, swap them
		if (iSeg != 0)
		{
			SEGMENTATION	*pTempSeg;

			pTempSeg				=	pSegCol->ppSeg[0];
			pSegCol->ppSeg[0]		=	pSegCol->ppSeg[iSeg];
			pSegCol->ppSeg[iSeg]	=	pTempSeg;
		}

		// save the winning segmentation
		pSeg	=	pSegCol->ppSeg[0];

		cWrd	=	ApplySegmentation (pxrc, pOutLineSegm, pSeg, pWrd);
		if (!cWrd)
			goto exit;

		pWrd		+=	cWrd;
		(*pcWord)	+=	cWrd;

		// too late but better late than never
		ASSERT ((*pcWord) <= pInLineSegm->cWord);

		continue;
#endif
		*/

		// do we have a dispute
		if (pSegCol->cSeg > 1)
		{
			
			// Do they agree on Top1
			iSeg	=	FindAgreeTop1Seg (pSegCol);

			// we found a segmentation that is top1 choice for both recognizers
			if (iSeg >= 0 && iSeg < pSegCol->cSeg)
			{
				// set the segmentation scores such that the agreed upon segmentation
				// score is highest and the score of all the other segmentations is worst
				// score
				for (j = 0; j < pSegCol->cSeg; j++)
				{
					if (j == iSeg)
						pSegCol->ppSeg[j]->iScore	=	BEST_SEGMENTATION_SCORE;
					else
						pSegCol->ppSeg[j]->iScore	=	WORST_SEGMENTATION_SCORE;
				}

				// if the 1st segmentation is not the winning one, swap them
				if (iSeg != 0)
				{
					SEGMENTATION	*pTempSeg;

					pTempSeg				=	pSegCol->ppSeg[0];
					pSegCol->ppSeg[0]		=	pSegCol->ppSeg[iSeg];
					pSegCol->ppSeg[iSeg]	=	pTempSeg;
				}

				// save the winning segmentation
				pSeg	=	pSegCol->ppSeg[0];
			}
			// no, then run our NN
			else
			{
				int		cFeat, iNetIndex;
				
				pFeat = FeaturizeSegCol (pxrc, pxrcBear, pSegCol, &cFeat, &iNetIndex);

				// did the featurization succeed
				if (!pFeat || cFeat <= 0 || iNetIndex < 0 || iNetIndex >= NUM_MSEG_NET)
				{
					goto exit;
				}

#ifdef TRAINTIME_AVALANCHE
				// find out where the correct segmentation is
				iSeg			=	FindCorrectSegmentation (pSegCol);

				// could not add it, just pick any segmentation, it does not really matter
				if (iSeg < 0)
				{
					iSeg = 0;
				}

				for (j = 0; j < pSegCol->cSeg && j < MAX_SEG; j++)
				{
					if (j == iSeg)
					{
						pSegScore[j]	=	BEST_SEGMENTATION_SCORE;
					}
					else
					{
						pSegScore[j]	=	WORST_SEGMENTATION_SCORE;
					}
				}

#else
				iSeg	=	NNMultiSeg (iNetIndex, 
					cFeat, pFeat, 
					min (MAX_SEG, pSegCol->cSeg), pSegScore);

				// we do not need the features free it now
				if (pFeat)
				{
					ExternFree (pFeat);
					pFeat	=	NULL;
				}
#endif

				if (iSeg < 0 || iSeg >= pSegCol->cSeg)
				{
					goto exit;
				}
				
				// assign the scores
				// note that pSegCol->cSeg might be > MAX_SEG
				// but we have allocated the pSegScore buffer only as big as MAX_SEG
				// So that's why we need 2 loops
				for (j = 0; j < pSegCol->cSeg && j < MAX_SEG; j++)
				{
					pSegCol->ppSeg[j]->iScore	=	pSegScore[j];
				}

				for (j = MAX_SEG; j < pSegCol->cSeg; j++)
				{
					pSegCol->ppSeg[j]->iScore	=	WORST_SEGMENTATION_SCORE;
				}

				// now sort based on the pseg score
				if (!SortSegmentations (pSegCol, TRUE))
				{
					goto exit;
				}

				// save the winning segmentation
				pSeg	=	pSegCol->ppSeg[0];
			}		
		}
		else
		{
			pSeg	=	pSegCol->ppSeg[0];
		}

		cWrd	=	ApplySegmentation (pxrc, pxrcBear, pOutLineSegm, pSeg, pWrd);
		if (!cWrd)
		{
			goto exit;
		}

		pWrd		+=	cWrd;
		(*pcWord)	+=	cWrd;

		// too late but better late than never
		ASSERT ((*pcWord) <= pInLineSegm->cWord);
	}

	bRet	=	TRUE;

exit:
	if (pSegScore)
		ExternFree (pSegScore);

	if (pInLineSegm)
		FreeLineSegm (pInLineSegm);

	ExternFree (pInLineSegm);

	if (pSegIdx)
		ExternFree (pSegIdx);

	if (!bRet)
	{
		if (pWordInfo)
			ExternFree (pWordInfo);

		if (pOutLineSegm)
			FreeLineSegm (pOutLineSegm);

		ExternFree (pOutLineSegm);

		(*pcWord)		=	0;
		(*ppResults)	=	NULL;

		return NULL;
	}
	else
	{
		(*ppResults)	=	pOutLineSegm;

		return pWordInfo;
	}
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\dllmain.c ===
#include "common.h"

#include "nfeature.h"
#include "engine.h"

#include "bear.h"
#include <tpgHandle.h>
#include <GeoFeats.h>

HINSTANCE g_hInstanceDll;

BOOL InitAvalanche	(HINSTANCE hDll);
BOOL DetachAvalanche();


// July 2001 - mrevow Add heap checking code when DBG is defined
#ifdef DBG
#include <crtdbg.h>
	extern void initMemMgr();
	extern void destroyMemMgr();
	//_CrtMemState g_HeapStateStart, g_HeapStateEnd, g_HeapStateDiff;
#endif

BOOL WINAPI DllMain(HANDLE hDll, DWORD dwReason, LPVOID lpReserved)
{
    if (dwReason == DLL_PROCESS_ATTACH)
    {
		g_hInstanceDll = hDll;

#ifdef DBG
		//initMemMgr();
//		_CrtMemCheckpoint(&g_HeapStateStart);
#endif
		if (FALSE == initTpgHandleManager())
		{
			return FALSE;
		}

		if (!InitBear (hDll))
			return FALSE;

		if (!InitAvalanche(hDll))
			return FALSE;
	
        return InitRecognition(hDll);

    }
    
    if (dwReason == DLL_PROCESS_DETACH)
    {
		DetachBear();
		DetachAvalanche();
        CloseRecognition();
		closeTpgHandleManager();
		unloadCharNets();

#ifdef DBG
		destroyMemMgr();
//		_CrtMemCheckpoint(&g_HeapStateEnd);
//
//		if (TRUE == _CrtMemDifference(&g_HeapStateDiff, &g_HeapStateStart, &g_HeapStateEnd))
//		{
//			_CrtMemDumpStatistics(&g_HeapStateDiff);
//		}
//		_CrtDumpMemoryLeaks();

#endif

	}

    return((int)TRUE);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\normal.h ===
// Normal.h
// James A. Pittman

#ifndef _NORMAL_
#define _NORMAL_

typedef struct tagDIST
{
	int mean;
	int stddev;
} DIST;

typedef int PROB;

// Converts a numerical value into a probability, given a particular
// normal distribution.  Returns the prob or log-prob.

extern int NormalProb(int x, int mean, int stddev);
extern int BestNormalProb();
extern int WorstNormalProb();

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\geofeats.c ===
/***********************************************************
*
* NAME: geoFeats.c
*
* DESCRIPTIONS
*  Get geometric features for a  word based on the character
* segmentation of inferno
*
* HISTORY
*  Introduced March 2002 (mrevow)
*
***********************************************************/
#include <stdlib.h>
#include <limits.h>
#include <common.h>
#include <nfeature.h>
#include <engine.h>
#include <nnet.h>
#include <charcost.h>
#include <charmap.h>
#include <probcost.h>
#include "avalanchep.h"
#include "avalanche.h"

#include <inferno.h>
#include <runNet.h>
#include <langmod.h>
#include <beam.h>
#include <singCharFeat.h>
#include <normal.h>
#include <resource.h>
#include "sparseMatrix.h"

#define ONE_D_DISJOINT(min1, max1, min2, max2) (((min2) > (max1)) || ((min1) > (max2)))
#define ONE_D_OVERLAP(min1, max1, min2, max2) (!ONE_D_DISJOINT(min1, max1, min2, max2))
#define RECT_OVERLAP(r1, r2) (ONE_D_OVERLAP((r1).left, (r1).right, (r2).left, (r2).right) && ONE_D_OVERLAP((r1).top, (r1).bottom, (r2).top, (r2).bottom))


extern int getTDNNCostforString(XRC *pxrc, unsigned char *pStr, int iBeginSeg, int iEndSeg, int *pSegmentation);

extern  const  unsigned char g_supportChar [];		// LAnguage dependant lookup table of supported characters
extern  const int			g_cSupportChar;			// Number of supported chars

extern const DIST AspectTab[];

static SPARSE_MATRIX	MidPointMat	= {0};
static SPARSE_MATRIX	HeightMat	= {0};

#define C_CHAR_NET	5

static LOCAL_NET	*s_charNets[C_CHAR_NET] = {NULL};	// Character nets
static int			s_cCharNetMem[C_CHAR_NET] = {0};
static int			s_cMaxNetMem			= 0;

static int GetCharCost(XRC *pXrc, unsigned char *pszWord);
static int OutputIdFromChar(unsigned char ch);
static int charCost_1(unsigned char ch, GLYPH *pGlyph, int iBeginSeg, int iEndSeg,  NFEATURESET *nfeatureset, GUIDE const *pGuide);

// Structure to speed up the calculation 
// Geo costs for a collection of 
typedef struct tagCharSegmentation
{
	int			iBeginSeg;			// Starting segment
	int			iEndSeg;			// Ending Segment
	int			iAlt;				// The alternate to which I belong
	UCHAR		ch;					// My character
} CHAR_SEGMENTATION ;


// Wrapper function for the generaic NormalProb function
//
static int InfNormalProb(int x, const DIST *pTab)
{
	int		iRet;

	if (pTab->stddev > 0)
	{
		iRet = NormalProb(x, pTab->mean, pTab->stddev);
	}
	else
	{
		iRet = WorstNormalProb();
	}

	return iRet;
}

/****************************************************************
*
* NAME: lookupMeanVar 
*
*
* DESCRIPTION:
*
*   Looks up the mean Variance in a sparse matrix given the indices
*
* RTETURNS
* TRUE / FALSE - should never fail
*
* HISTORY
*
*   Introduced April 2002 (mrevow)
*
***************************************************************/
BOOL lookupMeanVar(SPARSE_MATRIX * pSparseMat, UINT i, UINT j, DIST * pRetVal)
{
	SPARSE_TYPE2		*pVal;

	ASSERT(pSparseMat);
	

	pVal = lookupSparseMat2(pSparseMat, i, j);

	if (NULL == pVal)
	{
		// Not found - must be default;
		pRetVal->mean	= pSparseMat->iDefaultVal;
		pRetVal->stddev	= pSparseMat->iDefaultVal;
	}
	else
	{
		pRetVal->mean	= pVal->v1;
		pRetVal->stddev	= pVal->v2;
	}

	return TRUE;
}

/****************************************************************
*
* NAME: addCharGeoCost
*
*
* DESCRIPTION:
*
*   Add in 3 character by character Geometric costs . All geometric
*   costs are related to the bounding rectangle of the ink for each segmented
*   character. The costs are evaluated under a 1-D normal distribution model
*
* INPUTS
*	ch			1252 code page id of the current character
*	iBeginSeg	Start segment of the character
*	iEndSeg		Last segment of character
*	pFeat		Points to the first segment
*	chPrev		1252 code page id of the immediatly previous char (0 for first char)
*	pPrevRect	Bounding rectangle of the previous character (NULL for first character)
*	piAspect	OUT: Aspect ratio
*	piHeight	OUT	Height
*	piMidpoint  OUT Midpoint
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
static void addCharGeoCost(unsigned char ch, int iBeginSeg, int iEndSeg, NFEATURE *pFeat, unsigned char chPrev, RECT *pPrevRect, int *piAspect, int *piHeight, int *piMidpoint)
{
	int				iHeight, iWidth, iAspectRatio, cSeg;
	RECT			rect;
	DIST			tab;
	const DIST		*pTab;

	if (ch < 33)
	{
		return;
	}

	cSeg = iEndSeg - iBeginSeg;

	rect = pFeat->rect;

	for( ; pFeat && iBeginSeg <= iEndSeg ; ++iBeginSeg)
	{
		rect.bottom = max(rect.bottom, pFeat->rect.bottom);
		rect.top	= min(rect.top, pFeat->rect.top);
		rect.left = min(rect.left, pFeat->rect.left);
		rect.right = max(rect.right, pFeat->rect.right);
		pFeat = pFeat->next;
	}

	iHeight	= rect.bottom - rect.top + 1;
	iWidth	= rect.right - rect.left + 1;

	ASSERT(iHeight > 0 && iWidth > 0);
	iAspectRatio = iHeight * 1000 / iWidth;

	pTab = &AspectTab[ch - 33];
	*piAspect += InfNormalProb(iAspectRatio, pTab);

	if (chPrev > 0)
	{
		int		idx, iHeightPrev,c1, c2;
		int		iHeightRel, iMid;

		iHeightPrev = pPrevRect->bottom - pPrevRect->top + 1;
		ASSERT(iHeightPrev > 0);
		iHeightRel = (iHeight * 1000) / iHeightPrev;
		lookupMeanVar(&HeightMat, (UINT)chPrev, (UINT)ch, &tab);
		*piHeight += InfNormalProb(iHeightRel, &tab);

		iMid = (rect.bottom + rect.top) / 2;
		iMid = (iMid - pPrevRect->top) * 1000 / iHeightPrev;
		lookupMeanVar(&MidPointMat, (UINT)chPrev, (UINT)ch, &tab);
		*piMidpoint += InfNormalProb(iAspectRatio, &tab);
	}

	*pPrevRect = rect;
}
/****************************************************************
*
* NAME: GetGeoCosts
*
* DESCRIPTION:
*
* Get Geometric and char by char costs for a single word using bounding 
* rects of each character. Bounding rects are taken from
* best inferno letter segmentation.
*
* The geometric costs are Aspect ratio, Relative height and Midline 
* of 2 sequential chars
*
* INPUTS:
*	pXrc			Contains the ink and TDNN features set for word
*	pszWord			Word to evaluate
*	piAspect		OUT: Aspect ratio
*	piHeight		OUT: Height
*	piMidpoint		OUT: Midpoint
*	piInfCharCost	OUT: Charact by char word cost
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/

BOOL GetGeoCosts (XRC *pXrc, unsigned char *pszWord, int *piAspect, int *piHeight, int *piMidpoint, int *piInfCharCost)
{
	int				*pSegmentation;
	unsigned char	chPrev;
	int				iSeg, iCost, iBeginSeg, iEndSeg;
	RECT			rectPrev;
	NFEATURE		*pFeat;
	unsigned char	*psz, *psz1, *pszWordSave;
	
#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
	TCHAR aDebugString[256];
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif

	// init 
	*piAspect = *piHeight = *piMidpoint = WorstNormalProb();
	*piInfCharCost = 0;

	if (NULL == pXrc || NULL == pXrc->nfeatureset || pXrc->nfeatureset->cSegment <= 0)
	{
		return TRUE;
	}

	*piAspect = *piHeight = *piMidpoint = WorstNormalProb() * pXrc->nfeatureset->cSegment;

	if (NULL == pszWord)
	{
		return TRUE;
	}

	psz1 = psz = pszWordSave = (unsigned char *)Externstrdup(pszWord);
	if (NULL == psz)
	{
		return FALSE;
	}


	// Eliminate White Space
	while(*psz)
	{
		if (*psz != ' ')
		{
			*psz1 = *psz;
			++psz1;
		}
		++psz;
	}

	psz = pszWordSave;


	pSegmentation = (int *)ExternAlloc(sizeof(*pSegmentation) * (pXrc->nfeatureset->cSegment + 1));

	if (!pSegmentation)
	{
		return FALSE;
	}
	memset(pSegmentation, 0, sizeof(*pSegmentation) * (pXrc->nfeatureset->cSegment + 1));
	
	iCost = getTDNNCostforString(pXrc, psz, 0, pXrc->nfeatureset->cSegment-1, pSegmentation);

	pFeat = pXrc->nfeatureset->head;

	iEndSeg = iBeginSeg = -1;
	chPrev = 0;
	memset(&rectPrev , 0, sizeof(rectPrev));
	iSeg = 0;

	*piAspect = *piHeight = *piMidpoint = 0;
	
	while (psz && *psz && iSeg < pXrc->nfeatureset->cSegment)
	{
		unsigned char	ch;
		int				iBegin, iCont, iAccent;

		ch = *psz;
		if (IsVirtualChar(ch))
		{
			iAccent = AccentVirtualChar(ch) << 16 ;
			ch = BaseVirtualChar(ch);
		}
		else
		{
			iAccent = 0;
		}

		iBegin = BeginChar2Out(ch) + iAccent;
		iCont = ContinueChar2Out(ch) + iAccent;

		if (iBegin == pSegmentation[iSeg] && -1 == iBeginSeg)
		{
			iBeginSeg = iSeg;
			iEndSeg = iSeg;
			++iSeg;
		}
		else if (iCont == pSegmentation[iSeg] && iBeginSeg >= 0)
		{
			iEndSeg = iSeg;
			++iSeg;
		}
		else
		{
			if (iBeginSeg >= 0)
			{
				ASSERT(iBeginSeg >= 0 && iEndSeg >= 0);
				addCharGeoCost(*psz, iBeginSeg, iEndSeg, pFeat, chPrev, &rectPrev, piAspect, piHeight, piMidpoint);
				*piInfCharCost += charCost_1(*psz, pXrc->pGlyph, iBeginSeg, iEndSeg, pXrc->nfeatureset, &pXrc->guide);

				// Increment To Point to the nextCharacter
				for ( ; iBeginSeg <= iEndSeg ; ++iBeginSeg)
				{
					pFeat = pFeat->next;
				}
				iBeginSeg = -1;
			}
			chPrev = *psz;
			++psz;
		}
	}

	if (strlen((char *)psz) == 1 && iSeg == pXrc->nfeatureset->cSegment)
	{
		addCharGeoCost(*psz, iBeginSeg, iEndSeg, pFeat, chPrev, &rectPrev, piAspect, piHeight, piMidpoint);
		*piInfCharCost += charCost_1(*psz, pXrc->pGlyph, iBeginSeg, iEndSeg, pXrc->nfeatureset, &pXrc->guide);
	}
	else
	{
		// Failure
		*piAspect = *piHeight = *piMidpoint = WorstNormalProb() * pXrc->nfeatureset->cSegment;
		*piInfCharCost = 0;
	}


	ExternFree(pSegmentation);
	ExternFree(pszWordSave);
#ifdef HWX_TIMING
	iEndTime = GetTickCount();

	_stprintf(aDebugString, TEXT("Getting Geo costs for seg %d\n"), iEndTime - iStartTime); 
	OutputDebugString(aDebugString);
	setMadTiming(iEndTime - iStartTime, MM_GEO_PLAIN);
#endif

	return TRUE;
}

// Initialize  costs to the worst probable state (Failure Condition
void initGeoCostsToWorst(UINT cAlt, CANDINFO *pCandInfo, int cSegment)
{
	UINT		iAlt;

	for (iAlt = 0 ; iAlt < cAlt ; ++iAlt)
	{
		pCandInfo[iAlt].Aspect		= WorstNormalProb() * cSegment;
		pCandInfo[iAlt].BaseLine	= WorstNormalProb() * cSegment;
		pCandInfo[iAlt].Height		= WorstNormalProb() * cSegment;
		pCandInfo[iAlt].InfCharCost = 0;
	}

}

/****************************************************************
*
* NAME: SegmentAltsAddGeoCosts
*
* DESCRIPTION:
*
* This function takes an alt list of words and does 2 major things
*
*  1) Segment each word on char boundaries and compute 3 geometric costs 
*	based on the bounding rects of each char for each word - save these in
*	pAltInfo
*  2) Save the character segmentation for each word and return 
*	all segmentations for all words in pAllSegments
*
* The geometric costs are Aspect ratio, Relative height and Midline 
* of 2 sequential chars
*
* INPUTS:
*	pXrc			Contains the ink and TDNN features set for word
*	pAlt			Alt list of words
*	pAltInfo		OUT: Fills in the ASpect, Height and Baseline fields for each alt
*	pAllSegments	OUT: Cache of all the char segmentations for all words
*
* CAVEATES
*
*  Some strings can fail to segment (e.g. too few segments for the number
*  of characters. In this case the geometrics are set to worst Prob and
*  The Inf char cost is set to INT_MIN
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
BOOL SegmentAltsAddGeoCosts(XRC *pXrc, PALTERNATES *pAlt, ALTINFO *pAltInfo, CHAR_SEGMENTATION *pAllSegments)
{
	unsigned char		chPrev;
	int					*pSegmentation, cSeg;
	NFEATURE			*pFeat;
	CHAR_SEGMENTATION	*pSeg;
	CANDINFO			*pCandInfo;
	UINT				iAlt;

	pCandInfo	= pAltInfo->aCandInfo;

	pSeg		= pAllSegments;
	cSeg		= pXrc->nfeatureset->cSegment;

	// Re use this buffer
	pSegmentation = (int *)ExternAlloc(sizeof(*pSegmentation) * (cSeg + 1));

	if (!pSegmentation)
	{
		return -1;
	}

	for (iAlt = 0 ; iAlt < pAlt->cAlt ; ++iAlt)
	{
		unsigned char		*psz;
		int					iCost, iSeg, iBeginSeg, iEndSeg;
		int					*piAspect, *piHeight, *piBaseline;
		RECT				rectPrev;

		memset(pSegmentation, 0, sizeof(*pSegmentation) * (cSeg + 1));
		pCandInfo[iAlt].Aspect		= 0;
		pCandInfo[iAlt].BaseLine	= 0;
		pCandInfo[iAlt].Height		= 0;
		pCandInfo[iAlt].InfCharCost = 0;

		psz = pAlt->apAlt[iAlt]->szWord;

		if (NULL == psz)
		{
			pCandInfo[iAlt].Aspect		= WorstNormalProb() * cSeg;;
			pCandInfo[iAlt].BaseLine	= WorstNormalProb() * cSeg;;
			pCandInfo[iAlt].Height		= WorstNormalProb() * cSeg;;
			continue;
		}

		piAspect	= &pCandInfo[iAlt].Aspect;
		piHeight	= &pCandInfo[iAlt].Height;
		piBaseline	= &pCandInfo[iAlt].BaseLine;

		// Segment this string
		iCost = getTDNNCostforString(pXrc, psz, 0, cSeg-1, pSegmentation);

		iEndSeg = iBeginSeg = -1;
		chPrev = 0;
		memset(&rectPrev , 0, sizeof(rectPrev));
		iSeg = 0;
		pFeat = pXrc->nfeatureset->head;

		// Collect starting and ending segments
		while (psz && *psz && iSeg < cSeg)
		{
			unsigned char	ch;
			int				iBegin, iCont, iAccent;

			ch = *psz;
			if (isspace1252(ch))
			{
				++psz;
				continue;
			}

			if (IsVirtualChar(ch))
			{
				iAccent = AccentVirtualChar(ch) << 16 ;
				ch = BaseVirtualChar(ch);
			}
			else
			{
				iAccent = 0;
			}

			iBegin = BeginChar2Out(ch) + iAccent;
			iCont = ContinueChar2Out(ch) + iAccent;

			if (iBegin == pSegmentation[iSeg] && -1 == iBeginSeg)
			{
				iBeginSeg = iSeg;
				iEndSeg = iSeg;
				++iSeg;
			}
			else if (iCont == pSegmentation[iSeg] && iBeginSeg >= 0)
			{
				iEndSeg = iSeg;
				++iSeg;
			}
			else
			{
				if (iBeginSeg >= 0)
				{
					ASSERT(iBeginSeg >= 0 && iEndSeg >= 0);

					pSeg->iBeginSeg = iBeginSeg;
					pSeg->iEndSeg	= iEndSeg;
					pSeg->iAlt		= iAlt;
					pSeg->ch		= *psz;

					++pSeg;

					addCharGeoCost(*psz, iBeginSeg, iEndSeg, pFeat, chPrev, &rectPrev, piAspect, piHeight, piBaseline);

					// Increment To Point to the nextCharacter
					for ( ; iBeginSeg <= iEndSeg ; ++iBeginSeg)
					{
						pFeat = pFeat->next;
					}
					iBeginSeg = -1;
				}
				chPrev = *psz;
				++psz;
			}
		}

		// Catch the last character
		if (strlen((char *)psz) == 1 && iSeg == cSeg)
		{
			addCharGeoCost(*psz, iBeginSeg, iEndSeg, pFeat, chPrev, &rectPrev, piAspect, piHeight, piBaseline);
			pSeg->iBeginSeg = iBeginSeg;
			pSeg->iEndSeg	= iEndSeg;
			pSeg->iAlt		= iAlt;
			pSeg->ch		= *psz;
			++pSeg;
		}
		else
		{
			// Failure
			pCandInfo[iAlt].Aspect		= WorstNormalProb() * cSeg;
			pCandInfo[iAlt].BaseLine	= WorstNormalProb() * cSeg;
			pCandInfo[iAlt].Height		= WorstNormalProb() * cSeg;
			pCandInfo[iAlt].InfCharCost = INT_MIN;
		}
	}

	ExternFree(pSegmentation);

	return pSeg - pAllSegments;
}

static RREAL * charCost(unsigned char ch, GLYPH *pGlyph, int iBeginSeg, int iEndSeg,  NFEATURESET *nfeatureset, GUIDE const *pGuide, RREAL *pNetMem, int * pcOut)
{
	NFEATURE		*pFeat;
	GLYPH			*pGlyphNew = NULL;
	RECT			rect;
	int				iSeg;
	int				cFeat;
	int				cStroke, iFeat;
	RREAL			*pNetOut = NULL;

	pFeat = nfeatureset->head;

	for (iSeg = 0 ; iSeg < iBeginSeg && pFeat ; ++iSeg)
	{
		pFeat = pFeat->next;
	}

	ASSERT(pFeat);

	rect = pFeat->rect;

	for( ; iSeg <= iEndSeg ; ++iSeg)
	{
		rect.bottom = max(rect.bottom, pFeat->rect.bottom);
		rect.top	= min(rect.top, pFeat->rect.top);
		rect.left = min(rect.left, pFeat->rect.left);
		rect.right = max(rect.right, pFeat->rect.right);
		pFeat = pFeat->next;
	}

	pGlyphNew = NewGLYPH();

	if(pGlyphNew)
	{
		RECT		*pRect;
		FRAME		*pFrameOrg;

		cStroke = 0;

		while(pGlyph)
		{
			pFrameOrg = pGlyph->frame;
			pRect = RectFRAME(pGlyph->frame);

			if (ONE_D_OVERLAP(rect.left, rect.right, pRect->left, pRect->right))
			{
				FRAME		*pFrame;

				pFrame = NewFRAME();
				if (pFrame)
				{
					pFrame->info.wPdk = PDK_TIPMASK;
					pFrame->info.cPnt = 0;
						
					pFrame->rgrawxy = (POINT *)ExternAlloc(pFrameOrg->info.cPnt * sizeof(POINT));
					if (pFrame->rgrawxy)
					{
						int		iPnt;
						POINT	*pxy;

						pxy = pFrameOrg->rgrawxy;

						for(iPnt = 0 ; iPnt < (int)pFrameOrg->info.cPnt ; ++iPnt, ++pxy)
						{
							if (pxy->x >= rect.left && pxy->x <= rect.right)
							{
								pFrame->rgrawxy[pFrame->info.cPnt++] = *pxy;
							}
						}
					}

					if (pFrame->info.cPnt > 0)
					{
						AddFrameGLYPH(pGlyphNew, pFrame);
						++cStroke;				
					}
					else
					{
						DestroyFRAME(pFrame);
					}
				}
			}

			pGlyph = pGlyph->next;
		}
	
		if (cStroke > 0 && cStroke <= C_CHAR_NET)
		{
			int			iWin;

			iFeat = s_charNets[cStroke-1]->runNet.cUnitsPerLayer[0];
			cFeat = SingleInfCharFeaturize(pGlyphNew, nfeatureset->iyDev, (GUIDE *)pGuide, pNetMem, FALSE);
			ASSERT(cFeat == iFeat);

			if (cFeat == iFeat)
			{
				pNetOut = runLocalConnectNet(s_charNets[cStroke-1], pNetMem, &iWin, pcOut);
			}
		}

		DestroyFramesGLYPH(pGlyphNew);
		DestroyGLYPH(pGlyphNew);
	}

	return pNetOut;
}

//
//Sort segmentation with primary key startSegmet
// and secondary key EndSegment
//
int __cdecl SortCharSegmentations (const void *elem1, const void *elem2) 
{
	CHAR_SEGMENTATION		*pSeg1, *pSeg2;

	pSeg1 = (CHAR_SEGMENTATION *)elem1;
	pSeg2 = (CHAR_SEGMENTATION *)elem2;

	if (pSeg1->iBeginSeg != pSeg2->iBeginSeg)
	{
		return pSeg1->iBeginSeg - pSeg2->iBeginSeg;
	}

	return pSeg1->iEndSeg - pSeg2->iEndSeg;
}


BOOL GetWordGeoCostsFromAlt (XRC *pXrc, PALTERNATES *pAlt, ALTINFO *pAltInfo)
{
	int					cSegmentations, iSeg, cSeg, cOut;
	CANDINFO			*pCandInfo;
	CHAR_SEGMENTATION	*pAllSegments = NULL, *pSeg, *pLastSeg;
	BOOL				bRet = FALSE;
	RREAL				*pNetMem = NULL, *pCharRes;

#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
	TCHAR aDebugString[256];
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif

	if (NULL == pAltInfo || NULL == pAlt)
	{
		return FALSE;
	}

	pCandInfo = pAltInfo->aCandInfo;


	if (NULL == pXrc || NULL == pXrc->nfeatureset || pXrc->nfeatureset->cSegment <= 0 )
	{
		initGeoCostsToWorst(pAlt->cAlt, pCandInfo, 1);
	return TRUE;
}

	cSeg = pXrc->nfeatureset->cSegment;

	// Get segmentation of all words
	pAllSegments = (CHAR_SEGMENTATION *)ExternAlloc(sizeof(*pAllSegments) * pAlt->cAlt * cSeg);
	if (NULL == pAllSegments)
	{
		initGeoCostsToWorst(pAlt->cAlt, pCandInfo, cSeg);
		return FALSE;
	}

	pNetMem		= (RREAL *)ExternAlloc(sizeof(*pNetMem) * s_cMaxNetMem);

	if (NULL == pNetMem)
	{
		goto exit;
	}

	// Do char segmentations for all words and add the 3 geo costs
	// to pAltInfo. Save the character segmentations of all strings in pAllSegments
	cSegmentations = SegmentAltsAddGeoCosts(pXrc, pAlt, pAltInfo, pAllSegments);

	if (cSegmentations < 0)
	{
		initGeoCostsToWorst(pAlt->cAlt, pCandInfo, cSeg);
		goto exit;;
	}

	// Now proceed to get all the char inferno costs in most
	// optimal manner possible. 
	// March along the segment stream and try do 
	// as many alternates with a single run
	// of the char net. First sort the segmentations in order 
	// of starting seg positions then on end segmentation pos.
	qsort(pAllSegments, cSegmentations, sizeof (*pAllSegments), SortCharSegmentations);
	pSeg			= pAllSegments;
	pLastSeg		= NULL;

	for (iSeg = 0 ; iSeg < cSegmentations ; ++iSeg)
	{
		int		iCost, idx;

		// Run the char net fro a range of ink 
		// only if we have never
		// seen the range of segments before
		if (   NULL == pLastSeg 
			|| pSeg->iBeginSeg != pLastSeg->iBeginSeg
			|| pSeg->iEndSeg != pLastSeg->iEndSeg)
		{
			// Run the Net
			pCharRes = charCost(pSeg->ch, pXrc->pGlyph, pSeg->iBeginSeg, pSeg->iEndSeg, pXrc->nfeatureset, &pXrc->guide, pNetMem, &cOut);
			pLastSeg = pSeg;
		}

		idx = OutputIdFromChar(pSeg->ch);
		if (idx < cOut && NULL != pCharRes)
		{
			iCost = pCharRes[idx];
		}
		else
		{
			iCost = 0;
		}

		// Alternates tha failed to segment have been initialized to INT_MIN
		// Dont try change these
		if (pCandInfo[pSeg->iAlt].InfCharCost >= 0)
		{
			pCandInfo[pSeg->iAlt].InfCharCost	+= iCost;
		}
		++pSeg;
	}


	bRet = TRUE;

exit:

	ExternFree(pAllSegments);
	ExternFree(pNetMem);

#ifdef HWX_TIMING
	iEndTime = GetTickCount();

	_stprintf(aDebugString, TEXT("Getting Geo costs for alt %d\n"), iEndTime - iStartTime); 
	OutputDebugString(aDebugString);
	setMadTiming(iEndTime - iStartTime, MM_GEO_ALT);
#endif
	return bRet;
}


/****************************************************************
*
* NAME: OutputIdFromChar
*
*
* DESCRIPTION:
*
* Lookup the ouput Id of a char using the g_supportChar Table
* Assumes that the lookup table lists characters is in ascending
* 1252 codepoint value
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
static int OutputIdFromChar(unsigned char ch)
{
	int		id;

	// Initial Guess
	id = ch - ' ' - 1;


	if (g_cSupportChar > 0)
	{
		// Use the Table lookup

		id = min(id, g_cSupportChar-1);

		while (id >= 0 && g_supportChar[id] != ch)
		{
			--id;
		}
	}
	else
	{
		// No Table just use the first 94 chars
		id = (id < 94 && id >= 0) ? id : -1;
	}

	return id;
}

BOOL loadGeoTables(HINSTANCE hInst)
{
	BOOL		bRet;

	bRet = InitializeSparseMatrix(hInst, RESID_GEO_HEIGHT, &HeightMat);

	bRet = (   bRet
			&& InitializeSparseMatrix(hInst, RESID_GEO_MID_POINT, &MidPointMat) );

	return bRet;
}



/****************************************************************
*
* NAME: charCost
*
*
* DESCRIPTION:
*
*   Evaluate the character cost for the ink enclosed within the 
*   range of x values covered by a range of segments
*
*   Returns the cost
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
static int charCost_1(unsigned char ch, GLYPH *pGlyph, int iBeginSeg, int iEndSeg,  NFEATURESET *nfeatureset, GUIDE const *pGuide)
{
	NFEATURE		*pFeat;
	GLYPH			*pGlyphNew = NULL;
	RECT			rect;
	int				iSeg;
	int				cFeat, iCost;
	int				cStroke, iFeat;

	iCost = 0;
	pFeat = nfeatureset->head;

	for (iSeg = 0 ; iSeg < iBeginSeg && pFeat ; ++iSeg)
	{
		pFeat = pFeat->next;
	}

	ASSERT(pFeat);

	rect = pFeat->rect;

	for( ; iSeg <= iEndSeg ; ++iSeg)
	{
		rect.bottom = max(rect.bottom, pFeat->rect.bottom);
		rect.top	= min(rect.top, pFeat->rect.top);
		rect.left = min(rect.left, pFeat->rect.left);
		rect.right = max(rect.right, pFeat->rect.right);
		pFeat = pFeat->next;
	}

	pGlyphNew = NewGLYPH();

	if(pGlyphNew)
	{
		RECT		*pRect;
		FRAME		*pFrameOrg;

		cStroke = 0;

		while(pGlyph)
		{
			pFrameOrg = pGlyph->frame;
			pRect = RectFRAME(pGlyph->frame);

			if (ONE_D_OVERLAP(rect.left, rect.right, pRect->left, pRect->right))
			{
				FRAME		*pFrame;

				pFrame = NewFRAME();
				if (pFrame)
				{
					pFrame->info.wPdk = PDK_TIPMASK;
					pFrame->info.cPnt = 0;
				
					pFrame->rgrawxy = (POINT *)ExternAlloc(pFrameOrg->info.cPnt * sizeof(POINT));
				
					if (pFrame->rgrawxy)
					{
						int		iPnt;
						POINT	*pxy;

						pxy = pFrameOrg->rgrawxy;
						for(iPnt = 0 ; iPnt < (int)pFrameOrg->info.cPnt ; ++iPnt, ++pxy)
						{
							if (pxy->x >= rect.left && pxy->x <= rect.right)
							{
								pFrame->rgrawxy[pFrame->info.cPnt++] = *pxy;
							}
						}
					}

					if (pFrame->info.cPnt > 0)
					{
						AddFrameGLYPH(pGlyphNew, pFrame);
						++cStroke;				
					}
					else
					{
						DestroyFRAME(pFrame);
					}
				}
			}

			pGlyph = pGlyph->next;
		}
	
		iFeat = cStroke * 21 + 2;
		if (cStroke > 1)
		{
			iFeat += cStroke * 4;
		}




		if (cStroke > 0 && cStroke <= C_CHAR_NET)
		{
			RREAL		*pCharRes, *pMem;
			int			iWin, cOut;

			pMem = (RREAL *)ExternAlloc(sizeof(*pMem) * s_cCharNetMem[cStroke-1]);

			if (pMem)
			{
				int			idx;

				cFeat = SingleInfCharFeaturize(pGlyphNew, nfeatureset->iyDev, (GUIDE *)pGuide, pMem, FALSE);
				ASSERT(cFeat == iFeat);

				if (cFeat == iFeat)
				{
					pCharRes = runLocalConnectNet(s_charNets[cStroke-1], pMem, &iWin, &cOut);
					idx = OutputIdFromChar(ch);
					if (idx < cOut)
					{
						iCost = pCharRes[idx];
					}
				}

				ExternFree(pMem);
			}
		}

		DestroyFramesGLYPH(pGlyphNew);
		DestroyGLYPH(pGlyphNew);
	}

	return iCost;
}


/****************************************************************
*
* NAME: loadCharNets
*
*
* DESCRIPTION:
*
*   Load character by character nets from the resources 
*   Callled once at initialization
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
BOOL loadCharNets(HINSTANCE hInst)
{
	int			iNet, iResidId;
	BOOL		bRet = TRUE;

	iResidId = RESID_INF_CHARNET_0;
	s_cMaxNetMem		= 0;

	for (iNet = 0 ; TRUE == bRet && iNet < C_CHAR_NET  && iResidId < RESID_INF_LAST_NET ; ++iNet, ++iResidId)
	{
		LOCAL_NET	net;

		if (NULL == loadNet(hInst, iResidId, &s_cCharNetMem[iNet], &net))
		{
			bRet = FALSE;
		}
		s_charNets[iNet] = (LOCAL_NET *)ExternAlloc(sizeof(*s_charNets[iNet]));

		if (NULL == s_charNets[iNet])
		{
			bRet = FALSE;
		}
		else
		{
			*s_charNets[iNet] = net;
		}

		s_cMaxNetMem = max(s_cMaxNetMem, s_cCharNetMem[iNet]);
	}

	bRet = (bRet && loadGeoTables(hInst));

	return bRet;
}

/****************************************************************
*
* NAME: unloadCharNets
*
*
* DESCRIPTION:
*
*   Unload character by character nets by freeing any memory allocated
*   when they were allocated
*   Callled once when dll unloads
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
void unloadCharNets()
{
	int			iNet;

	for (iNet = 0 ; iNet < C_CHAR_NET ; ++iNet)
	{
		ExternFree(s_charNets[iNet]);
		s_charNets[iNet] = NULL;
		s_cCharNetMem[iNet] = 0;
	}
}

/****************************************************************
*
* NAME: GetCharCost
*
*
* DESCRIPTION:
*
* Get word costs using char by char reco cost
* Segmentation taken from inferno reco
   
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
static int GetCharCost(XRC *pXrc, unsigned char *pszWord)
{
	int				*pSegmentation;
	unsigned char	chPrev;
	int				iSeg, iCost, iBeginSeg, iEndSeg, iRetCost;
	RECT			rectPrev;
	NFEATURE		*pFeat;
	unsigned char	*psz, *psz1, *pszWordSave;
	
	iRetCost = 0;
	if (NULL == pXrc || pXrc->nfeatureset->cSegment <= 0 || NULL == pszWord)
	{
		return iRetCost;
	}

	psz1 = psz = pszWordSave = (unsigned char *)Externstrdup(pszWord);
	if (NULL == psz)
	{
		return 0;
	}

	// Eliminate White Space
	while(*psz)
	{
		if (*psz != ' ')
		{
			*psz1 = *psz;
			++psz1;
		}
		++psz;
	}

	psz = pszWordSave;

	pSegmentation = (int *)ExternAlloc(sizeof(*pSegmentation) * (pXrc->nfeatureset->cSegment + 1));

	if (NULL == pSegmentation)
	{
		return 0;
	}
	memset(pSegmentation, 0, sizeof(*pSegmentation) * (pXrc->nfeatureset->cSegment + 1));
	
	iCost = getTDNNCostforString(pXrc, psz, 0, pXrc->nfeatureset->cSegment-1, pSegmentation);

	pFeat = pXrc->nfeatureset->head;

	iEndSeg = iBeginSeg = -1;
	chPrev = 0;
	memset(&rectPrev , 0, sizeof(rectPrev));
	iSeg = 0;

	while (psz && *psz && iSeg < pXrc->nfeatureset->cSegment)
	{
		unsigned char	ch;
		int				iBegin, iCont, iAccent;

		ch = *psz;
		if (IsVirtualChar(ch))
		{
			iAccent = AccentVirtualChar(ch) << 16 ;
			ch = BaseVirtualChar(ch);
		}
		else
		{
			iAccent = 0;
		}

		iBegin = BeginChar2Out(ch) + iAccent;
		iCont = ContinueChar2Out(ch) + iAccent;

		if (iBegin == pSegmentation[iSeg] && -1 == iBeginSeg)
		{
			iBeginSeg = iSeg;
			iEndSeg = iSeg;
			++iSeg;
		}
		else if (iCont == pSegmentation[iSeg] && iBeginSeg >= 0)
		{
			iEndSeg = iSeg;
			++iSeg;
		}
		else
		{
			if (iBeginSeg >= 0)
			{
				ASSERT(iBeginSeg >= 0 && iEndSeg >= 0);
				iRetCost += charCost_1(*psz, pXrc->pGlyph, iBeginSeg, iEndSeg, pXrc->nfeatureset, &pXrc->guide);

				// Increment To Point to the nextCharacter
				for ( ; iBeginSeg <= iEndSeg ; ++iBeginSeg)
				{
					pFeat = pFeat->next;
				}
				iBeginSeg = -1;
			}
			chPrev = *psz;
			++psz;
		}
	}

	if (psz && strlen((char *)psz) == 1 && iSeg == pXrc->nfeatureset->cSegment)
	{
		iRetCost += charCost_1(*psz, pXrc->pGlyph, iBeginSeg, iEndSeg, pXrc->nfeatureset, &pXrc->guide);
		//iRetCost /= pXrc->nfeatureset->cSegment;
		ASSERT(iRetCost >= 0 || iRetCost/pXrc->nfeatureset->cSegment <= SOFT_MAX_UNITY);
	}
	else
	{
		// Failure
		iRetCost = 0;
	}


	ExternFree(pSegmentation);
	ExternFree(pszWordSave);
	return iRetCost;
}


#if (defined (HWX_INTERNAL) && defined (HWX_TRAIN_MADCOW))
void CheckGeoAns(XRC *pXrc)
{
	UINT				i;
	XRCRESULT		*pRes;
	int				iAspect, iHeight, iMid;
	static FILE		*fpOut = NULL;

	pRes = pXrc->answer.aAlt;

	for (i = 0 ; i < pXrc->answer.cAlt ; ++i, ++pRes)
	{
		if (0 != strcmp(pRes->szWord, g_szAnswer))
		{
			GetGeoCosts(pXrc, pRes->szWord, &iAspect, &iHeight, &iMid);
			break;
		}
	}

	if (i < pXrc->answer.cAlt)
	{
		if (NULL == fpOut)
		{
			fpOut = fopen("GeoVals.dat", "w");
		}


		fprintf(fpOut, "%6d %6d %6d ", iAspect, iHeight, iMid);

		GetGeoCosts(pXrc, g_szAnswer, &iAspect, &iHeight, &iMid);

		fprintf(fpOut, "%6d %6d %6d %s %s\n", iAspect, iHeight, iMid, pRes->szWord, g_szAnswer);
	}
}


void dumpDataGlyph(unsigned char cPrompt, GLYPH *pGlyph, NFEATURESET *nfeatureset, int iBeginSeg, int iEndSeg, GUIDE const *pGuide, BOOL bLast)
{
	NFEATURE		*pFeat;
	GLYPH			*pGlyphNew = NULL;
	RECT			rect;
	int				iSeg;
	int				cFeat, i;
	int				cStroke, iFeat;
	static	int		*pFeatAlloc = NULL;
	static int		cFeatAlloc = 0;
	static FILE		*fpStrk[5] = {NULL};
	FILE			*fpOut;

	if (NULL == fpStrk[0])
	{
		int		i;
		char	name[32];

		for (i = 0 ; i < 5 ; ++i)
		{
			sprintf(name, "stroke%d.dat", i);
			fpStrk[i] = fopen(name, "w");
		}
	}

	pFeat = nfeatureset->head;

	for (iSeg = 0 ; iSeg < iBeginSeg && pFeat ; ++iSeg)
	{
		pFeat = pFeat->next;
	}

	ASSERT(pFeat);

	rect = pFeat->rect;

	for( ; iSeg <= iEndSeg ; ++iSeg)
	{
		rect.bottom = max(rect.bottom, pFeat->rect.bottom);
		rect.top	= min(rect.top, pFeat->rect.top);
		rect.left = min(rect.left, pFeat->rect.left);
		rect.right = max(rect.right, pFeat->rect.right);
		pFeat = pFeat->next;
	}

	pGlyphNew = NewGLYPH();

	if(pGlyphNew)
	{
		RECT		*pRect;
		FRAME		*pFrameOrg;

		cStroke = 0;

		while(pGlyph)
		{
			pFrameOrg = pGlyph->frame;
			pRect = RectFRAME(pGlyph->frame);

			if (ONE_D_OVERLAP(rect.left, rect.right, pRect->left, pRect->right))
			{
				FRAME		*pFrame;

				pFrame = NewFRAME();
				if (pFrame)
				{
					pFrame->info.wPdk = PDK_TIPMASK;
					pFrame->info.cPnt = 0;

					pFrame->rgrawxy = (POINT *)ExternAlloc(pFrameOrg->info.cPnt * sizeof(POINT));
					
					if(pFrame->rgrawxy)
					{
						int		iPnt;
						POINT	*pxy;

						pxy = pFrameOrg->rgrawxy;
						for(iPnt = 0 ; iPnt < (int)pFrameOrg->info.cPnt ; ++iPnt, ++pxy)
						{
							if (pxy->x >= rect.left && pxy->x <= rect.right)
							{
								pFrame->rgrawxy[pFrame->info.cPnt++] = *pxy;
							}
						}
					}

					if (pFrame->info.cPnt > 0)
					{
						AddFrameGLYPH(pGlyphNew, pFrame);
						++cStroke;				
					}
					else
					{
						DestroyFRAME(pFrame);
					}
				}
			}

			pGlyph = pGlyph->next;
		}
	
		iFeat = cStroke * 21 + 2;
		if (cStroke > 1)
		{
			iFeat += cStroke * 4;
		}

		if (iFeat > cFeatAlloc || NULL == pFeat)
		{
			pFeatAlloc = (int *)realloc(pFeatAlloc, iFeat * sizeof(*pFeatAlloc));

			if (NULL == pFeatAlloc)
			{
				return;
			}
			cFeatAlloc = iFeat;
		}


		cFeat = SingleCharFeaturize(pGlyphNew, nfeatureset->iyDev, (GUIDE *)pGuide, pFeatAlloc, FALSE);
		ASSERT(cFeat == iFeat);

		if (cFeat != iFeat)
		{
			iFeat = iFeat;
		}

		if (cFeat > 0)
		{
			cStroke = min(cStroke, 4);

			fpOut = fpStrk[cStroke];

			fprintf(fpOut,"{ "); 

			for (i = 0 ; i < cFeat ; ++i)
			{
				fprintf(fpOut,"%d ",pFeatAlloc[i]);
			}

			fprintf(fpOut,"} { %d }\n", OutputIdFromChar(cPrompt)); 
		}

		GetRectGLYPH(pGlyphNew, &rect);
		fpOut = fpStrk[0];
		fprintf(fpOut, "%c %d %d %d %d %d %d %d\n", cPrompt, cStroke, iEndSeg - iBeginSeg+1, rect.left, rect.top, rect.right, rect.bottom, bLast);

		DestroyFramesGLYPH(pGlyphNew);
		DestroyGLYPH(pGlyphNew);
	}
}

int DumpGeoData(XRC *pXrc)
{
	int				*pSegmentation;
	unsigned char	chPrev;
	int				iSeg, iCost, iBeginSeg, iEndSeg;
	RECT			rectPrev;
	NFEATURE		*pFeat;
	unsigned char	*psz;

	psz = pXrc->answer.aAlt[0].szWord;

	if (0 != strcmp(psz, g_szAnswer))
	{
		return FALSE;
	}

	pSegmentation = (int *)ExternAlloc(sizeof(*pSegmentation) * (pXrc->nfeatureset->cSegment + 1));

	if (!pSegmentation)
	{
		return FALSE;
	}
	memset(pSegmentation, 0, sizeof(*pSegmentation) * (pXrc->nfeatureset->cSegment + 1));

	iCost = getTDNNCostforString(pXrc, psz, 0, pXrc->nfeatureset->cSegment-1, pSegmentation);

	pFeat = pXrc->nfeatureset->head;

	iEndSeg = iBeginSeg = -1;
	chPrev = 0;
	memset(&rectPrev , 0, sizeof(rectPrev));
	iSeg = 0;

	while (psz && *psz && iSeg < pXrc->nfeatureset->cSegment)
	{
		unsigned char	ch;
		int				iBegin, iCont, iAccent;

		ch = *psz;
		if (IsVirtualChar(ch))
		{
			iAccent = AccentVirtualChar(ch) << 16 ;
			ch = BaseVirtualChar(ch);
		}
		else
		{
			iAccent = 0;
		}

		iBegin = BeginChar2Out(ch) + iAccent;
		iCont = ContinueChar2Out(ch) + iAccent;

		if (iBegin == pSegmentation[iSeg] && -1 == iBeginSeg)
		{
			iBeginSeg = iSeg;
			iEndSeg = iSeg;
			++iSeg;
			pFeat = pFeat->next;
		}
		else if (iCont == pSegmentation[iSeg] && iBeginSeg >= 0)
		{
			iEndSeg = iSeg;
			++iSeg;
			pFeat = pFeat->next;
		}
		else
		{
			if (iBeginSeg >= 0)
			{
				ASSERT(iBeginSeg >= 0 && iEndSeg >= 0);
				dumpDataGlyph(*psz, pXrc->pGlyph, pXrc->nfeatureset, iBeginSeg, iEndSeg, &pXrc->guide, FALSE);
				iBeginSeg = -1;
			}
			chPrev = *psz;
			++psz;
		}
	}


	if (strlen((char *)psz) == 1 && iSeg == pXrc->nfeatureset->cSegment)
	{
		dumpDataGlyph(*psz, pXrc->pGlyph, pXrc->nfeatureset, iBeginSeg, iEndSeg, &pXrc->guide, TRUE);
	}


	ExternFree(pSegmentation);
	return TRUE;
}
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\multsegm.h ===
// Resolution of segmentation disputes using multiple segmentations from Bear and Inferno 
// Ahmad abdulKader: ahmadab
// March 2001

#ifndef __MULTISEGM_H__

#define __MULTISEGM_H__

#include <common.h>
#include <limits.h>
#include <string.h>

#include "hwr_sys.h"
#include "pegrec.h"
#include "peg_util.h"
#include "xrwdict.h"
#include "xrword.h"
#include "xrlv.h"
#include "ws.h"
#include "wordbrk.h"

// language specific segmentation constants
#include "segconst.h"

#define	WORST_INFERNO	0x100000		// worst inferno score (the worst cost of 256 segments)

#define	BEST_SEGMENTATION_SCORE		0xFFFF
#define	WORST_SEGMENTATION_SCORE	0

// macro to return the wor_map last stroke
#define WORD_LAST_STROKE(pWordMap) (pWordMap->cStroke > 0 ? pWordMap->piStroke[pWordMap->cStroke - 1] : -1)

// a structure descibing an alignment point of seg_sets
typedef struct tagANCHOR
{
	int		cByte;
	BYTE	*pBits;
	int		cAlign;
	int		cStrk;
}
ANCHOR;

// a structure describing instances of seg_sets whose segmentations contains
// a certain number of words
typedef struct tagSEG_TUPLE
{
	int				cSeg;					// # of segmentations in the tuple
	unsigned char	aWrd[MAX_SEG];			// array of segmentation word counts
}	
SEG_TUPLE;


#ifdef __cplusplus
extern "C"
{
#endif
extern				SEG_TUPLE	g_aSpecialTuples[];
#ifdef __cplusplus
}
#endif

WORDINFO *ResolveMultiWordBreaks (	XRC					*pxrc, 
									BEARXRC				*pxrcBear, 
									int					*pcWord,
									LINE_SEGMENTATION	**ppLineSegm
								);



BOOL				ComputeFinalAltLists	(XRC *pxrc);

#endif // __MULTISEGM_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\onecharnet.c ===
/****************************************************************
*
* NAME: oneCharProc.c
*
*
* DESCRIPTION:
*
* Special processing when the answer is thought to be a single charatcre
*
*
* HISTORY
*
* Introduced March 2002 (mrevow)
*
***************************************************************/
#include <limits.h>
#include <stdlib.h>
#include "common.h"
#include <nfeature.h>
#include <engine.h>
#include <nnet.h>
#include <charmap.h>
#include <charcost.h>
#include <runNet.h>
#include <avalanche.h>
#include <avalanchep.h>
#include <oneCharNet.h>
#include <resource.h>


static LOCAL_NET	s_oneCharNet = {0};
static int			s_cOneCharNet = 0;

extern unsigned short SupportedWord (XRC *pxrc, unsigned char *pszWord);
extern unsigned short CapitalizedWord (unsigned char *pszWord);
extern unsigned short NumberContent (unsigned char *pszWord);
extern unsigned short PuncContent (unsigned char *pszWord);
extern unsigned short AlphaContent (unsigned char *pszWord);
extern unsigned short UniReliable(unsigned char *pszWord,BOOL bInf);
extern unsigned short BiReliable(unsigned char *pszWord,BOOL bInf);
extern WORDMAP * dupWordMap(WORDMAP *pMapIn, unsigned char * szWord);
extern int __cdecl CompareXRCRES (const void *elem1, const void *elem2) ;

// Attempt to load for languages - It is not ann error if it fails
// Simply means that the language does not support confidence
BOOL LoadOneCharNets (HINSTANCE hInst)
{
	if ( FALSE == loadNet(hInst, RESID_AVAL_ONE_CHAR, &s_cOneCharNet, &s_oneCharNet))
	{
		memset(&s_oneCharNet, 0, sizeof(s_oneCharNet));
		s_cOneCharNet	= 0;
	}

	return TRUE;
}
// Unload Confidence nets
void UnLoadOneCharNets()
{
}

// Return Values:
//  -1 - One char net is unavailable  or cannot run
//  0 - Failed data is now in questionable stae
//  1 - Succeeded
int RunOneCharAvalancheNNet (XRC *pxrc, PALTERNATES *pAlt, ALTINFO *pAltInfo)
{
	int				i;
	int				c, cAlt;
	int				iWin, cOut, cInputFeat;
	WORDMAP			*pMapInf = NULL;
	RREAL			*pNetMem = NULL, *pInput, *pOut;	
	int				iRet = -1;

	if (s_cOneCharNet <= 0)
	{
		goto exit;
	}

	if ( NULL == (pNetMem = ExternAlloc(s_cOneCharNet * sizeof(*pNetMem))))
	{
		goto exit;
	}

	// Check that we have the correct nets
	cInputFeat	= s_oneCharNet.runNet.cUnitsPerLayer[0];

	//The number of candidates should be positive
	ASSERT(pAltInfo->NumCand>=0);
	

	// we cannot handle more than TOT_CAND
	ASSERT (pAltInfo->NumCand <= TOT_CAND);

	// generate features
	pInput		= pNetMem;
	*pInput++	= pxrc->nfeatureset->iPrint;

	for (i = 0; i < pAltInfo->NumCand; i++)
	{

		*pInput++ = pAltInfo->aCandInfo[i].Callig;
		*pInput++ = pAltInfo->aCandInfo[i].NN;
		*pInput++ = pAltInfo->aCandInfo[i].WordLen;
		*pInput++ = SupportedWord (pxrc, pAlt->apAlt[i]->szWord);
		*pInput++ = pAltInfo->aCandInfo[i].Aspect;
		*pInput++ = pAltInfo->aCandInfo[i].Height;
		*pInput++ = pAltInfo->aCandInfo[i].BaseLine;
		*pInput++ = pAltInfo->aCandInfo[i].InfCharCost;
		*pInput++ = CapitalizedWord (pAlt->apAlt[i]->szWord);
		*pInput++ = NumberContent (pAlt->apAlt[i]->szWord);
		*pInput++ = PuncContent (pAlt->apAlt[i]->szWord);
		*pInput++ = AlphaContent (pAlt->apAlt[i]->szWord);
		*pInput++ = UniReliable(pAlt->apAlt[i]->szWord, TRUE);			// Inferno Uni- Reliabilty score
		*pInput++ = UniReliable(pAlt->apAlt[i]->szWord, FALSE);			// Bear Unigram - Reliablity
		*pInput++ = BiReliable(pAlt->apAlt[i]->szWord, TRUE);			// Inferno Bi-letter Reliability
		*pInput++ = BiReliable(pAlt->apAlt[i]->szWord, FALSE);			// Bear Bi-letter Reliability
		*pInput++ = pAltInfo->aCandInfo[i].Unigram;
	}

	// In rare cases the merged loop will not have TOT_CAND entries
	for (i = pAltInfo->NumCand; i < TOT_CAND; i++)
	{
		*pInput++ = INT_MIN,		//Callig
		*pInput++ = INT_MAX;		// NN
		*pInput++ = INT_MAX;		// Wordlen
		*pInput++ = INT_MAX;		// Support Word
		*pInput++ = INT_MAX;		// Aspect
		*pInput++ = INT_MAX;		// Height
		*pInput++ = INT_MAX;		// MidLine
		*pInput++ = INT_MIN;		// CharScore
		*pInput++ = INT_MAX;		// Capital Word
		*pInput++ = INT_MAX;		//Number content
		*pInput++ = INT_MAX;		// Punc Content
		*pInput++ = INT_MAX;		// Alpha Content
		*pInput++ = INT_MAX;		// UniReliab Inferno
		*pInput++ = INT_MAX;		// Uni Reliable Bear
		*pInput++ = INT_MAX;		// Bi Reliable Inf
		*pInput++ = INT_MAX;		// Bi Reliable Bear
		*pInput++ = INT_MAX;		// Word Unigram
	}


	ASSERT(pInput - pNetMem == cInputFeat);
	if (pInput - pNetMem != cInputFeat)
	{
		goto exit;
	}

	pOut = runLocalConnectNet(&s_oneCharNet, pNetMem, &iWin, &cOut);

	
	// for now
	pxrc->answer.iConfidence = RECOCONF_LOWCONFIDENCE;

	// Should be at least one inferno answer that has a map
	// Need to save it because callig options dont have maps (bug!!)
	pMapInf = pxrc->answer.aAlt[0].pMap;

	// Put the final costs into the inferno XRESULT
	// Need also to reorganize the string pointers 
	// to match the merged list order

	cAlt	=	(unsigned int)pAltInfo->NumCand;
	for (c = cAlt -1 ; c >=0; c--)
	{
		if (  !pxrc->answer.aAlt[c].szWord 
			|| pxrc->answer.aAlt[c].szWord != pAlt->apAlt[c]->szWord)
		{
			pxrc->answer.aAlt[c].szWord	=	(unsigned char *)ExternRealloc (pxrc->answer.aAlt[c].szWord,
				(strlen (pAlt->apAlt[c]->szWord) + 1) * sizeof (unsigned char));

			if (!pxrc->answer.aAlt[c].szWord)
			{
				iRet = 0;
				goto exit;
			}

			strcpy (pxrc->answer.aAlt[c].szWord, pAlt->apAlt[c]->szWord);
		}

		pxrc->answer.aAlt[c].cost = SOFT_MAX_UNITY - pOut[c];

		if (!pxrc->answer.aAlt[c].pMap)
		{
			pxrc->answer.aAlt[c].pMap = dupWordMap(pMapInf, pAlt->apAlt[c]->szWord);
			pxrc->answer.aAlt[c].pXRC = pxrc;
			pxrc->answer.aAlt[c].cWords = 1;
			++pxrc->answer.cAlt;
		}


	}

	TruncateWordALTERNATES (&pxrc->answer, cAlt);

	qsort(pxrc->answer.aAlt, pxrc->answer.cAlt, sizeof (XRCRESULT), CompareXRCRES);

	iRet = 1;

exit:
	ExternFree(pNetMem);
	return iRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\onecharnet.h ===
/****************************************************************
*
* NAME: oneCharNet .h
*
*
* DESCRIPTION:
*
* Definitions for running the one char net
*
***************************************************************/
#ifndef H_ONE_CHAR_H
#define H_ONE_CHAR_H

#include <runNet.h>

BOOL LoadOneCharNets (HINSTANCE hInst);
void UnLoadOneCharNets();
int RunOneCharAvalancheNNet (XRC *pxrc, PALTERNATES *pAlt, ALTINFO *pAltInfo);


#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\panel.h ===
// Panel.h
// James A. Pittman
// July 23, 1998

// Recognizes an entire panel at once by looping over lines, then looping over
// ink blobs that have large gaps between them, and finally looping over the strokes
// within a blob, using recognition scores to help decide what is a word and what is not.

// Eventually we should include a look at the gaps between the strokes, and include
// the mean and std dev from such breaks from labeled data.

#ifndef _PANEL_
#define _PANEL_

// These are already included by those who include this header file,
// and they are not protected from being included twice.

//#include "nfeature.h"
//#include "engine.h"

#include "common.h"
#include "bear.h"

// Number of alternates to generate in Word and pnel mode
#define MAX_ALT_WORD		(32)
#define MAX_ALT_PHRASE		(10)

extern int		WordModeRecognize	(XRC *pxrc);

extern int		PanelModeRecognize	(XRC *pxrc, DWORD dwRecoMode);

extern int		RecognizeWord (XRC *pxrcInferno, BEARXRC *pxrcBear, WORDMAP *pWordMap, 
							   BOOL bInfernoMap, int yDev, ALTERNATES *pAlt, int bAval);

extern GLYPH *	GlyphFromWordMap (GLYPH *pMainGlyph, WORDMAP *pMap);

extern void		ShiftFrame (FRAME *pFrame, int dx, int dy);

extern int		initPhraseHRC(XRC *pMainXrc, GLYPH *pGlyph, HRC *phrc);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\normal.c ===
// Normal.c
// James A. Pittman

// Table of probabilities from the normal distribution, with each entry representing
// the area under the curve of a one-sixteenth slice.  Floats should be multiplied
// by 16 and converted to an int to index into this table.  In other words the index
// represents x' (sometimes called the z score), bit shifted 4 to the left.
// x' (or z) is computed as (x - mean) / stddev

// Note that the table is folded, since it is symmetric.

// The probs in this table are exp(-((x*x)/2)) * (1/16) / sqrt(2*PI),
// but then converted to a log-prob using a scale of -2961.865623695891
// The x in this formula for aNormalTable[i] is i*(1/16) + (1/32).

#include <common.h>
#include "Normal.h"

#ifdef DPROB
#define PROBCONST(f,l) f
#else
#define PROBCONST(f,l) l
#endif

#define MAXZ 112
#define NORMTABLESHIFT 4

static const PROB aNormalTable[MAXZ+1] =
{PROBCONST(0.024922, 10935),
 PROBCONST(0.024825, 10946),
 PROBCONST(0.024631, 10969),
 PROBCONST(0.024344, 11004),
 PROBCONST(0.023967, 11050),
 PROBCONST(0.023503, 11108),
 PROBCONST(0.022959, 11178),
 PROBCONST(0.022340, 11259),
 PROBCONST(0.021652, 11351),
 PROBCONST(0.020904, 11455),
 PROBCONST(0.020104, 11571),
 PROBCONST(0.019258, 11698),
 PROBCONST(0.018376, 11837),
 PROBCONST(0.017466, 11988),
 PROBCONST(0.016537, 12150),
 PROBCONST(0.015596, 12323),
 PROBCONST(0.014651, 12508),

 PROBCONST(0.013709, 12705),
 PROBCONST(0.012779, 12913),
 PROBCONST(0.011865, 13133),
 PROBCONST(0.010973, 13364),
 PROBCONST(0.010109, 13607),
 PROBCONST(0.009276, 13862),
 PROBCONST(0.008479, 14128),
 PROBCONST(0.007720, 14406),
 PROBCONST(0.007002, 14695),
 PROBCONST(0.006326, 14996),
 PROBCONST(0.005693, 15308),
 PROBCONST(0.005103, 15632),
 PROBCONST(0.004556, 15968),
 PROBCONST(0.004052, 16315),
 PROBCONST(0.003590, 16673),
 PROBCONST(0.003168, 17044),

 PROBCONST(0.002785, 17425),
 PROBCONST(0.002439, 17819),
 PROBCONST(0.002127, 18224),
 PROBCONST(0.001848, 18640),
 PROBCONST(0.001599, 19068),
 PROBCONST(0.001379, 19508),
 PROBCONST(0.001184, 19959),
 PROBCONST(0.001013, 20422),
 PROBCONST(0.000863, 20896),
 PROBCONST(0.000732, 21382),
 PROBCONST(0.000619, 21880),
 PROBCONST(0.000521, 22389),
 PROBCONST(0.000437, 22909),
 PROBCONST(0.000365, 23442),
 PROBCONST(0.000304, 23985),
 PROBCONST(0.000252, 24541),

 PROBCONST(0.000208, 25108),
 PROBCONST(0.000171, 25686),
 PROBCONST(0.000140, 26276),
 PROBCONST(0.000115, 26878),
 PROBCONST(9.31E-05, 27491),
 PROBCONST(7.54E-05, 28116),
 PROBCONST(6.08E-05, 28752),
 PROBCONST(4.89E-05, 29400),
 PROBCONST(3.91E-05, 30060),
 PROBCONST(3.12E-05, 30731),
 PROBCONST(2.48E-05, 31413),
 PROBCONST(1.96E-05, 32107),
 PROBCONST(1.54E-05, 32813),
 PROBCONST(1.21E-05, 33531),
 PROBCONST(9.47E-06, 34259),
 PROBCONST(7.38E-06, 35000),

 PROBCONST(5.72E-06, 35752),
 PROBCONST(4.42E-06, 36516),
 PROBCONST(3.40E-06, 37291),
 PROBCONST(2.61E-06, 38077),
 PROBCONST(1.99E-06, 38876),
 PROBCONST(1.52E-06, 39686),
 PROBCONST(1.15E-06, 40507),
 PROBCONST(8.68E-07, 41340),
 PROBCONST(6.52E-07, 42185),
 PROBCONST(4.89E-07, 43041),
 PROBCONST(3.64E-07, 43909),
 PROBCONST(2.71E-07, 44788),
 PROBCONST(2.00E-07, 45679),
 PROBCONST(1.48E-07, 46581),
 PROBCONST(1.09E-07, 47495),
 PROBCONST(7.94E-08, 48421),

 PROBCONST(5.79E-08, 49358),
 PROBCONST(4.20E-08, 50307),
 PROBCONST(3.04E-08, 51267),
 PROBCONST(2.19E-08, 52239),
 PROBCONST(1.57E-08, 53222),
 PROBCONST(1.12E-08, 54217),
 PROBCONST(7.99E-09, 55224),
 PROBCONST(5.67E-09, 56242),
 PROBCONST(4.00E-09, 57272),
 PROBCONST(2.82E-09, 58313),
 PROBCONST(1.97E-09, 59366),
 PROBCONST(1.38E-09, 60430),
 PROBCONST(9.58E-10, 61506),
 PROBCONST(6.64E-10, 62594),
 PROBCONST(4.58E-10, 63693),
 PROBCONST(3.15E-10, 64804),

 PROBCONST(2.15E-10, 65926),
 PROBCONST(1.47E-10, 67060),
 PROBCONST(9.98E-11, 68205),
 PROBCONST(6.75E-11, 69362),
 PROBCONST(4.55E-11, 70531),
 PROBCONST(3.06E-11, 71711),
 PROBCONST(2.04E-11, 72903),
 PROBCONST(1.36E-11, 74106),
 PROBCONST(9.03E-12, 75321),
 PROBCONST(5.97E-12, 76547),
 PROBCONST(3.93E-12, 77785),
 PROBCONST(2.58E-12, 79035),
 PROBCONST(1.68E-12, 80296),
 PROBCONST(1.10E-12, 81568),
 PROBCONST(7.10E-13, 82853),
 PROBCONST(4.59E-13, 84148)};

// Converts a numerical value into a probability, given a particular
// normal distribution.  Returns the prob or log-prob.

PROB NormalProb(int x, int mean, int stddev)
{
	int z = (abs(x - mean) << NORMTABLESHIFT) / stddev;
	if (MAXZ < z)
		z = MAXZ;
	return aNormalTable[z];
}

PROB BestNormalProb()
{
	return aNormalTable[0];
}

PROB WorstNormalProb()
{
	return aNormalTable[MAXZ];
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\recoutil.h ===
// This file contains utility functions a recognizer should provide for WISP 
// Author: Ahmad A. AbdulKader (ahmadab)
// August 10th 2001

#include <common.h>
#include <limits.h>
#include <string.h>

#include "xrcreslt.h"
#include "bear.h"

#ifndef __RECOUTIL_H__

#define __RECOUTIL_H__



XRC		*WordMapRunInferno	(XRC *pxrcMain, int yDev, WORD_MAP *pWordMap);

BOOL	WordMapRunBear		(XRC *pxrc, WORD_MAP *pWordMap);

// Any recognizer must implement these four functions
BOOL	WordMapRecognize	(	XRC					*pxrc, 
								BEARXRC				*pxrcBear,
								LINE_SEGMENTATION	*pLineSeg, 
								WORD_MAP			*pMap, 
								ALTERNATES			*pAlt
							);

BOOL	WordMapRecognizeWrap	(	XRC					*pxrc, 
									BEARXRC				*pxrcBear,
									LINE_SEGMENTATION	*pLineSeg, 
									WORD_MAP			*pMap, 
									ALTERNATES			*pAlt
								);

BOOL	WordModeGenLineSegm		(XRC *pxrc);

BOOL Top1WordsEqual(XRC *pxrc, BEARXRC *pBearXrc, WORDMAP *pMap, int *piWordInfIdx);
BOOL copySingleWordAltList(ALTERNATES *pDestAlt, ALTERNATES *pSrcAlt, WORDMAP *pMap, XRC *pxrc);
BOOL insertEmptyStringintEmptyAlt(ALTERNATES *pAlt, int cStroke, int *piStrokeIndex, XRC *pxrc);

LINE_SEGMENTATION	*GenLineSegm (int cWord, WORDINFO *pWordInfo, XRC *pxrc);

#endif  // __RECOUTIL_H__
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\recoutil.c ===
// This file contains utility functions a recognizer should provide for WISP 
// Author: Ahmad A. AbdulKader (ahmadab)
// August 10th 2001

#include <common.h>
#include <limits.h>
#include <string.h>

#include "xrcreslt.h"
#include "bear.h"
#include "avalanche.h"
#include "avalanchep.h"
#include "recoUtil.h"
#include <GeoFeats.h>
#include <baseline.h>
#include <runNet.h>

HRC	InfernoRecognize	(XRC *pMainXrc, GLYPH *pGlyph, GUIDE *pGuide, int yDev, BOOL bWordMode);

extern unsigned short UniReliable(unsigned char *pszWord,BOOL bInf);
extern unsigned short BiReliable(unsigned char *pszWord,BOOL bInf);

// runs inferno on a word_map and stores the ALT_LIST
XRC *WordMapRunInferno (XRC *pxrcMain, int yDev, WORD_MAP *pWordMap)
{
	WORDMAP			WordMap;
	GLYPH			*pGlyph	=	NULL;
	XRC				*pxrc	=	NULL;
	BOOL			bRet	=	FALSE;

	// if we already have an alt list free it
	if (pWordMap->pInfernoAltList)
	{
		FreeWordAltList (pWordMap->pInfernoAltList);
		ExternFree (pWordMap->pInfernoAltList);

		pWordMap->pInfernoAltList	=	NULL;
	}

	// do we have any strokes
	if (!pWordMap->cStroke)
		goto exit;

	if (!WordMapNew2Old (pWordMap, &WordMap, FALSE))
		goto exit;

	// get the glyph corresponding to this word map
	pGlyph	=	GlyphFromWordMap (pxrcMain->pGlyph, &WordMap);
	if (!pGlyph)
		goto exit;

	// allocate a word feat 
	if (!pWordMap->pFeat)
	{
		pWordMap->pFeat	=	(WORD_FEAT *) ExternAlloc (sizeof (*pWordMap->pFeat));
		if (!pWordMap->pFeat)
			goto exit;

		memset (pWordMap->pFeat, 0, sizeof (*pWordMap->pFeat));
	}

	// compute the rectangle
	GetRectGLYPH (pGlyph, &pWordMap->pFeat->rect);
	
	// pass the word map to inferno
	if (pxrcMain->bGuide)
	{
		pxrc		=	(XRC *)InfernoRecognize (pxrcMain, pGlyph, &pxrcMain->guide, yDev, TRUE);
		if (!pxrc)
			goto exit;
	}
	else
	{
		pxrc		=	(XRC *)InfernoRecognize (pxrcMain, pGlyph, NULL, yDev, TRUE);
		if (!pxrc)
			goto exit;
	}

	pWordMap->pFeat->cSeg	=	pxrc->nfeatureset->cSegment;
	if (pWordMap->pFeat->cSeg <= 0)
		goto exit;

	// create an inferno alt list
	if (!pWordMap->pInfernoAltList)
	{
		pWordMap->pInfernoAltList	=	
			(WORD_ALT_LIST *) ExternAlloc (sizeof (*pWordMap->pInfernoAltList));
	
		if (!pWordMap->pInfernoAltList)
			goto exit;
	}

	memset (pWordMap->pInfernoAltList, 0, sizeof (*pWordMap->pInfernoAltList));

	// convert from old to new style, no cloning
	if (!AltListOld2New (&pxrc->answer, pWordMap->pInfernoAltList, TRUE))
		goto exit;

	bRet	=	TRUE;

exit:
	// destroy the glyph if allocated
	if (pGlyph)
	{
		DestroyGLYPH (pGlyph);
	}


	return pxrc;
}


// runs bear on a word_map and stores the ALT_LIST
BOOL WordMapRunBear (XRC *pxrc, WORD_MAP *pWordMap)
{
	WORDMAP			WordMap;
	GLYPH			*pGlyph		=	NULL;
	BEARXRC			*pxrcBear;
	HRC				hrcCallig	=	NULL;
	BOOL			bRet		=	FALSE;

	// if we already have an alt list free it
	if (pWordMap->pBearAltList)
	{
		FreeWordAltList (pWordMap->pBearAltList);
		ExternFree (pWordMap->pBearAltList);

		pWordMap->pBearAltList	=	NULL;
	}

	// do we have a new stroke
	if (!pWordMap->cStroke)
		return FALSE;

	if (!WordMapNew2Old (pWordMap, &WordMap, FALSE))
		return FALSE;

	// get the glyph corresponding to this word map
	pGlyph	=	GlyphFromWordMap (pxrc->pGlyph, &WordMap);
	if (!pGlyph)
		goto exit;

	// allocate a word feat 
	if (!pWordMap->pFeat)
	{
		pWordMap->pFeat	=	(WORD_FEAT *) ExternAlloc (sizeof (*pWordMap->pFeat));
		if (!pWordMap->pFeat)
			goto exit;

		memset (pWordMap->pFeat, 0, sizeof (*pWordMap->pFeat));
	}

	// compute the rectangle
	GetRectGLYPH (pGlyph, &pWordMap->pFeat->rect);

	// let bear recognize the ink corresponding to this word map in word mode
	if (WordMap.cStrokes > 0)
		hrcCallig	=	BearRecognize (pxrc, pxrc->pGlyph, &WordMap, 1);			
	else
		hrcCallig	=	NULL;

	if (!hrcCallig)
		return FALSE;
	
	
	pxrcBear	=	(BEARXRC *) hrcCallig;

	// convert the altlist
	// create an inferno alt list
	pWordMap->pBearAltList	=	
		(WORD_ALT_LIST *) ExternAlloc (sizeof (*pWordMap->pBearAltList));

	if (!pWordMap->pBearAltList)
		return FALSE;

	memset (pWordMap->pBearAltList, 0, sizeof (*pWordMap->pBearAltList));

	// copy the alt list with no cloning
	AltListOld2New (&pxrcBear->answer, pWordMap->pBearAltList, FALSE);

	// clear the old alternates structure
	ClearALTERNATES (&WordMap.alt);

	bRet	=	TRUE;

exit:
	// destroy the glyph if allocated
	if (pGlyph)
	{
		DestroyGLYPH (pGlyph);
	}

	if (hrcCallig)
	{
		// destroy bear's hrc
		BearDestroyHRC (hrcCallig);
	}

	return (bRet && pWordMap->pBearAltList->cAlt > 0);
}


// A wrapper function for WordMapRecognize. This functions first
// tries to scale the glyph then calls WordMapRecognize(). It should 
// be used by functions in wisp that do not go through PanelModeRecognize(0
// or  WordModeRecognize()
BOOL WordMapRecognizeWrap	(	XRC				*pxrc, 
								BEARXRC			*pxrcBear,
								LINE_SEGMENTATION	*pLineSeg, 
								WORD_MAP			*pMap, 
								ALTERNATES			*pAlt
							)
{
	GUIDE		ScaledGuide, *pScaledGuide, OrigGuide;	
	GLYPH		*pScaledGlyph	=	NULL, *pOrigGlyph;
	INKLINE		line;
	WORDMAP		WordMap;
	BOOL		bRet = FALSE;

	// Save the current guide and glyph
	OrigGuide	= pxrc->guide;
	pOrigGlyph	= pxrc->pGlyph;

	if (!pxrc->pGlyph)
	{
		return FALSE;
	}

	// point to the guide
	if (TRUE == pxrc->bGuide)
	{
		ScaledGuide		=	pxrc->guide;
		pScaledGuide	=	&ScaledGuide;
	}
	else
	{
		memset(&ScaledGuide, 0, sizeof(ScaledGuide));
		pScaledGuide	=	NULL;
	}

	// This is unfortunate - We will only use the glyph element
	// in line
	memset(&line, 0, sizeof(line));
	WordMapNew2Old (pMap, &WordMap, FALSE);
	line.pGlyph		=	GlyphFromWordMap (pxrc->pGlyph, &WordMap);

	if (!line.pGlyph)
	{
		return FALSE;
	}

	// scale the ink and temporary replace the glyph in the xrc
	// With a copy
	pxrc->pGlyph	=	TranslateAndScaleLine (&line, pScaledGuide);
	if (NULL == pxrc->pGlyph)
	{
		return FALSE;
	}

	pxrc->guide		=	ScaledGuide;


	if (pxrc->pGlyph)
	{
		bRet = WordMapRecognize(pxrc, pxrcBear, pLineSeg, pMap, pAlt);

		DestroyFramesGLYPH (pxrc->pGlyph);
		DestroyGLYPH (pxrc->pGlyph);
	}

	// Restore the Guide and Glyph
	pxrc->guide = OrigGuide;
	pxrc->pGlyph = pOrigGlyph;

	// Remove the Glyph for this line
	DestroyGLYPH(line.pGlyph);

	return bRet;
}

// checks whether top1 alternate for bear and inferno is equal for the a specific word map
BOOL Top1WordsEqual(XRC *pxrc, BEARXRC *pBearXrc, WORDMAP *pMap, int *piWordInfIdx)
{
	unsigned char	*pszInfStr	=	NULL, 
					*pszBearStr	=	NULL;

	int				iInfWord, 
					iBearWord,
					cLen;

	// init 
	(*piWordInfIdx)	=	-1;

	// check that we have at least one alternate
	if (!pxrc || !pBearXrc || pxrc->answer.cAlt < 1 || pBearXrc->answer.cAlt < 1)
	{
		return FALSE;
	}

	// search in inferno
	iInfWord	=	FindWordMapInXRCRESULT (pxrc->answer.aAlt, pMap);
	if (iInfWord == -1)
	{
		return FALSE;
	}

	iBearWord	=	FindWordMapInXRCRESULT (pBearXrc->answer.aAlt, pMap);
	if (iBearWord == -1 || pBearXrc->answer.aAlt[0].pMap[iBearWord].alt.cAlt < 1)
	{
		return FALSE;
	}

	(*piWordInfIdx)	=	iBearWord;

	pszInfStr	=	pxrc->answer.aAlt[0].szWord + pxrc->answer.aAlt[0].pMap[iInfWord].start;
	cLen		=	pxrc->answer.aAlt[0].pMap[iInfWord].len;

	return (!strncmp (pszInfStr, pBearXrc->answer.aAlt[0].pMap[iBearWord].alt.aAlt[0].szWord, cLen));
}

// Copy the alternates from a one ALTERNATE to a destination ALTERNATE
// NOTES:
// (1) This is works when the ALTERNATES are word not phrase ALTERNATES
//		 AND 
// The Source alternate is a Bear alternate, i.e. The best cost is the largest value;
//
// (2) Confidence is set RECOCONF_HIGHCONFIDENCE
//
BOOL copySingleWordAltList(ALTERNATES *pDestAlt, ALTERNATES *pSrcAlt, WORDMAP *pMap, XRC *pxrc)
{
	XRCRESULT	*pRes;
	UINT		iAlt, cMaxAlt;
	int			iMaxCost;

	pRes						= pSrcAlt->aAlt;
	cMaxAlt						= min(pSrcAlt->cAlt, TOT_CAND);
	pDestAlt->iConfidence		= RECOCONF_HIGHCONFIDENCE;

	if (cMaxAlt > 0)
	{
		iMaxCost = pRes[0].cost;
	}

	for (iAlt = 0 ; iAlt < cMaxAlt ; ++iAlt, ++pRes)
	{
		ASSERT(pRes->cost <= iMaxCost);

		if ( InsertALTERNATES (pDestAlt, iMaxCost - pRes->cost, pRes->szWord, pxrc) < 0)
		{
			break;
		}

		// Asumes only 1 word per map
		if (FALSE == XRCRESULTcopyWordMaps(pDestAlt->aAlt+iAlt, 1, pMap))
		{
			break;
		}

	}

	if (iAlt == cMaxAlt)
	{
		return TRUE;
	}

	return FALSE;

}

// computes the final alt list for a wordmap
BOOL WordMapRecognize	(	XRC					*pxrc, 
						    BEARXRC				*pBearXrc,
							LINE_SEGMENTATION	*pLineSeg, 
							WORD_MAP			*pMap, 
							ALTERNATES			*pAlt
						)
{
	int			yDev, iWordBearIdx;
	ALTERNATES	altBear;
	XRC			*pxrcInferno	=	NULL;
	BOOL		bRet			=	FALSE;
	XRCRESULT	*pRes;
	WORDMAP		WordMap;
	

	// do we already have a final altlist
	if (pMap->pFinalAltList)
		return TRUE;

	yDev	=	pLineSeg->iyDev;

	// convert to old style wordmap
	WordMapNew2Old (pMap, &WordMap, FALSE);

	if (pBearXrc && Top1WordsEqual(pxrc, pBearXrc, &WordMap, &iWordBearIdx))
	{
		ALTERNATES	Alt;
		GLYPH		*pWordGlyph;

		// init
		memset (&Alt, 0, sizeof (Alt));
		Alt.cAltMax	=	MAXMAXALT;

		// allocate memory for the final alt list
		pMap->pFinalAltList	=	
			ExternAlloc (sizeof (*pMap->pFinalAltList));

		if (!pMap->pFinalAltList)
			goto exit;

		if (FALSE == copySingleWordAltList(&Alt, &(pBearXrc->answer.aAlt[0].pMap[iWordBearIdx].alt), &WordMap, pxrc))
		{
			goto exit;
		}

		insertLatinLayoutMetrics(pxrc, &Alt, NULL);
		pMap->iConfidence = RECOCONF_HIGHCONFIDENCE;

		// call sole to handle one char processing
		pWordGlyph	=	GlyphFromWordMap (pxrc->pGlyph, &WordMap);
		ASSERT (pWordGlyph);

		if (pWordGlyph)
		{
			CallSole (pxrc, pWordGlyph, pxrc->bGuide ? &pxrc->guide : NULL, &Alt);

			DestroyGLYPH (pWordGlyph);
		}

		if (!AltListOld2New (&Alt, pMap->pFinalAltList, TRUE))
		{
			goto exit;
		}

		// do we also need to copy the results to an old style alt-list
		if (pAlt)
		{
			// copy the Alt list
			memcpy(pAlt, &Alt, sizeof(Alt));
		}
		else
		{
			ClearALTERNATES (&Alt);
		}

		if (!pMap->pInfernoAltList)
		{
			pMap->pInfernoAltList	=	pMap->pFinalAltList;
		}

		if (!pMap->pBearAltList)
		{
			pMap->pBearAltList		=	pMap->pFinalAltList;
		}

		return TRUE;
	}

	// run bear if needed
	if (!pMap->pBearAltList)
	{
		WordMapRunBear (pxrc, pMap);
	}

	// run inferno if needed, save the xrc we might need if avalanche will run
	if (!pMap->pInfernoAltList)
	{
		// we do not have an inferno alt list, get it
		// if inferno fails, we'll exit. This should be very rare
		pxrcInferno	=	WordMapRunInferno (pxrc, yDev, pMap);
		if (!pxrcInferno)
			goto exit;
	}
	
	// Avalanche needs us to feed forward the ink thru inferno
	// if we had not done that already
	if (!pxrcInferno)
	{
		GLYPH	*pGlyph;

		pGlyph		=	GlyphFromWordMap (pxrc->pGlyph, &WordMap);
		if (!pGlyph)
			goto exit;

		if (pxrc->bGuide)
		{
			pxrcInferno	=	(XRC *)InfernoRecognize (pxrc, pGlyph, &pxrc->guide, yDev, TRUE);
		}
		else
		{
			pxrcInferno	=	(XRC *)InfernoRecognize (pxrc, pGlyph, NULL, yDev, TRUE);
		}

		DestroyGLYPH(pGlyph);
	}

	// if inferno fails, we'll exit. This should be very rare
	if (!pxrcInferno)
		goto exit;

	// copy the bear alt list to the wordmap
	// we are doing this to avoid running bear again
	if (pMap->pBearAltList)
	{
		if (!AltListNew2Old ((HRC)pxrcInferno, pMap, pMap->pBearAltList, &altBear, FALSE))
			goto exit;
	
		// now pass this to avalanche
		Avalanche (pxrcInferno, &altBear);
	}

	else
	{
		Avalanche (pxrcInferno,NULL);

	}
	// copy the confidence value
	pMap->iConfidence	=	pxrcInferno->answer.iConfidence;

	// allocate memory for the final alt list
	pMap->pFinalAltList	=	
		ExternAlloc (sizeof (*pMap->pFinalAltList));

	if (!pMap->pFinalAltList)
		goto exit;

	if (0 == pxrcInferno->answer.cAlt)
	{
		if (FALSE == insertEmptyStringintEmptyAlt(&pxrcInferno->answer, pMap->cStroke, pMap->piStrokeIndex, pxrcInferno))
		{
			goto exit;
		}
	}

	// copy the resulting alt list to the final altlist
	if (!AltListOld2New (&pxrcInferno->answer, pMap->pFinalAltList, TRUE))
		goto exit;

	// do we also need to copy the results to an old style alt-list
	if (pAlt)
	{
		// copy the Alt list
		memcpy(pAlt, &pxrcInferno->answer, sizeof(pxrcInferno->answer));

		// Because we copied over the pointers to allocated
		// memory make sure allocated buffers in the XRC are not freed
		memset(&(pxrcInferno->answer), 0, sizeof(pxrcInferno->answer));
	}


	bRet	=	TRUE;

exit:
	if (pxrcInferno)
	{
		DestroyHRC ((HRC) pxrcInferno);
	}

	// if we failed, free the final alt list
	if (!bRet)
	{
		if (pMap->pFinalAltList)
		{
			FreeWordAltList (pMap->pFinalAltList);

			ExternFree (pMap->pFinalAltList);
			pMap->pFinalAltList	=	NULL;
		}
	}
	
	return bRet;
}

/****************************************************************
*
* NAME: insertEmptyStringintEmptyAlt
*
* DESCRIPTION:
*   This is a V1 workaround for an empty alt list.
*	This function inserta a single Alternate with an empty string
*
* HISTORY
*
*	Introduced April 2002 (mrevow)
*
***************************************************************/
BOOL insertEmptyStringintEmptyAlt(ALTERNATES *pAlt, int cStroke, int *piStrokeIndex, XRC *pxrc)
{
	WORDMAP		*pMap;

	if (0 == pAlt->cAlt)
	{
		memset(&pAlt->aAlt, 0, sizeof(pAlt->aAlt));
		memset(&pAlt->all, 0, sizeof(pAlt->all));

		pAlt->cAlt = 1;
		pAlt->aAlt[0].cWords	= 1;
		pAlt->aAlt[0].cost		= SOFT_MAX_UNITY;
		pAlt->aAlt[0].pXRC		= pxrc;

		pAlt->aAlt[0].szWord = (unsigned char *)ExternAlloc(sizeof(pAlt->aAlt[0].szWord));
		if (NULL == pAlt->aAlt[0].szWord)
		{
			return FALSE;
		}
		*pAlt->aAlt[0].szWord	= '\0';

		pMap = pAlt->aAlt[0].pMap		= ExternAlloc(sizeof(*pAlt->aAlt[0].pMap));
		if (NULL == pAlt->aAlt[0].pMap)
		{
			goto fail;
		}

		memset(pMap, 0, sizeof(*pMap));
		pMap->piStrokeIndex	= ExternAlloc(cStroke * sizeof(*pAlt->aAlt[0].pMap->piStrokeIndex));
		if (NULL == pMap->piStrokeIndex)
		{
			goto fail;
		}

		memcpy(pMap->piStrokeIndex, piStrokeIndex, cStroke * sizeof(*pMap->piStrokeIndex));
		pMap->cStrokes	= cStroke;
		pMap->len		= 0;
		pMap->start		= 0;
		pAlt->iConfidence = RECOCONF_LOWCONFIDENCE;
	}

	return TRUE;

fail:
	ExternFree(pAlt->aAlt[0].szWord);
	ExternFree(pAlt->aAlt[0].pMap);
	return FALSE;
}

// generates a degenerate linesegmentation representation of the single segmentation
// present in the input words
LINE_SEGMENTATION	*GenLineSegm (int cWord, WORDINFO *pWordInfo, XRC *pxrc)
{
	BOOL				bRet		=	FALSE;
	LINE_SEGMENTATION	*pResults	=	NULL;
	SEG_COLLECTION		*pSegCol;
	SEGMENTATION		*pSeg;
	int					w;
	WORDINFO			*pWrd;
	
	// allocate and init the output struct
	pResults	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pResults));
	if (!pResults)
		goto exit;

	memset (pResults, 0, sizeof (*pResults));

	// this is an empty answer, there is nothing to do 
	if (cWord <= 0 || !pWordInfo)
	{
		bRet	=	TRUE;
		goto exit;
	}

	// there is only going to be a one segcol and one segmentation
	pSegCol				=	AddNewSegCol (pResults);
	if (!pSegCol)
		goto exit;

	// reserve room for one segmentation
	pSegCol->ppSeg		=	(SEGMENTATION **) ExternAlloc (sizeof (*pSegCol->ppSeg));
	if (!pSegCol->ppSeg)
		goto exit;

	// alloc, init the segmentation and add to the segcol
	pSeg			=	(SEGMENTATION *) ExternAlloc (sizeof (*pSeg));
	if (!pSeg)
		goto exit;

	pSegCol->ppSeg[0]	=	pSeg;
	pSegCol->cSeg		=	1;

	memset (pSeg, 0, sizeof (*pSeg));

	// preallocate and init buffer for wordmaps in linesegm
	pResults->ppWord	=	(WORD_MAP **) ExternAlloc (cWord * sizeof (*pResults->ppWord));
	if (!pResults->ppWord)
		goto exit;

	memset (pResults->ppWord, 0, cWord * sizeof (*pResults->ppWord));

	pResults->cWord	=	cWord;

	// preallocate and init buffer for wordmaps in segmentation
	pSeg->ppWord	=	(WORD_MAP **) ExternAlloc (cWord * sizeof (*pSeg->ppWord));
	if (!pSeg->ppWord)
		goto exit;

	memset (pSeg->ppWord, 0, cWord * sizeof (*pSeg->ppWord));

	pSeg->cWord	=	cWord;
	
	for (w = 0, pWrd = pWordInfo; w < cWord; w++, pWrd++)
	{
		WORD_MAP	*pMap;
		int			iStrk;

		// add a new wordmap to linesegm and seg
		pMap	=	(WORD_MAP *) ExternAlloc (sizeof (*pMap));
		if (!pMap)
			goto exit;

		memset (pMap, 0, sizeof (*pMap));

		pSeg->ppWord[w]	=	pResults->ppWord[w]	=	pMap;
		
		for (iStrk = 0; iStrk < pWrd->cStrokes; iStrk++)
		{
			if (!AddNewStroke (pMap, pWrd->piStrokeIndex[iStrk]))
				return FALSE;
		}

		// copy the confidence value
		pMap->iConfidence	=	pWrd->alt.iConfidence;

		// allocate the final alt list
		pMap->pFinalAltList	=	
			(WORD_ALT_LIST *) ExternAlloc (sizeof (*pMap->pFinalAltList));
		if (!pMap->pFinalAltList)
			goto exit;

		memset (pMap->pFinalAltList, 0, sizeof (*pMap->pFinalAltList));

		// April 2002 - V1 Workaround - Ensure at least one string in the altList
		if (0 == pWrd->alt.cAlt)
		{
			if (FALSE == insertEmptyStringintEmptyAlt(&pWrd->alt, pWrd->cStrokes, pWrd->piStrokeIndex, pxrc))
			{
				goto exit;
			}
		}

		// copy the alt list to the final alt list of the new wordmap
		AltListOld2New (&pWrd->alt, pMap->pFinalAltList, TRUE);

		// Inferno's altlist is the same as the final one. The freeing code is ready for this
		pMap->pInfernoAltList =   pMap->pFinalAltList;
	}

	bRet	=	TRUE;

exit:
	if (bRet)
	{
		return pResults;
	}
	else
	{
		if (pResults)
			FreeLineSegm (pResults);

		ExternFree (pResults);

		return NULL;
	}
}

// generates a wordmode degenerate linesegmentation representation of 
// the single segmentation present in the Xrc
BOOL	WordModeGenLineSegm		(XRC *pxrc)
{
	BOOL				bRet		=	FALSE;
	LINE_SEGMENTATION	*pResults	=	NULL;
	SEG_COLLECTION		*pSegCol;
	SEGMENTATION		*pSeg;
	WORDMAP				*pOldWordMap;
	WORD_MAP			*pMap;
	int					iStrk;
	INKLINE				*pLine;
	
	// are we realy in wordmode
	if (!(pxrc->flags & RECOFLAG_WORDMODE))
		return FALSE;

	// make sure we have a wordmode valid line breaking
	if (!pxrc->pLineBrk || pxrc->pLineBrk->cLine != 1)
		return FALSE;

	// point to the one and only line
	pLine	=	pxrc->pLineBrk->pLine;

	// does the linsesegm info already exist
	if (pLine->pResults)
		return TRUE;

	// allocate and init the output struct
	pLine->pResults	=	pResults	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pResults));
	if (!pResults)
		goto exit;

	memset (pResults, 0, sizeof (*pResults));

	// there is only going to be a one segcol and one segmentation
	pSegCol				=	AddNewSegCol (pResults);
	if (!pSegCol)
		goto exit;

	// reserve room for one segmentation
	pSegCol->ppSeg		=	(SEGMENTATION **) ExternAlloc (sizeof (*pSegCol->ppSeg));
	if (!pSegCol->ppSeg)
		goto exit;

	// alloc, init the segmentation and add to the segcol
	pSeg				=	(SEGMENTATION *) ExternAlloc (sizeof (*pSeg));
	if (!pSeg)
		goto exit;

	pSegCol->ppSeg[0]	=	pSeg;
	pSegCol->cSeg		=	1;

	memset (pSeg, 0, sizeof (*pSeg));

	// preallocate and init buffer for wordmaps in linesegm
	pResults->ppWord	=	(WORD_MAP **) ExternAlloc (sizeof (*pResults->ppWord));
	if (!pResults->ppWord)
		goto exit;

	memset (pResults->ppWord, 0, sizeof (*pResults->ppWord));

	// if we have no alternates, leave the line segmentation empty
	if (pxrc->answer.cAlt <= 0)
	{
		bRet	=	TRUE;
		goto exit;
	}

	pResults->cWord	=	1;

	// preallocate and init buffer for wordmaps in segmentation
	pSeg->ppWord		=	(WORD_MAP **) ExternAlloc (sizeof (*pSeg->ppWord));
	if (!pSeg->ppWord)
		goto exit;

	memset (pSeg->ppWord, 0, sizeof (*pSeg->ppWord));

	pSeg->cWord			=	1;
	
	// point to the only wordmap
	pOldWordMap	=	pxrc->answer.aAlt[0].pMap;

	// add a new wordmap to linesegm and seg
	pMap	=	(WORD_MAP *) ExternAlloc (sizeof (*pMap));
	if (!pMap)
		goto exit;

	memset (pMap, 0, sizeof (*pMap));

	pSeg->ppWord[0]	=	pResults->ppWord[0]	=	pMap;
	
	for (iStrk = 0; iStrk < pOldWordMap->cStrokes; iStrk++)
	{
		if (!AddNewStroke (pMap, pOldWordMap->piStrokeIndex[iStrk]))
			return FALSE;
	}

	// copy the confidence value
	pMap->iConfidence	=	pxrc->answer.iConfidence;

	// allocate the final alt list
	pMap->pFinalAltList	=	
		(WORD_ALT_LIST *) ExternAlloc (sizeof (*pMap->pFinalAltList));
	if (!pMap->pFinalAltList)
		goto exit;

	memset (pMap->pFinalAltList, 0, sizeof (*pMap->pFinalAltList));

	// April 2002 - V1 Workaround - Ensure at least one string in the altList
	if (0 == pxrc->answer.cAlt)
	{
		int		cStroke, iStroke, *piStroke, *pi;
		GLYPH	*pGlyph;

		if (NULL == pxrc->pGlyph)
		{
			goto exit;
		}

		cStroke = CframeGLYPH(pxrc->pGlyph);
		if (cStroke <= 0)
		{
			goto exit;
		}

		pi = piStroke = ExternAlloc(sizeof(*piStroke) * cStroke);
		if (NULL == piStroke)
		{
			goto exit;
		}

		pGlyph = pxrc->pGlyph;
		for (iStroke = 0 ; iStroke < cStroke && pGlyph ; ++iStroke , pGlyph = pGlyph->next)
		{
			if (pGlyph->frame && IsVisibleFRAME(pGlyph->frame))
			{
				*pi = pGlyph->frame->iframe;
				++pi;
			}
		}

		if (FALSE == insertEmptyStringintEmptyAlt(&pxrc->answer, cStroke, piStroke, pxrc))
		{
			ExternFree(piStroke);
			goto exit;
		}

		ExternFree(piStroke);
	}

	// copy the alt list to the final alt list of the new wordmap
	AltListOld2New (&pxrc->answer, pMap->pFinalAltList, TRUE);

	// Inferno's altlist is the same as the final one. The freeing code is ready for this
	pMap->pInfernoAltList =   pMap->pFinalAltList;

	bRet	=	TRUE;

exit:
	return bRet;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\singcharfeat.c ===
#include "common.h"
#include "singCharFeat.h"
#include "cheby.h"
#include "cowmath.h"
#include "nfeature.h" //This is included for the call to yDeviation
#include "math16.h"

#define XCHB 10
#define YCHB 10

//The structure DRECTS is used to store the beginning x coordinate and y coor of the current guide box that we are in
//the fields w and h store the width and height of the current guide box
typedef struct tagDRECTS
{
    long   x;
    long   y;
    long   w;
    long   h;
} DRECTS;

typedef struct
{
	int *xy; //Stores the sampled XY points
	int cPoint;//Stores the number of points that are there 
	int cPointMax; //Stores the max number of points that can be allocated
	int iStepSize; //Stores the length of the step size--at present this is taken to be 1.5 % of the guide size
	int iStepSizeSqr; //Stroes the square of the step size
} POINTINFO;

// Use version from Sole
extern void SmoothPoints(XY *rgSrc, XY *rgDst, int cXY);

/****************************************************************
*
* NAME: Inf_AddPointSole
*
*
* DESCRIPTION:
*
* Given a new point and a sequence of points so far, zero or more points
* are added at the end of the sequence.  The points are effectively resampled
* at a pre-computed interval (a distance of pPointinfo->iStepSize between
* successive points). 
*
* INPUTS
*	pPointinfo			Where points are added
*	x					Point to add
*	y					Point to add
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
BOOL Inf_AddPointSole(POINTINFO *pPointinfo, int x, int y)
{
	int		dx, dy, dist2, dist;
	int		x0, y0;
	int		*pTemp;

	if (!pPointinfo->cPoint)
	{
		pPointinfo->xy[0] = x;
		pPointinfo->xy[1] = y;
		pPointinfo->cPoint = 1;
		
		return TRUE;
	}

	x0 = pPointinfo->xy[2*pPointinfo->cPoint-2];
	y0 = pPointinfo->xy[2*pPointinfo->cPoint-1];

	for (;;)
	{
		dx = x - x0;
		dy = y - y0;
		dist2 = dx*dx + dy*dy;
		if (dist2 < pPointinfo->iStepSizeSqr)
			break;

		// add a point at given step size
		dist = ISqrt(dist2);
		x0 += pPointinfo->iStepSize*dx/dist;
		y0 += pPointinfo->iStepSize*dy/dist;
		// a minimum iStepSize of 2 and the fact that ((float)dx/dist)^2 + ((float)dy/dist)^2 = 1 guarantees that
		// the previous two assignments change atleast one of x0 and y0 i.e. its not an infinite loop
		if (pPointinfo->cPoint == pPointinfo->cPointMax)
		{
			// need more space
			// hopefully we don't come here too often
			pPointinfo->cPointMax *= 2;
			pTemp = (int *) ExternRealloc(pPointinfo->xy, 2*pPointinfo->cPointMax*sizeof(int));
			if (!pTemp)
			{
				return FALSE;
			}
			pPointinfo->xy = pTemp;

		}
		pPointinfo->xy[2*pPointinfo->cPoint] = x0;
		pPointinfo->xy[2*pPointinfo->cPoint+1] = y0;
		pPointinfo->cPoint++;
	}

	return TRUE;
}

int Inf_AddGuideFeatures(GUIDE *pGuide, RECT *pRect, int iYMean, int *rgFeat)
{
	// get normalized ink size/position (box is 1000x1000 with top-left at 0,0)
	DRECTS drcs;
	RECT inkRect = *pRect;
	int x, chorz, iBox;
	int *rgFeatBase=rgFeat;

	//Count of the number of horizontal boxes--is set to 1 if the pGuide->cHorzBox parameter is not set originally.
	chorz  = pGuide->cHorzBox ? pGuide->cHorzBox : 1;

	// which box (in x direction)
	iBox = ((pRect->left + pRect->right)/2 - pGuide->xOrigin) / pGuide->cxBox;

	//The x coordinate of the top left corner of the current box(note--you are adding the cxBase Value) 
	drcs.x = pGuide->xOrigin + iBox * pGuide->cxBox + pGuide->cxBase;

	// which box (in y direction)
	iBox = ((pRect->top + pRect->bottom)/2 - pGuide->yOrigin) / pGuide->cyBox;
	
	//The y coordinate of the top left corner of the current box
	drcs.y = pGuide->yOrigin + iBox * pGuide->cyBox;

	//This gives us the width of the current guide box
	drcs.w = pGuide->cxBox - 2 * pGuide->cxBase;

	//This gives us the height of the current guide box
	drcs.h = pGuide->cyBox;

	// Translate, convert to delta form
	//Stores the relative position w.rt. the top left of the guide box
	inkRect.left   -= drcs.x;
	inkRect.top    -= drcs.y;
	//Stores the width of the ink
	inkRect.right  -= (drcs.x + inkRect.left);
	//Stores the height of the ink
	inkRect.bottom -= (drcs.y + inkRect.top);
	//Converts the yMean wrt a form relative to the top of the guide box
	iYMean         -= drcs.y;

	// Scale.  We do isotropic scaling and center the shorter dimension.
	//Y Mean as a fraction of the guide box size
	iYMean = ((1000 * iYMean) / drcs.h);
	//Sees where the top of the ink is relative to the guide box height
	drcs.y = ((1000 * inkRect.top) / drcs.h);
	//The width of the ink relative to the guide box width
	drcs.w = ((1000 * inkRect.right) / drcs.h);
	//The height of the ink relative to the guide box height
	drcs.h = ((1000 * inkRect.bottom) / drcs.h);
	
	//Why would any of these conditions happen 
	if (drcs.y < 0) 
		drcs.y = 0;
	else if (drcs.y > 1000) 
		drcs.y = 1000;
	if (drcs.w < 0) 
		drcs.w = 0;
	else if (drcs.w > 1000) 
		drcs.w = 1000;
	if (drcs.h < 0) 
		drcs.h = 0;
	else if (drcs.h > 1000) 
		drcs.h = 1000;

	// 4 guide features

	//First feature--Top of the ink relative to the guide box height
	x = drcs.y;
	x = LSHFT(x)/1000;
	if (x >= 0x10000)
		x = 0xFFFF;
	*rgFeat++ = x;

	//Second feature--Bottom of the ink relative to the guide box height
	x = drcs.h;
	x = LSHFT(x)/1000;
	if (x >= 0x10000)
		x = 0xFFFF;
	*rgFeat++ = x;

	//Third feature--The width of the ink relative to the sum of its width and height
	if (drcs.w <= 0)
		x = 0;
	else
	{
		x = drcs.w;
		x = LSHFT(x)/(drcs.w+drcs.h);
		if (x >= 0x10000)
			x = 0xFFFF;
	}
	*rgFeat++ = x;

	//Fourth feature--the iYMean value relative to the guide box height

	// one more guide feature: y-CG
	if (iYMean < 0)
		iYMean = 0;
	else if (iYMean > 1000)
		iYMean = 1000;
	x = iYMean;
	x = LSHFT(x)/1000;
	if (x >= 0x10000)
		x = 0xFFFF;
	*rgFeat++ = x;
	
	return rgFeat-rgFeatBase;
}

/*
void Inf_SmoothPoints(XY *rgSrc, XY *rgDst, int cXY)
{
   int i,j;

   for (i=0; i<cXY; i++)
   {
      j = cXY - i - 1;
      if (i < j) 
         j = i;

      switch (j) 
      {
      case 0: 
	  case 1: 
         *rgDst = *rgSrc;
         break;
	//+4 is added here so that rounding off takes place rather than truncation
      default:
            rgDst->x = (int)((
							   (rgSrc-2)->x              + 
							  ((rgSrc-1)->x         <<1) + 
							   (rgSrc->x            <<1) + 
							  ((rgSrc+1)->x         <<1) + 
							   (rgSrc+2)->x              +
							  4
                            ) >> 3);
            rgDst->y = (int)((
							   (rgSrc-2)->y              + 
							  ((rgSrc-1)->y         <<1) + 
							   (rgSrc->y            <<1) + 
							  ((rgSrc+1)->y         <<1) + 
							   (rgSrc+2)->y              +
							  4
                            ) >> 3);
         break;
      }
	  rgSrc++;
	  rgDst++;
   }

}
*/


/****************************************************************
*
* NAME: Inf_ComputeCurvedness
*
*
* DESCRIPTION:
*
* Given a stroke, computes three curvature features--namely
* The sum of the modular change in angle with respect to + and - for the angles
* The total curviness of the stoke--just directly measure the change in angles.
* The maximum change in angle that occurs in that stroke in one sampling distance
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
void Inf_ComputeCurvedness(XY *rgXY, int cXY, int iStepSizeSqr, int *pSum1, int *pSum2, int *pMaxAngle)
{
	int sum1, sum2;
	int x, y;
	XY *rgxy, *rgxySave;
	int ang, lastAng, diff, dx, dy;

	if (cXY <= 2)
	{
		*pSum1 = *pSum2 = 0;
		return;
	}
	
	// smooth points
	rgxySave = rgxy = (XY *) ExternAlloc(cXY*sizeof(XY));
	if (!rgxy)
	{
		*pSum1 = *pSum2 = 0;
		return;
	}
	SmoothPoints(rgXY, rgxy, cXY);

	sum1 = sum2 = 0;
	x = rgxy->x;
	y = rgxy->y;
	rgxy++;
	cXY--;
	// find first angle
	while (cXY)
	{
		dy = rgxy->y - y;
		dx = rgxy->x - x;
		if (dx*dx+dy*dy >= iStepSizeSqr)
		{ 
			//Function from common/mathx--returns the integer approx in degrees
			lastAng = Arctan2(dy, dx);
			cXY--;
			x = rgxy->x;
			y = rgxy->y;
			rgxy++;
			break;
		}
		cXY--;
		rgxy++;
	}
	// now find difference of every subsequent angle with its previous angle
	while (cXY)
	{
		dy = rgxy->y - y;
		dx = rgxy->x - x;
		if (dx*dx+dy*dy >= iStepSizeSqr)
		{
			ang = Arctan2(dy, dx);
			ANGLEDIFF(lastAng, ang, diff)
			sum1 += diff;
			if (diff < 0)
				diff = -diff;
			sum2 += diff;
			lastAng = ang;
			x = rgxy->x;
			y = rgxy->y;
			if (diff > *pMaxAngle)
				*pMaxAngle = diff;
		}
		cXY--;
		rgxy++;
	}

	// clean up
	ExternFree(rgxySave);
	*pSum1 = sum1;
	*pSum2 = sum2;
}

/****************************************************************
*
* NAME: Inf_AddCurveFeatures
*
* DESCRIPTION:
*
* Add three curvature features.
*   Sum of signed angle changes
*   Sum of absolute angle changes
*   maxAngle change
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
int Inf_AddCurveFeatures(FRAME *pFrame, int iStepSizeSqr, int *rgFeat)
{
	int cXY;
	XY *rgXY;
	int sum1=0, sum2=0, maxAngle=0;
	int *rgFeatBase=rgFeat;

	rgXY = RgrawxyFRAME(pFrame);
	cXY = CrawxyFRAME(pFrame);
	ASSERT(cXY > 0);
	//For each frame compute the curvedness

	//sum1 represents the sum of the modular change in angle(with respect to + and - for the angles
	//sum2 represent the total curviness of the stoke--just directly measures the change in angles.
	Inf_ComputeCurvedness(rgXY, cXY, iStepSizeSqr, &sum1, &sum2, &maxAngle);

	// based on emperical obsevations, truncate sum1 between -1000 to 1000
	//    and sum2 between 0 and 1200  
	// (this results in no truncation in more than 99% cases)
	if (sum1 < -1000)
		sum1 = -1000;
	else if (sum1 > 1000)
		sum1 = 1000;
	if (sum2 < 0)
		sum2 = 0;
	else if (sum2 > 1200)
		sum2 = 1200;
	sum1 += 1000;  // now between 0 and 2000
	sum1 = LSHFT(sum1)/2000;
	if (sum1 > 0xFFFF)
		sum1 = 0xFFFF;
	sum2 = LSHFT(sum2)/1200;
	if (sum2 > 0xFFFF)
		sum2 = 0xFFFF;
	// maxAngle should be between 0 and 180
	if (maxAngle < 0)
		maxAngle = 0;
	else if (maxAngle > 180)
		maxAngle = 180;
	maxAngle = LSHFT(maxAngle)/180;
	if (maxAngle > 0xFFFF)
		maxAngle = 0xFFFF;

	*rgFeat++	= sum1;
	*rgFeat++	= sum2;
	*rgFeat++   = maxAngle;

	return rgFeat-rgFeatBase;
}

/****************************************************************
*
* NAME: Inf_NormalizeCheby
*
* DESCRIPTION:
*
* Normalize the x, y Cheby polynomials
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/
int Inf_NormalizeCheby(int *chbyX, int *chbyY, int *rgFeat)
{
	int norm = 0;
	int dT;
	int cFeat = 0, i;
	int *rgFeatBase=rgFeat;

	//The norm is applied both to x and y prior to dividing,so that the relative sizes of x and y can be kept intact
	// 
	for (i = 1; i < XCHB; ++i)  // 1st X coeff skipped
	{
		Mul16(chbyX[i], chbyX[i], dT)
        norm += dT;
	}
	for (i = 1; i < YCHB; ++i)  // 1st Y coeff skipped
	{
		Mul16(chbyY[i], chbyY[i], dT)
        norm += dT;
	}
	norm = ISqrt(norm) << 8;
	if (norm < LSHFT(1))
		norm = LSHFT(1);

	for (i=1; i<XCHB; i++)
	{
		dT = Div16(chbyX[i], norm) + LSHFT(1);  // now between 0 and 2
		dT >>= 1;  // now between 0 and 1
		if (dT >= 0x10000)
			dT = 0xFFFF;
		else if (dT < 0)
			dT = 0;
		rgFeat[cFeat++] = dT;
	}

	for (i=1; i<YCHB; i++)
	{
		dT = Div16(chbyY[i], norm) + LSHFT(1);
		dT >>= 1;
		if (dT >= 0x10000)
			dT = 0xFFFF;
		else if (dT < 0)
			dT = 0;
		rgFeat[cFeat++] = dT;
	}


	return cFeat;
	
}

/****************************************************************
*
* NAME: SingleInfCharFeaturize
*
*
* DESCRIPTION:
*
* The top-level routine for featurizing ink for a character segmented
* out of string using inferno
* 
* Represent each stroke using:
* 9 X Cheb coeff
* 9 Y Cheb Coeff
* 3 Curved features
* 
* For cStrokes > 1
*	2 location (Top left corner
*	2 size (Height width (Normalized to the box of the glyph)
*
*
* 2 Glyph size (W H)
*
* Tot # Features = cStroke*21 + ((cStroke*4) && cStroke > 1) + 2   
*
* INPUTS:
*	pGlyph		Glyph with ink
*	iydev		A size scale factore (conventional yDev)
*	pGuide		Guide (NULL) if not avilable (currently not used)
*	rgFeat		OUT: Array for saving the features
*	bGuide		is guide available
*
* HISTORY
*	Introduced March 2002 (mrevow)
*
***************************************************************/

int SingleInfCharFeaturize(GLYPH *pGlyph, int iyDev, GUIDE *pGuide, int *rgFeat, BOOL bGuide)
{
	int cStroke, iStroke;
    int iPoint;
    int sumX, sumY, sum;
    int var, glyphHeight, glyphWidth;
	int isumX, isumY;//These store the mean values of x and y
    int chbyX[IMAXCHB], chbyY[IMAXCHB]; 
	int retval= 0;
	XY *rgXY, lastXY;
	int cXY, iXY, dx, dy, t;
	GLYPH *glyph;
	FRAME *frame;
	int ydev; //Stores the ydev value used for storing the step size
	POINTINFO pointinfo;
	RECT rect;
	int *rgFeatBase; //This stores the original value of the feature vector pointer

	rgFeatBase=rgFeat;

	// compute cStroke
	for (cStroke=0, glyph=pGlyph; glyph; glyph=glyph->next)
	{
		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;
		cXY = CrawxyFRAME(frame);
		ASSERT(cXY > 0);
		cStroke++;
	}

	if (cStroke < 1)
		return 0;


	ydev= YDeviation(pGlyph);
	if (ydev < 1)
	{
		ydev = 1;  // a "-" or a "."
	}

	//The step size is computed from the ydev value
	pointinfo.iStepSize =  ydev/5; 

	if (pointinfo.iStepSize < 2)
	{
		pointinfo.iStepSize = 2;
	}
	pointinfo.iStepSizeSqr = pointinfo.iStepSize * pointinfo.iStepSize;

	// estimate total count of points
	pointinfo.cPointMax = 1;  // make sure it does not end up being zero
	for (iStroke=0, glyph=pGlyph; glyph; glyph=glyph->next)
	{
		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;
		rgXY = RgrawxyFRAME(frame);
		cXY = CrawxyFRAME(frame);
		ASSERT(cXY > 0);

		sum = 0;
		for (iXY=1; iXY<cXY; iXY++)
		{
			dx = rgXY[iXY].x - rgXY[iXY-1].x;
			if (dx < 0)
				dx = -dx;
			dy = rgXY[iXY].y - rgXY[iXY-1].y;
			if (dy < 0)
				dy = -dy;
			if (dx > dy)
				sum += dx;
			else
				sum += dy;
		}

		//The sum that we are computing here is an underestimate--we are only taking the max on |x| or |y|.The distance will
		// be more
		pointinfo.cPointMax += sum/pointinfo.iStepSize;

		// Temporary hack--this happens in rare cases if the step size is very small for say a horizontal line--in this case we fail
		// if the new count of points >10 times the orig count.Need to revisit this later
		//if (sum/pointinfo.iStepSize >10*cXY)
			//return 0;
		// if not first stroke simulate pen-up stroke
		if (iStroke)
		{
			dx = lastXY.x - rgXY->x;
			dy = lastXY.y - rgXY->y;
			t = ISqrt(dx*dx + dy*dy)/pointinfo.iStepSize;
			if (t >= 2)
				pointinfo.cPointMax += t-1;
		}
		lastXY = rgXY[cXY-1];
		iStroke++;
	}

	//Since we have computed an underestimate multiply by two
	pointinfo.cPointMax *= 2;

	// allocate space
	pointinfo.xy = (int *) ExternAlloc(2*pointinfo.cPointMax*sizeof(int));
	if (!pointinfo.xy)
		return 0;




	GetRectGLYPH(pGlyph, &rect);
	glyphWidth = rect.right - rect.left;
	glyphHeight = rect.bottom - rect.top;

	glyphWidth = max(1, glyphWidth);
	glyphHeight = max(1, glyphHeight);

	// Featurize Each stroke
	for (glyph=pGlyph; glyph; glyph=glyph->next)
	{
		RECT	*pRectFrame;

		frame = glyph->frame;
		if (!IsVisibleFRAME(frame))
			continue;

		pRectFrame = RectFRAME(frame);

		rgXY = RgrawxyFRAME(frame);
		cXY = CrawxyFRAME(frame);
	    pointinfo.cPoint = 0;
		for (iXY = 0; iXY < cXY; iXY++)
		{
			if (!Inf_AddPointSole(&pointinfo, rgXY[iXY].x, rgXY[iXY].y))
			{
				retval = 0;
				goto freeReturn;
			}
		}


	    // compute X-mean and Y-mean
		sumX = sumY = 0;

		for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint+=2)
		{
			sumX += pointinfo.xy[iPoint] - rect.left;
			sumY += pointinfo.xy[iPoint+1] - rect.top;
		}


		isumX = (sumX / pointinfo.cPoint) + rect.left;
		isumY = (sumY / pointinfo.cPoint) + rect.top;

		ASSERT(sumX>=0);
		ASSERT(sumY>=0);
		ASSERT(isumX>=0);
		ASSERT(isumY>=0);
		// shift points by means
		for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint+=2)
		{
			pointinfo.xy[iPoint] -= isumX;
			pointinfo.xy[iPoint+1] -= isumY;
		}

		// compute variance
		var = 0;
		for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint++)
		{

			if (pointinfo.xy[iPoint]<0)
				var+=(-pointinfo.xy[iPoint]);
			else
				var+=pointinfo.xy[iPoint];

			//var += pointinfo.xy[iPoint] * pointinfo.xy[iPoint];
			ASSERT(var >= 0);
		}
		var=var/(2*pointinfo.cPoint);
		if (var < 1)
			var = 1;

		// scale points by standard deviation


		// From this point on,the pointinfo values are in 16.16
		//IMPORTTANT NOTE---THE pointinfo array is not directly used after this point
		//If it is,you will have to use 16.16 arithmetic

		for (iPoint=0; iPoint<2*pointinfo.cPoint; iPoint++)
		{
			pointinfo.xy[iPoint] = LSHFT(pointinfo.xy[iPoint])/var;
		}
		//Basically,since we effectively have a normal distribution(hopefully)most of the values will be between +-3.
		// chebychev'ize!
		if (!LSCheby(pointinfo.xy, pointinfo.cPoint, chbyX, XCHB))
		{
			goto freeReturn;
		}
		if (!LSCheby(pointinfo.xy+1, pointinfo.cPoint, chbyY, YCHB))
		{
			goto freeReturn;
		}

		rgFeat += Inf_NormalizeCheby(chbyX, chbyY, rgFeat);


		rgFeat += Inf_AddCurveFeatures(glyph->frame, pointinfo.iStepSizeSqr, rgFeat);

		// Only add the individal stroke size and location
		// if > 1 stroke
		if (cStroke > 1)
		{
			// Location - 2 features
			*rgFeat = ((pRectFrame->left - rect.left) * 0xFFFF / glyphWidth);
			ASSERT(*rgFeat <= 0xFFFF);
			++rgFeat;
			*rgFeat = ((pRectFrame->top - rect.top) * 0xFFFF / glyphHeight);
			ASSERT(*rgFeat <= 0xFFFF);
			++rgFeat;


			// Size -  2 Features
			*rgFeat = ((pRectFrame->right - pRectFrame->left) * 0xFFFF / glyphWidth);
			ASSERT(*rgFeat <= 0xFFFF);
			++rgFeat;
			*rgFeat = ((pRectFrame->bottom - pRectFrame->top) * 0xFFFF / glyphHeight);
			ASSERT(*rgFeat <= 0xFFFF);
			++rgFeat;
		}
	}
	
	// Size of Glyph
	*rgFeat++  = (iyDev / glyphWidth >= 3) ? 0xFFFF * 3 : iyDev * 0xFFFF / glyphWidth;
	*rgFeat++  = (iyDev / glyphHeight >= 3) ? 0xFFFF * 3 : iyDev * 0xFFFF / glyphHeight;


	// guide features
	//The rect had been comptured prior to scaling the points --by mean and standard deviation
	//isumY represents the mean Y value
	//We add 5 guide features
	if (bGuide)
	{
		rgFeat += Inf_AddGuideFeatures(pGuide, &rect, isumY, rgFeat);
	}

	retval=rgFeat-rgFeatBase;

freeReturn:
	ExternFree(pointinfo.xy);
	return retval;
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\panel.c ===
// Panel.c
// James A. Pittman
// July 23, 1998

// Recognizes an entire panel at once by looping over lines, then looping over
// ink blobs that have large gaps between them, and finally looping over the strokes
// within a blob, using recognition scores to help decide what is a word and what is not.

#include <stdlib.h>
#include <string.h>
#include <limits.h>

#include "common.h"
#include "inferno.h"

#include "nfeature.h"
#include "engine.h"
#include "Panel.h"

#include "Normal.h"
#include "linebrk.h"

#include "bear.h"
#include "Avalanche.h"

#include "wordbrk.h"
#include "recdefs.h"
#include "multsegm.h"
#include "recoutil.h"
#include <baseline.h>

#define STREQ(s,t) !strcmp(s,t)
#define STRDIFF(s,t) strcmp(s,t)

#if defined(TRAINTIME_AVALANCHE)
int		ComputePromptWordMaps (XRC *pxrc);			// function used to compute the word mapping of the prompt
void	FreeWordMaps ();
#endif


#if (defined HWX_INTERNAL) && (defined HWX_SAVEGLYPH)
void SaveGlyph (GLYPH *pGlyph)
{
	FILE	*fp;
	int		cStrk	=	CframeGLYPH (pGlyph);
	GLYPH	*gl;

	fp	= fopen ("glyph.bin", "wb");
	if (!fp)
		return;

	fwrite (&cStrk, 1, sizeof (int), fp);

	for (gl = pGlyph; gl; gl = gl->next)
	{
		fwrite (&gl->frame->info.cPnt, 1, sizeof (int), fp);
		fwrite (gl->frame->rgrawxy, gl->frame->info.cPnt, sizeof (XY), fp);
	}

	fclose (fp);
}
#endif

static int _cdecl ResultCmp(const XRCRESULT *a, const XRCRESULT *b)
{
	if (a->cost > b->cost)
		return(1);
	else if (a->cost < b->cost)
		return(-1);

	return(0);
}


// Add a map structure to the XRCRESULT containing the stroke
// iDs in the glyph
static int AddStrokeIdFromGlyph(GLYPH *pGlyph, XRCRESULT *pAns)
{
	int		iRet = HRCR_ERROR;

	ASSERT(pGlyph);
	ASSERT(pAns);
	ASSERT(pAns->pMap);

	if (pGlyph && pAns && pAns->pMap)
	{
		int		iLastIdx = -1, *piIdx;
		
		pAns->pMap->cStrokes = CframeGLYPH(pGlyph);
		piIdx = pAns->pMap->piStrokeIndex = (int *)ExternAlloc(sizeof(*pAns->pMap->piStrokeIndex) * pAns->pMap->cStrokes);
		
		ASSERT(pAns->pMap->piStrokeIndex);
		if (!pAns->pMap->piStrokeIndex)
		{
			return HRCR_MEMERR;
		}
		
		// Add the strokes in ascending order
		for ( ; pGlyph ; pGlyph = pGlyph->next)
		{
			if (pGlyph->frame)
			{
				int		iFrame = pGlyph->frame->iframe;
				
				ASSERT(iFrame != iLastIdx);
				
				if (iFrame < iLastIdx)
				{
					int		*piInsert = pAns->pMap->piStrokeIndex;
					
					// Search to find insertion point
					for (  ; piInsert < piIdx ; ++piInsert)
					{
						if (iFrame < *piInsert)
						{
							int		iSwap = *piInsert;
							
							*piInsert = iFrame;
							iFrame = iSwap;
						}
					}
				}
				
				iLastIdx = *piIdx = iFrame;
				++piIdx;
				
				ASSERT (piIdx - pAns->pMap->piStrokeIndex <= pAns->pMap->cStrokes);
			}
		}

		iRet = HRCR_OK;
	}

	return iRet;
}


//!!! BUG - This should be setting up the HRC from the values set in the xrc
//!!! for madcow.  We need that xrc passed down to here and set the exact 
//!!! same alc, dict mode, lang mode etc in from it.

// set up a the HRC for word recognition (Do not allow white space)
static int initWordHRC(XRC *pMainXrc, GLYPH	*pGlyph, HRC *phrc)
{
	int		cFrame;
	HRC		hrc = CreateCompatibleHRC((HRC)pMainXrc, NULL);
	int		iRet = HRCR_OK;
	XRC		*pxrcNew;

	*phrc = (HRC)0;

	if (!hrc)  // don't go to exit as we do not need to destroy an HRC
		return HRCR_MEMERR;

	iRet = SetHwxFlags(hrc, pMainXrc->flags | RECOFLAG_WORDMODE);
	if (iRet != HRCR_OK)
		goto exit;

	pxrcNew	=	(XRC *) hrc;
	pxrcNew->answer.cAltMax = MAX_ALT_WORD;

	// build glyph of specific frames inside hrc
	// we later may be able to alter the API to allow additional frames to be
	// added after recognition has already been run

	for ( cFrame = 0 ; pGlyph; pGlyph = pGlyph->next, ++cFrame)
	{
		FRAME *pFrame = pGlyph->frame, *pAddedFrame;
		ASSERT(pFrame);

		if (!pFrame)
		{
			iRet = HRCR_ERROR;
			goto exit;
		}

		iRet = AddPenInputHRC(hrc, RgrawxyFRAME(pFrame), NULL, 0, &(pFrame->info));
		if (iRet != HRCR_OK)
			goto exit;

		// Keep globally allocated frame numbers
		if ( (pAddedFrame = FrameAtGLYPH(((XRC *)hrc)->pGlyph, cFrame)))
		{
			pAddedFrame->iframe = pFrame->iframe;
			pAddedFrame->rect = pFrame->rect;
		}
	}

	*phrc = hrc;
	return HRCR_OK;

exit:
	DestroyHRC(hrc);
	*phrc = (HRC)0;
	return iRet;
}

// set up a the HRC for phrase recognition (Allow white space)
int initPhraseHRC(XRC *pMainXrc, GLYPH *pGlyph, HRC *phrc)
{
	int iRet = HRCR_ERROR;

	if (HRCR_OK == initWordHRC(pMainXrc, pGlyph, phrc))
	{
		XRC	*pxrcNew	=	(XRC *)(*phrc);

		iRet = SetHwxFlags(*phrc, pMainXrc->flags & ~RECOFLAG_WORDMODE);
		
		pxrcNew->answer.cAltMax = MAX_ALT_PHRASE;
		if (iRet != HRCR_OK)
			goto exit;
	
		return HRCR_OK;
	}

exit:
	DestroyHRC(*phrc);
	*phrc = (HRC)0;
	return iRet;
}

// The purpose of this function is to run a wordmap thru inferno and return an XRC
HRC	InfernoRecognize (XRC *pMainXrc, GLYPH *pGlyph, GUIDE *pGuide, int yDev, BOOL bWordMode)
{
	HRC				full;
	int				iRet;
	XRC				*pxrc;

	// Use panel mode
	if (!bWordMode)
	{
		iRet = initPhraseHRC(pMainXrc, pGlyph, &full);
		if (iRet != HRCR_OK)
			return NULL;
	}
	// Or word mode
	else
	{
		iRet = initWordHRC(pMainXrc, pGlyph, &full);
		if (iRet != HRCR_OK)
			return NULL;
	}

	pxrc	=	(XRC *)full;

	// set the guide
	if (pGuide)
	{
		pxrc->guide	=	*pGuide;
	}

	iRet = InfProcessHRC(full, yDev);
	if (HRCR_OK != iRet)
	{
		DestroyHRC (full);
		return NULL;
	}

	// Inferno, if it cannot featurize the ink, 
	// Destroy HRC
	if (!(pxrc->nfeatureset))
	{
		DestroyHRC (full);
		return NULL;
	}
	
	return full;
}

// recognize in word mode (~ALC_WHITE) the ink corresponding to a specific wordmap
// The results will fill in the ALTERNATES structure. yDev is supplied by the caller
// The boolean parameter specifies whether the caller wants to run Avalanche or not
int RecognizeWord (XRC *pxrcInferno, BEARXRC *pBearXrc, WORDMAP *pWordMap, BOOL bInfernoMap, int yDev, ALTERNATES *pAlt, int bAval)
{
	int				iRet		=	FALSE;
	HRC				full	=	NULL;
	XRC				*pxrc	= NULL;
	GLYPH			*pGlyph	=	NULL;
	int				iWordBearIdx;
	    

	// This is an an efficiency hack: When the words agree in the top 1 panel mode choice
	// for pMap, we can save a lot of time by nor reerunning in word mode 
	// but just extracting an alt list from the panel mode result.
	if (bAval && pBearXrc && pWordMap && Top1WordsEqual(pxrcInferno, pBearXrc, pWordMap, &iWordBearIdx))
	{
		GLYPH	*pWordGlyph;

		// init
		pAlt->cAltMax	=	MAXMAXALT;

		if (FALSE == copySingleWordAltList(pAlt, &(pBearXrc->answer.aAlt[0].pMap[iWordBearIdx].alt), pWordMap, pxrcInferno))
		{
			goto exit;
		}

		insertLatinLayoutMetrics(pxrcInferno, pAlt, NULL);

		// call sole to handle one char processing
		pWordGlyph	=	GlyphFromWordMap (pxrcInferno->pGlyph, pWordMap);
		ASSERT (pWordGlyph);

		if (pWordGlyph)
		{
			CallSole (pxrcInferno, pWordGlyph, pxrcInferno->bGuide ? &pxrcInferno->guide : NULL, pAlt);

			DestroyGLYPH (pWordGlyph);
		}

		return TRUE;
	}

	// if a word map is provided, construct its glyph, 
	// and pass it to be recognized by inferno
	if (pWordMap)
	{
		pGlyph	=	GlyphFromWordMap (pxrcInferno->pGlyph, pWordMap);
	}
	else
	{
		pGlyph	=	pxrcInferno->pGlyph;
	}

	if (!pGlyph)
	{
		goto exit;
	}

	if (pxrcInferno->bGuide)
	{
		pxrc	=	(XRC *)InfernoRecognize (pxrcInferno, pGlyph, &pxrcInferno->guide, yDev, TRUE);
		if (!pxrc)
			goto exit;	
	}
	else
	{
		pxrc	=	(XRC *)InfernoRecognize (pxrcInferno, pGlyph, NULL, yDev, TRUE);
		if (!pxrc)
			goto exit;	
	}

	// now we'll run Avalanche if this is what the caller wants
	if (bAval)
	{
		// We only need to pass Bear's ALT to Avalalanche so that we do not run BEAR again
		// when there are no candidates this must be Inferno's word map
		if (bInfernoMap)
			Avalanche (pxrc, NULL);
		else
			Avalanche (pxrc, &pWordMap->alt);
	}

	// success, we'll return the number of segments
	iRet	=	TRUE;

	// copy the Alt list
	memcpy(pAlt, &pxrc->answer, sizeof(pxrc->answer));

	// Because we copied over the pointers to allocated
	// memory make sure allocated buffers in the XRC are not freed
	memset(&(pxrc->answer), 0, sizeof(pxrc->answer));

exit:
	if (full)
		DestroyHRC(full);

	if (pWordMap)
	{
		if (pGlyph)
			DestroyGLYPH (pGlyph);

		if (pxrc)
			DestroyHRC ((HRC)pxrc);
	}

	return iRet;
}


int RecognizeWordEx (XRC *pxrcInferno, WORDMAP *pWordMap, int yDev, ALTERNATES *pAlt, XRC **ppxrc)
{
	int				iRet	=	0;
	HRC				full	=	NULL;
	XRC				*pxrc	=	NULL;
	GLYPH			*pGlyph	=	NULL;
	    
	// if a word map is provided, construct its glyph, 
	// and pass it to be recognized by inferno
	if (pWordMap)
	{
		pGlyph	=	GlyphFromWordMap (pxrcInferno->pGlyph, pWordMap);
	}
	else
	{
		pGlyph	=	pxrcInferno->pGlyph;
	}

	if (!pGlyph)
	{
		goto exit;
	}

	if (pxrcInferno->bGuide)
	{
		pxrc	=	(XRC *)InfernoRecognize (pxrcInferno, pGlyph, &pxrcInferno->guide, yDev, TRUE);
		if (!pxrc)
			goto exit;	
	}
	else
	{
		pxrc	=	(XRC *)InfernoRecognize (pxrcInferno, pGlyph, NULL, yDev, TRUE);
		if (!pxrc)
			goto exit;	
	}

	// success, we'll return the number of segments
	iRet	=	pxrc->nfeatureset->cSegment;

	// copy the Alt list
	memcpy(pAlt, &pxrc->answer, sizeof(pxrc->answer));

	// Because we copied over the pointers to allocated
	// memory make sure allocated buffers in the XRC are not freed
	memset(&(pxrc->answer), 0, sizeof(pxrc->answer));

exit:

	if (pWordMap && pGlyph)
	{			
		DestroyGLYPH (pGlyph);
	}

	if (iRet <= 0)
	{
		if (pxrc)
		{
			DestroyHRC ((HRC)pxrc);
		}

		pxrc	=	NULL;
	}

	if (ppxrc)
	{
		(*ppxrc)	=	pxrc;
	}

	return iRet;
}

// Special efficient version of ClearRCRESALT() that knows
// there are no mappings.

static void clearAlt(ALTERNATES *p)
{
	unsigned int i;

	for (i = 0; i < p->cAlt; i++)
		ExternFree(p->aAlt[i].szWord);
	p->cAlt = 0;
}

/******************************************************************
* 
* isolate
*
* Store away a recognized isolated word together with all its alternates
* in the answer set
*
**********************************************************************/
static int isolate(WORDINFO *pWordInfo, ANSWER_SET *pAnsSet)
{
	ALTERNATES		*pAlt;

	// Only add cases that were succesfully recognized
	if (pWordInfo->alt.cAlt > 0)
	{
		if (pAnsSet->cAnsSets >= pAnsSet->capSegments)
		{
			pAnsSet->pAlternates = ExternRealloc(pAnsSet->pAlternates,  sizeof(*pAnsSet->pAlternates) * (pAnsSet->cAnsSets + PHRASE_GROW_SIZE) );
		}
		
		ASSERT(pAnsSet->pAlternates);
		if (! pAnsSet->pAlternates)
		{
			return HRCR_MEMERR;
		}
		
		pAlt = pAnsSet->pAlternates + pAnsSet->cAnsSets;
		
		// Copy over the answers
		memcpy(pAlt, &pWordInfo->alt, sizeof(*pAnsSet->pAlternates));

		// Because we copied over the pointers to allocated
		// memory make sure allocated buffers in the XRC are not freed
		memset(&(pWordInfo->alt), 0, sizeof(pWordInfo->alt));
		
		++pAnsSet->cAnsSets;

#ifndef NDEBUG
	ValidateALTERNATES(pAlt);
#endif

	}

	return HRCR_OK;
}


/******************************************************************
* 
* isolate
*
* Store away a recognized isolated word together with all its alternates
* in the answer set (using new style word_map)
*
**********************************************************************/
static int IsolateWordMap(XRC *pxrc, WORD_MAP *pMap, ANSWER_SET *pAnsSet)
{
	ALTERNATES		*pAlt;

	// Only add cases that were succesfully recognized
	if (pMap->pFinalAltList && pMap->pFinalAltList->cAlt > 0)
	{
		if (pAnsSet->cAnsSets >= pAnsSet->capSegments)
		{
			pAnsSet->pAlternates = ExternRealloc(pAnsSet->pAlternates,  sizeof(*pAnsSet->pAlternates) * (pAnsSet->cAnsSets + PHRASE_GROW_SIZE) );
		}
		
		ASSERT(pAnsSet->pAlternates);
		if (! pAnsSet->pAlternates)
		{
			return HRCR_MEMERR;
		}
		
		pAlt = pAnsSet->pAlternates + pAnsSet->cAnsSets;
		
		// Copy over the answers
		if (!AltListNew2Old ((HRC)pxrc, pMap, pMap->pFinalAltList, pAlt, TRUE))
		{
			return HRCR_MEMERR;
		}
		
		++pAnsSet->cAnsSets;

#ifndef NDEBUG
	ValidateALTERNATES(pAlt);
#endif
	}

	return HRCR_OK;
}

/******************************************************************
* 
* isolate
*
* Store away a recognized isolated word together with all its alternates
* in the answer set (using new style word_map)
*
**********************************************************************/
static int IsolateLineSeg(XRC *pxrc, LINE_SEGMENTATION *pResults, ANSWER_SET *pAnsSet)
{
	int				iSegCol, iWord;
	SEG_COLLECTION	*pSegCol;
	SEGMENTATION	*pSeg;

	for (iSegCol = 0; iSegCol < pResults->cSegCol; iSegCol++)
	{
		pSegCol	=	pResults->ppSegCol[iSegCol];

		if (pSegCol && pSegCol->cSeg > 0)
		{
			pSeg	=	pSegCol->ppSeg[0];

			for (iWord = 0; iWord < pSeg->cWord; iWord++)
			{
				if (IsolateWordMap (pxrc, pSeg->ppWord[iWord], pAnsSet) != HRCR_OK)
				{
					return HRCR_ERROR;
				}
			}
		}
	}

	return HRCR_OK;	
}
/***********************************************************************
*
* RecognizeLine
*
* Run recognition on a "chunk" (or phrase) of ink. 
* Bear had already been run on this piece of ink
* Inferno is run on the same piece of ink.
* ResolveWordBreaks is called to resolve word breaks and call avalanche on the
* Words it decides on
*
***********************************************************************/

static int RecognizeLine	(	XRC			*pMainXrc, 
								INKLINE		*pLine,
								ANSWER_SET	*pAnsSet
							)
{
	HRC			hrcInf			=	NULL;
	XRC			*pxrcInf		=	NULL;
	int			iRet			=	HRCR_ERROR;
	WORDINFO	*pWordInfo		=	NULL;
	BEARXRC		*pxrcBear		=	NULL;
	GLYPH		*pScaledGlyph	=	NULL;

	WORDINFO	*pWrd;
	int			cWord;
	int			iWord;
	int			yDev;
	GUIDE		ScaledGuide, 
				*pScaledGuide;	

	if (!pMainXrc || !pLine || !pAnsSet || !pLine->pGlyph)
	{
		goto exit;
	}

	// init the output line segmentation
	pLine->pResults	=	NULL;

	// point to the guide
	if (pMainXrc->bGuide)
	{
		ScaledGuide		=	pMainXrc->guide;
		pScaledGuide	=	&ScaledGuide;
	}
	else
	{
		pScaledGuide	=	NULL;
	}

	// scale the ink
	pScaledGlyph		=	TranslateAndScaleLine (pLine, pScaledGuide);

	if (NULL == pScaledGlyph)
	{
		goto exit;
	}

	// compute yDev of the scaled ink
	yDev				=	YDeviation (pScaledGlyph);

	// Let inferno segment the line
	hrcInf				=	InfernoRecognize (pMainXrc, pScaledGlyph, pScaledGuide, yDev, FALSE);
	if (!hrcInf)
	{
		goto exit;
	}

	pxrcInf	=	(XRC *)hrcInf;

	cWord		=	0;
	pWordInfo	=	NULL;

	// inferno has to have produced some answer for us to proceed
	if (pxrcInf->answer.cAlt > 0)
	{
		// Let bear segment it too
		pxrcBear			=	(BEARXRC *) BearRecognize (pMainXrc, pLine->pGlyph, NULL, FALSE);

		// if bear failed or if bear assigned no words to this line, then only consider inferno
		if (!pxrcBear || pxrcBear->answer.cAlt <= 0)
		{
			// Just use information from inferno
			XRC			*pxrc = (XRC *)hrcInf;
			WORDMAP		*pMap;

			pMap = pxrc->answer.aAlt[0].pMap;
			cWord = pxrc->answer.aAlt[0].cWords;
			pWordInfo = ExternAlloc(pxrc->answer.aAlt[0].cWords * sizeof(*pWordInfo));
			if (!pWordInfo)
			{
				goto exit;
			}

			if ( (iWord = RecognizeWholeWords(pxrc, NULL, pMap, TRUE, cWord, yDev, pWordInfo)) < 0)
			{
				goto exit;
			}

			ASSERT(cWord == iWord);
		}
		else
		{
			// is multiple segmentation enabled
			if (!(pMainXrc->flags & RECOFLAG_SINGLESEG))
			{
				pWordInfo	=	
						ResolveMultiWordBreaks (pxrcInf, pxrcBear, &cWord, &pLine->pResults);
			}

			if (!pWordInfo)
					pWordInfo	= ResolveWordBreaks (yDev, pxrcInf, pxrcBear, &cWord);
		
			if (!pWordInfo)
				goto exit;
		}
	}

	// generate the linesegmentation if necessary
	if (!pLine->pResults)
	{
		pLine->pResults	=	GenLineSegm (cWord, pWordInfo, pMainXrc);
	}

	// go thru all the words
	for (iWord = 0, pWrd = pWordInfo; iWord < cWord; iWord++, pWrd++)
	{
		TruncateWordALTERNATES (&pWrd->alt, pMainXrc->answer.cAltMax);

		if (isolate(pWrd, pAnsSet) != HRCR_OK)
			goto exit;
	}

	// success
	iRet = HRCR_OK;

exit:
	if (pScaledGlyph)
	{
		DestroyFramesGLYPH (pScaledGlyph);
		DestroyGLYPH (pScaledGlyph);
	}

	if (hrcInf)
		DestroyHRC (hrcInf);

	// We will not free the alternates as they point to buffers in the hrcs
	if (pWordInfo)
		ExternFree (pWordInfo);

	if (pxrcBear)
		BearDestroyHRC ((HRC)pxrcBear);

	return iRet;
}


/***********************************************************************
*
* BuildStringFromParts
*
* Merge the isolated words in a array of alternates into a single string
* and keep the alternates for each word in the compound
*************************************************************************/
int BuildStringFromParts(XRC *pxrc, ALTERNATES *ppWords, unsigned int cWords)
{
	XRCRESULT		*pRes;
    WORDMAP			*pMaps	=	NULL;
	unsigned int	len, pos;
	char			*sz;
	int				cStroke = 0;
	int				cTotStroke;
	int				*piIndex, iLine;
	BOOL			bAllWords	=	TRUE;

	// count the number of strokes for the ink that was recognized
	cTotStroke = 0;
	for (iLine = 0; iLine < pxrc->pLineBrk->cLine; iLine++)
	{
		// ignore lines that were not recognized
		if	(	!pxrc->pLineBrk->pLine[iLine].pGlyph || 
				!pxrc->pLineBrk->pLine[iLine].pResults ||
				pxrc->pLineBrk->pLine[iLine].pResults->cSegCol == 0
			)
			continue;

		cTotStroke	+=	CframeGLYPH(pxrc->pLineBrk->pLine[iLine].pGlyph);
	}

	ASSERT(pxrc);

	pRes = pxrc->answer.aAlt;
	ASSERT(pRes);

    pRes->cWords = cWords;

	if (cWords <=0)
	{
		pRes->pMap = NULL;
		pRes->szWord = NULL;
		pxrc->answer.cAlt = 0;
		return cWords;
	}

	pxrc->answer.cAlt = 1;

	ASSERT(cWords);

    pMaps = (WORDMAP *)ExternAlloc(sizeof(WORDMAP) * cWords);
	ASSERT(pMaps);
	if (!pMaps)
	{
		goto exit;
	}

	// Count total number of chars and number of strokes
	// across all alternates
	for (len = 0, pos = 0; pos < cWords; pos++)
	{
		if (ppWords[pos].cAlt)
		{
			len += strlen(ppWords[pos].aAlt[0].szWord) + 1;

			if (ppWords[pos].aAlt[0].pMap)
			{
				cStroke += ppWords[pos].aAlt[0].pMap->cStrokes;
			}
		}
		else
		{
			bAllWords	=	FALSE;
		}
	}

	ASSERT(len);

	// ??? Are all strokes accounted for or some of the words had no answers
	ASSERT(cStroke == cTotStroke || !bAllWords);

	piIndex = (int *)ExternAlloc(sizeof(*pMaps->piStrokeIndex) * cStroke);
	ASSERT (piIndex);

	if (!piIndex)
	{
		goto exit;
	}

    pRes->cWords = cWords;
	pRes->pMap = pMaps;
	pRes->szWord = (char *)ExternAlloc(len * sizeof(*pRes->szWord));
	ASSERT(pRes->szWord);

	if (!(pRes->szWord))
	{
		goto exit;
	}

	pRes->cost = 0;
	pRes->pXRC = pxrc;

	pos = 0;
	sz = pRes->szWord;

	// Finally build the string and
	// set alternate lists for each word in the string
	for (; cWords; cWords--, ppWords++, pMaps++)
	{
		int				cAlt = ppWords->cAlt;
		char			*szWord;
		XRCRESULT		*pAltRes;
		unsigned int	iAlt;

		// Should always have something recognized
		ASSERT (cAlt > 0);
		if (cAlt <= 0)
		{
			
			continue;
		}

		szWord = ppWords->aAlt[0].szWord;

		if (pos)
		{
			pos++;
			*sz++ = ' ';
		}

		pMaps->start = (unsigned short int)pos;
		strcpy(sz, szWord);

		pMaps->len = (unsigned short int)strlen(szWord);
		pos += pMaps->len;
		sz += pMaps->len;

		if (cAlt > 0)
		{
			pMaps->cStrokes = ppWords->aAlt->pMap->cStrokes;
			cStroke -= pMaps->cStrokes;
			ASSERT(cStroke >= 0);

			pMaps->piStrokeIndex = piIndex + cStroke;

			memcpy(pMaps->piStrokeIndex, ppWords->aAlt->pMap->piStrokeIndex, sizeof(*pMaps->piStrokeIndex) * pMaps->cStrokes);
		}
		else
		{
			pMaps->cStrokes = 0;
			ASSERT(cStroke >= 0);
			pMaps->piStrokeIndex = piIndex + cStroke;
		}

		// Special Case Check for recognition exit
		if (1 == cAlt && strcmp(szWord, NOT_RECOGNIZED) == 0)
		{
			// Free up the memory associated with the alternates
			// because we now say there are 0 alternates
			ExternFree(ppWords->aAlt[0].szWord);
			ExternFree(ppWords->aAlt->pMap->piStrokeIndex);
			ExternFree(ppWords->aAlt->pMap);
			memset(&pMaps->alt, 0, sizeof(pMaps->alt));
		}
		else
		{
			memcpy(&(pMaps->alt), ppWords, sizeof(ALTERNATES));
		}

		// Set correct backPointers for each alternate
		pAltRes = pMaps->alt.aAlt;
		for (iAlt = 0 ; iAlt < pMaps->alt.cAlt ; ++iAlt, ++pAltRes)
		{
			pAltRes->pXRC = pxrc;
		}
		
		pRes->cost += ppWords->aAlt->cost;

		if (pRes->cost < 0)
			pRes->cost = INT_MAX;
		
		ppWords->cAlt = 0;
	}

	// Check that we have not forgot a terminating null
	ASSERT(strlen(pRes->szWord)  < len);

	ASSERT(cStroke == 0);

	return 1;

exit:

	if (pMaps)
	{
		ExternFree(pMaps);
	}

    pRes->cWords = 0;
	pRes->pMap = NULL;
	pRes->szWord = NULL;
	pRes->cost = 0;
	pRes->pXRC = NULL;
	return 0;
}


// Update the line information in an xrc presumeably after new ink had been added
BOOL UpdateLineInfo (XRC *pxrc)
{
	BOOL		bRet	=	FALSE;
	GUIDE		*pGuide	=	&(pxrc->guide);
	LINEBRK		LineBrk;

	// do we have a guide?
	if (pxrc->bGuide)
	{
		if (GuideLineSep (pxrc->pGlyph, pGuide, &LineBrk) < 1)
			goto exit;
	}
	// We do not have a guide
	else
	{
		// Try Bear line breaking then
		if (BearLineSep (pxrc->pGlyph, &LineBrk) < 1)
		{
			// then we have no choice but to run the NN LineBrk if this fails
			if (NNLineSep (pxrc->pGlyph, &LineBrk) < 1)
				goto exit;
		}
	}

	// Allocate a line breaking structure in the XRC if needed
	if (!pxrc->pLineBrk)
	{
		// alloc a line brk structure if needed
		pxrc->pLineBrk	=	(LINEBRK *) ExternAlloc (sizeof (*pxrc->pLineBrk));
		if (!pxrc->pLineBrk)
		{
			goto exit;
		}

		memset (pxrc->pLineBrk, 0, sizeof (*pxrc->pLineBrk));
	}

	// compare the lines with the old configuration
	CompareLineBrk (&LineBrk, pxrc->pLineBrk);

	// free the contents of the old structure
	FreeLines (pxrc->pLineBrk);

	// copy the new one
	memcpy (pxrc->pLineBrk, &LineBrk, sizeof (*pxrc->pLineBrk));
	
	bRet	=	TRUE;

exit:
	return bRet;
}


/******************************Public*Routine******************************\
* PanelModeRecognize
*
* Function to recognize a whole panel of ink.
* It first breaks the lines and then each line is recognized separately.
*
* The return value on success is as follows:
*    ProcessHRC did something  |  there is more to do  | return value
*    --------------------------+-----------------------+------------------
*           yes                |        no             |   HRCR_OK
*           yes                |        yes            |   HRCR_INCOMPLETE
*           no                 |        no             |   HRCR_COMPLETE
*           no                 |        yes            |   HRCR_NORESULTS
*
* History:
* 11-Mar-2002 -by- Angshuman Guha aguha
* Modified to have 4 success return values instead of 2 (HRCR_INCOMPLETE and HRCR_OK).
\**************************************************************************/
int PanelModeRecognize (XRC *pxrc, DWORD dwRecoMode)
{
	ANSWER_SET		AnsSet;
	INKLINE			*pLine;
	int				iRet, iLine;
	BOOL			bDidSomething = FALSE;
	BOOL			bMoreToDo = FALSE;
	
	// check the validity of the xrc
	if (!pxrc)
	{
		return HRCR_ERROR;
	}

	// Preset in case we abort
	iRet				=	HRCR_ERROR;
	pxrc->answer.cAlt	=	0;

	// init the AnsSet
	memset(&AnsSet, 0, sizeof(AnsSet));
	
	// Prepare the AnsSet
	AnsSet.capSegments	=	0;
	AnsSet.cAnsSets		=	0;
    AnsSet.pAlternates	=	NULL;
	
#if defined(TRAINTIME_AVALANCHE)
	// ONLY in training mode. Estimate the wordmaps
	ComputePromptWordMaps (pxrc);
#endif

	// refresh the the line information
	if (!UpdateLineInfo (pxrc) || !pxrc->pLineBrk)
	{
		goto exit;
	}

	// go thru all the lines
	for (iLine = 0; iLine < pxrc->pLineBrk->cLine; iLine++)
	{
		pLine		=	pxrc->pLineBrk->pLine + iLine;

		// skip empty lines
		if (pLine->cStroke <= 0)
		{
			// create an empty results structure if there is none
			if (!pLine->pResults)
			{
				// create an empty line segmentation
				pLine->pResults	=	(LINE_SEGMENTATION *) ExternAlloc (sizeof (*pLine->pResults));
				if (!pLine->pResults)
					goto exit;

				memset (pLine->pResults, 0, sizeof (*pLine->pResults));
			}

			continue;
		}

		// has this line been recognized before, just generate the answer(s)
		if (pLine->bRecognized)
		{
			// are there any results
			if (pLine->pResults)
			{
				if (IsolateLineSeg (pxrc, pLine->pResults, &AnsSet) != HRCR_OK)
				{
					goto exit;
				}
			}

			continue;
		}

		// If we are in remaining mode, we'llgo ahead and recognize this line
		// if we are in partial mode, check to see if this is the last line, we will only
		// recognize the last line if endpeninput was called
		if	(	dwRecoMode == RECO_MODE_REMAINING ||
				(	dwRecoMode == RECO_MODE_INCREMENTAL &&	
					(	pxrc->bEndPenInput ||
						iLine < (pxrc->pLineBrk->cLine - 1)
					)
				)
			)
		{
			// make sure that the line segmentation info is freed
			if (pLine->pResults)
			{
				FreeLineSegm (pLine->pResults);
				ExternFree (pLine->pResults);

				pLine->pResults	=	NULL;
			}

			// Recognize this line
			iRet		=	RecognizeLine (pxrc, pLine, &AnsSet);	
			if (iRet != HRCR_OK)
			{
				goto exit;
			}

			// label it as being recognized
			pLine->bRecognized	=	TRUE;
			bDidSomething = TRUE;
		}

		// if we are in partial incremental mode, then we stop processing here
		if (dwRecoMode == RECO_MODE_INCREMENTAL)
		{
			break;
		}
	} // iLine Loop

	// do we have any more unprocessed ink, if so we are going to return HRCR_INCOMPLETE
	if (dwRecoMode == RECO_MODE_INCREMENTAL)
	{
		for (iLine = 0; iLine < pxrc->pLineBrk->cLine; iLine++)
		{
			pLine		=	pxrc->pLineBrk->pLine + iLine;

			// is there a line that has ink and has no results
			if (pLine->pGlyph && (!pLine->pResults || pLine->pResults->cSegCol == 0))
			{
				bMoreToDo	=	TRUE;
				break;
			}
		}
	}

	if (bDidSomething)
	{
		if (bMoreToDo)
			iRet = HRCR_INCOMPLETE;
		else
			iRet = HRCR_OK;
	}
	else
	{
		if (bMoreToDo)
			iRet = HRCR_NORESULTS;
		else
			iRet = HRCR_COMPLETE;
	}

exit:
	// if we succeeded, build the answer
	if (iRet == HRCR_OK || iRet == HRCR_INCOMPLETE || iRet == HRCR_COMPLETE || iRet == HRCR_NORESULTS)
	{
		BuildStringFromParts(pxrc, AnsSet.pAlternates, AnsSet.cAnsSets);
	}

	// free the answer set
	ExternFree(AnsSet.pAlternates);
	
#if defined(TRAINTIME_AVALANCHE)
	// free word maps
	FreeWordMaps ();
#endif

	return iRet;
}

// Performs recognition of a piece of ink in word mode
int WordModeRecognize (XRC *pxrc)
{
	GLYPH			*pglAll;
	INKLINE			*pLine;
	GUIDE			LocalGuide, *pLocalGuide, OrigGuide;
	int				iRet;

	// check the validity of the xrc
	if (!pxrc)
	{
		return HRCR_ERROR;
	}

	// Preset in case we abort
	iRet				=	HRCR_ERROR;
	pxrc->answer.cAlt	=	0;

	// save the original glyph
	pglAll	=	pxrc->pGlyph;


#if defined(TRAINTIME_AVALANCHE)
	// ONLY in training mode. Estimate the wordmaps
	ComputePromptWordMaps (pxrc);
#endif

	
	// point to the guide if any
	if (TRUE == pxrc->bGuide)
	{
		LocalGuide	=	pxrc->guide;
		pLocalGuide	=	&LocalGuide;
		OrigGuide	=	pxrc->guide;
	}
	else
	{
		pLocalGuide	=	NULL;
	}

	// refresh the the line information
	if (!CreateSingleLine (pxrc) || !pxrc->pLineBrk)
	{
		goto exit;
	}

	pLine		=	pxrc->pLineBrk->pLine;

	// if there is no ink exit
	if (!pLine->pGlyph || pLine->cStroke <= 0)
	{
		goto exit;
	}

	// Ink preprocessing: scale and translate the line ink if necessary
	pxrc->pGlyph	=	TranslateAndScaleLine (pLine, pLocalGuide);
	if (!pxrc->pGlyph)
	{
		goto exit;
	}

	if (NULL != pLocalGuide && TRUE == pxrc->bGuide)
	{
		pxrc->guide = *pLocalGuide;
	}

	// make sure that the line segmentation info is freed
	if (pLine->pResults)
	{
		FreeLineSegm (pLine->pResults);
		ExternFree (pLine->pResults);

		pLine->pResults	=	NULL;
	}

	// Recognize the word
	PerformRecognition (pxrc, -1);
	Avalanche (pxrc, NULL);
	
	// we no longer need this glyph
	DestroyFramesGLYPH (pxrc->pGlyph);
	DestroyGLYPH (pxrc->pGlyph);

	// generate the line segmentation
	// if this function fail, we'll fail as well
	if (!WordModeGenLineSegm (pxrc))
	{
		goto exit;
	}

	iRet	=	HRCR_OK;

exit:
	// restore back the original ink
	pxrc->pGlyph	=	pglAll;

#if defined(TRAINTIME_AVALANCHE)
	// free word maps
	FreeWordMaps ();
#endif

	if (TRUE == pxrc->bGuide)
	{
		pxrc->guide = OrigGuide;
	}
	return iRet;	
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\singcharfeat.h ===
#ifndef _OUTPUT_H
#define _OUTPUT_H

#ifdef __cplusplus
extern "C" {
#endif

int SingleInfCharFeaturize(GLYPH *pGlyph, int iyDev, GUIDE *pGuide, int *rgFeat,BOOL bGuide);

#ifdef __cplusplus
}
#endif

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\resource.h ===
//{{NO_DEPENDENCIES}}
// Microsoft Developer Studio generated include file.
// Used by avalanche.rc
//
#define RESID_MAD_OUT_DICT              102
#define RESID_MAD_DICT                  103
#define RESID_CALLIG_DICT               104

// Avalanche Nets
#define RESID_AVALNET_PRINT             105
#define RESID_AVALNET_CURS              106

// Single Segmentation Nets
#define RESID_AVALNET_SEG_1_1			107
#define RESID_AVALNET_SEG_1_2           108
#define RESID_AVALNET_SEG_1_3           109
#define RESID_AVALNET_SEG_2_1           110
#define RESID_AVALNET_SEG_2_2           111
#define RESID_AVALNET_SEG_2_3           112
#define RESID_AVALNET_SEG_3_1           113
#define RESID_AVALNET_SEG_3_2           114
#define RESID_AVALNET_SEG_3_3           115

#define RESID_HWXLANGID                 116
#define RESID_LANGMOD_TOPLEVEL          117

// Sole Nets
#define RESID_SOLENET_GUIDE             118
#define RESID_SOLENET_NOGUIDE           119

#define RESID_AVAL_CONFIDENCE			130

#define RESID_AVAL_ONE_CHAR				140

#define RESID_BEAR_SPCNET				200

// Multiple Segmentation Nets
#define RESID_MSEGAVALNET_SEG_1_2			220
#define RESID_MSEGAVALNET_SEG_2_2			221
#define RESID_MSEGAVALNET_SEG_1_2_2			222
#define RESID_MSEGAVALNET_SEG_1_2_3			223
#define RESID_MSEGAVALNET_SEG_2_2_3			224
#define RESID_MSEGAVALNET_SEG_1_2_2_3       225
#define RESID_MSEGAVALNET_SEG_GEN_2			226
#define RESID_MSEGAVALNET_SEG_GEN_3			227
#define RESID_MSEGAVALNET_SEG_GEN_4			228
#define RESID_MSEGAVALNET_SEG_GEN_5			229

// Bear character nets
#define	RESID_BEAR_XRNET_1					230
#define	RESID_BEAR_XRNET_2					231
#define	RESID_BEAR_XRNET_3					232
#define	RESID_BEAR_XRNET_4					233
#define	RESID_BEAR_XRNET_5					234
#define	RESID_BEAR_XRNET_6					235
#define	RESID_BEAR_XRNET_7					236
#define	RESID_BEAR_XRNET_8					237
#define	RESID_BEAR_XRNET_9					238
#define	RESID_BEAR_XRNET_10					239
#define	RESID_BEAR_XRNET_11					240
#define	RESID_BEAR_XRNET_12					241
#define	RESID_BEAR_XRNET_13					242
#define	RESID_BEAR_XRNET_14					243

// TDNN nets
#define RESID_INFERNO						250
#define RESID_INFERNO_CURS					251
#define RESID_INFERNO_ALT					252
#define RESID_INFERNO_SPACE					253


// Inferno base sigle character Nets
#define RESID_INF_CHARNET_0					270
#define RESID_INF_CHARNET_1					271
#define RESID_INF_CHARNET_2					272
#define RESID_INF_CHARNET_3					273
#define RESID_INF_CHARNET_4					274
#define RESID_INF_LAST_NET					275


// Geo TABLES
#define RESID_GEO_HEIGHT					290
#define RESID_GEO_MID_POINT					291

// Wisp resource data
#define RESID_WISP_DATA						300
#define RESID_WISP_FRIENDLYNAME				301
#define RESID_WISP_VENDORNAME				302

// Next default values for new objects
// 
#ifdef APSTUDIO_INVOKED
#ifndef APSTUDIO_READONLY_SYMBOLS
#define _APS_NEXT_RESOURCE_VALUE        260
#define _APS_NEXT_COMMAND_VALUE         40001
#define _APS_NEXT_CONTROL_VALUE         1000
#define _APS_NEXT_SYMED_VALUE           101
#endif
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\sparsematrix.c ===
/****************************************************************
 * SparseMatrix.c
 *
 * Support for loading and running sparse matrices
 *
 ***************************************************************/
#include <stdlib.h>
#include <common.h>
#include "SparseMatrix.h"

/****************************************************************
*
* NAME: loadSparseMat
*
*
* DESCRIPTION:
*
*   Set up the pointers in a SPARSE_MATRIX from a memory image
*   of the matrix.
*
* RETURNS
*
*	Number of bytes consumed -1 on error
*
* HISTORY
*
*	Introduced April 2002 (mrevow)
*
***************************************************************/
int loadSparseMat(LPBYTE lpByte, SPARSE_MATRIX *pSparseMat, int iSize)
{
	LPBYTE		pBufStart;
	UINT		cBuf;

	pBufStart	= lpByte;

	pSparseMat->id = *(UINT *)(lpByte);
	lpByte += sizeof(pSparseMat->id);

	ASSERT(lpByte - pBufStart < iSize);

	if (pSparseMat->id != HEADER_ID && pSparseMat->id != HEADER_ID2)
	{
		return -1;
	}

	pSparseMat->iSize = *(UINT *)(lpByte);
	lpByte += sizeof(pSparseMat->iSize);
	ASSERT(lpByte - pBufStart < iSize);

	pSparseMat->cRow = *(UINT *)(lpByte);
	lpByte += sizeof(pSparseMat->cRow);
	ASSERT(lpByte - pBufStart < iSize);

	pSparseMat->cCol = *(UINT *)(lpByte);
	lpByte += sizeof(pSparseMat->cCol);
	ASSERT(lpByte - pBufStart < iSize);

	pSparseMat->iDefaultVal = *(SPARSE_TYPE *)(lpByte);
	lpByte += sizeof(pSparseMat->iDefaultVal);
	ASSERT(lpByte - pBufStart < iSize);

	pSparseMat->pRowCnt = (unsigned short *)lpByte;
	lpByte += sizeof(*pSparseMat->pRowCnt) * pSparseMat->cRow;
	ASSERT(lpByte - pBufStart < iSize);

	pSparseMat->pRowOffset = (unsigned short *)lpByte;
	lpByte += sizeof(*pSparseMat->pRowOffset) * pSparseMat->cRow;
	ASSERT(lpByte - pBufStart < iSize);

	pSparseMat->pData = lpByte;
	lpByte += pSparseMat->iSize;
	ASSERT(lpByte - pBufStart < iSize);

	cBuf = *(UINT *)lpByte;
	lpByte += sizeof(cBuf);

	ASSERT(cBuf == (lpByte - pBufStart));

	if (cBuf != (lpByte - pBufStart))
	{
		return -1;
	}

	return cBuf;
}

/****************************************************************
*
* NAME: lookupSparseMat2
*
* DESCRIPTION:
*
*   Lookup the (i,j) element in a Bi-sparse matrix
*
* RETURNS
*	A SPARSE_TYPE2 pointer to the (i,j) 'element' if non-default
*   NULL if (i,j) element not found or (i,j) is out of range
*
* HISTORY
*
*	Introduced April 2002 (mrevow)
*
***************************************************************/
SPARSE_TYPE2  *lookupSparseMat2(SPARSE_MATRIX *pSparseMat, UINT i, UINT j)
{
	SPARSE_TYPE2		*pRet;
	unsigned short		iCnt;
	SPARSE_ROW			matRow;
	SPARSE_IDX			*pRowId;
	int					k;

	ASSERT(HEADER_ID2 == pSparseMat->id);
	pRet = NULL;

	ASSERT(pSparseMat);
	ASSERT((UINT)i < pSparseMat->cRow);
	ASSERT((UINT)j < pSparseMat->cCol);
	if (i >= pSparseMat->cRow || j >= pSparseMat->cCol)
	{
		return NULL;
	}

	matRow.pColId = (SPARSE_IDX *)(pSparseMat->pData + pSparseMat->pRowOffset[i]);
	iCnt = pSparseMat->pRowCnt[i];

	//Linear search
	if ((UINT)j < pSparseMat->cCol / 2)
	{
		//Start at the beginning
		pRowId = matRow.pColId;

		for (k = 0 ; k < iCnt ; ++k, ++pRowId)
		{
			if ( *pRowId == j)
			{
				pRet = ((SPARSE_TYPE2 *)(matRow.pColId + iCnt) + k);
				break;
			}
			else if (*pRowId > j)
			{
				// Did no find it
				break;
			}
		}
	}
	else
	{
		// Work backwards from the end
		pRowId = matRow.pColId + iCnt - 1;

		for (k = iCnt-1 ; k >= 0 ; --k, --pRowId)
		{
			if ( *pRowId == j)
			{
				pRet = ((SPARSE_TYPE2 *)(matRow.pColId + iCnt) + k);
				break;
			}
			else if (*pRowId < j)
			{
				// Did no find it
				break;
			}
		}
	}

	return pRet;
}


/****************************************************************
*
* NAME: lookupSparseMat
*
* DESCRIPTION:
*
*   Lookup the (i,j) element in a sparse matrix
*
* RETURNS
*	The (i,j) element 
*
* HISTORY
*
*	Introduced April 2002 (mrevow)
*
***************************************************************/SPARSE_TYPE lookupSparseMat(SPARSE_MATRIX *pSparseMat, UINT i, UINT j)
{
	SPARSE_TYPE			iRet;
	unsigned short		iCnt;
	SPARSE_ROW			matRow;
	SPARSE_IDX			*pRowId;
	int					k;

	ASSERT(HEADER_ID == pSparseMat->id);

	iRet = pSparseMat->iDefaultVal;

	ASSERT(pSparseMat);
	ASSERT((UINT)i < pSparseMat->cRow);
	ASSERT((UINT)j < pSparseMat->cCol);

	if (i >= pSparseMat->cRow || j >= pSparseMat->cCol)
	{
		return iRet;
	}

	matRow.pColId = (SPARSE_IDX *)(pSparseMat->pData + pSparseMat->pRowOffset[i]);
	iCnt = pSparseMat->pRowCnt[i];

	//Linear search
	if ((UINT)j < pSparseMat->cCol / 2)
	{
		//Start at the beginning
		pRowId = matRow.pColId;

		for (k = 0 ; k < iCnt ; ++k, ++pRowId)
		{
			if ( *pRowId == j)
			{
				iRet = *((SPARSE_TYPE *)(matRow.pColId + iCnt) + k);
				break;
			}
			else if (*pRowId > j)
			{
				// Did no find it
				break;
			}
		}
	}
	else
	{
		// Work backwards from the end
		pRowId = matRow.pColId + iCnt - 1;

		for (k = iCnt-1 ; k >= 0 ; --k, --pRowId)
		{
			if ( *pRowId == j)
			{
				iRet = *((SPARSE_TYPE *)(matRow.pColId + iCnt) + k);
				break;
			}
			else if (*pRowId < j)
			{
				// Did no find it
				break;
			}
		}
	}

	return iRet;
}

/****************************************************************
*
* NAME: InitializeSparseMatrix
*
* DESCRIPTION:
*
*   Initialize a sparse matrix structure by loading the sparse
*	matrix from a resource
*
* RETURNS
*
*	TRUE if properly loaded, FALSE otherwsie
*
* HISTORY
*
*	Introduced April 2002 (mrevow)
*
***************************************************************/
BOOL InitializeSparseMatrix(HINSTANCE hInst, int iKey, SPARSE_MATRIX *pSparseMat)
{
	HGLOBAL hglb;
	HRSRC hres;
	LPBYTE lpByte;
	int		iInc;
	int		iSize;


	hres = FindResource(hInst, (LPCTSTR)MAKELONG(iKey, 0), (LPCTSTR)TEXT("TABS"));

	if (!hres)
	{
		return FALSE;
	}

	hglb = LoadResource(hInst, hres);

	if (!hglb)
	{
		return FALSE;
	}

	lpByte = LockResource(hglb);
	ASSERT(lpByte);
	iSize = SizeofResource(hInst, hres);

	if (!lpByte)
	{
		return FALSE;
	}
	iInc = loadSparseMat(lpByte, pSparseMat, iSize);

	return (iInc == iSize);

}
#if (defined HWX_INTERNAL)

// Load a sparse matrix from  a file
BOOL loadSparseMatrixFromFp(char *fname, SPARSE_MATRIX *pSparseMat)
{
	FILE		*fp;
	BYTE		*pBuf = NULL;
	int			iBufSize, iRead;
	BOOL		bRet = FALSE;

	if ( (fp = fopen(fname, "rb")) )
	{
		fseek(fp, 0, SEEK_END);
		iBufSize = ftell(fp);
		rewind(fp);
		pBuf = ExternAlloc(iBufSize);
		if (!pBuf)
		{
			goto fail;
		}

		if (   iBufSize == (iRead = (int)fread(pBuf, 1, iBufSize, fp))
			&& loadSparseMat(pBuf, pSparseMat, iBufSize) > 0)
		{
			bRet = TRUE;
		}
		else
		{
			goto fail;
		}

		fclose(fp);
	}

	return bRet;

fail:
	fclose(fp);
	ExternFree(pBuf);
	return bRet;
}

#endif // HWX_INTERNAL
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\strokemap.c ===
// StrokeMap.c
// James A. Pittman
// January 6, 2000

// Represents which strokes are included in a word or phrase
// as an array of bit flags.  This is a more convenient representation
// for comparing stroke sets (as compared to the array of stroke indices
// used in recognizers) as there are no sort issues.
#include <common.h>
#include "string.h"

#include "StrokeMap.h"

// Initializes the map to represent no indices.

void ClearStrokeMap(StrokeMap *map, int iMinStrkId, int iMaxStrkId)
{
	int			cStrokeBuf;

	map->c = 0;
	map->max = 0;
	map->iMinStrkId = iMinStrkId;
	map->iMaxStrkId = iMaxStrkId;

	cStrokeBuf = (iMaxStrkId - iMinStrkId) / 8  + 1;
	
	// Allocate enough space in buffer
	if (!map->pfStrokes || cStrokeBuf > map->cStrokeBuf)
	{
		ASSERT(cStrokeBuf > 0);
		map->pfStrokes = (unsigned char *)ExternRealloc(map->pfStrokes, cStrokeBuf * sizeof(*map->pfStrokes));
		ASSERT(map->pfStrokes);
		if (map->pfStrokes)
		{
			map->cStrokeBuf = cStrokeBuf;
		}
	}

	ASSERT(map->pfStrokes);
	if (map->pfStrokes)
	{
		memset(map->pfStrokes, 0, sizeof(*map->pfStrokes) * map->cStrokeBuf);
	}
}

// Turns "on" the bits within map, based on the array of stroke indices
// within *p (c is the count of indices).  Any bits already "on" in the
// map stay on.

void LoadStrokeMap(StrokeMap *map, int c, int *p)
{
	if (!map->pfStrokes)
	{
		return;
	}

	for (; c; c--, p++)
	{
		int			m, iStrk, iByte;

		ASSERT (*p <= map->iMaxStrkId && *p >= map->iMinStrkId);
		iStrk =  *p - map->iMinStrkId;
		iByte = iStrk / 8;
		if (iByte >= map->cStrokeBuf)
		{
			map->pfStrokes = (unsigned char *)ExternRealloc(map->pfStrokes, (iByte+1) * sizeof(*map->pfStrokes));
			ASSERT(map->pfStrokes);
			if (map->pfStrokes)
			{
				memset(map->pfStrokes + map->cStrokeBuf, 0, (iByte + 1 - map->cStrokeBuf) * sizeof(*map->pfStrokes));
				map->cStrokeBuf = iByte+1;
			}
			else
			{
				map->cStrokeBuf = 0;
				return;
			}
		}
			
		map->pfStrokes[iByte] |= (1 << (iStrk & 0x7));
		map->c++;
		m = iStrk;
		if (map->max < m)
			map->max = m;
	}
}


// Compares two StrokeMaps to see if they are exactly the same
// (returns 0), or if the first one is roughly a subset (returns -1)
// or if the second one is roughly a subset (returns 1).  Here we
// use the heuristic that not reaching to as high a stroke index
// makes you a subset, or having fewer strokes.  When they are
// different, but the heuristics are tied, we arbitrarily call the
// first StrokeMap the subset.

int CmpStrokeMap(StrokeMap *A, StrokeMap *B)
{
	int m, d;
	
	
	d= A->max - B->max;
	if (d != 0)
		return d;

	d = A->c - B->c;
	if (d != 0)
		return d;

	d = A->cStrokeBuf - B->cStrokeBuf;
	if (d != 0)
		return d;

	m = A->max / 8 + 1;
	ASSERT(m <= A->cStrokeBuf);
	return memcmp(A->pfStrokes, B->pfStrokes, m);
}

void FreeStrokeMap(StrokeMap *pMap)
{
	ExternFree(pMap->pfStrokes);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\strokemap.h ===
// StrokeMap.h
// James A. Pittman
// January 6, 2000

// Represents which strokes are included in a word or phrase
// as an array of bit flags.  This is a more convenient representation
// for comparing stroke sets (as compared to the array of stroke indices
// used in recognizers) as there are no sort issues.

// Keeps a current count of the on bits, and the position of the highest
// on bit.  Stroke indices and bit positions are 0-based, but max is really
// a count, so it is 1-based.  For example, if the first 2 bits
// are on, and the fourth bit is on, then c is 3 and max is 4.

// Functions are provide to clear a map, load a map (take the
// array of integer representation and turn on the bits represented
// in that array), dump a map (set an array of integers to
// represent the bits on in the map), and compare 2 maps for
// greater than, less than, or equal.  Loading does not clear,
// so that we can successively accumulate arrays.

// Currently we can only handle up to 256 strokes.

// September 2000 - Allow arbitrary number of strokes (mrevow)
#ifndef _STROKEMAP_


typedef struct
{
	int				c;					// Count of strokes
	int				max;				// Maximum (relative) stroke ID seen so far
	unsigned char	*pfStrokes;			// Buffer to track stroke ID's
	int				cStrokeBuf;			// Size of pfStroke buffer
	int				iMinStrkId;			// Min stroke Id that will be encountered
	int				iMaxStrkId;			// Min stroke Id thatwill encountered
} StrokeMap;

// Initializes the map to represent no indices.
void ClearStrokeMap(StrokeMap *map, int iMinStrkId, int iMaxStrkId);

// Turns "on" the bits within map, based on the array of stroke indices
// within *p (c is the count of indices).  Any bits already "on" in the
// map stay on.
void LoadStrokeMap(StrokeMap *map, int c, int *p);

// Compares two StrokeMaps to see if they are exactly the same
// (returns 0), or if the first one is roughly a subset (returns -1)
// or if the second one is roughly a subset (returns 1).  Here we
// use the heuristic that not reaching to as high a stroke index
// makes you a subset, or having fewer strokes.  When they are
// different, but the heuristics are tied, we arbitrarily call the
// first StrokeMap the subset.
int CmpStrokeMap(StrokeMap *A, StrokeMap *B);

// Free memory associated with a map
void FreeStrokeMap(StrokeMap *pMap);
#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\wordbrk.h ===
// WordBrk.h
// Ahmad A. AbdulKader
// Feb. 10th 2000

// Given Inferno's and Calligrapher's wordbreak information. We'll try to figure out
// the correct one. When they agree, it is most probably correct. If they disgaree we'll
// try to query each recognizer for each other's wordbreaks

#ifndef __WORDBRK_H__
#define __WORDBRK_H__

#include "common.h"
#include "infernop.h"
#include "nfeature.h"
#include "engine.h"
#include "bear.h"

WORDINFO *ResolveWordBreaks (	int		yDev, 
								XRC		*pxrcInferno, 
								BEARXRC	*pxrcCallig, 
								int		*pcWord
							);

WORDINFO *OldResolveWordBreaks (	int		yDev, 
								XRC		*pxrcInferno, 
								BEARXRC	*pxrcBear, 
								int		iLine, 
								int		*pcWord
							);

extern int RecognizeWholeWords(XRC * pXrc, BEARXRC *pxrcBear, WORDMAP *pMap, BOOL bInfernoMap, int cWord, int yDev, WORDINFO *pWord);

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\sparsematrix.h ===
/*******************************************************
 *
 * outDict.h
 *
 * Defines data structures for sparse matrices
 * 
 * In addition to the basic single spare matrix data structure
 * there is a bi-sparse matric version. This version supports
 * the case when you have 2 separate sparse matrices that are
 * guranteed to have the exact same sparsnes structure. These version
 * all have a "2" appended to their data structures. Using this instead
 * of simply 2 basic sparse matricies will give a speed performance
 * improvement when accessing an element at run time.
 *
 * HISTORY
 * Introduced April 2002 (mrevow) based on the out-of-dictionary implemetation
 *
 ******************************************************/

#ifndef H_SPARSE_MATRIX_H
#define H_SPARSE_MATRIX_H

#ifdef __cplusplus
extern "C" {
#endif

/*
 * A sparse matrix is a cRow  cCol matrix having a lot of default values
 * which are stored in a simple fashion The header contains
 * offsets to each row in the table. Each row then only keeps
 * the non-default values
 */
#define	HEADER_ID			0xFDFDFD01
#define HEADER_ID2			0xFDFDFD02

//  Sparse matrix type
typedef unsigned short SPARSE_TYPE;

// The same structure for the Bi-sparse matrix implementation
typedef struct tagSPARSE_TYPE2
{
	SPARSE_TYPE			v1;			// First value
	SPARSE_TYPE			v2;			// First value
} SPARSE_TYPE2;

// SPARSE matrix index type
typedef unsigned short SPARSE_IDX;


// Describes a row of the sparse matrix. Keeps a table of which columns
// are present in the row

typedef struct tagSPARSE_ROW
{
	SPARSE_IDX		*pColId;			// List of column entries present
	SPARSE_TYPE		*pVals;				// Values at each column position
} SPARSE_ROW;

// The same structure for the Bi-sparse matrix implementation
typedef struct tagSPARSE_ROW2
{
	SPARSE_IDX		*pColId;			// List of column entries present
	SPARSE_TYPE2	*pVals;				// Values at each column position
} SPARSE_ROW2;

// The actual sparse matrix structure

typedef struct tagSPARSE_MATRIX
{
	UINT			id;				// Header id (integrity check and distinguishes single from bi)
	UINT			iSize;			// Size of sparse data stored in Bytes
	UINT			cRow;			// Full matrix is cRow x cCol
	UINT			cCol;			// Number of columns
	SPARSE_TYPE		iDefaultVal;	// Default value (In Bi-sparse matrices must be same value)
	SPARSE_IDX		*pRowCnt;		// Count at each row
	SPARSE_IDX		*pRowOffset;	// Offsets in data to each of the cDim rows
	BYTE			*pData;			// Rows of sparse matrix data. Each row is of type SPARSE_ROW
} SPARSE_MATRIX;


extern SPARSE_TYPE lookupSparseMat(SPARSE_MATRIX *pSparseMat, UINT i, UINT j);
extern SPARSE_TYPE2  *lookupSparseMat2(SPARSE_MATRIX *pSparseMat, UINT i, UINT j);

extern BOOL InitializeSparseMatrix(HINSTANCE hInst, int iKey, SPARSE_MATRIX *pSparseMat);
extern BOOL loadSparseMatrixFromFp(char *fname, SPARSE_MATRIX *pSparseMat);

#ifdef __cplusplus
}
#endif

#endif // H_SPARSE_MATRIX_H
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\avalnn.c ===
/****************************************************************
 *
 * avalnn.c
 *
 * Avalanche's Neural nets.
 *
 * 1) avalnn - Used to re-arrange the topN choices using features from both callig and inferno
 * 2) segnn  - choose beteen word segmentation proposed by callig and inferno
 *
 *******************************************************************/
#include <limits.h>
#include <stdlib.h>
#include "common.h"
#include "math16.h"
#include "nfeature.h"
#include "engine.h"
#include "avalanche.h"
#include "avalanchep.h"
#include "bear.h"
#include "runNet.h"
#include "resource.h"
#include "confidence.h"
#include "reliable.h"

#define MAX_SEG_NET	4

static LOCAL_NET	s_cursNet;			// Cursive net for re-arranging topN
static LOCAL_NET	s_printNet;			// Print Net for re-arranging topN
static LOCAL_NET	*s_segNets[MAX_SEG_NET][MAX_SEG_NET] = {NULL};	// Segmentation nets

static int			s_cSegNetMem[MAX_SEG_NET][MAX_SEG_NET] = {0 };
static int			s_cPrintNetMem = 0;
static int			s_cCursNetMem = 0;


#ifdef TRAINTIME_AVALANCHE

int SaveAvalancheTrainData(XRC *pxrc, ALTERNATES *pBearAlt, PALTERNATES *pAlt, ALTINFO *pAltInfo, int iDups, int cTokens,int more,int index);

#endif

// Duplicate a wordMap
WORDMAP * dupWordMap(WORDMAP *pMapIn, unsigned char * szWord)
{
	WORDMAP			*pMap;

	if (!pMapIn)
	{
		return NULL;
	}

	pMap = (WORDMAP *)ExternAlloc(sizeof(*pMap));
	if (pMap)
	{
		memset(pMap, 0, sizeof(*pMap));
		pMap->cStrokes = pMapIn->cStrokes;
		pMap->len = (unsigned short)strlen((char *)szWord);
		pMap->piStrokeIndex = (int *)ExternAlloc(sizeof(*pMap->piStrokeIndex) * pMap->cStrokes);
		if (!pMap->piStrokeIndex)
		{
			ExternFree(pMap->piStrokeIndex);
			ExternFree(pMap);
			pMap = NULL;
			goto exit;
		}
		memcpy(pMap->piStrokeIndex , pMapIn->piStrokeIndex, sizeof(*pMap->piStrokeIndex) * pMap->cStrokes);
	}

exit:
	return pMap;

}

// loads the word aval nets
BOOL LoadWordAvalNets (HINSTANCE hInst)
{
	// Avalanche nets
	if (   !loadNet(hInst, RESID_AVALNET_PRINT, &s_cPrintNetMem, &s_printNet)
		|| !loadNet(hInst, RESID_AVALNET_CURS, &s_cCursNetMem, &s_cursNet)) 
	{
		return FALSE;
	}

	return TRUE;
}

// loads aval single seg nets
BOOL LoadSingleSegAvalNets (HINSTANCE hInst)
{
	int			i, j, iRes;

	
	iRes = RESID_AVALNET_SEG_1_1;

	// The segmentation nets
	for (i = 1 ; i < MAX_SEG_NET ; ++i)
	{

		for (j = 1 ; j < MAX_SEG_NET ; ++j)
		{
			//char		szResName[64];
			LOCAL_NET	net;
			int			iNetSize;

			//sprintf(szResName, "%s_%d_%d", RESID_AVALNET_SEG, i, j);

			if(loadNet(hInst, iRes, &iNetSize, &net))
			{
				ASSERT(iNetSize > 0);
				if (iNetSize >0)
				{
					s_segNets[i][j] = (LOCAL_NET *)ExternAlloc(sizeof(*s_segNets[i][j]));

					if (!s_segNets[i][j])
					{
						return FALSE;
					}

					*s_segNets[i][j] = net;
					s_cSegNetMem[i][j] = iNetSize;
				}
			}
			++iRes;
		}
	}

	return TRUE;
}

// Unload the word aval nets
void UnLoadWordAvalNets ()
{
}

// Unload the segmentation nets
void UnLoadSingleSegAvalNets()
{
	int		i, j;

	for (i = 1 ; i < MAX_SEG_NET ; ++i)
	{

		for (j = 1 ; j < MAX_SEG_NET ; ++j)
		{
			if (s_cSegNetMem[i][j] > 0)
			{
				ExternFree(s_segNets[i][j]);
			}

			s_cSegNetMem[i][j] = 0;
		}
	}
}

/// Checks if there is a net for the word-break combination
// of the inferno/Callig word proposals
// Returns amount of memory needed to run the net
// for the suported combination
int isSupportedWordBreakCombo( int cInf, int cCal)
{
	if (	cInf < MAX_SEG_NET
		&&	cCal < MAX_SEG_NET
		&&	s_cSegNetMem[cInf][cCal] > 0
		&&	s_segNets[cInf][cCal] )
	{
		return s_cSegNetMem[cInf][cCal];
	}
	else
	{
		return 0;
	}
}

unsigned short SupportedWord (XRC *pxrc, unsigned char *pszWord)
{
	if (!pszWord)
		return 0;

	return IsStringSupportedHRC ((HRC)pxrc, pszWord) ? 65535 : 0;
}

unsigned short CapitalizedWord (unsigned char *pszWord)
{
	if (!pszWord)
		return 0;

	if (isupper1252 (pszWord[0]))
		return 65535;

	return 0;
}

unsigned short NumberContent (unsigned char *pszWord)
{
	int c = 0, i = 0;

	if (!pszWord)
		return 0;

	for (;*pszWord; pszWord++, c++)
	{
		if (isdigit1252 (*pszWord))
			i++;
	}

	if (!c)
		return 0;

	return i * 65535 / c;
}

unsigned short PuncContent (unsigned char *pszWord)
{
	int c = 0, i = 0;

	if (!pszWord)
		return 0;

	for (;*pszWord; pszWord++, c++)
	{
		if (ispunct1252 (*pszWord))
			i++;
	}

	if (!c)
		return 0;

	return i * 65535 / c;
}

unsigned short AlphaContent (unsigned char *pszWord)
{
	int c = 0, i = 0;

	if (!pszWord)
		return 0;

	for (;*pszWord; pszWord++, c++)
	{
		if (isalpha1252 (*pszWord))
			i++;
	}

	if (!c)
		return 0;

	return i * 65535 / c;
}


unsigned short AvalScale (int iVal, int iMin, int iMax)
{
	__int64	i64;

	iVal	-=	iMin;
	i64	=	(__int64)iVal * 65535 / (iMax - iMin);

	return (unsigned short) __min (65535, i64);
}

//Function to "tokenize" a string into unigrams
//Basically all it does is that it looks at each character in the string and returns the integer value corrsponding to it
//The token for a character is simply the codept correspodning to that character
//Arguments are the string to be tokenized and the array into which the tokens will be stored
//Written by Manish Goyal--mango--02/25/2002
//iLen is the length of thr string passed in

void UniTokenize(unsigned char *sz,int *piUniToken,int iLen)
{
	int i;
	
	for (i=0;i<iLen;++i)
	{
		piUniToken[i]=sz[i];
		ASSERT(piUniToken[i] <UNIGRAM_SIZE);	

	}

}

//Function to "tokenize" a string into bigrams
//Basically all it does is that it looks at each character pair in the string and returns the integer value corrsponding to it
//The integer for each pair is got by
//256*i1 +i2
//Arguments are--the string to be tokenized and the array into which the tokens will be stored
//iLen is the length of thr string passed in
//Written by Manish Goyal--mango--02/25/2002

void BiTokenize(unsigned char *sz,int *piBiToken,int iLen)
{
	int i;
	int ival;
		
	//Probability of the bigram ending with the alphabet at sz[0]
	ival=256*' ' +sz[0];
	piBiToken[0]=ival;
	ASSERT((ival>=0)&&(ival<BIGRAM_SIZE)); 
	for (i=0;i<iLen-1;++i)
	{
		
		ival=256*sz[i]+sz[i+1];
		piBiToken[i+1]=ival;
		ASSERT((ival>=0)&&(ival<BIGRAM_SIZE)); 

	}
	//Probability of the bigram starting with the letter at sz[Len-1]
	ival=256*sz[iLen-1]+' ';
	piBiToken[iLen]=ival;
	ASSERT((ival>=0)&&(ival<BIGRAM_SIZE)); 
}
/*****Defintion of reliability***************
The idea here is to try and find out how much to trust the string returned by the recognizer
We have a table of pre-computed unreliabiities(higher number means more unreliable)of bigrams unigrmas
GIven a string we run thru the entire string and figure out what the unreliabilities are--and then sum them up
Finally a normalization factor is added(of the strlen) and the scaling is done to make it fall between 0 and 65535
****************************************/

/******Function to compute the Unigram reliability for a string 
	Input parameter--string for which you want to compute the reliability
	               --boolean parmater--if 1 then we want the inferno table
									-- if 0 then we want the bear table
	Return value--The inferno unigram reliability for that string--scaled to fall between 0 and 65535
	Added by Manish Goyal--mango--on 02/25/2002
**************************************/

unsigned short UniReliable(unsigned char *pszWord,BOOL bInf)
{
	int *piToken=NULL;
	int i;
	int iLen;
	int iCost;
	BYTE *pRel;

	unsigned short iRet=65535;
	
	
	//Fist check that the string length is not zero
	iLen=strlen((char*)pszWord);

	if (!iLen)
		goto exit;
	
	//Alocate space for the tokens corresponding to the string
	piToken=(int *)ExternAlloc(sizeof(int)*iLen);
	if (!piToken)
		goto exit;

	//Convert the string to a stream of tokens
	UniTokenize(pszWord,piToken,iLen);	
	iCost=0;


	if (bInf)
	{
		pRel=InfUni;
	}
	else
	{
		pRel=BearUni;
	}

	for (i=0;i<iLen;++i)
	{
		iCost+=pRel[piToken[i]];
		
	}

	//Normalize and scale the cost
	iCost=(65535*iCost)/(100*iLen);

	if (iCost>65535)
		iCost=65535;

	iRet=(unsigned short)iCost;

exit:
	ExternFree(piToken);
	return iRet;
}

/******Function to compute theBigram reliability for a string 
	Input parameter--string for which you want to compute the reliability
	BOOL bInf--trued denotes for inferno,false denotes for Bear
	  Return value--The bigram reliability for that string--scaled to fall between 0 and 65535
	Added by Manish Goyal--mango--on 02/25/2002
**************************************/

unsigned short BiReliable(unsigned char *pszWord,BOOL bInf)
{

	int *piToken=NULL;
	int i;
	int iLen;
	int iCost;
	unsigned short iRet=65535;
	BYTE *pRel;

	iLen=strlen((char *)pszWord);
	if (!iLen)
		goto exit;

	//Number of tokens=strnlen+1--taking the bigrams for space also
	piToken=(int *)ExternAlloc(sizeof(int)*(iLen+1));
	if (!piToken)
		goto exit;

	//First convert the string into a stream of tokens
	BiTokenize(pszWord,piToken,iLen);
	iCost=0;

	if (bInf)
	{
		pRel=InfBi;
	}
	else
	{
		pRel=BearBi;
	}
	for (i=0;i<=iLen;++i)
	{
	
		//Look up the cost from the InfernoBigram table
		iCost+=pRel[piToken[i]];

	}
	

	//Scale and normalize the cost
	iCost=(65535*iCost)/(100*(iLen+1));
	if (iCost >65535)
		iCost=65535;
	
	iRet=(unsigned short)iCost;
	
exit:
	ExternFree(piToken);
	return iRet;
}




// XRCRESULT compate function
int __cdecl CompareXRCRES (const void *elem1, const void *elem2) 
{
	return ((XRCRESULT *)elem1)->cost - ((XRCRESULT *)elem2)->cost;
}

int RunAvalancheNNet (XRC *pxrc, PALTERNATES *pAlt, ALTINFO *pAltInfo)
{
	int				i, cInputFeat;
	int				c, cAlt;
	RREAL			*pPrintOut, *pCursOut, *pInput;
	int				iWinPrint, cOutPrint, iWinCurs, cOutCurs;
	RREAL			*pOutput = NULL;
	RREAL			*pCursMem = NULL;
	RREAL			*pPrintMem = NULL;
	WORDMAP			*pMapInf = NULL;
	int				iRet = -1;
#ifdef TRAINTIME_AVALANCHE
	int index=0;
	int cost=SOFT_MAX_UNITY;
#endif
	
	if (   !(pPrintMem = ExternAlloc(s_cPrintNetMem * sizeof(*pPrintMem)))
		|| !(pCursMem = ExternAlloc(s_cCursNetMem * sizeof(*pCursMem)))
		|| !(pOutput = ExternAlloc (TOT_CAND * sizeof (*pOutput))) 
		)
	{
		goto exit;
	}



	// Check that we have the correct nets
	cInputFeat	= s_printNet.runNet.cUnitsPerLayer[0];

	// Code assumes print and cursive use the same features
	ASSERT(cInputFeat == s_cursNet.runNet.cUnitsPerLayer[0]);

	//The number of candidates should be positive
	ASSERT(pAltInfo->NumCand>=0);
	// we cannot handle more than TOT_CAND
	ASSERT (pAltInfo->NumCand <= TOT_CAND);


	// generate features
	pInput		= pCursMem;
	*pInput++	= pxrc->nfeatureset->iPrint;

	for (i = 0; i < pAltInfo->NumCand; i++)
	{
		*pInput++ = pAltInfo->aCandInfo[i].Callig;
		*pInput++ = pAltInfo->aCandInfo[i].NN;
		//*pInput++ = pAltInfo->aCandInfo[i].NNalt;				// Alternate Inferno Score
		*pInput++ = pAltInfo->aCandInfo[i].WordLen;
		*pInput++ = SupportedWord (pxrc, pAlt->apAlt[i]->szWord);
		*pInput++ = pAltInfo->aCandInfo[i].Aspect;
		*pInput++ = pAltInfo->aCandInfo[i].Height;
		*pInput++ = pAltInfo->aCandInfo[i].BaseLine;
		*pInput++ = pAltInfo->aCandInfo[i].InfCharCost;
		*pInput++ = CapitalizedWord (pAlt->apAlt[i]->szWord);
		*pInput++ = NumberContent (pAlt->apAlt[i]->szWord);
		*pInput++ = PuncContent (pAlt->apAlt[i]->szWord);
		*pInput++ = AlphaContent (pAlt->apAlt[i]->szWord);
		*pInput++ = UniReliable(pAlt->apAlt[i]->szWord, TRUE);			// Inferno Uni- Reliabilty score
		*pInput++ = UniReliable(pAlt->apAlt[i]->szWord, FALSE);			// Bear Unigram - Reliablity
		*pInput++ = BiReliable(pAlt->apAlt[i]->szWord, TRUE);			// Inferno Bi-letter Reliability
		*pInput++ = BiReliable(pAlt->apAlt[i]->szWord, FALSE);			// Bear Bi-letter Reliability
		*pInput++ = pAltInfo->aCandInfo[i].Unigram;
	}

	// In rare cases the merged loop will not have TOT_CAND entries
	for (i = pAltInfo->NumCand; i < TOT_CAND; i++)
	{
		*pInput++ = INT_MIN,		//Callig
		*pInput++ = INT_MAX;		// NN
		*pInput++ = INT_MAX;		// Wordlen
		*pInput++ = INT_MAX;		// Support Word
		*pInput++ = INT_MAX;		// Aspect
		*pInput++ = INT_MAX;		// Height
		*pInput++ = INT_MAX;		// MidLine
		*pInput++ = INT_MIN;		// CharScore
		*pInput++ = INT_MAX;		// Capital Word
		*pInput++ = INT_MAX;		//Number content
		*pInput++ = INT_MAX;		// Punc Content
		*pInput++ = INT_MAX;		// Alpha Content
		*pInput++ = INT_MAX;		// UniReliab Inferno
		*pInput++ = INT_MAX;		// Uni Reliable Bear
		*pInput++ = INT_MAX;		// Bi Reliable Inf
		*pInput++ = INT_MAX;		// Bi Reliable Bear
		*pInput++ = INT_MAX;		// Word Unigram
	}

	
	ASSERT(pInput - pCursMem == cInputFeat);
	if (pInput - pCursMem != cInputFeat)
	{
		goto exit;
	}
	// Both nets use identical inputs
	memcpy(pPrintMem, pCursMem, sizeof(*pCursMem) * s_cPrintNetMem);

	pPrintOut = runLocalConnectNet(&s_printNet, pPrintMem, &iWinPrint, &cOutPrint);
	pCursOut = runLocalConnectNet(&s_cursNet, pCursMem, &iWinCurs, &cOutCurs);

	// Bailout and keep inferno's alt list
	if (!pPrintOut || !pCursOut)
	{
		goto exit;
	}

	for (i = 0; i < TOT_CAND; i++)
	{
		ASSERT(pPrintOut[i]>= 0 && pPrintOut[i]<= SOFT_MAX_UNITY);
		ASSERT(pCursOut[i]>= 0 && pCursOut[i]<= SOFT_MAX_UNITY);
		pOutput[i] = (pxrc->nfeatureset->iPrint * pPrintOut[i] + (1000 - pxrc->nfeatureset->iPrint) * pCursOut[i]) / 1000;

		ASSERT(pOutput[i] >= 0 && pOutput[i]<= SOFT_MAX_UNITY);
	}



// We now set the confidence level to low over here
	pxrc->answer.iConfidence=RECOCONF_LOWCONFIDENCE;
	//ASSERT((int)pxrc->answer.cAlt == pAltInfo->NumCand);
	
	// Should be at least one inferno answer that has a map
	// Need to save it because callig options dont have maps (bug!!)
	pMapInf = pxrc->answer.aAlt[0].pMap;

	// Put the final costs into the inferno XRESULT
	// Need also to reorganize the string pointers 
	// to match the merged list order

	cAlt	=	(unsigned int)pAltInfo->NumCand;
	for (c = cAlt -1 ; c >=0; c--)
	{
		if (  !pxrc->answer.aAlt[c].szWord 
			|| pxrc->answer.aAlt[c].szWord != pAlt->apAlt[c]->szWord)
		{
			pxrc->answer.aAlt[c].szWord	=	(unsigned char *)ExternRealloc (pxrc->answer.aAlt[c].szWord,
				(strlen (pAlt->apAlt[c]->szWord) + 1) * sizeof (unsigned char));

			if (!pxrc->answer.aAlt[c].szWord)
			{
				goto exit;
			}

			strcpy (pxrc->answer.aAlt[c].szWord, pAlt->apAlt[c]->szWord);
		}

		pxrc->answer.aAlt[c].cost = SOFT_MAX_UNITY - pOutput[c];

		if (!pxrc->answer.aAlt[c].pMap)
		{
			pxrc->answer.aAlt[c].pMap = dupWordMap(pMapInf, pAlt->apAlt[c]->szWord);
			pxrc->answer.aAlt[c].pXRC = pxrc;
			pxrc->answer.aAlt[c].cWords = 1;
			++pxrc->answer.cAlt;
		}

#ifdef TRAINTIME_AVALANCHE

		if (cost>=pxrc->answer.aAlt[c].cost)
		  {
			  cost=pxrc->answer.aAlt[c].cost;
			  index=c;
			
		  }
			
		
	
#endif

	}

#ifdef TRAINTIME_AVALANCHE

		
		SaveAvalancheTrainData (NULL, NULL, NULL, NULL, 0,0,1,index);
	
#endif

	TruncateWordALTERNATES (&pxrc->answer, cAlt);

	qsort(pxrc->answer.aAlt, pxrc->answer.cAlt, sizeof (XRCRESULT), CompareXRCRES);

	iRet = 0;

exit:
	ExternFree(pPrintMem);
	ExternFree(pCursMem);
	ExternFree(pOutput);
	return iRet;
}

// return 0 if inferno wins or 1 if callig wins
// Choose net based on cInferno / cCallig combination
// Note iFeat just used for DBG check
int NNSegmentation (RREAL *pFeat, int iFeat, int cInf, int cCal)
{
	int			iWin, cOut;
	RREAL		*pOut;

	ASSERT(s_cSegNetMem[cInf][cCal] > 0);
	ASSERT(s_segNets[cInf][cCal] != NULL);
	ASSERT(iFeat == s_segNets[cInf][cCal]->runNet.cUnitsPerLayer[0]);
	pOut = 	runLocalConnectNet(s_segNets[cInf][cCal], pFeat, &iWin, &cOut);
	
	return (!iWin);
}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\avalnnrun.c ===
#include <common.h>
#include <limits.h>

#include "math16.h"

#include "runNet.h"
#include "resource.h"

#define MAX_MSEG_NET	10
static LOCAL_NET	*s_msegNets[MAX_MSEG_NET] = {NULL};	// Multiple Segmentation nets
static int			s_cmSegNetMem[MAX_MSEG_NET] = {0 };



int NNMultiSeg (int iTuple, int cFeat, int *pFeat, int cSeg, int *pOutputScore)
{
	int	i, iBest	=	0;
	RREAL *pmSegMem;
	RREAL *pOut;
	int iWin,cOut;



	if (iTuple < 0 || iTuple >= MAX_MSEG_NET)
	{
		return -1;
	}
	ASSERT(s_msegNets[iTuple] != NULL);
	ASSERT(s_cmSegNetMem[iTuple]> 0);

	if (cFeat != s_msegNets[iTuple]->runNet.cUnitsPerLayer[0])
	{
		return -1;
	}

	if (cSeg > s_msegNets[iTuple]->runNet.cUnitsPerLayer[2])
	{
		return -1;
	}
				
	
	if (!(pmSegMem = ExternAlloc(s_cmSegNetMem[iTuple]* sizeof(*pmSegMem))) )
	{
		return 0;
	}

	
	ASSERT(cFeat == s_msegNets[iTuple]->runNet.cUnitsPerLayer[0]);	

	for (i = 0 ; i < s_msegNets[iTuple]->runNet.cUnitsPerLayer[0] ; ++i)
	{
		pmSegMem[i] = (RREAL)pFeat[i];
	}

	pOut = runLocalConnectNet(s_msegNets[iTuple], pmSegMem, &iWin, &cOut);	

	for (i = 0; i < cSeg; i++)
	{
		pOutputScore[i]	=pOut[i];
	}
	ExternFree(pmSegMem);

	return (iWin);
}




BOOL loadmsegAvalNets(HINSTANCE hInst)
{
	int			i,iRes;



	iRes = RESID_MSEGAVALNET_SEG_1_2;

	// The multiple segmentation nets
	for (i = 0 ; i < MAX_MSEG_NET ; ++i)
	{

		//char		szResName[64];
		LOCAL_NET	net;
		int			iNetSize;

		//sprintf(szResName, "%s_%d_%d", RESID_AVALNET_SEG, i, j);

		if(loadNet(hInst, iRes, &iNetSize, &net))
		{
			ASSERT(iNetSize > 0);
			if (iNetSize >0)
			{
				s_msegNets[i] = (LOCAL_NET *)ExternAlloc(sizeof(*s_msegNets[i]));

				if (!s_msegNets[i])
				{
					return FALSE;
				}

				*s_msegNets[i] = net;
				s_cmSegNetMem[i] = iNetSize;
			}
		}
		++iRes;
	
	}

	return TRUE;
}

// Unload the segmentation nets
void unloadmsegAvalNets()
{
	int		i ;

	for (i = 0 ; i < MAX_MSEG_NET ; ++i)
	{

		
		if (s_cmSegNetMem[i] > 0)
		{
			ExternFree(s_msegNets[i]);
		}
		s_cmSegNetMem[i] = 0;
	
	}

}
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\wordbrk.c ===
// WordBrk.c
// Ahmad A. AbdulKader & Jay Pittman
// Feb. 10th 2000

// Given Inferno's and Calligrapher's wordbreak information. We'll try to figure out
// the correct one. When they agree, it is most probably correct. If they disgaree we'll
// try to query each recognizer for each other's wordbreaks
#include <limits.h>
#include "common.h"
#include "nfeature.h"
#include "engine.h"
#include "nnet.h"
#include "charmap.h"
#include "charcost.h"

#include "bear.h"
#include "wordbrk.h"
#include "strokemap.h"
#include "panel.h"
#include "Avalanche.h"
#include "avalanchep.h"
#include <runNet.h>
#include <strsafe.h>
#include <GeoFeats.h>

#ifdef HWX_TIMING
#include <madTime.h>
	extern void setMadTiming(DWORD, int);
#endif

// Walks across both recognizer's word cuts and iteratively finds the next
// group of words where the groups use exactly the same strokes.
// When they agree on the word cutting, this will be a single word.
// When they do not, it may take several words on each side to find the
// next cut they agree upon.  Presumably if we get to the end of the text,
// they will agree there.

// When the subphrase is a word (when they both agree on the next cut), we
// combine the top 10 lists as if we were in word mode.
// When the subphrase is a set of words, we sum the scores of each recognizer's
// top 1 words across the phrase, and compare sums.  We will use the cuts
// of the winning recognizer.

#ifdef TRAINTIME_AVALANCHE
void SaveSegmentation (XRC *pxrc, BEARXRC *pxrcBear, int yDev, int cInferno, WORDMAP	*pwmapInferno, int cCallig, WORDMAP	*pwmapCallig);
#endif

extern int NNSegmentation (int *pFeat, int iFeat, int cInf, int cCal);
extern int isSupportedWordBreakCombo( int cInf, int cCal);
int GetWordMapBearSpaceOut (BEARXRC *pxrc, GLYPH *pLineGlyph, WORDMAP *pLeftMap, WORDMAP *pRightMap);
int GetInfernosCost (XRC *pxrcInferno, int cmap, WORDMAP *pmap);
extern unsigned short UniReliable(unsigned char *pszWord,BOOL bInf);
extern unsigned short BiReliable(unsigned char *pszWord,BOOL bInf);
extern int UnigramCost(unsigned char *szWord);
extern int RecognizeWordEx (XRC *pxrcInferno, WORDMAP *pWordMap, int yDev, ALTERNATES *pAlt, XRC **ppxrc);


int LastCharPunc (unsigned char *psz)
{
	return ispunct1252 (psz[strlen((char *)psz) - 1]) == 0 ? 0 : 1;
}

int LastCharNum (unsigned char *psz)
{
	return isdigit1252 (psz[strlen((char *)psz) - 1]) == 0 ? 0 : 1;
}

int LastCharLower (unsigned char *psz)
{
	return islower1252 (psz[strlen((char *)psz) - 1]) == 0 ? 0 : 1;
}

int LastCharUpper (unsigned char *psz)
{
	return isupper1252 (psz[strlen((char *)psz) - 1]) == 0 ? 0 : 1;
}

int FirstCharPunc (unsigned char *psz)
{
	return ispunct1252 (psz[0]) == 0 ? 0 : 1;
}

int FirstCharNum (unsigned char *psz)
{
	return isdigit1252 (psz[0]) == 0 ? 0 : 1;
}

int FirstCharLower (unsigned char *psz)
{
	return islower1252 (psz[0]) == 0 ? 0 : 1;
}

int FirstCharUpper (unsigned char *psz)
{
	return isupper1252 (psz[0]) == 0 ? 0 : 1;
}


// Recognizes a number of MAPS in word mode by calling RecognizeWord
int RecognizeWholeWords(XRC * pXrc, BEARXRC *pxrcBear, WORDMAP *pMap, BOOL bInfernoMap, int cWord, int yDev, WORDINFO *pWord)
{
	int			c, iRet, iWord = 0;
#ifdef HWX_TIMING
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif

	ASSERT(pMap);
	ASSERT(pWord);
	
	
	for (c = 0; c < cWord; c++, pMap++ )
	{
		if (pMap->cStrokes <= 0)
		{
			continue;
		}

		// recognize this word in word mode
		if (( iRet = RecognizeWord (pXrc, pxrcBear, pMap, bInfernoMap, yDev, &pWord->alt, 1)) <= 0)
		{
			return iRet;
		}
		
		pWord->cStrokes			=	pMap->cStrokes;
		
		// we are just copying the pointer here, so we will not free it in the end
		// since the original pointer in the word map should be freed eventually
		pWord->piStrokeIndex	=	pMap->piStrokeIndex;
		pWord++;
		++iWord;
	}


#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	setMadTiming(iEndTime - iStartTime, MM_RECOG_WHOLE_WORD);
#endif
	return iWord;
}

// Update the min/max stroke Ids in the collection of maps supplied as input
// Caveate: Assumes that the maps have properly constructed strokeId arrays, i.e.
// they conatain a sorted list of stroke ID's
void getMinMaxStrokeId(WORDMAP *pMap, int cMap, int *iMin, int * iMax)
{
	int				i;

	for (i = 0 ; i < cMap && pMap ; ++i, ++pMap)
	{
		if (pMap->cStrokes > 0)
{
			*iMin = min(*iMin, pMap->piStrokeIndex[0]);
			*iMax = max(*iMax, pMap->piStrokeIndex[pMap->cStrokes-1]);
		}
	}
}

// Failure conditions: (returns -1)
// 1) Does not find strokes in the map
// 2) The first stroke in the map is the first stroke in the feature set
//      (i.e. There are no previous strokes)
// 3) Map has no strokes
int	GetSpaceOutput (XRC *pxrc, WORDMAP *pMap)
{
	REAL		*pCol	=	pxrc->NeuralOutput;
	int			iStrk, iAct;
	NFEATURE	*pFeat;

	if (pMap->cStrokes <= 0)
		return -1;

	iStrk	=	pMap->piStrokeIndex[0];
	pFeat	=	pxrc->nfeatureset->head;

	if (pFeat->iStroke	==	iStrk || pFeat->next->iSecondaryStroke == iStrk)
		return -1;

	while (pFeat->next && pFeat->next->iStroke != iStrk && pFeat->next->iSecondaryStroke != iStrk)
	{
		pFeat	=	pFeat->next;
		pCol	+=	gcOutputNode;
	}

	if (!pFeat->next)
		return -1;

	iAct	=	pCol[BeginChar2Out(' ')];

	return iAct;
}

#undef TRAINTIME_AVALANCHE

#if defined (TRAINTIME_AVALANCHE) 


WORDINFO *CopyWordBreaks (XRC *pxrcInferno, int yDev, int *pcWord);

// so' we'll cheat here and copy the word mapping that we estimated from the prompt
// !!!!!Wish we could do that in the real world!!!!!
WORDINFO *ResolveWordBreaks (	int		yDev, 
								XRC		*pxrcInferno, 
								BEARXRC	*pxrcBear, 
								int		*pcWord
							)
{		
	int			posInferno		= 0;
	int			totInferno		= pxrcInferno->answer.aAlt[0].cWords;
	int			cwmapInferno	= totInferno;
	WORDMAP		*pwmapInferno	= pxrcInferno->answer.aAlt[0].pMap;
	int			posCallig		= 0;
	int			totCallig;
	WORDMAP		*pwmapCallig;
	int			cwmapCallig, 
				iMinStrkId, 
				iMaxStrkId;
	StrokeMap	smapInferno, 
				smapCallig;

	cwmapCallig		= 
	totCallig		= pxrcBear->answer.aAlt[0].cWords;
	pwmapCallig		= pxrcBear->answer.aAlt[0].pMap;

	// Get the min and maximum stroke IDs for this piece of Ink
	ASSERT (pwmapInferno && pwmapInferno->piStrokeIndex);
	iMinStrkId = iMaxStrkId = pwmapInferno->piStrokeIndex[0];
	getMinMaxStrokeId(pwmapCallig, cwmapCallig, &iMinStrkId, &iMaxStrkId);
	getMinMaxStrokeId(pwmapInferno, cwmapInferno, &iMinStrkId, &iMaxStrkId);
	ASSERT(iMaxStrkId >= iMinStrkId);
	smapInferno.pfStrokes = smapCallig.pfStrokes = NULL;
	smapInferno.cStrokeBuf = smapCallig.cStrokeBuf = 0;
	
	while ((posInferno < totInferno) && (posCallig < totCallig))
	{
		int d;

		ClearStrokeMap(&smapInferno, iMinStrkId, iMaxStrkId);
		ClearStrokeMap(&smapCallig, iMinStrkId, iMaxStrkId);

		if(!smapInferno.pfStrokes || !smapCallig.pfStrokes)
		{
			goto failure;
		}

		// mask out stroke bitmaps
		LoadStrokeMap(&smapInferno, pwmapInferno->cStrokes, pwmapInferno->piStrokeIndex);
		LoadStrokeMap(&smapCallig, pwmapCallig->cStrokes, pwmapCallig->piStrokeIndex);

		// do we have identical mappings
		d = CmpStrokeMap(&smapInferno, &smapCallig);

		// Yes, they agreed. So just add this to our wordinfo buffer
		if (!d)
		{
			// incr pointers
			posInferno++;
			posCallig++;

			pwmapInferno++;
			pwmapCallig++;

			--cwmapInferno;
			--cwmapCallig;
		}
		// NO. Then we have to resolve this
		else
		{
			int			cInferno = 1, cCallig = 1;
			
			// Loop adding subset recognizer until we compare equal or we run out of strokes/words
			while (d && (cInferno < cwmapInferno || cCallig < cwmapCallig) )
			{
				// If inferno or calligrapher have run out of strokes just
				// load strokes into the other otherwise check the value of d

				// Inferno ran out of strokes, then we'll run callig
				if (cInferno >= cwmapInferno)
				{
					ASSERT (cCallig < cwmapCallig);

					LoadStrokeMap(&smapCallig, pwmapCallig[cCallig].cStrokes, pwmapCallig[cCallig].piStrokeIndex);
					cCallig++;
				}
				else
				// Callig ran out of strokes, then we'll run Inferno
				if (cCallig >= cwmapCallig)
				{
					ASSERT (cInferno < cwmapInferno);

					LoadStrokeMap(&smapInferno, pwmapInferno[cInferno].cStrokes, pwmapInferno[cInferno].piStrokeIndex);
					cInferno++;
				}
				// Both inferno and callig still have strokes
				else 
				if (d < 0 )
				{
					LoadStrokeMap(&smapInferno, pwmapInferno[cInferno].cStrokes, pwmapInferno[cInferno].piStrokeIndex);
					cInferno++;
				}
				else
				{
					LoadStrokeMap(&smapCallig, pwmapCallig[cCallig].cStrokes, pwmapCallig[cCallig].piStrokeIndex);
					cCallig++;
				}

				d = CmpStrokeMap(&smapInferno, &smapCallig);
			}

			// Compare recognizers using the segmentation NN
			if (d == 0)
			{
				SaveSegmentation (pxrcInferno, pxrcBear, yDev, cInferno, pwmapInferno, cCallig, pwmapCallig);
			}

			// incr pointers
			posInferno		+=	cInferno;
			posCallig		+=	cCallig;

			pwmapInferno	+=	cInferno;
			pwmapCallig		+=	cCallig;

			cwmapInferno	-= cInferno;
			cwmapCallig		-= cCallig;
		}
	}

	FreeStrokeMap(&smapInferno);
	FreeStrokeMap(&smapCallig);

	return CopyWordBreaks (pxrcInferno, yDev, pcWord);

failure:
	return NULL;
}
#else

// Clip the value at the preset level USHRT_MAX
static int clipToMax(int val)
{
	return (min(val, USHRT_MAX));
}

/****************************************************************
*
* NAME: AddBetweenWordFeats
*
* DESCRIPTION:
*	 Add features for between 2 words
*		4 - From Word before space (Identity of last char  BEFORE space)
*		4 - from word After space (Identity of first char AFTER space)
*		3 - from the space itself (Inferno space net Bear space net, physical width betwen Glyphs)*
*
*  RETURNS
*	number of features added
*
* HISTORY
*	March 2002
*
***************************************************************/
static int AddBetweenWordFeats(int *pFeat, UCHAR *pszInfBest, UCHAR *pszPrevInf)
{
	int			iFeat = 0;

	// if this is an invalid or empty string
	// or if the ink is invalid
	if	( NULL == pszPrevInf || '\0' == *pszPrevInf)
	{
		pFeat[iFeat++]	=	0;			// LastChar Punc
		pFeat[iFeat++]	=	0;			// Last Char Num
		pFeat[iFeat++]	=	0;			// Last Char Lower
		pFeat[iFeat++]	=	0;			// Last Char Upper
	}
	else
	{
		pFeat[iFeat++]	=	LastCharPunc (pszPrevInf);
		pFeat[iFeat++]	=	LastCharNum (pszPrevInf);
		pFeat[iFeat++]	=	LastCharLower (pszPrevInf);
		pFeat[iFeat++]	=	LastCharUpper (pszPrevInf);
	}

	// if this is an invalid or empty string
	// or if the ink is invalid
	if	( NULL == pszInfBest || '\0' == *pszInfBest)
	{
		pFeat[iFeat++]	=	0;			// First Char Punc
		pFeat[iFeat++]	=	0;			// First Char Num
		pFeat[iFeat++]	=	0;			// First Char Lower
		pFeat[iFeat++]	=	0;			// First Char Upper

		if (pszPrevInf)
		{
			*pszPrevInf = '\0';
		}
	}
	else
	{
		pFeat[iFeat++]	=	FirstCharPunc (pszInfBest);
		pFeat[iFeat++]	=	FirstCharNum (pszInfBest);
		pFeat[iFeat++]	=	FirstCharLower (pszInfBest);
		pFeat[iFeat++]	=	FirstCharUpper (pszInfBest);
	}

	return iFeat;
}

static int addGapFeatures(XRC * pxrcInferno, BEARXRC *pxrcCallig, WORDMAP *pMap, int yDev, int *pFeat)
{
	int			iFeat,
				iSpc;

	iFeat = 0;

	if (NULL != pxrcInferno && NULL != pMap)
	{
		GLYPH		*pCurGlyph;
		GLYPH		*pPrevGlyph;
		RECT		r1, r2;

		pCurGlyph		=	GlyphFromWordMap (pxrcInferno->pGlyph, pMap);
		pPrevGlyph		=	GlyphFromWordMap (pxrcInferno->pGlyph, pMap - 1);

		// Physical space between words
		if (pCurGlyph && pCurGlyph->frame && pPrevGlyph && pPrevGlyph->frame)
		{
			GetRectGLYPH (pCurGlyph, &r1);
			GetRectGLYPH (pPrevGlyph, &r2);

			pFeat[iFeat++]	= 1000 * (r1.left - r2.right) / yDev;
		}
		else
		{
			pFeat[iFeat++]	= 0;
		}

		iSpc = GetSpaceOutput (pxrcInferno, pMap);
		if (iSpc < 0)
		{
			pFeat[iFeat++]	=	INT_MIN;
		}
		else
		{
			pFeat[iFeat++]	=	iSpc;
		}

		// We handle different boundary condition differently for 
		if (pPrevGlyph && pCurGlyph)
		{
			iSpc	=	GetWordMapBearSpaceOut (pxrcCallig, pxrcCallig->pGlyph, pMap - 1, pMap);
			if (iSpc < 0)
			{
				pFeat[iFeat++] = INT_MIN;
			}
			else
			{
				pFeat[iFeat++] = iSpc;
			}
		}
		else
		{
			// This should be set to INT_MIN, but for historical reasons (we had already started the training) 
			pFeat[iFeat++] = 0;
		}

		DestroyGLYPH (pCurGlyph);
		DestroyGLYPH (pPrevGlyph);	
	}
	else
	{
		pFeat[iFeat++] = 0;
		pFeat[iFeat++] = 0;
		pFeat[iFeat++] = 0;
	}

	return iFeat;
}


/****************************************************************
*
* NAME: addWordInkFeats
*
*
* DESCRIPTION:
*
*  Add in the features for a word derived from either
*  inferno or Bear that depend on ink. 
*  iAgree indicates if Inferno and Bear agreed.
*  A value of -1 indicates dont add this feature
*
*  Returns the number of features added
*
* HISTORY
*
* March 2002 added
*
***************************************************************/
static int addWordInkFeats(XRC *pxrcWord, UCHAR * pszWord, int *pFeat, int iRecognizerCost, BOOL bIsInf, int iAgree)
{
	int			iAspect, iHeight, iMidline, iCharCost;
	int			iFeat = 0;

	// Insert Default values if the word failed
	if (NULL == pszWord)
	{
		pFeat[iFeat++]	= iRecognizerCost;		// Regular Inferno word score

		if (!bIsInf)
		{
			pFeat[iFeat++] = INT_MIN;
		}

		pFeat[iFeat++]	= INT_MIN;		// Character by Char word score
		pFeat[iFeat++]	= INT_MAX;		// Aspect Ratio
		pFeat[iFeat++]	= INT_MAX;		// Height
		pFeat[iFeat++]	= INT_MAX;		// Midline
		pFeat[iFeat++]	= INT_MAX;		// Inferno Reliability
		pFeat[iFeat++]	= INT_MAX;		// Inferno Biletter reliability
		pFeat[iFeat++]	= INT_MAX;		// Word Unigram cost
	}
	else
	{
		ASSERT(pszWord);

		GetGeoCosts (pxrcWord, pszWord, &iAspect, &iHeight, &iMidline, &iCharCost);

		// Cost from the recognizer for this word
		pFeat[iFeat++]	= iRecognizerCost;

		// Convention is to add the agree flag when adding Bear's version of the word
		if (!bIsInf)
		{
			pFeat[iFeat++] = iAgree;
		}

		// Geometrics
		//pFeat[iFeat++] = GetCharCost(pxrcWord, pszWord);
		pFeat[iFeat++] = iCharCost;
		pFeat[iFeat++] = iAspect;
		pFeat[iFeat++] = iHeight;
		pFeat[iFeat++] = iMidline;

		// Inferno Reliability
		pFeat[iFeat++] = UniReliable(pszWord, bIsInf);
		pFeat[iFeat++] = BiReliable(pszWord, bIsInf);

		// Word Unigram from dictionary
		pFeat[iFeat++] = UnigramCost(pszWord);
	}

	return iFeat;
}

/****************************************************************
*
* NAME: saveLastWord
*
*
* DESCRIPTION:
*
* Saves a copy of the source word in the destination.
* Expands the Size of destination string as necessary
*
* RETURNS
*  Current size of destination string
*
* HISTORY
*
*  Written March 2002
***************************************************************/
static int saveLastWord(UCHAR *pszSrc, UCHAR **pszDest, int cDest)
{
	int		cLen;

	if (!pszDest)
	{
		return 0;
	}

	if (NULL != pszSrc)
	{
		cLen = strlen((char *)pszSrc) + 1;
		
		if (cLen > cDest || NULL == *pszDest)
		{
			*pszDest = (UCHAR *)ExternRealloc(*pszDest, cLen * sizeof(**pszDest));

			if ( NULL == *pszDest)
			{
				cDest = 0;
			}
			else
			{
				cDest = cLen;
			}
		}

		if (NULL != *pszDest)
		{
			if (FAILED(StringCchCopyA(*pszDest, cDest, pszSrc)))
			{
				(*pszDest)[0] = '\0';
			}
		}
	}
	else
	{
		if (*pszDest)
		{
			(*pszDest)[0] = '\0';
		}
	}

	return cDest;
}

// Compare Inferno's and Bear's word breaks for the same specific piece of INK
// WARNING: This functions assumes that the word maps passed on both sides correspond
// to the same piece of ink. Checks for that should proceed the call to this func
// returns FALSE when Inferno wins and TRUE when Bear wins
//
// 20 June 2000 - Changes to use multiple nets based on the number 
// of candidate words proposed by inferno and calligrapher
// The features that used are:
// A) For Inferno word-breaking proposal
//	For each word (i) in Inferno's word breaking proposal:
//		1) Inferno cost for word i
//		2) Calligrapher's cost for word i
//
//	3) Number of times Inferno and calligrapher agreed on top 1 word choice
//	4) Cumulative size of word break (only if > 1 word proposed)
//	5) Cumulative inferno space cost for breaks (only if > 1 word proposed))
//
// Repeat Information for Calligraphers word breaking proposal
//
// Add in counts of character group ID for last char Before space/ first Char after Space
// First for Inferno's word breaking, then for Callig (Only if > 1 word proposed)
// Groups used are Punc, Numbers Lowercase, Upper Case
// So to summarize here are the count of features for Various 
// number of words proposed by Inferno / Callig
//  Inferno  Callig		# Features
//    1			2			19
//	  2			1			19
//	  2			2			31
//	  1			3			21
//	  3			1			21
// If combination is not one of the 5 listed above, just return FALSE

// Feature Count:
//	iPrint
//	For each word proposed	8 Inferno + 9 = 17
//  For each gap			4 Before gap + 4 After Gap + 3 Gap = 11
// 
// Total Feat = 1 + (cWord * 17) + ((cWord -1) * 11)
//
static BOOL CmpWrdBrks	(	XRC		*pxrcInferno, 
							BEARXRC *pxrcMainBear,
							int		yDev, 
							int		cInferno, 
							WORDMAP	*pwmapInferno, 
							int		cCallig, 
							WORDMAP	*pwmapCallig
						)
{
	int				c, cSeg;
	RREAL			*pFeat;
	int				iFeat, cFeatMax, iAgree, iCost;
	XRC				*pxrcWord = NULL;
	WORDMAP		*pMap;
	ALTERNATES	alt;
	unsigned char	*pszInfBest, *pszBearBest, *pszPrevWord = NULL;
	int				cPrevWordLen = 0;
	BOOL			bRet;

#ifdef HWX_TIMING
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif

	// Is there a Net for this combination of Callig / Inferno proposals?
	// if not we use inferno's proposal

	cFeatMax = isSupportedWordBreakCombo(cInferno, cCallig);

	if (cFeatMax <= 0)
	{
		// Not Supported
		return TRUE;
	}

	pFeat = (int *) ExternAlloc(sizeof(*pFeat) * cFeatMax);

	if (NULL == pFeat)
	{
		return FALSE;
	}

	yDev = max(1, yDev);

	iFeat = 0;

	pFeat[iFeat++]	=	pxrcInferno->nfeatureset->iPrint;

	// Accumulate features for each word in Inferno's word-breaking proposal
	for (c = 0, pMap = pwmapInferno; c < cInferno; c++, pMap++)
	{
		HRC			hrcCallig;
		BEARXRC		*pxrcCallig;

		// recognize the ink corresponding to this word map in word mode
		cSeg	=	RecognizeWordEx (pxrcInferno, pMap, yDev, &pMap->alt, &pxrcWord);
		
		if (cSeg <= 0 || pMap->alt.cAlt <= 0)
		{
			pszInfBest	= NULL;
			iCost		= INT_MAX;
		}
		else
		{
			pszInfBest		= pMap->alt.aAlt[0].szWord;
			iCost			= pMap->alt.aAlt[0].cost;
		}
		// This adds 8 Features
		iFeat += addWordInkFeats(pxrcWord, pszInfBest, pFeat + iFeat, iCost, TRUE, -1);
		ASSERT(iFeat < cFeatMax);

		// Pass the ink for this word to Calligrapher to get its cost
		hrcCallig	=	BearRecognize (pxrcInferno, pxrcInferno->pGlyph, pMap, 1);			
		pxrcCallig	=	(BEARXRC *) hrcCallig;

		if (NULL == pxrcCallig || 0 == pxrcCallig->answer.cAlt)
		{
			pszBearBest		= NULL;
			iAgree			= INT_MIN;
			iCost			= INT_MIN;
		}
		else
		{
			pszBearBest = pxrcCallig->answer.aAlt[0].szWord;
			iCost		= pxrcCallig->answer.aAlt[0].cost;

			// Do Bear and Inferno agree
			if ( NULL == pszInfBest)
			{
				iAgree	= INT_MIN;
			}
			else if (0 != strcmp(pszBearBest, pszInfBest))
			{
				iAgree	= 0;
			}
			else
			{
				iAgree	= 1;
			}
		}

		// This will add 9 Features
		iFeat += addWordInkFeats(pxrcWord, pszBearBest, pFeat + iFeat, iCost, FALSE, iAgree);
		ASSERT(iFeat < cFeatMax);


		// add in Features for gap between 2 words
		if (c > 0)
		{
			iFeat += AddBetweenWordFeats(pFeat + iFeat, pszInfBest, pszPrevWord);
			ASSERT(iFeat < cFeatMax);
			iFeat += addGapFeatures(pxrcInferno, pxrcMainBear, pMap, yDev, pFeat + iFeat);
			ASSERT(iFeat < cFeatMax);
		}

		cPrevWordLen = saveLastWord(pszInfBest, &pszPrevWord, cPrevWordLen);

		if (hrcCallig)
		{
			BearDestroyHRC (hrcCallig);
		}

		if (pxrcWord)
		{
			DestroyHRC ((HRC)pxrcWord);
		}
	} // End of loop over words in Inferno's word-break proposal

	// Callig's word contributions
	for (c = 0, pMap = pwmapCallig; c < cCallig; c++, pMap++)
	{
		pxrcWord	=	NULL;

		// In Rare situations, Calligrapher might return a mapping with zero strokes
		// Check \\roman\dante\english\ink\cursive\natural\aanaturl\ea0enng2.fff, panel 8, Phrase: 'of the'
		if (pMap->cStrokes > 0)
		{
			cSeg	=	RecognizeWordEx (pxrcInferno, pMap, yDev, &alt, &pxrcWord);
		}
		else
		{
			pxrcWord	= NULL;
			cSeg		= 0;
			alt.cAlt	= 0;
		}

		if (cSeg <= 0 || alt.cAlt <= 0)
		{
			pszInfBest		= NULL;
			iCost			= INT_MAX;
		} 
		else
		{
			pszInfBest		= alt.aAlt[0].szWord;
			iCost			= alt.aAlt[0].cost;
		}

		// This adds 8 Features
		iFeat += addWordInkFeats(pxrcWord, pszInfBest, pFeat + iFeat, iCost, TRUE, -1);
		ASSERT(iFeat < cFeatMax);

		if (pMap->alt.cAlt > 0)
		{
			pszBearBest		= pMap->alt.aAlt[0].szWord;
			iCost			= pMap->alt.aAlt[0].cost;

			// Do Bear and Inferno agree
			if ( NULL == pszBearBest || NULL == pszInfBest)
			{
				iAgree	= INT_MIN;
			}
			else if (0 != strcmp(pszBearBest, pszInfBest))
			{
				iAgree	= 0;
			}
			else
			{
				iAgree	= 1;
			}
		}
		else
		{
			pszBearBest		= NULL;
			iCost			= INT_MIN;
			iAgree			= INT_MIN;
		}

		// This will add 9 Features
		iFeat += addWordInkFeats(pxrcWord, pszBearBest, pFeat + iFeat, iCost, FALSE, iAgree);
		ASSERT(iFeat < cFeatMax);

		if (c > 0)
		{
			if (cSeg > 0 && pxrcMainBear)
			{
				iFeat += AddBetweenWordFeats(pFeat + iFeat, pszInfBest, pszPrevWord);
				ASSERT(iFeat < cFeatMax);

				iFeat += addGapFeatures(pxrcInferno, pxrcMainBear, pMap, yDev, pFeat + iFeat);
			}
			else
			{
				iFeat += AddBetweenWordFeats(pFeat + iFeat, pszInfBest, pszPrevWord);
				pFeat[iFeat++]	= INT_MIN;
				pFeat[iFeat++]	= INT_MIN;
				pFeat[iFeat++]	= INT_MIN;
			}

			ASSERT(iFeat < cFeatMax);
		}

		cPrevWordLen = saveLastWord(pszBearBest, &pszPrevWord, cPrevWordLen);

		// now we need to free alt
		if (cSeg > 0 && alt.cAlt > 0)
		{
			ClearALTERNATES (&alt);
		}

		// destory inferno's xrc
		if (pxrcWord)
		{
			DestroyHRC ((HRC)pxrcWord);
		}		
	}

	if (pszPrevWord)
	{
		ExternFree (pszPrevWord);
	}

#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	setMadTiming(iEndTime - iStartTime, MM_CMPWRDBRK);
#endif

	// Finally run the net with these input features
	bRet =  NNSegmentation (pFeat, iFeat, cInferno, cCallig);

	ExternFree(pFeat);

	return bRet;
}


// Given Inferno & Callig's word breaks. Detrmines the areas where they disagree 
// and try to pick the right one using a NN
//
WORDINFO *ResolveWordBreaks (	int		yDev, 
								XRC		*pxrcInferno, 
								BEARXRC	*pxrcBear, 
								int		*pcWord
							)
{
	int			iWord;
	
	int posInferno				= 0;
	int totInferno				= pxrcInferno->answer.aAlt[0].cWords;
	int	cwmapInferno			= totInferno;
	WORDMAP		*pwmapInferno	= pxrcInferno->answer.aAlt[0].pMap;

	int			cWord			= 0;
	WORDINFO	*pWordInfo		= NULL, *pWord;
	
	int			posCallig = 0;
	int			totCallig;
	WORDMAP		*pwmapCallig;
	int			cwmapCallig, iMinStrkId, iMaxStrkId;
	StrokeMap	smapInferno, smapCallig;
#ifdef HWX_TIMING
	DWORD	iStartTime, iEndTime;
	iStartTime = GetTickCount();
#endif

	// if a valid line # is passed then we'll only try to align versus that line in Bear
	// otherwise we'll try to align versus all the ink
	cwmapCallig		= totCallig		= pxrcBear->answer.aAlt[0].cWords;
	pwmapCallig		= pxrcBear->answer.aAlt[0].pMap;

	// Get the min and maximum stroke IDs for this piece of Ink
	ASSERT (pwmapInferno && pwmapInferno->piStrokeIndex);
	iMinStrkId = iMaxStrkId = pwmapInferno->piStrokeIndex[0];
	getMinMaxStrokeId(pwmapCallig, cwmapCallig, &iMinStrkId, &iMaxStrkId);
	getMinMaxStrokeId(pwmapInferno, cwmapInferno, &iMinStrkId, &iMaxStrkId);
	ASSERT(iMaxStrkId >= iMinStrkId);
	smapInferno.pfStrokes = smapCallig.pfStrokes = NULL;
	smapInferno.cStrokeBuf = smapCallig.cStrokeBuf = 0;
	
	// Alloc memo for word info
	pWordInfo		= (WORDINFO *)ExternAlloc((totInferno + totCallig) * sizeof(WORDINFO));
	if (!pWordInfo)
		goto failure;

	pWord = pWordInfo;

	// init structures 
	memset (pWordInfo, 0, (totInferno + totCallig) * sizeof (WORDINFO));

	while ((posInferno < totInferno) && (posCallig < totCallig))
	{
		int d;

		ClearStrokeMap(&smapInferno, iMinStrkId, iMaxStrkId);
		ClearStrokeMap(&smapCallig, iMinStrkId, iMaxStrkId);

		if(!smapInferno.pfStrokes || !smapCallig.pfStrokes)
		{
			goto failure;
		}

		// mask out stroke bitmaps
		LoadStrokeMap(&smapInferno, pwmapInferno->cStrokes, pwmapInferno->piStrokeIndex);
		LoadStrokeMap(&smapCallig, pwmapCallig->cStrokes, pwmapCallig->piStrokeIndex);

		// do we have identical mappings
		d = CmpStrokeMap(&smapInferno, &smapCallig);
		// Yes, they agreed. So just add this to our wordinfo buffer
		if (!d)
		{
			// recognize this word in word mode
			iWord	=	RecognizeWholeWords (pxrcInferno, pxrcBear, pwmapCallig, 
				FALSE, 1, yDev, pWord);

			if (iWord != 1)
			{
				goto failure;
			}

			// we are just copying the pointer here, so we will not free it in the end
			// since the original pointer in the word map should be freed eventually
			pWord->piStrokeIndex	=	pwmapInferno->piStrokeIndex;

#ifdef TRAINTIME_AVALANCHE
			//SaveSegmentation (pxrcInferno, pxrcBear, yDev, 1, pwmapInferno, 1, pwmapCallig);
#endif

			// incr pointers
			posInferno++;
			posCallig++;

			pwmapInferno++;
			pwmapCallig++;

			--cwmapInferno;
			--cwmapCallig;

			pWord++;
			cWord++;
		}
		// NO. Then we have to resolve this
		else
		{
			int			cInferno = 1, cCallig = 1;
			
			// Loop adding subset recognizer until we compare equal or we run out of strokes/words
			while (d && (cInferno < cwmapInferno || cCallig < cwmapCallig) )
			{
				// If inferno or calligrapher have run out of strokes just
				// load strokes into the other otherwise check the value of d

				// Inferno ran out of strokes, then we'll run callig
				if (cInferno >= cwmapInferno)
				{
					ASSERT (cCallig < cwmapCallig);

					LoadStrokeMap(&smapCallig, pwmapCallig[cCallig].cStrokes, pwmapCallig[cCallig].piStrokeIndex);
					cCallig++;
				}
				else
				// Callig ran out of strokes, then we'll run Inferno
				if (cCallig >= cwmapCallig)
				{
					ASSERT (cInferno < cwmapInferno);

					LoadStrokeMap(&smapInferno, pwmapInferno[cInferno].cStrokes, pwmapInferno[cInferno].piStrokeIndex);
					cInferno++;
				}
				// Both inferno and callig still have strokes
				else 
				if (d < 0 )
				{
					LoadStrokeMap(&smapInferno, pwmapInferno[cInferno].cStrokes, pwmapInferno[cInferno].piStrokeIndex);
					cInferno++;
				}
				else
				{
					LoadStrokeMap(&smapCallig, pwmapCallig[cCallig].cStrokes, pwmapCallig[cCallig].piStrokeIndex);
					cCallig++;
				}

				d = CmpStrokeMap(&smapInferno, &smapCallig);
			}

			// Compare recognizers using the segmentation NN

#ifdef TRAINTIME_AVALANCHE
			if (d == 0)
				SaveSegmentation (pxrcInferno, pxrcBear, yDev, cInferno, pwmapInferno, cCallig, pwmapCallig);
#endif			
			// inferno wins if we did not align
			// otherwise call CmpWrdBrks
			if	(	d != 0 || 
					!CmpWrdBrks (pxrcInferno, pxrcBear, yDev, cInferno, pwmapInferno, cCallig, pwmapCallig)
				)
			{
				iWord = RecognizeWholeWords(pxrcInferno, pxrcBear, pwmapInferno, TRUE, cInferno, yDev, pWord);
				if (iWord <= 0)
				{
					goto failure;
				}
			}
			else
			{
				// Calligrapher wins
				iWord = RecognizeWholeWords(pxrcInferno, pxrcBear, pwmapCallig, FALSE, cCallig, yDev, pWord);
				if (iWord <= 0)
				{
					goto failure;
				}
			}

			cWord += iWord;
			pWord += iWord;

			// incr pointers
			posInferno		+=	cInferno;
			posCallig		+=	cCallig;

			pwmapInferno	+=	cInferno;
			pwmapCallig		+=	cCallig;

			cwmapInferno	-= cInferno;
			cwmapCallig		-= cCallig;
		}
	}

	FreeStrokeMap(&smapInferno);
	FreeStrokeMap(&smapCallig);

	// Any remaining words left by inferno?
	// Note we purposely do not handle any left over words from calligrapher
	if (cwmapInferno)
	{
		iWord = RecognizeWholeWords(pxrcInferno, pxrcBear, pwmapInferno, TRUE, cwmapInferno, yDev, pWord);
		if (iWord <= 0)
		{
			goto failure;
		}

		cWord += iWord;
	}
	

	*pcWord		=	cWord;

#ifdef HWX_TIMING
	iEndTime = GetTickCount();
	setMadTiming(iEndTime - iStartTime, MM_RESWRDBRK);
#endif

	return pWordInfo;

failure:

	if (pWordInfo)
		ExternFree(pWordInfo);

	return NULL;
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\bearbi.c ===
//This file containes the bigram table for the reliability estimates for Bear
//Added by Manish Goyal--mango--on 03/19/2002
#include "windows.h"
#include "reliable.h"
BYTE BearBi[BIGRAM_SIZE]={
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
83, 
81, 
33, 
2, 
23, 
5, 
99, 
34, 
68, 
91, 
29, 
94, 
25, 
96, 
97, 
3, 
10, 
9, 
8, 
3, 
6, 
18, 
5, 
12, 
18, 
29, 
92, 
36, 
64, 
6, 
20, 
100, 
10, 
7, 
18, 
9, 
14, 
8, 
16, 
13, 
39, 
16, 
19, 
15, 
10, 
7, 
30, 
9, 
4, 
9, 
18, 
13, 
17, 
12, 
20, 
38, 
26, 
31, 
94, 
20, 
82, 
0, 
100, 
100, 
12, 
15, 
58, 
4, 
18, 
31, 
16, 
22, 
21, 
10, 
34, 
56, 
21, 
18, 
49, 
21, 
14, 
51, 
24, 
58, 
10, 
9, 
12, 
70, 
37, 
15, 
80, 
100, 
9, 
0, 
100, 
92, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
23, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
80, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
10, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
14, 
100, 
100, 
100, 
100, 
100, 
7, 
100, 
100, 
13, 
100, 
100, 
100, 
100, 
11, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
38, 
100, 
100, 
100, 
100, 
100, 
9, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ! ! 
12,   // ! " 
100,   // ! # 
100,   // ! $ 
100,   // ! % 
100,   // ! & 
100,   // ! ' 
100,   // ! ( 
100,   // ! ) 
100,   // ! * 
100,   // ! + 
100,   // ! , 
100,   // ! - 
100,   // ! . 
100,   // ! / 
100,   // ! 0 
100,   // ! 1 
100,   // ! 2 
100,   // ! 3 
100,   // ! 4 
100,   // ! 5 
100,   // ! 6 
100,   // ! 7 
100,   // ! 8 
100,   // ! 9 
100,   // ! : 
100,   // ! ; 
100,   // ! < 
100,   // ! = 
100,   // ! > 
100,   // ! ? 
100,   // ! @ 
100,   // ! A 
100,   // ! B 
100,   // ! C 
100,   // ! D 
100,   // ! E 
100,   // ! F 
100,   // ! G 
100,   // ! H 
100,   // ! I 
100,   // ! J 
100,   // ! K 
100,   // ! L 
100,   // ! M 
100,   // ! N 
100,   // ! O 
100,   // ! P 
100,   // ! Q 
100,   // ! R 
100,   // ! S 
100,   // ! T 
100,   // ! U 
100,   // ! V 
100,   // ! W 
100,   // ! X 
100,   // ! Y 
100,   // ! Z 
100,   // ! [ 
100,   // ! \ 
100,   // ! ] 
100,   // ! ^ 
100,   // ! _ 
100,   // ! ` 
100,   // ! a 
100,   // ! b 
100,   // ! c 
100,   // ! d 
100,   // ! e 
100,   // ! f 
100,   // ! g 
100,   // ! h 
100,   // ! i 
100,   // ! j 
100,   // ! k 
100,   // ! l 
100,   // ! m 
100,   // ! n 
100,   // ! o 
100,   // ! p 
100,   // ! q 
100,   // ! r 
100,   // ! s 
100,   // ! t 
100,   // ! u 
100,   // ! v 
100,   // ! w 
100,   // ! x 
100,   // ! y 
100,   // ! z 
100,   // ! { 
100,   // ! | 
100,   // ! } 
100,   // ! ~ 
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100,   // !  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
46, 
100,   // " ! 
100,   // " " 
100,   // " # 
100,   // " $ 
100,   // " % 
100,   // " & 
100,   // " ' 
100,   // " ( 
40,   // " ) 
100,   // " * 
100,   // " + 
11,   // " , 
100,   // " - 
64,   // " . 
100,   // " / 
100,   // " 0 
0,   // " 1 
100,   // " 2 
100,   // " 3 
100,   // " 4 
100,   // " 5 
100,   // " 6 
100,   // " 7 
100,   // " 8 
100,   // " 9 
82,   // " : 
100,   // " ; 
100,   // " < 
100,   // " = 
100,   // " > 
100,   // " ? 
100,   // " @ 
41,   // " A 
16,   // " B 
6,   // " C 
26,   // " D 
11,   // " E 
20,   // " F 
100,   // " G 
84,   // " H 
47,   // " I 
7,   // " J 
100,   // " K 
14,   // " L 
21,   // " M 
41,   // " N 
100,   // " O 
37,   // " P 
100,   // " Q 
12,   // " R 
0,   // " S 
4,   // " T 
33,   // " U 
23,   // " V 
36,   // " W 
0,   // " X 
100,   // " Y 
85,   // " Z 
100,   // " [ 
100,   // " \ 
100,   // " ] 
100,   // " ^ 
100,   // " _ 
100,   // " ` 
46,   // " a 
83,   // " b 
100,   // " c 
100,   // " d 
63,   // " e 
100,   // " f 
91,   // " g 
83,   // " h 
93,   // " i 
100,   // " j 
80,   // " k 
100,   // " l 
100,   // " m 
100,   // " n 
100,   // " o 
100,   // " p 
100,   // " q 
100,   // " r 
92,   // " s 
100,   // " t 
100,   // " u 
83,   // " v 
42,   // " w 
100,   // " x 
100,   // " y 
100,   // " z 
100,   // " { 
100,   // " | 
100,   // " } 
100,   // " ~ 
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
0,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
50,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100,   // "  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
0, 
100,   // # ! 
100,   // # " 
100,   // # # 
100,   // # $ 
100,   // # % 
100,   // # & 
100,   // # ' 
100,   // # ( 
100,   // # ) 
100,   // # * 
100,   // # + 
100,   // # , 
100,   // # - 
100,   // # . 
100,   // # / 
100,   // # 0 
100,   // # 1 
100,   // # 2 
100,   // # 3 
100,   // # 4 
100,   // # 5 
100,   // # 6 
100,   // # 7 
0,   // # 8 
100,   // # 9 
100,   // # : 
100,   // # ; 
100,   // # < 
100,   // # = 
100,   // # > 
100,   // # ? 
100,   // # @ 
100,   // # A 
100,   // # B 
100,   // # C 
100,   // # D 
100,   // # E 
100,   // # F 
100,   // # G 
100,   // # H 
100,   // # I 
100,   // # J 
100,   // # K 
100,   // # L 
100,   // # M 
100,   // # N 
100,   // # O 
100,   // # P 
100,   // # Q 
100,   // # R 
100,   // # S 
100,   // # T 
100,   // # U 
100,   // # V 
100,   // # W 
100,   // # X 
100,   // # Y 
100,   // # Z 
100,   // # [ 
100,   // # \ 
100,   // # ] 
100,   // # ^ 
100,   // # _ 
100,   // # ` 
100,   // # a 
100,   // # b 
100,   // # c 
100,   // # d 
100,   // # e 
100,   // # f 
100,   // # g 
100,   // # h 
100,   // # i 
100,   // # j 
100,   // # k 
100,   // # l 
100,   // # m 
100,   // # n 
100,   // # o 
100,   // # p 
100,   // # q 
100,   // # r 
100,   // # s 
100,   // # t 
100,   // # u 
100,   // # v 
100,   // # w 
100,   // # x 
100,   // # y 
100,   // # z 
100,   // # { 
100,   // # | 
100,   // # } 
100,   // # ~ 
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100,   // #  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
100,   // $ ! 
100,   // $ " 
100,   // $ # 
100,   // $ $ 
100,   // $ % 
100,   // $ & 
100,   // $ ' 
100,   // $ ( 
100,   // $ ) 
100,   // $ * 
100,   // $ + 
100,   // $ , 
100,   // $ - 
100,   // $ . 
100,   // $ / 
100,   // $ 0 
100,   // $ 1 
100,   // $ 2 
100,   // $ 3 
100,   // $ 4 
100,   // $ 5 
100,   // $ 6 
100,   // $ 7 
100,   // $ 8 
100,   // $ 9 
100,   // $ : 
100,   // $ ; 
100,   // $ < 
100,   // $ = 
100,   // $ > 
100,   // $ ? 
100,   // $ @ 
100,   // $ A 
100,   // $ B 
100,   // $ C 
100,   // $ D 
100,   // $ E 
100,   // $ F 
100,   // $ G 
100,   // $ H 
100,   // $ I 
100,   // $ J 
100,   // $ K 
100,   // $ L 
100,   // $ M 
100,   // $ N 
100,   // $ O 
100,   // $ P 
100,   // $ Q 
100,   // $ R 
100,   // $ S 
100,   // $ T 
100,   // $ U 
100,   // $ V 
100,   // $ W 
100,   // $ X 
100,   // $ Y 
100,   // $ Z 
100,   // $ [ 
100,   // $ \ 
100,   // $ ] 
100,   // $ ^ 
100,   // $ _ 
100,   // $ ` 
100,   // $ a 
100,   // $ b 
100,   // $ c 
100,   // $ d 
100,   // $ e 
100,   // $ f 
100,   // $ g 
100,   // $ h 
100,   // $ i 
100,   // $ j 
100,   // $ k 
100,   // $ l 
100,   // $ m 
100,   // $ n 
100,   // $ o 
100,   // $ p 
100,   // $ q 
100,   // $ r 
100,   // $ s 
100,   // $ t 
100,   // $ u 
100,   // $ v 
100,   // $ w 
100,   // $ x 
100,   // $ y 
100,   // $ z 
100,   // $ { 
100,   // $ | 
100,   // $ } 
100,   // $ ~ 
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100,   // $  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
34, 
100,   // % ! 
100,   // % " 
100,   // % # 
100,   // % $ 
100,   // % % 
100,   // % & 
100,   // % ' 
100,   // % ( 
100,   // % ) 
100,   // % * 
100,   // % + 
100,   // % , 
100,   // % - 
100,   // % . 
100,   // % / 
100,   // % 0 
100,   // % 1 
100,   // % 2 
100,   // % 3 
100,   // % 4 
100,   // % 5 
100,   // % 6 
100,   // % 7 
100,   // % 8 
100,   // % 9 
100,   // % : 
100,   // % ; 
100,   // % < 
100,   // % = 
100,   // % > 
100,   // % ? 
100,   // % @ 
100,   // % A 
100,   // % B 
100,   // % C 
100,   // % D 
100,   // % E 
100,   // % F 
100,   // % G 
100,   // % H 
100,   // % I 
100,   // % J 
100,   // % K 
100,   // % L 
100,   // % M 
100,   // % N 
100,   // % O 
100,   // % P 
100,   // % Q 
100,   // % R 
100,   // % S 
100,   // % T 
100,   // % U 
100,   // % V 
100,   // % W 
100,   // % X 
100,   // % Y 
100,   // % Z 
100,   // % [ 
100,   // % \ 
100,   // % ] 
100,   // % ^ 
100,   // % _ 
100,   // % ` 
100,   // % a 
100,   // % b 
100,   // % c 
100,   // % d 
100,   // % e 
100,   // % f 
100,   // % g 
100,   // % h 
100,   // % i 
100,   // % j 
100,   // % k 
100,   // % l 
100,   // % m 
100,   // % n 
100,   // % o 
100,   // % p 
100,   // % q 
100,   // % r 
100,   // % s 
100,   // % t 
100,   // % u 
100,   // % v 
100,   // % w 
100,   // % x 
100,   // % y 
100,   // % z 
100,   // % { 
100,   // % | 
100,   // % } 
100,   // % ~ 
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100,   // %  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
15, 
100,   // & ! 
100,   // & " 
0,   // & # 
100,   // & $ 
100,   // & % 
100,   // & & 
100,   // & ' 
100,   // & ( 
100,   // & ) 
100,   // & * 
100,   // & + 
25,   // & , 
100,   // & - 
100,   // & . 
100,   // & / 
100,   // & 0 
100,   // & 1 
100,   // & 2 
100,   // & 3 
100,   // & 4 
100,   // & 5 
100,   // & 6 
100,   // & 7 
100,   // & 8 
100,   // & 9 
100,   // & : 
100,   // & ; 
100,   // & < 
100,   // & = 
100,   // & > 
100,   // & ? 
100,   // & @ 
100,   // & A 
47,   // & B 
100,   // & C 
100,   // & D 
100,   // & E 
100,   // & F 
100,   // & G 
100,   // & H 
100,   // & I 
100,   // & J 
100,   // & K 
100,   // & L 
100,   // & M 
100,   // & N 
100,   // & O 
100,   // & P 
100,   // & Q 
100,   // & R 
100,   // & S 
57,   // & T 
100,   // & U 
100,   // & V 
100,   // & W 
100,   // & X 
100,   // & Y 
100,   // & Z 
100,   // & [ 
100,   // & \ 
100,   // & ] 
100,   // & ^ 
100,   // & _ 
100,   // & ` 
100,   // & a 
100,   // & b 
100,   // & c 
100,   // & d 
100,   // & e 
100,   // & f 
100,   // & g 
100,   // & h 
100,   // & i 
100,   // & j 
100,   // & k 
100,   // & l 
100,   // & m 
100,   // & n 
100,   // & o 
100,   // & p 
100,   // & q 
100,   // & r 
100,   // & s 
100,   // & t 
100,   // & u 
100,   // & v 
20,   // & w 
100,   // & x 
100,   // & y 
100,   // & z 
100,   // & { 
100,   // & | 
100,   // & } 
100,   // & ~ 
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100,   // &  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ' ! 
100,   // ' " 
100,   // ' # 
100,   // ' $ 
100,   // ' % 
100,   // ' & 
100,   // ' ' 
100,   // ' ( 
100,   // ' ) 
100,   // ' * 
100,   // ' + 
100,   // ' , 
100,   // ' - 
100,   // ' . 
100,   // ' / 
100,   // ' 0 
100,   // ' 1 
100,   // ' 2 
100,   // ' 3 
100,   // ' 4 
100,   // ' 5 
100,   // ' 6 
100,   // ' 7 
54,   // ' 8 
58,   // ' 9 
100,   // ' : 
100,   // ' ; 
100,   // ' < 
100,   // ' = 
100,   // ' > 
100,   // ' ? 
100,   // ' @ 
86,   // ' A 
100,   // ' B 
84,   // ' C 
100,   // ' D 
96,   // ' E 
100,   // ' F 
100,   // ' G 
96,   // ' H 
99,   // ' I 
100,   // ' J 
100,   // ' K 
100,   // ' L 
100,   // ' M 
93,   // ' N 
100,   // ' O 
100,   // ' P 
100,   // ' Q 
100,   // ' R 
93,   // ' S 
97,   // ' T 
100,   // ' U 
100,   // ' V 
99,   // ' W 
100,   // ' X 
100,   // ' Y 
100,   // ' Z 
100,   // ' [ 
100,   // ' \ 
100,   // ' ] 
100,   // ' ^ 
100,   // ' _ 
100,   // ' ` 
97,   // ' a 
100,   // ' b 
100,   // ' c 
100,   // ' d 
100,   // ' e 
100,   // ' f 
100,   // ' g 
100,   // ' h 
100,   // ' i 
100,   // ' j 
100,   // ' k 
100,   // ' l 
100,   // ' m 
100,   // ' n 
100,   // ' o 
100,   // ' p 
100,   // ' q 
100,   // ' r 
96,   // ' s 
100,   // ' t 
100,   // ' u 
100,   // ' v 
100,   // ' w 
100,   // ' x 
100,   // ' y 
100,   // ' z 
100,   // ' { 
100,   // ' | 
100,   // ' } 
100,   // ' ~ 
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100,   // '  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
33, 
100,   // ( ! 
0,   // ( " 
100,   // ( # 
100,   // ( $ 
100,   // ( % 
100,   // ( & 
100,   // ( ' 
100,   // ( ( 
100,   // ( ) 
100,   // ( * 
4,   // ( + 
100,   // ( , 
100,   // ( - 
100,   // ( . 
100,   // ( / 
14,   // ( 0 
27,   // ( 1 
22,   // ( 2 
12,   // ( 3 
19,   // ( 4 
43,   // ( 5 
50,   // ( 6 
36,   // ( 7 
15,   // ( 8 
75,   // ( 9 
100,   // ( : 
100,   // ( ; 
100,   // ( < 
100,   // ( = 
100,   // ( > 
100,   // ( ? 
100,   // ( @ 
54,   // ( A 
11,   // ( B 
21,   // ( C 
75,   // ( D 
60,   // ( E 
20,   // ( F 
32,   // ( G 
56,   // ( H 
48,   // ( I 
72,   // ( J 
33,   // ( K 
37,   // ( L 
10,   // ( M 
9,   // ( N 
71,   // ( O 
31,   // ( P 
100,   // ( Q 
18,   // ( R 
15,   // ( S 
30,   // ( T 
64,   // ( U 
13,   // ( V 
29,   // ( W 
100,   // ( X 
100,   // ( Y 
100,   // ( Z 
100,   // ( [ 
100,   // ( \ 
100,   // ( ] 
100,   // ( ^ 
100,   // ( _ 
100,   // ( ` 
100,   // ( a 
64,   // ( b 
100,   // ( c 
49,   // ( d 
88,   // ( e 
100,   // ( f 
67,   // ( g 
100,   // ( h 
100,   // ( i 
11,   // ( j 
100,   // ( k 
100,   // ( l 
83,   // ( m 
100,   // ( n 
100,   // ( o 
57,   // ( p 
100,   // ( q 
70,   // ( r 
83,   // ( s 
100,   // ( t 
100,   // ( u 
51,   // ( v 
95,   // ( w 
100,   // ( x 
100,   // ( y 
82,   // ( z 
100,   // ( { 
100,   // ( | 
100,   // ( } 
100,   // ( ~ 
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
25,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100,   // (  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
32, 
100,   // ) ! 
100,   // ) " 
100,   // ) # 
100,   // ) $ 
100,   // ) % 
100,   // ) & 
100,   // ) ' 
100,   // ) ( 
100,   // ) ) 
100,   // ) * 
100,   // ) + 
19,   // ) , 
96,   // ) - 
51,   // ) . 
100,   // ) / 
100,   // ) 0 
78,   // ) 1 
80,   // ) 2 
48,   // ) 3 
19,   // ) 4 
100,   // ) 5 
100,   // ) 6 
100,   // ) 7 
100,   // ) 8 
100,   // ) 9 
33,   // ) : 
100,   // ) ; 
100,   // ) < 
100,   // ) = 
100,   // ) > 
3,   // ) ? 
100,   // ) @ 
100,   // ) A 
100,   // ) B 
100,   // ) C 
100,   // ) D 
100,   // ) E 
100,   // ) F 
100,   // ) G 
100,   // ) H 
60,   // ) I 
100,   // ) J 
100,   // ) K 
100,   // ) L 
100,   // ) M 
100,   // ) N 
100,   // ) O 
100,   // ) P 
100,   // ) Q 
100,   // ) R 
100,   // ) S 
100,   // ) T 
100,   // ) U 
100,   // ) V 
100,   // ) W 
100,   // ) X 
100,   // ) Y 
100,   // ) Z 
100,   // ) [ 
100,   // ) \ 
100,   // ) ] 
100,   // ) ^ 
100,   // ) _ 
100,   // ) ` 
65,   // ) a 
100,   // ) b 
100,   // ) c 
100,   // ) d 
100,   // ) e 
100,   // ) f 
100,   // ) g 
100,   // ) h 
100,   // ) i 
100,   // ) j 
100,   // ) k 
100,   // ) l 
100,   // ) m 
100,   // ) n 
100,   // ) o 
100,   // ) p 
100,   // ) q 
100,   // ) r 
100,   // ) s 
100,   // ) t 
100,   // ) u 
100,   // ) v 
100,   // ) w 
100,   // ) x 
100,   // ) y 
100,   // ) z 
100,   // ) { 
100,   // ) | 
100,   // ) } 
100,   // ) ~ 
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100,   // )  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // * ! 
100,   // * " 
100,   // * # 
100,   // * $ 
100,   // * % 
100,   // * & 
100,   // * ' 
100,   // * ( 
100,   // * ) 
100,   // * * 
100,   // * + 
100,   // * , 
100,   // * - 
100,   // * . 
100,   // * / 
100,   // * 0 
100,   // * 1 
100,   // * 2 
100,   // * 3 
100,   // * 4 
100,   // * 5 
100,   // * 6 
100,   // * 7 
100,   // * 8 
100,   // * 9 
100,   // * : 
100,   // * ; 
100,   // * < 
100,   // * = 
100,   // * > 
100,   // * ? 
100,   // * @ 
100,   // * A 
100,   // * B 
100,   // * C 
100,   // * D 
100,   // * E 
100,   // * F 
100,   // * G 
100,   // * H 
100,   // * I 
100,   // * J 
100,   // * K 
100,   // * L 
100,   // * M 
100,   // * N 
100,   // * O 
100,   // * P 
100,   // * Q 
100,   // * R 
100,   // * S 
100,   // * T 
100,   // * U 
100,   // * V 
100,   // * W 
100,   // * X 
100,   // * Y 
100,   // * Z 
100,   // * [ 
100,   // * \ 
100,   // * ] 
100,   // * ^ 
100,   // * _ 
100,   // * ` 
100,   // * a 
100,   // * b 
100,   // * c 
100,   // * d 
100,   // * e 
100,   // * f 
100,   // * g 
100,   // * h 
100,   // * i 
100,   // * j 
100,   // * k 
100,   // * l 
100,   // * m 
100,   // * n 
100,   // * o 
100,   // * p 
100,   // * q 
100,   // * r 
100,   // * s 
100,   // * t 
100,   // * u 
100,   // * v 
100,   // * w 
100,   // * x 
100,   // * y 
100,   // * z 
100,   // * { 
100,   // * | 
100,   // * } 
100,   // * ~ 
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100,   // *  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
79, 
100,   // + ! 
100,   // + " 
100,   // + # 
100,   // + $ 
100,   // + % 
100,   // + & 
100,   // + ' 
0,   // + ( 
100,   // + ) 
100,   // + * 
17,   // + + 
100,   // + , 
100,   // + - 
100,   // + . 
50,   // + / 
100,   // + 0 
100,   // + 1 
100,   // + 2 
36,   // + 3 
18,   // + 4 
35,   // + 5 
100,   // + 6 
100,   // + 7 
100,   // + 8 
100,   // + 9 
100,   // + : 
100,   // + ; 
100,   // + < 
100,   // + = 
100,   // + > 
100,   // + ? 
100,   // + @ 
100,   // + A 
100,   // + B 
100,   // + C 
100,   // + D 
100,   // + E 
100,   // + F 
100,   // + G 
100,   // + H 
100,   // + I 
100,   // + J 
100,   // + K 
100,   // + L 
100,   // + M 
100,   // + N 
100,   // + O 
100,   // + P 
100,   // + Q 
100,   // + R 
100,   // + S 
100,   // + T 
100,   // + U 
100,   // + V 
100,   // + W 
100,   // + X 
100,   // + Y 
100,   // + Z 
100,   // + [ 
100,   // + \ 
100,   // + ] 
100,   // + ^ 
100,   // + _ 
100,   // + ` 
100,   // + a 
100,   // + b 
100,   // + c 
100,   // + d 
100,   // + e 
100,   // + f 
100,   // + g 
100,   // + h 
100,   // + i 
100,   // + j 
100,   // + k 
100,   // + l 
100,   // + m 
100,   // + n 
100,   // + o 
100,   // + p 
100,   // + q 
100,   // + r 
100,   // + s 
100,   // + t 
100,   // + u 
100,   // + v 
100,   // + w 
100,   // + x 
100,   // + y 
100,   // + z 
100,   // + { 
100,   // + | 
100,   // + } 
100,   // + ~ 
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100,   // +  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
22, 
100,   // , ! 
99,   // , " 
100,   // , # 
100,   // , $ 
100,   // , % 
100,   // , & 
100,   // , ' 
100,   // , ( 
100,   // , ) 
100,   // , * 
100,   // , + 
100,   // , , 
100,   // , - 
100,   // , . 
100,   // , / 
26,   // , 0 
37,   // , 1 
19,   // , 2 
22,   // , 3 
14,   // , 4 
15,   // , 5 
28,   // , 6 
16,   // , 7 
15,   // , 8 
20,   // , 9 
100,   // , : 
100,   // , ; 
100,   // , < 
100,   // , = 
100,   // , > 
100,   // , ? 
100,   // , @ 
100,   // , A 
96,   // , B 
100,   // , C 
100,   // , D 
100,   // , E 
100,   // , F 
100,   // , G 
100,   // , H 
100,   // , I 
100,   // , J 
100,   // , K 
91,   // , L 
100,   // , M 
100,   // , N 
100,   // , O 
100,   // , P 
100,   // , Q 
100,   // , R 
100,   // , S 
100,   // , T 
100,   // , U 
100,   // , V 
100,   // , W 
100,   // , X 
100,   // , Y 
100,   // , Z 
100,   // , [ 
100,   // , \ 
100,   // , ] 
100,   // , ^ 
100,   // , _ 
100,   // , ` 
100,   // , a 
100,   // , b 
100,   // , c 
100,   // , d 
97,   // , e 
100,   // , f 
100,   // , g 
100,   // , h 
100,   // , i 
100,   // , j 
100,   // , k 
100,   // , l 
100,   // , m 
100,   // , n 
100,   // , o 
100,   // , p 
100,   // , q 
100,   // , r 
100,   // , s 
100,   // , t 
100,   // , u 
100,   // , v 
100,   // , w 
100,   // , x 
100,   // , y 
100,   // , z 
100,   // , { 
100,   // , | 
100,   // , } 
100,   // , ~ 
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100,   // ,  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
79, 
100,   // - ! 
100,   // - " 
100,   // - # 
100,   // - $ 
100,   // - % 
100,   // - & 
100,   // - ' 
80,   // - ( 
89,   // - ) 
100,   // - * 
100,   // - + 
100,   // - , 
100,   // - - 
100,   // - . 
100,   // - / 
16,   // - 0 
25,   // - 1 
11,   // - 2 
11,   // - 3 
12,   // - 4 
13,   // - 5 
19,   // - 6 
17,   // - 7 
30,   // - 8 
20,   // - 9 
100,   // - : 
100,   // - ; 
100,   // - < 
100,   // - = 
100,   // - > 
100,   // - ? 
100,   // - @ 
41,   // - A 
32,   // - B 
58,   // - C 
64,   // - D 
46,   // - E 
37,   // - F 
40,   // - G 
53,   // - H 
76,   // - I 
51,   // - J 
37,   // - K 
55,   // - L 
30,   // - M 
52,   // - N 
58,   // - O 
20,   // - P 
8,   // - Q 
49,   // - R 
26,   // - S 
27,   // - T 
33,   // - U 
14,   // - V 
40,   // - W 
100,   // - X 
100,   // - Y 
78,   // - Z 
100,   // - [ 
100,   // - \ 
100,   // - ] 
100,   // - ^ 
100,   // - _ 
100,   // - ` 
98,   // - a 
91,   // - b 
100,   // - c 
100,   // - d 
100,   // - e 
97,   // - f 
100,   // - g 
95,   // - h 
97,   // - i 
72,   // - j 
98,   // - k 
99,   // - l 
100,   // - m 
100,   // - n 
92,   // - o 
100,   // - p 
100,   // - q 
100,   // - r 
99,   // - s 
100,   // - t 
98,   // - u 
92,   // - v 
94,   // - w 
100,   // - x 
100,   // - y 
100,   // - z 
100,   // - { 
100,   // - | 
100,   // - } 
100,   // - ~ 
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
55,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
7,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100,   // -  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
39, 
100,   // . ! 
15,   // . " 
100,   // . # 
100,   // . $ 
100,   // . % 
100,   // . & 
100,   // . ' 
100,   // . ( 
50,   // . ) 
100,   // . * 
100,   // . + 
91,   // . , 
60,   // . - 
76,   // . . 
93,   // . / 
30,   // . 0 
59,   // . 1 
41,   // . 2 
41,   // . 3 
19,   // . 4 
40,   // . 5 
42,   // . 6 
23,   // . 7 
29,   // . 8 
42,   // . 9 
97,   // . : 
100,   // . ; 
100,   // . < 
100,   // . = 
100,   // . > 
68,   // . ? 
76,   // . @ 
70,   // . A 
58,   // . B 
93,   // . C 
88,   // . D 
74,   // . E 
90,   // . F 
74,   // . G 
92,   // . H 
82,   // . I 
91,   // . J 
87,   // . K 
83,   // . L 
77,   // . M 
66,   // . N 
88,   // . O 
73,   // . P 
100,   // . Q 
52,   // . R 
93,   // . S 
61,   // . T 
72,   // . U 
84,   // . V 
75,   // . W 
100,   // . X 
54,   // . Y 
88,   // . Z 
100,   // . [ 
100,   // . \ 
100,   // . ] 
100,   // . ^ 
100,   // . _ 
100,   // . ` 
36,   // . a 
22,   // . b 
4,   // . c 
17,   // . d 
33,   // . e 
12,   // . f 
47,   // . g 
46,   // . h 
19,   // . i 
21,   // . j 
65,   // . k 
79,   // . l 
52,   // . m 
27,   // . n 
70,   // . o 
21,   // . p 
14,   // . q 
58,   // . r 
36,   // . s 
49,   // . t 
29,   // . u 
43,   // . v 
79,   // . w 
42,   // . x 
26,   // . y 
77,   // . z 
100,   // . { 
100,   // . | 
100,   // . } 
100,   // . ~ 
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100,   // .  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
97, 
100,   // / ! 
100,   // / " 
100,   // / # 
100,   // / $ 
100,   // / % 
100,   // / & 
100,   // / ' 
100,   // / ( 
100,   // / ) 
100,   // / * 
100,   // / + 
100,   // / , 
100,   // / - 
100,   // / . 
0,   // / / 
100,   // / 0 
39,   // / 1 
10,   // / 2 
19,   // / 3 
15,   // / 4 
15,   // / 5 
9,   // / 6 
21,   // / 7 
19,   // / 8 
17,   // / 9 
100,   // / : 
100,   // / ; 
100,   // / < 
100,   // / = 
100,   // / > 
100,   // / ? 
100,   // / @ 
98,   // / A 
89,   // / B 
61,   // / C 
96,   // / D 
100,   // / E 
87,   // / F 
81,   // / G 
91,   // / H 
100,   // / I 
96,   // / J 
87,   // / K 
95,   // / L 
55,   // / M 
86,   // / N 
94,   // / O 
95,   // / P 
80,   // / Q 
90,   // / R 
86,   // / S 
95,   // / T 
97,   // / U 
91,   // / V 
85,   // / W 
100,   // / X 
100,   // / Y 
100,   // / Z 
100,   // / [ 
100,   // / \ 
100,   // / ] 
100,   // / ^ 
100,   // / _ 
100,   // / ` 
100,   // / a 
98,   // / b 
91,   // / c 
98,   // / d 
100,   // / e 
100,   // / f 
100,   // / g 
100,   // / h 
100,   // / i 
96,   // / j 
100,   // / k 
100,   // / l 
93,   // / m 
100,   // / n 
95,   // / o 
90,   // / p 
100,   // / q 
100,   // / r 
99,   // / s 
100,   // / t 
100,   // / u 
96,   // / v 
5,   // / w 
100,   // / x 
100,   // / y 
100,   // / z 
100,   // / { 
100,   // / | 
100,   // / } 
100,   // / ~ 
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100,   // /  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
5, 
100,   // 0 ! 
100,   // 0 " 
100,   // 0 # 
100,   // 0 $ 
100,   // 0 % 
100,   // 0 & 
100,   // 0 ' 
100,   // 0 ( 
14,   // 0 ) 
100,   // 0 * 
100,   // 0 + 
21,   // 0 , 
25,   // 0 - 
39,   // 0 . 
13,   // 0 / 
6,   // 0 0 
8,   // 0 1 
4,   // 0 2 
3,   // 0 3 
3,   // 0 4 
6,   // 0 5 
4,   // 0 6 
11,   // 0 7 
8,   // 0 8 
15,   // 0 9 
32,   // 0 : 
90,   // 0 ; 
100,   // 0 < 
100,   // 0 = 
100,   // 0 > 
100,   // 0 ? 
32,   // 0 @ 
52,   // 0 A 
64,   // 0 B 
100,   // 0 C 
36,   // 0 D 
47,   // 0 E 
100,   // 0 F 
100,   // 0 G 
80,   // 0 H 
100,   // 0 I 
89,   // 0 J 
100,   // 0 K 
52,   // 0 L 
100,   // 0 M 
85,   // 0 N 
100,   // 0 O 
69,   // 0 P 
33,   // 0 Q 
96,   // 0 R 
100,   // 0 S 
44,   // 0 T 
100,   // 0 U 
100,   // 0 V 
100,   // 0 W 
100,   // 0 X 
100,   // 0 Y 
100,   // 0 Z 
100,   // 0 [ 
100,   // 0 \ 
100,   // 0 ] 
100,   // 0 ^ 
100,   // 0 _ 
100,   // 0 ` 
99,   // 0 a 
100,   // 0 b 
100,   // 0 c 
100,   // 0 d 
68,   // 0 e 
100,   // 0 f 
100,   // 0 g 
100,   // 0 h 
100,   // 0 i 
6,   // 0 j 
100,   // 0 k 
100,   // 0 l 
99,   // 0 m 
100,   // 0 n 
100,   // 0 o 
100,   // 0 p 
100,   // 0 q 
100,   // 0 r 
100,   // 0 s 
100,   // 0 t 
100,   // 0 u 
100,   // 0 v 
100,   // 0 w 
100,   // 0 x 
100,   // 0 y 
100,   // 0 z 
100,   // 0 { 
100,   // 0 | 
100,   // 0 } 
100,   // 0 ~ 
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100,   // 0  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
16, 
100,   // 1 ! 
33,   // 1 " 
100,   // 1 # 
100,   // 1 $ 
100,   // 1 % 
100,   // 1 & 
100,   // 1 ' 
100,   // 1 ( 
37,   // 1 ) 
100,   // 1 * 
100,   // 1 + 
28,   // 1 , 
8,   // 1 - 
43,   // 1 . 
97,   // 1 / 
9,   // 1 0 
25,   // 1 1 
18,   // 1 2 
11,   // 1 3 
9,   // 1 4 
19,   // 1 5 
19,   // 1 6 
22,   // 1 7 
11,   // 1 8 
8,   // 1 9 
30,   // 1 : 
100,   // 1 ; 
100,   // 1 < 
100,   // 1 = 
100,   // 1 > 
100,   // 1 ? 
6,   // 1 @ 
25,   // 1 A 
42,   // 1 B 
100,   // 1 C 
38,   // 1 D 
32,   // 1 E 
78,   // 1 F 
100,   // 1 G 
26,   // 1 H 
100,   // 1 I 
57,   // 1 J 
100,   // 1 K 
22,   // 1 L 
45,   // 1 M 
16,   // 1 N 
100,   // 1 O 
13,   // 1 P 
0,   // 1 Q 
21,   // 1 R 
80,   // 1 S 
61,   // 1 T 
58,   // 1 U 
12,   // 1 V 
42,   // 1 W 
12,   // 1 X 
9,   // 1 Y 
100,   // 1 Z 
100,   // 1 [ 
100,   // 1 \ 
100,   // 1 ] 
100,   // 1 ^ 
100,   // 1 _ 
100,   // 1 ` 
88,   // 1 a 
72,   // 1 b 
70,   // 1 c 
100,   // 1 d 
97,   // 1 e 
93,   // 1 f 
100,   // 1 g 
100,   // 1 h 
100,   // 1 i 
11,   // 1 j 
90,   // 1 k 
100,   // 1 l 
100,   // 1 m 
88,   // 1 n 
100,   // 1 o 
100,   // 1 p 
100,   // 1 q 
100,   // 1 r 
100,   // 1 s 
100,   // 1 t 
100,   // 1 u 
100,   // 1 v 
100,   // 1 w 
100,   // 1 x 
100,   // 1 y 
100,   // 1 z 
100,   // 1 { 
100,   // 1 | 
100,   // 1 } 
100,   // 1 ~ 
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100,   // 1  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // 2 ! 
50,   // 2 " 
100,   // 2 # 
100,   // 2 $ 
100,   // 2 % 
100,   // 2 & 
100,   // 2 ' 
100,   // 2 ( 
50,   // 2 ) 
100,   // 2 * 
100,   // 2 + 
14,   // 2 , 
21,   // 2 - 
40,   // 2 . 
81,   // 2 / 
4,   // 2 0 
14,   // 2 1 
11,   // 2 2 
11,   // 2 3 
6,   // 2 4 
7,   // 2 5 
12,   // 2 6 
10,   // 2 7 
8,   // 2 8 
13,   // 2 9 
14,   // 2 : 
83,   // 2 ; 
100,   // 2 < 
100,   // 2 = 
100,   // 2 > 
100,   // 2 ? 
9,   // 2 @ 
25,   // 2 A 
21,   // 2 B 
100,   // 2 C 
28,   // 2 D 
24,   // 2 E 
100,   // 2 F 
100,   // 2 G 
15,   // 2 H 
100,   // 2 I 
87,   // 2 J 
100,   // 2 K 
25,   // 2 L 
30,   // 2 M 
13,   // 2 N 
100,   // 2 O 
37,   // 2 P 
0,   // 2 Q 
15,   // 2 R 
56,   // 2 S 
28,   // 2 T 
26,   // 2 U 
35,   // 2 V 
100,   // 2 W 
28,   // 2 X 
0,   // 2 Y 
100,   // 2 Z 
100,   // 2 [ 
100,   // 2 \ 
100,   // 2 ] 
100,   // 2 ^ 
100,   // 2 _ 
100,   // 2 ` 
76,   // 2 a 
69,   // 2 b 
91,   // 2 c 
100,   // 2 d 
98,   // 2 e 
79,   // 2 f 
100,   // 2 g 
100,   // 2 h 
100,   // 2 i 
27,   // 2 j 
100,   // 2 k 
100,   // 2 l 
54,   // 2 m 
100,   // 2 n 
100,   // 2 o 
80,   // 2 p 
100,   // 2 q 
100,   // 2 r 
100,   // 2 s 
100,   // 2 t 
100,   // 2 u 
100,   // 2 v 
100,   // 2 w 
100,   // 2 x 
100,   // 2 y 
100,   // 2 z 
100,   // 2 { 
100,   // 2 | 
100,   // 2 } 
100,   // 2 ~ 
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100,   // 2  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
9, 
100,   // 3 ! 
100,   // 3 " 
100,   // 3 # 
100,   // 3 $ 
100,   // 3 % 
100,   // 3 & 
100,   // 3 ' 
100,   // 3 ( 
9,   // 3 ) 
100,   // 3 * 
100,   // 3 + 
15,   // 3 , 
20,   // 3 - 
28,   // 3 . 
84,   // 3 / 
5,   // 3 0 
9,   // 3 1 
8,   // 3 2 
7,   // 3 3 
5,   // 3 4 
7,   // 3 5 
8,   // 3 6 
9,   // 3 7 
5,   // 3 8 
13,   // 3 9 
18,   // 3 : 
100,   // 3 ; 
100,   // 3 < 
100,   // 3 = 
100,   // 3 > 
100,   // 3 ? 
4,   // 3 @ 
20,   // 3 A 
26,   // 3 B 
100,   // 3 C 
35,   // 3 D 
16,   // 3 E 
51,   // 3 F 
80,   // 3 G 
56,   // 3 H 
100,   // 3 I 
59,   // 3 J 
100,   // 3 K 
15,   // 3 L 
58,   // 3 M 
33,   // 3 N 
100,   // 3 O 
23,   // 3 P 
0,   // 3 Q 
13,   // 3 R 
89,   // 3 S 
38,   // 3 T 
58,   // 3 U 
15,   // 3 V 
100,   // 3 W 
100,   // 3 X 
100,   // 3 Y 
100,   // 3 Z 
100,   // 3 [ 
100,   // 3 \ 
96,   // 3 ] 
100,   // 3 ^ 
100,   // 3 _ 
100,   // 3 ` 
85,   // 3 a 
91,   // 3 b 
73,   // 3 c 
100,   // 3 d 
100,   // 3 e 
100,   // 3 f 
100,   // 3 g 
100,   // 3 h 
100,   // 3 i 
3,   // 3 j 
100,   // 3 k 
100,   // 3 l 
65,   // 3 m 
100,   // 3 n 
96,   // 3 o 
57,   // 3 p 
100,   // 3 q 
100,   // 3 r 
100,   // 3 s 
99,   // 3 t 
100,   // 3 u 
51,   // 3 v 
100,   // 3 w 
100,   // 3 x 
100,   // 3 y 
81,   // 3 z 
100,   // 3 { 
100,   // 3 | 
100,   // 3 } 
100,   // 3 ~ 
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100,   // 3  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
100,   // 4 ! 
7,   // 4 " 
100,   // 4 # 
100,   // 4 $ 
100,   // 4 % 
100,   // 4 & 
100,   // 4 ' 
100,   // 4 ( 
43,   // 4 ) 
100,   // 4 * 
100,   // 4 + 
11,   // 4 , 
22,   // 4 - 
28,   // 4 . 
81,   // 4 / 
5,   // 4 0 
7,   // 4 1 
9,   // 4 2 
4,   // 4 3 
9,   // 4 4 
7,   // 4 5 
9,   // 4 6 
4,   // 4 7 
4,   // 4 8 
10,   // 4 9 
13,   // 4 : 
100,   // 4 ; 
100,   // 4 < 
100,   // 4 = 
100,   // 4 > 
100,   // 4 ? 
5,   // 4 @ 
13,   // 4 A 
3,   // 4 B 
100,   // 4 C 
17,   // 4 D 
5,   // 4 E 
100,   // 4 F 
100,   // 4 G 
34,   // 4 H 
100,   // 4 I 
62,   // 4 J 
100,   // 4 K 
20,   // 4 L 
34,   // 4 M 
13,   // 4 N 
100,   // 4 O 
19,   // 4 P 
0,   // 4 Q 
15,   // 4 R 
43,   // 4 S 
45,   // 4 T 
44,   // 4 U 
18,   // 4 V 
100,   // 4 W 
50,   // 4 X 
12,   // 4 Y 
100,   // 4 Z 
100,   // 4 [ 
100,   // 4 \ 
100,   // 4 ] 
100,   // 4 ^ 
91,   // 4 _ 
100,   // 4 ` 
66,   // 4 a 
100,   // 4 b 
84,   // 4 c 
100,   // 4 d 
100,   // 4 e 
89,   // 4 f 
100,   // 4 g 
100,   // 4 h 
100,   // 4 i 
3,   // 4 j 
100,   // 4 k 
100,   // 4 l 
100,   // 4 m 
100,   // 4 n 
100,   // 4 o 
100,   // 4 p 
100,   // 4 q 
100,   // 4 r 
96,   // 4 s 
100,   // 4 t 
85,   // 4 u 
100,   // 4 v 
100,   // 4 w 
100,   // 4 x 
100,   // 4 y 
100,   // 4 z 
100,   // 4 { 
100,   // 4 | 
100,   // 4 } 
100,   // 4 ~ 
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100,   // 4  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
100,   // 5 ! 
100,   // 5 " 
100,   // 5 # 
100,   // 5 $ 
100,   // 5 % 
100,   // 5 & 
100,   // 5 ' 
100,   // 5 ( 
36,   // 5 ) 
100,   // 5 * 
100,   // 5 + 
15,   // 5 , 
29,   // 5 - 
38,   // 5 . 
88,   // 5 / 
9,   // 5 0 
13,   // 5 1 
8,   // 5 2 
11,   // 5 3 
7,   // 5 4 
10,   // 5 5 
12,   // 5 6 
10,   // 5 7 
8,   // 5 8 
8,   // 5 9 
55,   // 5 : 
100,   // 5 ; 
100,   // 5 < 
100,   // 5 = 
100,   // 5 > 
100,   // 5 ? 
6,   // 5 @ 
25,   // 5 A 
21,   // 5 B 
100,   // 5 C 
11,   // 5 D 
13,   // 5 E 
84,   // 5 F 
64,   // 5 G 
25,   // 5 H 
100,   // 5 I 
85,   // 5 J 
100,   // 5 K 
13,   // 5 L 
100,   // 5 M 
13,   // 5 N 
100,   // 5 O 
38,   // 5 P 
6,   // 5 Q 
10,   // 5 R 
51,   // 5 S 
18,   // 5 T 
33,   // 5 U 
100,   // 5 V 
100,   // 5 W 
20,   // 5 X 
100,   // 5 Y 
70,   // 5 Z 
100,   // 5 [ 
100,   // 5 \ 
100,   // 5 ] 
100,   // 5 ^ 
100,   // 5 _ 
100,   // 5 ` 
66,   // 5 a 
100,   // 5 b 
100,   // 5 c 
100,   // 5 d 
100,   // 5 e 
100,   // 5 f 
100,   // 5 g 
100,   // 5 h 
100,   // 5 i 
2,   // 5 j 
100,   // 5 k 
100,   // 5 l 
100,   // 5 m 
100,   // 5 n 
100,   // 5 o 
100,   // 5 p 
100,   // 5 q 
100,   // 5 r 
100,   // 5 s 
100,   // 5 t 
100,   // 5 u 
100,   // 5 v 
100,   // 5 w 
100,   // 5 x 
100,   // 5 y 
100,   // 5 z 
100,   // 5 { 
100,   // 5 | 
100,   // 5 } 
100,   // 5 ~ 
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100,   // 5  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
14, 
100,   // 6 ! 
0,   // 6 " 
100,   // 6 # 
100,   // 6 $ 
100,   // 6 % 
100,   // 6 & 
100,   // 6 ' 
100,   // 6 ( 
30,   // 6 ) 
100,   // 6 * 
100,   // 6 + 
17,   // 6 , 
22,   // 6 - 
34,   // 6 . 
66,   // 6 / 
5,   // 6 0 
27,   // 6 1 
20,   // 6 2 
23,   // 6 3 
15,   // 6 4 
16,   // 6 5 
24,   // 6 6 
9,   // 6 7 
12,   // 6 8 
4,   // 6 9 
4,   // 6 : 
100,   // 6 ; 
100,   // 6 < 
100,   // 6 = 
100,   // 6 > 
100,   // 6 ? 
8,   // 6 @ 
11,   // 6 A 
30,   // 6 B 
100,   // 6 C 
25,   // 6 D 
36,   // 6 E 
64,   // 6 F 
80,   // 6 G 
30,   // 6 H 
100,   // 6 I 
87,   // 6 J 
100,   // 6 K 
32,   // 6 L 
100,   // 6 M 
30,   // 6 N 
88,   // 6 O 
14,   // 6 P 
3,   // 6 Q 
46,   // 6 R 
71,   // 6 S 
17,   // 6 T 
26,   // 6 U 
100,   // 6 V 
100,   // 6 W 
100,   // 6 X 
100,   // 6 Y 
100,   // 6 Z 
100,   // 6 [ 
100,   // 6 \ 
100,   // 6 ] 
100,   // 6 ^ 
100,   // 6 _ 
100,   // 6 ` 
89,   // 6 a 
53,   // 6 b 
100,   // 6 c 
100,   // 6 d 
100,   // 6 e 
100,   // 6 f 
100,   // 6 g 
100,   // 6 h 
91,   // 6 i 
5,   // 6 j 
100,   // 6 k 
100,   // 6 l 
82,   // 6 m 
100,   // 6 n 
100,   // 6 o 
100,   // 6 p 
100,   // 6 q 
100,   // 6 r 
100,   // 6 s 
100,   // 6 t 
100,   // 6 u 
100,   // 6 v 
100,   // 6 w 
100,   // 6 x 
100,   // 6 y 
100,   // 6 z 
100,   // 6 { 
100,   // 6 | 
100,   // 6 } 
100,   // 6 ~ 
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100,   // 6  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
9, 
100,   // 7 ! 
100,   // 7 " 
100,   // 7 # 
100,   // 7 $ 
100,   // 7 % 
100,   // 7 & 
100,   // 7 ' 
100,   // 7 ( 
84,   // 7 ) 
100,   // 7 * 
100,   // 7 + 
17,   // 7 , 
30,   // 7 - 
34,   // 7 . 
53,   // 7 / 
9,   // 7 0 
13,   // 7 1 
6,   // 7 2 
6,   // 7 3 
5,   // 7 4 
7,   // 7 5 
8,   // 7 6 
8,   // 7 7 
7,   // 7 8 
11,   // 7 9 
38,   // 7 : 
100,   // 7 ; 
100,   // 7 < 
100,   // 7 = 
100,   // 7 > 
100,   // 7 ? 
6,   // 7 @ 
14,   // 7 A 
17,   // 7 B 
100,   // 7 C 
31,   // 7 D 
22,   // 7 E 
62,   // 7 F 
100,   // 7 G 
19,   // 7 H 
100,   // 7 I 
64,   // 7 J 
100,   // 7 K 
9,   // 7 L 
100,   // 7 M 
34,   // 7 N 
100,   // 7 O 
15,   // 7 P 
12,   // 7 Q 
28,   // 7 R 
59,   // 7 S 
35,   // 7 T 
100,   // 7 U 
100,   // 7 V 
100,   // 7 W 
100,   // 7 X 
100,   // 7 Y 
100,   // 7 Z 
100,   // 7 [ 
100,   // 7 \ 
100,   // 7 ] 
100,   // 7 ^ 
100,   // 7 _ 
100,   // 7 ` 
67,   // 7 a 
70,   // 7 b 
51,   // 7 c 
100,   // 7 d 
85,   // 7 e 
100,   // 7 f 
100,   // 7 g 
100,   // 7 h 
100,   // 7 i 
2,   // 7 j 
100,   // 7 k 
100,   // 7 l 
100,   // 7 m 
100,   // 7 n 
95,   // 7 o 
100,   // 7 p 
0,   // 7 q 
100,   // 7 r 
99,   // 7 s 
100,   // 7 t 
100,   // 7 u 
100,   // 7 v 
59,   // 7 w 
100,   // 7 x 
100,   // 7 y 
100,   // 7 z 
100,   // 7 { 
100,   // 7 | 
100,   // 7 } 
100,   // 7 ~ 
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100,   // 7  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
7, 
100,   // 8 ! 
1,   // 8 " 
100,   // 8 # 
100,   // 8 $ 
100,   // 8 % 
100,   // 8 & 
100,   // 8 ' 
100,   // 8 ( 
21,   // 8 ) 
100,   // 8 * 
100,   // 8 + 
9,   // 8 , 
22,   // 8 - 
45,   // 8 . 
55,   // 8 / 
9,   // 8 0 
13,   // 8 1 
11,   // 8 2 
9,   // 8 3 
5,   // 8 4 
10,   // 8 5 
7,   // 8 6 
5,   // 8 7 
8,   // 8 8 
8,   // 8 9 
12,   // 8 : 
100,   // 8 ; 
100,   // 8 < 
100,   // 8 = 
100,   // 8 > 
100,   // 8 ? 
2,   // 8 @ 
8,   // 8 A 
10,   // 8 B 
100,   // 8 C 
33,   // 8 D 
9,   // 8 E 
100,   // 8 F 
60,   // 8 G 
21,   // 8 H 
100,   // 8 I 
69,   // 8 J 
100,   // 8 K 
13,   // 8 L 
100,   // 8 M 
9,   // 8 N 
100,   // 8 O 
31,   // 8 P 
0,   // 8 Q 
9,   // 8 R 
65,   // 8 S 
5,   // 8 T 
50,   // 8 U 
100,   // 8 V 
100,   // 8 W 
0,   // 8 X 
50,   // 8 Y 
100,   // 8 Z 
100,   // 8 [ 
100,   // 8 \ 
100,   // 8 ] 
100,   // 8 ^ 
100,   // 8 _ 
100,   // 8 ` 
73,   // 8 a 
46,   // 8 b 
100,   // 8 c 
100,   // 8 d 
93,   // 8 e 
87,   // 8 f 
100,   // 8 g 
95,   // 8 h 
100,   // 8 i 
100,   // 8 j 
100,   // 8 k 
100,   // 8 l 
100,   // 8 m 
100,   // 8 n 
100,   // 8 o 
100,   // 8 p 
100,   // 8 q 
100,   // 8 r 
100,   // 8 s 
100,   // 8 t 
100,   // 8 u 
100,   // 8 v 
100,   // 8 w 
100,   // 8 x 
100,   // 8 y 
100,   // 8 z 
100,   // 8 { 
100,   // 8 | 
100,   // 8 } 
100,   // 8 ~ 
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100,   // 8  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
12, 
100,   // 9 ! 
15,   // 9 " 
100,   // 9 # 
100,   // 9 $ 
100,   // 9 % 
100,   // 9 & 
100,   // 9 ' 
100,   // 9 ( 
41,   // 9 ) 
100,   // 9 * 
100,   // 9 + 
13,   // 9 , 
31,   // 9 - 
34,   // 9 . 
4,   // 9 / 
13,   // 9 0 
50,   // 9 1 
13,   // 9 2 
11,   // 9 3 
9,   // 9 4 
11,   // 9 5 
10,   // 9 6 
7,   // 9 7 
8,   // 9 8 
6,   // 9 9 
66,   // 9 : 
100,   // 9 ; 
100,   // 9 < 
100,   // 9 = 
100,   // 9 > 
100,   // 9 ? 
20,   // 9 @ 
19,   // 9 A 
28,   // 9 B 
100,   // 9 C 
14,   // 9 D 
10,   // 9 E 
50,   // 9 F 
100,   // 9 G 
18,   // 9 H 
100,   // 9 I 
65,   // 9 J 
100,   // 9 K 
22,   // 9 L 
100,   // 9 M 
33,   // 9 N 
100,   // 9 O 
13,   // 9 P 
0,   // 9 Q 
30,   // 9 R 
95,   // 9 S 
38,   // 9 T 
100,   // 9 U 
100,   // 9 V 
100,   // 9 W 
33,   // 9 X 
100,   // 9 Y 
100,   // 9 Z 
100,   // 9 [ 
100,   // 9 \ 
100,   // 9 ] 
100,   // 9 ^ 
75,   // 9 _ 
100,   // 9 ` 
100,   // 9 a 
100,   // 9 b 
85,   // 9 c 
100,   // 9 d 
100,   // 9 e 
65,   // 9 f 
100,   // 9 g 
93,   // 9 h 
100,   // 9 i 
13,   // 9 j 
100,   // 9 k 
100,   // 9 l 
100,   // 9 m 
100,   // 9 n 
100,   // 9 o 
100,   // 9 p 
100,   // 9 q 
100,   // 9 r 
100,   // 9 s 
97,   // 9 t 
100,   // 9 u 
100,   // 9 v 
100,   // 9 w 
100,   // 9 x 
100,   // 9 y 
100,   // 9 z 
100,   // 9 { 
100,   // 9 | 
100,   // 9 } 
100,   // 9 ~ 
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100,   // 9  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
55, 
100,   // : ! 
100,   // : " 
100,   // : # 
100,   // : $ 
100,   // : % 
100,   // : & 
100,   // : ' 
25,   // : ( 
100,   // : ) 
100,   // : * 
100,   // : + 
100,   // : , 
100,   // : - 
100,   // : . 
0,   // : / 
100,   // : 0 
42,   // : 1 
6,   // : 2 
18,   // : 3 
4,   // : 4 
8,   // : 5 
4,   // : 6 
20,   // : 7 
55,   // : 8 
100,   // : 9 
100,   // : : 
100,   // : ; 
100,   // : < 
100,   // : = 
100,   // : > 
100,   // : ? 
100,   // : @ 
100,   // : A 
100,   // : B 
100,   // : C 
100,   // : D 
100,   // : E 
100,   // : F 
100,   // : G 
100,   // : H 
100,   // : I 
100,   // : J 
100,   // : K 
100,   // : L 
100,   // : M 
100,   // : N 
100,   // : O 
5,   // : P 
100,   // : Q 
100,   // : R 
100,   // : S 
100,   // : T 
100,   // : U 
100,   // : V 
100,   // : W 
100,   // : X 
100,   // : Y 
100,   // : Z 
100,   // : [ 
100,   // : \ 
100,   // : ] 
100,   // : ^ 
100,   // : _ 
100,   // : ` 
100,   // : a 
100,   // : b 
100,   // : c 
100,   // : d 
100,   // : e 
100,   // : f 
100,   // : g 
100,   // : h 
100,   // : i 
100,   // : j 
100,   // : k 
100,   // : l 
100,   // : m 
100,   // : n 
100,   // : o 
100,   // : p 
100,   // : q 
100,   // : r 
100,   // : s 
100,   // : t 
100,   // : u 
100,   // : v 
100,   // : w 
100,   // : x 
100,   // : y 
100,   // : z 
100,   // : { 
100,   // : | 
100,   // : } 
100,   // : ~ 
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100,   // :  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ; ! 
100,   // ; " 
100,   // ; # 
100,   // ; $ 
100,   // ; % 
100,   // ; & 
100,   // ; ' 
100,   // ; ( 
100,   // ; ) 
100,   // ; * 
100,   // ; + 
100,   // ; , 
100,   // ; - 
100,   // ; . 
100,   // ; / 
100,   // ; 0 
100,   // ; 1 
100,   // ; 2 
100,   // ; 3 
100,   // ; 4 
100,   // ; 5 
100,   // ; 6 
100,   // ; 7 
100,   // ; 8 
100,   // ; 9 
100,   // ; : 
100,   // ; ; 
100,   // ; < 
100,   // ; = 
100,   // ; > 
100,   // ; ? 
100,   // ; @ 
100,   // ; A 
100,   // ; B 
100,   // ; C 
100,   // ; D 
100,   // ; E 
100,   // ; F 
100,   // ; G 
100,   // ; H 
100,   // ; I 
100,   // ; J 
100,   // ; K 
100,   // ; L 
100,   // ; M 
100,   // ; N 
100,   // ; O 
100,   // ; P 
100,   // ; Q 
100,   // ; R 
100,   // ; S 
100,   // ; T 
100,   // ; U 
100,   // ; V 
100,   // ; W 
100,   // ; X 
100,   // ; Y 
100,   // ; Z 
100,   // ; [ 
100,   // ; \ 
100,   // ; ] 
100,   // ; ^ 
100,   // ; _ 
100,   // ; ` 
100,   // ; a 
100,   // ; b 
100,   // ; c 
100,   // ; d 
100,   // ; e 
66,   // ; f 
100,   // ; g 
100,   // ; h 
100,   // ; i 
100,   // ; j 
100,   // ; k 
100,   // ; l 
100,   // ; m 
100,   // ; n 
100,   // ; o 
100,   // ; p 
100,   // ; q 
100,   // ; r 
100,   // ; s 
100,   // ; t 
100,   // ; u 
100,   // ; v 
100,   // ; w 
100,   // ; x 
100,   // ; y 
100,   // ; z 
100,   // ; { 
100,   // ; | 
100,   // ; } 
100,   // ; ~ 
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100,   // ;  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
54, 
100,   // < ! 
100,   // < " 
100,   // < # 
100,   // < $ 
100,   // < % 
100,   // < & 
100,   // < ' 
100,   // < ( 
100,   // < ) 
100,   // < * 
100,   // < + 
100,   // < , 
100,   // < - 
100,   // < . 
100,   // < / 
100,   // < 0 
100,   // < 1 
100,   // < 2 
100,   // < 3 
100,   // < 4 
100,   // < 5 
100,   // < 6 
100,   // < 7 
100,   // < 8 
100,   // < 9 
100,   // < : 
100,   // < ; 
100,   // < < 
100,   // < = 
100,   // < > 
100,   // < ? 
100,   // < @ 
100,   // < A 
100,   // < B 
100,   // < C 
100,   // < D 
100,   // < E 
100,   // < F 
100,   // < G 
100,   // < H 
100,   // < I 
100,   // < J 
100,   // < K 
100,   // < L 
100,   // < M 
100,   // < N 
100,   // < O 
100,   // < P 
100,   // < Q 
100,   // < R 
100,   // < S 
100,   // < T 
100,   // < U 
100,   // < V 
100,   // < W 
100,   // < X 
100,   // < Y 
100,   // < Z 
100,   // < [ 
100,   // < \ 
100,   // < ] 
100,   // < ^ 
100,   // < _ 
100,   // < ` 
88,   // < a 
100,   // < b 
100,   // < c 
100,   // < d 
100,   // < e 
100,   // < f 
100,   // < g 
100,   // < h 
100,   // < i 
100,   // < j 
100,   // < k 
100,   // < l 
100,   // < m 
100,   // < n 
100,   // < o 
100,   // < p 
100,   // < q 
100,   // < r 
100,   // < s 
100,   // < t 
100,   // < u 
100,   // < v 
100,   // < w 
100,   // < x 
100,   // < y 
100,   // < z 
100,   // < { 
100,   // < | 
100,   // < } 
100,   // < ~ 
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100,   // <  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
79, 
100,   // = ! 
100,   // = " 
100,   // = # 
100,   // = $ 
100,   // = % 
100,   // = & 
100,   // = ' 
100,   // = ( 
100,   // = ) 
100,   // = * 
100,   // = + 
100,   // = , 
100,   // = - 
100,   // = . 
100,   // = / 
100,   // = 0 
100,   // = 1 
100,   // = 2 
100,   // = 3 
100,   // = 4 
100,   // = 5 
100,   // = 6 
100,   // = 7 
100,   // = 8 
100,   // = 9 
100,   // = : 
100,   // = ; 
100,   // = < 
100,   // = = 
100,   // = > 
100,   // = ? 
100,   // = @ 
100,   // = A 
100,   // = B 
100,   // = C 
100,   // = D 
100,   // = E 
100,   // = F 
100,   // = G 
100,   // = H 
100,   // = I 
100,   // = J 
100,   // = K 
100,   // = L 
100,   // = M 
100,   // = N 
100,   // = O 
100,   // = P 
100,   // = Q 
100,   // = R 
100,   // = S 
100,   // = T 
100,   // = U 
100,   // = V 
100,   // = W 
100,   // = X 
100,   // = Y 
100,   // = Z 
100,   // = [ 
100,   // = \ 
100,   // = ] 
100,   // = ^ 
100,   // = _ 
100,   // = ` 
100,   // = a 
100,   // = b 
100,   // = c 
100,   // = d 
100,   // = e 
100,   // = f 
100,   // = g 
100,   // = h 
100,   // = i 
100,   // = j 
100,   // = k 
100,   // = l 
100,   // = m 
100,   // = n 
100,   // = o 
100,   // = p 
100,   // = q 
100,   // = r 
95,   // = s 
100,   // = t 
100,   // = u 
100,   // = v 
100,   // = w 
100,   // = x 
100,   // = y 
100,   // = z 
100,   // = { 
100,   // = | 
100,   // = } 
100,   // = ~ 
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100,   // =  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
9, 
100,   // > ! 
100,   // > " 
100,   // > # 
100,   // > $ 
100,   // > % 
100,   // > & 
100,   // > ' 
100,   // > ( 
100,   // > ) 
100,   // > * 
100,   // > + 
100,   // > , 
100,   // > - 
100,   // > . 
100,   // > / 
100,   // > 0 
100,   // > 1 
100,   // > 2 
100,   // > 3 
100,   // > 4 
100,   // > 5 
100,   // > 6 
100,   // > 7 
100,   // > 8 
100,   // > 9 
100,   // > : 
100,   // > ; 
100,   // > < 
100,   // > = 
100,   // > > 
100,   // > ? 
100,   // > @ 
100,   // > A 
100,   // > B 
100,   // > C 
100,   // > D 
100,   // > E 
100,   // > F 
100,   // > G 
100,   // > H 
100,   // > I 
100,   // > J 
100,   // > K 
100,   // > L 
100,   // > M 
100,   // > N 
100,   // > O 
100,   // > P 
100,   // > Q 
100,   // > R 
100,   // > S 
100,   // > T 
100,   // > U 
100,   // > V 
100,   // > W 
100,   // > X 
100,   // > Y 
100,   // > Z 
100,   // > [ 
100,   // > \ 
100,   // > ] 
100,   // > ^ 
100,   // > _ 
100,   // > ` 
100,   // > a 
100,   // > b 
100,   // > c 
100,   // > d 
100,   // > e 
100,   // > f 
100,   // > g 
100,   // > h 
100,   // > i 
100,   // > j 
100,   // > k 
100,   // > l 
100,   // > m 
100,   // > n 
100,   // > o 
100,   // > p 
100,   // > q 
100,   // > r 
100,   // > s 
100,   // > t 
100,   // > u 
100,   // > v 
100,   // > w 
100,   // > x 
100,   // > y 
100,   // > z 
100,   // > { 
100,   // > | 
100,   // > } 
100,   // > ~ 
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100,   // >  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
70, 
100,   // ? ! 
13,   // ? " 
100,   // ? # 
100,   // ? $ 
100,   // ? % 
100,   // ? & 
100,   // ? ' 
100,   // ? ( 
100,   // ? ) 
100,   // ? * 
100,   // ? + 
100,   // ? , 
100,   // ? - 
100,   // ? . 
100,   // ? / 
100,   // ? 0 
100,   // ? 1 
100,   // ? 2 
100,   // ? 3 
100,   // ? 4 
100,   // ? 5 
100,   // ? 6 
100,   // ? 7 
100,   // ? 8 
100,   // ? 9 
100,   // ? : 
100,   // ? ; 
100,   // ? < 
100,   // ? = 
100,   // ? > 
100,   // ? ? 
100,   // ? @ 
100,   // ? A 
100,   // ? B 
100,   // ? C 
100,   // ? D 
100,   // ? E 
100,   // ? F 
100,   // ? G 
100,   // ? H 
100,   // ? I 
100,   // ? J 
100,   // ? K 
100,   // ? L 
100,   // ? M 
100,   // ? N 
100,   // ? O 
100,   // ? P 
100,   // ? Q 
100,   // ? R 
100,   // ? S 
100,   // ? T 
100,   // ? U 
100,   // ? V 
100,   // ? W 
100,   // ? X 
100,   // ? Y 
100,   // ? Z 
100,   // ? [ 
100,   // ? \ 
100,   // ? ] 
100,   // ? ^ 
100,   // ? _ 
100,   // ? ` 
100,   // ? a 
100,   // ? b 
100,   // ? c 
100,   // ? d 
100,   // ? e 
100,   // ? f 
100,   // ? g 
100,   // ? h 
100,   // ? i 
100,   // ? j 
100,   // ? k 
100,   // ? l 
100,   // ? m 
100,   // ? n 
100,   // ? o 
100,   // ? p 
100,   // ? q 
100,   // ? r 
100,   // ? s 
100,   // ? t 
100,   // ? u 
100,   // ? v 
100,   // ? w 
100,   // ? x 
100,   // ? y 
100,   // ? z 
100,   // ? { 
100,   // ? | 
100,   // ? } 
100,   // ? ~ 
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100,   // ?  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
69, 
100,   // @ ! 
100,   // @ " 
100,   // @ # 
100,   // @ $ 
100,   // @ % 
100,   // @ & 
100,   // @ ' 
100,   // @ ( 
100,   // @ ) 
100,   // @ * 
100,   // @ + 
100,   // @ , 
100,   // @ - 
100,   // @ . 
100,   // @ / 
57,   // @ 0 
100,   // @ 1 
100,   // @ 2 
40,   // @ 3 
100,   // @ 4 
100,   // @ 5 
100,   // @ 6 
100,   // @ 7 
100,   // @ 8 
100,   // @ 9 
100,   // @ : 
100,   // @ ; 
100,   // @ < 
100,   // @ = 
100,   // @ > 
100,   // @ ? 
100,   // @ @ 
32,   // @ A 
28,   // @ B 
53,   // @ C 
100,   // @ D 
100,   // @ E 
0,   // @ F 
23,   // @ G 
63,   // @ H 
46,   // @ I 
100,   // @ J 
66,   // @ K 
50,   // @ L 
33,   // @ M 
0,   // @ N 
100,   // @ O 
38,   // @ P 
100,   // @ Q 
100,   // @ R 
92,   // @ S 
6,   // @ T 
100,   // @ U 
60,   // @ V 
74,   // @ W 
50,   // @ X 
50,   // @ Y 
100,   // @ Z 
100,   // @ [ 
100,   // @ \ 
100,   // @ ] 
100,   // @ ^ 
100,   // @ _ 
100,   // @ ` 
11,   // @ a 
2,   // @ b 
5,   // @ c 
36,   // @ d 
18,   // @ e 
13,   // @ f 
16,   // @ g 
4,   // @ h 
6,   // @ i 
0,   // @ j 
65,   // @ k 
24,   // @ l 
17,   // @ m 
38,   // @ n 
27,   // @ o 
1,   // @ p 
50,   // @ q 
35,   // @ r 
6,   // @ s 
16,   // @ t 
33,   // @ u 
22,   // @ v 
16,   // @ w 
4,   // @ x 
0,   // @ y 
29,   // @ z 
100,   // @ { 
100,   // @ | 
100,   // @ } 
100,   // @ ~ 
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100,   // @  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
20, 
100,   // A ! 
100,   // A " 
100,   // A # 
100,   // A $ 
100,   // A % 
100,   // A & 
100,   // A ' 
100,   // A ( 
12,   // A ) 
100,   // A * 
100,   // A + 
50,   // A , 
91,   // A - 
52,   // A . 
100,   // A / 
100,   // A 0 
17,   // A 1 
21,   // A 2 
19,   // A 3 
51,   // A 4 
54,   // A 5 
80,   // A 6 
100,   // A 7 
56,   // A 8 
60,   // A 9 
100,   // A : 
100,   // A ; 
100,   // A < 
100,   // A = 
100,   // A > 
100,   // A ? 
25,   // A @ 
31,   // A A 
17,   // A B 
42,   // A C 
40,   // A D 
15,   // A E 
60,   // A F 
16,   // A G 
65,   // A H 
70,   // A I 
18,   // A J 
67,   // A K 
42,   // A L 
40,   // A M 
28,   // A N 
27,   // A O 
30,   // A P 
10,   // A Q 
22,   // A R 
56,   // A S 
28,   // A T 
50,   // A U 
19,   // A V 
37,   // A W 
36,   // A X 
19,   // A Y 
26,   // A Z 
100,   // A [ 
100,   // A \ 
100,   // A ] 
100,   // A ^ 
100,   // A _ 
100,   // A ` 
100,   // A a 
14,   // A b 
31,   // A c 
37,   // A d 
100,   // A e 
8,   // A f 
51,   // A g 
71,   // A h 
77,   // A i 
66,   // A j 
20,   // A k 
20,   // A l 
33,   // A m 
19,   // A n 
100,   // A o 
10,   // A p 
100,   // A q 
37,   // A r 
56,   // A s 
29,   // A t 
7,   // A u 
64,   // A v 
100,   // A w 
12,   // A x 
100,   // A y 
95,   // A z 
100,   // A { 
100,   // A | 
100,   // A } 
100,   // A ~ 
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100,   // A  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
33, 
100,   // B ! 
0,   // B " 
100,   // B # 
100,   // B $ 
100,   // B % 
44,   // B & 
100,   // B ' 
100,   // B ( 
42,   // B ) 
100,   // B * 
100,   // B + 
100,   // B , 
88,   // B - 
59,   // B . 
100,   // B / 
100,   // B 0 
100,   // B 1 
35,   // B 2 
50,   // B 3 
31,   // B 4 
60,   // B 5 
100,   // B 6 
14,   // B 7 
100,   // B 8 
100,   // B 9 
100,   // B : 
100,   // B ; 
100,   // B < 
100,   // B = 
100,   // B > 
100,   // B ? 
50,   // B @ 
16,   // B A 
17,   // B B 
4,   // B C 
22,   // B D 
66,   // B E 
100,   // B F 
65,   // B G 
33,   // B H 
56,   // B I 
17,   // B J 
12,   // B K 
19,   // B L 
10,   // B M 
36,   // B N 
19,   // B O 
6,   // B P 
25,   // B Q 
31,   // B R 
58,   // B S 
34,   // B T 
58,   // B U 
20,   // B V 
50,   // B W 
0,   // B X 
15,   // B Y 
11,   // B Z 
100,   // B [ 
100,   // B \ 
100,   // B ] 
100,   // B ^ 
100,   // B _ 
100,   // B ` 
18,   // B a 
100,   // B b 
100,   // B c 
86,   // B d 
8,   // B e 
68,   // B f 
100,   // B g 
84,   // B h 
30,   // B i 
40,   // B j 
100,   // B k 
15,   // B l 
100,   // B m 
100,   // B n 
28,   // B o 
100,   // B p 
100,   // B q 
20,   // B r 
100,   // B s 
100,   // B t 
14,   // B u 
100,   // B v 
100,   // B w 
100,   // B x 
29,   // B y 
100,   // B z 
100,   // B { 
100,   // B | 
100,   // B } 
100,   // B ~ 
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
32,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
11,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
100,   // B  
8,   // B  
100,   // B  
100,   // B  
100,   // B  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
51, 
100,   // C ! 
100,   // C " 
100,   // C # 
100,   // C $ 
100,   // C % 
100,   // C & 
100,   // C ' 
100,   // C ( 
34,   // C ) 
100,   // C * 
100,   // C + 
100,   // C , 
62,   // C - 
54,   // C . 
62,   // C / 
100,   // C 0 
21,   // C 1 
15,   // C 2 
26,   // C 3 
20,   // C 4 
100,   // C 5 
100,   // C 6 
100,   // C 7 
100,   // C 8 
100,   // C 9 
13,   // C : 
100,   // C ; 
100,   // C < 
100,   // C = 
100,   // C > 
100,   // C ? 
100,   // C @ 
15,   // C A 
100,   // C B 
49,   // C C 
5,   // C D 
14,   // C E 
38,   // C F 
100,   // C G 
77,   // C H 
36,   // C I 
50,   // C J 
78,   // C K 
22,   // C L 
100,   // C M 
35,   // C N 
12,   // C O 
51,   // C P 
100,   // C Q 
30,   // C R 
22,   // C S 
66,   // C T 
60,   // C U 
17,   // C V 
100,   // C W 
100,   // C X 
14,   // C Y 
100,   // C Z 
100,   // C [ 
100,   // C \ 
100,   // C ] 
100,   // C ^ 
100,   // C _ 
100,   // C ` 
31,   // C a 
100,   // C b 
100,   // C c 
100,   // C d 
50,   // C e 
100,   // C f 
100,   // C g 
11,   // C h 
43,   // C i 
100,   // C j 
100,   // C k 
11,   // C l 
100,   // C m 
100,   // C n 
35,   // C o 
100,   // C p 
100,   // C q 
45,   // C r 
87,   // C s 
93,   // C t 
20,   // C u 
100,   // C v 
100,   // C w 
100,   // C x 
33,   // C y 
33,   // C z 
100,   // C { 
100,   // C | 
100,   // C } 
100,   // C ~ 
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
30,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100,   // C  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
32, 
100,   // D ! 
42,   // D " 
100,   // D # 
100,   // D $ 
100,   // D % 
100,   // D & 
35,   // D ' 
100,   // D ( 
9,   // D ) 
100,   // D * 
100,   // D + 
55,   // D , 
61,   // D - 
73,   // D . 
100,   // D / 
100,   // D 0 
74,   // D 1 
100,   // D 2 
100,   // D 3 
72,   // D 4 
100,   // D 5 
100,   // D 6 
100,   // D 7 
100,   // D 8 
100,   // D 9 
100,   // D : 
100,   // D ; 
100,   // D < 
100,   // D = 
100,   // D > 
100,   // D ? 
13,   // D @ 
47,   // D A 
20,   // D B 
85,   // D C 
23,   // D D 
63,   // D E 
12,   // D F 
12,   // D G 
21,   // D H 
80,   // D I 
6,   // D J 
31,   // D K 
20,   // D L 
5,   // D M 
50,   // D N 
38,   // D O 
6,   // D P 
66,   // D Q 
19,   // D R 
32,   // D S 
29,   // D T 
8,   // D U 
41,   // D V 
27,   // D W 
27,   // D X 
35,   // D Y 
20,   // D Z 
100,   // D [ 
100,   // D \ 
100,   // D ] 
100,   // D ^ 
100,   // D _ 
100,   // D ` 
15,   // D a 
100,   // D b 
100,   // D c 
100,   // D d 
13,   // D e 
100,   // D f 
100,   // D g 
100,   // D h 
13,   // D i 
100,   // D j 
21,   // D k 
100,   // D l 
100,   // D m 
100,   // D n 
21,   // D o 
100,   // D p 
100,   // D q 
23,   // D r 
86,   // D s 
100,   // D t 
27,   // D u 
100,   // D v 
100,   // D w 
100,   // D x 
71,   // D y 
100,   // D z 
100,   // D { 
100,   // D | 
100,   // D } 
100,   // D ~ 
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
10,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
6,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
100,   // D  
36,   // D  
100,   // D  
100,   // D  
100,   // D  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
51, 
100,   // E ! 
16,   // E " 
100,   // E # 
100,   // E $ 
100,   // E % 
100,   // E & 
100,   // E ' 
100,   // E ( 
15,   // E ) 
100,   // E * 
100,   // E + 
100,   // E , 
71,   // E - 
91,   // E . 
84,   // E / 
100,   // E 0 
29,   // E 1 
37,   // E 2 
55,   // E 3 
27,   // E 4 
25,   // E 5 
80,   // E 6 
20,   // E 7 
12,   // E 8 
33,   // E 9 
100,   // E : 
100,   // E ; 
100,   // E < 
100,   // E = 
100,   // E > 
100,   // E ? 
5,   // E @ 
20,   // E A 
42,   // E B 
13,   // E C 
38,   // E D 
64,   // E E 
36,   // E F 
40,   // E G 
20,   // E H 
89,   // E I 
25,   // E J 
66,   // E K 
42,   // E L 
58,   // E M 
62,   // E N 
26,   // E O 
26,   // E P 
100,   // E Q 
65,   // E R 
49,   // E S 
52,   // E T 
40,   // E U 
87,   // E V 
83,   // E W 
29,   // E X 
14,   // E Y 
68,   // E Z 
100,   // E [ 
100,   // E \ 
100,   // E ] 
100,   // E ^ 
100,   // E _ 
100,   // E ` 
49,   // E a 
25,   // E b 
39,   // E c 
18,   // E d 
100,   // E e 
49,   // E f 
74,   // E g 
36,   // E h 
23,   // E i 
100,   // E j 
98,   // E k 
45,   // E l 
81,   // E m 
17,   // E n 
100,   // E o 
16,   // E p 
100,   // E q 
24,   // E r 
32,   // E s 
70,   // E t 
14,   // E u 
10,   // E v 
76,   // E w 
4,   // E x 
44,   // E y 
100,   // E z 
100,   // E { 
100,   // E | 
100,   // E } 
100,   // E ~ 
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100,   // E  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
42, 
100,   // F ! 
100,   // F " 
100,   // F # 
100,   // F $ 
100,   // F % 
100,   // F & 
100,   // F ' 
100,   // F ( 
66,   // F ) 
100,   // F * 
100,   // F + 
100,   // F , 
85,   // F - 
91,   // F . 
100,   // F / 
100,   // F 0 
100,   // F 1 
100,   // F 2 
100,   // F 3 
100,   // F 4 
100,   // F 5 
37,   // F 6 
100,   // F 7 
100,   // F 8 
100,   // F 9 
100,   // F : 
100,   // F ; 
100,   // F < 
100,   // F = 
100,   // F > 
100,   // F ? 
100,   // F @ 
45,   // F A 
29,   // F B 
36,   // F C 
3,   // F D 
47,   // F E 
47,   // F F 
100,   // F G 
80,   // F H 
86,   // F I 
100,   // F J 
100,   // F K 
40,   // F L 
65,   // F M 
100,   // F N 
50,   // F O 
98,   // F P 
100,   // F Q 
41,   // F R 
100,   // F S 
91,   // F T 
48,   // F U 
100,   // F V 
80,   // F W 
100,   // F X 
0,   // F Y 
100,   // F Z 
100,   // F [ 
100,   // F \ 
100,   // F ] 
100,   // F ^ 
100,   // F _ 
100,   // F ` 
12,   // F a 
100,   // F b 
100,   // F c 
100,   // F d 
28,   // F e 
100,   // F f 
100,   // F g 
100,   // F h 
35,   // F i 
1,   // F j 
100,   // F k 
11,   // F l 
100,   // F m 
100,   // F n 
27,   // F o 
100,   // F p 
100,   // F q 
4,   // F r 
100,   // F s 
100,   // F t 
33,   // F u 
100,   // F v 
100,   // F w 
100,   // F x 
98,   // F y 
100,   // F z 
100,   // F { 
100,   // F | 
100,   // F } 
100,   // F ~ 
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
15,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
7,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
100,   // F  
11,   // F  
100,   // F  
100,   // F  
100,   // F  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
44, 
100,   // G ! 
100,   // G " 
100,   // G # 
100,   // G $ 
100,   // G % 
100,   // G & 
100,   // G ' 
100,   // G ( 
86,   // G ) 
100,   // G * 
100,   // G + 
94,   // G , 
91,   // G - 
67,   // G . 
100,   // G / 
100,   // G 0 
7,   // G 1 
6,   // G 2 
7,   // G 3 
17,   // G 4 
32,   // G 5 
7,   // G 6 
45,   // G 7 
6,   // G 8 
100,   // G 9 
100,   // G : 
100,   // G ; 
100,   // G < 
100,   // G = 
100,   // G > 
100,   // G ? 
63,   // G @ 
36,   // G A 
14,   // G B 
85,   // G C 
60,   // G D 
64,   // G E 
33,   // G F 
100,   // G G 
90,   // G H 
48,   // G I 
100,   // G J 
80,   // G K 
34,   // G L 
100,   // G M 
18,   // G N 
68,   // G O 
33,   // G P 
100,   // G Q 
30,   // G R 
84,   // G S 
100,   // G T 
40,   // G U 
100,   // G V 
100,   // G W 
100,   // G X 
100,   // G Y 
100,   // G Z 
100,   // G [ 
100,   // G \ 
100,   // G ] 
100,   // G ^ 
100,   // G _ 
100,   // G ` 
42,   // G a 
100,   // G b 
100,   // G c 
100,   // G d 
17,   // G e 
100,   // G f 
100,   // G g 
77,   // G h 
82,   // G i 
100,   // G j 
100,   // G k 
9,   // G l 
7,   // G m 
90,   // G n 
47,   // G o 
100,   // G p 
100,   // G q 
20,   // G r 
100,   // G s 
100,   // G t 
47,   // G u 
100,   // G v 
100,   // G w 
100,   // G x 
3,   // G y 
100,   // G z 
100,   // G { 
100,   // G | 
100,   // G } 
100,   // G ~ 
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
27,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
12,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
100,   // G  
8,   // G  
100,   // G  
100,   // G  
100,   // G  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
23, 
100,   // H ! 
100,   // H " 
100,   // H # 
100,   // H $ 
100,   // H % 
100,   // H & 
100,   // H ' 
100,   // H ( 
100,   // H ) 
100,   // H * 
100,   // H + 
61,   // H , 
100,   // H - 
100,   // H . 
100,   // H / 
100,   // H 0 
11,   // H 1 
22,   // H 2 
13,   // H 3 
30,   // H 4 
34,   // H 5 
23,   // H 6 
10,   // H 7 
12,   // H 8 
14,   // H 9 
100,   // H : 
100,   // H ; 
100,   // H < 
100,   // H = 
100,   // H > 
100,   // H ? 
100,   // H @ 
74,   // H A 
44,   // H B 
75,   // H C 
26,   // H D 
64,   // H E 
48,   // H F 
7,   // H G 
20,   // H H 
69,   // H I 
44,   // H J 
100,   // H K 
88,   // H L 
91,   // H M 
60,   // H N 
47,   // H O 
39,   // H P 
0,   // H Q 
84,   // H R 
79,   // H S 
88,   // H T 
93,   // H U 
100,   // H V 
40,   // H W 
3,   // H X 
11,   // H Y 
20,   // H Z 
100,   // H [ 
100,   // H \ 
100,   // H ] 
100,   // H ^ 
100,   // H _ 
100,   // H ` 
13,   // H a 
100,   // H b 
100,   // H c 
100,   // H d 
27,   // H e 
100,   // H f 
100,   // H g 
100,   // H h 
31,   // H i 
100,   // H j 
100,   // H k 
100,   // H l 
100,   // H m 
100,   // H n 
18,   // H o 
100,   // H p 
100,   // H q 
100,   // H r 
100,   // H s 
100,   // H t 
43,   // H u 
100,   // H v 
100,   // H w 
100,   // H x 
23,   // H y 
100,   // H z 
100,   // H { 
100,   // H | 
100,   // H } 
100,   // H ~ 
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
14,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
8,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
100,   // H  
28,   // H  
100,   // H  
100,   // H  
100,   // H  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
97, 
100,   // I ! 
100,   // I " 
100,   // I # 
100,   // I $ 
100,   // I % 
100,   // I & 
100,   // I ' 
100,   // I ( 
84,   // I ) 
100,   // I * 
100,   // I + 
100,   // I , 
99,   // I - 
99,   // I . 
100,   // I / 
100,   // I 0 
100,   // I 1 
100,   // I 2 
100,   // I 3 
100,   // I 4 
100,   // I 5 
100,   // I 6 
100,   // I 7 
100,   // I 8 
100,   // I 9 
100,   // I : 
100,   // I ; 
100,   // I < 
100,   // I = 
100,   // I > 
100,   // I ? 
66,   // I @ 
33,   // I A 
70,   // I B 
58,   // I C 
74,   // I D 
54,   // I E 
93,   // I F 
79,   // I G 
100,   // I H 
96,   // I I 
100,   // I J 
42,   // I K 
55,   // I L 
65,   // I M 
56,   // I N 
40,   // I O 
39,   // I P 
2,   // I Q 
57,   // I R 
53,   // I S 
78,   // I T 
50,   // I U 
46,   // I V 
100,   // I W 
64,   // I X 
100,   // I Y 
94,   // I Z 
100,   // I [ 
100,   // I \ 
100,   // I ] 
100,   // I ^ 
100,   // I _ 
100,   // I ` 
99,   // I a 
78,   // I b 
8,   // I c 
80,   // I d 
100,   // I e 
100,   // I f 
77,   // I g 
54,   // I h 
100,   // I i 
100,   // I j 
77,   // I k 
96,   // I l 
28,   // I m 
13,   // I n 
94,   // I o 
100,   // I p 
100,   // I q 
65,   // I r 
42,   // I s 
82,   // I t 
100,   // I u 
82,   // I v 
100,   // I w 
100,   // I x 
100,   // I y 
95,   // I z 
100,   // I { 
100,   // I | 
100,   // I } 
100,   // I ~ 
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100,   // I  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
81, 
100,   // J ! 
100,   // J " 
100,   // J # 
100,   // J $ 
100,   // J % 
100,   // J & 
77,   // J ' 
100,   // J ( 
100,   // J ) 
100,   // J * 
100,   // J + 
100,   // J , 
100,   // J - 
60,   // J . 
100,   // J / 
100,   // J 0 
100,   // J 1 
100,   // J 2 
100,   // J 3 
100,   // J 4 
100,   // J 5 
100,   // J 6 
100,   // J 7 
100,   // J 8 
100,   // J 9 
100,   // J : 
100,   // J ; 
100,   // J < 
100,   // J = 
100,   // J > 
100,   // J ? 
60,   // J @ 
44,   // J A 
33,   // J B 
75,   // J C 
33,   // J D 
78,   // J E 
50,   // J F 
66,   // J G 
36,   // J H 
100,   // J I 
85,   // J J 
100,   // J K 
20,   // J L 
100,   // J M 
20,   // J N 
59,   // J O 
13,   // J P 
50,   // J Q 
21,   // J R 
100,   // J S 
42,   // J T 
100,   // J U 
100,   // J V 
55,   // J W 
40,   // J X 
28,   // J Y 
60,   // J Z 
100,   // J [ 
100,   // J \ 
100,   // J ] 
100,   // J ^ 
100,   // J _ 
100,   // J ` 
10,   // J a 
100,   // J b 
100,   // J c 
100,   // J d 
25,   // J e 
100,   // J f 
100,   // J g 
100,   // J h 
64,   // J i 
100,   // J j 
100,   // J k 
100,   // J l 
100,   // J m 
100,   // J n 
23,   // J o 
100,   // J p 
100,   // J q 
100,   // J r 
100,   // J s 
100,   // J t 
12,   // J u 
100,   // J v 
100,   // J w 
100,   // J x 
100,   // J y 
100,   // J z 
100,   // J { 
100,   // J | 
100,   // J } 
100,   // J ~ 
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
0,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
46,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
16,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
100,   // J  
9,   // J  
100,   // J  
100,   // J  
100,   // J  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
84, 
100,   // K ! 
100,   // K " 
100,   // K # 
100,   // K $ 
100,   // K % 
100,   // K & 
100,   // K ' 
100,   // K ( 
75,   // K ) 
100,   // K * 
100,   // K + 
100,   // K , 
100,   // K - 
72,   // K . 
100,   // K / 
100,   // K 0 
100,   // K 1 
100,   // K 2 
100,   // K 3 
100,   // K 4 
100,   // K 5 
87,   // K 6 
100,   // K 7 
100,   // K 8 
100,   // K 9 
100,   // K : 
100,   // K ; 
100,   // K < 
100,   // K = 
100,   // K > 
100,   // K ? 
91,   // K @ 
80,   // K A 
100,   // K B 
100,   // K C 
70,   // K D 
100,   // K E 
60,   // K F 
13,   // K G 
100,   // K H 
100,   // K I 
100,   // K J 
34,   // K K 
100,   // K L 
100,   // K M 
33,   // K N 
84,   // K O 
29,   // K P 
100,   // K Q 
63,   // K R 
100,   // K S 
100,   // K T 
100,   // K U 
100,   // K V 
64,   // K W 
100,   // K X 
100,   // K Y 
100,   // K Z 
100,   // K [ 
100,   // K \ 
100,   // K ] 
100,   // K ^ 
100,   // K _ 
100,   // K ` 
26,   // K a 
100,   // K b 
100,   // K c 
100,   // K d 
52,   // K e 
31,   // K f 
100,   // K g 
17,   // K h 
29,   // K i 
100,   // K j 
100,   // K k 
22,   // K l 
100,   // K m 
54,   // K n 
17,   // K o 
100,   // K p 
100,   // K q 
17,   // K r 
100,   // K s 
100,   // K t 
25,   // K u 
100,   // K v 
72,   // K w 
100,   // K x 
100,   // K y 
100,   // K z 
100,   // K { 
100,   // K | 
100,   // K } 
100,   // K ~ 
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
12,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
47,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
100,   // K  
48,   // K  
100,   // K  
100,   // K  
100,   // K  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
41, 
100,   // L ! 
100,   // L " 
100,   // L # 
100,   // L $ 
100,   // L % 
100,   // L & 
61,   // L ' 
100,   // L ( 
44,   // L ) 
100,   // L * 
100,   // L + 
100,   // L , 
90,   // L - 
48,   // L . 
100,   // L / 
100,   // L 0 
41,   // L 1 
81,   // L 2 
66,   // L 3 
100,   // L 4 
100,   // L 5 
100,   // L 6 
75,   // L 7 
100,   // L 8 
18,   // L 9 
100,   // L : 
100,   // L ; 
100,   // L < 
100,   // L = 
100,   // L > 
100,   // L ? 
100,   // L @ 
29,   // L A 
53,   // L B 
54,   // L C 
40,   // L D 
33,   // L E 
46,   // L F 
27,   // L G 
40,   // L H 
62,   // L I 
0,   // L J 
86,   // L K 
43,   // L L 
45,   // L M 
38,   // L N 
23,   // L O 
14,   // L P 
0,   // L Q 
54,   // L R 
47,   // L S 
70,   // L T 
32,   // L U 
28,   // L V 
16,   // L W 
0,   // L X 
19,   // L Y 
32,   // L Z 
100,   // L [ 
100,   // L \ 
100,   // L ] 
100,   // L ^ 
100,   // L _ 
100,   // L ` 
15,   // L a 
100,   // L b 
100,   // L c 
100,   // L d 
24,   // L e 
100,   // L f 
100,   // L g 
100,   // L h 
46,   // L i 
100,   // L j 
41,   // L k 
64,   // L l 
100,   // L m 
100,   // L n 
9,   // L o 
100,   // L p 
100,   // L q 
100,   // L r 
100,   // L s 
19,   // L t 
21,   // L u 
100,   // L v 
100,   // L w 
100,   // L x 
13,   // L y 
100,   // L z 
100,   // L { 
100,   // L | 
100,   // L } 
100,   // L ~ 
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
10,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
9,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
100,   // L  
32,   // L  
100,   // L  
100,   // L  
100,   // L  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
61, 
100,   // M ! 
100,   // M " 
100,   // M # 
100,   // M $ 
100,   // M % 
100,   // M & 
100,   // M ' 
100,   // M ( 
12,   // M ) 
100,   // M * 
100,   // M + 
63,   // M , 
74,   // M - 
27,   // M . 
100,   // M / 
100,   // M 0 
78,   // M 1 
42,   // M 2 
74,   // M 3 
35,   // M 4 
47,   // M 5 
63,   // M 6 
10,   // M 7 
100,   // M 8 
86,   // M 9 
100,   // M : 
100,   // M ; 
100,   // M < 
100,   // M = 
100,   // M > 
100,   // M ? 
100,   // M @ 
22,   // M A 
50,   // M B 
38,   // M C 
59,   // M D 
45,   // M E 
67,   // M F 
37,   // M G 
100,   // M H 
63,   // M I 
100,   // M J 
43,   // M K 
52,   // M L 
61,   // M M 
75,   // M N 
21,   // M O 
19,   // M P 
100,   // M Q 
47,   // M R 
73,   // M S 
75,   // M T 
65,   // M U 
100,   // M V 
19,   // M W 
100,   // M X 
50,   // M Y 
100,   // M Z 
100,   // M [ 
100,   // M \ 
100,   // M ] 
100,   // M ^ 
100,   // M _ 
100,   // M ` 
16,   // M a 
100,   // M b 
22,   // M c 
100,   // M d 
16,   // M e 
100,   // M f 
100,   // M g 
100,   // M h 
18,   // M i 
100,   // M j 
100,   // M k 
100,   // M l 
100,   // M m 
100,   // M n 
15,   // M o 
100,   // M p 
100,   // M q 
69,   // M r 
100,   // M s 
100,   // M t 
30,   // M u 
100,   // M v 
100,   // M w 
100,   // M x 
39,   // M y 
72,   // M z 
100,   // M { 
100,   // M | 
100,   // M } 
100,   // M ~ 
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
5,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
6,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
100,   // M  
10,   // M  
100,   // M  
100,   // M  
100,   // M  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
54, 
100,   // N ! 
100,   // N " 
100,   // N # 
100,   // N $ 
100,   // N % 
100,   // N & 
100,   // N ' 
100,   // N ( 
23,   // N ) 
100,   // N * 
100,   // N + 
100,   // N , 
63,   // N - 
90,   // N . 
100,   // N / 
93,   // N 0 
48,   // N 1 
33,   // N 2 
25,   // N 3 
11,   // N 4 
15,   // N 5 
29,   // N 6 
35,   // N 7 
6,   // N 8 
38,   // N 9 
100,   // N : 
100,   // N ; 
100,   // N < 
100,   // N = 
100,   // N > 
100,   // N ? 
100,   // N @ 
21,   // N A 
54,   // N B 
11,   // N C 
52,   // N D 
44,   // N E 
38,   // N F 
53,   // N G 
21,   // N H 
54,   // N I 
83,   // N J 
87,   // N K 
41,   // N L 
100,   // N M 
27,   // N N 
31,   // N O 
19,   // N P 
0,   // N Q 
17,   // N R 
56,   // N S 
41,   // N T 
69,   // N U 
61,   // N V 
9,   // N W 
15,   // N X 
7,   // N Y 
53,   // N Z 
100,   // N [ 
100,   // N \ 
100,   // N ] 
100,   // N ^ 
100,   // N _ 
100,   // N ` 
8,   // N a 
100,   // N b 
100,   // N c 
100,   // N d 
14,   // N e 
71,   // N f 
50,   // N g 
100,   // N h 
20,   // N i 
100,   // N j 
100,   // N k 
100,   // N l 
100,   // N m 
100,   // N n 
19,   // N o 
100,   // N p 
100,   // N q 
44,   // N r 
91,   // N s 
91,   // N t 
21,   // N u 
100,   // N v 
100,   // N w 
100,   // N x 
100,   // N y 
100,   // N z 
100,   // N { 
100,   // N | 
100,   // N } 
100,   // N ~ 
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
50,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
7,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
100,   // N  
12,   // N  
100,   // N  
100,   // N  
100,   // N  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
62, 
100,   // O ! 
100,   // O " 
100,   // O # 
100,   // O $ 
100,   // O % 
100,   // O & 
56,   // O ' 
100,   // O ( 
55,   // O ) 
100,   // O * 
100,   // O + 
100,   // O , 
90,   // O - 
37,   // O . 
100,   // O / 
100,   // O 0 
100,   // O 1 
100,   // O 2 
100,   // O 3 
100,   // O 4 
100,   // O 5 
100,   // O 6 
100,   // O 7 
100,   // O 8 
100,   // O 9 
89,   // O : 
100,   // O ; 
100,   // O < 
100,   // O = 
100,   // O > 
100,   // O ? 
100,   // O @ 
80,   // O A 
48,   // O B 
77,   // O C 
50,   // O D 
61,   // O E 
67,   // O F 
17,   // O G 
97,   // O H 
15,   // O I 
100,   // O J 
79,   // O K 
57,   // O L 
38,   // O M 
35,   // O N 
100,   // O O 
37,   // O P 
100,   // O Q 
37,   // O R 
73,   // O S 
18,   // O T 
3,   // O U 
13,   // O V 
100,   // O W 
50,   // O X 
100,   // O Y 
96,   // O Z 
100,   // O [ 
100,   // O \ 
100,   // O ] 
100,   // O ^ 
100,   // O _ 
100,   // O ` 
90,   // O a 
13,   // O b 
94,   // O c 
65,   // O d 
92,   // O e 
27,   // O f 
94,   // O g 
79,   // O h 
78,   // O i 
100,   // O j 
11,   // O k 
28,   // O l 
66,   // O m 
39,   // O n 
100,   // O o 
3,   // O p 
100,   // O q 
28,   // O r 
33,   // O s 
38,   // O t 
46,   // O u 
55,   // O v 
50,   // O w 
3,   // O x 
100,   // O y 
92,   // O z 
100,   // O { 
100,   // O | 
100,   // O } 
100,   // O ~ 
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
50,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100,   // O  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
22, 
100,   // P ! 
12,   // P " 
100,   // P # 
100,   // P $ 
100,   // P % 
100,   // P & 
100,   // P ' 
100,   // P ( 
16,   // P ) 
100,   // P * 
100,   // P + 
100,   // P , 
63,   // P - 
28,   // P . 
100,   // P / 
98,   // P 0 
53,   // P 1 
27,   // P 2 
9,   // P 3 
27,   // P 4 
5,   // P 5 
100,   // P 6 
36,   // P 7 
100,   // P 8 
22,   // P 9 
100,   // P : 
100,   // P ; 
100,   // P < 
100,   // P = 
100,   // P > 
100,   // P ? 
66,   // P @ 
15,   // P A 
30,   // P B 
25,   // P C 
3,   // P D 
34,   // P E 
76,   // P F 
19,   // P G 
17,   // P H 
41,   // P I 
25,   // P J 
100,   // P K 
16,   // P L 
33,   // P M 
16,   // P N 
23,   // P O 
38,   // P P 
0,   // P Q 
37,   // P R 
75,   // P S 
22,   // P T 
44,   // P U 
100,   // P V 
11,   // P W 
10,   // P X 
11,   // P Y 
11,   // P Z 
100,   // P [ 
100,   // P \ 
100,   // P ] 
100,   // P ^ 
100,   // P _ 
100,   // P ` 
13,   // P a 
100,   // P b 
100,   // P c 
93,   // P d 
28,   // P e 
15,   // P f 
100,   // P g 
23,   // P h 
58,   // P i 
4,   // P j 
63,   // P k 
18,   // P l 
100,   // P m 
100,   // P n 
18,   // P o 
100,   // P p 
100,   // P q 
5,   // P r 
58,   // P s 
100,   // P t 
45,   // P u 
100,   // P v 
100,   // P w 
100,   // P x 
100,   // P y 
100,   // P z 
100,   // P { 
100,   // P | 
100,   // P } 
100,   // P ~ 
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
12,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
46,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
100,   // P  
8,   // P  
100,   // P  
100,   // P  
100,   // P  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
11, 
100,   // Q ! 
100,   // Q " 
100,   // Q # 
100,   // Q $ 
100,   // Q % 
100,   // Q & 
100,   // Q ' 
100,   // Q ( 
100,   // Q ) 
100,   // Q * 
100,   // Q + 
100,   // Q , 
100,   // Q - 
100,   // Q . 
100,   // Q / 
100,   // Q 0 
100,   // Q 1 
100,   // Q 2 
100,   // Q 3 
100,   // Q 4 
100,   // Q 5 
100,   // Q 6 
100,   // Q 7 
100,   // Q 8 
100,   // Q 9 
100,   // Q : 
100,   // Q ; 
100,   // Q < 
100,   // Q = 
100,   // Q > 
100,   // Q ? 
100,   // Q @ 
0,   // Q A 
0,   // Q B 
100,   // Q C 
0,   // Q D 
25,   // Q E 
66,   // Q F 
6,   // Q G 
100,   // Q H 
100,   // Q I 
100,   // Q J 
100,   // Q K 
0,   // Q L 
100,   // Q M 
0,   // Q N 
100,   // Q O 
0,   // Q P 
0,   // Q Q 
0,   // Q R 
50,   // Q S 
0,   // Q T 
4,   // Q U 
100,   // Q V 
0,   // Q W 
0,   // Q X 
0,   // Q Y 
100,   // Q Z 
100,   // Q [ 
100,   // Q \ 
100,   // Q ] 
100,   // Q ^ 
100,   // Q _ 
100,   // Q ` 
100,   // Q a 
100,   // Q b 
100,   // Q c 
100,   // Q d 
100,   // Q e 
100,   // Q f 
100,   // Q g 
100,   // Q h 
31,   // Q i 
100,   // Q j 
100,   // Q k 
100,   // Q l 
100,   // Q m 
100,   // Q n 
100,   // Q o 
100,   // Q p 
100,   // Q q 
100,   // Q r 
100,   // Q s 
100,   // Q t 
0,   // Q u 
100,   // Q v 
100,   // Q w 
100,   // Q x 
100,   // Q y 
100,   // Q z 
100,   // Q { 
100,   // Q | 
100,   // Q } 
100,   // Q ~ 
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100,   // Q  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
48, 
100,   // R ! 
100,   // R " 
100,   // R # 
100,   // R $ 
100,   // R % 
100,   // R & 
76,   // R ' 
100,   // R ( 
10,   // R ) 
100,   // R * 
100,   // R + 
93,   // R , 
88,   // R - 
77,   // R . 
100,   // R / 
95,   // R 0 
47,   // R 1 
61,   // R 2 
34,   // R 3 
48,   // R 4 
27,   // R 5 
57,   // R 6 
26,   // R 7 
11,   // R 8 
66,   // R 9 
100,   // R : 
100,   // R ; 
100,   // R < 
100,   // R = 
100,   // R > 
100,   // R ? 
44,   // R @ 
25,   // R A 
49,   // R B 
24,   // R C 
32,   // R D 
44,   // R E 
53,   // R F 
42,   // R G 
81,   // R H 
35,   // R I 
57,   // R J 
55,   // R K 
51,   // R L 
40,   // R M 
47,   // R N 
43,   // R O 
49,   // R P 
0,   // R Q 
28,   // R R 
69,   // R S 
38,   // R T 
46,   // R U 
37,   // R V 
41,   // R W 
27,   // R X 
17,   // R Y 
61,   // R Z 
100,   // R [ 
100,   // R \ 
100,   // R ] 
100,   // R ^ 
100,   // R _ 
100,   // R ` 
43,   // R a 
100,   // R b 
100,   // R c 
4,   // R d 
20,   // R e 
100,   // R f 
100,   // R g 
37,   // R h 
38,   // R i 
100,   // R j 
100,   // R k 
100,   // R l 
100,   // R m 
100,   // R n 
29,   // R o 
100,   // R p 
100,   // R q 
100,   // R r 
100,   // R s 
100,   // R t 
16,   // R u 
100,   // R v 
100,   // R w 
100,   // R x 
70,   // R y 
100,   // R z 
100,   // R { 
100,   // R | 
100,   // R } 
100,   // R ~ 
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
36,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
25,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
100,   // R  
5,   // R  
100,   // R  
100,   // R  
100,   // R  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
57, 
0,   // S ! 
100,   // S " 
100,   // S # 
100,   // S $ 
100,   // S % 
100,   // S & 
100,   // S ' 
100,   // S ( 
73,   // S ) 
100,   // S * 
100,   // S + 
85,   // S , 
47,   // S - 
88,   // S . 
100,   // S / 
100,   // S 0 
60,   // S 1 
87,   // S 2 
86,   // S 3 
100,   // S 4 
100,   // S 5 
91,   // S 6 
76,   // S 7 
100,   // S 8 
100,   // S 9 
100,   // S : 
100,   // S ; 
100,   // S < 
100,   // S = 
100,   // S > 
100,   // S ? 
100,   // S @ 
13,   // S A 
73,   // S B 
85,   // S C 
65,   // S D 
50,   // S E 
79,   // S F 
77,   // S G 
54,   // S H 
83,   // S I 
86,   // S J 
68,   // S K 
68,   // S L 
49,   // S M 
23,   // S N 
64,   // S O 
15,   // S P 
100,   // S Q 
27,   // S R 
68,   // S S 
60,   // S T 
23,   // S U 
79,   // S V 
9,   // S W 
100,   // S X 
25,   // S Y 
66,   // S Z 
100,   // S [ 
100,   // S \ 
100,   // S ] 
100,   // S ^ 
100,   // S _ 
100,   // S ` 
36,   // S a 
100,   // S b 
14,   // S c 
100,   // S d 
35,   // S e 
98,   // S f 
100,   // S g 
35,   // S h 
48,   // S i 
6,   // S j 
42,   // S k 
56,   // S l 
79,   // S m 
96,   // S n 
29,   // S o 
9,   // S p 
10,   // S q 
100,   // S r 
100,   // S s 
11,   // S t 
29,   // S u 
15,   // S v 
66,   // S w 
100,   // S x 
12,   // S y 
43,   // S z 
100,   // S { 
100,   // S | 
100,   // S } 
100,   // S ~ 
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
44,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
10,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
100,   // S  
14,   // S  
100,   // S  
100,   // S  
100,   // S  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
47, 
100,   // T ! 
100,   // T " 
100,   // T # 
100,   // T $ 
100,   // T % 
75,   // T & 
92,   // T ' 
100,   // T ( 
69,   // T ) 
100,   // T * 
100,   // T + 
94,   // T , 
83,   // T - 
68,   // T . 
100,   // T / 
100,   // T 0 
100,   // T 1 
100,   // T 2 
100,   // T 3 
100,   // T 4 
100,   // T 5 
100,   // T 6 
100,   // T 7 
100,   // T 8 
100,   // T 9 
100,   // T : 
100,   // T ; 
100,   // T < 
100,   // T = 
100,   // T > 
100,   // T ? 
0,   // T @ 
30,   // T A 
26,   // T B 
31,   // T C 
32,   // T D 
59,   // T E 
73,   // T F 
100,   // T G 
30,   // T H 
51,   // T I 
35,   // T J 
100,   // T K 
39,   // T L 
82,   // T M 
45,   // T N 
23,   // T O 
38,   // T P 
0,   // T Q 
40,   // T R 
68,   // T S 
40,   // T T 
41,   // T U 
12,   // T V 
41,   // T W 
0,   // T X 
27,   // T Y 
100,   // T Z 
100,   // T [ 
100,   // T \ 
100,   // T ] 
100,   // T ^ 
100,   // T _ 
100,   // T ` 
17,   // T a 
100,   // T b 
100,   // T c 
100,   // T d 
16,   // T e 
100,   // T f 
100,   // T g 
5,   // T h 
41,   // T i 
100,   // T j 
100,   // T k 
100,   // T l 
100,   // T m 
100,   // T n 
18,   // T o 
100,   // T p 
100,   // T q 
21,   // T r 
15,   // T s 
100,   // T t 
44,   // T u 
100,   // T v 
52,   // T w 
100,   // T x 
4,   // T y 
100,   // T z 
100,   // T { 
100,   // T | 
100,   // T } 
100,   // T ~ 
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
75,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
22,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
30,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
100,   // T  
33,   // T  
100,   // T  
100,   // T  
100,   // T  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
44, 
100,   // U ! 
100,   // U " 
100,   // U # 
100,   // U $ 
100,   // U % 
100,   // U & 
80,   // U ' 
100,   // U ( 
12,   // U ) 
100,   // U * 
100,   // U + 
23,   // U , 
27,   // U - 
62,   // U . 
32,   // U / 
60,   // U 0 
100,   // U 1 
100,   // U 2 
100,   // U 3 
100,   // U 4 
87,   // U 5 
100,   // U 6 
100,   // U 7 
100,   // U 8 
100,   // U 9 
100,   // U : 
100,   // U ; 
100,   // U < 
100,   // U = 
100,   // U > 
100,   // U ? 
100,   // U @ 
33,   // U A 
40,   // U B 
54,   // U C 
45,   // U D 
34,   // U E 
80,   // U F 
58,   // U G 
60,   // U H 
26,   // U I 
100,   // U J 
91,   // U K 
53,   // U L 
52,   // U M 
65,   // U N 
0,   // U O 
52,   // U P 
100,   // U Q 
52,   // U R 
4,   // U S 
58,   // U T 
100,   // U U 
33,   // U V 
53,   // U W 
0,   // U X 
100,   // U Y 
100,   // U Z 
100,   // U [ 
100,   // U \ 
100,   // U ] 
100,   // U ^ 
100,   // U _ 
100,   // U ` 
100,   // U a 
100,   // U b 
100,   // U c 
79,   // U d 
100,   // U e 
9,   // U f 
100,   // U g 
20,   // U h 
100,   // U i 
100,   // U j 
25,   // U k 
47,   // U l 
17,   // U m 
11,   // U n 
100,   // U o 
37,   // U p 
100,   // U q 
39,   // U r 
32,   // U s 
45,   // U t 
100,   // U u 
100,   // U v 
100,   // U w 
100,   // U x 
100,   // U y 
100,   // U z 
100,   // U { 
100,   // U | 
100,   // U } 
100,   // U ~ 
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100,   // U  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
63, 
100,   // V ! 
100,   // V " 
100,   // V # 
100,   // V $ 
100,   // V % 
100,   // V & 
100,   // V ' 
100,   // V ( 
23,   // V ) 
100,   // V * 
100,   // V + 
82,   // V , 
64,   // V - 
92,   // V . 
100,   // V / 
100,   // V 0 
61,   // V 1 
16,   // V 2 
4,   // V 3 
7,   // V 4 
16,   // V 5 
25,   // V 6 
0,   // V 7 
41,   // V 8 
12,   // V 9 
100,   // V : 
100,   // V ; 
100,   // V < 
100,   // V = 
100,   // V > 
100,   // V ? 
0,   // V @ 
19,   // V A 
100,   // V B 
100,   // V C 
30,   // V D 
70,   // V E 
100,   // V F 
100,   // V G 
100,   // V H 
37,   // V I 
100,   // V J 
100,   // V K 
100,   // V L 
85,   // V M 
100,   // V N 
80,   // V O 
100,   // V P 
100,   // V Q 
5,   // V R 
100,   // V S 
100,   // V T 
100,   // V U 
100,   // V V 
45,   // V W 
100,   // V X 
100,   // V Y 
100,   // V Z 
100,   // V [ 
100,   // V \ 
100,   // V ] 
100,   // V ^ 
100,   // V _ 
100,   // V ` 
32,   // V a 
100,   // V b 
100,   // V c 
60,   // V d 
8,   // V e 
60,   // V f 
100,   // V g 
100,   // V h 
19,   // V i 
100,   // V j 
100,   // V k 
40,   // V l 
100,   // V m 
100,   // V n 
18,   // V o 
100,   // V p 
100,   // V q 
100,   // V r 
100,   // V s 
100,   // V t 
20,   // V u 
100,   // V v 
100,   // V w 
100,   // V x 
100,   // V y 
100,   // V z 
100,   // V { 
100,   // V | 
100,   // V } 
100,   // V ~ 
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
14,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100,   // V  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
71, 
100,   // W ! 
100,   // W " 
100,   // W # 
100,   // W $ 
100,   // W % 
100,   // W & 
100,   // W ' 
100,   // W ( 
100,   // W ) 
100,   // W * 
100,   // W + 
100,   // W , 
94,   // W - 
68,   // W . 
100,   // W / 
100,   // W 0 
4,   // W 1 
10,   // W 2 
12,   // W 3 
100,   // W 4 
25,   // W 5 
9,   // W 6 
11,   // W 7 
2,   // W 8 
8,   // W 9 
100,   // W : 
100,   // W ; 
100,   // W < 
100,   // W = 
100,   // W > 
100,   // W ? 
100,   // W @ 
75,   // W A 
100,   // W B 
9,   // W C 
100,   // W D 
83,   // W E 
78,   // W F 
100,   // W G 
50,   // W H 
85,   // W I 
55,   // W J 
100,   // W K 
100,   // W L 
41,   // W M 
100,   // W N 
96,   // W O 
35,   // W P 
100,   // W Q 
71,   // W R 
59,   // W S 
100,   // W T 
100,   // W U 
100,   // W V 
98,   // W W 
100,   // W X 
100,   // W Y 
100,   // W Z 
100,   // W [ 
100,   // W \ 
100,   // W ] 
100,   // W ^ 
100,   // W _ 
100,   // W ` 
33,   // W a 
100,   // W b 
100,   // W c 
100,   // W d 
22,   // W e 
100,   // W f 
100,   // W g 
50,   // W h 
22,   // W i 
100,   // W j 
100,   // W k 
57,   // W l 
100,   // W m 
100,   // W n 
17,   // W o 
100,   // W p 
100,   // W q 
87,   // W r 
100,   // W s 
100,   // W t 
47,   // W u 
100,   // W v 
100,   // W w 
100,   // W x 
6,   // W y 
100,   // W z 
100,   // W { 
100,   // W | 
100,   // W } 
100,   // W ~ 
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
25,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
9,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
100,   // W  
49,   // W  
100,   // W  
100,   // W  
100,   // W  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
100,   // X ! 
100,   // X " 
100,   // X # 
100,   // X $ 
100,   // X % 
100,   // X & 
100,   // X ' 
100,   // X ( 
100,   // X ) 
100,   // X * 
100,   // X + 
100,   // X , 
100,   // X - 
93,   // X . 
100,   // X / 
71,   // X 0 
100,   // X 1 
100,   // X 2 
100,   // X 3 
100,   // X 4 
0,   // X 5 
100,   // X 6 
27,   // X 7 
10,   // X 8 
30,   // X 9 
100,   // X : 
100,   // X ; 
100,   // X < 
100,   // X = 
100,   // X > 
100,   // X ? 
100,   // X @ 
75,   // X A 
40,   // X B 
100,   // X C 
100,   // X D 
30,   // X E 
0,   // X F 
100,   // X G 
100,   // X H 
100,   // X I 
100,   // X J 
100,   // X K 
0,   // X L 
100,   // X M 
100,   // X N 
100,   // X O 
6,   // X P 
100,   // X Q 
100,   // X R 
0,   // X S 
100,   // X T 
100,   // X U 
100,   // X V 
100,   // X W 
0,   // X X 
100,   // X Y 
0,   // X Z 
100,   // X [ 
100,   // X \ 
100,   // X ] 
100,   // X ^ 
100,   // X _ 
100,   // X ` 
30,   // X a 
100,   // X b 
100,   // X c 
100,   // X d 
21,   // X e 
100,   // X f 
100,   // X g 
100,   // X h 
14,   // X i 
100,   // X j 
100,   // X k 
100,   // X l 
100,   // X m 
100,   // X n 
53,   // X o 
100,   // X p 
100,   // X q 
100,   // X r 
100,   // X s 
100,   // X t 
100,   // X u 
100,   // X v 
100,   // X w 
100,   // X x 
100,   // X y 
100,   // X z 
100,   // X { 
100,   // X | 
100,   // X } 
100,   // X ~ 
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100,   // X  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
51, 
100,   // Y ! 
100,   // Y " 
100,   // Y # 
100,   // Y $ 
100,   // Y % 
100,   // Y & 
0,   // Y ' 
100,   // Y ( 
100,   // Y ) 
100,   // Y * 
100,   // Y + 
100,   // Y , 
88,   // Y - 
100,   // Y . 
100,   // Y / 
100,   // Y 0 
0,   // Y 1 
100,   // Y 2 
11,   // Y 3 
18,   // Y 4 
11,   // Y 5 
25,   // Y 6 
5,   // Y 7 
0,   // Y 8 
100,   // Y 9 
100,   // Y : 
100,   // Y ; 
100,   // Y < 
100,   // Y = 
100,   // Y > 
100,   // Y ? 
100,   // Y @ 
0,   // Y A 
100,   // Y B 
0,   // Y C 
100,   // Y D 
25,   // Y E 
100,   // Y F 
100,   // Y G 
100,   // Y H 
100,   // Y I 
100,   // Y J 
100,   // Y K 
50,   // Y L 
100,   // Y M 
20,   // Y N 
0,   // Y O 
100,   // Y P 
100,   // Y Q 
16,   // Y R 
84,   // Y S 
40,   // Y T 
100,   // Y U 
100,   // Y V 
100,   // Y W 
100,   // Y X 
100,   // Y Y 
100,   // Y Z 
100,   // Y [ 
100,   // Y \ 
100,   // Y ] 
100,   // Y ^ 
100,   // Y _ 
100,   // Y ` 
30,   // Y a 
100,   // Y b 
100,   // Y c 
100,   // Y d 
100,   // Y e 
100,   // Y f 
100,   // Y g 
100,   // Y h 
90,   // Y i 
100,   // Y j 
100,   // Y k 
100,   // Y l 
100,   // Y m 
100,   // Y n 
9,   // Y o 
100,   // Y p 
100,   // Y q 
100,   // Y r 
85,   // Y s 
100,   // Y t 
11,   // Y u 
33,   // Y v 
100,   // Y w 
100,   // Y x 
100,   // Y y 
100,   // Y z 
100,   // Y { 
100,   // Y | 
100,   // Y } 
100,   // Y ~ 
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100,   // Y  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
69, 
100,   // Z ! 
100,   // Z " 
100,   // Z # 
100,   // Z $ 
100,   // Z % 
100,   // Z & 
100,   // Z ' 
100,   // Z ( 
70,   // Z ) 
100,   // Z * 
100,   // Z + 
100,   // Z , 
98,   // Z - 
100,   // Z . 
90,   // Z / 
100,   // Z 0 
100,   // Z 1 
100,   // Z 2 
100,   // Z 3 
100,   // Z 4 
100,   // Z 5 
100,   // Z 6 
100,   // Z 7 
100,   // Z 8 
100,   // Z 9 
100,   // Z : 
100,   // Z ; 
100,   // Z < 
100,   // Z = 
100,   // Z > 
100,   // Z ? 
100,   // Z @ 
30,   // Z A 
79,   // Z B 
100,   // Z C 
7,   // Z D 
71,   // Z E 
100,   // Z F 
100,   // Z G 
100,   // Z H 
85,   // Z I 
100,   // Z J 
100,   // Z K 
100,   // Z L 
100,   // Z M 
100,   // Z N 
10,   // Z O 
100,   // Z P 
100,   // Z Q 
100,   // Z R 
100,   // Z S 
100,   // Z T 
100,   // Z U 
100,   // Z V 
100,   // Z W 
100,   // Z X 
100,   // Z Y 
28,   // Z Z 
100,   // Z [ 
100,   // Z \ 
100,   // Z ] 
100,   // Z ^ 
100,   // Z _ 
100,   // Z ` 
33,   // Z a 
100,   // Z b 
100,   // Z c 
100,   // Z d 
32,   // Z e 
100,   // Z f 
100,   // Z g 
100,   // Z h 
44,   // Z i 
100,   // Z j 
100,   // Z k 
71,   // Z l 
100,   // Z m 
100,   // Z n 
60,   // Z o 
100,   // Z p 
100,   // Z q 
100,   // Z r 
44,   // Z s 
100,   // Z t 
34,   // Z u 
100,   // Z v 
40,   // Z w 
100,   // Z x 
100,   // Z y 
100,   // Z z 
100,   // Z { 
100,   // Z | 
100,   // Z } 
100,   // Z ~ 
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
66,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
9,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
23,   // Z  
100,   // Z  
100,   // Z  
100,   // Z  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
8, 
100,   // [ ! 
100,   // [ " 
100,   // [ # 
100,   // [ $ 
100,   // [ % 
100,   // [ & 
100,   // [ ' 
100,   // [ ( 
100,   // [ ) 
100,   // [ * 
100,   // [ + 
100,   // [ , 
100,   // [ - 
100,   // [ . 
100,   // [ / 
100,   // [ 0 
100,   // [ 1 
100,   // [ 2 
22,   // [ 3 
50,   // [ 4 
100,   // [ 5 
100,   // [ 6 
100,   // [ 7 
100,   // [ 8 
100,   // [ 9 
100,   // [ : 
100,   // [ ; 
100,   // [ < 
100,   // [ = 
100,   // [ > 
100,   // [ ? 
100,   // [ @ 
100,   // [ A 
100,   // [ B 
100,   // [ C 
100,   // [ D 
100,   // [ E 
100,   // [ F 
100,   // [ G 
100,   // [ H 
100,   // [ I 
100,   // [ J 
100,   // [ K 
100,   // [ L 
100,   // [ M 
100,   // [ N 
100,   // [ O 
100,   // [ P 
100,   // [ Q 
100,   // [ R 
100,   // [ S 
100,   // [ T 
100,   // [ U 
100,   // [ V 
100,   // [ W 
100,   // [ X 
100,   // [ Y 
100,   // [ Z 
100,   // [ [ 
100,   // [ \ 
100,   // [ ] 
100,   // [ ^ 
100,   // [ _ 
100,   // [ ` 
100,   // [ a 
100,   // [ b 
100,   // [ c 
100,   // [ d 
100,   // [ e 
100,   // [ f 
100,   // [ g 
100,   // [ h 
100,   // [ i 
100,   // [ j 
100,   // [ k 
100,   // [ l 
100,   // [ m 
100,   // [ n 
100,   // [ o 
100,   // [ p 
100,   // [ q 
100,   // [ r 
100,   // [ s 
100,   // [ t 
100,   // [ u 
100,   // [ v 
100,   // [ w 
100,   // [ x 
100,   // [ y 
100,   // [ z 
100,   // [ { 
100,   // [ | 
100,   // [ } 
100,   // [ ~ 
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100,   // [  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
0, 
100,   // \ ! 
100,   // \ " 
100,   // \ # 
100,   // \ $ 
100,   // \ % 
100,   // \ & 
100,   // \ ' 
100,   // \ ( 
100,   // \ ) 
100,   // \ * 
100,   // \ + 
100,   // \ , 
100,   // \ - 
100,   // \ . 
100,   // \ / 
100,   // \ 0 
100,   // \ 1 
100,   // \ 2 
100,   // \ 3 
100,   // \ 4 
100,   // \ 5 
100,   // \ 6 
100,   // \ 7 
100,   // \ 8 
100,   // \ 9 
100,   // \ : 
100,   // \ ; 
100,   // \ < 
100,   // \ = 
100,   // \ > 
100,   // \ ? 
100,   // \ @ 
100,   // \ A 
100,   // \ B 
100,   // \ C 
100,   // \ D 
100,   // \ E 
100,   // \ F 
100,   // \ G 
100,   // \ H 
100,   // \ I 
100,   // \ J 
100,   // \ K 
100,   // \ L 
100,   // \ M 
100,   // \ N 
100,   // \ O 
100,   // \ P 
100,   // \ Q 
100,   // \ R 
100,   // \ S 
100,   // \ T 
100,   // \ U 
100,   // \ V 
100,   // \ W 
100,   // \ X 
100,   // \ Y 
100,   // \ Z 
100,   // \ [ 
100,   // \ \ 
100,   // \ ] 
100,   // \ ^ 
100,   // \ _ 
100,   // \ ` 
100,   // \ a 
100,   // \ b 
100,   // \ c 
100,   // \ d 
100,   // \ e 
100,   // \ f 
100,   // \ g 
100,   // \ h 
100,   // \ i 
100,   // \ j 
100,   // \ k 
100,   // \ l 
100,   // \ m 
100,   // \ n 
100,   // \ o 
100,   // \ p 
100,   // \ q 
100,   // \ r 
100,   // \ s 
100,   // \ t 
100,   // \ u 
100,   // \ v 
100,   // \ w 
100,   // \ x 
100,   // \ y 
100,   // \ z 
100,   // \ { 
100,   // \ | 
100,   // \ } 
100,   // \ ~ 
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100,   // \  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ] ! 
100,   // ] " 
100,   // ] # 
100,   // ] $ 
100,   // ] % 
100,   // ] & 
100,   // ] ' 
100,   // ] ( 
100,   // ] ) 
100,   // ] * 
100,   // ] + 
100,   // ] , 
100,   // ] - 
100,   // ] . 
100,   // ] / 
100,   // ] 0 
100,   // ] 1 
100,   // ] 2 
100,   // ] 3 
100,   // ] 4 
100,   // ] 5 
100,   // ] 6 
100,   // ] 7 
100,   // ] 8 
100,   // ] 9 
100,   // ] : 
100,   // ] ; 
100,   // ] < 
100,   // ] = 
100,   // ] > 
100,   // ] ? 
100,   // ] @ 
100,   // ] A 
100,   // ] B 
100,   // ] C 
100,   // ] D 
100,   // ] E 
100,   // ] F 
100,   // ] G 
100,   // ] H 
100,   // ] I 
100,   // ] J 
100,   // ] K 
100,   // ] L 
100,   // ] M 
100,   // ] N 
100,   // ] O 
100,   // ] P 
100,   // ] Q 
100,   // ] R 
100,   // ] S 
100,   // ] T 
100,   // ] U 
100,   // ] V 
100,   // ] W 
100,   // ] X 
100,   // ] Y 
100,   // ] Z 
100,   // ] [ 
100,   // ] \ 
100,   // ] ] 
100,   // ] ^ 
100,   // ] _ 
100,   // ] ` 
100,   // ] a 
100,   // ] b 
100,   // ] c 
100,   // ] d 
100,   // ] e 
100,   // ] f 
100,   // ] g 
100,   // ] h 
100,   // ] i 
100,   // ] j 
100,   // ] k 
100,   // ] l 
100,   // ] m 
100,   // ] n 
100,   // ] o 
100,   // ] p 
100,   // ] q 
100,   // ] r 
100,   // ] s 
100,   // ] t 
100,   // ] u 
100,   // ] v 
100,   // ] w 
100,   // ] x 
100,   // ] y 
100,   // ] z 
100,   // ] { 
100,   // ] | 
100,   // ] } 
100,   // ] ~ 
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100,   // ]  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
20, 
100,   // ^ ! 
100,   // ^ " 
100,   // ^ # 
100,   // ^ $ 
100,   // ^ % 
100,   // ^ & 
100,   // ^ ' 
100,   // ^ ( 
100,   // ^ ) 
100,   // ^ * 
100,   // ^ + 
100,   // ^ , 
100,   // ^ - 
100,   // ^ . 
100,   // ^ / 
100,   // ^ 0 
100,   // ^ 1 
100,   // ^ 2 
100,   // ^ 3 
100,   // ^ 4 
100,   // ^ 5 
100,   // ^ 6 
100,   // ^ 7 
100,   // ^ 8 
100,   // ^ 9 
100,   // ^ : 
100,   // ^ ; 
100,   // ^ < 
100,   // ^ = 
100,   // ^ > 
100,   // ^ ? 
100,   // ^ @ 
100,   // ^ A 
100,   // ^ B 
100,   // ^ C 
100,   // ^ D 
100,   // ^ E 
100,   // ^ F 
100,   // ^ G 
100,   // ^ H 
100,   // ^ I 
100,   // ^ J 
100,   // ^ K 
100,   // ^ L 
100,   // ^ M 
100,   // ^ N 
100,   // ^ O 
100,   // ^ P 
100,   // ^ Q 
100,   // ^ R 
100,   // ^ S 
100,   // ^ T 
100,   // ^ U 
100,   // ^ V 
100,   // ^ W 
100,   // ^ X 
100,   // ^ Y 
100,   // ^ Z 
100,   // ^ [ 
100,   // ^ \ 
100,   // ^ ] 
100,   // ^ ^ 
100,   // ^ _ 
100,   // ^ ` 
100,   // ^ a 
100,   // ^ b 
100,   // ^ c 
100,   // ^ d 
100,   // ^ e 
100,   // ^ f 
100,   // ^ g 
100,   // ^ h 
100,   // ^ i 
100,   // ^ j 
100,   // ^ k 
100,   // ^ l 
100,   // ^ m 
100,   // ^ n 
100,   // ^ o 
100,   // ^ p 
100,   // ^ q 
100,   // ^ r 
100,   // ^ s 
100,   // ^ t 
100,   // ^ u 
100,   // ^ v 
100,   // ^ w 
100,   // ^ x 
100,   // ^ y 
100,   // ^ z 
100,   // ^ { 
100,   // ^ | 
100,   // ^ } 
100,   // ^ ~ 
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100,   // ^  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // _ ! 
100,   // _ " 
100,   // _ # 
100,   // _ $ 
100,   // _ % 
100,   // _ & 
100,   // _ ' 
100,   // _ ( 
100,   // _ ) 
100,   // _ * 
100,   // _ + 
100,   // _ , 
100,   // _ - 
100,   // _ . 
100,   // _ / 
100,   // _ 0 
63,   // _ 1 
100,   // _ 2 
55,   // _ 3 
100,   // _ 4 
100,   // _ 5 
68,   // _ 6 
58,   // _ 7 
70,   // _ 8 
24,   // _ 9 
100,   // _ : 
100,   // _ ; 
100,   // _ < 
100,   // _ = 
100,   // _ > 
100,   // _ ? 
75,   // _ @ 
100,   // _ A 
93,   // _ B 
100,   // _ C 
100,   // _ D 
93,   // _ E 
81,   // _ F 
85,   // _ G 
100,   // _ H 
100,   // _ I 
100,   // _ J 
100,   // _ K 
100,   // _ L 
100,   // _ M 
100,   // _ N 
100,   // _ O 
100,   // _ P 
100,   // _ Q 
100,   // _ R 
100,   // _ S 
100,   // _ T 
100,   // _ U 
100,   // _ V 
100,   // _ W 
100,   // _ X 
100,   // _ Y 
100,   // _ Z 
100,   // _ [ 
100,   // _ \ 
100,   // _ ] 
100,   // _ ^ 
100,   // _ _ 
100,   // _ ` 
82,   // _ a 
70,   // _ b 
79,   // _ c 
77,   // _ d 
100,   // _ e 
82,   // _ f 
100,   // _ g 
92,   // _ h 
95,   // _ i 
100,   // _ j 
96,   // _ k 
77,   // _ l 
100,   // _ m 
87,   // _ n 
81,   // _ o 
86,   // _ p 
100,   // _ q 
100,   // _ r 
86,   // _ s 
100,   // _ t 
97,   // _ u 
72,   // _ v 
89,   // _ w 
50,   // _ x 
100,   // _ y 
100,   // _ z 
100,   // _ { 
100,   // _ | 
100,   // _ } 
100,   // _ ~ 
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100,   // _  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // ` ! 
100,   // ` " 
100,   // ` # 
100,   // ` $ 
100,   // ` % 
100,   // ` & 
100,   // ` ' 
100,   // ` ( 
100,   // ` ) 
100,   // ` * 
100,   // ` + 
100,   // ` , 
100,   // ` - 
100,   // ` . 
100,   // ` / 
100,   // ` 0 
100,   // ` 1 
100,   // ` 2 
100,   // ` 3 
100,   // ` 4 
100,   // ` 5 
100,   // ` 6 
100,   // ` 7 
100,   // ` 8 
100,   // ` 9 
100,   // ` : 
100,   // ` ; 
100,   // ` < 
100,   // ` = 
100,   // ` > 
100,   // ` ? 
100,   // ` @ 
100,   // ` A 
100,   // ` B 
100,   // ` C 
100,   // ` D 
100,   // ` E 
100,   // ` F 
100,   // ` G 
100,   // ` H 
100,   // ` I 
100,   // ` J 
100,   // ` K 
100,   // ` L 
100,   // ` M 
100,   // ` N 
100,   // ` O 
100,   // ` P 
100,   // ` Q 
100,   // ` R 
100,   // ` S 
100,   // ` T 
100,   // ` U 
100,   // ` V 
100,   // ` W 
100,   // ` X 
100,   // ` Y 
100,   // ` Z 
100,   // ` [ 
100,   // ` \ 
100,   // ` ] 
100,   // ` ^ 
100,   // ` _ 
100,   // ` ` 
100,   // ` a 
100,   // ` b 
100,   // ` c 
100,   // ` d 
100,   // ` e 
100,   // ` f 
100,   // ` g 
100,   // ` h 
100,   // ` i 
100,   // ` j 
100,   // ` k 
100,   // ` l 
100,   // ` m 
100,   // ` n 
100,   // ` o 
100,   // ` p 
100,   // ` q 
100,   // ` r 
100,   // ` s 
100,   // ` t 
100,   // ` u 
100,   // ` v 
100,   // ` w 
100,   // ` x 
100,   // ` y 
100,   // ` z 
100,   // ` { 
100,   // ` | 
100,   // ` } 
100,   // ` ~ 
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100,   // `  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
75, 
100,   // a ! 
65,   // a " 
100,   // a # 
100,   // a $ 
100,   // a % 
100,   // a & 
97,   // a ' 
100,   // a ( 
61,   // a ) 
100,   // a * 
100,   // a + 
48,   // a , 
75,   // a - 
43,   // a . 
98,   // a / 
100,   // a 0 
75,   // a 1 
74,   // a 2 
100,   // a 3 
98,   // a 4 
76,   // a 5 
87,   // a 6 
100,   // a 7 
100,   // a 8 
100,   // a 9 
100,   // a : 
95,   // a ; 
100,   // a < 
100,   // a = 
100,   // a > 
100,   // a ? 
37,   // a @ 
100,   // a A 
100,   // a B 
100,   // a C 
96,   // a D 
100,   // a E 
100,   // a F 
100,   // a G 
100,   // a H 
100,   // a I 
100,   // a J 
100,   // a K 
100,   // a L 
100,   // a M 
100,   // a N 
100,   // a O 
100,   // a P 
100,   // a Q 
100,   // a R 
100,   // a S 
100,   // a T 
100,   // a U 
100,   // a V 
94,   // a W 
68,   // a X 
100,   // a Y 
100,   // a Z 
100,   // a [ 
100,   // a \ 
100,   // a ] 
100,   // a ^ 
60,   // a _ 
100,   // a ` 
45,   // a a 
16,   // a b 
18,   // a c 
42,   // a d 
59,   // a e 
23,   // a f 
20,   // a g 
32,   // a h 
39,   // a i 
25,   // a j 
38,   // a k 
22,   // a l 
29,   // a m 
22,   // a n 
61,   // a o 
26,   // a p 
34,   // a q 
27,   // a r 
21,   // a s 
24,   // a t 
14,   // a u 
14,   // a v 
36,   // a w 
3,   // a x 
20,   // a y 
27,   // a z 
100,   // a { 
100,   // a | 
100,   // a } 
100,   // a ~ 
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
9,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100,   // a  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
49, 
100,   // b ! 
45,   // b " 
100,   // b # 
100,   // b $ 
100,   // b % 
100,   // b & 
100,   // b ' 
100,   // b ( 
100,   // b ) 
100,   // b * 
100,   // b + 
58,   // b , 
77,   // b - 
29,   // b . 
100,   // b / 
100,   // b 0 
51,   // b 1 
100,   // b 2 
100,   // b 3 
52,   // b 4 
100,   // b 5 
40,   // b 6 
100,   // b 7 
100,   // b 8 
71,   // b 9 
58,   // b : 
100,   // b ; 
100,   // b < 
100,   // b = 
100,   // b > 
100,   // b ? 
20,   // b @ 
100,   // b A 
100,   // b B 
100,   // b C 
100,   // b D 
100,   // b E 
100,   // b F 
100,   // b G 
0,   // b H 
100,   // b I 
100,   // b J 
100,   // b K 
100,   // b L 
100,   // b M 
100,   // b N 
100,   // b O 
100,   // b P 
100,   // b Q 
20,   // b R 
100,   // b S 
100,   // b T 
100,   // b U 
100,   // b V 
100,   // b W 
100,   // b X 
100,   // b Y 
100,   // b Z 
100,   // b [ 
100,   // b \ 
100,   // b ] 
100,   // b ^ 
86,   // b _ 
100,   // b ` 
23,   // b a 
36,   // b b 
66,   // b c 
68,   // b d 
9,   // b e 
66,   // b f 
21,   // b g 
39,   // b h 
32,   // b i 
4,   // b j 
55,   // b k 
22,   // b l 
76,   // b m 
82,   // b n 
30,   // b o 
54,   // b p 
100,   // b q 
32,   // b r 
18,   // b s 
31,   // b t 
12,   // b u 
52,   // b v 
19,   // b w 
100,   // b x 
11,   // b y 
13,   // b z 
100,   // b { 
100,   // b | 
100,   // b } 
100,   // b ~ 
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
30,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
34,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
100,   // b  
18,   // b  
100,   // b  
100,   // b  
100,   // b  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
78, 
100,   // c ! 
31,   // c " 
100,   // c # 
100,   // c $ 
100,   // c % 
100,   // c & 
100,   // c ' 
100,   // c ( 
92,   // c ) 
100,   // c * 
100,   // c + 
70,   // c , 
77,   // c - 
36,   // c . 
98,   // c / 
71,   // c 0 
100,   // c 1 
100,   // c 2 
100,   // c 3 
100,   // c 4 
100,   // c 5 
100,   // c 6 
100,   // c 7 
100,   // c 8 
34,   // c 9 
100,   // c : 
100,   // c ; 
100,   // c < 
100,   // c = 
100,   // c > 
100,   // c ? 
16,   // c @ 
90,   // c A 
35,   // c B 
12,   // c C 
41,   // c D 
100,   // c E 
100,   // c F 
44,   // c G 
100,   // c H 
100,   // c I 
100,   // c J 
69,   // c K 
100,   // c L 
100,   // c M 
42,   // c N 
100,   // c O 
53,   // c P 
100,   // c Q 
100,   // c R 
81,   // c S 
100,   // c T 
100,   // c U 
100,   // c V 
100,   // c W 
100,   // c X 
100,   // c Y 
100,   // c Z 
100,   // c [ 
100,   // c \ 
100,   // c ] 
100,   // c ^ 
71,   // c _ 
100,   // c ` 
36,   // c a 
83,   // c b 
47,   // c c 
83,   // c d 
30,   // c e 
100,   // c f 
93,   // c g 
5,   // c h 
47,   // c i 
62,   // c j 
24,   // c k 
82,   // c l 
100,   // c m 
82,   // c n 
8,   // c o 
81,   // c p 
19,   // c q 
70,   // c r 
68,   // c s 
57,   // c t 
47,   // c u 
93,   // c v 
83,   // c w 
96,   // c x 
35,   // c y 
73,   // c z 
100,   // c { 
100,   // c | 
100,   // c } 
100,   // c ~ 
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100,   // c  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
20, 
100,   // d ! 
24,   // d " 
100,   // d # 
100,   // d $ 
100,   // d % 
100,   // d & 
87,   // d ' 
100,   // d ( 
51,   // d ) 
100,   // d * 
100,   // d + 
38,   // d , 
81,   // d - 
63,   // d . 
88,   // d / 
86,   // d 0 
71,   // d 1 
100,   // d 2 
73,   // d 3 
64,   // d 4 
100,   // d 5 
100,   // d 6 
100,   // d 7 
100,   // d 8 
100,   // d 9 
100,   // d : 
100,   // d ; 
100,   // d < 
100,   // d = 
100,   // d > 
39,   // d ? 
93,   // d @ 
100,   // d A 
100,   // d B 
100,   // d C 
100,   // d D 
100,   // d E 
100,   // d F 
100,   // d G 
100,   // d H 
100,   // d I 
100,   // d J 
100,   // d K 
100,   // d L 
100,   // d M 
100,   // d N 
100,   // d O 
100,   // d P 
100,   // d Q 
58,   // d R 
66,   // d S 
100,   // d T 
100,   // d U 
100,   // d V 
100,   // d W 
100,   // d X 
100,   // d Y 
100,   // d Z 
100,   // d [ 
100,   // d \ 
100,   // d ] 
100,   // d ^ 
90,   // d _ 
100,   // d ` 
18,   // d a 
40,   // d b 
47,   // d c 
75,   // d d 
13,   // d e 
48,   // d f 
47,   // d g 
54,   // d h 
12,   // d i 
41,   // d j 
44,   // d k 
47,   // d l 
85,   // d m 
64,   // d n 
24,   // d o 
45,   // d p 
100,   // d q 
41,   // d r 
39,   // d s 
29,   // d t 
29,   // d u 
62,   // d v 
49,   // d w 
100,   // d x 
24,   // d y 
80,   // d z 
100,   // d { 
100,   // d | 
100,   // d } 
100,   // d ~ 
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
49,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
43,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
100,   // d  
23,   // d  
100,   // d  
100,   // d  
100,   // d  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
88,   // e ! 
30,   // e " 
100,   // e # 
100,   // e $ 
100,   // e % 
100,   // e & 
97,   // e ' 
100,   // e ( 
90,   // e ) 
100,   // e * 
100,   // e + 
36,   // e , 
85,   // e - 
42,   // e . 
94,   // e / 
95,   // e 0 
73,   // e 1 
83,   // e 2 
100,   // e 3 
75,   // e 4 
88,   // e 5 
82,   // e 6 
93,   // e 7 
84,   // e 8 
100,   // e 9 
62,   // e : 
90,   // e ; 
100,   // e < 
100,   // e = 
100,   // e > 
48,   // e ? 
16,   // e @ 
87,   // e A 
43,   // e B 
96,   // e C 
100,   // e D 
74,   // e E 
100,   // e F 
100,   // e G 
100,   // e H 
98,   // e I 
100,   // e J 
100,   // e K 
100,   // e L 
100,   // e M 
100,   // e N 
100,   // e O 
100,   // e P 
100,   // e Q 
98,   // e R 
100,   // e S 
100,   // e T 
100,   // e U 
100,   // e V 
90,   // e W 
100,   // e X 
100,   // e Y 
100,   // e Z 
100,   // e [ 
100,   // e \ 
100,   // e ] 
100,   // e ^ 
78,   // e _ 
100,   // e ` 
36,   // e a 
14,   // e b 
20,   // e c 
21,   // e d 
58,   // e e 
17,   // e f 
17,   // e g 
26,   // e h 
19,   // e i 
9,   // e j 
23,   // e k 
16,   // e l 
37,   // e m 
13,   // e n 
52,   // e o 
20,   // e p 
6,   // e q 
14,   // e r 
17,   // e s 
28,   // e t 
20,   // e u 
21,   // e v 
9,   // e w 
16,   // e x 
19,   // e y 
18,   // e z 
100,   // e { 
100,   // e | 
100,   // e } 
100,   // e ~ 
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
10,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
27,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
32,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
100,   // e  
71,   // e  
100,   // e  
100,   // e  
100,   // e  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
28, 
100,   // f ! 
60,   // f " 
100,   // f # 
100,   // f $ 
100,   // f % 
100,   // f & 
99,   // f ' 
100,   // f ( 
63,   // f ) 
100,   // f * 
100,   // f + 
48,   // f , 
91,   // f - 
67,   // f . 
100,   // f / 
100,   // f 0 
68,   // f 1 
100,   // f 2 
100,   // f 3 
100,   // f 4 
100,   // f 5 
100,   // f 6 
100,   // f 7 
67,   // f 8 
100,   // f 9 
73,   // f : 
100,   // f ; 
100,   // f < 
100,   // f = 
100,   // f > 
100,   // f ? 
44,   // f @ 
100,   // f A 
40,   // f B 
100,   // f C 
100,   // f D 
100,   // f E 
100,   // f F 
100,   // f G 
100,   // f H 
100,   // f I 
100,   // f J 
100,   // f K 
83,   // f L 
100,   // f M 
85,   // f N 
100,   // f O 
100,   // f P 
100,   // f Q 
100,   // f R 
100,   // f S 
100,   // f T 
100,   // f U 
100,   // f V 
100,   // f W 
100,   // f X 
100,   // f Y 
100,   // f Z 
100,   // f [ 
100,   // f \ 
100,   // f ] 
100,   // f ^ 
100,   // f _ 
100,   // f ` 
32,   // f a 
29,   // f b 
68,   // f c 
94,   // f d 
30,   // f e 
16,   // f f 
9,   // f g 
50,   // f h 
52,   // f i 
22,   // f j 
44,   // f k 
40,   // f l 
75,   // f m 
48,   // f n 
14,   // f o 
56,   // f p 
100,   // f q 
29,   // f r 
41,   // f s 
18,   // f t 
14,   // f u 
44,   // f v 
55,   // f w 
64,   // f x 
73,   // f y 
31,   // f z 
100,   // f { 
100,   // f | 
100,   // f } 
100,   // f ~ 
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
13,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
36,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
100,   // f  
4,   // f  
100,   // f  
100,   // f  
100,   // f  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
22, 
78,   // g ! 
42,   // g " 
100,   // g # 
100,   // g $ 
100,   // g % 
100,   // g & 
100,   // g ' 
100,   // g ( 
46,   // g ) 
100,   // g * 
100,   // g + 
46,   // g , 
78,   // g - 
37,   // g . 
94,   // g / 
77,   // g 0 
92,   // g 1 
100,   // g 2 
100,   // g 3 
85,   // g 4 
88,   // g 5 
100,   // g 6 
71,   // g 7 
100,   // g 8 
100,   // g 9 
36,   // g : 
100,   // g ; 
100,   // g < 
100,   // g = 
100,   // g > 
83,   // g ? 
67,   // g @ 
100,   // g A 
100,   // g B 
100,   // g C 
100,   // g D 
100,   // g E 
100,   // g F 
50,   // g G 
100,   // g H 
100,   // g I 
100,   // g J 
100,   // g K 
100,   // g L 
100,   // g M 
100,   // g N 
100,   // g O 
100,   // g P 
100,   // g Q 
100,   // g R 
100,   // g S 
100,   // g T 
100,   // g U 
100,   // g V 
100,   // g W 
100,   // g X 
100,   // g Y 
100,   // g Z 
100,   // g [ 
100,   // g \ 
100,   // g ] 
100,   // g ^ 
88,   // g _ 
100,   // g ` 
23,   // g a 
59,   // g b 
95,   // g c 
52,   // g d 
11,   // g e 
43,   // g f 
49,   // g g 
14,   // g h 
29,   // g i 
16,   // g j 
16,   // g k 
24,   // g l 
78,   // g m 
54,   // g n 
20,   // g o 
74,   // g p 
100,   // g q 
32,   // g r 
23,   // g s 
13,   // g t 
22,   // g u 
39,   // g v 
75,   // g w 
100,   // g x 
23,   // g y 
21,   // g z 
100,   // g { 
100,   // g | 
100,   // g } 
100,   // g ~ 
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
30,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
87,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
100,   // g  
22,   // g  
100,   // g  
100,   // g  
100,   // g  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
57,   // h ! 
45,   // h " 
100,   // h # 
100,   // h $ 
100,   // h % 
100,   // h & 
100,   // h ' 
100,   // h ( 
66,   // h ) 
100,   // h * 
100,   // h + 
36,   // h , 
74,   // h - 
59,   // h . 
99,   // h / 
97,   // h 0 
94,   // h 1 
100,   // h 2 
100,   // h 3 
100,   // h 4 
94,   // h 5 
100,   // h 6 
85,   // h 7 
100,   // h 8 
100,   // h 9 
84,   // h : 
100,   // h ; 
100,   // h < 
100,   // h = 
100,   // h > 
54,   // h ? 
66,   // h @ 
100,   // h A 
100,   // h B 
100,   // h C 
100,   // h D 
100,   // h E 
100,   // h F 
100,   // h G 
100,   // h H 
100,   // h I 
100,   // h J 
100,   // h K 
100,   // h L 
100,   // h M 
100,   // h N 
100,   // h O 
100,   // h P 
100,   // h Q 
100,   // h R 
100,   // h S 
100,   // h T 
100,   // h U 
100,   // h V 
100,   // h W 
100,   // h X 
100,   // h Y 
100,   // h Z 
100,   // h [ 
100,   // h \ 
100,   // h ] 
100,   // h ^ 
89,   // h _ 
100,   // h ` 
16,   // h a 
33,   // h b 
100,   // h c 
67,   // h d 
17,   // h e 
50,   // h f 
60,   // h g 
84,   // h h 
42,   // h i 
18,   // h j 
23,   // h k 
14,   // h l 
38,   // h m 
39,   // h n 
27,   // h o 
49,   // h p 
92,   // h q 
16,   // h r 
31,   // h s 
9,   // h t 
29,   // h u 
42,   // h v 
7,   // h w 
100,   // h x 
35,   // h y 
21,   // h z 
100,   // h { 
100,   // h | 
100,   // h } 
100,   // h ~ 
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
8,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
8,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
100,   // h  
32,   // h  
100,   // h  
100,   // h  
100,   // h  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
71, 
100,   // i ! 
90,   // i " 
100,   // i # 
100,   // i $ 
100,   // i % 
100,   // i & 
99,   // i ' 
100,   // i ( 
100,   // i ) 
100,   // i * 
100,   // i + 
96,   // i , 
88,   // i - 
79,   // i . 
100,   // i / 
100,   // i 0 
94,   // i 1 
95,   // i 2 
100,   // i 3 
100,   // i 4 
100,   // i 5 
100,   // i 6 
87,   // i 7 
100,   // i 8 
100,   // i 9 
98,   // i : 
97,   // i ; 
100,   // i < 
100,   // i = 
100,   // i > 
100,   // i ? 
28,   // i @ 
100,   // i A 
97,   // i B 
88,   // i C 
100,   // i D 
100,   // i E 
100,   // i F 
100,   // i G 
100,   // i H 
100,   // i I 
100,   // i J 
100,   // i K 
95,   // i L 
35,   // i M 
100,   // i N 
100,   // i O 
100,   // i P 
100,   // i Q 
100,   // i R 
96,   // i S 
100,   // i T 
100,   // i U 
100,   // i V 
100,   // i W 
100,   // i X 
100,   // i Y 
100,   // i Z 
100,   // i [ 
100,   // i \ 
100,   // i ] 
100,   // i ^ 
100,   // i _ 
100,   // i ` 
33,   // i a 
30,   // i b 
10,   // i c 
46,   // i d 
17,   // i e 
44,   // i f 
24,   // i g 
37,   // i h 
98,   // i i 
13,   // i j 
29,   // i k 
25,   // i l 
38,   // i m 
18,   // i n 
14,   // i o 
37,   // i p 
27,   // i q 
56,   // i r 
22,   // i s 
17,   // i t 
44,   // i u 
23,   // i v 
47,   // i w 
51,   // i x 
100,   // i y 
25,   // i z 
100,   // i { 
100,   // i | 
100,   // i } 
100,   // i ~ 
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
39,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
84,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
42,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100,   // i  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
30, 
100,   // j ! 
100,   // j " 
100,   // j # 
100,   // j $ 
100,   // j % 
100,   // j & 
100,   // j ' 
100,   // j ( 
100,   // j ) 
100,   // j * 
100,   // j + 
100,   // j , 
67,   // j - 
75,   // j . 
100,   // j / 
100,   // j 0 
100,   // j 1 
100,   // j 2 
100,   // j 3 
100,   // j 4 
100,   // j 5 
100,   // j 6 
100,   // j 7 
100,   // j 8 
100,   // j 9 
100,   // j : 
100,   // j ; 
100,   // j < 
100,   // j = 
100,   // j > 
100,   // j ? 
40,   // j @ 
100,   // j A 
100,   // j B 
100,   // j C 
100,   // j D 
100,   // j E 
100,   // j F 
100,   // j G 
100,   // j H 
100,   // j I 
100,   // j J 
100,   // j K 
100,   // j L 
100,   // j M 
100,   // j N 
100,   // j O 
100,   // j P 
100,   // j Q 
100,   // j R 
100,   // j S 
100,   // j T 
100,   // j U 
100,   // j V 
100,   // j W 
100,   // j X 
100,   // j Y 
100,   // j Z 
100,   // j [ 
100,   // j \ 
100,   // j ] 
100,   // j ^ 
83,   // j _ 
100,   // j ` 
26,   // j a 
35,   // j b 
66,   // j c 
55,   // j d 
10,   // j e 
75,   // j f 
100,   // j g 
62,   // j h 
51,   // j i 
13,   // j j 
40,   // j k 
70,   // j l 
51,   // j m 
100,   // j n 
14,   // j o 
28,   // j p 
100,   // j q 
97,   // j r 
82,   // j s 
97,   // j t 
11,   // j u 
65,   // j v 
42,   // j w 
100,   // j x 
50,   // j y 
100,   // j z 
100,   // j { 
100,   // j | 
100,   // j } 
100,   // j ~ 
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
3,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
34,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
100,   // j  
17,   // j  
100,   // j  
100,   // j  
100,   // j  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
64, 
100,   // k ! 
51,   // k " 
100,   // k # 
100,   // k $ 
100,   // k % 
100,   // k & 
100,   // k ' 
100,   // k ( 
31,   // k ) 
100,   // k * 
100,   // k + 
54,   // k , 
82,   // k - 
49,   // k . 
88,   // k / 
100,   // k 0 
79,   // k 1 
100,   // k 2 
60,   // k 3 
100,   // k 4 
100,   // k 5 
100,   // k 6 
100,   // k 7 
100,   // k 8 
50,   // k 9 
94,   // k : 
100,   // k ; 
100,   // k < 
100,   // k = 
100,   // k > 
75,   // k ? 
57,   // k @ 
100,   // k A 
100,   // k B 
100,   // k C 
100,   // k D 
100,   // k E 
100,   // k F 
100,   // k G 
100,   // k H 
100,   // k I 
100,   // k J 
100,   // k K 
100,   // k L 
100,   // k M 
100,   // k N 
100,   // k O 
100,   // k P 
100,   // k Q 
100,   // k R 
100,   // k S 
100,   // k T 
100,   // k U 
100,   // k V 
100,   // k W 
100,   // k X 
100,   // k Y 
100,   // k Z 
100,   // k [ 
100,   // k \ 
100,   // k ] 
100,   // k ^ 
71,   // k _ 
100,   // k ` 
29,   // k a 
76,   // k b 
100,   // k c 
91,   // k d 
33,   // k e 
3,   // k f 
41,   // k g 
50,   // k h 
63,   // k i 
100,   // k j 
47,   // k k 
31,   // k l 
70,   // k m 
77,   // k n 
28,   // k o 
71,   // k p 
100,   // k q 
45,   // k r 
54,   // k s 
27,   // k t 
25,   // k u 
57,   // k v 
54,   // k w 
100,   // k x 
22,   // k y 
15,   // k z 
100,   // k { 
100,   // k | 
100,   // k } 
100,   // k ~ 
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
43,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
5,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
100,   // k  
15,   // k  
100,   // k  
100,   // k  
100,   // k  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
36, 
100,   // l ! 
30,   // l " 
100,   // l # 
100,   // l $ 
100,   // l % 
100,   // l & 
96,   // l ' 
100,   // l ( 
79,   // l ) 
100,   // l * 
100,   // l + 
41,   // l , 
75,   // l - 
27,   // l . 
98,   // l / 
100,   // l 0 
98,   // l 1 
100,   // l 2 
77,   // l 3 
100,   // l 4 
100,   // l 5 
100,   // l 6 
76,   // l 7 
100,   // l 8 
100,   // l 9 
36,   // l : 
100,   // l ; 
100,   // l < 
100,   // l = 
100,   // l > 
100,   // l ? 
32,   // l @ 
100,   // l A 
100,   // l B 
100,   // l C 
100,   // l D 
100,   // l E 
100,   // l F 
100,   // l G 
100,   // l H 
100,   // l I 
100,   // l J 
100,   // l K 
100,   // l L 
100,   // l M 
100,   // l N 
100,   // l O 
100,   // l P 
100,   // l Q 
77,   // l R 
100,   // l S 
100,   // l T 
100,   // l U 
100,   // l V 
100,   // l W 
100,   // l X 
100,   // l Y 
100,   // l Z 
100,   // l [ 
100,   // l \ 
57,   // l ] 
100,   // l ^ 
89,   // l _ 
100,   // l ` 
20,   // l a 
11,   // l b 
44,   // l c 
16,   // l d 
28,   // l e 
20,   // l f 
27,   // l g 
60,   // l h 
22,   // l i 
90,   // l j 
27,   // l k 
12,   // l l 
49,   // l m 
62,   // l n 
35,   // l o 
40,   // l p 
8,   // l q 
76,   // l r 
19,   // l s 
29,   // l t 
27,   // l u 
26,   // l v 
94,   // l w 
95,   // l x 
15,   // l y 
30,   // l z 
100,   // l { 
100,   // l | 
100,   // l } 
100,   // l ~ 
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
7,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
27,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
100,   // l  
18,   // l  
100,   // l  
100,   // l  
100,   // l  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
52, 
100,   // m ! 
100,   // m " 
100,   // m # 
100,   // m $ 
100,   // m % 
100,   // m & 
100,   // m ' 
100,   // m ( 
100,   // m ) 
100,   // m * 
100,   // m + 
100,   // m , 
94,   // m - 
99,   // m . 
70,   // m / 
100,   // m 0 
100,   // m 1 
100,   // m 2 
100,   // m 3 
100,   // m 4 
100,   // m 5 
100,   // m 6 
100,   // m 7 
100,   // m 8 
100,   // m 9 
100,   // m : 
100,   // m ; 
100,   // m < 
100,   // m = 
100,   // m > 
85,   // m ? 
100,   // m @ 
100,   // m A 
100,   // m B 
100,   // m C 
100,   // m D 
100,   // m E 
100,   // m F 
100,   // m G 
100,   // m H 
100,   // m I 
100,   // m J 
100,   // m K 
100,   // m L 
100,   // m M 
100,   // m N 
60,   // m O 
100,   // m P 
100,   // m Q 
100,   // m R 
100,   // m S 
100,   // m T 
100,   // m U 
100,   // m V 
100,   // m W 
100,   // m X 
100,   // m Y 
100,   // m Z 
100,   // m [ 
100,   // m \ 
100,   // m ] 
100,   // m ^ 
100,   // m _ 
100,   // m ` 
22,   // m a 
13,   // m b 
97,   // m c 
100,   // m d 
27,   // m e 
94,   // m f 
100,   // m g 
100,   // m h 
29,   // m i 
69,   // m j 
84,   // m k 
78,   // m l 
27,   // m m 
72,   // m n 
35,   // m o 
15,   // m p 
100,   // m q 
100,   // m r 
70,   // m s 
74,   // m t 
32,   // m u 
70,   // m v 
64,   // m w 
32,   // m x 
29,   // m y 
75,   // m z 
100,   // m { 
100,   // m | 
100,   // m } 
100,   // m ~ 
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
31,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
5,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
100,   // m  
17,   // m  
100,   // m  
100,   // m  
100,   // m  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
18, 
93,   // n ! 
35,   // n " 
100,   // n # 
100,   // n $ 
100,   // n % 
75,   // n & 
99,   // n ' 
100,   // n ( 
70,   // n ) 
100,   // n * 
100,   // n + 
30,   // n , 
84,   // n - 
21,   // n . 
99,   // n / 
91,   // n 0 
80,   // n 1 
74,   // n 2 
82,   // n 3 
88,   // n 4 
81,   // n 5 
86,   // n 6 
100,   // n 7 
93,   // n 8 
87,   // n 9 
42,   // n : 
89,   // n ; 
100,   // n < 
100,   // n = 
100,   // n > 
27,   // n ? 
35,   // n @ 
100,   // n A 
98,   // n B 
100,   // n C 
98,   // n D 
100,   // n E 
100,   // n F 
100,   // n G 
100,   // n H 
100,   // n I 
100,   // n J 
95,   // n K 
100,   // n L 
100,   // n M 
100,   // n N 
100,   // n O 
100,   // n P 
100,   // n Q 
100,   // n R 
100,   // n S 
100,   // n T 
100,   // n U 
86,   // n V 
96,   // n W 
100,   // n X 
100,   // n Y 
100,   // n Z 
100,   // n [ 
100,   // n \ 
100,   // n ] 
100,   // n ^ 
62,   // n _ 
100,   // n ` 
23,   // n a 
18,   // n b 
45,   // n c 
12,   // n d 
15,   // n e 
20,   // n f 
10,   // n g 
35,   // n h 
26,   // n i 
18,   // n j 
20,   // n k 
30,   // n l 
41,   // n m 
24,   // n n 
23,   // n o 
57,   // n p 
17,   // n q 
68,   // n r 
26,   // n s 
15,   // n t 
23,   // n u 
15,   // n v 
24,   // n w 
98,   // n x 
57,   // n y 
12,   // n z 
100,   // n { 
100,   // n | 
100,   // n } 
100,   // n ~ 
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
96,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
17,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
10,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
100,   // n  
12,   // n  
100,   // n  
100,   // n  
100,   // n  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
62, 
100,   // o ! 
47,   // o " 
100,   // o # 
100,   // o $ 
100,   // o % 
100,   // o & 
99,   // o ' 
100,   // o ( 
100,   // o ) 
100,   // o * 
100,   // o + 
70,   // o , 
80,   // o - 
35,   // o . 
91,   // o / 
89,   // o 0 
86,   // o 1 
83,   // o 2 
94,   // o 3 
93,   // o 4 
96,   // o 5 
100,   // o 6 
98,   // o 7 
83,   // o 8 
100,   // o 9 
76,   // o : 
100,   // o ; 
100,   // o < 
100,   // o = 
100,   // o > 
100,   // o ? 
21,   // o @ 
100,   // o A 
100,   // o B 
100,   // o C 
100,   // o D 
100,   // o E 
100,   // o F 
100,   // o G 
71,   // o H 
100,   // o I 
100,   // o J 
100,   // o K 
97,   // o L 
99,   // o M 
100,   // o N 
100,   // o O 
100,   // o P 
100,   // o Q 
84,   // o R 
100,   // o S 
96,   // o T 
100,   // o U 
100,   // o V 
100,   // o W 
70,   // o X 
100,   // o Y 
100,   // o Z 
100,   // o [ 
100,   // o \ 
100,   // o ] 
100,   // o ^ 
85,   // o _ 
100,   // o ` 
59,   // o a 
20,   // o b 
12,   // o c 
24,   // o d 
67,   // o e 
21,   // o f 
38,   // o g 
33,   // o h 
75,   // o i 
24,   // o j 
40,   // o k 
17,   // o l 
14,   // o m 
14,   // o n 
54,   // o o 
13,   // o p 
58,   // o q 
21,   // o r 
36,   // o s 
28,   // o t 
42,   // o u 
14,   // o v 
7,   // o w 
34,   // o x 
24,   // o y 
14,   // o z 
100,   // o { 
100,   // o | 
100,   // o } 
100,   // o ~ 
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
7,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
57,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100,   // o  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
63, 
97,   // p ! 
54,   // p " 
100,   // p # 
100,   // p $ 
100,   // p % 
100,   // p & 
100,   // p ' 
100,   // p ( 
100,   // p ) 
100,   // p * 
100,   // p + 
99,   // p , 
82,   // p - 
50,   // p . 
97,   // p / 
100,   // p 0 
86,   // p 1 
64,   // p 2 
23,   // p 3 
100,   // p 4 
100,   // p 5 
38,   // p 6 
54,   // p 7 
100,   // p 8 
100,   // p 9 
0,   // p : 
100,   // p ; 
100,   // p < 
100,   // p = 
100,   // p > 
100,   // p ? 
10,   // p @ 
74,   // p A 
100,   // p B 
100,   // p C 
100,   // p D 
100,   // p E 
100,   // p F 
100,   // p G 
100,   // p H 
100,   // p I 
100,   // p J 
100,   // p K 
100,   // p L 
100,   // p M 
100,   // p N 
100,   // p O 
100,   // p P 
100,   // p Q 
100,   // p R 
100,   // p S 
100,   // p T 
100,   // p U 
100,   // p V 
100,   // p W 
100,   // p X 
100,   // p Y 
100,   // p Z 
100,   // p [ 
100,   // p \ 
100,   // p ] 
100,   // p ^ 
100,   // p _ 
100,   // p ` 
16,   // p a 
51,   // p b 
46,   // p c 
81,   // p d 
19,   // p e 
10,   // p f 
64,   // p g 
15,   // p h 
19,   // p i 
65,   // p j 
51,   // p k 
12,   // p l 
93,   // p m 
94,   // p n 
14,   // p o 
7,   // p p 
0,   // p q 
11,   // p r 
59,   // p s 
14,   // p t 
14,   // p u 
74,   // p v 
100,   // p w 
100,   // p x 
28,   // p y 
12,   // p z 
100,   // p { 
100,   // p | 
100,   // p } 
100,   // p ~ 
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
3,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
45,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
100,   // p  
22,   // p  
100,   // p  
100,   // p  
100,   // p  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
57, 
100,   // q ! 
100,   // q " 
100,   // q # 
100,   // q $ 
100,   // q % 
100,   // q & 
100,   // q ' 
100,   // q ( 
100,   // q ) 
100,   // q * 
100,   // q + 
50,   // q , 
50,   // q - 
0,   // q . 
100,   // q / 
100,   // q 0 
25,   // q 1 
100,   // q 2 
100,   // q 3 
100,   // q 4 
0,   // q 5 
100,   // q 6 
100,   // q 7 
100,   // q 8 
100,   // q 9 
100,   // q : 
100,   // q ; 
100,   // q < 
100,   // q = 
100,   // q > 
100,   // q ? 
0,   // q @ 
100,   // q A 
100,   // q B 
100,   // q C 
100,   // q D 
100,   // q E 
100,   // q F 
100,   // q G 
100,   // q H 
100,   // q I 
100,   // q J 
100,   // q K 
100,   // q L 
100,   // q M 
100,   // q N 
100,   // q O 
100,   // q P 
100,   // q Q 
100,   // q R 
100,   // q S 
100,   // q T 
100,   // q U 
100,   // q V 
100,   // q W 
100,   // q X 
100,   // q Y 
100,   // q Z 
100,   // q [ 
100,   // q \ 
100,   // q ] 
100,   // q ^ 
100,   // q _ 
100,   // q ` 
100,   // q a 
100,   // q b 
28,   // q c 
100,   // q d 
100,   // q e 
100,   // q f 
100,   // q g 
100,   // q h 
25,   // q i 
100,   // q j 
100,   // q k 
100,   // q l 
91,   // q m 
92,   // q n 
100,   // q o 
100,   // q p 
100,   // q q 
100,   // q r 
86,   // q s 
100,   // q t 
6,   // q u 
100,   // q v 
100,   // q w 
100,   // q x 
100,   // q y 
100,   // q z 
100,   // q { 
100,   // q | 
100,   // q } 
100,   // q ~ 
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100,   // q  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
17, 
67,   // r ! 
34,   // r " 
100,   // r # 
100,   // r $ 
100,   // r % 
100,   // r & 
99,   // r ' 
100,   // r ( 
66,   // r ) 
100,   // r * 
100,   // r + 
46,   // r , 
83,   // r - 
44,   // r . 
98,   // r / 
99,   // r 0 
98,   // r 1 
95,   // r 2 
100,   // r 3 
72,   // r 4 
100,   // r 5 
100,   // r 6 
100,   // r 7 
100,   // r 8 
90,   // r 9 
60,   // r : 
75,   // r ; 
100,   // r < 
100,   // r = 
77,   // r > 
58,   // r ? 
32,   // r @ 
100,   // r A 
89,   // r B 
94,   // r C 
95,   // r D 
100,   // r E 
94,   // r F 
100,   // r G 
100,   // r H 
100,   // r I 
100,   // r J 
100,   // r K 
100,   // r L 
90,   // r M 
100,   // r N 
100,   // r O 
89,   // r P 
100,   // r Q 
100,   // r R 
100,   // r S 
93,   // r T 
100,   // r U 
100,   // r V 
100,   // r W 
100,   // r X 
100,   // r Y 
100,   // r Z 
100,   // r [ 
100,   // r \ 
100,   // r ] 
100,   // r ^ 
93,   // r _ 
100,   // r ` 
23,   // r a 
15,   // r b 
19,   // r c 
12,   // r d 
28,   // r e 
17,   // r f 
19,   // r g 
19,   // r h 
34,   // r i 
21,   // r j 
15,   // r k 
20,   // r l 
35,   // r m 
38,   // r n 
17,   // r o 
24,   // r p 
36,   // r q 
65,   // r r 
19,   // r s 
22,   // r t 
21,   // r u 
21,   // r v 
27,   // r w 
81,   // r x 
12,   // r y 
22,   // r z 
100,   // r { 
100,   // r | 
100,   // r } 
100,   // r ~ 
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
12,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
77,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
10,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
100,   // r  
11,   // r  
100,   // r  
100,   // r  
100,   // r  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
100,   // s ! 
42,   // s " 
100,   // s # 
100,   // s $ 
100,   // s % 
100,   // s & 
99,   // s ' 
100,   // s ( 
96,   // s ) 
100,   // s * 
100,   // s + 
47,   // s , 
89,   // s - 
45,   // s . 
96,   // s / 
100,   // s 0 
81,   // s 1 
69,   // s 2 
100,   // s 3 
88,   // s 4 
100,   // s 5 
100,   // s 6 
97,   // s 7 
84,   // s 8 
90,   // s 9 
64,   // s : 
82,   // s ; 
100,   // s < 
100,   // s = 
100,   // s > 
82,   // s ? 
10,   // s @ 
100,   // s A 
97,   // s B 
100,   // s C 
100,   // s D 
100,   // s E 
100,   // s F 
100,   // s G 
100,   // s H 
100,   // s I 
100,   // s J 
100,   // s K 
100,   // s L 
100,   // s M 
100,   // s N 
100,   // s O 
100,   // s P 
100,   // s Q 
100,   // s R 
98,   // s S 
100,   // s T 
100,   // s U 
100,   // s V 
100,   // s W 
100,   // s X 
100,   // s Y 
100,   // s Z 
100,   // s [ 
100,   // s \ 
100,   // s ] 
100,   // s ^ 
86,   // s _ 
100,   // s ` 
24,   // s a 
12,   // s b 
7,   // s c 
59,   // s d 
20,   // s e 
53,   // s f 
10,   // s g 
36,   // s h 
21,   // s i 
21,   // s j 
27,   // s k 
33,   // s l 
27,   // s m 
59,   // s n 
24,   // s o 
12,   // s p 
14,   // s q 
47,   // s r 
22,   // s s 
17,   // s t 
24,   // s u 
23,   // s v 
35,   // s w 
87,   // s x 
17,   // s y 
38,   // s z 
100,   // s { 
100,   // s | 
100,   // s } 
100,   // s ~ 
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
29,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
10,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
100,   // s  
26,   // s  
100,   // s  
100,   // s  
100,   // s  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
20, 
93,   // t ! 
24,   // t " 
100,   // t # 
100,   // t $ 
100,   // t % 
94,   // t & 
97,   // t ' 
100,   // t ( 
54,   // t ) 
100,   // t * 
100,   // t + 
28,   // t , 
88,   // t - 
30,   // t . 
94,   // t / 
100,   // t 0 
95,   // t 1 
82,   // t 2 
100,   // t 3 
95,   // t 4 
83,   // t 5 
100,   // t 6 
100,   // t 7 
100,   // t 8 
91,   // t 9 
53,   // t : 
86,   // t ; 
100,   // t < 
100,   // t = 
100,   // t > 
39,   // t ? 
12,   // t @ 
100,   // t A 
100,   // t B 
100,   // t C 
100,   // t D 
100,   // t E 
100,   // t F 
100,   // t G 
100,   // t H 
98,   // t I 
100,   // t J 
100,   // t K 
100,   // t L 
100,   // t M 
100,   // t N 
100,   // t O 
100,   // t P 
100,   // t Q 
100,   // t R 
100,   // t S 
100,   // t T 
100,   // t U 
100,   // t V 
100,   // t W 
100,   // t X 
100,   // t Y 
100,   // t Z 
100,   // t [ 
100,   // t \ 
100,   // t ] 
100,   // t ^ 
91,   // t _ 
100,   // t ` 
20,   // t a 
14,   // t b 
62,   // t c 
50,   // t d 
14,   // t e 
38,   // t f 
33,   // t g 
19,   // t h 
23,   // t i 
37,   // t j 
27,   // t k 
26,   // t l 
28,   // t m 
60,   // t n 
25,   // t o 
2,   // t p 
15,   // t q 
28,   // t r 
13,   // t s 
14,   // t t 
30,   // t u 
23,   // t v 
7,   // t w 
68,   // t x 
18,   // t y 
11,   // t z 
100,   // t { 
100,   // t | 
100,   // t } 
100,   // t ~ 
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
9,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
12,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
100,   // t  
20,   // t  
100,   // t  
100,   // t  
100,   // t  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
48, 
100,   // u ! 
60,   // u " 
100,   // u # 
100,   // u $ 
100,   // u % 
100,   // u & 
100,   // u ' 
100,   // u ( 
100,   // u ) 
100,   // u * 
100,   // u + 
79,   // u , 
89,   // u - 
74,   // u . 
100,   // u / 
100,   // u 0 
76,   // u 1 
100,   // u 2 
100,   // u 3 
100,   // u 4 
100,   // u 5 
100,   // u 6 
100,   // u 7 
100,   // u 8 
100,   // u 9 
100,   // u : 
100,   // u ; 
100,   // u < 
100,   // u = 
100,   // u > 
100,   // u ? 
100,   // u @ 
100,   // u A 
100,   // u B 
100,   // u C 
100,   // u D 
100,   // u E 
100,   // u F 
100,   // u G 
100,   // u H 
100,   // u I 
100,   // u J 
100,   // u K 
100,   // u L 
100,   // u M 
100,   // u N 
100,   // u O 
100,   // u P 
100,   // u Q 
100,   // u R 
100,   // u S 
100,   // u T 
100,   // u U 
100,   // u V 
100,   // u W 
100,   // u X 
100,   // u Y 
100,   // u Z 
100,   // u [ 
100,   // u \ 
100,   // u ] 
100,   // u ^ 
100,   // u _ 
100,   // u ` 
30,   // u a 
22,   // u b 
14,   // u c 
35,   // u d 
26,   // u e 
10,   // u f 
30,   // u g 
78,   // u h 
50,   // u i 
48,   // u j 
26,   // u k 
31,   // u l 
33,   // u m 
8,   // u n 
85,   // u o 
18,   // u p 
57,   // u q 
17,   // u r 
15,   // u s 
23,   // u t 
40,   // u u 
18,   // u v 
59,   // u w 
26,   // u x 
59,   // u y 
39,   // u z 
100,   // u { 
100,   // u | 
100,   // u } 
100,   // u ~ 
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
5,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
36,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100,   // u  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
67, 
100,   // v ! 
100,   // v " 
100,   // v # 
100,   // v $ 
100,   // v % 
100,   // v & 
100,   // v ' 
100,   // v ( 
100,   // v ) 
100,   // v * 
100,   // v + 
77,   // v , 
79,   // v - 
37,   // v . 
100,   // v / 
83,   // v 0 
100,   // v 1 
100,   // v 2 
100,   // v 3 
100,   // v 4 
100,   // v 5 
100,   // v 6 
100,   // v 7 
100,   // v 8 
90,   // v 9 
100,   // v : 
100,   // v ; 
100,   // v < 
100,   // v = 
100,   // v > 
100,   // v ? 
66,   // v @ 
100,   // v A 
100,   // v B 
100,   // v C 
100,   // v D 
100,   // v E 
100,   // v F 
100,   // v G 
100,   // v H 
100,   // v I 
100,   // v J 
100,   // v K 
100,   // v L 
100,   // v M 
100,   // v N 
100,   // v O 
100,   // v P 
100,   // v Q 
100,   // v R 
100,   // v S 
100,   // v T 
100,   // v U 
100,   // v V 
100,   // v W 
100,   // v X 
100,   // v Y 
100,   // v Z 
100,   // v [ 
100,   // v \ 
100,   // v ] 
100,   // v ^ 
100,   // v _ 
100,   // v ` 
33,   // v a 
71,   // v b 
95,   // v c 
91,   // v d 
9,   // v e 
100,   // v f 
100,   // v g 
100,   // v h 
25,   // v i 
100,   // v j 
100,   // v k 
85,   // v l 
94,   // v m 
99,   // v n 
6,   // v o 
87,   // v p 
100,   // v q 
95,   // v r 
97,   // v s 
75,   // v t 
81,   // v u 
81,   // v v 
100,   // v w 
100,   // v x 
68,   // v y 
100,   // v z 
100,   // v { 
100,   // v | 
100,   // v } 
100,   // v ~ 
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
2,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100,   // v  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
17, 
100,   // w ! 
75,   // w " 
100,   // w # 
100,   // w $ 
100,   // w % 
100,   // w & 
100,   // w ' 
100,   // w ( 
100,   // w ) 
100,   // w * 
100,   // w + 
43,   // w , 
93,   // w - 
6,   // w . 
100,   // w / 
100,   // w 0 
91,   // w 1 
59,   // w 2 
100,   // w 3 
100,   // w 4 
100,   // w 5 
100,   // w 6 
100,   // w 7 
100,   // w 8 
100,   // w 9 
100,   // w : 
100,   // w ; 
100,   // w < 
100,   // w = 
100,   // w > 
100,   // w ? 
100,   // w @ 
100,   // w A 
100,   // w B 
100,   // w C 
100,   // w D 
100,   // w E 
100,   // w F 
100,   // w G 
100,   // w H 
100,   // w I 
100,   // w J 
100,   // w K 
100,   // w L 
100,   // w M 
100,   // w N 
100,   // w O 
100,   // w P 
100,   // w Q 
100,   // w R 
100,   // w S 
100,   // w T 
100,   // w U 
100,   // w V 
100,   // w W 
100,   // w X 
100,   // w Y 
100,   // w Z 
100,   // w [ 
100,   // w \ 
100,   // w ] 
100,   // w ^ 
100,   // w _ 
100,   // w ` 
14,   // w a 
80,   // w b 
100,   // w c 
100,   // w d 
15,   // w e 
100,   // w f 
100,   // w g 
75,   // w h 
18,   // w i 
38,   // w j 
60,   // w k 
99,   // w l 
100,   // w m 
81,   // w n 
10,   // w o 
100,   // w p 
100,   // w q 
100,   // w r 
55,   // w s 
100,   // w t 
18,   // w u 
100,   // w v 
1,   // w w 
68,   // w x 
100,   // w y 
100,   // w z 
100,   // w { 
100,   // w | 
100,   // w } 
100,   // w ~ 
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
8,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
10,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
100,   // w  
19,   // w  
100,   // w  
100,   // w  
100,   // w  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
19, 
100,   // x ! 
100,   // x " 
100,   // x # 
100,   // x $ 
100,   // x % 
100,   // x & 
100,   // x ' 
100,   // x ( 
100,   // x ) 
100,   // x * 
100,   // x + 
92,   // x , 
24,   // x - 
23,   // x . 
98,   // x / 
79,   // x 0 
50,   // x 1 
8,   // x 2 
20,   // x 3 
38,   // x 4 
100,   // x 5 
100,   // x 6 
100,   // x 7 
100,   // x 8 
100,   // x 9 
14,   // x : 
100,   // x ; 
100,   // x < 
100,   // x = 
100,   // x > 
100,   // x ? 
4,   // x @ 
100,   // x A 
100,   // x B 
100,   // x C 
100,   // x D 
100,   // x E 
100,   // x F 
100,   // x G 
100,   // x H 
100,   // x I 
100,   // x J 
100,   // x K 
100,   // x L 
100,   // x M 
100,   // x N 
100,   // x O 
100,   // x P 
100,   // x Q 
100,   // x R 
100,   // x S 
100,   // x T 
100,   // x U 
100,   // x V 
100,   // x W 
100,   // x X 
100,   // x Y 
100,   // x Z 
100,   // x [ 
100,   // x \ 
100,   // x ] 
100,   // x ^ 
84,   // x _ 
100,   // x ` 
21,   // x a 
27,   // x b 
7,   // x c 
100,   // x d 
38,   // x e 
10,   // x f 
85,   // x g 
21,   // x h 
28,   // x i 
100,   // x j 
32,   // x k 
65,   // x l 
65,   // x m 
78,   // x n 
63,   // x o 
2,   // x p 
0,   // x q 
32,   // x r 
61,   // x s 
12,   // x t 
6,   // x u 
100,   // x v 
94,   // x w 
77,   // x x 
6,   // x y 
68,   // x z 
100,   // x { 
100,   // x | 
100,   // x } 
100,   // x ~ 
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100,   // x  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
30, 
100,   // y ! 
27,   // y " 
100,   // y # 
100,   // y $ 
100,   // y % 
100,   // y & 
86,   // y ' 
100,   // y ( 
51,   // y ) 
100,   // y * 
100,   // y + 
18,   // y , 
40,   // y - 
22,   // y . 
86,   // y / 
54,   // y 0 
87,   // y 1 
70,   // y 2 
100,   // y 3 
60,   // y 4 
78,   // y 5 
63,   // y 6 
100,   // y 7 
80,   // y 8 
100,   // y 9 
25,   // y : 
100,   // y ; 
100,   // y < 
100,   // y = 
100,   // y > 
0,   // y ? 
7,   // y @ 
100,   // y A 
100,   // y B 
100,   // y C 
100,   // y D 
100,   // y E 
100,   // y F 
100,   // y G 
100,   // y H 
100,   // y I 
100,   // y J 
100,   // y K 
100,   // y L 
100,   // y M 
100,   // y N 
100,   // y O 
100,   // y P 
100,   // y Q 
100,   // y R 
100,   // y S 
100,   // y T 
100,   // y U 
100,   // y V 
100,   // y W 
100,   // y X 
100,   // y Y 
100,   // y Z 
100,   // y [ 
100,   // y \ 
100,   // y ] 
100,   // y ^ 
51,   // y _ 
100,   // y ` 
30,   // y a 
21,   // y b 
13,   // y c 
14,   // y d 
24,   // y e 
54,   // y f 
32,   // y g 
73,   // y h 
58,   // y i 
37,   // y j 
46,   // y k 
27,   // y l 
9,   // y m 
32,   // y n 
26,   // y o 
4,   // y p 
100,   // y q 
20,   // y r 
22,   // y s 
23,   // y t 
77,   // y u 
51,   // y v 
29,   // y w 
30,   // y x 
62,   // y y 
54,   // y z 
100,   // y { 
100,   // y | 
100,   // y } 
100,   // y ~ 
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100,   // y  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
39, 
32,   // z ! 
19,   // z " 
100,   // z # 
100,   // z $ 
100,   // z % 
100,   // z & 
100,   // z ' 
86,   // z ( 
64,   // z ) 
100,   // z * 
100,   // z + 
39,   // z , 
80,   // z - 
66,   // z . 
100,   // z / 
100,   // z 0 
100,   // z 1 
68,   // z 2 
100,   // z 3 
100,   // z 4 
100,   // z 5 
100,   // z 6 
100,   // z 7 
100,   // z 8 
87,   // z 9 
45,   // z : 
72,   // z ; 
100,   // z < 
100,   // z = 
100,   // z > 
100,   // z ? 
23,   // z @ 
100,   // z A 
100,   // z B 
100,   // z C 
100,   // z D 
100,   // z E 
100,   // z F 
50,   // z G 
100,   // z H 
100,   // z I 
100,   // z J 
100,   // z K 
100,   // z L 
100,   // z M 
100,   // z N 
100,   // z O 
100,   // z P 
100,   // z Q 
100,   // z R 
100,   // z S 
100,   // z T 
100,   // z U 
100,   // z V 
100,   // z W 
100,   // z X 
100,   // z Y 
100,   // z Z 
100,   // z [ 
100,   // z \ 
100,   // z ] 
100,   // z ^ 
80,   // z _ 
100,   // z ` 
39,   // z a 
18,   // z b 
78,   // z c 
36,   // z d 
16,   // z e 
27,   // z f 
54,   // z g 
38,   // z h 
26,   // z i 
100,   // z j 
17,   // z k 
17,   // z l 
41,   // z m 
65,   // z n 
60,   // z o 
35,   // z p 
100,   // z q 
90,   // z r 
67,   // z s 
13,   // z t 
10,   // z u 
39,   // z v 
7,   // z w 
100,   // z x 
34,   // z y 
63,   // z z 
100,   // z { 
100,   // z | 
100,   // z } 
100,   // z ~ 
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
12,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
19,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
100,   // z  
26,   // z  
100,   // z  
100,   // z  
100,   // z  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
16, 
100,   // { ! 
100,   // { " 
100,   // { # 
100,   // { $ 
100,   // { % 
100,   // { & 
100,   // { ' 
100,   // { ( 
100,   // { ) 
100,   // { * 
100,   // { + 
100,   // { , 
100,   // { - 
100,   // { . 
100,   // { / 
100,   // { 0 
100,   // { 1 
100,   // { 2 
100,   // { 3 
100,   // { 4 
100,   // { 5 
100,   // { 6 
100,   // { 7 
100,   // { 8 
100,   // { 9 
100,   // { : 
100,   // { ; 
100,   // { < 
100,   // { = 
100,   // { > 
100,   // { ? 
100,   // { @ 
100,   // { A 
100,   // { B 
100,   // { C 
100,   // { D 
100,   // { E 
100,   // { F 
100,   // { G 
100,   // { H 
100,   // { I 
100,   // { J 
100,   // { K 
100,   // { L 
100,   // { M 
100,   // { N 
100,   // { O 
100,   // { P 
100,   // { Q 
100,   // { R 
100,   // { S 
100,   // { T 
100,   // { U 
100,   // { V 
100,   // { W 
100,   // { X 
100,   // { Y 
100,   // { Z 
100,   // { [ 
100,   // { \ 
100,   // { ] 
100,   // { ^ 
100,   // { _ 
100,   // { ` 
100,   // { a 
100,   // { b 
100,   // { c 
100,   // { d 
100,   // { e 
100,   // { f 
100,   // { g 
100,   // { h 
100,   // { i 
100,   // { j 
100,   // { k 
100,   // { l 
100,   // { m 
100,   // { n 
100,   // { o 
100,   // { p 
100,   // { q 
100,   // { r 
100,   // { s 
100,   // { t 
100,   // { u 
100,   // { v 
100,   // { w 
100,   // { x 
100,   // { y 
100,   // { z 
100,   // { { 
100,   // { | 
100,   // { } 
100,   // { ~ 
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100,   // {  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   // | ! 
100,   // | " 
100,   // | # 
100,   // | $ 
100,   // | % 
100,   // | & 
100,   // | ' 
100,   // | ( 
100,   // | ) 
100,   // | * 
100,   // | + 
100,   // | , 
100,   // | - 
100,   // | . 
100,   // | / 
100,   // | 0 
100,   // | 1 
100,   // | 2 
100,   // | 3 
100,   // | 4 
100,   // | 5 
100,   // | 6 
100,   // | 7 
100,   // | 8 
100,   // | 9 
100,   // | : 
100,   // | ; 
100,   // | < 
100,   // | = 
100,   // | > 
100,   // | ? 
100,   // | @ 
100,   // | A 
100,   // | B 
100,   // | C 
100,   // | D 
100,   // | E 
100,   // | F 
100,   // | G 
100,   // | H 
100,   // | I 
100,   // | J 
100,   // | K 
100,   // | L 
100,   // | M 
100,   // | N 
100,   // | O 
100,   // | P 
100,   // | Q 
100,   // | R 
100,   // | S 
100,   // | T 
100,   // | U 
100,   // | V 
100,   // | W 
100,   // | X 
100,   // | Y 
100,   // | Z 
100,   // | [ 
100,   // | \ 
100,   // | ] 
100,   // | ^ 
100,   // | _ 
100,   // | ` 
100,   // | a 
100,   // | b 
100,   // | c 
100,   // | d 
100,   // | e 
100,   // | f 
100,   // | g 
100,   // | h 
100,   // | i 
100,   // | j 
100,   // | k 
100,   // | l 
100,   // | m 
100,   // | n 
100,   // | o 
100,   // | p 
100,   // | q 
100,   // | r 
100,   // | s 
100,   // | t 
100,   // | u 
100,   // | v 
100,   // | w 
100,   // | x 
100,   // | y 
100,   // | z 
100,   // | { 
100,   // | | 
100,   // | } 
100,   // | ~ 
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100,   // |  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
82, 
100,   // } ! 
100,   // } " 
100,   // } # 
100,   // } $ 
100,   // } % 
100,   // } & 
100,   // } ' 
100,   // } ( 
100,   // } ) 
100,   // } * 
100,   // } + 
100,   // } , 
100,   // } - 
100,   // } . 
100,   // } / 
100,   // } 0 
100,   // } 1 
100,   // } 2 
100,   // } 3 
100,   // } 4 
100,   // } 5 
100,   // } 6 
100,   // } 7 
100,   // } 8 
100,   // } 9 
100,   // } : 
100,   // } ; 
100,   // } < 
100,   // } = 
100,   // } > 
100,   // } ? 
100,   // } @ 
100,   // } A 
100,   // } B 
100,   // } C 
100,   // } D 
100,   // } E 
100,   // } F 
100,   // } G 
100,   // } H 
100,   // } I 
100,   // } J 
100,   // } K 
100,   // } L 
100,   // } M 
100,   // } N 
100,   // } O 
100,   // } P 
100,   // } Q 
100,   // } R 
100,   // } S 
100,   // } T 
100,   // } U 
100,   // } V 
100,   // } W 
100,   // } X 
100,   // } Y 
100,   // } Z 
100,   // } [ 
100,   // } \ 
100,   // } ] 
100,   // } ^ 
100,   // } _ 
100,   // } ` 
100,   // } a 
100,   // } b 
100,   // } c 
100,   // } d 
100,   // } e 
100,   // } f 
100,   // } g 
100,   // } h 
100,   // } i 
100,   // } j 
100,   // } k 
100,   // } l 
100,   // } m 
100,   // } n 
100,   // } o 
100,   // } p 
100,   // } q 
100,   // } r 
100,   // } s 
100,   // } t 
100,   // } u 
100,   // } v 
100,   // } w 
100,   // } x 
100,   // } y 
100,   // } z 
100,   // } { 
100,   // } | 
100,   // } } 
100,   // } ~ 
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100,   // }  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
14, 
100,   // ~ ! 
100,   // ~ " 
100,   // ~ # 
100,   // ~ $ 
100,   // ~ % 
100,   // ~ & 
100,   // ~ ' 
100,   // ~ ( 
100,   // ~ ) 
100,   // ~ * 
100,   // ~ + 
100,   // ~ , 
100,   // ~ - 
100,   // ~ . 
100,   // ~ / 
100,   // ~ 0 
100,   // ~ 1 
100,   // ~ 2 
100,   // ~ 3 
100,   // ~ 4 
100,   // ~ 5 
100,   // ~ 6 
100,   // ~ 7 
100,   // ~ 8 
100,   // ~ 9 
100,   // ~ : 
100,   // ~ ; 
100,   // ~ < 
100,   // ~ = 
100,   // ~ > 
100,   // ~ ? 
100,   // ~ @ 
100,   // ~ A 
100,   // ~ B 
100,   // ~ C 
100,   // ~ D 
100,   // ~ E 
100,   // ~ F 
100,   // ~ G 
100,   // ~ H 
100,   // ~ I 
100,   // ~ J 
100,   // ~ K 
100,   // ~ L 
100,   // ~ M 
100,   // ~ N 
100,   // ~ O 
100,   // ~ P 
100,   // ~ Q 
100,   // ~ R 
100,   // ~ S 
100,   // ~ T 
100,   // ~ U 
100,   // ~ V 
100,   // ~ W 
100,   // ~ X 
100,   // ~ Y 
100,   // ~ Z 
100,   // ~ [ 
100,   // ~ \ 
100,   // ~ ] 
100,   // ~ ^ 
100,   // ~ _ 
100,   // ~ ` 
100,   // ~ a 
100,   // ~ b 
100,   // ~ c 
100,   // ~ d 
100,   // ~ e 
100,   // ~ f 
100,   // ~ g 
100,   // ~ h 
100,   // ~ i 
100,   // ~ j 
100,   // ~ k 
100,   // ~ l 
100,   // ~ m 
100,   // ~ n 
100,   // ~ o 
100,   // ~ p 
100,   // ~ q 
100,   // ~ r 
100,   // ~ s 
100,   // ~ t 
100,   // ~ u 
100,   // ~ v 
100,   // ~ w 
100,   // ~ x 
100,   // ~ y 
100,   // ~ z 
100,   // ~ { 
100,   // ~ | 
100,   // ~ } 
100,   // ~ ~ 
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100,   // ~  
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
21, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
0,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
16, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
52,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
16,   //  f 
6,   //  g 
3,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
38,   //  m 
10,   //  n 
100,   //  o 
0,   //  p 
100,   //  q 
5,   //  r 
100,   //  s 
28,   //  t 
11,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
39, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
0,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
60,   //  S 
7,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
5,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
5,   //  k 
15,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
53,   //  r 
2,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
17, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
85,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
2,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
33,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
19, 
100,   //  ! 
12,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
22,   //  , 
100,   //  - 
40,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
52,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
42,   //  a 
5,   //  b 
17,   //  c 
81,   //  d 
7,   //  e 
28,   //  f 
20,   //  g 
52,   //  h 
14,   //  i 
100,   //  j 
40,   //  k 
5,   //  l 
59,   //  m 
17,   //  n 
86,   //  o 
48,   //  p 
100,   //  q 
82,   //  r 
21,   //  s 
10,   //  t 
31,   //  u 
11,   //  v 
31,   //  w 
100,   //  x 
100,   //  y 
24,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
8,   //  c 
15,   //  d 
100,   //  e 
9,   //  f 
16,   //  g 
13,   //  h 
18,   //  i 
100,   //  j 
95,   //  k 
18,   //  l 
25,   //  m 
12,   //  n 
25,   //  o 
65,   //  p 
100,   //  q 
12,   //  r 
14,   //  s 
23,   //  t 
9,   //  u 
100,   //  v 
100,   //  w 
80,   //  x 
100,   //  y 
94,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
8,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
77, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
54,   //  b 
9,   //  c 
31,   //  d 
100,   //  e 
12,   //  f 
13,   //  g 
11,   //  h 
100,   //  i 
100,   //  j 
46,   //  k 
15,   //  l 
24,   //  m 
8,   //  n 
100,   //  o 
5,   //  p 
100,   //  q 
11,   //  r 
17,   //  s 
14,   //  t 
100,   //  u 
4,   //  v 
4,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
1,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
92, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
7,   //  b 
5,   //  c 
23,   //  d 
100,   //  e 
31,   //  f 
30,   //  g 
12,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
33,   //  l 
20,   //  m 
12,   //  n 
100,   //  o 
37,   //  p 
100,   //  q 
7,   //  r 
18,   //  s 
32,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
29,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100, 
100,   //  ! 
100,   //  " 
100,   //  # 
100,   //  $ 
100,   //  % 
100,   //  & 
100,   //  ' 
100,   //  ( 
100,   //  ) 
100,   //  * 
100,   //  + 
100,   //  , 
100,   //  - 
100,   //  . 
100,   //  / 
100,   //  0 
100,   //  1 
100,   //  2 
100,   //  3 
100,   //  4 
100,   //  5 
100,   //  6 
100,   //  7 
100,   //  8 
100,   //  9 
100,   //  : 
100,   //  ; 
100,   //  < 
100,   //  = 
100,   //  > 
100,   //  ? 
100,   //  @ 
100,   //  A 
100,   //  B 
100,   //  C 
100,   //  D 
100,   //  E 
100,   //  F 
100,   //  G 
100,   //  H 
100,   //  I 
100,   //  J 
100,   //  K 
100,   //  L 
100,   //  M 
100,   //  N 
100,   //  O 
100,   //  P 
100,   //  Q 
100,   //  R 
100,   //  S 
100,   //  T 
100,   //  U 
100,   //  V 
100,   //  W 
100,   //  X 
100,   //  Y 
100,   //  Z 
100,   //  [ 
100,   //  \ 
100,   //  ] 
100,   //  ^ 
100,   //  _ 
100,   //  ` 
100,   //  a 
100,   //  b 
100,   //  c 
100,   //  d 
100,   //  e 
100,   //  f 
100,   //  g 
100,   //  h 
100,   //  i 
100,   //  j 
100,   //  k 
100,   //  l 
100,   //  m 
100,   //  n 
100,   //  o 
100,   //  p 
100,   //  q 
100,   //  r 
100,   //  s 
100,   //  t 
100,   //  u 
100,   //  v 
100,   //  w 
100,   //  x 
100,   //  y 
100,   //  z 
100,   //  { 
100,   //  | 
100,   //  } 
100,   //  ~ 
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,   //   
100,100,100,100,100,100,100,100,100,100,100,100,100,100,   //   
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\bearuni.c ===
//This file containes the unigram table for the reliability estimates for Bear
//Added by Manish Goyal--mango--on 03/19/2002
#include "windows.h"
#include "reliable.h"
BYTE BearUni[UNIGRAM_SIZE]={
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 , 
100 ,   // ! 
44 ,   // " 
37 ,   // # 
14 ,   // $ 
72 ,   // % 
24 ,   // & 
100 ,   // ' 
38 ,   // ( 
30 ,   // ) 
100 ,   // * 
59 ,   // + 
30 ,   // , 
72 ,   // - 
33 ,   // . 
64 ,   // / 
6 ,   // 0 
13 ,   // 1 
8 ,   // 2 
6 ,   // 3 
5 ,   // 4 
8 ,   // 5 
12 ,   // 6 
7 ,   // 7 
6 ,   // 8 
9 ,   // 9 
36 ,   // : 
100 ,   // ; 
95 ,   // < 
97 ,   // = 
45 ,   // > 
65 ,   // ? 
8 ,   // @ 
16 ,   // A 
10 ,   // B 
26 ,   // C 
11 ,   // D 
23 ,   // E 
12 ,   // F 
22 ,   // G 
21 ,   // H 
46 ,   // I 
20 ,   // J 
25 ,   // K 
20 ,   // L 
15 ,   // M 
16 ,   // N 
34 ,   // O 
12 ,   // P 
3 ,   // Q 
16 ,   // R 
23 ,   // S 
19 ,   // T 
21 ,   // U 
13 ,   // V 
24 ,   // W 
31 ,   // X 
35 ,   // Y 
37 ,   // Z 
96 ,   // [ 
66 ,   // \ 
100 ,   // ] 
100 ,   // ^ 
90 ,   // _ 
100 ,   // ` 
18 ,   // a 
14 ,   // b 
9 ,   // c 
15 ,   // d 
12 ,   // e 
21 ,   // f 
14 ,   // g 
16 ,   // h 
20 ,   // i 
12 ,   // j 
33 ,   // k 
21 ,   // l 
39 ,   // m 
15 ,   // n 
18 ,   // o 
10 ,   // p 
14 ,   // q 
18 ,   // r 
18 ,   // s 
14 ,   // t 
18 ,   // u 
14 ,   // v 
13 ,   // w 
14 ,   // x 
17 ,   // y 
19 ,   // z 
84 ,   // { 
100 ,   // | 
83 ,   // } 
77 ,   // ~ 
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
51 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
29 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
18 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
14 ,   //  
100 ,   //  
100 ,   //  
12 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
14 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
11 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
13 ,   //  
100 ,   //  
100 ,   //  
100 ,   //  
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\charsupport.c ===
// charSupport.c
//
//Automatically generated by C:\nt\drivers\tabletpc\tpg\private\mrevow\quickies\chkCharMap\Debug\chkCharMap.exe
//using German Charmap Last updated 19 Oct 2001 - matches LM spec of 10/11/2001

#ifdef __cplusplus
extern "C" {
#endif

const unsigned char g_supportCharDesc[] = "Support character List built using German Charmap Last updated 19 Oct 2001 - matches LM spec of 10/11/2001";

const unsigned char g_supportChar [] = {
'!',
'"',
'#',
'$',
'%',
'&',
'\'',
'(',
')',
'*',
'+',
',',
'-',
'.',
'/',
'0',
'1',
'2',
'3',
'4',
'5',
'6',
'7',
'8',
'9',
':',
';',
'<',
'=',
'>',
'?',
'@',
'A',
'B',
'C',
'D',
'E',
'F',
'G',
'H',
'I',
'J',
'K',
'L',
'M',
'N',
'O',
'P',
'Q',
'R',
'S',
'T',
'U',
'V',
'W',
'X',
'Y',
'Z',
'[',
'\\',
']',
'^',
'_',
'a',
'b',
'c',
'd',
'e',
'f',
'g',
'h',
'i',
'j',
'k',
'l',
'm',
'n',
'o',
'p',
'q',
'r',
's',
't',
'u',
'v',
'w',
'x',
'y',
'z',
'{',
'|',
'}',
'~',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
'',
} ;

const int	g_cSupportChar = sizeof(g_supportChar) / sizeof(g_supportChar[0]);


#ifdef __cplusplus
}

#endif
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\geotabs.c ===
#include <normal.h>

const DIST AspectTab[] = {
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
1078,  213, // 0
1001,  274, // 1
1445,  228, // 2
1565,  368, // 3
1730,  322, // 4
 769,  250, // 5
1668,  386, // 6
1730,  355, // 7
1044,  167, // 8
1724,  391, // 9
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
1064,  107, // A
1484,  535, // B
1222,  313, // C
1035,  165, // D
1051,   89, // E
1033,  207, // F
1296,  279, // G
1344,  259, // H
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
1156,  148, // M
   0,    0, // 
   0,    0, // 
1312,  187, // P
   0,    0, // 
   0,    0, // 
1508,  468, // S
   0,    0, // 
   0,    0, // 
   0,    0, // 
 822,  270, // W
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
1047,  406, // a
1692,  240, // b
 856,  295, // c
2165,  571, // d
1068,  523, // e
1907,  262, // f
1866,  696, // g
2527,  838, // h
4958, 9526, // i
   0,    0, // 
1975,  450, // k
2932, 1659, // l
 545,  134, // m
 876,  408, // n
1274,  506, // o
2367, 1120, // p
   0,    0, // 
2197, 1487, // r
1056,  277, // s
2595, 1588, // t
 981,  482, // u
   0,    0, // 
   0,    0, // 
   0,    0, // 
5955, 5982, // y
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
1376,   62, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0, // 
   0,    0 // 
};
=== C:/Users/treeman/Desktop/windows nt source code\Source\XPSP1\NT\drivers\tpg\hwx\avalanche\src\deu\geotabs1.c ===
#include <normal.h>

const DIST MidPointTab[] = {
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
5942, 2581, // 0 3
6809, 2821, // 0 4
   0,    0, // 0 
4716, 1900, // 0 6
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 0 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
3929,  718, // 1 2
   0,    0, // 1 
3618, 1246, // 1 4
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 1 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
5592, 1896, // 2 0
4037,  625, // 2 1
3344,  573, // 2 2
   0,    0, // 2 
   0,    0, // 2 
4231, 1368, // 2 5
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 2 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
3917, 1431, // 3 0
   0,    0, // 3 
3798, 1052, // 3 2
3401,  852, // 3 3
   0,    0, // 3 
4117, 1819, // 3 5
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 3 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
4396, 1591, // 4 0
5213, 1531, // 4 1
   0,    0, // 4 
3698, 1329, // 4 3
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
3826, 1458, // 4 8
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 4 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
3689,  272, // 5 2
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
5780, 2254, // 5 9
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 5 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
4156, 1303, // 6 0
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
5683, 1583, // 6 4
   0,    0, // 6 
   0,    0, // 6 
6176,  793, // 6 7
   0,    0, // 6 
4202, 1545, // 6 9
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 6 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
5339,  518, // 7 6
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 7 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
4163, 1458, // 8 9
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 8 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, // 9 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
5371, 1998, // A n
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // A 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // B 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // C 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // D 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // E 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
3595, 1513, // F r
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // F 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
4324, 1594, // G m
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
3599,  241, // G y
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // G 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, // H 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
4543, 1522, // M a
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, // M 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, // P 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, // S 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, // W 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
6277, 2648, // a c
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
10645, 2842, // a i
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
11195, 3244, // a m
10080, 4827, // a n
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
9556, 4885, // a r
15112, 1276, // a s
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // a 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
3776, 1256, // b H
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // b 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
10929, 4282, // c h
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // c 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // d 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
8236, 5154, // e i
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
7250, 2527, // e n
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
6669, 4099, // e r
   0,    0, // e 
11382, 4907, // e t
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // e 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
3076, 1260, // f u
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // f 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
3534,  785, // g e
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // g 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
3825, 1164, // h e
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // h 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
5193, 1988, // i c
   0,    0, // i 
4184, 1397, // i e
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
4287, 1854, // i n
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
4063, 1534, // i s
   0,    0, // i 
6174,  615, // i u
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, // i 
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, //  
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
3705, 1663, // k f
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // k 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
3739, 1310, // l e
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
3489,  802, // l i
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // l 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
8444, 2867, // m b
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
12827,  777, // m n
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
   0,    0, // m 
 